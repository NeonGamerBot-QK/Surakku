(() => {
  var Pl = Object.defineProperty;
  var _ = (W, A) =>
    Pl(W, "name", {
      value: A,
      configurable: !0,
    });
  (globalThis.webpackChunkwebapp = globalThis.webpackChunkwebapp || []).push([
    ["client-boot"],
    {
      983107878: (W, A, e) => {
        W.exports = e.p + "ava_0002-192-0ddd598.png";
      },
      2256285620: (W, A, e) => {
        W.exports = e.p + "ava_0002-24-f65dddc.png";
      },
      6906793909: (W, A, e) => {
        W.exports = e.p + "ava_0002-32-798f043.png";
      },
      1060768686: (W, A, e) => {
        W.exports = e.p + "ava_0002-48-d3ba4ec.png";
      },
      2979422297: (W, A, e) => {
        W.exports = e.p + "ava_0002-72-c702398.png";
      },
      3224273568: (W, A, e) => {
        W.exports = e.p + "ava_0022-192-0cc433a.png";
      },
      2316786074: (W, A, e) => {
        W.exports = e.p + "ava_0022-24-21468d4.png";
      },
      3708998647: (W, A, e) => {
        W.exports = e.p + "ava_0022-32-7779579.png";
      },
      5098468056: (W, A, e) => {
        W.exports = e.p + "ava_0022-48-93db11d.png";
      },
      4923972147: (W, A, e) => {
        W.exports = e.p + "ava_0022-72-5a52d67.png";
      },
      7752974446: (W, A, e) => {
        W.exports = e.p + "emoji_missing-39b2f0a.png";
      },
      5908540923: (W, A, e) => {
        W.exports = e.p + "No_Background-ad3fcdb.png";
      },
      3677363342: (W, A, e) => {
        W.exports = e.p + "active_speaker-dd1164a.gif";
      },
      4553218033: (W, A, e) => {
        W.exports = e.p + "beach-preview-33d7acf.jpg";
      },
      9679390338: (W, A, e) => {
        W.exports = e.p + "beach-33258eb.jpg";
      },
      7000154057: (W, A, e) => {
        W.exports = e.p + "gym-preview-cfff9c8.jpg";
      },
      553949882: (W, A, e) => {
        W.exports = e.p + "gym-4d948fc.jpg";
      },
      9631995895: (W, A, e) => {
        W.exports = e.p + "home-preview-8baaf03.jpg";
      },
      3342291988: (W, A, e) => {
        W.exports = e.p + "home-9e29930.jpg";
      },
      1779488764: (W, A, e) => {
        W.exports = e.p + "huddle-in-thread-da71b0e.png";
      },
      3607863955: (W, A, e) => {
        W.exports = e.p + "living_room-preview-1b54428.jpg";
      },
      5738074488: (W, A, e) => {
        W.exports = e.p + "living_room-a4fba85.jpg";
      },
      7485089530: (W, A, e) => {
        W.exports = e.p + "office-preview-de46de4.jpg";
      },
      5475210953: (W, A, e) => {
        W.exports = e.p + "office-98668ce.jpg";
      },
      8514307482: (W, A, e) => {
        W.exports = e.p + "remote_work-preview-5fbbc32.jpg";
      },
      4136357865: (W, A, e) => {
        W.exports = e.p + "remote_work-f8cd791.jpg";
      },
      7234375712: (W, A, e) => {
        W.exports = e.p + "tokyo_sight-preview-3554da9.jpg";
      },
      1672115571: (W, A, e) => {
        W.exports = e.p + "tokyo_sight-285d851.jpg";
      },
      2527471159: (W, A, e) => {
        W.exports = e.p + "slack-salesforce-211570d.png";
      },
      7972463975: (W, A, e) => {
        W.exports = e.p + "slack-salesforce@2x-06b5868.png";
      },
      2301861866: (W, A, e) => {
        W.exports = e.p + "slack_logo-ebd02d1.svg";
      },
      9994038664: (W, A, e) => {
        W.exports = e.p + "slack_logo_white_text-3cffbf2.svg";
      },
      3431559584: (W, A, e) => {
        W.exports = e.p + "slackbot_fancy_1024-9020761.png";
      },
      2200759559: (W, A, e) => {
        W.exports = e.p + "slackbot_fancy_192-fc3f24d.png";
      },
      8390767423: (W, A, e) => {
        W.exports = e.p + "slackbot_fancy_20-e2d1dcb.png";
      },
      1957386787: (W, A, e) => {
        W.exports = e.p + "slackbot_fancy_24-e726b64.png";
      },
      4245237474: (W, A, e) => {
        W.exports = e.p + "slackbot_fancy_32-176771b.png";
      },
      7523979550: (W, A, e) => {
        W.exports = e.p + "slackbot_fancy_36-d921f9d.png";
      },
      7272988726: (W, A, e) => {
        W.exports = e.p + "slackbot_fancy_360-29e9a8a.png";
      },
      77360885: (W, A, e) => {
        W.exports = e.p + "slackbot_fancy_48-8220eaf.png";
      },
      2261459203: (W, A, e) => {
        W.exports = e.p + "slackbot_fancy_512-8ab1a43.png";
      },
      451984622: (W, A, e) => {
        W.exports = e.p + "slackbot_fancy_72-9db8807.png";
      },
      7428983508: (W, A, e) => {
        W.exports = e.p + "slackbot_frowny_1024-f558ba5.png";
      },
      669259003: (W, A, e) => {
        W.exports = e.p + "slackbot_frowny_192-a0b99ba.png";
      },
      4165874747: (W, A, e) => {
        W.exports = e.p + "slackbot_frowny_20-96acbec.png";
      },
      1023719767: (W, A, e) => {
        W.exports = e.p + "slackbot_frowny_24-2246c7b.png";
      },
      3710970638: (W, A, e) => {
        W.exports = e.p + "slackbot_frowny_32-8a50a23.png";
      },
      4814900690: (W, A, e) => {
        W.exports = e.p + "slackbot_frowny_36-a7f6cbd.png";
      },
      7331486018: (W, A, e) => {
        W.exports = e.p + "slackbot_frowny_360-1cb4740.png";
      },
      7183565897: (W, A, e) => {
        W.exports = e.p + "slackbot_frowny_48-fdccd8c.png";
      },
      1001408479: (W, A, e) => {
        W.exports = e.p + "slackbot_frowny_512-955a74f.png";
      },
      1889110914: (W, A, e) => {
        W.exports = e.p + "slackbot_frowny_72-6d65a0f.png";
      },
      9948433110: (W, A, e) => {
        W.exports = e.p + "slackbot_neutral_1024-b58a548.png";
      },
      4948097913: (W, A, e) => {
        W.exports = e.p + "slackbot_neutral_192-e5cd9a1.png";
      },
      350135845: (W, A, e) => {
        W.exports = e.p + "slackbot_neutral_20-00a116e.png";
      },
      474239361: (W, A, e) => {
        W.exports = e.p + "slackbot_neutral_24-9a05991.png";
      },
      1302153452: (W, A, e) => {
        W.exports = e.p + "slackbot_neutral_32-44a4c24.png";
      },
      9825918216: (W, A, e) => {
        W.exports = e.p + "slackbot_neutral_36-c6ff0eb.png";
      },
      5908867676: (W, A, e) => {
        W.exports = e.p + "slackbot_neutral_360-7309dbd.png";
      },
      3333214639: (W, A, e) => {
        W.exports = e.p + "slackbot_neutral_48-9906623.png";
      },
      2295488157: (W, A, e) => {
        W.exports = e.p + "slackbot_neutral_512-dcb310c.png";
      },
      5156772208: (W, A, e) => {
        W.exports = e.p + "slackbot_neutral_72-79b9eaa.png";
      },
      4063699741: (W, A, e) => {
        W.exports = e.p + "slackbot_sad_surprise_1024-337ff51.png";
      },
      9241168512: (W, A, e) => {
        W.exports = e.p + "slackbot_sad_surprise_192-3c6a8ea.png";
      },
      3963460214: (W, A, e) => {
        W.exports = e.p + "slackbot_sad_surprise_20-5bfbe5a.png";
      },
      9267813754: (W, A, e) => {
        W.exports = e.p + "slackbot_sad_surprise_24-d519530.png";
      },
      2981982679: (W, A, e) => {
        W.exports = e.p + "slackbot_sad_surprise_32-5479e94.png";
      },
      9833689275: (W, A, e) => {
        W.exports = e.p + "slackbot_sad_surprise_36-6982f8c.png";
      },
      4840951141: (W, A, e) => {
        W.exports = e.p + "slackbot_sad_surprise_360-aff835a.png";
      },
      9777215928: (W, A, e) => {
        W.exports = e.p + "slackbot_sad_surprise_48-7871f8b.png";
      },
      7129884748: (W, A, e) => {
        W.exports = e.p + "slackbot_sad_surprise_512-c8291ff.png";
      },
      9602720019: (W, A, e) => {
        W.exports = e.p + "slackbot_sad_surprise_72-ffaf19c.png";
      },
      7626894131: (W, A, e) => {
        W.exports = e.p + "de-DE-7cb5203.vtt";
      },
      29804293: (W, A, e) => {
        W.exports = e.p + "en-GB-fe540d9.vtt";
      },
      7749140866: (W, A, e) => {
        W.exports = e.p + "en-US-638cf9c.vtt";
      },
      5913806097: (W, A, e) => {
        W.exports = e.p + "es-ES-2c09d56.vtt";
      },
      6636363964: (W, A, e) => {
        W.exports = e.p + "es-LA-ea2cf27.vtt";
      },
      9916635837: (W, A, e) => {
        W.exports = e.p + "fr-FR-aca8347.vtt";
      },
      5760619139: (W, A, e) => {
        W.exports = e.p + "it-IT-5979abe.vtt";
      },
      668694090: (W, A, e) => {
        W.exports = e.p + "ja-JP-8bffdf3.vtt";
      },
      555040584: (W, A, e) => {
        W.exports = e.p + "ko-KR-368325f.vtt";
      },
      6820844347: (W, A, e) => {
        W.exports = e.p + "paid-feature-education-bcf658e.mp4";
      },
      1347747715: (W, A, e) => {
        W.exports = e.p + "paid-feature-education-4fcc827.png";
      },
      8187362417: (W, A, e) => {
        W.exports = e.p + "pt-BR-4dd5817.vtt";
      },
      2005200212: (W, A, e) => {
        W.exports = e.p + "zh-CN-7893376.vtt";
      },
      2563333228: (W, A, e) => {
        W.exports = e.p + "zh-TW-bf2d05a.vtt";
      },
      6754250580: (W, A, e) => {
        W.exports = e.p + "de-DE-e5da613.vtt";
      },
      1714394002: (W, A, e) => {
        W.exports = e.p + "en-GB-b949ba6.vtt";
      },
      6435768457: (W, A, e) => {
        W.exports = e.p + "en-US-823d419.vtt";
      },
      7417918922: (W, A, e) => {
        W.exports = e.p + "es-ES-fb9bba0.vtt";
      },
      6869712815: (W, A, e) => {
        W.exports = e.p + "es-LA-1d17cb9.vtt";
      },
      8089589194: (W, A, e) => {
        W.exports = e.p + "fr-FR-0161472.vtt";
      },
      5748605292: (W, A, e) => {
        W.exports = e.p + "it-IT-f18ddbd.vtt";
      },
      4071181961: (W, A, e) => {
        W.exports = e.p + "ja-JP-8d6863a.vtt";
      },
      8071475775: (W, A, e) => {
        W.exports = e.p + "ko-KR-b3589ec.vtt";
      },
      9733499682: (W, A, e) => {
        W.exports = e.p + "pt-BR-50fe7dc.vtt";
      },
      6050136004: (W, A, e) => {
        W.exports = e.p + "thumbnail-71d0c1e.png";
      },
      5006029593: (W, A, e) => {
        W.exports = e.p + "video-9e16c67.mp4";
      },
      9753292423: (W, A, e) => {
        W.exports = e.p + "zh-CN-f0c9d6c.vtt";
      },
      3289703835: (W, A, e) => {
        W.exports = e.p + "zh-TW-438dba1.vtt";
      },
      7260399618: (W, A, e) => {
        W.exports = e.p + "apps-0205318.png";
      },
      3555024406: (W, A, e) => {
        W.exports = e.p + "canvas-27b164f.png";
      },
      6362113145: (W, A, e) => {
        W.exports = e.p + "huddles-65511ae.png";
      },
      5612399517: (W, A, e) => {
        W.exports = e.p + "lists-a03762f.png";
      },
      9754713110: (W, A, e) => {
        W.exports = e.p + "messages-cf1cdcf.png";
      },
      8644018899: (W, A, e) => {
        W.exports = e.p + "slack-connect-4779df0.png";
      },
      8720577475: (W, A, e) => {
        W.exports = e.p + "templates-26a2d87.png";
      },
      6627147571: (W) => {
        W.exports = {
          accordion: "accordion__kLx8x",
          item: "item__MTv17",
          expanded: "expanded__G1WSM",
          noBorder: "noBorder__Bkdii",
          itemHeader: "itemHeader__rqviz",
          expandedIcon: "expandedIcon__a6bDs",
          header: "header__Mu2fJ",
          descriptionWrapper: "descriptionWrapper__GmU1i",
          description: "description__RSIZO",
          iconSpacer: "iconSpacer__a8u1y",
          imageCaret: "imageCaret__ZFZoY",
        };
      },
      5672691263: (W) => {
        W.exports = {
          container: "container__oDwNj",
          primaryIcon: "primaryIcon__aDIDO",
          secondaryIcon: "secondaryIcon__KuIYv",
        };
      },
      7573583373: (W) => {
        W.exports = {
          proBadge: "proBadge__a6OQu",
          container: "container__lJGtV",
          alertBanner: "alertBanner__xNhoq",
          cta: "cta__tEXdP",
        };
      },
      9295473340: (W) => {
        W.exports = {
          videoAndDevicesContainer: "videoAndDevicesContainer__NVELK",
          videoContainer: "videoContainer__XjCxI",
          videoPreview: "videoPreview__hMjwB",
          videoInnerContainer: "videoInnerContainer__lO7xn",
        };
      },
      1535211300: (W) => {
        W.exports = {
          container: "container__ExpEn",
          device: "device__Wqu1p",
        };
      },
      2458754542: (W) => {
        W.exports = {
          modal: "modal__v1OWN",
        };
      },
      9632269965: (W) => {
        W.exports = {
          container: "container__rto70",
        };
      },
      2688127376: (W) => {
        W.exports = {
          container: "container__bqBHK",
          toolbarButton: "toolbarButton__uaxi2",
        };
      },
      5671227444: (W) => {
        W.exports = {
          inlineAudioMeterContainer: "inlineAudioMeterContainer__Y3vlI",
          inlineAudioMeter: "inlineAudioMeter__XIoND",
        };
      },
      3416652175: (W) => {
        W.exports = {
          spaceNameContainer: "spaceNameContainer__Up4ES",
          spaceName: "spaceName__e2eNG",
          notificationName: "notificationName__PLxJo",
          notificationList: "notificationList__K7YI_",
          formError: "formError__RF0wt",
          textArea: "text-area__GqSis",
          alert: "alert__gmI86",
          alertText: "alertText__WNqBZ",
        };
      },
      397939223: (W) => {
        W.exports = {
          dispatcherViewer: "dispatcherViewer__MqLHN",
          container: "container__JbqvN",
          dispatcherViewerIcon: "dispatcherViewerIcon__TTCBH",
          xDispatcher__viewer_iconPulse:
            "x-dispatcher__viewer_icon--pulse__rzHrs",
          dispatcherViewerDetails: "dispatcherViewerDetails__HF2Tz",
        };
      },
      9598582073: (W) => {
        W.exports = {
          bodyContainer: "bodyContainer__XdYx2",
          listContainer: "listContainer__Q03_Y",
          videoContainer: "videoContainer__zFTj5",
          proBadge: "proBadge__vbDah",
          title: "title__I2qJO",
          subtitle: "subtitle__lKLAD",
          ctaButton: "ctaButton__KoQEK",
          modalBackground: "modalBackground__eUyLk",
        };
      },
      6696573656: (W) => {
        W.exports = {
          featuresListContainer: "featuresListContainer__Wztys",
          icon: "icon__oy3IT",
          title: "title__OyvRi",
          text: "text__lXfZb",
        };
      },
      5577296129: (W) => {
        W.exports = {
          featureImage: "featureImage__GCGJB",
        };
      },
      8985946788: (W) => {
        W.exports = {
          accordionFeatureListModal: "accordionFeatureListModal__XY4l2",
          horchataBg: "horchataBg__Z4qYV",
          aubergineBg: "aubergineBg__XTvzG",
          horchataCaret: "horchataCaret__z5j66",
          aubergineCaret: "aubergineCaret__Ln6eA",
          bodyContainer: "bodyContainer__WwREe",
          listContainer: "listContainer__RAODJ",
          header: "header__A7Fx9",
          title: "title__w5UXN",
          subtitle: "subtitle__GJpvo",
          accordionListContainer: "accordionListContainer__ZhxlB",
          accordionItem: "accordionItem__N3S6I",
          imageContainer: "imageContainer__I5MJj",
          upgradeCta: "upgradeCta__gvG2D",
          spinner: "spinner__D0NVf",
          footer: "footer__cNZ0p",
          accordionItemHeaderButton: "accordionItemHeaderButton__klUaK",
          accordionItemHeader: "accordionItemHeader__SDi13",
          accordionItemDescription: "accordionItemDescription__P1u4j",
          accordionExpandedIcon: "accordionExpandedIcon__a2fMf",
          accordionCollapsedIcon: "accordionCollapsedIcon__KurIq",
        };
      },
      3366751172: (W) => {
        W.exports = {
          footer: "footer__q8kg4",
          cta: "cta__x1pLT",
          light: "light__adKpp",
          disclaimer: "disclaimer__i655U",
          link: "link__ISsu1",
        };
      },
      3346098136: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => g,
          T: () => m,
        });
        var t = e(5824283093),
          n = e(9391594207),
          s = e(2322735331),
          i = e(735940183),
          d = e(6839188756),
          o = e(3677514771),
          a = e(8847766420),
          r = e(581167618),
          c = e(5536692738),
          u = e(6117529990);
        const l = new i.Ay("enterprise_calls");
        var m;
        (function (I) {
          (I.GLOBAL = "GLOBAL"), (I.US = "US");
        })(m || (m = {}));
        const v = [
          {
            label: l.t("Global", {
              fallbackHash: "5f1184f7df96c5928092ad9c6b550699bf887826",
              fallbackHashNs: "enterprise_dashboard",
            }),
            value: m.GLOBAL,
          },
          {
            label: l.t("US", {
              fallbackHash: "aa3093554472fd113135bed5b63e12f84c2e9fe8",
              fallbackHashNs: "enterprise_dashboard",
            }),
            value: m.US,
          },
        ];
        let E = _(
          class extends t.Component {
            render() {
              const {
                  appsState: f,
                  featureCallsLocationLock: y,
                  isLockedByOrgAdmin: M,
                  selectedCallLocation: p,
                  isFreeTeam: O,
                } = this.props,
                C =
                  f && f.video && Object.keys(f.video).find((K) => K === "A00");
              if (!y || !C || O) return null;
              const h = v.find((K) => K.value === p),
                D = y
                  ? l.t(
                      "Slack Calls will be restricted and routed through selected regions only."
                    )
                  : "Slack Calls will be restricted and routed through selected regions only.",
                P = y ? l.t("Call location options") : "Call location options",
                S = y
                  ? l.t(
                      "Limiting to certain regions may reduce call performance or block joining calls in some circumstances."
                    )
                  : "Limiting to certain regions may reduce call performance or block joining calls in some circumstances.",
                b = y
                  ? l.t("Slack calls are restricted by Org admin")
                  : "Slack calls are restricted by Org admin";
              return t.createElement(
                t.Fragment,
                null,
                t.createElement(
                  "div",
                  {
                    "data-qa": "calls-location-container",
                    className:
                      "border_top padding_top_100 p-calls_location_lock__container",
                  },
                  t.createElement(
                    "span",
                    {
                      className: "p-calls_location_lock__title",
                    },
                    y ? l.t("Calls location") : "Calls location"
                  ),
                  t.createElement(
                    "span",
                    {
                      className: "p-calls_location_lock__description",
                    },
                    D
                  ),
                  t.createElement(
                    "div",
                    {
                      className: "p-calls_location_lock__options_container",
                    },
                    t.createElement(c.Ay, {
                      className: "p-calls_location_lock__options",
                      size: "medium",
                      isDisabled: M,
                      options: v,
                      selectedOption: h,
                      onOptionSelected: this.handleOptionSelected,
                      ariaLabel: P,
                    }),
                    M &&
                      t.createElement(
                        "span",
                        {
                          className:
                            "p-calls_location_lock__options_disable_reason",
                        },
                        b
                      )
                  )
                ),
                p === m.US &&
                  t.createElement(
                    r.Ay,
                    {
                      type: r.QE.boxed,
                      level: r.A_.warning,
                      icon: "warning",
                      align: r.AO.left,
                      className: "p-calls_location_lock__alert",
                    },
                    t.createElement("span", null, S)
                  )
              );
            }
            handleOptionSelected(f) {
              this.props.setSelectedCallLocation(f.value);
            }
            constructor(f) {
              super(f), (0, s.v)(this, ["handleOptionSelected"]);
            }
          },
          "CallsRegionLockOptions"
        );
        E.displayName = "CallsRegionLockOptions";
        const T = _((I) => {
            const f = (0, a.jV)(I);
            return {
              isFreeTeam: !(0, d.qR)((0, o.H7)(I)) && !f,
              featureCallsLocationLock: (0, u.XY)(I),
            };
          }, "mapStateToProps"),
          g = (0, n.N)(T)(E);
      },
      1223723593: (W, A, e) => {
        "use strict";
        e.d(A, {
          wl: () => oe,
          JG: () => F,
          uy: () => ve,
          bM: () => ae,
          Ox: () => de,
          A9: () => z,
          fD: () => Ae,
        });
        var t = e(5824283093),
          n = e(9391594207),
          s = e(3783303734),
          i = e(9113979368),
          d = e(3867135795),
          o = e(45851552),
          a = e(1649982175),
          r = e(1224315998),
          c = e(5795074931),
          u = e(8462077367),
          l = e(7138682671),
          m = e(3165300465),
          v = e(581167618),
          E = e(1610251172),
          T = e(3989454579),
          g = e(1743656885),
          I = e(5597672932),
          f = e(6117529990);
        const y = _((N) => !(0, f.BD)(N), "isOrgCallsAppsSettingsEnabled");
        var M = e(766806),
          p = e(56548687);
        const O = _((N) => {
            let {
              callsApps: L,
              allowCalls: w,
              clogger: k,
              action: J,
              stepVariant: ee,
            } = N;
            const ne = {
              allow_calls: w,
            };
            L &&
              L.video &&
              L.video.length > 0 &&
              (ne.video_call_app_ids = L.video.map((pe) => pe.id)),
              L &&
                L.audio &&
                L.audio.length > 0 &&
                (ne.audio_call_app_ids = L.audio.map((pe) => pe.id)),
              L &&
                L.profile_field_options &&
                L.profile_field_options.length > 0 &&
                (ne.profile_field_option_ids = L.profile_field_options.map(
                  (pe) => pe.id
                )),
              k.track(r.EventId.CALLS_ADMIN_PHONE_INTEGRATION, {
                ...ne,
                contexts: {
                  ui_context: {
                    step: r.UiStep.CALLS_ADMIN_SAVE_CALLS_APPS,
                    action: J,
                    entry_point: "calls-workspace-admin",
                    step_variant: ee,
                  },
                },
              });
          }, "clogCallsApps"),
          C = _((N) => {
            let { clogger: L } = N;
            L.track(r.EventId.CALLS_ADMIN_PHONE_INTEGRATION, {
              contexts: {
                ui_context: {
                  step: r.UiStep.CALLS_ADMIN_SAVE_CALLS_APPS,
                  action: r.UiAction.LEARN_MORE,
                  is_primary_cta: !0,
                  ui_properties: {
                    element_type: r.ElementType.LINK,
                    element_name: "calls-admin-save-multiple-call-apps",
                  },
                },
              },
            });
          }, "clogLinkToPaidPlans");
        var h = e(1031947056);
        const D = (0, h.Ay)(
          "Clog a standardized click event when a workspace setting is saved",
          (N, L, w) => {
            let { eventId: k, uiStep: J, stepVariant: ee } = w;
            (0, p.e)({
              getState: L,
            }).track(k, {
              contexts: {
                ui_context: {
                  ui_step: J,
                  step_variant: ee,
                  ui_properties: {
                    element_type: r.ElementType.BUTTON,
                    element_name: "submit_button",
                  },
                  action: r.UiAction.CLICK,
                  is_primary_cta: !0,
                },
              },
            });
          }
        );
        D.meta = {
          name: "createThunk",
          key: "createThunkclogWorkspaceSettingSubmit",
          description:
            "Clog a standardized click event when a workspace setting is saved",
        };
        const P = D;
        var S = e(3677514771),
          b = e(6839188756),
          K = e(6323355797),
          x = e(980293773),
          B = e(735940183),
          U = e(3346098136),
          R = e(462591818);
        const G = new B.Ay("calls_admin"),
          H = "only_available_for_paid_teams";
        var F;
        (function (N) {
          (N.Video = "video"),
            (N.Audio = "audio"),
            (N.ProfileFieldOptions = "profile_field_options");
        })(F || (F = {}));
        const V = _((N) => {
          let {
            type: L,
            app: w,
            isChecked: k,
            onChangeCallApp: J,
            isLocked: ee,
          } = N;
          const ne = (0, t.useCallback)(() => J(L, w.id), [J, L, w]),
            pe = `${L}_${w.id}`;
          return t.createElement(
            l.A,
            {
              text: w.name,
              type: "inline",
              cursor: "pointer",
            },
            t.createElement(T.A, {
              id: pe,
              name: w.name,
              checked: k,
              onChange: ne,
              disabled: ee,
              "data-qa": pe,
            })
          );
        }, "AppCheckbox");
        V.displayName = "AppCheckbox";
        const X = _((N) => {
            let { appsState: L, isLocked: w, type: k } = N;
            return !w || !L
              ? !1
              : (k === F.Video &&
                  (0, s.A)(L.video) > 0 &&
                  (0, s.A)(L.audio) === 0) ||
                  (k === F.Audio &&
                    (0, s.A)(L.audio) > 0 &&
                    (0, s.A)(L.video)) === 0;
          }, "disableTypeCheckbox"),
          q = _((N) => {
            let { appsState: L, isLocked: w, appId: k, type: J } = N;
            if (!w || !L) return !1;
            const ee = L.video ? Object.keys(L.video) : [],
              ne = L.audio ? Object.keys(L.audio) : [],
              pe = ee.length + ne.length;
            if (k && pe === 1) {
              let Me, ke;
              return (
                ee.length === 1
                  ? ((Me = ee[0]), (ke = F.Video))
                  : ne.length === 1 && ((Me = ne[0]), (ke = F.Audio)),
                k === Me && J === ke
              );
            }
            return !1;
          }, "disableAppCheckbox"),
          oe = _((N) => {
            let {
              type: L,
              sectionTitle: w,
              appsState: k,
              installedCallApps: J,
              onChangeCallType: ee,
              onChangeCallApp: ne,
              isLocked: pe,
              dataQa: Me,
            } = N;
            if (!J || !k || !J[L]) return null;
            const ke = `enable_${L}_calls`;
            return t.createElement(
              "div",
              {
                className: `p-calls_workspace_settings__${L}_container`,
                "data-qa": Me,
              },
              t.createElement(
                l.A,
                {
                  text: w,
                  type: "inline",
                  cursor: "pointer",
                },
                t.createElement(T.A, {
                  checked: !(0, i.A)(k[L]),
                  id: ke,
                  name: ke,
                  onChange: ee,
                  disabled: X({
                    appsState: k,
                    isLocked: pe,
                    type: L,
                  }),
                })
              ),
              t.createElement(
                "p",
                {
                  className: "p-calls_workspace_settings__options_title",
                },
                G.t("Calling options:")
              ),
              t.createElement(
                "div",
                {
                  className: "p-calls_workspace_settings__calls_apps",
                },
                [...J[L]].map((ge) =>
                  t.createElement(V, {
                    app: ge,
                    isChecked: (0, d.A)(k[L], ge.id),
                    key: `${L}_${ge.id}`,
                    onChangeCallApp: ne,
                    type: L,
                    isLocked: q({
                      appsState: k,
                      isLocked: pe,
                      appId: ge.id,
                      type: L,
                    }),
                  })
                )
              )
            );
          }, "CallSection");
        oe.displayName = "CallSection";
        const z = _((N) => {
            let {
              installedCallApps: L,
              appsState: w,
              appId: k,
              type: J,
              setAppsState: ee,
            } = N;
            if (!L || !w) return;
            const ne = {
              ...w[J],
            };
            if ((0, d.A)(ne, k))
              delete ne[k],
                ee({
                  ...w,
                  [J]: ne,
                });
            else {
              const pe = (0, o.A)(L[J], (Me) => Me.id === k);
              pe > -1 &&
                ((ne[k] = pe),
                ee({
                  ...w,
                  [J]: ne,
                }));
            }
          }, "toggleCallApp"),
          Ae = _((N) => {
            let {
              installedCallApps: L,
              appsState: w,
              type: k,
              setAppsState: J,
            } = N;
            if (!(!w || !L))
              if (!(0, i.A)(w[k]))
                J({
                  ...w,
                  [k]: {},
                });
              else {
                var ee;
                const ne = {};
                (ee = L[k]) === null ||
                  ee === void 0 ||
                  ee.forEach((pe, Me) => {
                    ne[pe.id] = Me;
                  }),
                  J({
                    ...w,
                    [k]: ne,
                  });
              }
          }, "toggleCallType"),
          ae = _((N, L) => {
            const w = {
              video: {},
              audio: {},
              profile_field_options: {},
            };
            return (
              !L ||
                !N ||
                [F.Video, F.Audio, F.ProfileFieldOptions].forEach((k) => {
                  L[k] &&
                    [...L[k]].forEach((ee) => {
                      const ne = (0, o.A)(N[k], (pe) => pe.id === ee.id);
                      ne > -1 && (w[k][ee.id] = ne);
                    });
                }),
              w
            );
          }, "reduceTeamPrefApps"),
          de = _(function () {
            let { installedCallApps: N, appsState: L } =
              arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : {};
            const w = {
              video: [],
              audio: [],
            };
            return (
              !N ||
                !L ||
                [F.Video, F.Audio].forEach((k) => {
                  if (N[k]) {
                    const J = [...N[k]],
                      ee = L[k];
                    J.forEach((ne) => {
                      if ((0, d.A)(ee, ne.id)) {
                        var pe;
                        (pe = w[k]) === null ||
                          pe === void 0 ||
                          pe.push((0, a.A)(ne, "preselected"));
                      }
                    });
                  }
                }),
              w
            );
          }, "setCallsAppsPayloadToSave"),
          ve = _((N) => {
            if (!N || !N.video) return;
            const L = N.video.findIndex((w) => w.id === R.rq);
            L >= 0 && N.video.splice(L, 1);
          }, "filterNativeCallsApp"),
          Se = _((N) => {
            let {
              isOpen: L,
              closeModal: w,
              errorMessage: k,
              buttonLabel: J,
            } = N;
            return t.createElement(
              x.dW,
              {
                centered: !0,
                isOpen: L,
                closeModal: w,
              },
              t.createElement(
                x.$m,
                {
                  className: "p-calls_workspace_settings__error_modal",
                },
                t.createElement(x.qf, null, t.createElement("p", null, k))
              ),
              t.createElement(
                x.jl,
                null,
                t.createElement(
                  x.ox,
                  null,
                  t.createElement(
                    x.s_,
                    {
                      type: "outline",
                      onClick: w,
                      "aria-label": J,
                    },
                    J
                  )
                )
              )
            );
          }, "ErrorModal");
        Se.displayName = "ErrorModal";
        const Ee = _((N) => {
          let {
            installedCallApps: L,
            teamPrefCallsApps: w,
            setMultipleTeamPrefsByApi: k,
            clogWorkspaceSettingSubmit: J,
            isLocked: ee,
            isCallsSelectorDisabled: ne,
            clogger: pe,
            isOrgCallsAppsSettingsEnabled: Me,
            team: ke,
            isCallsLocationLockedByOrgAdmin: ge,
            callsLocationLocked: fe,
          } = N;
          const [re, le] = (0, t.useState)(!1),
            [Re, ye] = (0, t.useState)(""),
            Te = G.t("Save"),
            De = G.t("Saved"),
            Ue = G.t("Sorry! Something went wrong. Please try again."),
            Ke = G.t("Allow third-party calls in Slack"),
            Ze = G.t(
              "Allow phone number calls in Slack (only in direct messages)"
            ),
            Q = G.t("Ok"),
            ie = G.t(
              "Sorry, call selection is currently managed by your organization admin."
            ),
            Ve = G.rt(
              "First install a <a>calling app from the Slack Marketplace</a> then come back here to enable it as a default calling app.",
              {
                fallbackHash: "bafa98560255a22c3a110fefa9689c8eb16c6c93",
              },
              (Mt) => {
                let { text: Jt } = Mt;
                return t.createElement(
                  g.A,
                  {
                    articleId: 208492868,
                  },
                  Jt
                );
              }
            ),
            xe = (0, t.useCallback)(() => {
              C({
                clogger: pe,
              }),
                (0, b.gC)(
                  ke,
                  (0, K.hZ)({
                    entryPoint: "calls-admin-workspace-settings",
                  })
                );
            }, [pe, ke]),
            je = G.rt(
              "Sorry, this feature is only available to <a>paid teams</a>.",
              {
                fallbackHash: "48faa2ac6ac6d273cd7dacbe15a5b6f7e1822087",
              },
              (Mt) => {
                let { text: Jt } = Mt;
                return t.createElement(
                  "a",
                  {
                    href: "#",
                    onClick: xe,
                    "data-qa": "paid_plan_page_link",
                  },
                  Jt
                );
              }
            ),
            Fe = w
              ? ae(L, w)
              : {
                  video: {},
                  audio: {},
                  profile_field_options: {},
                },
            [He, Oe] = (0, t.useState)(Fe),
            [Ye, at] = (0, t.useState)(!1),
            [_t, pt] = (0, t.useState)(!1),
            Qe = fe && fe.length > 0 ? U.T.US : U.T.GLOBAL,
            [ct, Pt] = (0, t.useState)(Qe);
          (0, t.useEffect)(() => {
            const Mt = ae(L, w);
            Oe(Mt);
          }, [Oe, L, w]);
          const zt = (0, t.useCallback)(
              (Mt) => {
                pt(!1),
                  Ae({
                    installedCallApps: L,
                    appsState: He,
                    type: Mt,
                    setAppsState: Oe,
                  });
              },
              [L, He, Oe]
            ),
            an = (0, t.useCallback)(() => zt(F.Video), [zt]),
            Qt = (0, t.useCallback)(() => zt(F.Audio), [zt]),
            tn = (0, t.useCallback)(() => le(!1), [le]),
            Ht = (0, t.useCallback)(
              (Mt, Jt) => {
                pt(!1),
                  z({
                    installedCallApps: L,
                    appsState: He,
                    appId: Jt,
                    type: Mt,
                    setAppsState: Oe,
                  });
              },
              [L, He, Oe]
            ),
            Kt = (0, t.useCallback)(
              (Mt) => {
                Pt(Mt), pt(!1);
              },
              [Pt]
            ),
            qt = _(() => {
              at(!0),
                J({
                  eventId: r.EventId.ADMIN_TEAM_SETTINGS,
                  uiStep: "change_enable_calls",
                });
              const Mt = !(0, i.A)(He.video) || !(0, i.A)(He.audio),
                Jt = de({
                  installedCallApps: L,
                  appsState: He,
                }),
                dn = {
                  calls_apps: Jt,
                };
              (0, b.r7)(ke) || (dn.allow_calls = Mt),
                ge || (dn.calls_locations = ct === U.T.US ? [ct] : []),
                k({
                  prefs: dn,
                })
                  .then(() => {
                    pt(!0),
                      O({
                        callsApps: Jt,
                        allowCalls: Mt,
                        clogger: pe,
                        action: r.UiAction.SAVE,
                      });
                  })
                  .catch((rn) => {
                    var gn;
                    le(!0),
                      (rn == null || (gn = rn.data) === null || gn === void 0
                        ? void 0
                        : gn.error) === H
                        ? (ye(je),
                          O({
                            callsApps: Jt,
                            allowCalls: Mt,
                            clogger: pe,
                            action: r.UiAction.ERROR,
                            stepVariant: H,
                          }))
                        : (ye(Ue),
                          O({
                            callsApps: Jt,
                            allowCalls: Mt,
                            clogger: pe,
                            action: r.UiAction.ERROR,
                          }));
                  })
                  .finally(() => at(!1));
            }, "onSubmit"),
            Tn =
              L &&
              ((L.video && L.video.length > 0) ||
                (L.audio && L.audio.length > 0));
          return t.createElement(
            "div",
            {
              key: "calls_workspace_settings",
              className: "p-calls_workspace_settings",
            },
            ne && Me
              ? t.createElement(
                  v.Ay,
                  {
                    type: "boxed",
                    level: "info",
                    icon: "info",
                    align: "left",
                    "data-qa": "org_calls_apps_alert_selector_disabled",
                  },
                  t.createElement("span", null, ie)
                )
              : t.createElement(
                  t.Fragment,
                  null,
                  !Tn &&
                    t.createElement(
                      v.Ay,
                      {
                        type: "boxed",
                        level: "info",
                        icon: "info",
                        align: "left",
                      },
                      t.createElement("span", null, Ve)
                    ),
                  t.createElement(
                    "div",
                    {
                      className: "p-calls_workspace_settings__call_options",
                    },
                    L &&
                      L.video &&
                      L.video.length > 0 &&
                      t.createElement(oe, {
                        type: F.Video,
                        sectionTitle: Ke,
                        appsState: He,
                        installedCallApps: L,
                        onChangeCallType: an,
                        onChangeCallApp: Ht,
                        isLocked: ee,
                      }),
                    L &&
                      L.audio &&
                      L.audio.length > 0 &&
                      t.createElement(oe, {
                        type: F.Audio,
                        sectionTitle: Ze,
                        appsState: He,
                        installedCallApps: L,
                        onChangeCallType: Qt,
                        onChangeCallApp: Ht,
                        isLocked: ee,
                      })
                  ),
                  t.createElement(U.A, {
                    appsState: He,
                    isLockedByOrgAdmin: ge,
                    selectedCallLocation: ct,
                    setSelectedCallLocation: Kt,
                  }),
                  t.createElement(Se, {
                    closeModal: tn,
                    isOpen: re,
                    errorMessage: Re,
                    buttonLabel: Q,
                  }),
                  Tn &&
                    t.createElement(
                      m.A,
                      {
                        onClick: qt,
                        loading: Ye,
                        "data-qa": "call_save_button",
                        "aria-label": _t ? De : Te,
                      },
                      _t &&
                        t.createElement(E.A, {
                          type: "check-circle-o",
                          className: "p-calls_workspace_settings_check_icon",
                        }),
                      _t ? De : Te
                    )
                )
          );
        }, "CallsWorkspaceSettings");
        Ee.displayName = "CallsWorkspaceSettings";
        const be = _((N) => {
            const L = (0, c.tV)(N, "calls_apps");
            ve(L);
            const w = (0, I.x)(N, "calls_apps"),
              k = (0, M.SI)(N, "calls_locations");
            return {
              installedCallApps: L,
              teamPrefCallsApps: w,
              clogger: (0, p.e)({
                state: N,
              }),
              isOrgCallsAppsSettingsEnabled: y(N),
              team: (0, S.H7)(N),
              isCallsLocationLockedByOrgAdmin: !!k && k.length > 0,
              callsLocationLocked: (0, I.x)(N, "calls_locations"),
            };
          }, "mapStateToProps"),
          Ce = {
            setMultipleTeamPrefsByApi: u.hz,
            clogWorkspaceSettingSubmit: P,
          },
          Z = {
            toggleCallApp: z,
            toggleCallType: Ae,
            AppCheckbox: V,
            reduceTeamPrefApps: ae,
            setCallsAppsPayloadToSave: de,
            disableTypeCheckbox: X,
            disableAppCheckbox: q,
          },
          $ = (0, n.N)(be, Ce)(Ee);
      },
      6909784049: (W, A, e) => {
        "use strict";
        e.d(A, {
          o: () => je,
        });
        var t = e(5824283093),
          n = e(9391594207),
          s = e(166097325),
          i = e(3300324857),
          d = e(462591818),
          o = e(8869734951),
          a = e(1641606663);
        function r() {
          return (
            (r =
              Object.assign ||
              function (Fe) {
                for (var He = 1; He < arguments.length; He++) {
                  var Oe = arguments[He];
                  for (var Ye in Oe)
                    Object.prototype.hasOwnProperty.call(Oe, Ye) &&
                      (Fe[Ye] = Oe[Ye]);
                }
                return Fe;
              }),
            r.apply(this, arguments)
          );
        }
        _(r, "_extends");
        let c = _(
          class extends t.PureComponent {
            componentDidMount() {
              var He;
              (He = this.context.windowRef.deref()) === null ||
                He === void 0 ||
                He.document.addEventListener("mouseup", this.onMouseUp);
            }
            componentWillUnmount() {
              var He;
              this.isDragging && this.onMouseUp(),
                (He = this.context.windowRef.deref()) === null ||
                  He === void 0 ||
                  He.document.removeEventListener("mouseup", this.onMouseUp);
            }
            onMouseDown(He) {
              var Oe;
              He.button === 0 &&
                ((this.isDragging = !0),
                (Oe = this.context.windowRef.deref()) === null ||
                  Oe === void 0 ||
                  Oe.document.addEventListener("mousemove", this.onMouseMove),
                this.props.onDragStart(He));
            }
            onMouseMove(He) {
              He.button === 0 && this.isDragging && this.props.onDragMove(He);
            }
            onMouseUp(He) {
              if (He && He.button !== 0) return;
              const Oe = this.isDragging;
              if (((this.isDragging = !1), Oe)) {
                var Ye;
                (Ye = this.context.windowRef.deref()) === null ||
                  Ye === void 0 ||
                  Ye.document.removeEventListener(
                    "mousemove",
                    this.onMouseMove
                  ),
                  this.props.onDragEnd(He);
              }
            }
            render() {
              const {
                  children: He,
                  refToForward: Oe,
                  onDragStart: Ye,
                  onDragMove: at,
                  onDragEnd: _t,
                  ...pt
                } = this.props,
                Qe = t.Children.only(this.props.children);
              return t.cloneElement(Qe, {
                ...pt,
                onMouseDown: (Pt) => this.onMouseDown(Pt),
                ref: (0, o.N)(Oe, Qe),
              });
            }
            constructor(He) {
              super(He),
                (this.isDragging = !1),
                (this.onMouseMove = this.onMouseMove.bind(this)),
                (this.onMouseUp = this.onMouseUp.bind(this));
            }
          },
          "BaseDragTarget"
        );
        (c.displayName = "BaseDragTarget"), (c.contextType = a.Mn);
        const u = t.forwardRef((Fe, He) =>
          t.createElement(
            c,
            r({}, Fe, {
              refToForward: He,
            })
          )
        );
        var l = e(387328355),
          m = e(1031947056),
          v = e(2825968873);
        const E = (0, v.tZ)("USER-ACTIONS"),
          T = (0, m.Ay)(
            "Logs user interaction with call window",
            (Fe, He, Oe) => {
              E.info(Oe);
            }
          );
        T.meta = {
          name: "createThunk",
          key: "createThunklogUserAction",
          description: "Logs user interaction with call window",
        };
        var g = e(1975685771),
          I = e(8405076696);
        function f(Fe) {
          M = H(de(Fe));
        }
        _(f, "startCurve");
        function y(Fe) {
          const He = de(Fe),
            Oe = F(M, He);
          return Oe.update_status == K.SUCCESS ? Oe : F(M, He);
        }
        _(y, "addToCurve");
        let M;
        const p = 2,
          O = 9,
          C = 9,
          h = 50,
          D = 80,
          P = 1,
          S = !0,
          b = !0,
          K = {
            SUCCESS: 1,
            FAIL_CORNER: 2,
            FAIL_MAXED: 3,
          },
          x = _(
            () => ({
              segments: [],
              vdmap: [],
            }),
            "initCurve"
          ),
          B = _(
            (Fe, He) => ({
              c0: {
                x: Fe,
                y: He,
              },
              c1: {
                x: Fe,
                y: He,
              },
              c2: {
                x: Fe,
                y: He,
              },
              c3: {
                x: Fe,
                y: He,
              },
            }),
            "initCurveSegment"
          ),
          U = _((Fe) => Fe.segments[Fe.segments.length - 1], "getLastSegment"),
          R = _((Fe) => Fe.c3, "getLastPoint"),
          G = _(function (Fe) {
            return {
              c0: {
                x: Fe.c0.x,
                y: Fe.c0.y,
              },
              c1: {
                x: Fe.c1.x,
                y: Fe.c1.y,
              },
              c2: {
                x: Fe.c2.x,
                y: Fe.c2.y,
              },
              c3: {
                x: Fe.c3.x,
                y: Fe.c3.y,
              },
              constrain_to:
                Fe.constrain_to == null
                  ? void 0
                  : {
                      x: Fe.constrain_to.x,
                      y: Fe.constrain_to.y,
                    },
              error: Fe.error || 0,
              update_status: Fe.update_status,
            };
          }, "copySegment"),
          H = _(function (Fe) {
            let { x: He, y: Oe } = Fe;
            const Ye = x();
            return Ye.segments.push(B(He, Oe)), Ye;
          }, "createCurve"),
          F = _(function (Fe, He) {
            const Oe = U(Fe),
              Ye = R(Oe);
            if (L(He, R(Oe)) < P) return Oe;
            if (K.SUCCESS != Oe.update_status && Oe.update_status !== void 0) {
              let at;
              K.FAIL_CORNER == Oe.update_status
                ? (at = B(Ye.x, Ye.y))
                : K.FAIL_MAXED == Oe.update_status &&
                  ((at = B(Ye.x, Ye.y)), (at.constrain_to = ee(q(Oe)))),
                (Fe.vdmap = []),
                Fe.segments.push(at);
            }
            return V(Fe, He);
          }, "addToCurveImpl"),
          V = _(function (Fe, He) {
            const Oe = U(Fe),
              { x: Ye, y: at } = He;
            let _t = R(Oe);
            const pt = G(Oe);
            if (oe(Oe, He)) return (Oe.update_status = K.FAIL_CORNER), Oe;
            (Oe.c3 = {
              x: Ye,
              y: at,
            }),
              (Oe.c2 = {
                x: Oe.c2.x + Ye - _t.x,
                y: Oe.c2.y + at - _t.y,
              });
            const Qe = J(_t, He),
              ct = Ae(Qe),
              Pt = Ee(_t, ct),
              zt = Ee(He, ct),
              an = ae(Ce(ct, 2)),
              Qt = k(an),
              tn = Z(an, Qt),
              Ht = be(zt, Pt),
              Kt = k(Ht),
              qt = Z(Ht, Kt);
            let Tn = Pt;
            for (let rn = 0; rn < Kt; rn++) {
              let gn = Tn,
                Zt = ct;
              for (let Vt = 0; Vt < Qt; Vt++) {
                const { x: Sn, y: ze } = de(gn);
                Fe.vdmap[Sn] || (Fe.vdmap[Sn] = []),
                  Fe.vdmap[Sn][ze] == null
                    ? (Fe.vdmap[Sn][ze] = de(Zt))
                    : (Fe.vdmap[Sn][ze] =
                        ve(Fe.vdmap[Sn][ze]) < ve(de(Zt))
                          ? Fe.vdmap[Sn][ze]
                          : de(Zt)),
                  (Zt = Ee(Zt, tn)),
                  (gn = Ee(gn, tn));
              }
              Tn = Ee(Tn, qt);
            }
            const Mt = be(He, {
                x: O,
                y: O,
              }),
              Jt = Ee(He, {
                x: O,
                y: O,
              });
            for (let rn = Mt.x; rn < Jt.x; rn++)
              for (let gn = Mt.y; gn < Jt.y; gn++) {
                Fe.vdmap[rn] || (Fe.vdmap[rn] = []);
                const Zt = be(
                  {
                    x: rn,
                    y: gn,
                  },
                  He
                );
                Fe.vdmap[rn][gn] == null
                  ? (Fe.vdmap[rn][gn] = Zt)
                  : (Fe.vdmap[rn][gn] =
                      ve(Fe.vdmap[rn][gn]) < ve(Zt) ? Fe.vdmap[rn][gn] : Zt);
              }
            let dn = 0;
            for (;;) {
              let rn = {
                  x: 0,
                  y: 0,
                },
                gn = {
                  x: 0,
                  y: 0,
                };
              for (let Sn = 0; Sn < C; Sn++) {
                const ze = Sn / C,
                  Ot = de(ne(Oe, ze)),
                  fn = X(Fe, Ot),
                  ln = Se(fn),
                  it = fn.x,
                  Tt = fn.y;
                let Ct = 1;
                b && (ze < 0.1 || ze > 0.9) && (Ct = 10),
                  (rn.x += ze * Math.pow(1 - ze, 2) * ln * it * Ct),
                  (rn.y += ze * Math.pow(1 - ze, 2) * ln * Tt * Ct),
                  (gn.x += Math.pow(ze, 2) * (1 - ze) * ln * it * Ct),
                  (gn.y += Math.pow(ze, 2) * (1 - ze) * ln * Tt * Ct);
              }
              if (b) {
                const Sn = be(z(Oe), Oe.c2),
                  ze = be(z(Oe), Oe.c1);
                (rn = be(rn, Ce(ze, 0.03))), (gn = be(gn, Ce(Sn, 0.03)));
              }
              Oe.constrain_to &&
                (rn = Ce(Oe.constrain_to, N(Oe.constrain_to, rn)));
              const Zt = 1;
              (Oe.c1.x -= (Zt * rn.x * 6) / C),
                (Oe.c1.y -= (Zt * rn.y * 6) / C),
                (Oe.c2.x -= (Zt * gn.x * 6) / C),
                (Oe.c2.y -= (Zt * gn.y * 6) / C);
              let Vt = 0;
              for (let Sn = 0; Sn < C; Sn++) {
                const ze = Sn / C,
                  Ot = ne(Oe, ze),
                  fn = X(Fe, de(Ot));
                Vt += Math.pow(fn.x, 2) + Math.pow(fn.y, 2);
              }
              if (
                ((Vt = Vt / C),
                dn++,
                (Oe.error = Vt),
                (Oe.steps = dn),
                Vt < p || dn > h)
              )
                break;
            }
            return dn > h
              ? ((Oe.c0 = pt.c0),
                (Oe.c1 = pt.c1),
                (Oe.c2 = pt.c2),
                (Oe.c3 = pt.c3),
                (Oe.error = pt.error),
                (Oe.constrain_to = pt.constrain_to),
                (Oe.update_status = K.FAIL_MAXED),
                Oe)
              : ((Oe.update_status = K.SUCCESS), Oe);
          }, "updateDistanceField"),
          X = _(function (Fe, He) {
            let { x: Oe, y: Ye } = He;
            if (Fe.vdmap[Oe]) {
              const at = Fe.vdmap[Oe][Ye],
                _t = Fe.vdmap[Oe][Ye + 1];
              let pt =
                at != null
                  ? {
                      x: at.x,
                      y: at.y,
                    }
                  : {
                      x: O,
                      y: O,
                    };
              return (
                _t &&
                  _t.x != null &&
                  Math.abs(pt.x) > Math.abs(_t.x) &&
                  (pt.x = _t.x),
                _t &&
                  _t.y != null &&
                  Math.abs(pt.y) > Math.abs(_t.y) &&
                  (pt.y = _t.y),
                pt
              );
            } else
              return {
                x: O,
                y: O,
              };
          }, "getDistanceFromPolyline"),
          q = _(function (Fe) {
            const He = Fe.c3,
              Oe = Fe.c2;
            return {
              x: 3 * (Oe.x - He.x),
              y: 3 * (Oe.y - He.y),
            };
          }, "getCurveEndTangent"),
          oe = _(function (Fe, He) {
            if ($(Fe.c0, Fe.c3)) return !1;
            let Oe;
            S ? (Oe = ee(be(ne(Fe, 0.95), Fe.c3))) : (Oe = ee(q(Fe)));
            const Ye = ee({
                x: He.x - Fe.c3.x,
                y: He.y - Fe.c3.y,
              }),
              at = N(Oe, Ye);
            if (w(Math.acos(at)) < D) return !0;
          }, "checkCorner"),
          z = _(
            (Fe) => Ee(Z(be(Fe.c3, Fe.c0), 2), Fe.c0),
            "getSegmentMidpoint"
          ),
          Ae = _(
            (Fe) => ({
              x: Fe.x * O,
              y: Fe.y * O,
            }),
            "getScaledVectorDifference"
          ),
          ae = _(
            (Fe) => ({
              x: -Fe.x,
              y: -Fe.y,
            }),
            "negateVec"
          ),
          de = _(
            (Fe) => ({
              x: Math.round(Fe.x),
              y: Math.round(Fe.y),
            }),
            "roundVec"
          ),
          ve = _(
            (Fe) => Math.pow(Fe.x, 2) + Math.pow(Fe.y, 2),
            "sumOfSquaresVec"
          ),
          Se = _((Fe) => Math.sqrt(ve(Fe)), "magnitudeVec"),
          Ee = _(
            (Fe, He) => ({
              x: Fe.x + He.x,
              y: Fe.y + He.y,
            }),
            "addVec"
          ),
          be = _((Fe, He) => Ee(Fe, ae(He)), "subVec"),
          Ce = _(
            (Fe, He) => ({
              x: Fe.x * He,
              y: Fe.y * He,
            }),
            "multVec"
          ),
          Z = _((Fe, He) => Ce(Fe, 1 / He), "divVec"),
          $ = _((Fe, He) => Fe.x == He.x && Fe.y == He.y, "equalVec"),
          N = _((Fe, He) => Fe.x * He.x + Fe.y * He.y, "dotProduct"),
          L = _(function (Fe) {
            let { x: He, y: Oe } = Fe,
              Ye =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : {
                      x: 0,
                      y: 0,
                    };
            return Math.sqrt(Math.pow(He - Ye.x, 2) + Math.pow(Oe - Ye.y, 2));
          }, "getMagnitude"),
          w = _((Fe) => (Fe * 180) / Math.PI, "radiansToDegrees"),
          k = _(
            (Fe) => Math.max(Math.abs(Fe.x), Math.abs(Fe.y)),
            "getDDASteps"
          ),
          J = _((Fe, He) => {
            const Oe = He.x - Fe.x,
              at = He.y - Fe.y,
              _t = -Oe;
            return ee({
              x: at,
              y: _t,
            });
          }, "getPerpindicularUnitVector"),
          ee = _(function (Fe) {
            let { x: He, y: Oe } = Fe;
            const Ye = L({
              x: He,
              y: Oe,
            });
            return {
              x: He / Ye,
              y: Oe / Ye,
            };
          }, "getUnitVector"),
          ne = _(function (Fe, He) {
            const Oe = pe(He, Fe.c0.x, Fe.c1.x, Fe.c2.x, Fe.c3.x),
              Ye = pe(He, Fe.c0.y, Fe.c1.y, Fe.c2.y, Fe.c3.y);
            return {
              x: Oe,
              y: Ye,
            };
          }, "getPointAlongCurve"),
          pe = _(function (Fe, He, Oe, Ye, at) {
            return (
              He * Math.pow(1 - Fe, 3) +
              Oe * 3 * Fe * Math.pow(1 - Fe, 2) +
              Ye * 3 * Math.pow(Fe, 2) * (1 - Fe) +
              at * Math.pow(Fe, 3)
            );
          }, "singleComponentBezier");
        function Me(Fe, He) {
          return {
            a: Fe,
            b: He,
          };
        }
        _(Me, "makeLineSegment");
        function ke(Fe, He) {
          let [Oe, Ye] = Fe,
            [at, _t] = He;
          return Math.sqrt((Oe - at) ** 2 + (Ye - _t) ** 2);
        }
        _(ke, "magnitude");
        class ge {
          add(He) {
            return this.current
              ? ke(this.current.a, He) > 0.05
                ? ((this.current = Me(this.current.b, He)),
                  {
                    type: DrawMessageType.New,
                    segment: this.current,
                  })
                : ((this.current = Me(this.current.a, He)),
                  {
                    type: DrawMessageType.Edit,
                    segment: this.current,
                  })
              : ((this.current = Me(He, He)),
                {
                  type: DrawMessageType.New,
                  segment: this.current,
                });
          }
        }
        _(ge, "ProgressiveEqualLengthMultilineTransformer");
        class fe {
          setTargetRect(He) {
            this.targetRect = He;
          }
          add(He) {
            if (
              !(0, g.Z)(
                this.targetRect,
                "Need size to transform point to curve"
              )
            )
              throw Error();
            const {
                top: Oe,
                left: Ye,
                width: at,
                height: _t,
              } = this.targetRect,
              [pt, Qe] = [He[0] - Ye, He[1] - Oe];
            if (!this.current) {
              f({
                x: pt,
                y: Qe,
              });
              const tn = [pt / at, Qe / _t];
              return (
                (this.current = {
                  a: tn,
                  b: tn,
                  c: tn,
                  d: tn,
                }),
                {
                  type: d.Sl.New,
                  segment: this.current,
                }
              );
            }
            const ct = this.current,
              {
                c0: Pt,
                c1: zt,
                c2: an,
                c3: Qt,
              } = y({
                x: pt,
                y: Qe,
              });
            return (
              (this.current = {
                a: [Pt.x / at, Pt.y / _t],
                b: [zt.x / at, zt.y / _t],
                c: [an.x / at, an.y / _t],
                d: [Qt.x / at, Qt.y / _t],
              }),
              this.current.a[0] !== ct.a[0] || this.current.a[1] !== ct.a[1]
                ? {
                    type: d.Sl.New,
                    segment: this.current,
                  }
                : {
                    type: d.Sl.Edit,
                    segment: this.current,
                  }
            );
          }
        }
        _(fe, "ProgressiveCurveTransformer");
        var re = e(5950652755),
          le = e(3107743571);
        const Re = 2e3,
          ye = 50,
          Te = _((Fe) => {
            const {
                onDragStart: He,
                onDragMove: Oe,
                onDragEnd: Ye,
                onCursorMoveStart: at,
                onCursorMove: _t,
                onCursorMoveEnd: pt,
                children: Qe,
              } = Fe,
              [ct, Pt] = (0, t.useState)(!1),
              [zt, an] = (0, t.useState)(!1),
              [Qt, tn] = (0, t.useState)(0),
              [Ht, Kt] = (0, t.useState)(0),
              qt = (0, t.useCallback)(
                (Zt) => {
                  Zt.button === 0 && (Pt(!0), He(Zt));
                },
                [He]
              ),
              Tn = (0, t.useCallback)(() => {
                an(!1), pt();
              }, [an, pt]);
            (0, le.Z)(
              () => {
                Tn();
              },
              Re,
              [Qt, Ht]
            );
            const Mt = (0, t.useCallback)(
                (Zt) => {
                  if (Zt.button === 0) {
                    if (ct) {
                      Oe(Zt);
                      return;
                    }
                    zt || (at(Zt), an(!0)),
                      _t(Zt),
                      tn(Zt.movementX),
                      Kt(Zt.movementY);
                  }
                },
                [zt, ct, _t, at, Oe]
              ),
              Jt = (0, re.A)(Mt, ye, {
                leading: !0,
              }),
              dn = (0, t.useCallback)(
                (Zt) => {
                  Jt(Zt);
                },
                [Jt]
              ),
              rn = (0, t.useCallback)(
                (Zt) => {
                  if (Zt && Zt.button !== 0) return;
                  const Vt = ct;
                  Pt(!1), Vt && Ye(Zt);
                },
                [ct, Ye]
              ),
              gn = (0, t.useCallback)(
                (Zt) => {
                  const Vt = ct;
                  Pt(!1), Vt ? Ye(Zt) : zt && pt();
                },
                [ct, Ye, zt, pt]
              );
            return t.createElement(
              "div",
              {
                onMouseDown: qt,
                onMouseMove: dn,
                onMouseUp: rn,
                onMouseLeave: gn,
                "aria-hidden": "true",
              },
              Qe
            );
          }, "HuddlesCursorTarget");
        Te.displayName = "HuddlesCursorTarget";
        const De = t.memo(Te);
        var Ue = e(8558782493),
          Ke = e(1224315998);
        function Ze() {
          return (
            (Ze =
              Object.assign ||
              function (Fe) {
                for (var He = 1; He < arguments.length; He++) {
                  var Oe = arguments[He];
                  for (var Ye in Oe)
                    Object.prototype.hasOwnProperty.call(Oe, Ye) &&
                      (Fe[Ye] = Oe[Ye]);
                }
                return Fe;
              }),
            Ze.apply(this, arguments)
          );
        }
        _(Ze, "target_extends");
        let Q = _(
          class extends t.Component {
            componentDidMount() {
              this.onResize();
            }
            shouldComponentUpdate(He, Oe) {
              return !(0, s.A)(this.props, He) || !(0, s.A)(this.state, Oe);
            }
            componentDidUpdate(He) {
              (0, s.A)(He.targetRect, this.props.targetRect) || this.onResize();
            }
            onResize() {
              var He;
              if (
                !(
                  !((He = this.props.refToForward) === null || He === void 0) &&
                  He.current
                )
              )
                return;
              const Oe = (0, I.n)(this.props.targetRect);
              (this.props.refToForward.current.style.height = Oe.height),
                (this.props.refToForward.current.style.width = Oe.width),
                (this.props.refToForward.current.style.top = Oe.top),
                (this.props.refToForward.current.style.left = Oe.left),
                (this.props.refToForward.current.style.position = Oe.position);
            }
            getCursorCoordinates(He) {
              return this.props.useHuddlesDragTarget
                ? [He.nativeEvent.offsetX, He.nativeEvent.offsetY]
                : [He.pageX, He.pageY];
            }
            onDragStart(He) {
              (this.multilineTransformer = new fe()),
                this.props.useHuddlesDragTarget
                  ? this.multilineTransformer.setTargetRect({
                      top: 0,
                      left: 0,
                      width: this.props.targetRect.width,
                      height: this.props.targetRect.height,
                    })
                  : this.multilineTransformer.setTargetRect(
                      this.props.targetRect
                    ),
                i.A.publish({
                  id: "self",
                  type: d.Sl.ChangeHue,
                  hue: this.props.hue,
                  ...(this.props.itemId && {
                    itemId: this.props.itemId,
                  }),
                }),
                i.A.publish({
                  id: "self",
                  ...this.multilineTransformer.add(
                    this.getCursorCoordinates(He)
                  ),
                  ...(this.props.itemId && {
                    itemId: this.props.itemId,
                  }),
                }),
                this.props.logDrawingAction("Draw start"),
                this.setState(() => ({
                  showCursor: !1,
                }));
            }
            onDragMove(He) {
              (0, g.Z)(this.multilineTransformer, "Need transformer to draw") &&
                i.A.publish({
                  id: "self",
                  ...this.multilineTransformer.add(
                    this.getCursorCoordinates(He)
                  ),
                  ...(this.props.itemId && {
                    itemId: this.props.itemId,
                  }),
                });
            }
            onDragEnd(He) {
              i.A.publish({
                id: "self",
                type: d.Sl.End,
                ...(this.props.itemId && {
                  itemId: this.props.itemId,
                }),
              }),
                this.props.logDrawingAction("Draw stop"),
                this.setState(() => ({
                  showCursor: !0,
                })),
                this.props.useHuddlesDragTarget &&
                  (0, Ue.k)(Ke.EventId.HUDDLES_SCREENSHARE_INTERACTION, {
                    contexts: {
                      ui_context: {
                        action: Ke.UiAction.CLICK,
                        ui_properties: {
                          element_name: "screenshare_draw",
                        },
                      },
                    },
                  });
            }
            onCursorMoveStart() {
              i.A.publish({
                id: "self",
                type: d.Sl.ChangeHue,
                hue: this.props.hue,
                ...(this.props.itemId && {
                  itemId: this.props.itemId,
                }),
              });
            }
            onCursorMove(He) {
              const Oe = this.getCursorCoordinates(He),
                Ye = Oe[0] / this.props.targetRect.width,
                at = Oe[1] / this.props.targetRect.height;
              i.A.publish({
                id: "self",
                type: d.Sl.Position,
                x: Ye,
                y: at,
                ...(this.props.itemId && {
                  itemId: this.props.itemId,
                }),
              }),
                this.setState(() => ({
                  showCursor: !0,
                }));
            }
            onCursorMoveEnd() {
              i.A.publish({
                id: "self",
                type: d.Sl.End,
                ...(this.props.itemId && {
                  itemId: this.props.itemId,
                }),
              }),
                this.setState(() => ({
                  showCursor: !1,
                }));
            }
            render() {
              return this.props.useHuddlesDragTarget
                ? t.createElement(
                    De,
                    {
                      onDragStart: this.onDragStart,
                      onDragMove: this.onDragMove,
                      onDragEnd: this.onDragEnd,
                      onCursorMoveStart: this.onCursorMoveStart,
                      onCursorMove: this.onCursorMove,
                      onCursorMoveEnd: this.onCursorMoveEnd,
                    },
                    t.createElement("div", {
                      ref: this.props.refToForward,
                      className: "p-calls_draw__target_none",
                      style: {
                        ...(0, I.n)(this.props.targetRect),
                      },
                    })
                  )
                : t.createElement(
                    u,
                    {
                      onDragStart: (He) => this.onDragStart(He),
                      onDragMove: (He) => this.onDragMove(He),
                      onDragEnd: (He) => this.onDragEnd(He),
                    },
                    t.createElement("div", {
                      ref: this.props.refToForward,
                      className: this.state.showCursor
                        ? "p-calls_draw__target"
                        : "p-calls_draw__target_none",
                      style: {
                        ...(0, I.n)(this.props.targetRect),
                      },
                    })
                  );
            }
            constructor(He) {
              super(He),
                (this.onResize = this.onResize.bind(this)),
                (this.onDragStart = this.onDragStart.bind(this)),
                (this.onDragMove = this.onDragMove.bind(this)),
                (this.onDragEnd = this.onDragEnd.bind(this)),
                (this.onCursorMoveStart = this.onCursorMoveStart.bind(this)),
                (this.onCursorMove = this.onCursorMove.bind(this)),
                (this.onCursorMoveEnd = this.onCursorMoveEnd.bind(this)),
                (this.state = {
                  showCursor: !0,
                });
            }
          },
          "BaseDrawTarget"
        );
        Q.displayName = "BaseDrawTarget";
        const ie = _(
            (Fe, He) => ({
              hue: (0, l.Ng)(Fe).drawHue,
            }),
            "mapStateToProps"
          ),
          Ve = _(
            (Fe) => ({
              logDrawingAction: (He) => Fe(T(He)),
            }),
            "mapDispatchToProps"
          ),
          xe = (0, n.N)(ie, Ve)(Q),
          je = t.forwardRef((Fe, He) =>
            t.createElement(
              xe,
              Ze(
                {
                  refToForward: He,
                },
                Fe
              )
            )
          );
      },
      5956851410: (W, A, e) => {
        "use strict";
        e.d(A, {
          u: () => $,
        });
        var t = e(5824283093),
          n = e(166097325),
          s = e(1649982175),
          i = e(8571983633),
          d = e(8840779375),
          o = e(3300324857),
          a = e(462591818),
          r = e(1641606663),
          c = e(9391594207),
          u = e(5795074931),
          l = e(4775127335),
          m = e(387328355),
          v = e(735940183);
        const E = new v.Ay("calls"),
          T = _((N) => {
            let { displayName: L, id: w, userId: k, color: J } = N;
            return t.createElement(
              "div",
              {
                className: "p-huddles_draw__name_tag",
                style: J
                  ? {
                      background: J,
                    }
                  : {},
              },
              t.createElement(l.Ay, {
                className: "p-huddles_draw__name_tag_avatar",
                key: w,
                size: 24,
                userId: k,
                isInteractive: !1,
                tabIndex: -1,
              }),
              t.createElement(
                "div",
                {
                  className: "p-huddles_draw__name_tag_text",
                },
                L
              )
            );
          }, "NameTag"),
          g = _((N, L) => {
            let { id: w } = L;
            return {
              displayName: w === "self" ? E.t("You") : (0, m.iU)(N, w),
              userId: w === "self" ? (0, u.WR)(N) : (0, m.C1)(N, w).userId,
            };
          }, "mapStateToProps"),
          I = (0, c.N)(g)(T),
          f = -21,
          y = -15,
          M = _((N) => {
            let {
              peerId: L,
              width: w,
              height: k,
              leftOffset: J,
              topOffset: ee,
              color: ne,
              renderNameTag: pe = !0,
              isWindowDrawMode: Me = !1,
              xWindowPosition: ke = 0,
              yWindowPosition: ge = 0,
            } = N;
            const fe = (0, t.useRef)(null);
            let re, le;
            const Re = J * w,
              ye = ee * k;
            (re = Math.round(Re + y)),
              (le = Math.round(ye + f)),
              Me && ((re += ke), (le += ge));
            const Te = (0, t.useMemo)(() => [re, le], [re, le]),
              De = _((Ue) => {
                const Ke = fe.current;
                Ke &&
                  (Ke.style.setProperty(
                    "transform",
                    `translate(${Ue[0]}px, ${Ue[1]}px)`
                  ),
                  Ke.style.setProperty("visibility", "initial"));
              }, "updateCursorPosition");
            return (
              (0, t.useEffect)(() => {
                De(Te);
              }, [Te]),
              t.createElement(
                "div",
                {
                  className: "p-huddles_cursor_tracking__cursor_container",
                },
                t.createElement(
                  "div",
                  {
                    key: `cursor-${L}`,
                    className: "p-huddles_cursor_tracking__cursor",
                    ref: fe,
                  },
                  pe &&
                    t.createElement(I, {
                      key: `name-tag-${L}`,
                      id: L,
                      color: ne,
                    })
                )
              )
            );
          }, "HuddlesCursor");
        M.displayName = "HuddlesCursor";
        const p = t.memo(M, n.A);
        var O = e(2825968873),
          C = e(8405076696),
          h = e(8193414630);
        function D(N, L, w, k) {
          return `hsla(${N}, ${L}%, ${w}%, ${k})`;
        }
        _(D, "makeColorString");
        const P = _((N, L) => D(N, 100, 75, L), "makeBaseColorString"),
          S = _((N) => D(N, 80, 50, 1), "makeShadowColorString"),
          b = 3;
        class K {
          static renderBaseStyle(L) {
            (L.lineJoin = "round"), (L.lineCap = "round"), (L.shadowBlur = 5);
          }
          startFade() {
            (this.startedFadingTimestamp = performance.now()),
              this.observer.requestRenderOnNextFrame();
          }
          resetFade() {
            this.startedFadingTimestamp &&
              (delete this.startedFadingTimestamp,
              (this.width = K.initialWidth),
              (this.opacity = 1),
              (this.color = P(this.hue, this.opacity)));
          }
          setHue(L) {
            (this.hue = L),
              (this.color = P(this.hue, this.opacity)),
              (this.shadowColor = S(this.hue)),
              this.observer.requestRenderOnNextFrame();
          }
          render(L) {
            this.fade(),
              (L.lineWidth = this.width),
              (L.strokeStyle = this.color),
              (L.shadowColor = this.shadowColor);
          }
          fade() {
            if (!this.startedFadingTimestamp) return;
            const L = Math.min(
              1,
              (performance.now() - this.startedFadingTimestamp) / K.fadeDuration
            );
            (this.width = K.initialWidth - L * b),
              (this.opacity = 1 - L / 1),
              (this.color = P(this.hue, this.opacity)),
              L < 1
                ? this.observer.requestRenderOnNextFrame()
                : this.observer.onFadeCompleted();
          }
          getColor() {
            return this.color;
          }
          constructor(L) {
            (this.observer = L),
              (this.width = K.initialWidth),
              (this.opacity = 1),
              (this.hue = 0),
              (this.color = P(this.hue, this.opacity)),
              (this.shadowColor = S(this.hue));
          }
        }
        _(K, "LineStyle"),
          (K.displayName = "LineStyle"),
          (K.initialWidth = 7),
          (K.fadeDuration = 3e3);
        let x = _(
          class {
            getSegments() {
              return this.segments;
            }
            addNewSegment(L) {
              this.segments.push(L);
            }
            editLastSegment(L) {
              this.segments.pop(), this.segments.push(L);
            }
            constructor() {
              this.segments = [];
            }
          },
          "ProgressivePlotter"
        );
        class B extends null {
          draw(L) {
            let w =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : 1,
              k =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : 1;
            const J = this.getSegments();
            L.beginPath();
            for (let ee = 0; ee < J.length; ee++) {
              const ne = J[ee];
              L.moveTo(ne.a[0] * w, ne.a[1] * k),
                L.lineTo(ne.b[0] * w, ne.b[1] * k);
            }
            L.stroke();
          }
        }
        _(B, "ProgressiveLineSegmentPlotter");
        class U extends x {
          draw(L) {
            let w =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : 1,
              k =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : 1;
            const J = this.getSegments();
            L.beginPath();
            for (let ee = 0; ee < J.length; ee++) {
              const ne = J[ee];
              L.moveTo(ne.a[0] * w, ne.a[1] * k),
                L.bezierCurveTo(
                  ne.b[0] * w,
                  ne.b[1] * k,
                  ne.c[0] * w,
                  ne.c[1] * k,
                  ne.d[0] * w,
                  ne.d[1] * k
                );
            }
            L.stroke();
          }
        }
        _(U, "ProgressiveBezierCurvePlotter");
        const R = 700,
          G = 5e3;
        class H {
          onFadeCompleted() {
            (this.plotter = new U()),
              this.observer.onLineVisibilityChanged(!1),
              this.setLineVisibility({
                isFading: !1,
                isLineVisible: !1,
              }),
              this.style.resetFade();
          }
          resetVestigialLineTimeout() {
            this.vestigialLineTimeout &&
              clearTimeout(this.vestigialLineTimeout),
              (this.vestigialLineTimeout = window.setTimeout(
                this.onInactivity,
                G
              ));
          }
          resetInactivityTimeout() {
            this.inactivityTimeout && clearTimeout(this.inactivityTimeout),
              (this.inactivityTimeout = window.setTimeout(
                this.onInactivity,
                R
              ));
          }
          update(L) {
            if ((this.resetVestigialLineTimeout(), L.type === a.Sl.New))
              this.visibilityState.isLineVisible ||
                this.observer.onLineVisibilityChanged(!0),
                this.setLineVisibility({
                  isFading: !1,
                  isLineVisible: !0,
                }),
                this.plotter.addNewSegment(L.segment),
                this.style.resetFade(),
                clearTimeout(this.inactivityTimeout);
            else if (L.type === a.Sl.Edit)
              this.plotter.editLastSegment(L.segment);
            else if (L.type === a.Sl.End) this.resetInactivityTimeout();
            else if (L.type === a.Sl.ChangeHue) this.style.setHue(L.hue);
            else {
              if (L.type === a.Sl.Position) return;
              (0, h.Kh)(L.type);
            }
            this.observer.requestRenderOnNextFrame();
          }
          render(L, w, k) {
            this.style.render(L), this.plotter.draw(L, w, k);
          }
          setLineVisibility(L) {
            Object.assign(this.visibilityState, L);
          }
          getColor() {
            return this.style.getColor();
          }
          constructor(L) {
            (this.observer = L),
              (this.plotter = new U()),
              (this.visibilityState = {
                isLineVisible: !1,
                isFading: !1,
              }),
              (this.onInactivity = () => {
                this.inactivityTimeout && clearTimeout(this.inactivityTimeout),
                  this.vestigialLineTimeout &&
                    clearTimeout(this.vestigialLineTimeout),
                  !(
                    this.visibilityState.isFading ||
                    !this.visibilityState.isLineVisible
                  ) &&
                    (this.setLineVisibility({
                      isFading: !0,
                    }),
                    this.style.startFade());
              }),
              (this.style = new K({
                onFadeCompleted: () => this.onFadeCompleted(),
                requestRenderOnNextFrame: () =>
                  this.observer.requestRenderOnNextFrame(),
              }));
          }
        }
        _(H, "DrawLine"), (H.displayName = "DrawLine");
        const F = _((N) => {
          let {
            refToForward: L,
            isHidden: w,
            numVisibleLines: k,
            top: J,
            left: ee,
            width: ne,
            height: pe,
            doNotApplyTargetRect: Me,
          } = N;
          if (Me) {
            const ge = {
              display: w || k === 0 ? "none" : "block",
            };
            return t.createElement("canvas", {
              ref: L,
              style: ge,
              "data-qa": "huddles-drawing-canvas",
            });
          }
          const ke = {
            display: w || k === 0 ? "none" : "block",
            ...(0, C.n)({
              left: ee,
              top: J,
              width: ne,
              height: pe,
            }),
          };
          return t.createElement("canvas", {
            ref: L,
            style: ke,
            "data-qa": "huddles-drawing-canvas",
          });
        }, "Canvas");
        F.displayName = "Canvas";
        const V = t.memo(F, n.A),
          X = new v.Ay("calls"),
          q = 10,
          oe = 10,
          z = _((N) => {
            let {
              displayName: L,
              coord: [w, k],
            } = N;
            return t.createElement(
              "div",
              {
                className: "p-calls_draw__name_tag",
                style: {
                  left: `${w + q}px`,
                  top: `${k + oe}px`,
                },
              },
              L
            );
          }, "name_tag_NameTag"),
          Ae = _((N, L) => {
            let { id: w } = L;
            return {
              displayName: w === "self" ? X.t("You") : (0, m.iU)(N, w),
            };
          }, "name_tag_mapStateToProps"),
          ae = (0, c.N)(Ae)(z),
          de = -33,
          ve = -9,
          Se = _((N) => {
            let {
              top: L,
              left: w,
              width: k,
              height: J,
              leftOffset: ee,
              topOffset: ne,
              id: pe,
            } = N;
            const Me = w + ee * k,
              ke = L + ne * J,
              ge = {
                left: `${Me + ve}px`,
                top: `${ke + de}px`,
              },
              fe = (0, t.useMemo)(() => [Me, ke], [Me, ke]);
            return t.createElement(
              t.Fragment,
              null,
              pe !== "self" &&
                t.createElement("div", {
                  key: `cursor-${pe}`,
                  className: "p-calls_draw__pencil_cursor",
                  style: ge,
                }),
              t.createElement(ae, {
                key: `name-tag-${pe}`,
                id: pe,
                coord: fe,
              })
            );
          }, "Cursor");
        Se.displayName = "Cursor";
        const Ee = t.memo(Se, n.A);
        function be() {
          return (
            (be =
              Object.assign ||
              function (N) {
                for (var L = 1; L < arguments.length; L++) {
                  var w = arguments[L];
                  for (var k in w)
                    Object.prototype.hasOwnProperty.call(w, k) && (N[k] = w[k]);
                }
                return N;
              }),
            be.apply(this, arguments)
          );
        }
        _(be, "_extends");
        var Ce;
        class Z extends (Ce = t.Component) {
          shouldComponentUpdate(L, w) {
            return !(0, n.A)(this.props, L) || !(0, n.A)(this.state, w);
          }
          getOrCreatePeerLine(L) {
            return (
              (this.peerLines[L] =
                this.peerLines[L] ||
                new H({
                  requestRenderOnNextFrame: () =>
                    this.requestRenderOnNextFrame(),
                  onLineVisibilityChanged: (w) =>
                    this.setState((k) => ({
                      numVisibleLines: k.numVisibleLines + (w ? 1 : -1),
                    })),
                })),
              this.peerLines[L]
            );
          }
          onIncomingPeerLine(L) {
            if (this.props.itemId && L.itemId && L.itemId !== this.props.itemId)
              return;
            const w = this.getOrCreatePeerLine(L.id);
            switch ((w.update(L), L.type)) {
              case a.Sl.New: {
                this.setState((k) => {
                  let { tagCoords: J, userColors: ee } = k;
                  return {
                    tagCoords: {
                      ...J,
                      [L.id]: L.segment.d,
                    },
                    userColors: {
                      ...ee,
                      [L.id]: w.getColor(),
                    },
                  };
                });
                break;
              }
              case a.Sl.Edit: {
                this.setState((k) => {
                  let { tagCoords: J } = k;
                  return {
                    tagCoords: {
                      ...J,
                      [L.id]: L.segment.d,
                    },
                  };
                });
                break;
              }
              case a.Sl.ChangeHue: {
                this.setState((k) => {
                  let { userColors: J } = k;
                  return {
                    userColors: {
                      ...J,
                      [L.id]: w.getColor(),
                    },
                  };
                });
                break;
              }
              case a.Sl.End: {
                this.setState((k) => {
                  let { tagCoords: J } = k;
                  return {
                    tagCoords: (0, s.A)(J, L.id),
                  };
                });
                break;
              }
              case a.Sl.Position: {
                const k = [L.x, L.y];
                this.setState((J) => {
                  let { tagCoords: ee } = J;
                  return {
                    tagCoords: {
                      ...ee,
                      [L.id]: k,
                    },
                  };
                });
                break;
              }
              default:
                break;
            }
          }
          componentDidMount() {
            o.A.subscribe(this.onIncomingPeerLine),
              (this.ctx = this.props.refToForward.current.getContext("2d")),
              this.onResize();
          }
          componentDidUpdate(L, w) {
            L.targetRect !== this.props.targetRect && this.onResize(),
              this.state.numVisibleLines < 0 &&
                (0, O.tZ)("DRAW-RENDERER").warn(
                  "Should not have a negative number of lines"
                ),
              this.props.onRendererIsActive &&
                ((this.state.numVisibleLines === 0 && w.numVisibleLines > 0) ||
                  (this.state.numVisibleLines > 0 &&
                    w.numVisibleLines === 0)) &&
                this.props.onRendererIsActive(this.state.numVisibleLines !== 0);
          }
          componentWillUnmount() {
            if (!(0, i.A)(this.rafId)) {
              var L;
              (L = this.context.windowRef.deref()) === null ||
                L === void 0 ||
                L.cancelAnimationFrame(this.rafId);
            }
            o.A.unsubscribe(this.onIncomingPeerLine);
          }
          onResize() {
            this.ctx &&
              ((this.ctx.canvas.width = this.props.targetRect.width),
              (this.ctx.canvas.height = this.props.targetRect.height),
              K.renderBaseStyle(this.ctx),
              this.requestRenderOnNextFrame());
          }
          requestRenderOnNextFrame() {
            this.dirty ||
              ((this.dirty = !0),
              (this.rafId = this.context.windowRef
                .deref()
                .requestAnimationFrame(this.draw)));
          }
          draw() {
            if (((this.rafId = void 0), !this.ctx)) return;
            const L = this.props.targetRect.width,
              w = this.props.targetRect.height;
            (this.dirty = !1), this.ctx.clearRect(0, 0, L, w);
            const k = Object.values(this.peerLines);
            for (let J = 0; J < k.length; J++) k[J].render(this.ctx, L, w);
          }
          renderCursor(L, w, k) {
            const {
              targetRect: J,
              useHuddlesCursor: ee,
              itemId: ne,
              isHostDrawWindow: pe,
              isWindowDrawing: Me,
            } = this.props;
            if (ee) {
              const ke = this.state.userColors[L],
                ge = ne !== "self",
                fe = pe && Me;
              return t.createElement(p, {
                key: L,
                peerId: L,
                topOffset: w,
                leftOffset: k,
                width: J.width,
                height: J.height,
                color: ke,
                renderNameTag: ge,
                isWindowDrawMode: fe,
                xWindowPosition: J.left,
                yWindowPosition: J.top,
              });
            }
            return t.createElement(
              Ee,
              be(
                {
                  key: L,
                  id: L,
                  topOffset: w,
                  leftOffset: k,
                },
                J
              )
            );
          }
          render() {
            if (this.props.setPositionToMatchTargetRect) {
              const { targetRect: L } = this.props,
                w = {
                  ...(0, C.n)({
                    left: L.left,
                    top: L.top,
                    width: L.width,
                    height: L.height,
                  }),
                };
              return t.createElement(
                "div",
                {
                  className: "p-calls_draw__renderer",
                  style: w,
                },
                t.createElement(
                  V,
                  be(
                    {
                      refToForward: this.props.refToForward,
                      isHidden: this.props.isHidden,
                      numVisibleLines: this.state.numVisibleLines,
                    },
                    this.props.targetRect,
                    {
                      doNotApplyTargetRect: !0,
                    }
                  )
                ),
                (0, d.A)(this.state.tagCoords, (k, J) => {
                  let [ee, ne] = k;
                  return this.renderCursor(J, ne, ee);
                })
              );
            }
            return t.createElement(
              "div",
              {
                className: "p-calls_draw__renderer",
              },
              t.createElement(
                V,
                be(
                  {
                    refToForward: this.props.refToForward,
                    isHidden: this.props.isHidden,
                    numVisibleLines: this.state.numVisibleLines,
                  },
                  this.props.targetRect
                )
              ),
              (0, d.A)(this.state.tagCoords, (L, w) => {
                let [k, J] = L;
                return this.renderCursor(w, J, k);
              })
            );
          }
          constructor(L) {
            super(L),
              (this.dirty = !1),
              (this.peerLines = {}),
              (this.onResize = this.onResize.bind(this)),
              (this.onIncomingPeerLine = this.onIncomingPeerLine.bind(this)),
              (this.draw = this.draw.bind(this)),
              (this.renderCursor = this.renderCursor.bind(this)),
              (this.state = {
                tagCoords: {},
                numVisibleLines: 0,
                userColors: {},
              });
          }
        }
        _(Z, "BaseDrawRenderer"),
          (Z.displayName = "BaseDrawRenderer"),
          (Z.contextType = r.Mn);
        const $ = t.forwardRef((N, L) =>
          t.createElement(
            Z,
            be(
              {
                refToForward: L,
              },
              N
            )
          )
        );
      },
      1429018002: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => p,
        });
        var t = e(5824283093),
          n = e(9391594207),
          s = e(387328355),
          i = e(5255740490),
          d = e(4096483543),
          o = e(8869734951),
          a = e(6533394955),
          r = e(6839101721),
          c = e(3395259576),
          u = e(2615100822),
          l = e(4761125736);
        function m() {
          return (
            (m =
              Object.assign ||
              function (O) {
                for (var C = 1; C < arguments.length; C++) {
                  var h = arguments[C];
                  for (var D in h)
                    Object.prototype.hasOwnProperty.call(h, D) && (O[D] = h[D]);
                }
                return O;
              }),
            m.apply(this, arguments)
          );
        }
        _(m, "_extends");
        let v = _(
          class extends t.PureComponent {
            componentDidMount() {
              this.setUpMedia(),
                this.updateVideoState(),
                this.setupInteractionObserver();
            }
            componentDidUpdate() {
              this.setUpMedia(), this.updateVideoState();
            }
            componentWillUnmount() {
              var C;
              const h = this.videoRef.current,
                { shouldAttachStream: D, tileId: P, peerId: S } = this.props;
              !P ||
                !h ||
                (this.props.unbindVideo({
                  tileId: P,
                  videoRef: this.videoRef,
                  shouldDetachStream: !!D,
                  peerId: S,
                }),
                h.removeEventListener("resize", this.onResize),
                (C = this.interactionObserver) === null ||
                  C === void 0 ||
                  C.disconnect());
            }
            setUpMedia() {
              const C = this.videoRef.current,
                { shouldAttachStream: h, tileId: D, peerId: P } = this.props;
              !D ||
                !C ||
                (this.props.bindVideo({
                  tileId: D,
                  videoRef: this.videoRef,
                  shouldAttachStream: !!h,
                  peerId: P,
                }),
                C.addEventListener("resize", this.onResize));
            }
            setupInteractionObserver() {
              var C;
              if (
                window != null &&
                window.IntersectionObserver &&
                this.props.unbindNonVisibleVideos &&
                ((C = this.interactionObserver) === null ||
                  C === void 0 ||
                  C.disconnect(),
                (this.interactionObserver = new IntersectionObserver(
                  this.interactionObserverCallback,
                  {
                    root: null,
                    threshold: this.intersectionCheckThresholds,
                  }
                )),
                this.videoRef.current)
              ) {
                var h;
                (h = this.interactionObserver) === null ||
                  h === void 0 ||
                  h.observe(this.videoRef.current);
              }
            }
            interactionObserverCallback(C) {
              const h = C[0];
              if (!h) return;
              const D = this.videoRef.current,
                { shouldAttachStream: P, tileId: S, peerId: b } = this.props;
              !S ||
                !D ||
                (h.intersectionRatio > this.intersectionVisibleThreshold
                  ? this.props.bindVideo({
                      tileId: S,
                      videoRef: this.videoRef,
                      shouldAttachStream: !!P,
                      peerId: b,
                    })
                  : this.props.unbindVideo({
                      tileId: S,
                      videoRef: this.videoRef,
                      shouldDetachStream: !!P,
                      peerId: b,
                    }));
            }
            onResize() {
              const C = this.videoRef.current;
              C &&
                (this.props.isSharingScreen
                  ? (C.style.objectFit = "contain")
                  : (C.style.objectFit =
                      C.videoWidth > C.videoHeight ? "cover" : "contain"));
            }
            updateVideoState() {
              const {
                experimentCallsPauseVideoOnScreenshareGroupTreatment: C,
                peerId: h,
                tileId: D,
                isActivePeerSharingScreen: P,
                isShroudVisible: S,
              } = this.props;
              !C ||
                !D ||
                (h !== "self" && P && !S
                  ? this.props.pauseVideo({
                      tileId: D,
                    })
                  : this.props.unpauseVideo({
                      tileId: D,
                    }));
            }
            render() {
              const {
                refToForward: C,
                shouldFlip: h,
                peerId: D,
                className: P,
                width: S,
                height: b,
                onLoadedData: K,
              } = this.props;
              return t.createElement(
                "video",
                m(
                  {
                    className: (0, i.A)("p-calls_video", P, {
                      flipped: h,
                    }),
                    ref: (0, o.P)(this.videoRef, C),
                    key: D,
                    "data-qa": "free-willy-video-element",
                    style: {
                      width: S,
                      height: b,
                    },
                  },
                  K
                    ? {
                        onLoadedData: K,
                      }
                    : {}
                )
              );
            }
            constructor(C) {
              super(C),
                (this.videoRef = (0, t.createRef)()),
                (this.intersectionVisibleThreshold = 0),
                (this.intersectionCheckThresholds = [0]),
                (this.onResize = C.onResize
                  ? C.onResize
                  : this.onResize.bind(this)),
                (this.interactionObserverCallback =
                  this.interactionObserverCallback.bind(this));
            }
          },
          "VideoElement"
        );
        v.displayName = "VideoElement";
        const E = _((O, C) => {
            var h;
            const D =
                (0, l._Z)(O, "calls_pause_video_on_screenshare") ===
                "treatment",
              P = (0, s.vz)(O),
              S = C.peer ? (0, s.Bf)(C.peer) : !1;
            let b;
            if (P) b = C.tileId;
            else {
              var K, x, B, U, R, G;
              b = S
                ? (K = C.peer) === null ||
                  K === void 0 ||
                  (x = K.tileIds) === null ||
                  x === void 0 ||
                  (B = x.screenshare) === null ||
                  B === void 0
                  ? void 0
                  : B.tileId
                : (U = C.peer) === null ||
                  U === void 0 ||
                  (R = U.tileIds) === null ||
                  R === void 0 ||
                  (G = R.camera) === null ||
                  G === void 0
                ? void 0
                : G.tileId;
            }
            return {
              tileId: b,
              peerId: (h = C.peer) === null || h === void 0 ? void 0 : h.id,
              isSharingScreen: S,
              isShroudVisible: D && (0, u.A)() ? (0, c.pI)(O) : !1,
              isActivePeerSharingScreen: (0, s.$Q)(O),
              experimentCallsPauseVideoOnScreenshareGroupTreatment: D,
            };
          }, "mapStateToProps"),
          T = _(
            (O) => ({
              bindVideo: (C) =>
                (0, d.A)()
                  ? (0, a.dispatchForClientStore)((0, r.d2)(C))
                  : O((0, r.d2)(C)),
              unbindVideo: (C) =>
                (0, d.A)()
                  ? (0, a.dispatchForClientStore)((0, r.gJ)(C))
                  : O((0, r.gJ)(C)),
              pauseVideo: (C) =>
                (0, d.A)()
                  ? (0, a.dispatchForClientStore)((0, r.WY)(C))
                  : O((0, r.WY)(C)),
              unpauseVideo: (C) =>
                (0, d.A)()
                  ? (0, a.dispatchForClientStore)((0, r.D8)(C))
                  : O((0, r.D8)(C)),
            }),
            "mapDispatchToProps"
          ),
          g = (0, n.N)(E, T)(v),
          I = t.forwardRef((O, C) =>
            t.createElement(
              g,
              m(
                {
                  refToForward: C,
                },
                O
              )
            )
          );
        function f() {
          return (
            (f =
              Object.assign ||
              function (O) {
                for (var C = 1; C < arguments.length; C++) {
                  var h = arguments[C];
                  for (var D in h)
                    Object.prototype.hasOwnProperty.call(h, D) && (O[D] = h[D]);
                }
                return O;
              }),
            f.apply(this, arguments)
          );
        }
        _(f, "peer_video_element_extends");
        const y = _((O, C) => {
            const h = (0, s.vz)(O),
              D = (0, s.JZ)(O, C.id);
            let P;
            const S = C.tileId;
            if (!h) P = (0, s.fy)(D) && !D.isScreenshareEnabled;
            else {
              var b, K;
              const x =
                ((b = D.tileIds) === null ||
                b === void 0 ||
                (K = b.screenshare) === null ||
                K === void 0
                  ? void 0
                  : K.tileId) === S;
              P = (0, s.fy)(D) && !x;
            }
            return {
              peer: D,
              tileId: S,
              shouldFlip: P,
            };
          }, "peer_video_element_mapStateToProps"),
          M = (0, n.N)(y)(I),
          p = t.forwardRef((O, C) =>
            t.createElement(
              M,
              f({}, O, {
                refToForward: C,
              })
            )
          );
      },
      1337358413: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => m,
          Ft: () => c,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(9391594207),
          i = e(3328068409),
          d = e(9009528296),
          o = e(9853754481);
        function a() {
          return (
            (a =
              Object.assign ||
              function (v) {
                for (var E = 1; E < arguments.length; E++) {
                  var T = arguments[E];
                  for (var g in T)
                    Object.prototype.hasOwnProperty.call(T, g) && (v[g] = T[g]);
                }
                return v;
              }),
            a.apply(this, arguments)
          );
        }
        _(a, "_extends");
        const r = 15;
        function c(v) {
          return Math.min(1, Math.max(0, o.Ep * v));
        }
        _(c, "getClampedAudioLevel");
        let u = _(
          class extends t.PureComponent {
            componentDidMount() {
              d.A.subscribe(this.onLevelUpdated);
            }
            componentWillUnmount() {
              d.A.unsubscribe(this.onLevelUpdated);
            }
            onLevelUpdated(E) {
              const T = Math.floor(this.numBubbles * c(E));
              this.setState(() => ({
                numActiveBubbles: T,
                numInactiveBubbles: this.numBubbles - T,
              }));
            }
            renderBubbles() {
              const { numActiveBubbles: E, numInactiveBubbles: T } = this.state,
                { bubbleClassname: g } = this.props,
                I = (0, n.A)(
                  "p-audio_levels__bubble",
                  "p-audio_levels__bubble--active",
                  g,
                  {
                    "p-audio_levels__bubble--dark":
                      this.props.clientTheme === "dark",
                  }
                ),
                f = (0, n.A)(
                  "p-audio_levels__bubble",
                  "p-audio_levels__bubble--inactive",
                  g,
                  {
                    "p-audio_levels__bubble--dark":
                      this.props.clientTheme === "dark",
                  }
                ),
                y = Array.from(
                  {
                    length: E,
                  },
                  (p, O) =>
                    t.createElement("span", {
                      key: `active${O}`,
                      className: I,
                    })
                ),
                M = Array.from(
                  {
                    length: T,
                  },
                  (p, O) =>
                    t.createElement("span", {
                      key: O,
                      className: f,
                    })
                );
              return y.concat(M);
            }
            render() {
              const E =
                this.props.ariaLabelledBy || this.props.ariaLabel
                  ? {
                      role: "meter",
                      "aria-labelledby": this.props.ariaLabelledBy,
                      "aria-label": this.props.ariaLabel,
                      "aria-valuenow": Math.floor(
                        (this.state.numActiveBubbles / this.numBubbles) * 100
                      ),
                      "aria-valuemin": 0,
                      "aria-valuemax": 100,
                      tabIndex: 0,
                    }
                  : {};
              return t.createElement(
                "div",
                a(
                  {
                    className: (0, n.A)(
                      "p-audio_levels",
                      this.props.containerClassName
                    ),
                    "data-qa": "audio-levels-bubbles",
                  },
                  E
                ),
                this.renderBubbles()
              );
            }
            constructor(E) {
              super(E);
              var T;
              this.numBubbles =
                (T = this.props.initNumBubbles) !== null && T !== void 0
                  ? T
                  : r;
              var g;
              (this.state = {
                numInactiveBubbles:
                  (g = E.initNumBubbles) !== null && g !== void 0 ? g : r,
                numActiveBubbles: 0,
              }),
                (this.onLevelUpdated = this.onLevelUpdated.bind(this));
            }
          },
          "AudioMeter"
        );
        u.displayName = "AudioMeter";
        const l = _(
            (v) => ({
              clientTheme: (0, i.to)(v),
            }),
            "mapStateToProps"
          ),
          m = (0, s.N)(l)(u);
      },
      610288365: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => r,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(6696292586),
          i = e(3398586081);
        class d {
          constructor() {
            (this.isInitialized = !1),
              (this.isUsingBattery = null),
              (this.batteryLevel = null),
              (this.isSupported = !1),
              (this.registerListeners = () => {
                var m, v;
                (m = this.battery) === null ||
                  m === void 0 ||
                  m.addEventListener(
                    "chargingchange",
                    this.handleBatteryUpdate
                  ),
                  (v = this.battery) === null ||
                    v === void 0 ||
                    v.addEventListener("levelchange", this.handleBatteryUpdate);
              }),
              (this.removeEventListeners = () => {
                var m, v;
                (m = this.battery) === null ||
                  m === void 0 ||
                  m.removeEventListener(
                    "chargingchange",
                    this.handleBatteryUpdate
                  ),
                  (v = this.battery) === null ||
                    v === void 0 ||
                    v.removeEventListener(
                      "levelchange",
                      this.handleBatteryUpdate
                    );
              }),
              (this.handleBatteryUpdate = () => {
                this.isSupported && this.updateBatteryState();
              }),
              (this.updateBatteryState = () => {
                this.battery &&
                  ((this.isUsingBattery = !this.battery.charging),
                  (this.batteryLevel = this.battery.level));
              });
            var u = this;
            this.initialize = (0, t.coroutine)(function* () {
              yield u.setUp(), u.updateBatteryState();
            });
            var l = this;
            (this.setUp = (0, t.coroutine)(function* () {
              if (!l.isInitialized)
                try {
                  if (navigator.getBattery) {
                    const m = yield navigator.getBattery();
                    (l.battery = m),
                      l.battery &&
                        ((l.isSupported = !0),
                        l.updateBatteryState(),
                        l.registerListeners());
                  } else l.isSupported = !1;
                } catch {
                  l.isSupported = !1;
                } finally {
                  l.isInitialized = !0;
                }
            })),
              (this.cleanup = () => {
                this.isSupported && this.removeEventListeners();
              }),
              (this.isUsingBatteryPower = () => {
                if (this.isSupported) return !!this.isUsingBattery;
              }),
              (this.getLevel = () => {
                if (!(!this.isSupported || !(0, s.A)(this.batteryLevel)))
                  return this.batteryLevel * 100;
              }),
              this.setUp();
          }
        }
        _(d, "HuddleBatteryManager");
        const o = (0, i.A)(() => new d()),
          a = {
            getHuddleBatteryManager: o,
            HuddleBatteryManager: d,
          },
          r = o;
      },
      6664301844: (W, A, e) => {
        "use strict";
        e.d(A, {
          $H: () => le,
          $b: () => g,
          $s: () => re,
          E9: () => f,
          Es: () => r,
          I8: () => v,
          KK: () => w,
          Ll: () => X,
          Ls: () => ie,
          QJ: () => G,
          Q_: () => Te,
          RM: () => ge,
          VW: () => Ve,
          XL: () => T,
          Xw: () => a,
          ZT: () => ee,
          _R: () => Me,
          b9: () => I,
          dQ: () => c,
          gi: () => O,
          i3: () => L,
          j3: () => Q,
          jp: () => U,
          jq: () => Ue,
          kM: () => Ke,
          mn: () => E,
          of: () => ye,
          px: () => Ze,
          uL: () => m,
          vB: () => $,
          w2: () => De,
          wV: () => Se,
          xY: () => u,
          xc: () => R,
          z2: () => l,
          zF: () => oe,
          zg: () => ke,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(7164668892),
          i = e.n(s),
          d = e(3305135794),
          o = e.n(d);
        let a = s.CheckAudioConnectivityFeedback,
          r = s.CheckAudioInputFeedback,
          c = s.CheckAudioOutputFeedback,
          u = s.CheckCameraResolutionFeedback,
          l = s.CheckContentShareConnectivityFeedback,
          m = s.CheckNetworkTCPConnectivityFeedback,
          v = s.CheckNetworkUDPConnectivityFeedback,
          E = s.CheckVideoConnectivityFeedback,
          T = s.CheckVideoInputFeedback,
          g = s.LogLevel,
          I = s.MeetingSessionStatusCode,
          f = s.TranscriptItemType,
          y = null;
        const M = null;
        let p = null;
        const O = s.AllHighestVideoBandwidthPolicy;
        let C,
          h = null,
          D = null;
        const P = s.DefaultDeviceController;
        let S;
        const b = s.DefaultMeetingReadinessChecker;
        let K;
        const x = s.DefaultMeetingSession;
        let B,
          U = s.DefaultModality,
          R = s.DefaultVideoTile,
          G = s.MeetingSessionConfiguration,
          H = null,
          F = null,
          V = null,
          X = s.PermissionDeniedError,
          q = null,
          oe = s.Versioning,
          z = null,
          Ae = null,
          ae = null,
          de = null,
          ve = null,
          Se = s.VoiceFocusDeviceTransformer,
          Ee = null,
          be = s.DefaultVideoTransformDevice,
          Ce = s.BackgroundBlurVideoFrameProcessor,
          Z = null,
          $ = s.CSPMonitor;
        const N = null;
        let L = s.VideoFxProcessor,
          w = s.VideoCodecCapability,
          k = !1,
          J = !1;
        function ee(xe) {
          return ne.apply(this, arguments);
        }
        _(ee, "setUseExpSDK");
        function ne() {
          return (
            (ne = (0, t.coroutine)(function* (xe) {
              if (((k = xe), !k || J)) return;
              const je = yield Promise.resolve().then(
                e.t.bind(e, 3305135794, 23)
              );
              (a = je.CheckAudioConnectivityFeedback),
                (r = je.CheckAudioInputFeedback),
                (c = je.CheckAudioOutputFeedback),
                (u = je.CheckCameraResolutionFeedback),
                (l = je.CheckContentShareConnectivityFeedback),
                (m = je.CheckNetworkTCPConnectivityFeedback),
                (v = je.CheckNetworkUDPConnectivityFeedback),
                (E = je.CheckVideoConnectivityFeedback),
                (T = je.CheckVideoInputFeedback),
                (p = je.ClientVideoStreamReceivingReport),
                (h = je.ConnectionHealthData),
                (D = je.DataMessage),
                (S = je.DefaultDeviceController),
                (K = je.DefaultMeetingReadinessChecker),
                (B = je.DefaultMeetingSession),
                (U = je.DefaultModality),
                (R = je.DefaultVideoTile),
                (g = je.LogLevel),
                (G = je.MeetingSessionConfiguration),
                (H = je.MeetingSessionStatus),
                (I = je.MeetingSessionStatusCode),
                (F = je.MeetingSessionVideoAvailability),
                (V = je.MutableVideoPreferences),
                (X = je.PermissionDeniedError),
                (q = je.TargetDisplaySize),
                (f = je.TranscriptItemType),
                (y = je.TranscriptionStatusType),
                (oe = je.Versioning),
                (z = je.VideoPreference),
                (Ae = je.VideoPreferences),
                (ae = je.VideoPriorityBasedPolicy),
                (de = je.VideoPriorityBasedPolicyConfig),
                (ve = je.VideoTileState),
                (C = je.AudioProfile),
                (Se = je.VoiceFocusDeviceTransformer),
                (Ee = je.DefaultBrowserBehavior),
                (be = je.DefaultVideoTransformDevice),
                (Ce = je.BackgroundBlurVideoFrameProcessor),
                (Z = je.BackgroundReplacementVideoFrameProcessor),
                ($ = je.CSPMonitor),
                (L = je.VideoFxProcessor),
                (w = je.VideoCodecCapability),
                (J = !0);
            })),
            ne.apply(this, arguments)
          );
        }
        _(ne, "_setUseExpSDK");
        function pe() {
          return k;
        }
        _(pe, "isUsingExpSDK");
        function Me() {
          return S || P;
        }
        _(Me, "getDefaultDeviceController");
        function ke() {
          return P;
        }
        _(ke, "getDefaultDeviceControllerDefault");
        function ge() {
          return S;
        }
        _(ge, "getDefaultDeviceControllerExp");
        function fe() {
          return K || b;
        }
        _(fe, "getDefaultMeetingReadinessChecker");
        function re() {
          return b;
        }
        _(re, "getDefaultMeetingReadinessCheckerDefault");
        function le() {
          return K;
        }
        _(le, "getDefaultMeetingReadinessCheckerExp");
        function Re() {
          return B || x;
        }
        _(Re, "getDefaultMeetingSession");
        function ye() {
          return x;
        }
        _(ye, "getDefaultMeetingSessionDefault");
        function Te() {
          return B;
        }
        _(Te, "getDefaultMeetingSessionExp");
        function De() {
          return Se;
        }
        _(De, "getVoiceFocusDeviceTransformer");
        function Ue() {
          return be;
        }
        _(Ue, "getDefaultVideoTransformDevice");
        function Ke() {
          return Ce;
        }
        _(Ke, "getBackgroundBlurVideoFrameProcessor");
        function Ze() {
          return d.BackgroundReplacementVideoFrameProcessor;
        }
        _(Ze, "getBackgroundReplacementVideoFrameProcessor");
        function Q() {
          return s.AudioProfile;
        }
        _(Q, "getAudioProfileDefault");
        function ie() {
          return C;
        }
        _(ie, "getAudioProfileExp");
        function Ve(xe) {
          return !!xe.type;
        }
        _(Ve, "isTranscriptEventTranscriptionStatus");
      },
      252549317: (W, A, e) => {
        "use strict";
        e.d(A, {
          LD: () => o,
          MS: () => a,
          Vd: () => c,
          k0: () => r,
        });
        var t = e(8571983633),
          n = e(571104883),
          s = e(9042410435);
        const i = "4.30.79",
          d = [s.R.DesktopScreen, s.R.DesktopWindow];
        function o() {
          return !!(0, n.dY)(i);
        }
        _(o, "isWindowDrawingSupported");
        function a(u) {
          return (0, t.A)(u)
            ? s.f.None
            : u.startsWith("screen:")
            ? s.f.Screen
            : u.startsWith("window:")
            ? s.f.Window
            : s.f.Other;
        }
        _(a, "determineContentShareTypeFromSourceId");
        function r(u) {
          if (!(0, n.y3)()) return s.R.BrowserContent;
          const l = a(u);
          if ((0, n.y3)())
            switch (l) {
              case s.f.Screen:
                return s.R.DesktopScreen;
              case s.f.Window:
                return s.R.DesktopWindow;
              default:
                return s.R.DesktopUnknown;
            }
          return s.R.Unknown;
        }
        _(r, "determineFullContentShareSourceType");
        function c(u) {
          return d.includes(u);
        }
        _(c, "doesContentShareTypeSupportDrawing");
      },
      9042410435: (W, A, e) => {
        "use strict";
        e.d(A, {
          R: () => n,
          f: () => t,
        });
        var t;
        (function (s) {
          (s.Screen = "screen"),
            (s.Window = "window"),
            (s.Other = "other"),
            (s.None = "none");
        })(t || (t = {}));
        var n;
        (function (s) {
          (s.DesktopScreen = "desktop:screen"),
            (s.DesktopWindow = "desktop:window"),
            (s.DesktopUnknown = "desktop:unknown"),
            (s.BrowserContent = "browser:content"),
            (s.MobileScreen = "mobile:screen"),
            (s.Unknown = "unknown");
        })(n || (n = {}));
      },
      416787925: (W, A, e) => {
        "use strict";
        e.d(A, {
          Bm: () => c,
          LL: () => a,
          On: () => E,
          Zy: () => o,
          dx: () => d,
          my: () => r,
          tk: () => l,
        });
        var t = e(2208015175),
          n = e(7174777686),
          s = e(8736071954),
          i = e(336376314);
        const d = "default",
          o = "communications",
          a = [s.lW.Microphone, s.lW.Camera, s.Q4];
        function r(T, g) {
          let I =
            arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : a;
          (0, t.A)(g, (f, y) => {
            if (!(0, n.A)(I, y)) return;
            if (!f.length) {
              T.warn(`No ${y} devices available`);
              return;
            }
            const M = new i.M(["id", "label"]);
            f.forEach((p) => {
              M.add([p.id, p.label].map(String));
            }),
              T.info(`${y} devices:
${M.report()}`);
          });
        }
        _(r, "logDevices");
        function c() {
          return {
            camera: [],
            microphone: [],
            output: [],
          };
        }
        _(c, "createEmptyDevices");
        const u = {
          audioinput: s.lW.Microphone,
          videoinput: s.lW.Camera,
          audiooutput: s.Q4,
        };
        function l(T) {
          const g = u[T.kind],
            I = {
              id: T.deviceId,
              label: T.label || void 0,
              groupId: T.groupId || void 0,
            };
          return m(g)
            ? {
                ...I,
                type: g,
              }
            : {
                ...I,
                type: g,
              };
        }
        _(l, "makeDevice");
        function m(T) {
          return T !== s.Q4;
        }
        _(m, "isInputDeviceType");
        function v(T) {
          return m(T.type);
        }
        _(v, "isInputDevice");
        function E(T) {
          return T.replace(/ *?\([^)]*?\) *?/g, "");
        }
        _(E, "removeDeviceIdFromDeviceLabel");
      },
      1473609332: (W, A, e) => {
        "use strict";
        e.d(A, {
          t3: () => a,
          Bh: () => m,
          i4: () => T,
        });
        var t = e(9706240641),
          n = e(4103274853);
        function s() {
          return "0.1";
        }
        _(s, "getDevicePrefsVersion");
        var i = e(416787925),
          d = e(2825968873);
        const o = "devicePrefs";
        function a(f) {
          return (0, n.A)(f, (y) => y[0]);
        }
        _(a, "getPreferredDevices");
        function r() {
          return {
            camera: [],
            microphone: [i.dx, i.Zy],
            output: [i.dx, i.Zy],
          };
        }
        _(r, "createDefaultDevicePriority");
        function c() {
          return {
            camera: [],
            microphone: [],
            output: [],
          };
        }
        _(c, "createDefaultDeviceExtendedPriority");
        function u() {
          return {
            enableAGC: !0,
            enableNoiseSuppression: !0,
          };
        }
        _(u, "createDefaultAudioPrefs");
        function l() {
          return {
            enableHD: !1,
            mirrorVideo: !1,
            effect: void 0,
          };
        }
        _(l, "createDefaultVideoPrefs");
        function m() {
          const f = localStorage.getItem(o),
            y = {
              version: s(),
              deviceIdPriorities: r(),
              deviceIdPrioritiesExtended: c(),
              video: l(),
              audio: u(),
            };
          if (!f) return y;
          try {
            const M = JSON.parse(f);
            return M.version !== s()
              ? y
              : {
                  ...y,
                  ...M,
                };
          } catch (M) {
            return (
              (0, d.tZ)("DEVICES").error(
                "Could not read device preferences from localStorage: ",
                M.message
              ),
              y
            );
          }
        }
        _(m, "readDevicePrefs");
        function v(f) {
          return E.apply(this, arguments);
        }
        _(v, "updateDeviceIdPrioritiesExtended");
        function E() {
          return (
            (E = (0, t.coroutine)(function* (f) {
              const y = {},
                M = yield navigator.mediaDevices.enumerateDevices();
              for (const p of Object.keys(f)) {
                const O = [],
                  C = p;
                for (let h = 0; h < f[C].length; h++) {
                  const D = f[C][h],
                    P = M.find((S) => S.deviceId === D);
                  P &&
                    O.push({
                      id: P.deviceId,
                      groupId: P.groupId,
                      label: P.label,
                      labelWithoutId: (0, i.On)(P.label),
                    });
                }
                y[p] = O;
              }
              return y;
            })),
            E.apply(this, arguments)
          );
        }
        _(E, "_updateDeviceIdPrioritiesExtended");
        function T(f) {
          return g.apply(this, arguments);
        }
        _(T, "writeDevicePrefs");
        function g() {
          return (
            (g = (0, t.coroutine)(function* (f) {
              try {
                const y = yield v(f.deviceIdPriorities),
                  M = {
                    ...f,
                    deviceIdPrioritiesExtended: y,
                  };
                localStorage.setItem(o, JSON.stringify(M));
              } catch (y) {
                (0, d.tZ)("DEVICES").error(
                  "Could not write device preferences to localStorage: ",
                  y.message
                );
              }
            })),
            g.apply(this, arguments)
          );
        }
        _(g, "_writeDevicePrefs");
        function I(f, y) {
          let M =
            arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
          const p = zipObject(y, range(y.length)),
            O = zipObject(
              M.map((C) => C.labelWithoutId),
              range(M.length)
            );
          return sortBy(f, (C) => {
            const h = removeDeviceIdFromDeviceLabel(C.label);
            return isUndefined(p[C.deviceId])
              ? isUndefined(O[h])
                ? 1 / 0
                : O[h]
              : p[C.deviceId];
          });
        }
        _(I, "sortDevicesByPriorityWithFallback");
      },
      9195837907: (W, A, e) => {
        "use strict";
        e.d(A, {
          t: () => t,
        });
        var t;
        (function (n) {
          (n.Blur = "blur"), (n.Background = "bg");
        })(t || (t = {}));
      },
      7149946954: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => D,
        });
        var t = e(9706240641),
          n = e(8736071954),
          s = e(4518410378),
          i = e(5387083734),
          d = e(462591818),
          o = e(571104883),
          a = e(796111729),
          r;
        (function (P) {
          (P.Granted = "granted"),
            (P.Denied = "denied"),
            (P.Prompt = "prompt"),
            (P.NotDetermined = "not-determined"),
            (P.Restricted = "restricted"),
            (P.Unknown = "unknown");
        })(r || (r = {}));
        var c;
        (function (P) {
          (P.CAMERA = "camera"),
            (P.MICROPHONE = "microphone"),
            (P.SCREEN = "display-capture");
        })(c || (c = {}));
        const u = {
            [d.mT.MICROPHONE]: c.MICROPHONE,
            [d.mT.CAMERA]: c.CAMERA,
            [d.mT.SCREEN]: c.SCREEN,
          },
          l = {
            [d.mT.MICROPHONE]: null,
            [d.mT.CAMERA]: null,
            [d.mT.SCREEN]: null,
          },
          m = _(
            () => ({
              ...l,
            }),
            "getInitialPermissionsState"
          );
        var v = e(6998663753),
          E = e(6422693406);
        let T = _(
          class {
            constructor(S) {
              (this.config = S),
                (this.canAccessMediaResource = (B) => {
                  const U = this.wasPermissionGranted(B);
                  return (
                    this.logger.info(`${B} permissions granted: ${U}`),
                    {
                      isAvailable: this.config.isElectronApiAvailable,
                      status: this.permissions[B],
                    }
                  );
                });
              var b = this;
              this.requestMediaAccess = (function () {
                var B = (0, t.coroutine)(function* (U) {
                  return (
                    b.updatePermissionsState(
                      U,
                      b.getDefaultAccessResult().status
                    ),
                    b.logger.error(
                      "Requesting media access is not implemented for this device, but it is being called. This is likely a bug."
                    ),
                    E.S.resolve({
                      isAvailable: b.config.isElectronApiAvailable,
                      isGranted: !0,
                    })
                  );
                });
                return function (U) {
                  return B.apply(this, arguments);
                };
              })();
              var K = this;
              this.refreshAllPermissions = (0, t.coroutine)(function* () {
                try {
                  yield K.refreshDevicePermissionStatus(d.mT.MICROPHONE),
                    yield K.refreshDevicePermissionStatus(d.mT.CAMERA),
                    yield K.refreshDevicePermissionStatus(d.mT.SCREEN);
                } catch (B) {
                  K.logger.warn(
                    "An error occurred while refreshing device permissions",
                    B
                  );
                }
              });
              var x = this;
              (this.refreshDevicePermissionStatus = (function () {
                var B = (0, t.coroutine)(function* (U) {
                  x.updatePermissionsState(
                    U,
                    x.getDefaultAccessResult().status
                  );
                });
                return function (U) {
                  return B.apply(this, arguments);
                };
              })()),
                (this.getDefaultAccessResult = () => ({
                  isAvailable: this.config.isElectronApiAvailable,
                  status: n.eJ.Granted,
                })),
                (this.updatePermissionsState = (B, U) => {
                  this.permissions[B] !== U &&
                    (this.logger.info(
                      `permission state for ${B} changed to ${U}`
                    ),
                    (this.permissions[B] = U),
                    this.config.onPermissionsChange(this.permissions));
                }),
                (this.wasPermissionGranted = (B) => {
                  let U = !1;
                  return (
                    this.permissions[B] &&
                      (U = this.permissions[B] === n.eJ.Granted),
                    U
                  );
                }),
                (this.hasNoKnownPermissions = (B) =>
                  this.permissions[B] === null),
                (this.logger = this.config.logger),
                (this.permissions = this.config.initialState);
            }
          },
          "DefaultDevicePermissions"
        );
        var g = e(3245843483);
        let I = _(
            class extends T {
              constructor(S) {
                super(S);
                var b = this;
                this.refreshDevicePermissionStatus = (function () {
                  var x = (0, t.coroutine)(function* (B) {
                    const { status: U } = yield (0, g.XBC)(B);
                    b.logger.info(
                      `Received ${B} access status for desktop app: ${U}`
                    ),
                      b.updatePermissionsState(B, U);
                  });
                  return function (B) {
                    return x.apply(this, arguments);
                  };
                })();
                var K = this;
                this.requestMediaAccess = (function () {
                  var x = (0, t.coroutine)(function* (B) {
                    const { isAvailable: U, isGranted: R } = yield (0, g.Nin)(
                      B
                    );
                    return (
                      K.updatePermissionsState(
                        B,
                        R ? n.eJ.Granted : n.eJ.Denied
                      ),
                      {
                        isAvailable: U,
                        isGranted: !!R,
                      }
                    );
                  });
                  return function (B) {
                    return x.apply(this, arguments);
                  };
                })();
              }
            },
            "DesktopDevicePermissions"
          ),
          f = _(
            class extends T {
              constructor(S) {
                super(S);
                var b = this;
                this.refreshDevicePermissionStatus = (function () {
                  var K = (0, t.coroutine)(function* (x) {
                    if (x === d.mT.SCREEN) return;
                    const B =
                      x === d.mT.MICROPHONE ? "audioinput" : "videoinput";
                    try {
                      const R =
                          (yield navigator.mediaDevices.enumerateDevices()).filter(
                            (H) => H.kind === B
                          ),
                        G =
                          R.length > 0 && R.some((H) => H.label.trim() !== "");
                      b.updatePermissionsState(
                        x,
                        G ? n.eJ.Granted : n.eJ.NotDetermined
                      );
                    } catch {
                      b.logger.error(
                        'An error occurred enumerating devices. Setting access status to "granted"'
                      ),
                        b.updatePermissionsState(x, n.eJ.NotDetermined);
                    }
                  });
                  return function (x) {
                    return K.apply(this, arguments);
                  };
                })();
              }
            },
            "FirefoxDevicePermissions"
          ),
          y = _(
            class extends T {
              constructor(...S) {
                super(...S), (this.changeHandlers = m());
                var b = this;
                (this.refreshDevicePermissionStatus = (function () {
                  var K = (0, t.coroutine)(function* (x) {
                    const B = yield navigator.permissions.query({
                      name: u[x],
                    });
                    b.updatePermissionsState(x, B.state),
                      b.logger.info(
                        `Received ${x} access status for browser: ${b.permissions[x]}`
                      ),
                      b.maybeRegisterPermissionChangeListener(x, B);
                  });
                  return function (x) {
                    return K.apply(this, arguments);
                  };
                })()),
                  (this.maybeRegisterPermissionChangeListener = (K, x) => {
                    if (!this.changeHandlers[K]) {
                      const B = _(
                        () =>
                          this.onPermissionChangeEvent(
                            K,
                            x == null ? void 0 : x.state
                          ),
                        "handler"
                      );
                      x.addEventListener("change", B),
                        (this.changeHandlers[K] = B);
                    }
                  }),
                  (this.onPermissionChangeEvent = (K, x) => {
                    this.updatePermissionsState(K, x);
                  });
              }
            },
            "BrowserDevicePermissions"
          );
        var M = e(6673728906);
        const p = "device-permissions-state",
          O = 7 * 24 * 60 * 60 * 1e3,
          C = 5 * 1e3;
        class h {
          isPersistedStateTrustworthy(S) {
            return !(!S || Date.now() - S > O);
          }
          savePermissionsToLocalStorage(S) {
            try {
              const b = {
                  permissions: S,
                  timestamp: Date.now(),
                },
                K = JSON.stringify(b);
              localStorage.setItem(p, K),
                this.logger.info(`Permissions saved to local storage: ${K}`);
            } catch (b) {
              this.logger.error("Error saving permissions to local storage", b);
            }
          }
          readPermissionsFromLocalStorage() {
            try {
              const S = localStorage.getItem(p);
              if (S) {
                this.logger.info(`Permissions loaded from local storage ${S}`);
                const b = JSON.parse(S);
                return this.isPersistedStateTrustworthy(
                  b == null ? void 0 : b.timestamp
                )
                  ? b.permissions
                  : (this.logger.warn(
                      "Permissions not considered trustworthy. Requiring refresh"
                    ),
                    null);
              }
            } catch (S) {
              this.logger.error(
                "Error reading permissions from local storage",
                S
              );
            }
            return null;
          }
          constructor() {
            (this.isSSB = (0, o.y3)()),
              (this.logger = (0, a.Wo)({
                label: "DEVICE-PERMISSIONS-MANAGER",
              })),
              (this.initialized = !1);
            var S = this;
            (this.init = (0, v.A)(
              (0, t.coroutine)(function* () {
                S.logger.info("Initializing media device permissions manager"),
                  (S.initialized = !0),
                  (S.permissionsStrategy = S.getStrategy()),
                  setTimeout(S.refreshAllPermissions, C),
                  S.logger.info("Scheduled permissions refresh");
              })
            )),
              (this.canAccessMediaResource = (B) => {
                var U, R;
                return !(
                  (U = this.permissionsStrategy) === null || U === void 0
                ) && U.canAccessMediaResource
                  ? this.permissionsStrategy.canAccessMediaResource(B)
                  : {
                      isAvailable: !!(
                        !((R = this.config) === null || R === void 0) &&
                        R.isElectronApiAvailable
                      ),
                      status: n.eJ.Granted,
                    };
              });
            var b = this;
            (this.requestMediaAccess = (function () {
              var B = (0, t.coroutine)(function* (U) {
                var R;
                return !((R = b.config) === null || R === void 0) &&
                  R.isElectronApiAvailable
                  ? b.permissionsStrategy.requestMediaAccess(U)
                  : (b.logger.warn("Permissions strategy not available"),
                    {
                      isAvailable: !1,
                      isGranted: !0,
                    });
              });
              return function (U) {
                return B.apply(this, arguments);
              };
            })()),
              (this.getStrategy = () => {
                const B = {
                  initialState: this.readPermissionsFromLocalStorage() || m(),
                  isElectronApiAvailable: this.isSSB,
                  onPermissionsChange: this.onPermissionsChange,
                  logger: this.logger,
                };
                return (
                  (this.config = B),
                  (0, o.y3)()
                    ? (this.logger.info(
                        "Using desktop device permissions strategy"
                      ),
                      new I(B))
                    : (0, o.gm)()
                    ? (this.logger.info(
                        "Using Firefox device permissions strategy"
                      ),
                      new f(B))
                    : this.shouldUsePermissionsApi()
                    ? (this.logger.info(
                        "Using browser device permissions strategy"
                      ),
                      new y(B))
                    : (this.logger.info(
                        "Using default device permissions strategy"
                      ),
                      new T(B))
                );
              }),
              (this.onPermissionsChange = (B) => {
                this.logger.info("Permissions changed", B),
                  (0, M.pq)(),
                  this.savePermissionsToLocalStorage(B);
              });
            var K = this;
            this.refreshAllPermissions = (0, t.coroutine)(function* () {
              K.logger.info("Refreshing all permissions");
              try {
                yield navigator.mediaDevices.enumerateDevices(),
                  yield K.refreshPermissions(d.mT.MICROPHONE),
                  yield K.refreshPermissions(d.mT.CAMERA),
                  yield K.refreshPermissions(d.mT.SCREEN);
              } catch (B) {
                K.logger.warn(
                  "An error occurred while refreshing device permissions",
                  B
                );
              }
            });
            var x = this;
            (this.refreshPermissions = (function () {
              var B = (0, t.coroutine)(function* (U) {
                return (
                  x.logger.debug(`Refreshing ${U} permissions`),
                  (0, i.IE)(
                    "media-access-update",
                    (0, t.coroutine)(function* () {
                      return x.permissionsStrategy.refreshDevicePermissionStatus(
                        U
                      );
                    })
                  ).catch((R) => {
                    x.logger.warn(
                      `An error occurred while trying to check ${U} permissions`,
                      R
                    );
                  })
                );
              });
              return function (U) {
                return B.apply(this, arguments);
              };
            })()),
              (this.shouldUsePermissionsApi = () =>
                !this.isSSB && !(0, o.gm)() && "permissions" in s.J.navigator),
              (this.clearAllPermissions = () => {
                this.initialized && this.savePermissionsToLocalStorage(m());
              });
          }
        }
        _(h, "DevicePermissionsManager");
        const D = new h();
      },
      6673728906: (W, A, e) => {
        "use strict";
        e.d(A, {
          _o: () => le,
          Nj: () => fe,
          T5: () => Me,
          Zy: () => ee,
          G0: () => Re,
          pq: () => ke,
          cT: () => pe,
          i_: () => ne,
          es: () => re,
        });
        var t = e(9706240641),
          n = e(8736071954),
          s;
        (function (ye) {
          (ye.Microphone = "audioinput"),
            (ye.Camera = "videoinput"),
            (ye.Speakers = "audiooutput");
        })(s || (s = {}));
        const i = _(
            (ye) =>
              ({
                [n.lW.Microphone]: s.Microphone,
                [n.lW.Camera]: s.Camera,
                [n.Q4]: s.Speakers,
              }[ye]),
            "adapter_mapDeviceTypeToDeviceKind"
          ),
          d = _(
            (ye) =>
              ({
                [s.Microphone]: n.lW.Microphone,
                [s.Camera]: n.lW.Camera,
                [s.Speakers]: n.Q4,
              }[ye]),
            "mapDeviceKindToDeviceType"
          ),
          o = _((ye) => {
            const Te = d(ye.kind);
            return Te === n.Q4
              ? {
                  id: ye.deviceId,
                  label: ye.label,
                  groupId: ye.groupId,
                  type: n.Q4,
                }
              : {
                  id: ye.deviceId,
                  label: ye.label,
                  groupId: ye.groupId,
                  type: Te,
                  track: void 0,
                };
          }, "adapter_mapMediaDeviceInfoToDevice");
        var a = e(4423055085),
          r = e(4518410378),
          c = e(9113979368),
          u = e(9268023148),
          l = e(2208015175),
          m = e(235108050),
          v = e(8289365785),
          E = e(4103274853),
          T = e(796111729);
        const I = (0, T.Wo)({
          label: "DEVICE-PREFS",
        });
        var f = e(571104883),
          y = e(3078252698);
        const M = ["ZoomAudioDevice (Virtual)"],
          C = ["default", "communications"],
          h = _((ye) => C.includes(ye), "isOSDefaultDeviceId"),
          D = _((ye, Te) => {
            if (h(ye.deviceId)) return !1;
            const De = Te.find((Ue) => h(Ue.deviceId) && Ue.kind === ye.kind);
            return (
              (De == null ? void 0 : De.groupId) === ye.groupId &&
              (De == null ? void 0 : De.label.includes(ye.label))
            );
          }, "isOSDefaultDeviceForType"),
          P = _((ye) => {
            const Te = /iphone/,
              De = ye.label;
            if (!(0, y.A)(De)) return !1;
            const Ue = (0, f.cX)() && De && Te.test(De.toLowerCase()),
              Ke =
                (De == null
                  ? void 0
                  : De.toLowerCase().includes("display audio")) ||
                De.toLowerCase().includes("displayport");
            return Ue || Ke;
          }, "shouldDeprioritizeDevice"),
          S = _(
            (ye) => !ye.label || M.includes(ye.label),
            "shouldRemoveDevice"
          ),
          b = _(
            (ye) =>
              ye && ye.replace(/ *?\([a-zA-Z0-9]{4}:[a-zA-Z0-9]{4}\) *?/g, ""),
            "removeDeviceFingerprintFromLabel"
          ),
          K = _(
            (ye) =>
              ye
                .filter((Te) => Te.label)
                .map((Te) => ({
                  deviceId: Te.deviceId,
                  kind: Te.kind,
                  label: b(Te.label) || "",
                  groupId: Te.groupId,
                })),
            "scrubAvailableDevices"
          ),
          x = _((ye, Te) => `${ye}-${Te}`, "generateDeviceKey");
        var B = e(6696292586),
          U = e(6313685253),
          R = e(8086952004);
        const G = "version",
          H = 4,
          F = {
            1: (ye) => ye,
            2: (ye) =>
              (0, E.A)(ye, (Te) => {
                if ((0, B.A)(Te)) return Te;
                const De = {
                    ...Te,
                  },
                  Ue = b(Te.deviceLabel);
                return Ue && Ue !== Te.deviceLabel && (De.deviceLabel = Ue), De;
              }),
            3: (ye) =>
              (0, U.A)(
                ye,
                (Te, De, Ue) => {
                  if (!h(Ue) && Ue !== G) {
                    const Ke = (0, R.A)(
                      ye,
                      (Ze, Q) =>
                        h(Q) &&
                        Ze.deviceInfo.kind === De.deviceInfo.kind &&
                        Ze.deviceInfo.groupId === De.deviceInfo.groupId &&
                        Ze.deviceInfo.label.includes(De.deviceInfo.label)
                    );
                    Ke &&
                      (((!De.used && Ke.used) ||
                        (De.used && Ke.used && De.used < Ke.used)) &&
                        (De.used = Ke.used),
                      ((!De.selected && Ke.selected) ||
                        (De.selected &&
                          Ke.selected &&
                          De.selected < Ke.selected)) &&
                        (De.selected = Ke.selected)),
                      (Te[Ue] = De);
                  }
                  return Te;
                },
                {}
              ),
            4: (ye) =>
              (0, U.A)(
                ye,
                (Te, De, Ue) => {
                  if ((0, B.A)(De)) Te[Ue] = De;
                  else {
                    const { deviceId: Ke, kind: Ze } = De.deviceInfo,
                      Q = x(Ke, Ze);
                    Te[Q] = De;
                  }
                  return Te;
                },
                {}
              ),
          },
          V = _((ye) => ye[G] !== H, "isMigrationNeeded"),
          X = _((ye) => {
            if (!F[H]) throw new Error(`No migration found for version ${H}`);
            const Te = ye[G] || 0;
            if (Te === H) return ye;
            let De = {
              ...ye,
            };
            for (let Ue = Te; Ue < H; Ue++) {
              const Ke = Ue + 1,
                Ze = F[Ke];
              (De = Ze(De)), (De[G] = Ke);
            }
            return De;
          }, "maybeMigrateDeviceHistory");
        var q = e(1649982175);
        const oe = "device-selection-records",
          z = I,
          Ae = _(() => {
            let ye;
            try {
              const Te = localStorage.getItem(oe);
              Te
                ? ((ye = JSON.parse(Te)),
                  V(ye)
                    ? (z.debug(
                        `Migration needed for device selection history from ${ye[G]} to ${H}`
                      ),
                      (ye = X(ye)))
                    : z.debug(
                        "No migration needed for device selection history"
                      ))
                : (ye = void 0);
            } catch (Te) {
              z.error(
                "Failed to read device selection history from local storage",
                Te
              ),
                (ye = void 0);
            }
            return (
              z.debug(
                "Reading device selection history from local storage",
                ye
              ),
              ye ? (0, q.A)(ye, G) : void 0
            );
          }, "readSelectionHistoryFromLocalStorage"),
          ae = _((ye) => {
            if (ye) {
              z.debug("Writing device selection history to local storage", ye);
              try {
                const Te = {
                  ...ye,
                  [G]: H,
                };
                localStorage.setItem(oe, JSON.stringify(Te));
              } catch (Te) {
                z.error(
                  "Failed to write device selection history to local storage",
                  Te
                );
              }
            }
          }, "saveDeviceSelectionRecordsToLocalStorage");
        var de = e(700984029),
          ve = e(4250409994),
          Se = e(6533394955),
          Ee = e(3783723764),
          be = e(6217320234);
        class Ce {
          hasRecordForDevice(Te) {
            return !!this.getRecord(Te);
          }
          getFormattedLabelForRecord(Te) {
            const De = this.getRecord(Te);
            return De == null ? void 0 : De.deviceLabel;
          }
          wasDeviceSelected(Te) {
            const De = this.getRecord(Te);
            return !!(De != null && De.selected);
          }
          wasDeviceUsed(Te) {
            const De = this.getRecord(Te);
            return !!(De != null && De.used);
          }
          createRecord(Te) {
            const De = this.createEmptyDeviceSelectionRecord(Te);
            if (De.deviceLabel) {
              const Ue = this.findExistingRecordByLabel(Te, De.deviceLabel);
              if (Ue) {
                I.info(
                  `Matching device record found for label: ${Ue.deviceLabel} ${Ue.deviceInfo.deviceId}`
                ),
                  this.removeRecord(Ue.deviceInfo),
                  this.setRecord(Te, {
                    ...Ue,
                    deviceInfo: Te,
                  });
                return;
              }
            }
            this.setRecord(Te, De);
          }
          updateDeviceUsed(Te) {
            const De = this.getRecord(Te);
            De &&
              (I.info(
                `Removing device selection record for used device ${Te.deviceId}`
              ),
              this.setRecord(Te, {
                ...De,
                used: Date.now(),
              }));
          }
          updateDeviceSelected(Te) {
            const De = this.getRecord(Te);
            De &&
              (I.info(
                `Updating device selection record for selected device ${Te.deviceId}`
              ),
              this.setRecord(Te, {
                ...De,
                selected: Date.now(),
              }));
          }
          updateDeviceLabel(Te) {
            this.getRecord(Te) &&
              I.info(
                `Updating device selection record for label ${Te.label} ${Te.deviceId}`
              );
          }
          updateDeviceInfo(Te) {
            const De = this.getRecord(Te);
            De &&
              (I.debug(
                `Updating device selection record for device info ${Te.label} ${Te.deviceId}`
              ),
              this.setRecord(Te, {
                ...De,
                deviceLabel: Te.label,
                deviceInfo: Te,
              }));
          }
          persistToLocalStorage() {
            I.info("Persisting device selection records to local storage"),
              ae(this.records);
          }
          initFromLocalStorage() {
            (this.records = Ae() || {}),
              I.info(
                "Initializing device preferences manager from local storage"
              );
          }
          setRecord(Te, De) {
            const { deviceId: Ue, kind: Ke } = Te,
              Ze = x(Ue, Ke);
            I.debug(`Setting device selection record for ${Ze}`, De),
              (this.records[Ze] = De);
          }
          getRecord(Te) {
            let { deviceId: De, kind: Ue } = Te;
            const Ke = x(De, Ue);
            return this.records[Ke];
          }
          removeRecord(Te) {
            const { deviceId: De, kind: Ue } = Te,
              Ke = x(De, Ue);
            I.info(`Removing device selection record for ${Ke}`),
              delete this.records[Ke];
          }
          findExistingRecordByLabel(Te, De) {
            return Object.values(this.records).find(
              (Ke) => Ke.deviceLabel === De && Ke.deviceInfo.kind === Te.kind
            );
          }
          constructor() {
            (this.records = {}),
              (this.init = () => {
                this.initFromLocalStorage(), this.printRecords();
              }),
              (this.getAllRecordsForTesting = () => ({
                ...this.records,
              })),
              (this.getDeviceInfoForRecord = (Te) => {
                const De = this.getRecord(Te);
                if (De)
                  return {
                    ...De.deviceInfo,
                  };
              }),
              (this.sortDevicesByLastSelection = (Te) =>
                (0, Ee.A)(
                  Te,
                  (De) => {
                    var Ue;
                    return (Ue = this.records[x(De.deviceId, De.kind)]) ===
                      null || Ue === void 0
                      ? void 0
                      : Ue.selected;
                  },
                  "desc"
                )),
              (this.sortDevicesByLastUsed = (Te) =>
                (0, Ee.A)(
                  Te,
                  (De) => {
                    var Ue;
                    return (Ue = this.records[x(De.deviceId, De.kind)]) ===
                      null || Ue === void 0
                      ? void 0
                      : Ue.used;
                  },
                  "desc"
                )),
              (this.sortDevicesByLabel = (Te) =>
                (0, be.A)(Te, (De) => De.label)),
              (this.printRecords = () => {
                I.info("Device selection records:", this.records);
              }),
              (this.createEmptyDeviceSelectionRecord = (Te) => ({
                deviceInfo: Te,
                deviceLabel: Te.label,
                selected: null,
                used: null,
              }));
          }
        }
        _(Ce, "DeviceSelectionRecordsStore");
        let Z;
        const $ = _(
          () => (Z || (Z = new Ce()), Z),
          "getDeviceSelectionRecordStore"
        );
        class N {
          constructor() {
            (this.logger = I),
              (this.deviceSelectionRecords = $()),
              (this.availableDevices = []),
              (this.currentTeamId = null),
              (this.useDevicesExp = !1),
              (this.updatingAvailableDevicesPromise = null),
              (this.enqueuedPreferenceUpdates = {
                [s.Microphone]: !1,
                [s.Camera]: !1,
                [s.Speakers]: !1,
              }),
              (this.osDefaultDevices = {
                [s.Microphone]: null,
                [s.Camera]: null,
                [s.Speakers]: null,
              }),
              (this.prioritizedDeviceLists = {
                [s.Microphone]: [],
                [s.Camera]: [],
                [s.Speakers]: [],
              });
            var Te = this;
            this.init = (function () {
              var Q = (0, t.coroutine)(function* (ie) {
                let { teamId: Ve, useDevicesExp: xe } = ie;
                if (
                  (Te.deviceSelectionRecords.init(), Ve !== Te.currentTeamId)
                ) {
                  (Te.useDevicesExp = xe),
                    Te.useDevicesExp &&
                      Te.logger.info(
                        "Initializing device preferences manager with experimental features"
                      ),
                    (Te.currentTeamId = Ve),
                    (Te.dispatch = (0, Se.getStoreInstanceByTeamId)(
                      Ve
                    ).dispatch);
                  try {
                    yield Te.updateAvailableDevices(),
                      navigator.mediaDevices.addEventListener(
                        "devicechange",
                        Te.handleDeviceListChange
                      );
                  } catch (je) {
                    Te.logger.error(
                      "Error initializing device preferences manager",
                      je
                    );
                  }
                }
              });
              return function (ie) {
                return Q.apply(this, arguments);
              };
            })();
            var De = this;
            (this.refreshAvailableDevices = (0, t.coroutine)(function* () {
              yield De.updateAvailableDevices();
            })),
              (this.getPreferredDeviceOfType = (Q) =>
                this.getPrioritizedDeviceListOfType(Q)[0]),
              (this.getPrioritizedDeviceListOfType = (Q) =>
                this.prioritizedDeviceLists[Q]),
              (this.recordDeviceSelected = (Q, ie) => {
                try {
                  const { deviceId: Ve, deviceLabel: xe } =
                    this.lookupDeviceDetailsById(Q, ie);
                  if (!Ve) {
                    this.logger.warn(
                      "Device record not found for selected device id",
                      Q
                    );
                    return;
                  }
                  if (
                    !this.deviceSelectionRecords.hasRecordForDevice({
                      deviceId: Ve,
                      kind: ie,
                    })
                  ) {
                    this.logger.warn(
                      "No device selection record found for device id",
                      Ve
                    );
                    return;
                  }
                  this.logger.info(
                    `Reporting ${ie} device selected, label: ${xe}, id: ${Ve}`
                  ),
                    this.deviceSelectionRecords.updateDeviceSelected({
                      deviceId: Ve,
                      kind: ie,
                    }),
                    this.propagateUpdateToExternalStores();
                } catch (Ve) {
                  this.logger.error("Error reporting device selected", Ve);
                }
              }),
              (this.recordDeviceUsed = (Q, ie) => {
                try {
                  const { deviceId: Ve, deviceLabel: xe } =
                    this.lookupDeviceDetailsById(Q, ie);
                  if (!Ve) {
                    this.logger.warn(
                      "Device record not found for used device id",
                      Q
                    );
                    return;
                  }
                  this.logger.info(
                    `Reporting ${ie} device used, label: ${xe}, id: ${Ve}`
                  ),
                    this.deviceSelectionRecords.updateDeviceUsed({
                      deviceId: Ve,
                      kind: ie,
                    }),
                    this.propagateUpdateToExternalStores();
                } catch (Ve) {
                  this.logger.error("Error reporting device used", Ve);
                }
              }),
              (this.getOSDefaults = () => this.osDefaultDevices),
              (this.clearDeviceSelectionRecords = () => {
                ae({});
              }),
              (this.lookupDeviceDetailsById = (Q, ie) => {
                (0, c.A)(this.prioritizedDeviceLists[ie]) &&
                  this.updateAvailableDevices();
                const Ve = {
                    deviceId: null,
                    deviceLabel: null,
                  },
                  xe = h(Q) ? this.osDefaultDevices[ie] : Q;
                if (
                  (xe &&
                    h(xe) &&
                    this.logger.warn(
                      `OS default device id (${Q}) used for details. This should not happen`
                    ),
                  !xe)
                )
                  return (
                    this.logger.warn(
                      "Device record not found for device id",
                      xe
                    ),
                    Ve
                  );
                Ve.deviceId = xe;
                const je =
                    this.deviceSelectionRecords.getFormattedLabelForRecord({
                      deviceId: xe,
                      kind: ie,
                    }),
                  Fe = b(je);
                return Fe
                  ? ((Ve.deviceLabel = Fe), Ve)
                  : (this.logger.warn(
                      "Device record not found for device id",
                      xe
                    ),
                    Ve);
              });
            var Ue = this;
            this.updateAvailableDevices = (0, t.coroutine)(function* () {
              if (Ue.updatingAvailableDevicesPromise)
                return (
                  Ue.logger.info(
                    "Available devices update already in progress. Returning existing promise."
                  ),
                  Ue.updatingAvailableDevicesPromise
                );
              const Q = (function () {
                var ie = (0, t.coroutine)(function* (Ve) {
                  try {
                    Ue.logger.info("Updating available devices");
                    const xe =
                      yield r.J.navigator.mediaDevices.enumerateDevices();
                    Ue.logger.info(
                      `Available devices ${JSON.stringify(xe, null, 2)}`
                    ),
                      (Ue.availableDevices = K(xe)),
                      Ue.updateDeviceRecords(Ue.availableDevices),
                      Ue.logger.info(
                        "Updated device records after device list update. Propagating update"
                      ),
                      Ue.propagateUpdateToExternalStores(),
                      Ve();
                  } catch (xe) {
                    Ue.logger.error("Error updating available devices", xe),
                      Ve();
                  } finally {
                    Ue.updatingAvailableDevicesPromise = null;
                  }
                });
                return _(function (xe) {
                  return ie.apply(this, arguments);
                }, "updateFn");
              })();
              return (
                (Ue.updatingAvailableDevicesPromise = new Promise(Q)),
                Ue.updatingAvailableDevicesPromise
              );
            });
            var Ke = this;
            (this.waitForDeviceListUpdate = (0, t.coroutine)(function* () {
              yield Ke.updateAvailableDevices();
            })),
              (this.updatePrioritizedDeviceLists = () => {
                this.logger.debug("Updating prioritized device lists"),
                  this.updatePrioritizedDeviceListOfType(s.Microphone),
                  this.logger.debug(
                    "Updated mics",
                    this.prioritizedDeviceLists[s.Microphone]
                  ),
                  this.updatePrioritizedDeviceListOfType(s.Camera),
                  this.logger.debug(
                    "Updated cameras",
                    this.prioritizedDeviceLists[s.Camera]
                  ),
                  this.updatePrioritizedDeviceListOfType(s.Speakers),
                  this.logger.debug(
                    "Updated speakers",
                    this.prioritizedDeviceLists[s.Speakers]
                  );
              });
            var Ze = this;
            (this.handleDeviceListChange = (0, u.A)(
              (0, t.coroutine)(function* () {
                try {
                  Ze.logger.info(
                    `Device list change event received at ${Date.now()}`
                  ),
                    yield Ze.updateAvailableDevices();
                } catch (Q) {
                  Ze.logger.error("Error handling device list change event", Q);
                }
              }),
              1e3,
              {
                leading: !1,
                trailing: !0,
                maxWait: 2e3,
              }
            )),
              (this.updateDeviceRecords = (Q) => {
                (0, l.A)(Q, (ie) => {
                  if (!ie.deviceId || h(ie.deviceId)) return;
                  const Ve = this.deviceSelectionRecords.hasRecordForDevice(ie),
                    xe =
                      this.deviceSelectionRecords.getFormattedLabelForRecord(
                        ie
                      ),
                    je = this.deviceSelectionRecords.getDeviceInfoForRecord(ie);
                  if (Ve && je && je.kind !== ie.kind) {
                    this.logger.warn(
                      `device id collision between ${je.kind} device (${je.label}) and ${ie.kind} device (${ie.label})`
                    );
                    return;
                  }
                  if (
                    (Ve &&
                      ie.label &&
                      xe !== ie.label &&
                      (this.deviceSelectionRecords.updateDeviceInfo(ie),
                      this.logger.info(
                        `Device label updated from ${xe} to ${ie.label}`
                      )),
                    Ve
                      ? (this.logger.debug(
                          `Device history record found for ${ie.label} ${ie.deviceId}`
                        ),
                        this.deviceSelectionRecords.updateDeviceInfo(ie))
                      : (this.logger.info(
                          `Creating new device history record for ${ie.label} ${ie.deviceId}`
                        ),
                        this.deviceSelectionRecords.createRecord(ie)),
                    D(ie, Q) && this.osDefaultDevices[ie.kind] !== ie.deviceId)
                  ) {
                    var He;
                    const Ye =
                      ((He = this.getPreferredDeviceOfType(ie.kind)) === null ||
                      He === void 0
                        ? void 0
                        : He.deviceId) === this.osDefaultDevices[ie.kind];
                    (this.osDefaultDevices[ie.kind] = ie.deviceId),
                      this.logger.info(
                        `OS default device updated for ${ie.kind}: ${ie.label} ${ie.deviceId}`
                      ),
                      Ye &&
                        (this.logger.info(
                          `Preferred ${ie.kind} OS default has changed to: ${ie.label} ${ie.deviceId}. Recording as selected.`
                        ),
                        this.recordDeviceSelected(ie.deviceId, ie.kind));
                  }
                });
              }),
              (this.updatePrioritizedDeviceListOfType = (Q) => {
                var ie, Ve;
                let xe = null;
                const je = [],
                  Fe = [],
                  He = [],
                  Oe = [];
                this.availableDevices.forEach((Qe) => {
                  const ct = Qe.deviceId === this.osDefaultDevices[Qe.kind];
                  if (Qe.kind !== Q || h(Qe.deviceId)) return;
                  const Pt =
                    this.deviceSelectionRecords.getDeviceInfoForRecord(Qe);
                  if (!Pt) {
                    this.logger.error(
                      "No selection record found for device",
                      Qe
                    );
                    return;
                  }
                  if (!S(Pt)) {
                    if (this.deviceSelectionRecords.wasDeviceSelected(Pt)) {
                      je.push(Pt);
                      return;
                    }
                    if (this.deviceSelectionRecords.wasDeviceUsed(Pt)) {
                      Fe.push(Pt);
                      return;
                    }
                    if (P(Pt)) {
                      He.push(Pt);
                      return;
                    }
                    if (ct) {
                      xe = Pt;
                      return;
                    }
                    Oe.push(Pt);
                  }
                });
                const Ye = [];
                Ye.push(
                  ...this.deviceSelectionRecords.sortDevicesByLastSelection(je)
                ),
                  Ye.push(
                    ...this.deviceSelectionRecords.sortDevicesByLastUsed(Fe)
                  ),
                  Ye.push(xe),
                  Ye.push(
                    ...this.deviceSelectionRecords.sortDevicesByLabel(Oe)
                  ),
                  Ye.push(...He);
                const at = (0, m.A)(Ye).filter(Boolean),
                  _t =
                    (ie = (0, v.A)(at)) === null || ie === void 0
                      ? void 0
                      : ie.deviceId;
                return (
                  _t &&
                    _t !==
                      ((Ve = this.prioritizedDeviceLists[Q][0]) === null ||
                      Ve === void 0
                        ? void 0
                        : Ve.deviceId) &&
                    (this.enqueuedPreferenceUpdates[Q] = !0),
                  at && (this.prioritizedDeviceLists[Q] = at),
                  at
                );
              }),
              (this.updateDevicesInHuddle = () => {
                const Q = _((ie) => {
                  var Ve;
                  const xe =
                    (Ve = this.getPreferredDeviceOfType(ie)) === null ||
                    Ve === void 0
                      ? void 0
                      : Ve.deviceId;
                  !xe ||
                    !this.enqueuedPreferenceUpdates[ie] ||
                    ((this.enqueuedPreferenceUpdates[ie] = !1),
                    (0, Se.dispatchForClientStore)(
                      (0, ve.HC)({
                        id: xe,
                        type: d(ie),
                      })
                    ),
                    this.logger.info(
                      `Setting preferred ${ie} device in huddle`,
                      xe
                    ));
                }, "maybeApplyPreference");
                Q(s.Microphone), Q(s.Speakers), Q(s.Camera);
              }),
              (this.propagateUpdateToExternalStores = () => {
                this.deviceSelectionRecords.persistToLocalStorage(),
                  this.updatePrioritizedDeviceLists(),
                  this.logger.info(
                    "Propagating device selection history update"
                  ),
                  this.dispatch((0, de.Fb)(void 0)),
                  this.updateDevicesInHuddle();
              });
          }
        }
        _(N, "DevicePreferencesManager");
        const L = new N(),
          w = {
            printDeviceSelectionRecords: () => {
              const ye = $().getAllRecordsForTesting(),
                Te = (0, E.A)(ye, (De) => {
                  var Ue;
                  return {
                    deviceId: De.deviceInfo.deviceId,
                    label: De.deviceLabel,
                    type: De.deviceInfo.kind,
                    "is preferred":
                      ((Ue = L.getPreferredDeviceOfType(De.deviceInfo.kind)) ===
                        null || Ue === void 0
                        ? void 0
                        : Ue.deviceId) === De.deviceInfo.deviceId,
                    "last selected": De.selected
                      ? De.selected.toString()
                      : "Never selected",
                    "last used": De.used ? De.used.toString() : "Never used",
                    "is available": !!L.getPrioritizedDeviceListOfType(
                      De.deviceInfo.kind
                    ).find((Ke) => Ke.deviceId === De.deviceInfo.deviceId),
                    "is OS default":
                      De.deviceInfo.deviceId ===
                      L.getOSDefaults()[De.deviceInfo.kind],
                    groupId: De.deviceInfo.groupId,
                  };
                });
              console.log("Device selection records"), console.table(Te);
            },
            printPreferredMicrophone: () => {
              const ye = L.getPreferredDeviceOfType(s.Microphone);
              console.log("Preferred microphone", ye);
            },
            printPreferredCamera: () => {
              const ye = L.getPreferredDeviceOfType(s.Camera);
              console.log("Preferred camera", ye);
            },
            printPreferredSpeakers: () => {
              const ye = L.getPreferredDeviceOfType(s.Speakers);
              console.log("Preferred speakers", ye);
            },
            printPrioritizedDeviceLists: () => {
              const ye = (0, E.A)(L.getOSDefaults(), (Te, De) =>
                L.getPrioritizedDeviceListOfType(De)
              );
              (0, l.A)(ye, (Te, De) => {
                const Ue = Te.map((Ke) => ({
                  deviceId: Ke.deviceId,
                  label: Ke.label,
                  groupId: Ke.groupId,
                }));
                console.log(`Prioritized list for ${De}`), console.table(Ue);
              });
            },
            printRawDeviceList: (0, t.coroutine)(function* () {
              const ye = yield r.J.navigator.mediaDevices.enumerateDevices();
              console.log("Available devices"),
                ye.forEach((Te) => {
                  console.log(Te);
                });
            }),
            printDebugInfo: () => {
              w.printDeviceSelectionRecords(),
                w.printPrioritizedDeviceLists(),
                w.printPreferredMicrophone(),
                w.printPreferredCamera(),
                w.printPreferredSpeakers(),
                w.printRawDeviceList();
            },
            clearDeviceSelectionRecords: () => {
              L.clearDeviceSelectionRecords(), r.J.location.reload();
            },
          };
        (0, a.ul)("devices", w);
        const k = L;
        let J = null;
        const ee = (function () {
            var ye = (0, t.coroutine)(function* (Te) {
              let { teamId: De, useDevicesExp: Ue } = Te;
              !De ||
                J === De ||
                ((J = De),
                yield k.init({
                  teamId: De,
                  useDevicesExp: Ue,
                }));
            });
            return _(function (De) {
              return ye.apply(this, arguments);
            }, "initializeDevicePreferences");
          })(),
          ne = _((ye, Te) => {
            if (!J) return;
            const De = i(Te);
            k.recordDeviceUsed(ye, De);
          }, "reportDeviceUsed"),
          pe = _((ye, Te) => {
            if (!J) return;
            const De = i(Te);
            k.recordDeviceSelected(ye, De);
          }, "reportDeviceSelected"),
          Me = _(() => {
            if (!J) return;
            const ye = k.getPrioritizedDeviceListOfType(s.Microphone) || [],
              Te = k.getPrioritizedDeviceListOfType(s.Camera) || [],
              De = k.getPrioritizedDeviceListOfType(s.Speakers) || [];
            return {
              [n.lW.Microphone]: ye.map(o),
              [n.lW.Camera]: Te.map(o),
              [n.Q4]: De.map(o),
            };
          }, "getPrioritizedDeviceLists"),
          ke = (function () {
            var ye = (0, t.coroutine)(function* () {
              J && (yield k.refreshAvailableDevices());
            });
            return _(function () {
              return ye.apply(this, arguments);
            }, "refreshDeviceListsOnDevicePermissionsUpdate");
          })(),
          ge = _((ye) => {
            if (!J) return;
            const Te = mapDeviceTypeToDeviceKind(ye);
            return devicePreferencesManager
              .getPrioritizedDeviceListOfType(Te)
              .map(mapMediaDeviceInfoToDevice);
          }, "getPrioritizedDeviceListOfType"),
          fe = _((ye) => {
            if (!J) return;
            const Te = i(ye),
              De = k.getPreferredDeviceOfType(Te);
            if (De) return o(De);
          }, "getPreferredDeviceOfType"),
          re = (function () {
            var ye = (0, t.coroutine)(function* () {
              J && (yield k.waitForDeviceListUpdate());
            });
            return _(function () {
              return ye.apply(this, arguments);
            }, "waitForDeviceListUpdate");
          })(),
          le = _(() => {
            var ye;
            return (
              ((ye = fe(n.Q4)) === null || ye === void 0 ? void 0 : ye.id) ||
              "default"
            );
          }, "getPreferredAudioSinkId"),
          Re = _(() => !!J, "isDevicePreferencesManagerInitialized");
      },
      63202349: (W, A, e) => {
        "use strict";
        e.d(A, {
          k: () => o,
        });
        var t = e(6664301844),
          n = e(2825968873),
          s = e(6926388022),
          i = e(4423055085);
        const d = {
          debug: 0,
          info: 1,
          warn: 2,
          error: 3,
          action: 0,
        };
        class o {
          debug(r) {
            if (!(this.level > t.$b.DEBUG || !o.debugLogsEnabled))
              if (typeof r == "string") {
                const c = r;
                this.consoleLogger.debug(c);
              } else {
                const c = r();
                this.consoleLogger.debug(c);
              }
          }
          info(r) {
            this.level > t.$b.INFO || this.consoleLogger.info(r);
          }
          warn(r) {
            this.level > t.$b.WARN || this.consoleLogger.warn(r);
          }
          error(r) {
            this.level > t.$b.ERROR || this.callLogger.error(r);
          }
          setLogLevel(r) {
            this.level = r;
          }
          getLogLevel() {
            return this.level;
          }
          getName() {
            return this.name;
          }
          constructor(r, c) {
            (this.name = r),
              (this.level = c || d[(0, s.XM)()]),
              (this.consoleLogger = (0, n.Cc)(r)),
              (this.callLogger = (0, n.Jt)(r));
          }
        }
        _(o, "FreeWillyLogger"),
          (o.debugLogsEnabled = !1),
          (0, i.ul)("toggleChimeDebugLogs", () => {
            o.debugLogsEnabled = !o.debugLogsEnabled;
          });
      },
      8719752487: (W, A, e) => {
        "use strict";
        e.d(A, {
          Y: () => Kn,
        });
        var t = e(9706240641),
          n = e(1649982175),
          s = e(3750057149),
          i = e(6664301844),
          d = e(5741354339),
          o = e(8445020572),
          a = e(2825968873),
          r = e(8736071954),
          c = e(7561130599),
          u = e(4708000837),
          l = e(462591818),
          m = e(9268023148),
          v = e(3078252698),
          E = e(2003990933),
          T = e(571104883),
          g = e(8872167513),
          I = e(2709531527),
          f = e(6246464105),
          y = e(9853754481);
        let M = _(
          class {
            getLevel() {
              return (
                this.analyserNode.getByteTimeDomainData(this.data),
                (0, y.n2)(this.data) / y.Ep
              );
            }
            constructor(Y) {
              (this.analyserNode = Y),
                (this.data = new Uint8Array(this.analyserNode.fftSize));
            }
          },
          "AudioAnalyser"
        );
        var p = e(9009528296);
        const O = 300;
        class C {
          stop() {
            (this.previewAudioAnalyser = void 0), clearTimeout(this.timeoutId);
          }
          setPreviewAudioAnalyser(Y) {
            this.previewAudioAnalyser = Y;
          }
          constructor() {
            (this.timeoutId = -1),
              (this.monitorAudioLevel = () => {
                this.previewAudioAnalyser &&
                  p.A.subscriberCount > 0 &&
                  p.A.publish(this.previewAudioAnalyser.getLevel()),
                  (this.timeoutId = window.setTimeout(
                    this.monitorAudioLevel,
                    O
                  ));
              }),
              this.monitorAudioLevel();
          }
        }
        _(C, "AudioLevelMonitor");
        function h(dt, Y) {
          let { skipIntermediatePendingRuns: se = !0 } =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : {},
            he = !1,
            Le = [];
          const qe = (function () {
            var ht = (0, t.coroutine)(function* () {
              for (
                var et = arguments.length, Ut = new Array(et), $t = 0;
                $t < et;
                $t++
              )
                Ut[$t] = arguments[$t];
              if (he) {
                se && (Le = []);
                const $n = (0, d.u)();
                return (
                  Le.push({
                    args: Ut,
                    deferred: $n,
                  }),
                  $n
                );
              }
              he = !0;
              const En = yield Y.call(dt, ...Ut);
              he = !1;
              const wn = Le.shift();
              return (
                wn &&
                  qe(...wn.args)
                    .then(wn.deferred.resolve)
                    .catch(wn.deferred.reject),
                En
              );
            });
            return _(function () {
              return ht.apply(this, arguments);
            }, "run");
          })();
          return qe;
        }
        _(h, "serialGuard");
        var D = e(3496486794),
          P = e(6673728906);
        class S {
          initialize(Y) {
            let { preferredDeviceId: se } = Y;
            var he, Le, qe, ht, et, Ut, $t, En, wn, $n, j, ue, we, ft;
            if (
              !(
                !(
                  (he = this.defaultDeviceController) === null ||
                  he === void 0 ||
                  (Le = he.activeDevices) === null ||
                  Le === void 0 ||
                  (qe = Le.audio) === null ||
                  qe === void 0 ||
                  (ht = qe.stream) === null ||
                  ht === void 0
                ) && ht.getAudioTracks
              )
            )
              return;
            const pn = this.defaultDeviceController;
            if (
              !(
                !(
                  (et = this.defaultDeviceController) === null ||
                  et === void 0 ||
                  (Ut = et.activeDevices) === null ||
                  Ut === void 0 ||
                  ($t = Ut.audio) === null ||
                  $t === void 0 ||
                  (En = $t.stream) === null ||
                  En === void 0
                ) && En.getAudioTracks
              )
            ) {
              this.logger.warn(
                "Unable to retrieve audio tracks from the default device controller"
              );
              return;
            }
            const An = pn.activeDevices.audio.stream.getAudioTracks();
            if (An.length === 1) this.audioInputTrack = An[0];
            else {
              this.logger.warn(
                "No audio input tracks where found for the current audio device. Audio input tracks amount: {tracks.length}"
              );
              return;
            }
            (wn = this.audioInputTrack) === null ||
              wn === void 0 ||
              wn.addEventListener("mute", this.onMute),
              ($n = this.audioInputTrack) === null ||
                $n === void 0 ||
                $n.addEventListener("unmute", this.onUnmute),
              (j = this.audioInputTrack) === null ||
                j === void 0 ||
                j.addEventListener("ended", this.onEnded),
              !((ue = this.audioInputTrack) === null || ue === void 0) &&
              ue.muted
                ? this.onMute()
                : this.onUnmute();
            const yn =
              (ft =
                (we = this.audioInputTrack) === null || we === void 0
                  ? void 0
                  : we.getSettings()) === null || ft === void 0
                ? void 0
                : ft.deviceId;
            if (!yn) {
              this.logger.warn("No deviceId found for audio input track");
              return;
            }
            yn !== se
              ? this.logger
                  .warn(`Used audio input track device id (${yn}) does not match the preferred device id (${se}). 
				Preferred device is unavailable. User may report issues with other participants hearing them.`)
              : this.logger.info(
                  `Used audio input track device id matches the preferred device id (${se})`
                ),
              (0, P.cT)(yn, r.lW.Microphone);
          }
          tearDown() {
            var Y, se, he;
            (Y = this.audioInputTrack) === null ||
              Y === void 0 ||
              Y.removeEventListener("mute", this.onMute),
              (se = this.audioInputTrack) === null ||
                se === void 0 ||
                se.removeEventListener("unmute", this.onUnmute),
              (he = this.audioInputTrack) === null ||
                he === void 0 ||
                he.removeEventListener("ended", this.onEnded);
          }
          onMute() {
            (this.isAudioInputTrackMuted = !0),
              this.logger.warn("Audio input track is muted. Alerting the user"),
              this.observer.onAudioInputTrackMuted();
          }
          onUnmute() {
            this.isAudioInputTrackMuted &&
              this.logger.info(
                "Audio input track is unmuted. Removing alert if there is one"
              ),
              this.observer.onAudioInputTrackUnMuted(),
              (this.isAudioInputTrackMuted = !1);
          }
          onEnded() {
            this.logger.warn("Audio input track was ended.");
          }
          constructor(Y, se, he) {
            (this.defaultDeviceController = Y),
              (this.observer = se),
              (this.logger = he),
              (this.isAudioInputTrackMuted = !1),
              (this.onMute = this.onMute.bind(this)),
              (this.onUnmute = this.onUnmute.bind(this)),
              (this.onEnded = this.onEnded.bind(this));
          }
        }
        _(S, "AudioInputTrackHandler");
        var b;
        (function (dt) {
          (dt.Blur = "BLUR"), (dt.Image = "IMAGE"), (dt.None = "NONE");
        })(b || (b = {}));
        class K {
          constructor({ backgroundEffect: Y }) {
            (this.filterCPUUtilizationHigh = (se) => {
              const {
                cpuUtilization: he,
                filterMillis: Le,
                periodMillis: qe,
              } = se;
              this.callLogger.warn(
                `CPU utilization by video background processor is high - cpuUtilization: ${he} - spent ${Le}ms of last ${qe}ms processing video background`
              );
            }),
              (this.filterFrameDurationHigh = (se) => {
                const {
                  framesDropped: he,
                  avgFilterDurationMillis: Le,
                  framerate: qe,
                  periodMillis: ht,
                } = se;
                this.callLogger.warn(
                  `Frame duration by video background processor is high. framerate: ${qe}, frames dropped: ${he}, spent ${Le}ms of last ${ht}ms processing video background`
                );
              }),
              (this.callLogger = (0, a.Jt)(`VIDEO-BACKGROUND-${Y}`));
          }
        }
        _(K, "VideoBackgroundObserver");
        const x = K;
        var B = e(5071086688),
          U = e(5470425448),
          R = e(1473609332),
          G = e(9195837907),
          H = e(416787925),
          F = e(7149946954);
        class V {
          load() {
            var Y = this;
            return (0, t.coroutine)(function* () {
              if (Y.url.origin === window.location.origin)
                return new Worker(Y.url, Y.options);
              const he = yield (yield fetch(Y.url)).text(),
                Le = new Blob([he], {
                  type: "application/javascript",
                }),
                qe = URL.createObjectURL(Le);
              return new Worker(qe, Y.options);
            })();
          }
          constructor(Y, se) {
            (this.url = Y), (this.options = se);
          }
        }
        _(V, "CORSWorker");
        class X {
          intrinsicDevice() {
            var Y = this;
            return (0, t.coroutine)(function* () {
              return Y.device;
            })();
          }
          stop() {
            var Y = this;
            return (0, t.coroutine)(function* () {
              var se;
              Y.generatorVideoTrack.stop(),
                (se = Y.inputMediaStream) === null ||
                  se === void 0 ||
                  se.getTracks().forEach((he) => he.stop()),
                (yield Y.worker).terminate();
            })();
          }
          onOutputStreamDisconnect() {
            if (
              (this.generatorVideoTrack.stop(),
              !(this.device instanceof MediaStream))
            ) {
              var Y;
              (Y = this.inputMediaStream) === null ||
                Y === void 0 ||
                Y.getTracks().forEach((se) => se.stop());
            }
          }
          transformStream(Y) {
            var se = this;
            return (0, t.coroutine)(function* () {
              if (((se.inputMediaStream = Y), Y)) {
                const he = new MediaStreamTrackProcessor({
                  track: Y.getVideoTracks()[0],
                });
                (yield se.worker).postMessage(
                  {
                    type: "init",
                    input: he.readable,
                    output: se.generatorVideoTrack.writable,
                    width: Y.getVideoTracks()[0].getSettings().width,
                    height: Y.getVideoTracks()[0].getSettings().height,
                    bgImg: se.bgImg,
                  },
                  [
                    he.readable,
                    se.generatorVideoTrack.writable,
                    ...(se.bgImg ? [se.bgImg] : []),
                  ]
                );
              }
              return se.outputMediaStream;
            })();
          }
          constructor(Y, se) {
            (this.device = Y),
              (this.bgImg = se),
              (this.worker = new V(
                new URL(
                  e.p +
                    e.u(
                      "js_modern_app_free-willy_free-willy-sdk_filter-worker_background-worker_ts"
                    ),
                  e.b
                )
              ).load()),
              (this.generatorVideoTrack = new MediaStreamTrackGenerator({
                kind: "video",
              })),
              (this.outputMediaStream = new MediaStream([
                this.generatorVideoTrack,
              ]));
          }
        }
        _(X, "BackgroundWorkerVideoTransformDevice");
        var q = e(5221945366),
          oe;
        (function (dt) {
          (dt.START_PREVIEW = "start-preview"),
            (dt.STOP_PREVIEW = "stop-preview"),
            (dt.ENABLE = "enable"),
            (dt.DISABLE = "disable");
        })(oe || (oe = {}));
        const z = 1e4,
          Ae = 30,
          ae = "medium",
          de = !0,
          ve = 50;
        let Se = _(
          class {
            shutdown() {
              var Y = this;
              return (0, t.coroutine)(function* () {
                var se, he, Le;
                if (((Y.isShuttingDown = !0), Y.voiceFocusDevice)) {
                  var qe;
                  yield Y.voiceFocusDevice.stop(),
                    yield (qe = Y.voiceFocusManager) === null || qe === void 0
                      ? void 0
                      : qe.tearDown(),
                    (Y.voiceFocusDevice = void 0);
                }
                Y.audioVideoFacade.removeDeviceChangeObserver(Y),
                  Y.audioVideoFacade.stopLocalVideoTile(),
                  yield Y.audioVideoFacade.stopVideoInput(),
                  yield Y.audioVideoFacade.stopAudioInput(),
                  Y.audioVideoFacade.unbindAudioElement(),
                  Y.removeAudioElementErrorHandler(),
                  yield Y.clearVideoTransformDeviceRefs(),
                  Y.audioInputDeviceRefreshTimer &&
                    (clearTimeout(Y.audioInputDeviceRefreshTimer),
                    (Y.audioInputDeviceRefreshTimer = null)),
                  Y.videoInputDeviceRefreshTimer &&
                    (clearTimeout(Y.videoInputDeviceRefreshTimer),
                    (Y.videoInputDeviceRefreshTimer = null)),
                  Y.cameraMetricsTimeout &&
                    (clearTimeout(Y.cameraMetricsTimeout),
                    (Y.cameraMetricsTimeout = null)),
                  yield (he =
                    (se = (0, i._R)()) === null || se === void 0
                      ? void 0
                      : se.getAudioContext()) === null || he === void 0
                    ? void 0
                    : he.suspend(),
                  Y.callLogger.info("Audio context suspended"),
                  (Le = Y.audioLevelMonitor) === null ||
                    Le === void 0 ||
                    Le.stop(),
                  delete Y.audioLevelMonitor,
                  Y.callLogger.info("Device manager shutdown complete");
              })();
            }
            init() {
              var Y = this;
              return (0, t.coroutine)(function* () {
                yield Y.refreshMediaDeviceInfo(),
                  yield Y.determineInitialMicrophonePermissionState(),
                  Y.enumerateDevices(),
                  Y.logDevices(),
                  yield Y.updateMicrophone(),
                  yield Y.updateSpeaker(),
                  Y.isCameraEnabled && (yield Y.updateCamera());
              })();
            }
            determineInitialMicrophonePermissionState() {
              var Y = this;
              return (0, t.coroutine)(function* () {
                if ((0, T.y3)()) {
                  yield Y.determineInitialMicrophonePermissionStateForDesktop();
                  return;
                }
                yield Y.determineInitialMicrophonePermissionStateForBrowser();
              })();
            }
            determineInitialMicrophonePermissionStateForBrowser() {
              var Y = this;
              return (0, t.coroutine)(function* () {
                const { status: se } = F.Ay.canAccessMediaResource(
                  l.mT.MICROPHONE
                );
                let he;
                (se === r.eJ.Prompt ||
                  se === r.eJ.NotDetermined ||
                  se === r.eJ.Unknown) &&
                  (yield Y.audioVideoFacade.listAudioInputDevices(!0),
                  (he = F.Ay.canAccessMediaResource(l.mT.MICROPHONE).status)),
                  (se === r.eJ.Denied || he === r.eJ.Denied) &&
                    (Y.observer.onBrowserMediaDeviceAccessDenied(
                      l.mT.MICROPHONE
                    ),
                    Y.callLogger.warn(
                      "setting microphone to muted as microphone permission was not available during initialization"
                    ),
                    Y.setStartMutedBarrier(!0));
              })();
            }
            determineInitialMicrophonePermissionStateForDesktop() {
              var Y = this;
              return (0, t.coroutine)(function* () {
                const se = yield Y.maybeCheckSystemMediaAccess(l.mT.MICROPHONE);
                (0, T.j9)() ||
                  ((0, T.uF)() &&
                    !Y.options.useGetMediaAccessCheckForWindows) ||
                  (se &&
                    (se == null ? void 0 : se.status) === r.eJ.Denied &&
                    (Y.callLogger.warn(
                      "setting microphone to muted as microphone permission was not available during initialization"
                    ),
                    Y.setStartMutedBarrier(!0)));
              })();
            }
            setAGC(Y) {
              var se = this;
              return (0, t.coroutine)(function* () {
                se.prefs.audio &&
                  se.prefs.audio.enableAGC !== Y &&
                  (se.callLogger.info(`AGC setting changed: ${Y}`),
                  (se.prefs.audio.enableAGC = Y),
                  (0, R.i4)(se.prefs),
                  yield se.updateMicrophone());
              })();
            }
            setPreferredDevice(Y, se) {
              var he = this;
              return (0, t.coroutine)(function* () {
                switch (se) {
                  case r.lW.Microphone:
                    yield he.updateMicrophone();
                    break;
                  case r.Q4:
                    yield he.updateSpeaker();
                    break;
                  case r.lW.Camera:
                    he.isCameraEnabled && (yield he.updateCamera());
                    break;
                  default:
                    break;
                }
              })();
            }
            setPreferredCameraDeviceForPreview(Y) {
              var se = this;
              return (0, t.coroutine)(function* () {
                se.enumerateDevices(), yield se.updateCamera();
              })();
            }
            setVideoBackgroundEffect(Y) {
              let { effect: se, effectBgKey: he } = Y;
              var Le = this;
              return (0, t.coroutine)(function* () {
                Le.prefs.video &&
                  (Le.callLogger.info(`Video background effect changed: ${se}`),
                  (Le.prefs.video.effect = se),
                  (Le.prefs.video.effectBgKey = he),
                  (0, R.i4)(Le.prefs),
                  Le.isCameraEnabled && (yield Le.updateCamera()));
              })();
            }
            setNoiseSuppression(Y) {
              var se = this;
              return (0, t.coroutine)(function* () {
                se.prefs.audio &&
                  se.prefs.audio.enableNoiseSuppression !== Y &&
                  (se.callLogger.info(
                    `Noise suppression setting changed: ${Y}`
                  ),
                  (se.prefs.audio.enableNoiseSuppression = Y),
                  (0, R.i4)(se.prefs),
                  yield se.updateMicrophone());
              })();
            }
            setStartMutedBarrier(Y) {
              var se = this;
              return (0, t.coroutine)(function* () {
                !se.isStartMutedBarrierActive && Y
                  ? se.callLogger.warn(
                      "ALERT: Audio input will be muted until the start muted barrier is released"
                    )
                  : se.isStartMutedBarrierActive &&
                    !Y &&
                    se.callLogger.info("Start muted barrier released"),
                  (se.isStartMutedBarrierActive = Y);
              })();
            }
            setMicrophone(Y) {
              var se = this;
              return (0, t.coroutine)(function* () {
                var he;
                if (
                  (se.voiceFocusManager &&
                    (yield se.voiceFocusManager.setMute(Y)),
                  !Y)
                ) {
                  var Le;
                  se.audioVideoFacade.realtimeMuteLocalAudio(),
                    (Le = se.huddleEventsTrace) === null ||
                      Le === void 0 ||
                      Le.update({
                        name: I.p.MICROPHONE,
                        type: I.G.STOP,
                      });
                  return;
                }
                se.isStartMutedBarrierActive && se.setStartMutedBarrier(!1),
                  se.audioVideoFacade.realtimeUnmuteLocalAudio(),
                  (he = se.huddleEventsTrace) === null ||
                    he === void 0 ||
                    he.update({
                      name: I.p.MICROPHONE,
                      type: I.G.START,
                    });
              })();
            }
            requestPreviewStreamForDeviceId(Y, se, he) {
              se === r.lW.Camera &&
                this.handleCameraChanges({
                  type: oe.START_PREVIEW,
                  deviceId: Y,
                  videoElement: he,
                });
            }
            stopVideoPreviewForVideoInput(Y) {
              this.handleCameraChanges({
                type: oe.STOP_PREVIEW,
                videoElement: Y || this.cameraPreviewVideoElement,
              });
            }
            setCamera(Y) {
              Y !== this.isCameraEnabled &&
                ((this.isCameraEnabled = Y),
                this.isCameraEnabled
                  ? (this.handleCameraChanges({
                      type: oe.ENABLE,
                    }),
                    this.maybeCheckSystemMediaAccess(l.mT.CAMERA))
                  : this.handleCameraChanges({
                      type: oe.DISABLE,
                    }));
            }
            setCameraQuality(Y, se, he, Le) {
              this.callLogger.info(
                `Camera quality settings changed: ${Y}x${se}@${he}fps ${Le}kbps`
              ),
                this.audioVideoFacade.chooseVideoInputQuality(Y, se, he),
                this.audioVideoFacade.setVideoMaxBandwidthKbps(Le);
            }
            audioVideoDidStart() {
              return (0, t.coroutine)(function* () {})();
            }
            localVideoTileDidUpdate(Y) {
              (!Y.boundVideoStream || !Y.boundVideoStream.active) &&
                this.callLogger.info(
                  `DeviceManager::localVideoTileDidUpdate ${
                    Y.boundVideoStream
                      ? "boundVideoStream is not active"
                      : "there is no boundVideoStream"
                  }`
                ),
                !Y.isContent && !this.isCameraEnabled
                  ? this.waitForCameraReady.reject(new Error("Camera disabled"))
                  : this.waitForCameraReady.resolve();
            }
            maybeBindAudioOutputElement() {
              var Y = this;
              return (0, t.coroutine)(function* () {
                if (!Y.isAudioOutputElementBound && Y.audioOutputElement) {
                  try {
                    yield Y.audioVideoFacade.bindAudioElement(
                      Y.audioOutputElement
                    );
                  } catch (se) {
                    Y.callLogger.info(
                      `bindAudioElement failed: error: ${se.name}, message: ${se.message}`
                    );
                    return;
                  }
                  Y.isAudioOutputElementBound = !0;
                }
              })();
            }
            maybeCheckSystemMediaAccess(Y) {
              var se = this;
              return (0, t.coroutine)(function* () {
                if (!(0, T.y3)()) {
                  const { status: he } = F.Ay.canAccessMediaResource(Y);
                  if (he === r.eJ.Granted)
                    return {
                      isAvailable: !1,
                      status: r.eJ.Granted,
                    };
                }
                if (
                  (0, T.cX)() ||
                  (se.options.useGetMediaAccessCheckForWindows && (0, T.uF)())
                )
                  try {
                    const he = F.Ay.canAccessMediaResource(Y);
                    if (
                      (se.callLogger.info(
                        `DeviceManager::getMediaAccessStatus ${Y} electron API available: ${he.isAvailable} and status: ${he.status}`
                      ),
                      !he.isAvailable)
                    )
                      return {
                        isAvailable: !1,
                        status: r.eJ.NotDetermined,
                      };
                    if (he.status === r.eJ.Granted)
                      return se.observer.onDeviceAccessApproved(Y), he;
                    let Le;
                    return (!he.status || he.status === r.eJ.NotDetermined) &&
                      (he.status ||
                        se.callLogger.info(
                          `DeviceManager::getMediaAccessStatus ${Y} status is missing. Re-requesting media access`
                        ),
                      (Le =
                        Y === "screen"
                          ? null
                          : yield F.Ay.requestMediaAccess(Y)),
                      se.callLogger.info(
                        `DeviceManager::askForMediaAccess ${Y} electron API available: ${!!(
                          Le != null && Le.isAvailable
                        )} and isConsentGranted: ${
                          Le == null ? void 0 : Le.isGranted
                        }`
                      ),
                      Y !== "screen" && Le != null && Le.isGranted)
                      ? (se.observer.onDeviceAccessApproved(Y),
                        {
                          status: r.eJ.Granted,
                          isAvailable: !0,
                        })
                      : ((he.status === r.eJ.Denied || (Le && !Le.isGranted)) &&
                          ((se.micPermissionDenied = !0),
                          se.observer.onCheckSystemMediaAccess(Y)),
                        he);
                  } catch (he) {
                    se.callLogger.info(
                      `DeviceManager::Error retrieving system access for ${Y}: ${he}`
                    );
                  }
                return {
                  isAvailable: !1,
                  status: r.eJ.NotDetermined,
                };
              })();
            }
            audioInputMuteStateChanged(Y, se) {
              this.callLogger.info(
                `DeviceManager::audioInputMuteStateChanged: device: ${Y}, ${
                  se ? "muted" : "unmuted"
                }`
              );
            }
            audioInputStreamEnded(Y) {
              var se;
              Y &&
                (this.callLogger.info("DeviceManager::audioInputStreamEnded"),
                ((se = (0, P.Nj)(r.lW.Microphone)) === null || se === void 0
                  ? void 0
                  : se.id) === Y &&
                  (this.callLogger.warn("Call audio stream ended unexpectedly"),
                  this.observer.onSetNoMediaInput(l.mT.MICROPHONE)));
            }
            videoInputStreamEnded(Y) {
              var se = this;
              return (0, t.coroutine)(function* () {
                Y &&
                  (se.callLogger.info("DeviceManager::videoInputStreamEnded"),
                  se.observer.onSetNoMediaInput(l.mT.CAMERA));
              })();
            }
            logDevices() {
              let Y =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : H.LL;
              const se = (0, P.T5)();
              if (!se) {
                this.callLogger.error("No devices found");
                return;
              }
              (0, H.my)(this.callLogger, se, Y);
            }
            getPreferredDevice(Y) {
              return (0, P.Nj)(Y);
            }
            enumerateDevices() {
              const Y = (0, P.T5)();
              if (!Y) {
                this.callLogger.error("No devices found in v2 device manager");
                return;
              }
              this.callLogger.info("V2 devices found. Updating device store"),
                this.observer.onDevicesUpdated(Y);
            }
            handleCameraChanges(Y) {
              var se = this;
              return (0, t.coroutine)(function* () {
                switch (Y.type) {
                  case oe.START_PREVIEW:
                    yield se.runCameraActivityStartPreview(Y);
                    break;
                  case oe.STOP_PREVIEW:
                    yield se.runCameraActivityStopPreview(Y);
                    break;
                  case oe.ENABLE:
                    yield se.runCameraActivityEnable();
                    break;
                  case oe.DISABLE:
                    yield se.runCameraActivityDisable();
                    break;
                  default:
                    break;
                }
              })();
            }
            updateMicrophone() {
              var Y = this;
              return (0, t.coroutine)(function* () {
                const se = Y.getPreferredDevice(r.lW.Microphone);
                if (!se) {
                  Y.callLogger.info("No audio input device found");
                  return;
                }
                const { id: he, label: Le } = se;
                if (
                  Y.micPermissionDenied &&
                  (Y.callLogger.error(
                    "Microphone permission is denied. The user must grant permissions and fully quit and restart Slack to join the Huddle"
                  ),
                  Y.hasRetriedAudioInit)
                )
                  return;
                Y.callLogger.info(
                  `Selected audio input device: ${
                    se.label || se.id
                  }, deviceId: ${he}, deviceLabel: ${Le}`
                );
                const ht = {
                  autoGainControl: Y.prefs.audio ? Y.prefs.audio.enableAGC : !0,
                  deviceId: he,
                };
                let et = !0;
                if (
                  Y.voiceFocusManager &&
                  Y.voiceFocusManager.isAvailable() &&
                  Y.prefs.audio &&
                  Y.prefs.audio.enableNoiseSuppression
                ) {
                  if (
                    (Y.voiceFocusDevice ||
                      (Y.voiceFocusDevice =
                        yield Y.voiceFocusManager.getTransformDevice()),
                    Y.voiceFocusDevice)
                  ) {
                    const Ut = yield Y.voiceFocusDevice.chooseNewInnerDevice(
                      ht
                    );
                    Y.voiceFocusDevice = Ut;
                  }
                  Y.voiceFocusDevice || (et = !1);
                } else et = !1;
                Y.voiceFocusDevice &&
                  (0, f.Y)({
                    name: f.R1.VoiceFocusDevice,
                    ref: Y.voiceFocusDevice,
                  }),
                  Y.callLogger.info(
                    "Noise suppression:",
                    et ? "enabled" : "disabled"
                  );
                try {
                  if (
                    (Y.isStartMutedBarrierActive &&
                      (Y.callLogger.info("Start muted barrier active"),
                      Y.audioVideoFacade.realtimeMuteLocalAudio()),
                    et)
                  )
                    if (Y.voiceFocusDevice)
                      yield Y.initAudioInput(Y.voiceFocusDevice);
                    else
                      throw new Error(
                        "Trying noise suppression with no voice focus transform device"
                      );
                  else
                    navigator.mediaDevices &&
                      navigator.mediaDevices.getSupportedConstraints &&
                      Object.prototype.hasOwnProperty.call(
                        navigator.mediaDevices.getSupportedConstraints(),
                        "noiseSuppression"
                      ) &&
                      (ht.noiseSuppression = !0),
                      yield Y.initAudioInput(ht);
                } catch (Ut) {
                  Y.callLogger.error(
                    `chooseAudioInputDevice failed: error: ${Ut.name}, message: ${Ut.message}`
                  ),
                    yield Y.handleAudioInitError(Ut);
                  return;
                }
                Y.hasRetriedAudioInit &&
                  (Y.callLogger.info(
                    "Microphone initialized successfully after retry"
                  ),
                  (Y.hasRetriedAudioInit = !1)),
                  Y.initAudioAnalyserForPreview(),
                  Y.setupAudioInputTrackHandler({
                    preferredDeviceId: he,
                  }),
                  !(yield Y.isMediaPermissionDeniedOnWindows(
                    l.mT.MICROPHONE
                  )) &&
                    (Y.observer.onSelfPermissionUpdated(
                      Y.micPermissionDenied,
                      r.lW.Microphone
                    ),
                    Y.attemptToInitMicrophoneNative(se.label));
              })();
            }
            updateSpeaker() {
              var Y = this;
              return (0, t.coroutine)(function* () {
                const se = Y.getPreferredDevice(r.Q4);
                if (!se) {
                  Y.callLogger.info("No audio output device found");
                  return;
                }
                const { id: he, label: Le } = se;
                Y.callLogger.info(
                  `Selected audio output device id: ${
                    se.label || se.id
                  }, deviceId: ${he}, deviceLabel: ${Le}`
                ),
                  yield Y.audioVideoFacade.chooseAudioOutput(he),
                  Y.observer.onOutputDeviceChanged({
                    id: se.id,
                    type: r.Q4,
                  }),
                  (0, P.i_)(he, r.Q4);
              })();
            }
            updateCamera() {
              var Y = this;
              return (0, t.coroutine)(function* () {
                const se = Y.getPreferredDevice(r.lW.Camera);
                if (!se) {
                  Y.callLogger.info("No video input device found");
                  return;
                }
                Y.callLogger.info(
                  `Selected video input device id: ${se.label || se.id}`
                );
                try {
                  yield Y.setCameraVideoInputDevice(se);
                } catch (he) {
                  Y.callLogger.info(
                    `chooseVideoInputDevice failed: error: ${he.name}, message: ${he.message}`
                  ),
                    he instanceof i.Ll
                      ? Y.observer.onSelfPermissionUpdated(!0, r.lW.Camera)
                      : Y.observer.onSelfPermissionUpdated(!1, r.lW.Camera);
                  return;
                }
                (yield Y.isMediaPermissionDeniedOnWindows(l.mT.CAMERA)) ||
                  Y.observer.onSelfPermissionUpdated(!1, r.lW.Camera);
              })();
            }
            setCameraVideoInputDevice(Y) {
              var se = this;
              return (0, t.coroutine)(function* () {
                if (
                  (yield se.clearVideoTransformDeviceRefs(),
                  se.options.backgroundVideoFilteringSetting === r.uT.NONE)
                ) {
                  yield se.initVideoInput(Y.id);
                  return;
                }
                switch (se.prefs.video.effect) {
                  case G.t.Blur: {
                    yield se.setCameraVideoInputDeviceWithBackgroundBlurFilter(
                      Y
                    );
                    break;
                  }
                  case G.t.Background: {
                    se.options.backgroundVideoFilteringSetting !== r.uT.Both
                      ? yield se.initVideoInput(Y.id)
                      : yield se.setCameraVideoInputDeviceWithBackgroundReplacementImageFilter(
                          {
                            videoDevice: Y,
                            selectedBackgroundImageKey:
                              se.prefs.video.effectBgKey,
                          }
                        );
                    break;
                  }
                  default: {
                    yield se.initVideoInput(Y.id);
                    break;
                  }
                }
              })();
            }
            setCameraVideoInputDeviceWithBackgroundReplacementImageFilter(Y) {
              let { videoDevice: se, selectedBackgroundImageKey: he } = Y;
              var Le = this;
              return (0, t.coroutine)(function* () {
                const qe = se.label || se.id;
                if (he === void 0) {
                  Le.callLogger.info(
                    `No background image key provided id: ${qe}`
                  ),
                    yield Le.initVideoInput(se.id);
                  return;
                }
                const et = D.g.find((we) => we.key === he);
                if (et === void 0)
                  return Le.handleErrorApplyVideoEffects(
                    "Image could not be found, switching to default input for device",
                    se
                  );
                Le.callLogger.info(
                  `Enabling video input device with background image filter id: ${qe}`
                );
                const $t = yield (yield fetch(et.url)).blob();
                if (Le.options.useHuddlesFilterWorker) {
                  const we = yield createImageBitmap($t),
                    ft = new X(se.id, we);
                  Le.setVideoTransformDeviceRefs({
                    transformDevice: ft,
                    processors: [],
                  }),
                    yield Le.initVideoInput(ft),
                    yield Le.cleanupTransformDevicesAndCameraIfShuttingdown();
                  return;
                }
                const En = (0, i.jq)(),
                  wn = (0, i.px)(),
                  $n = [];
                if (!(yield i.i3.isSupported(Le.chimeLogger)) && de)
                  return Le.handleErrorApplyVideoEffects(
                    "VideoFxProcessor is not supported on host device. Defaulting to non image replaced background",
                    se
                  );
                if (!(yield wn.isSupported()) && !de)
                  return Le.handleErrorApplyVideoEffects(
                    "BackgroundReplacementVideoFrameProcessor is not supported on host device. Defaulting to non image replaced background",
                    se
                  );
                if (Le.isShuttingDown) return;
                const j = {
                  ...Le.defaultVideoProcessorOptions,
                  imageBlob: $t,
                };
                if (de) {
                  if (
                    ((Le.videoFxConfig = {
                      backgroundBlur: {
                        isEnabled: !1,
                        strength: ae,
                      },
                      backgroundReplacement: {
                        isEnabled: !0,
                        backgroundImageURL: et.url,
                        defaultColor: void 0,
                      },
                    }),
                    (Le.videoFxProcessor = yield i.i3.create(
                      Le.chimeLogger,
                      Le.videoFxConfig,
                      ve
                    )),
                    !Le.videoFxProcessor)
                  )
                    return Le.handleErrorApplyVideoEffects(
                      "VideoFxProcessor could not be created defaulting to normal input for device",
                      se
                    );
                  Le.callLogger.info(
                    `VideoFxProcessor background image replacement enabled for device id: ${qe}`
                  ),
                    $n.push(Le.videoFxProcessor);
                } else {
                  const we = yield wn.create(void 0, j);
                  if (we)
                    Le.setupVideoBackgroundFrameProcessor({
                      processor: we,
                      backgroundEffect: b.Image,
                    }),
                      $n.push(we);
                  else
                    return Le.handleErrorApplyVideoEffects(
                      "BackgroundReplacementVideoFrameProcessor could not be created defaulting to normal input for device",
                      se
                    );
                }
                Le.callLogger.info(
                  `Enabling video input device with background image replacement id: ${qe}`
                );
                const ue = new En(Le.chimeLogger, se.id, $n);
                Le.setVideoTransformDeviceRefs({
                  transformDevice: ue,
                  processors: $n,
                }),
                  yield Le.initVideoInput(ue),
                  yield Le.cleanupTransformDevicesAndCameraIfShuttingdown();
              })();
            }
            handleErrorApplyVideoEffects(Y, se) {
              var he = this;
              return (0, t.coroutine)(function* () {
                const Le = se.label || se.id;
                he.callLogger.info(`${Y}: ${Le}`),
                  yield he.initVideoInput(se.id);
              })();
            }
            setCameraVideoInputDeviceWithBackgroundBlurFilter(Y) {
              var se = this;
              return (0, t.coroutine)(function* () {
                const he = (0, i.jq)(),
                  Le = (0, i.kM)(),
                  qe = Y.label || Y.id;
                if (
                  (se.callLogger.info(
                    `Enabling video input device with background blur filter id: ${qe}`
                  ),
                  se.options.useHuddlesFilterWorker)
                ) {
                  const Ut = new X(Y.id);
                  se.setVideoTransformDeviceRefs({
                    transformDevice: Ut,
                    processors: [],
                  }),
                    yield se.initVideoInput(Ut),
                    yield se.cleanupTransformDevicesAndCameraIfShuttingdown();
                  return;
                }
                const ht = [];
                if (de) {
                  if (!(yield i.i3.isSupported(se.chimeLogger)))
                    return se.handleErrorApplyVideoEffects(
                      "VideoFxProcessor is not supported on host device. Defaulting to non blurred background",
                      Y
                    );
                  if (
                    ((se.videoFxConfig = {
                      backgroundBlur: {
                        isEnabled: !0,
                        strength: ae,
                      },
                      backgroundReplacement: {
                        isEnabled: !1,
                        backgroundImageURL: "",
                        defaultColor: void 0,
                      },
                    }),
                    (se.videoFxProcessor = yield i.i3.create(
                      se.chimeLogger,
                      se.videoFxConfig,
                      ve
                    )),
                    !se.videoFxProcessor)
                  )
                    return se.handleErrorApplyVideoEffects(
                      "VideoFxProcessor could not be created defaulting to normal input for device",
                      Y
                    );
                  se.callLogger.info(
                    `VideoFxProcessor background blur enabled for device id: ${qe}`
                  ),
                    ht.push(se.videoFxProcessor);
                } else {
                  if (!(yield Le.isSupported()))
                    return se.handleErrorApplyVideoEffects(
                      "BackgroundBlurVideoFrameProcessor is not supported on host device. Defaulting to non blurred background",
                      Y
                    );
                  const Ut = {
                      ...se.defaultVideoProcessorOptions,
                      blurStrength: 15,
                    },
                    $t = yield Le.create(void 0, Ut);
                  if (!$t)
                    return se.handleErrorApplyVideoEffects(
                      "BackgroundBlurVideoFrameProcessor could not be created defaulting to normal input for device",
                      Y
                    );
                  se.setupVideoBackgroundFrameProcessor({
                    processor: $t,
                    backgroundEffect: b.Blur,
                  }),
                    ht.push($t);
                }
                se.callLogger.info(
                  `Enabling video input device with background blur filter id: ${qe}`
                );
                const et = new he(se.chimeLogger, Y.id, ht);
                se.setVideoTransformDeviceRefs({
                  transformDevice: et,
                  processors: ht,
                }),
                  yield se.initVideoInput(et),
                  yield se.cleanupTransformDevicesAndCameraIfShuttingdown();
              })();
            }
            cleanupTransformDevicesAndCameraIfShuttingdown() {
              var Y = this;
              return (0, t.coroutine)(function* () {
                Y.isShuttingDown &&
                  (Y.callLogger.info(
                    "Cleaning up background video frame processor and video input because huddle has ended"
                  ),
                  yield Y.audioVideoFacade.stopVideoInput(),
                  yield Y.clearVideoTransformDeviceRefs());
              })();
            }
            initVideoInputDevices() {
              var Y = this;
              return (0, t.coroutine)(function* () {
                const he =
                  (yield Y.audioVideoFacade.listVideoInputDevices()).length > 0;
                return (
                  he || Y.observer.onSelfPermissionUpdated(!0, r.lW.Camera),
                  (Y.prefs = (0, R.Bh)()),
                  Y.enumerateDevices(),
                  he
                );
              })();
            }
            runCameraActivityStartPreview(Y) {
              var se = this;
              return (0, t.coroutine)(function* () {
                const he = Y.deviceId,
                  Le = Y.videoElement;
                !he ||
                  !Le ||
                  ((se.cameraPreviewVideoElement = Le),
                  yield se.setPreferredCameraDeviceForPreview(he),
                  yield se.startCameraPreview());
              })();
            }
            runCameraActivityStopPreview(Y) {
              var se = this;
              return (0, t.coroutine)(function* () {
                const he = Y.videoElement;
                he &&
                  (he !== se.cameraPreviewVideoElement &&
                    se.callLogger.warn("Mismatch in preview video element"),
                  se.audioVideoFacade.hasStartedLocalVideoTile()
                    ? se.detachStreamFromCameraPreview()
                    : se.stopCameraPreview(),
                  delete se.cameraPreviewVideoElement);
              })();
            }
            runCameraActivityEnable() {
              var Y = this;
              return (0, t.coroutine)(function* () {
                var se;
                !Y.audioVideoFacade.hasStartedLocalVideoTile() &&
                  Y.cameraPreviewVideoElement &&
                  Y.stopCameraPreview(),
                  yield Y.updateCamera(),
                  Y.audioVideoFacade.hasStartedLocalVideoTile() ||
                    ((Y.waitForCameraReady = (0, d.u)()),
                    Y.audioVideoFacade.startLocalVideoTile(),
                    yield Y.waitForCameraReady.catch(() => {
                      Y.callLogger.info(
                        "Camera disabled before self video stream was properly bound. Explicitly disabling camera."
                      ),
                        Y.runCameraActivityDisable();
                    })),
                  Y.attachStreamToCameraPreview(),
                  (se = Y.huddleEventsTrace) === null ||
                    se === void 0 ||
                    se.update({
                      name: I.p.VIDEO,
                      type: I.G.START,
                    });
              })();
            }
            runCameraActivityDisable() {
              var Y = this;
              return (0, t.coroutine)(function* () {
                var se;
                Y.detachStreamFromCameraPreview(),
                  yield Y.audioVideoFacade.stopVideoInput(),
                  Y.audioVideoFacade.stopLocalVideoTile(),
                  (se = Y.huddleEventsTrace) === null ||
                    se === void 0 ||
                    se.update({
                      name: I.p.VIDEO,
                      type: I.G.STOP,
                    }),
                  Y.cameraPreviewVideoElement &&
                    (yield Y.updateCamera(), yield Y.startCameraPreview());
              })();
            }
            startCameraPreview() {
              var Y = this;
              return (0, t.coroutine)(function* () {
                Y.cameraPreviewVideoElement &&
                  ((Y.waitForCameraReady = (0, d.u)()),
                  Y.audioVideoFacade.startVideoPreviewForVideoInput(
                    Y.cameraPreviewVideoElement
                  ),
                  Y.cameraPreviewVideoElement.addEventListener(
                    "canplay",
                    (se) => {
                      Y.waitForCameraReady.resolve();
                    }
                  ),
                  yield Y.waitForCameraReady);
              })();
            }
            stopCameraPreview() {
              var Y = this;
              return (0, t.coroutine)(function* () {
                Y.cameraPreviewVideoElement &&
                  (Y.audioVideoFacade.stopVideoPreviewForVideoInput(
                    Y.cameraPreviewVideoElement
                  ),
                  yield Y.audioVideoFacade.stopVideoInput());
              })();
            }
            attachStreamToCameraPreview() {
              var Y;
              if (!this.cameraPreviewVideoElement) return;
              const se =
                (Y = this.audioVideoFacade.getLocalVideoTile()) === null ||
                Y === void 0
                  ? void 0
                  : Y.state();
              se &&
                se.boundVideoStream &&
                i.xc.connectVideoStreamToVideoElement(
                  se.boundVideoStream,
                  this.cameraPreviewVideoElement,
                  !0
                );
            }
            detachStreamFromCameraPreview() {
              this.cameraPreviewVideoElement &&
                i.xc.disconnectVideoStreamFromVideoElement(
                  this.cameraPreviewVideoElement,
                  !0
                );
            }
            addAudioElementErrorHandler() {
              this.audioOutputElement.addEventListener(
                "error",
                this.audioElementErrorHandler
              );
            }
            removeAudioElementErrorHandler() {
              this.audioOutputElement.removeEventListener(
                "error",
                this.audioElementErrorHandler
              );
            }
            audioElementErrorHandler(Y) {
              var se, he, Le, qe;
              const ht =
                  ((se = Y.target) === null ||
                  se === void 0 ||
                  (he = se.error) === null ||
                  he === void 0
                    ? void 0
                    : he.code) || "unavailable",
                et =
                  ((Le = Y.target) === null ||
                  Le === void 0 ||
                  (qe = Le.error) === null ||
                  qe === void 0
                    ? void 0
                    : qe.message) || Y.message;
              this.callLogger.warn(
                `HTML_AUDIO_ELEMENT_ERROR code: ${ht}, message: ${et}`
              ),
                this.observer.onSetNoAudioOutput(l.NS.AUDIO_ELEMENT_ERROR);
            }
            isMediaPermissionDeniedOnWindows(Y) {
              var se = this;
              return (0, t.coroutine)(function* () {
                if (
                  se.options.useGetMediaAccessCheckForWindows &&
                  (0, T.uF)() &&
                  (0, T.dY)("4.9.0")
                ) {
                  const he = yield se.maybeCheckSystemMediaAccess(Y);
                  if (he && he.status === "denied") return !0;
                }
                return !1;
              })();
            }
            initAudioAnalyserForPreview() {
              const Y = (0, i._R)().getAudioContext();
              if (!Y) {
                this.callLogger.warn("Unable to get AudioContext");
                return;
              }
              Y.resume();
              const se =
                this.audioVideoFacade.createAnalyserNodeForAudioInput();
              if (se) {
                var he;
                const Le = new M(se);
                (he = this.audioLevelMonitor) === null ||
                  he === void 0 ||
                  he.setPreviewAudioAnalyser(Le);
              }
            }
            setupAudioInputTrackHandler(Y) {
              let { preferredDeviceId: se } = Y;
              this.audioInputTrackHandler &&
                (this.callLogger.info(
                  "Tearing down previous Audio Input Track Handler"
                ),
                this.audioInputTrackHandler.tearDown(),
                (this.audioInputTrackHandler = void 0)),
                this.callLogger.info(
                  "Setting up new audio input track handler"
                ),
                (this.audioInputTrackHandler = new S(
                  this.defaultDeviceController,
                  this.observer,
                  this.callLogger
                )),
                this.audioInputTrackHandler.initialize({
                  preferredDeviceId: se,
                });
            }
            constructor(Y, se, he, Le, qe = !1, ht, et, Ut) {
              (this.audioVideoFacade = Y),
                (this.audioOutputElement = se),
                (this.observer = he),
                (this.options = Le),
                (this.isStartMutedBarrierActive = qe),
                (this.chimeLogger = ht),
                (this.defaultDeviceController = et),
                (this.voiceFocusManager = Ut),
                (this.callLogger = (0, a.Jt)("DEVICES")),
                (this.waitForCameraReady = (0, d.u)()),
                (this.isAudioOutputElementBound = !1),
                (this.videoFxConfig = {
                  backgroundBlur: {
                    isEnabled: !1,
                    strength: ae,
                  },
                  backgroundReplacement: {
                    isEnabled: !1,
                    backgroundImageURL: "",
                    defaultColor: void 0,
                  },
                }),
                (this.isShuttingDown = !1),
                (this.cameraMetricsTimeout = null),
                (this.micPermissionDenied = !1),
                (this.hasRetriedAudioInit = !1);
              var $t = this;
              this.audioInputsChanged = (0, t.coroutine)(function* () {
                $t.callLogger.info("DeviceManager::audioInputsChanged"),
                  yield (0, P.es)(),
                  $t.logDevices([r.lW.Microphone]),
                  $t.observer.onClearNoMediaInput(l.mT.MICROPHONE);
              });
              var En = this;
              this.audioOutputsChanged = (0, t.coroutine)(function* () {
                En.callLogger.info("DeviceManager::audioOutputsChanged"),
                  yield (0, P.es)(),
                  En.logDevices([r.Q4]),
                  En.observer.onClearNoAudioOutput(l.NS.AUDIO_ELEMENT_ERROR);
              });
              var wn = this;
              this.videoInputsChanged = (0, t.coroutine)(function* () {
                wn.callLogger.info("DeviceManager::videoInputsChanged"),
                  yield (0, P.es)(),
                  wn.logDevices([r.lW.Camera]);
              });
              var $n = this;
              this.attemptToInitMicrophoneNative = (0, m.A)(
                (function () {
                  var yn = (0, t.coroutine)(function* (xt) {
                    try {
                      if (!xt || !$n.options.useDevicesExp) return;
                      const Vn = yield (0, q.Lh)(xt),
                        { error: Jn, canInit: Je } = Vn;
                      (0, v.A)(Jn)
                        ? Jn.includes("Method not available") ||
                          Jn.includes("only supported on Windows")
                          ? $n.callLogger.info(
                              "Microphone init test not supported on this client"
                            )
                          : Je ||
                            $n.callLogger.warn(
                              `ALERT! Possible init failure for microphone with device: ${xt}: ${Jn}`
                            )
                        : $n.callLogger.info(
                            `Successfully initialized microphone with device: ${xt}`
                          );
                    } catch (Vn) {
                      $n.callLogger.error(
                        "Error attempting to init audio device",
                        Vn
                      );
                    }
                  });
                  return function (xt) {
                    return yn.apply(this, arguments);
                  };
                })(),
                1e3
              );
              var j = this;
              this.refreshMediaDeviceInfo = (0, t.coroutine)(function* () {
                j.enumerateDevices();
              });
              var ue = this;
              (this.handleAudioInitError = (function () {
                var yn = (0, t.coroutine)(function* (xt) {
                  let Vn = !ue.hasRetriedAudioInit;
                  switch (xt.name) {
                    case "NotReadableError":
                      ue.callLogger.warn(
                        "Either a hardware error (such as an OS/program/webpage lock) is preventing access to the microphone or the selected device is no longer available. Trying again"
                      );
                      break;
                    case "NotFoundError":
                      ue.callLogger.warn(
                        "No audio input devices are available. Trying again"
                      );
                      break;
                    case "OverconstrainedError":
                      ue.callLogger.warn(
                        "The specified constraints resulted in no devices being found. Trying again"
                      );
                      break;
                    case "PermissionDeniedError":
                      ue.callLogger.error(
                        "User denied permission to access microphone."
                      );
                      break;
                    case "TypeError":
                      ue.callLogger.error(
                        "An unexpected TypeError occured during audio input initialization",
                        xt
                      ),
                        (Vn = !1);
                      break;
                    case "GetUserMediaError":
                      ue.callLogger.error(
                        "An unexpected GetUserMediaError occured during audio input initialization",
                        xt
                      ),
                        (Vn = !1);
                      break;
                    default:
                      ue.callLogger.error(
                        "Unknown error during audio input initialization"
                      ),
                        (Vn = !1);
                  }
                  const Jn = xt instanceof i.Ll;
                  Jn ||
                    ue.observer.onSelfPermissionUpdated(!1, r.lW.Microphone),
                    Vn
                      ? ((ue.hasRetriedAudioInit = !0),
                        ue.callLogger.info(
                          "Retrying audio input initialization"
                        ),
                        yield ue.updateMicrophone(),
                        yield ue.updateSpeaker())
                      : (Jn &&
                          ue.observer.onSelfPermissionUpdated(
                            !0,
                            r.lW.Microphone
                          ),
                        ue.callLogger.error(
                          "Audio input initialization failed. Not retrying"
                        ));
                });
                return function (xt) {
                  return yn.apply(this, arguments);
                };
              })()),
                (this.setVideoTransformDeviceRefs = (yn) => {
                  let { transformDevice: xt, processors: Vn } = yn;
                  (this.currentVideoTransformDevice = xt),
                    (this.currentVideoFrameProcessors = Vn),
                    (0, f.Y)({
                      name: f.R1.VideoTransformDevice,
                      ref: xt,
                    });
                }),
                (this.setupVideoBackgroundFrameProcessor = (yn) => {
                  let { processor: xt, backgroundEffect: Vn } = yn;
                  var Jn;
                  this.clearVideoBackgroundFrameProcessor(),
                    !de &&
                      ((this.currentVideoFrameProcessor = xt),
                      (this.currentVideoFrameProcessorObserver = new x({
                        backgroundEffect: Vn,
                      })),
                      (Jn = this.currentVideoFrameProcessor) === null ||
                        Jn === void 0 ||
                        Jn.addObserver(this.currentVideoFrameProcessorObserver),
                      (0, f.Y)({
                        name: f.R1.VideoFrameProcessor,
                        ref: xt,
                      }));
                }),
                (this.clearVideoBackgroundFrameProcessor = () => {
                  de ||
                    (this.currentVideoFrameProcessor &&
                      this.currentVideoFrameProcessorObserver &&
                      (this.currentVideoFrameProcessor.removeObserver(
                        this.currentVideoFrameProcessorObserver
                      ),
                      (this.currentVideoFrameProcessorObserver = void 0),
                      (this.currentVideoFrameProcessor = void 0)));
                });
              var we = this;
              this.clearVideoTransformDeviceRefs = (0, t.coroutine)(
                function* () {
                  we.clearVideoBackgroundFrameProcessor(),
                    we.currentVideoFrameProcessors &&
                      (we.currentVideoFrameProcessors.forEach((yn) => {
                        yn.destroy();
                      }),
                      (we.currentVideoFrameProcessors.length = 0),
                      (we.currentVideoFrameProcessors = void 0)),
                    we.currentVideoTransformDevice &&
                      (yield we.currentVideoTransformDevice.stop(),
                      (we.currentVideoTransformDevice = void 0));
                }
              );
              var ft = this;
              this.initAudioInput = (function () {
                var yn = (0, t.coroutine)(function* (xt) {
                  xt && (yield ft.audioVideoFacade.startAudioInput(xt));
                });
                return function (xt) {
                  return yn.apply(this, arguments);
                };
              })();
              var pn = this;
              (this.initVideoInput = (function () {
                var yn = (0, t.coroutine)(function* (xt) {
                  if (!xt) return;
                  yield pn.audioVideoFacade.startVideoInput(xt),
                    pn.recordCameraResolution();
                  const Vn = (0, E.A)(xt, "device", xt);
                  typeof Vn == "string" && (0, P.i_)(Vn, r.lW.Camera);
                });
                return function (xt) {
                  return yn.apply(this, arguments);
                };
              })()),
                (this.recordCameraResolution = () => {
                  this.cameraMetricsTimeout = setTimeout(() => {
                    try {
                      var yn, xt, Vn, Jn, Je;
                      if (
                        this.isShuttingDown ||
                        !((yn = this.audioVideoFacade) === null || yn === void 0
                          ? void 0
                          : yn.hasStartedLocalVideoTile())
                      )
                        return;
                      const Lt = this.audioVideoFacade.getLocalVideoTile(),
                        rt =
                          (xt = Lt == null ? void 0 : Lt.state()) === null ||
                          xt === void 0
                            ? void 0
                            : xt.boundVideoStream,
                        yt = rt == null ? void 0 : rt.getVideoTracks()[0];
                      if (yt instanceof CanvasCaptureMediaStreamTrack) {
                        B.A.publish({
                          type: U.lx.CameraResolution,
                          update: {
                            isCanvasStream: !0,
                          },
                        });
                        return;
                      }
                      const ot = yt == null ? void 0 : yt.getSettings(),
                        lt = yt == null ? void 0 : yt.getCapabilities(),
                        Ge = ot == null ? void 0 : ot.width,
                        jt = ot == null ? void 0 : ot.height,
                        on = ot == null ? void 0 : ot.frameRate,
                        cn =
                          lt == null ||
                          (Vn = lt.width) === null ||
                          Vn === void 0
                            ? void 0
                            : Vn.max,
                        Wt =
                          lt == null ||
                          (Jn = lt.height) === null ||
                          Jn === void 0
                            ? void 0
                            : Jn.max,
                        en =
                          lt == null ||
                          (Je = lt.frameRate) === null ||
                          Je === void 0
                            ? void 0
                            : Je.max;
                      cn &&
                        Wt &&
                        B.A.publish({
                          type: U.lx.CameraResolution,
                          update: {
                            cameraWidth: Ge,
                            cameraHeight: jt,
                            cameraFrameRate: on,
                            cameraMaxWidth: cn,
                            cameraMaxHeight: Wt,
                            cameraMaxFrameRate: en,
                            isCanvasStream: !1,
                          },
                        });
                    } catch {}
                  }, 5e3);
                }),
                this.callLogger.info("Using device manager v2"),
                (this.updateMicrophone = h(this, this.updateMicrophone, {
                  skipIntermediatePendingRuns: !1,
                })),
                (this.updateSpeaker = h(this, this.updateSpeaker, {
                  skipIntermediatePendingRuns: !1,
                })),
                (this.updateCamera = h(this, this.updateCamera, {
                  skipIntermediatePendingRuns: !1,
                })),
                (this.handleCameraChanges = h(this, this.handleCameraChanges, {
                  skipIntermediatePendingRuns: !1,
                })),
                (this.audioElementErrorHandler =
                  this.audioElementErrorHandler.bind(this)),
                this.audioVideoFacade.addDeviceChangeObserver(this),
                (this.prefs = (0, R.Bh)()),
                this.addAudioElementErrorHandler(),
                (this.audioLevelMonitor = new C()),
                this.voiceFocusManager &&
                  this.callLogger.info(
                    `Voice Focus available?: ${this.voiceFocusManager.isAvailable()}`
                  ),
                this.prefs.audio &&
                  this.callLogger.info(
                    `Noise suppression setting: ${this.prefs.audio.enableNoiseSuppression}`
                  ),
                (this.defaultVideoProcessorOptions = {
                  filterCPUUtilization: Ae,
                  reportingPeriodMillis: z,
                  logger: this.chimeLogger,
                });
              const { huddleEventsTrace: An } = (0,
              g.A)().getAllTraceHandlers();
              this.huddleEventsTrace = An;
            }
          },
          "DeviceManager"
        );
        var Ee = e(63202349),
          be = e(3390261877),
          Ce = e(3320454392);
        let Z = _(
            class {
              constructor(Y, se, he) {
                (this.sequenceNumber = Y),
                  (this.message = se),
                  (this.timestampMs = he);
              }
            },
            "MeetingEvent"
          ),
          $ = _(
            class ca {
              getEventCaptureSize() {
                return this.eventCapture.length;
              }
              startEventPublishScheduler(Y) {
                var se = this;
                this.intervalScheduler.start(
                  (0, t.coroutine)(function* () {
                    if (se.getEventCaptureSize() === 0) return;
                    const he = se.eventCapture.slice(0, Y);
                    try {
                      se.postEvents(he),
                        (se.eventCapture = se.eventCapture.slice(he.length));
                    } catch (Le) {
                      se.log.error(Le.message);
                    }
                  })
                );
              }
              stop() {
                let Y =
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : !1;
                this.stopped ||
                  (this.intervalScheduler.stop(),
                  this.postEvents(this.eventCapture, Y, !0),
                  (this.eventCapture = []),
                  (this.stopped = !0),
                  (this.observer = void 0));
              }
              logEvent(Y, se) {
                const { meetingHistory: he, ...Le } = se;
                try {
                  const qe = JSON.stringify({
                    name: Y,
                    attributes: Le,
                  });
                  this.eventCapture.push(
                    new Z(this.sequenceNumber, qe, Date.now())
                  ),
                    (this.sequenceNumber += 1);
                } catch (qe) {
                  this.log.error(qe.message);
                }
              }
              postEvents(Y) {
                let se =
                    arguments.length > 1 && arguments[1] !== void 0
                      ? arguments[1]
                      : !1,
                  he =
                    arguments.length > 2 && arguments[2] !== void 0
                      ? arguments[2]
                      : !1;
                var Le;
                (Y.length === 0 && !se && !he) ||
                  (Le = this.observer) === null ||
                  Le === void 0 ||
                  Le.onMeetingEvents(
                    this.meetingId,
                    this.mediaRegion,
                    this.attendeeId,
                    this.callId,
                    Y,
                    se,
                    he
                  );
              }
              constructor(
                Y,
                se,
                he,
                Le,
                qe,
                ht = ca.DEFAULT_BATCH_SIZE,
                et = ca.DEFAULT_INTERVAL_MS
              ) {
                (this.observer = Y),
                  (this.meetingId = se),
                  (this.mediaRegion = he),
                  (this.attendeeId = Le),
                  (this.callId = qe),
                  (this.batchSize = ht),
                  (this.intervalMs = et),
                  (this.eventCapture = []),
                  (this.sequenceNumber = 0),
                  (this.log = (0, a.tZ)("MEETING-EVENT-LOGGER")),
                  (this.stopped = !1),
                  (this.intervalScheduler = new be.A(this.intervalMs)),
                  this.startEventPublishScheduler(this.batchSize);
                var Ut = this;
                (0, Ce.A)(
                  (0, t.coroutine)(function* () {
                    Ut.stop(!0);
                  })
                );
              }
            },
            "MeetingEventLogger"
          );
        ($.DEFAULT_BATCH_SIZE = 100), ($.DEFAULT_INTERVAL_MS = 65 * 60 * 1e3);
        var N = e(3245843483),
          L = e(1033764764),
          w = e(9372409576),
          k = e(7299481592);
        const J = 1e4,
          ee = 3e4;
        class ne {
          observe(Y) {
            this.connections.push(Y),
              this.intervalHandle ||
                (this.intervalHandle = window.setInterval(() => {
                  this.collect();
                }, this.collectionIntervalMs));
          }
          stopObserving(Y) {
            remove(this.connections, Y),
              this.connections.length === 0 &&
                clearInterval(this.intervalHandle);
          }
          collect() {
            var Y = this;
            this.connections.forEach(
              (function () {
                var se = _bluebirdCoroutine(function* (he) {
                  const Le = he.getPeerConnection();
                  if (!Le) return;
                  const qe = pe(yield Le.getStats());
                  ke(he, qe);
                  const ht = {
                    ...le(qe),
                    send: qe.sendTracks.map((et) => Re(et, qe)),
                    recv: qe.recvTracks.map((et) => ({
                      ...ye(et, qe),
                      peerId: he.getPeerIdFromRemoteStreamId(
                        qe.trackIdToStreamId[et.id]
                      ),
                    })),
                  };
                  Y.observer.onStats(ht);
                });
                return function (he) {
                  return se.apply(this, arguments);
                };
              })()
            );
          }
          constructor(Y, se = J) {
            (this.observer = Y),
              (this.collectionIntervalMs = se),
              (this.connections = []);
          }
        }
        _(ne, "StatsManager");
        function pe(dt) {
          const Y = Array.from(dt.entries()),
            se = reduce(
              Y,
              (he, Le) => {
                let [qe, ht] = Le;
                return (
                  Ze(ht)
                    ? ht.remoteSource === !0
                      ? he.recvTracks.push(ht)
                      : he.sendTracks.push(ht)
                    : Ke(ht) || Ue(ht)
                    ? ht.trackId && (he.rtpStats[ht.trackId] = ht)
                    : Q(ht)
                    ? (he.transports[ht.id] = ht)
                    : ie(ht)
                    ? (he.candidates[ht.id] = ht)
                    : Ve(ht)
                    ? (he.candidatePairs[ht.id] = ht)
                    : xe(ht)
                    ? (he.codecs[ht.id] = ht)
                    : je(ht)
                    ? ht.trackIds &&
                      ht.trackIds.forEach((et) => {
                        he.trackIdToStreamId[et] = ht.streamIdentifier;
                      })
                    : Fe(ht) &&
                      ht.trackIdentifier &&
                      (he.mediaSources[ht.trackIdentifier] = ht),
                  he
                );
              },
              {
                trackIdToStreamId: {},
                sendTracks: [],
                recvTracks: [],
                candidates: {},
                candidatePairs: {},
                rtpStats: {},
                codecs: {},
                transports: {},
                mediaSources: {},
              }
            );
          return (
            (se.recvTracks = se.recvTracks.filter(
              (he) => se.trackIdToStreamId[he.id] !== void 0
            )),
            se
          );
        }
        _(pe, "groupStatsByType");
        function Me(dt) {
          const Y = filter(dt.candidatePairs, (et) => !!et.nominated),
            se = maxBy(Y, (et) => et.priority);
          if (!se) return;
          const he = find(
            dt.candidates,
            (et, Ut) => Ut === se.localCandidateId
          );
          if (!he) return;
          let Le =
            he.candidateType === "relay" ? he.relayProtocol : he.protocol;
          he.candidateType === "prflx" && (Le += " (unreliable)");
          const qe = "unknown";
          return {
            candidateType: he.candidateType || qe,
            networkType: he.networkType || qe,
            transportType: Le || qe,
          };
        }
        _(Me, "getConnectionNetworkInfo");
        function ke(dt, Y) {
          const se = Me(Y);
          se && dt.maybeLogNetworkInfo(se);
        }
        _(ke, "reportConnectionNetworkInfo");
        const ge = {
          nominal: 1,
          fair: 2,
          serious: 3,
          critical: 4,
        };
        function fe() {
          return re.apply(this, arguments);
        }
        _(fe, "makeAppMetricsStats");
        function re() {
          return (
            (re = (0, t.coroutine)(function* () {
              var dt;
              if (!(0, T.y3)()) return;
              let Y, se, he;
              if (N.vkf.isAvailable()) {
                var Le;
                const $t = yield (0, N.vkf)();
                if (!$t) return;
                (Y = $t.processMetrics),
                  (se = ge[$t.thermalState]),
                  (he =
                    (Le = $t.speedLimit) === null || Le === void 0
                      ? void 0
                      : Le.limit);
              } else Y = yield (0, N.rc_)();
              if (!Y) return;
              let qe = null;
              const ht = Y.reduce(
                  ($t, En) => {
                    var wn, $n, j;
                    return (
                      En.type === "GPU" && (qe = En),
                      {
                        cpu:
                          $t.cpu +
                          ((En == null ||
                          (wn = En.cpu) === null ||
                          wn === void 0
                            ? void 0
                            : wn.percentCPUUsage) || 0),
                        memory: {
                          workingSetSize:
                            $t.memory.workingSetSize +
                            (0, L.UK)(
                              (En == null ||
                              ($n = En.memory) === null ||
                              $n === void 0
                                ? void 0
                                : $n.workingSetSize) || 0
                            ),
                          peakWorkingSetSize:
                            $t.memory.peakWorkingSetSize +
                            (0, L.UK)(
                              (En == null ||
                              (j = En.memory) === null ||
                              j === void 0
                                ? void 0
                                : j.peakWorkingSetSize) || 0
                            ),
                        },
                      }
                    );
                  },
                  {
                    cpu: 0,
                    memory: {
                      workingSetSize: 0,
                      peakWorkingSetSize: 0,
                    },
                  }
                ),
                et =
                  qe == null || (dt = qe.cpu) === null || dt === void 0
                    ? void 0
                    : dt.percentCPUUsage,
                Ut = et ? ht.cpu - qe.cpu.percentCPUUsage : ht.cpu;
              return {
                ...ht,
                cpuWithoutGpu: Ut,
                gpu: et,
                thermalState: se,
                speedLimit: he,
              };
            })),
            re.apply(this, arguments)
          );
        }
        _(re, "_makeAppMetricsStats");
        function le(dt) {
          const [Y, ...se] = Object.values(dt.transports);
          debugCheck(
            !se.length,
            "Can there be more than one transport stat in a report?"
          );
          const he = Y && Y.selectedCandidatePairId,
            Le = dt.candidatePairs[he];
          if (!he || !Le) return;
          const qe = dt.candidates[Le.remoteCandidateId] || {};
          return {
            availableOutgoingBitrate: Le.availableOutgoingBitrate || 0,
            availableIncomingBitrate: Le.availableIncomingBitrate || 0,
            totalBytesSent: Le.bytesSent,
            totalBytesReceived: Le.bytesReceived,
            currentRoundTripTime: Le.currentRoundTripTime,
            totalRoundTripTime: Le.totalRoundTripTime,
            protocol:
              qe.protocol === "udp"
                ? slack.calls.analytics.Protocol.UDP
                : slack.calls.analytics.Protocol.TCP,
            pathType:
              qe.candidateType === "host"
                ? slack.calls.analytics.PathType.DIRECT
                : slack.calls.analytics.PathType.RELAY,
            clientTime: Date.now(),
          };
        }
        _(le, "makeConnectionStats");
        function Re(dt, Y) {
          const se = Y.rtpStats[dt.id] || {},
            he = {
              codec: Te(se, Y),
              bytesSent: se.bytesSent,
              packetsSent: se.packetsSent,
            };
          if (dt.kind === "audio") {
            const Le = dt.trackIdentifier
              ? Y.mediaSources[dt.trackIdentifier]
              : null;
            return Le
              ? {
                  ...he,
                  audioStats: {
                    audioLevel: Le.audioLevel,
                    totalAudioEnergy: Le.totalAudioEnergy,
                    totalSamplesDuration: Le.totalSamplesDuration,
                    echoReturnLoss: Le.echoReturnLoss,
                    echoReturnLossEnhancement: Le.echoReturnLossEnhancement,
                  },
                }
              : {
                  ...he,
                  audioStats: {
                    audioLevel: dt.audioLevel,
                    echoReturnLoss: dt.echoReturnLoss,
                    echoReturnLossEnhancement: dt.echoReturnLossEnhancement,
                  },
                };
          }
          return {
            ...he,
            videoStats: {
              frameHeight: dt.frameHeight,
              frameWidth: dt.frameWidth,
              framesSent: dt.framesSent,
              hugeFramesSent: dt.hugeFramesSent,
              framesPerSecond: se.framesPerSecond,
              framesEncoded: se.framesEncoded,
            },
          };
        }
        _(Re, "makeOutboundMediaStats");
        function ye(dt, Y) {
          const se = Y.rtpStats[dt.id] || {},
            he = {
              codec: Te(se, Y),
              bytesReceived: se.bytesReceived,
              packetsReceived: se.packetsReceived,
              packetsLost: se.packetsLost,
              fractionLost: se.fractionLost,
              jitter: se.jitter,
            };
          return dt.kind === "audio"
            ? {
                ...he,
                audioStats: {
                  audioLevel: dt.audioLevel,
                  jitterBufferDelay: dt.jitterBufferDelay,
                  concealedSamples: dt.concealedSamples,
                  concealmentEvents: dt.concealmentEvents,
                },
              }
            : {
                ...he,
                videoStats: {
                  firCount: se.firCount,
                  nackCount: se.nackCount,
                  pliCount: se.pliCount,
                  sliCount: se.sliCount,
                  frameHeight: dt.frameHeight,
                  frameWidth: dt.frameWidth,
                  framesPerSecond: dt.framesPerSecond,
                  framesCorrupted: dt.framesCorrupted,
                  framesDecoded: dt.framesDecoded,
                  framesDropped: dt.framesDropped,
                  framesReceived: dt.framesReceived,
                },
              };
        }
        _(ye, "makeInboundMediaStats");
        function Te(dt, Y) {
          const se = dt.codecId,
            he = get(Y.codecs, se),
            Le = get(he, "mimeType");
          return De(Le);
        }
        _(Te, "getCodecForRtpStat");
        function De(dt) {
          switch (dt) {
            case "video/VP8":
              return slack.calls.analytics.Codec.VP8;
            case "video/VP9":
              return slack.calls.analytics.Codec.VP9;
            case "video/H264":
              return slack.calls.analytics.Codec.H264;
            case "audio/opus":
              return slack.calls.analytics.Codec.OPUS;
            default:
              return slack.calls.analytics.Codec.UNKNOWN;
          }
        }
        _(De, "parseCodec");
        function Ue(dt) {
          return dt.type === "inbound-rtp";
        }
        _(Ue, "isRecvRtpStat");
        function Ke(dt) {
          return dt.type === "outbound-rtp";
        }
        _(Ke, "isSendRtpStat");
        function Ze(dt) {
          return dt.type === "track";
        }
        _(Ze, "isTrackStat");
        function Q(dt) {
          return dt.type === "transport";
        }
        _(Q, "isTransportStat");
        function ie(dt) {
          return (
            dt.type === "local-candidate" || dt.type === "remote-candidate"
          );
        }
        _(ie, "isIceCandidateStat");
        function Ve(dt) {
          return dt.type === "candidate-pair";
        }
        _(Ve, "isIceCandidatePairStat");
        function xe(dt) {
          return dt.type === "codec";
        }
        _(xe, "isCodecStat");
        function je(dt) {
          return dt.type === "stream";
        }
        _(je, "isStreamStat");
        function Fe(dt) {
          return dt.type === "media-source";
        }
        _(Fe, "isMediaSourceStat");
        const He = 5e3;
        let Oe = _(
            class {
              constructor(Y, se) {
                (this.audioVideoFacade = Y),
                  (this.observer = se),
                  (this.callLogger = (0, a.Jt)("HUDDLES-STATS-MANAGER")),
                  (this.isDisconnected = !1);
                var he = this;
                (this.onMetricsDidReceive = (function () {
                  var ht = (0, t.coroutine)(function* (et) {
                    if (!et) return;
                    const Ut = yield he.collectScreenshareStats();
                    he.reportAppMetrics({
                      clientMetricReport: et,
                      screenshareRtcStats: Ut,
                    });
                  });
                  return function (et) {
                    return ht.apply(this, arguments);
                  };
                })()),
                  (this.reportDisconnect = () => {
                    (this.isDisconnected = !0),
                      this.callLogger.info(
                        "Disconnect reported. Resuming app metrics collection without client metric report."
                      ),
                      this.reportAppMetrics();
                    const ht = setInterval(() => {
                      if (!this.isDisconnected) {
                        clearInterval(ht);
                        return;
                      }
                      this.callLogger.info(
                        "User still disconnected. Reporting app metrics without client metric report."
                      ),
                        this.reportAppMetrics();
                    }, He);
                  }),
                  (this.cleanup = () => {});
                var Le = this;
                this.collectScreenshareStats = (0, t.coroutine)(function* () {
                  let ht;
                  try {
                    var et;
                    const Ut =
                      (et =
                        Le.audioVideoFacade.contentShareController
                          .contentAudioVideo) === null || et === void 0
                        ? void 0
                        : et.rtcPeerConnection;
                    return Ut ? ((ht = yield Ut.getStats()), ht) : void 0;
                  } catch (Ut) {
                    Le.callLogger.error(
                      "Failed to collect screenshare stats",
                      Ut
                    );
                  }
                });
                var qe = this;
                (this.reportAppMetrics = (0, t.coroutine)(function* () {
                  let { clientMetricReport: ht, screenshareRtcStats: et } =
                    arguments.length > 0 && arguments[0] !== void 0
                      ? arguments[0]
                      : {};
                  if (!ht && !qe.isDisconnected) return;
                  qe.isDisconnected && ht && (qe.isDisconnected = !1);
                  const Ut = yield qe.collectAppMetrics();
                  qe.observer.onAppMetrics({
                    appMetrics: Ut,
                    clientMetricReport: ht,
                    screenshareRtcStats: et,
                  });
                })),
                  (this.collectAppMetrics = (0, t.coroutine)(function* () {
                    const ht = yield fe();
                    if (!ht) return;
                    let et = ht;
                    return (
                      ht &&
                        (et = (0, n.A)(
                          {
                            ...ht,
                            cpu: ht.cpuWithoutGpu,
                          },
                          "cpuWithoutGpu"
                        )),
                      et
                    );
                  }));
              }
            },
            "HuddlesStatsManager"
          ),
          Ye = _(
            class {
              start() {
                var Y;
                (this.isSignallingOnly = !1),
                  (Y = this.videoDownlinkManager) === null ||
                    Y === void 0 ||
                    Y.addObserver(this),
                  this.audioVideoFacade.addObserver(this),
                  this.audioVideoFacade.start(),
                  this.observer.onStart();
              }
              startWithSignalingOnly() {
                this.audioVideoFacade.start({
                  signalingOnly: !0,
                }),
                  (this.isSignallingOnly = !0);
              }
              stop() {
                var Y = this;
                return (0, t.coroutine)(function* () {
                  Y.isSignallingOnly
                    ? (Y.waitForStart.resolve(), Y.waitForStop.resolve(!0))
                    : yield Y.waitForStart,
                    (Y.isStopRequested = !0),
                    Y.audioVideoFacade.stop();
                })();
              }
              audioVideoDidStartConnecting(Y) {
                var se;
                if (!Y)
                  this.callLogger.info("Starting Chime session"),
                    this.observer.onStartSessionTimeout(),
                    this.observer.onAudioVideoDidStartConnecting(),
                    (this.isReconnecting = !1);
                else {
                  var he, Le, qe;
                  this.callLogger.info("Reconnecting Chime session"),
                    this.observer.onSelfDisconnected(),
                    (he = this.statsManager) === null ||
                      he === void 0 ||
                      (Le = he.reportDisconnect) === null ||
                      Le === void 0 ||
                      Le.call(he),
                    (qe = this.huddleReconnectTracer) === null ||
                      qe === void 0 ||
                      qe.traceReconnectAttempt(),
                    (this.isReconnecting = !0);
                }
                (se = this.disconnectObserver) === null ||
                  se === void 0 ||
                  se.onConnectionUpdate(this.audioVideoFacade);
              }
              audioVideoDidStart() {
                var Y, se, he;
                if (
                  (this.callLogger.info("Chime audio video session started"),
                  (Y = this.disconnectObserver) === null ||
                    Y === void 0 ||
                    Y.onConnectionUpdate(
                      (se = this.audioVideoFacade) === null ||
                        se === void 0 ||
                        (he = se.audioVideoController) === null ||
                        he === void 0
                        ? void 0
                        : he.meetingSessionContext,
                      this.isReconnecting
                    ),
                  this.isReconnecting)
                ) {
                  var Le;
                  this.callLogger.info("Successfully re-connected to Huddle"),
                    (Le = this.huddleReconnectTracer) === null ||
                      Le === void 0 ||
                      Le.traceReconnectAttemptOutcome({
                        isSuccess: !0,
                      }),
                    (this.isReconnecting = !1);
                }
                this.observer.onAudioVideoDidStart(),
                  this.deviceManager.audioVideoDidStart(),
                  this.dataChannelSubscribers.forEach((qe) =>
                    qe.onConnectDatachannel(this.audioVideoFacade)
                  ),
                  this.waitForStart.resolve();
              }
              audioVideoDidStop(Y) {
                var se, he, Le, qe;
                const ht = i.b9[Y.statusCode()],
                  et = `Chime session stopped. StatusCode: ${ht}`;
                if (
                  (this.callLogger.info(et),
                  this.isReconnecting && Y.isFailure())
                ) {
                  var Ut;
                  this.callLogger.info("Failed to re-connect to Huddle"),
                    (Ut = this.huddleReconnectTracer) === null ||
                      Ut === void 0 ||
                      Ut.traceReconnectAttemptOutcome({
                        isSuccess: !1,
                      });
                }
                delete this.disconnectObserver,
                  this.audioVideoFacade.removeObserver(this),
                  this.observer.onScreenShareStopped(),
                  this.observer.onAudioVideoDidStop(),
                  (se = this.videoDownlinkManager) === null ||
                    se === void 0 ||
                    se.removeObserver(this),
                  (he = this.meetingEventLogger) === null ||
                    he === void 0 ||
                    he.stop(),
                  delete this.meetingEventLogger,
                  (qe = (Le = this.statsManager).cleanup) === null ||
                    qe === void 0 ||
                    qe.call(Le),
                  delete this.statsManager,
                  this.dataChannelSubscribers.forEach(($t) =>
                    $t.onDisconnectDataChannel()
                  ),
                  !this.isStopRequested &&
                    Y.isTerminal() &&
                    (this.observer.onClogError(et),
                    this.observer.onError(l.uZ.CallEnded, ht)),
                  this.waitForStop.resolve(this.isStopRequested);
              }
              videoTileDidUpdate(Y) {
                if (!Y.boundVideoStream || !Y.boundAttendeeId) {
                  Y.tileId && this.observer.onVideoTileRemoved(Y.tileId);
                  return;
                }
                const se = new i.jp(Y.boundAttendeeId).base();
                this.selfAttendeeId === se
                  ? (this.deviceManager.localVideoTileDidUpdate(Y),
                    this.observer.onSelfVideoTileUpdate(Y))
                  : this.observer.onPeerVideoTileUpdate(se, Y);
              }
              videoTileWasRemoved(Y) {
                this.consoleLog.info(`Video tile removed: tileId=${Y}`),
                  this.observer.onVideoTileRemoved(Y);
              }
              videoAvailabilityDidChange(Y) {
                this.consoleLog.debug(
                  `Video availability: RemoteVideoAvailable=${Y.remoteVideoAvailable}, CanStartLocalVideo=${Y.canStartLocalVideo}`
                );
              }
              metricsDidReceive(Y) {
                var se = this;
                return (0, t.coroutine)(function* () {
                  var he;
                  (he = se.statsManager) === null ||
                    he === void 0 ||
                    he.onMetricsDidReceive(Y);
                })();
              }
              connectionDidBecomePoor() {
                this.callLogger.warn("SDK detected poor connection");
              }
              connectionDidSuggestStopVideo() {
                var Y;
                this.callLogger.warn(
                  "SDK suggested stop video, maybe poor connection"
                ),
                  (Y = this.videoUplinkManager) === null ||
                    Y === void 0 ||
                    Y.shouldRestrictVideoQuality(!0);
              }
              connectionDidBecomeGood() {
                var Y;
                this.callLogger.info("SDK detected good connection"),
                  (Y = this.videoUplinkManager) === null ||
                    Y === void 0 ||
                    Y.shouldRestrictVideoQuality(!1);
              }
              videoSendDidBecomeUnavailable() {
                this.callLogger.warn("Video send is unavailable");
              }
              remoteVideoSourcesDidChange(Y) {
                var se, he;
                (se = this.videoDownlinkManager) === null ||
                  se === void 0 ||
                  se.remoteVideoSourcesDidChange(Y),
                  (he = this.videoUplinkManager) === null ||
                    he === void 0 ||
                    he.remoteVideoSourcesDidChange(Y);
              }
              tileWillBePausedByDownlinkPolicy(Y) {
                this.observer.onVideoTileWillPause(Y);
              }
              tileWillBeUnpausedByDownlinkPolicy(Y) {
                this.observer.onVideoTileWillUnpause(Y);
              }
              constructor(
                Y,
                se,
                he,
                Le,
                qe,
                ht,
                et,
                Ut,
                $t,
                En,
                wn,
                $n = [],
                j
              ) {
                (this.selfAttendeeId = Y),
                  (this.meetingId = se),
                  (this.mediaRegion = he),
                  (this.callId = Le),
                  (this.audioVideoFacade = qe),
                  (this.observer = ht),
                  (this.deviceManager = et),
                  (this.videoDownlinkManager = Ut),
                  (this.disconnectObserver = $t),
                  (this.dataChannelSubscribers = $n),
                  (this.videoUplinkManager = j),
                  (this.callLogger = (0, a.tZ)("FREE-WILLY-AV")),
                  (this.consoleLog = (0, a.Cc)("FREE-WILLY-AV")),
                  (this.waitForStart = (0, d.u)()),
                  (this.waitForStop = (0, d.u)()),
                  (this.isStopRequested = !1),
                  (this.isSignallingOnly = !1),
                  (this.isReconnecting = !1),
                  En && (this.waitForStart = En),
                  wn && (this.waitForStop = wn),
                  (this.statsManager = new Oe(qe, ht)),
                  (this.meetingEventLogger = new $(
                    ht,
                    this.meetingId,
                    this.mediaRegion,
                    this.selfAttendeeId,
                    this.callId
                  )),
                  ({ reconnectTrace: this.huddleReconnectTracer } = (0,
                  g.A)().getAllTraceHandlers());
              }
            },
            "AudioVideoObserverImpl"
          );
        var at = e(8571983633),
          _t = e(489015593),
          pt = e(2671711178),
          Qe = e(5954792826),
          ct = e(9240258658),
          Pt = e(8193414630),
          zt = e(1990810649);
        function an() {
          switch ((0, N.IXB)()) {
            case -3:
              return 1 / 0.7;
            case -2:
              return 1 / 0.8;
            case -1:
              return 1 / 0.9;
            case 0:
              return 1;
            case 1:
              return 1 / 1.1;
            case 2:
              return 1 / 1.25;
            case 3:
              return 1 / 1.5;
            case 4:
              return 1 / 1.75;
            case 5:
              return 1 / 2;
            default:
              return 1;
          }
        }
        _(an, "getScaleFactorForCurrentZoomLevel");
        function Qt(dt, Y) {
          const [se, he] = dt;
          return [se * Y, he * Y];
        }
        _(Qt, "getScaledCoordinates");
        function tn(dt, Y) {
          var se;
          const Le = (0, T.y3)() && !(0, T.dY)("4.18.0") ? 1 / an() : 1,
            qe =
              ((se = dt.itemId) === null || se === void 0
                ? void 0
                : se.toString()) || null,
            ht = dt.itemId === "self" ? Y : qe;
          switch (dt.type) {
            case l.Sl.New:
            case l.Sl.Edit: {
              const [et, Ut] = Qt(dt.segment.a, Le),
                [$t, En] = Qt(dt.segment.b, Le),
                [wn, $n] = Qt(dt.segment.c, Le),
                [j, ue] = Qt(dt.segment.d, Le);
              return {
                itemId: ht,
                type:
                  dt.type === l.Sl.New
                    ? ct.Y.Draw.Type.NEW
                    : ct.Y.Draw.Type.EDIT,
                segment: {
                  a: {
                    x: et,
                    y: Ut,
                  },
                  b: {
                    x: $t,
                    y: En,
                  },
                  c: {
                    x: wn,
                    y: $n,
                  },
                  d: {
                    x: j,
                    y: ue,
                  },
                },
              };
            }
            case l.Sl.End:
              return {
                itemId: ht,
                type: ct.Y.Draw.Type.END,
              };
            case l.Sl.ChangeHue:
              return {
                itemId: ht,
                type: ct.Y.Draw.Type.CHANGE_HUE,
                hue: dt.hue,
              };
            case l.Sl.Position:
              return {
                itemId: ht,
                type: ct.Y.Draw.Type.POSITION,
                x: dt.x,
                y: dt.y,
              };
            default:
              return (0, Pt.Kh)(dt);
          }
        }
        _(tn, "convertDrawMessageToPeerMessage");
        function Ht(dt, Y) {
          const se = dt.itemId === Y ? "self" : dt.itemId;
          switch (dt.type) {
            case ct.Y.Draw.Type.NEW:
            case ct.Y.Draw.Type.EDIT: {
              const Le = (0, T.y3)() && !(0, T.dY)("4.18.0") ? an() : 1;
              return {
                itemId: se,
                type: dt.type === ct.Y.Draw.Type.NEW ? l.Sl.New : l.Sl.Edit,
                segment: {
                  a: [(dt.segment.a.x || 0) * Le, (dt.segment.a.y || 0) * Le],
                  b: [(dt.segment.b.x || 0) * Le, (dt.segment.b.y || 0) * Le],
                  c: [(dt.segment.c.x || 0) * Le, (dt.segment.c.y || 0) * Le],
                  d: [(dt.segment.d.x || 0) * Le, (dt.segment.d.y || 0) * Le],
                },
              };
            }
            case ct.Y.Draw.Type.END:
              return {
                itemId: se,
                type: l.Sl.End,
              };
            case ct.Y.Draw.Type.CHANGE_HUE:
              return {
                itemId: se,
                type: l.Sl.ChangeHue,
                hue: dt.hue,
              };
            case ct.Y.Draw.Type.POSITION:
              return {
                itemId: se,
                type: l.Sl.Position,
                x: dt.x,
                y: dt.y,
              };
            default:
              (0, k.M)("Unhandled draw message case");
              return;
          }
        }
        _(Ht, "convertPeerMessageToDrawMessage");
        function Kt(dt) {
          let Y = zt.o.Standard;
          return (
            dt.type && dt.type === ct.Y.Reacji.Type.Effect && (Y = zt.o.Effect),
            dt.type && dt.type === ct.Y.Reacji.Type.Gif && (Y = zt.o.Gif),
            Y
          );
        }
        _(Kt, "convertFromPeerReactionType");
        function qt(dt) {
          let Y = ct.Y.Reacji.Type.Standard;
          return (
            dt === zt.o.Effect && (Y = ct.Y.Reacji.Type.Effect),
            dt === zt.o.Gif && (Y = ct.Y.Reacji.Type.Gif),
            Y
          );
        }
        _(qt, "convertToPeerReactionType");
        var Tn = e(1975685771);
        let Mt = _(
          class ur {
            updatePresence(Y, se) {
              se
                ? this.attendeesStates.set(Y, this.initializeState())
                : this.attendeesStates.delete(Y);
            }
            calculateScore(Y, se, he) {
              const Le = this.attendeesStates.get(Y);
              if (!Le || (he !== null && (Le.muted = he), Le.muted)) return 0;
              const qe = Date.now();
              if (se) {
                Le.noiseFloor = this.updateNoiseFloor(Le, se);
                const ht = {
                  timestamp: qe,
                  volume: se,
                };
                Le.volumeSamples.push(ht);
              }
              return this.pruneVolumeSamples(Le), this.getScore(Le, qe);
            }
            prioritizeVideoSendBandwidthForActiveSpeaker() {
              return !0;
            }
            initializeState() {
              return {
                muted: !1,
                noiseFloor: 0,
                volumeSamples: [],
              };
            }
            updateNoiseFloor(Y, se) {
              let he = Y.noiseFloor;
              return (
                se > he
                  ? (he =
                      (1 - this.params.slowAttackFactor) * he +
                      this.params.slowAttackFactor * se)
                  : (he =
                      (1 - this.params.fastDecayFactor) * he +
                      this.params.fastDecayFactor * se),
                Math.min(he, this.params.noiseFloorMax)
              );
            }
            pruneVolumeSamples(Y) {
              const se = Date.now() - this.params.analysisWindowMs,
                he = Y.volumeSamples;
              for (; he.length && he[0].timestamp < se; ) he.shift();
            }
            getScore(Y, se) {
              return Y.volumeSamples.reduce((he, Le) => {
                const qe = Math.max(1, Math.ceil((se - Le.timestamp) / 1e3));
                return he + Math.max(0, Le.volume - Y.noiseFloor) / qe;
              }, 0);
            }
            constructor() {
              (this.attendeesStates = new Map()),
                (this.params = ur.FAST_SWITCHING_PARAMS);
            }
          },
          "WindowedActiveSpeakerPolicy"
        );
        (Mt.DAMPED_SWITCHING_PARAMS = {
          slowAttackFactor: 0.05,
          fastDecayFactor: 0.5,
          noiseFloorMax: 0.03,
          analysisWindowMs: 3e3,
        }),
          (Mt.FAST_SWITCHING_PARAMS = {
            slowAttackFactor: 0.05,
            fastDecayFactor: 0.5,
            noiseFloorMax: 0.03,
            analysisWindowMs: 300,
          });
        let Jt = _(
          class {
            shutdown() {
              window.clearTimeout(this.timerHandle), delete this.timerHandle;
            }
            addDisconnectedAttendee(Y) {
              new i.jp(Y).hasModality(i.jp.MODALITY_CONTENT) ||
                this.disconnectedAttendees.has(Y) ||
                (this.disconnectedAttendees.set(Y, Date.now() + this.timeoutMs),
                this.maybeStartTimer());
            }
            deleteDisconnectedAttendee(Y) {
              this.disconnectedAttendees.delete(Y),
                this.disconnectedAttendees.size === 0 &&
                  (window.clearTimeout(this.timerHandle),
                  delete this.timerHandle);
            }
            hasDisconnectedAttendee(Y) {
              return this.disconnectedAttendees.has(Y);
            }
            maybeStartTimer() {
              if (this.timerHandle || this.disconnectedAttendees.size === 0)
                return;
              const Y = this.disconnectedAttendees.get(
                [...this.disconnectedAttendees.keys()][0]
              );
              Y &&
                (this.timerHandle = window.setTimeout(
                  this.runTimer,
                  Math.max(Y - Date.now(), 10)
                ));
            }
            runTimer() {
              window.clearTimeout(this.timerHandle), delete this.timerHandle;
              const Y = [],
                se = Date.now();
              this.disconnectedAttendees.forEach((he, Le) => {
                se > he && (this.observer.onStalePeer(Le), Y.push(Le));
              }),
                Y.forEach((he) => {
                  this.disconnectedAttendees.delete(he);
                }),
                this.maybeStartTimer();
            }
            constructor(Y, se) {
              (this.timeoutMs = Y),
                (this.observer = se),
                (this.runTimer = this.runTimer.bind(this)),
                (this.disconnectedAttendees = new Map());
            }
          },
          "StaleAttendeeChecker"
        );
        var dn = e(4075246222),
          rn = e(2208015175),
          gn = e(8403493408),
          Zt = e(2604971659),
          Vt = e(2462761869);
        let Sn = _(
          class {
            addSelf(Y) {
              (this.selfId = Y), this.addPeer(Y);
            }
            removeSelf(Y) {
              (0, k.M)(Y === this.selfId, "Bad attendeeId when removing self"),
                delete this.selfId,
                this.removePeer(Y);
            }
            addPeer(Y) {
              (this.ids = (0, dn.A)(this.ids, [Y])),
                (0, rn.A)(this.cachedPeerStates[Y], (he, Le) => {
                  this.peerStateForwarder[Le] &&
                    !(0, at.A)(he) &&
                    this.peerStateForwarder[Le](Y, he);
                }),
                delete this.cachedPeerStates[Y];
              const se = [];
              (0, rn.A)(this.cachedCallState, (he, Le) => {
                this.callStateForwarder[Le] &&
                  !(0, at.A)(he) &&
                  this.callStateForwarder[Le].getPeerIdFn(he) === Y &&
                  (this.callStateForwarder[Le].forwardFn(he),
                  this.callStateForwarder[Le].isCached || se.push(Le));
              }),
                (this.cachedCallState = (0, n.A)(this.cachedCallState, se));
            }
            removePeer(Y) {
              (0, gn.A)(this.ids, Y),
                (0, rn.A)((0, Zt.A)(this.cachedCallState), (se) => {
                  if (this.callStateForwarder[se]) {
                    const he = this.callStateForwarder[se].removeFn(
                      this.cachedCallState[se],
                      Y
                    );
                    if (!he) {
                      delete this.cachedCallState[se];
                      return;
                    }
                    this.cachedCallState[se] = he;
                  }
                });
            }
            getPeers() {
              return this.ids;
            }
            hasPeer(Y) {
              return this.ids.includes(Y);
            }
            hasAttendee(Y) {
              return this.hasPeer(Y) || Y === this.selfId;
            }
            updateCallState(Y) {
              const se = Y;
              (0, rn.A)(Y, (he, Le) => {
                this.callStateForwarder[Le] &&
                  (se[Le] = this.callStateForwarder[Le].updateFn(
                    this.cachedCallState[Le],
                    he
                  ));
              }),
                (0, rn.A)(this.callStateForwarder, (he, Le) => {
                  this.forwardOrCacheCallState([se], Le, he);
                });
            }
            updatePeerStates(Y) {
              (0, rn.A)(this.peerStateForwarder, (se, he) => {
                this.forwardOrCachePeerState(Y, he, se);
              });
            }
            setIncludeSelfAndNoneActiveSpeaker(Y, se) {
              (Y === this.includeSelf && se === this.includeNone) ||
                ((this.includeSelf = Y),
                (this.includeNone = se),
                (0, rn.A)(this.cachedCallState, (he, Le) => {
                  this.callStateForwarder[Le] &&
                    !(0, at.A)(he) &&
                    this.callStateForwarder[Le].forwardFn(he);
                }));
            }
            forwardOrCachePeerState(Y, se, he) {
              Y.filter((qe) => !(0, at.A)(qe.state[se]))
                .map((qe) => ({
                  id: qe.peerId,
                  value: qe.state[se],
                }))
                .forEach((qe) => {
                  let { id: ht, value: et } = qe;
                  this.ids.includes(ht)
                    ? he(ht, et)
                    : (this.cachedPeerStates[ht] = {
                        ...this.cachedPeerStates[ht],
                        [se]: et,
                      });
                });
            }
            forwardOrCacheCallState(Y, se, he) {
              Y.filter((qe) => !(0, at.A)(qe[se]))
                .map((qe) => ({
                  value: qe[se],
                }))
                .forEach((qe) => {
                  let { value: ht } = qe;
                  const et = he.getPeerIdFn(ht);
                  let Ut = !1;
                  et && (this.ids.includes(et) || et === this.NO_ACTIVE_SPEAKER)
                    ? he.forwardFn(ht)
                    : (Ut = !0),
                    (Ut || he.isCached) &&
                      (this.cachedCallState = {
                        ...this.cachedCallState,
                        [se]: ht,
                      });
                });
            }
            getAttendeeId(Y) {
              return new i.jp(Y).base();
            }
            constructor(Y) {
              (this.observer = Y),
                (this.NO_ACTIVE_SPEAKER = "none"),
                (this.ids = []),
                (this.includeSelf = !1),
                (this.includeNone = !1),
                (this.cachedCallState = {}),
                (this.cachedPeerStates = {}),
                (this.callStateForwarder = {
                  activeSpeakerList: {
                    updateFn: (se, he) => {
                      const Le = se || [],
                        qe = he && he.length ? he[0] : this.NO_ACTIVE_SPEAKER;
                      return (
                        (0, Vt.A)(Le, [qe, this.NO_ACTIVE_SPEAKER]),
                        Le.unshift(qe),
                        Le
                      );
                    },
                    removeFn: (se, he) => {
                      if (se) return (0, gn.A)(se, he), se;
                    },
                    getPeerIdFn: (se) => {
                      const he = se.filter((Le) =>
                        Le === this.NO_ACTIVE_SPEAKER
                          ? this.includeNone
                          : this.includeSelf ||
                            this.selfId !== this.getAttendeeId(Le)
                      );
                      if (he.length) return he[0];
                    },
                    forwardFn: (se) => {
                      const he = se.filter((Le) =>
                        Le === this.NO_ACTIVE_SPEAKER && this.includeNone
                          ? !0
                          : this.includeSelf ||
                            this.selfId !== this.getAttendeeId(Le)
                      );
                      !he.length || he[0] === this.NO_ACTIVE_SPEAKER
                        ? this.observer.onNewActiveSpeaker(void 0)
                        : this.observer.onNewActiveSpeaker(
                            this.selfId === he[0] ? "self" : he[0]
                          );
                    },
                    isCached: !0,
                  },
                }),
                (this.peerStateForwarder = {
                  isDrawEnabled: (se, he) => {
                    this.observer.onPeerDrawEnabled(se, he);
                  },
                });
            }
          },
          "PeerCache"
        );
        var ze = e(252549317);
        let Ot = _(
          class {
            destroy() {
              var Y, se, he;
              (Y = this.peerCache) === null ||
                Y === void 0 ||
                Y.getPeers().forEach((Le) =>
                  this.audioVideoFacade.realtimeUnsubscribeFromVolumeIndicator(
                    Le
                  )
                ),
                delete this.peerCache,
                (se = this.staleAttendeeChecker) === null ||
                  se === void 0 ||
                  se.shutdown(),
                delete this.staleAttendeeChecker,
                this.audioVideoFacade.realtimeUnsubscribeToAttendeeIdPresence(
                  this.realtimeAttendeeIdPresenceCallback
                ),
                this.audioVideoFacade.realtimeUnsubscribeToFatalError(
                  this.realtimeFatalErrorCallback
                ),
                this.audioVideoFacade.realtimeUnsubscribeToLocalSignalStrengthChange(
                  this.realtimeLocalSignalStrengthChangeCallback
                ),
                this.audioVideoFacade.realtimeUnsubscribeToMuteAndUnmuteLocalAudio(
                  this.realtimeMuteAndUnmuteLocalAudioCallback
                ),
                this.audioVideoFacade.realtimeUnsubscribeToSetCanUnmuteLocalAudio(
                  this.realtimeSetCanUnmuteLocalAudioCallback
                ),
                this.audioVideoFacade.unsubscribeFromActiveSpeakerDetector(
                  this.activeSpeakerDetectorCallback
                ),
                delete this.windowedActiveSpeakerPolicy,
                this.audioVideoFacade.realtimeUnsubscribeFromReceiveDataMessage(
                  this.dataChannelTopic
                ),
                (he = this.audioVideoFacade.transcriptionController) === null ||
                  he === void 0 ||
                  he.unsubscribeFromTranscriptEvent(
                    this.realtimeReceiveTranscriptEventCallback
                  ),
                (this.attendeeMuteRequests = {});
            }
            selfDrawEnabled(Y) {
              this.sendPeerMessageOverDataChannel(
                new ct.Y({
                  capabilities: {
                    isDrawEnabled: Y,
                  },
                  fromPeerIdString: this.selfAttendeeId,
                })
              );
            }
            sendReacji(Y, se) {
              let he;
              se
                ? (he = {
                    emoji: Y,
                    type: qt(se),
                  })
                : (he = {
                    emoji: Y,
                  }),
                this.sendPeerMessageOverDataChannel(
                  new ct.Y({
                    reacji: he,
                    fromPeerIdString: this.selfAttendeeId,
                  })
                );
            }
            sendBackground(Y) {
              this.sendPeerMessageOverDataChannel(
                new ct.Y({
                  background: {
                    url: Y,
                  },
                  fromPeerIdString: this.selfAttendeeId,
                })
              );
            }
            sendMuteRequest(Y) {
              this.sendPeerMessageOverDataChannel(
                new ct.Y({
                  muteRequest: {
                    peerId: Y,
                  },
                  fromPeerIdString: this.selfAttendeeId,
                })
              );
            }
            sendJukeboxRequest(Y) {
              this.sendPeerMessageOverDataChannel(
                new ct.Y({
                  jukeboxRequest: {
                    songKey: Y,
                  },
                  fromPeerIdString: this.selfAttendeeId,
                })
              );
            }
            sendJukeboxStopRequest() {
              this.sendPeerMessageOverDataChannel(
                new ct.Y({
                  jukeboxRequest: {
                    stop: !0,
                  },
                  fromPeerIdString: this.selfAttendeeId,
                })
              );
            }
            sendDrawMessage(Y) {
              this.sendPeerMessageOverDataChannel(
                new ct.Y({
                  draw: tn(Y, this.selfAttendeeId),
                  fromPeerIdString: this.selfAttendeeId,
                })
              );
            }
            sendContentShareDetails(Y) {
              this.sendPeerMessageOverDataChannel(
                new ct.Y({
                  contentShareDetails: {
                    sourceType: Y,
                    itemId: this.selfAttendeeId,
                  },
                  fromPeerIdString: this.selfAttendeeId,
                })
              );
            }
            sendRecordingStartNotification() {
              this.sendPeerMessageOverDataChannel(
                new ct.Y({
                  recordingStartNotification: {
                    type: ct.Y.RecordingStartNotification.Type.SUMMARY,
                  },
                  fromPeerIdString: this.selfAttendeeId,
                })
              );
            }
            onStalePeer(Y) {
              this.callLogger.info(`Removing stale peer: ${Y}`),
                this.attendeeLeft(Y),
                this.observer.onPeerDisconnected(Y),
                this.observer.onPeerLeft(Y);
            }
            setIncludeSelfAndNoneActiveSpeaker(Y, se) {
              var he;
              (he = this.peerCache) === null ||
                he === void 0 ||
                he.setIncludeSelfAndNoneActiveSpeaker(Y, se);
            }
            attendeeJoined(Y) {
              if (Y === this.selfAttendeeId) {
                var se;
                (se = this.peerCache) === null ||
                  se === void 0 ||
                  se.addSelf(Y);
              } else {
                var he;
                (he = this.peerCache) === null ||
                  he === void 0 ||
                  he.addPeer(Y);
              }
              this.audioVideoFacade.realtimeSubscribeToVolumeIndicator(
                Y,
                this.realtimeVolumeIndicatorCallback
              ),
                this.consoleLog.info(
                  `Subscribed to attendee=${Y} volume indicator`
                );
            }
            attendeeLeft(Y) {
              if (Y === this.selfAttendeeId) {
                var se;
                (se = this.peerCache) === null ||
                  se === void 0 ||
                  se.removeSelf(Y);
              } else {
                var he;
                (he = this.peerCache) === null ||
                  he === void 0 ||
                  he.removePeer(Y);
              }
              this.audioVideoFacade.removeVideoTilesByAttendeeId(Y),
                this.audioVideoFacade.realtimeUnsubscribeFromVolumeIndicator(Y),
                this.consoleLog.info(
                  `Unsubscribed from attendee=${Y} volume indicator`
                );
            }
            sendPeerMessageOverDataChannel(Y) {
              this.isDataChannelReady()
                ? this.audioVideoFacade.realtimeSendDataMessage(
                    this.dataChannelTopic,
                    ct.Y.encode(Y).finish()
                  )
                : this.logFailureToSendPeerMessage(Y);
            }
            isAttendeeOfTypeContent(Y) {
              return new i.jp(Y).hasModality(i.jp.MODALITY_CONTENT);
            }
            realtimeAttendeeIdPresenceCallback(Y, se, he, Le) {
              var qe;
              if (
                (this.consoleLog.info(
                  `Attendee presence: attendeeId=${Y}, isSelf=${
                    this.selfAttendeeId === new i.jp(Y).base()
                  }, present=${se}, externalUserId=${he}, dropped=${Le}`
                ),
                (qe = this.windowedActiveSpeakerPolicy) === null ||
                  qe === void 0 ||
                  qe.updatePresence(Y, se),
                this.isAttendeeOfTypeContent(Y))
              ) {
                se || this.audioVideoFacade.removeVideoTilesByAttendeeId(Y);
                return;
              }
              if (!he) {
                this.callLogger.error(
                  `Attendee presence: no externalUserId for attendee=${Y}`
                ),
                  this.observer.onClogError("MissingExternalUserId");
                return;
              }
              let ht = null;
              if (se) {
                var et;
                Le === !1 &&
                !(
                  !((et = this.peerCache) === null || et === void 0) &&
                  et.hasAttendee(Y)
                )
                  ? (ht = "joined")
                  : (ht = "reconnected");
              } else Le === !0 ? (ht = "disconnected") : (ht = "left");
              if (ht === null) {
                this.callLogger.error("Presence callback event is null");
                return;
              }
              if (this.selfAttendeeId === Y)
                switch (ht) {
                  case "joined":
                    this.observer.onSelfJoined(),
                      this.observer.onSelfConnected();
                    break;
                  case "left":
                    this.observer.onSelfDisconnected(),
                      this.observer.onSelfLeft();
                    break;
                  case "disconnected":
                    this.observer.onSelfDisconnected();
                    break;
                  case "reconnected":
                    this.observer.onSelfConnected();
                    break;
                  default:
                    this.callLogger.error(`unknown self event ${ht}`);
                    return;
                }
              else {
                const wn = (0, Qe.l)(he);
                if (!wn) {
                  this.callLogger.error(`No externalUserId for ${Y}`);
                  return;
                }
                switch (ht) {
                  case "joined": {
                    var Ut;
                    (Ut = this.staleAttendeeChecker) === null ||
                      Ut === void 0 ||
                      Ut.deleteDisconnectedAttendee(Y),
                      this.observer.onPeerJoined(Y, wn),
                      this.observer.onPeerConnected(Y),
                      this.updatePeerVideoTile(Y);
                    break;
                  }
                  case "left":
                    this.observer.onPeerDisconnected(Y),
                      this.observer.onPeerLeft(Y);
                    break;
                  case "disconnected":
                    var $t;
                    ($t = this.staleAttendeeChecker) === null ||
                      $t === void 0 ||
                      $t.addDisconnectedAttendee(Y),
                      this.observer.onPeerDisconnected(Y);
                    break;
                  case "reconnected": {
                    var En;
                    (En = this.staleAttendeeChecker) === null ||
                      En === void 0 ||
                      En.deleteDisconnectedAttendee(Y),
                      this.observer.onPeerConnected(Y),
                      this.updatePeerVideoTile(Y);
                    break;
                  }
                  default:
                    this.callLogger.error(`unknown peer event ${ht}`);
                    return;
                }
              }
              ht === "joined" && this.attendeeJoined(Y),
                ht === "left" && this.attendeeLeft(Y);
            }
            realtimeFatalErrorCallback(Y) {
              this.callLogger.error(
                `Chime session fatal error: name=${Y.name}, message=${Y.message}`
              ),
                this.observer.onClogError(
                  `FatalError: ${Y.name} - ${Y.message}`
                );
            }
            realtimeLocalSignalStrengthChangeCallback(Y) {
              this.consoleLog.debug(`Local attendee signalStrength=${Y}`);
            }
            realtimeMuteAndUnmuteLocalAudioCallback(Y) {
              this.callLogger.debug(`Local attendee mute=${Y}`),
                this.observer.onPeerMuted("self", Y);
            }
            realtimeSetCanUnmuteLocalAudioCallback(Y) {
              this.consoleLog.debug(`Local attendee can unmute = ${Y}`);
            }
            realtimeVolumeIndicatorCallback(Y, se, he, Le, qe) {
              this.consoleLog.debug(
                `Attendee volume indicator: attendeeId=${Y}, volume=${se}, muted=${he}, signalStrength=${Le}, externalUserId=${qe}`
              ),
                this.selfAttendeeId !== Y &&
                  (he
                    ? this.observer.onPeerMuted(Y, !0)
                    : he !== null &&
                      he === !1 &&
                      this.observer.onPeerMuted(Y, !1)),
                Le !== null &&
                  (this.selfAttendeeId === Y
                    ? this.observer.onSelfConnectionQualityChanged(
                        "uplink",
                        (0, l.MK)(Le)
                      )
                    : this.observer.onPeerConnectionQualityChanged(
                        Y,
                        "uplink",
                        (0, l.MK)(Le)
                      ));
            }
            activeSpeakerDetectorCallback(Y) {
              var se, he;
              (se = this.peerCache) === null ||
                se === void 0 ||
                se.updateCallState({
                  activeSpeakerList: Y,
                }),
                (he = this.videoUplinkManager) === null ||
                  he === void 0 ||
                  he.reportActiveSpeakerChange(this.selfAttendeeId === Y[0]);
            }
            realtimeReceiveDataMessageCallback(Y) {
              if (this.selfAttendeeId === Y.senderAttendeeId) {
                if (!Y.throttled) return;
                this.callLogger.info(
                  `Data message throttled: size=${Y.data.length} bytes`
                );
                return;
              }
              let se;
              try {
                se = ct.Y.decode(Y.data);
              } catch (he) {
                this.callLogger
                  .error(`Peer Message failed during decode, ignoring peer message.
				| Error: ${he}
				| Data Sender Attendee ID: ${Y.senderAttendeeId}
				| Data Sender External Attendee ID: ${Y.senderExternalUserId}
				| Topic: ${Y.topic}`);
                return;
              }
              this.handlePeerMessageFromDataMessage(se, Y.senderAttendeeId);
            }
            handlePeerMessageFromDataMessage(Y, se) {
              const he = se;
              if (Y.jukeboxRequest) {
                var Le;
                if (
                  !(0, Tn.Z)(he, "senderAttendeeId is not populated") ||
                  !(0, Tn.Z)(
                    Y.jukeboxRequest,
                    "message.jukeboxRequest is required in the jukebox request message"
                  )
                )
                  return;
                if (
                  !this.peerCache ||
                  !(
                    !((Le = this.peerCache) === null || Le === void 0) &&
                    Le.hasPeer(he)
                  )
                ) {
                  this.callLogger.info(
                    `Dropping jukeboxRequest from unknown peer: ${he}`
                  );
                  return;
                }
                Y.jukeboxRequest.songKey &&
                  !Y.jukeboxRequest.stop &&
                  this.observer.onJukeboxRequest(Y.jukeboxRequest.songKey),
                  Y.jukeboxRequest.stop && this.observer.onJukeboxStopRequest();
              } else if (Y.reacji) {
                var qe;
                if (
                  !(0, Tn.Z)(he, "senderAttendeeId is not populated") ||
                  !(0, Tn.Z)(
                    Y.reacji.emoji,
                    "reacji.emoji is required in the reacji message"
                  )
                )
                  return;
                if (
                  !((qe = this.peerCache) === null || qe === void 0) &&
                  qe.hasPeer(he)
                ) {
                  const En = Kt(Y.reacji);
                  this.observer.onPeerReacji(he, Y.reacji.emoji, !0, En);
                } else
                  this.callLogger.info(
                    `Dropping reacji from unknown peer: ${he}`
                  );
              } else if (Y.draw) {
                var ht;
                const En = Ht(Y.draw, this.selfAttendeeId);
                if (
                  !(0, Tn.Z)(he, "senderAttendeeId is not populated") ||
                  !(0, Tn.Z)(En, "Draw message must be correctly formed")
                )
                  return;
                !((ht = this.peerCache) === null || ht === void 0) &&
                ht.hasPeer(he)
                  ? this.observer.onPeerDrawMessage(he, En)
                  : this.callLogger.info(
                      `Dropping draw message from unknown peer: ${he}`
                    );
              } else if (Y.capabilities) {
                if (!(0, Tn.Z)(he, "senderAttendeeId is not populated")) return;
                if (!(0, at.A)(Y.capabilities.isDrawEnabled)) {
                  var et;
                  (et = this.peerCache) === null ||
                    et === void 0 ||
                    et.updatePeerStates([
                      {
                        peerId: he,
                        state: {
                          isDrawEnabled: Y.capabilities.isDrawEnabled,
                        },
                      },
                    ]);
                }
              } else if (Y.muteRequest) {
                var Ut;
                if (
                  !(0, Tn.Z)(he, "senderAttendeeId is not populated") ||
                  !(0, Tn.Z)(
                    Y.muteRequest.peerId,
                    "muteRequest.peerId is required in the background message"
                  )
                )
                  return;
                if (
                  !((Ut = this.peerCache) === null || Ut === void 0) &&
                  Ut.hasPeer(he)
                ) {
                  if (Y.muteRequest.peerId === this.selfAttendeeId) {
                    var $t;
                    const En = this.attendeeMuteRequests[se],
                      wn = En == null ? void 0 : En.lastRequestTime,
                      $n = Date.now();
                    if (
                      (En
                        ? ((En.lastRequestTime = $n), (En.count += 1))
                        : (this.attendeeMuteRequests[se] = {
                            lastRequestTime: $n,
                            count: 1,
                          }),
                      wn && $n - wn <= this.attendeeMuteRequestThrottleMs)
                    ) {
                      this.callLogger.info(
                        `Throttled mute request from attendee: ${se} peer: ${he}`
                      );
                      return;
                    }
                    if (
                      (($t = this.attendeeMuteRequests[se]) === null ||
                      $t === void 0
                        ? void 0
                        : $t.count) >= this.attendeeMuteRequestMaxAllowed
                    ) {
                      this.callLogger.info(
                        `Dropped mute request from attendee: ${se} peer: ${he}`
                      );
                      return;
                    }
                  }
                  this.observer.onPeerMuteRequest(he, Y.muteRequest.peerId);
                } else
                  this.callLogger.info(
                    `Dropping mute request from unknown peer: ${he}`
                  );
              } else if (Y.contentShareDetails) {
                if (
                  !(0, Tn.Z)(he, "senderAttendeeId is not populated") ||
                  !(0, Tn.Z)(
                    Y.contentShareDetails.itemId,
                    "contentShareDetails.itemId is required in the contentShareDetails message"
                  ) ||
                  !(0, Tn.Z)(
                    Y.contentShareDetails.sourceType,
                    "contentShareDetails.sourceType is required in the contentShareDetails message"
                  )
                )
                  return;
                this.callLogger.info(
                  `Received content share details for item: ${Y.contentShareDetails.itemId}, type: ${Y.contentShareDetails.sourceType}`
                );
                const En = (0, ze.Vd)(Y.contentShareDetails.sourceType);
                this.observer.onContentShareDetailsUpdate(
                  he,
                  En,
                  Y.contentShareDetails.sourceType
                );
              }
            }
            realtimeReceiveTranscriptEventCallback(Y) {
              this.observer.onTranscriptionEvent(Y);
            }
            updatePeerVideoTile(Y) {
              this.audioVideoFacade
                .getAllVideoTiles()
                .filter((Le) => {
                  const qe = Le.state();
                  return !qe || !qe.boundAttendeeId
                    ? !1
                    : new i.jp(qe.boundAttendeeId).base() ===
                        new i.jp(Y).base();
                })
                .forEach((Le) => {
                  const qe = (Le == null ? void 0 : Le.state()) || null;
                  qe && this.observer.onPeerVideoTileUpdate(Y, qe);
                });
            }
            constructor(Y, se, he, Le) {
              var qe;
              (this.selfAttendeeId = Y),
                (this.audioVideoFacade = se),
                (this.observer = he),
                (this.videoUplinkManager = Le),
                (this.callLogger = (0, a.Jt)("AUDIO-VIDEO-FACADE-SUBS")),
                (this.consoleLog = (0, a.Cc)("AUDIO-VIDEO-FACADE-SUBS")),
                (this.dataChannelTopic = "data-channel"),
                (this.staleAttendeeTimeoutMs = 60 * 1e3),
                (this.attendeeMuteRequestThrottleMs = 10 * 1e3),
                (this.attendeeMuteRequestMaxAllowed = 50),
                (this.attendeeMuteRequests = {}),
                (this.isDataChannelReady = () => {
                  var ht, et, Ut;
                  return (ht = this.audioVideoFacade.audioVideoController) ===
                    null ||
                    ht === void 0 ||
                    (et = ht.meetingSessionContext) === null ||
                    et === void 0 ||
                    (Ut = et.signalingClient) === null ||
                    Ut === void 0
                    ? void 0
                    : Ut.ready();
                }),
                (this.logFailureToSendPeerMessage = (ht) => {
                  const et = ht.draw ? "draw" : "reacji",
                    Ut = _(
                      () =>
                        this.callLogger.error(
                          `Failed to send ${et} peer message. Data channel is not ready to use.`
                        ),
                      "logError"
                    );
                  return (0, pt.A)(et, Ut);
                }),
                (0, _t.A)(this, [
                  "realtimeAttendeeIdPresenceCallback",
                  "realtimeFatalErrorCallback",
                  "realtimeLocalSignalStrengthChangeCallback",
                  "realtimeMuteAndUnmuteLocalAudioCallback",
                  "realtimeSetCanUnmuteLocalAudioCallback",
                  "activeSpeakerDetectorCallback",
                  "realtimeVolumeIndicatorCallback",
                  "realtimeReceiveDataMessageCallback",
                  "realtimeReceiveTranscriptEventCallback",
                ]),
                this.audioVideoFacade.realtimeSubscribeToAttendeeIdPresence(
                  this.realtimeAttendeeIdPresenceCallback
                ),
                this.audioVideoFacade.realtimeSubscribeToFatalError(
                  this.realtimeFatalErrorCallback
                ),
                this.audioVideoFacade.realtimeSubscribeToLocalSignalStrengthChange(
                  this.realtimeLocalSignalStrengthChangeCallback
                ),
                this.audioVideoFacade.realtimeSubscribeToMuteAndUnmuteLocalAudio(
                  this.realtimeMuteAndUnmuteLocalAudioCallback
                ),
                this.audioVideoFacade.realtimeSubscribeToSetCanUnmuteLocalAudio(
                  this.realtimeSetCanUnmuteLocalAudioCallback
                ),
                (this.windowedActiveSpeakerPolicy = new Mt()),
                this.audioVideoFacade.subscribeToActiveSpeakerDetector(
                  this.windowedActiveSpeakerPolicy,
                  this.activeSpeakerDetectorCallback
                ),
                this.audioVideoFacade.realtimeSubscribeToReceiveDataMessage(
                  this.dataChannelTopic,
                  this.realtimeReceiveDataMessageCallback
                ),
                (qe = this.audioVideoFacade.transcriptionController) === null ||
                  qe === void 0 ||
                  qe.subscribeToTranscriptEvent(
                    this.realtimeReceiveTranscriptEventCallback
                  ),
                (this.peerCache = new Sn(this.observer)),
                (this.staleAttendeeChecker = new Jt(
                  this.staleAttendeeTimeoutMs,
                  this
                ));
            }
          },
          "AudioVideoFacadeSubscriber"
        );
        var fn = e(3867135795),
          ln = e(6696292586);
        const it = 15,
          Tt = 2560,
          Ct = 1e3,
          Rt = "text";
        let Yt = _(
            class {
              stopMusic(Y) {
                let { cleanObserver: se } = Y;
                this.huddlesJukeboxEnabled &&
                  this.isMusicEnabled &&
                  ((this.isMusicEnabled = !1),
                  this.audioVideoFacade.stopContentShare(),
                  se && this.audioVideoFacade.removeContentShareObserver(this));
              }
              stop() {
                var Y = this;
                return (0, t.coroutine)(function* () {
                  Y.isScreenshareEnabled &&
                    (Y.isStopRequested = yield Y.stopContentShare()),
                    Y.huddlesJukeboxEnabled &&
                      Y.stopMusic({
                        cleanObserver: !0,
                      }),
                    Y.isStopRequested ||
                      (Y.observer.onScreenShareStopped(),
                      Y.audioVideoFacade.removeContentShareObserver(Y));
                })();
              }
              contentShareDidStart() {
                this.log.info("Chime content share started"),
                  this.waitForStart.resolve(!0),
                  this.observer.onScreenShareStarted();
              }
              contentShareDidStop() {
                this.log.info("Chime content share stopped"),
                  this.isScreenshareEnabled &&
                    this.log.info("Screenshare stop: stream ended"),
                  (this.isScreenshareEnabled = !1),
                  this.observer.onScreenShareStopped(),
                  this.isStopRequested &&
                    this.audioVideoFacade.removeContentShareObserver(this);
              }
              contentShareDidPause() {
                this.log.info("Chime content share paused");
              }
              contentShareDidUnpause() {
                this.log.info("Chime content share unpaused");
              }
              setSongStream(Y) {
                var se = this;
                return (0, t.coroutine)(function* () {
                  se.huddlesJukeboxEnabled &&
                    ((se.waitForStart = (0, d.u)()),
                    yield se.audioVideoFacade.startContentShare(Y),
                    (se.isMusicEnabled = !0));
                })();
              }
              setScreenshare(Y, se, he) {
                var Le = this;
                return (0, t.coroutine)(function* () {
                  if (Y === Le.isScreenshareEnabled) return;
                  const { huddleEventsTrace: qe } = (0,
                  g.A)().getAllTraceHandlers();
                  if (Y) {
                    let ht = se;
                    if (se) {
                      const Ut = se.split(":");
                      Ut.length === 3 &&
                        Ut[2] !== "0" &&
                        ((Ut[2] = "0"),
                        (ht = Ut.join(":")),
                        Le.log.warn(
                          `Munging screen share media source id, before: ${se}, after: ${ht}`
                        ));
                    }
                    let et;
                    try {
                      Le.waitForStart = (0, d.u)();
                      const Ut = _(($t) => {
                        throw (
                          (Le.log.error(
                            `getUserMedia error during huddle screenshare attempt: ${$t.name} ${$t.message}`
                          ),
                          $t)
                        );
                      }, "logGetUserMediaError");
                      if (
                        ((0, N.g9M)() &&
                          Le.log.info(
                            `Starting screen share with zoomLevel = ${(0,
                            N.IXB)()}`
                          ),
                        (0, N.g9M)() && he)
                      ) {
                        const {
                          screenHeight: $t,
                          screenWidth: En,
                          selectedDisplayId: wn,
                        } = he;
                        if (
                          ((et = {
                            video: {
                              mandatory: {
                                chromeMediaSource: "desktop",
                                chromeMediaSourceId: ht,
                                maxFrameRate: it,
                              },
                            },
                          }),
                          En && $t)
                        ) {
                          const ue = et.video.mandatory,
                            we = En / $t,
                            ft = Tt;
                          (ue.maxWidth = En < ft ? En : ft),
                            (ue.maxHeight = $t < ft ? $t : ft);
                          const pn =
                            navigator.mediaDevices.getSupportedConstraints();
                          (0, fn.A)(pn, "aspectRatio") &&
                            !!pn.aspectRatio &&
                            (0, ln.A)(we) &&
                            ((ue.minAspectRatio = we),
                            (ue.maxAspectRatio = we)),
                            Le.log.info(
                              `Starting screen share with resolution constraints: ${ue.maxWidth} x ${ue.maxHeight} | resolution provided: ${En} x ${$t}`
                            );
                        } else
                          Le.log.info(
                            "Starting application window share without proposed resolution"
                          );
                        const j = yield navigator.mediaDevices
                          .getUserMedia(et)
                          .catch(Ut);
                        (j == null ? void 0 : j.getVideoTracks().length) > 0
                          ? (Le.log.debug(
                              `Applying content hint to content share stream. Content Hint ${Rt}`
                            ),
                            (j.getVideoTracks()[0].contentHint = Rt))
                          : Le.log.warn(
                              "No video tracks where available when starting constrained content share"
                            ),
                          setTimeout(() => {
                            const ue = j.getVideoTracks()[0].getSettings(),
                              we = (0, ze.MS)(
                                ue == null ? void 0 : ue.deviceId
                              );
                            B.A.publish({
                              type: U.lx.ScreenshareContentType,
                              update: {
                                screenshareContentType: we,
                              },
                            }),
                              Le.log.info(
                                `Created video track with resolution: ${ue.width} x ${ue.height} framerate: ${ue.frameRate} aspect ratio: ${ue.aspectRatio}`
                              ),
                              wn &&
                                Le.log.info(
                                  `Sharing from selected display: ${wn}`
                                );
                          }, 500),
                          yield Le.audioVideoFacade.startContentShare(j),
                          setTimeout(
                            () => Le.applyContentShareConstraints(j),
                            Ct
                          ),
                          qe == null ||
                            qe.update({
                              name: I.p.SCREENSHARE,
                              type: I.G.START,
                            });
                      } else {
                        Le.log.info(
                          "Starting unconstrained content share with chime API's startContentShareFromScreenCapture"
                        );
                        const $t = yield Le.audioVideoFacade
                          .startContentShareFromScreenCapture(ht)
                          .catch(Ut);
                        if (
                          (qe == null ||
                            qe.update({
                              name: I.p.SCREENSHARE,
                              type: I.G.START,
                            }),
                          setTimeout(
                            () => Le.applyContentShareConstraints($t),
                            Ct
                          ),
                          ($t == null ? void 0 : $t.getVideoTracks().length) >
                            0)
                        ) {
                          Le.log.debug(
                            `Applying content hint to content share stream. Content Hint ${Rt}`
                          ),
                            ($t.getVideoTracks()[0].contentHint = Rt);
                          const En = $t.getVideoTracks()[0].getSettings(),
                            wn = (0, ze.MS)(En == null ? void 0 : En.deviceId);
                          B.A.publish({
                            type: U.lx.ScreenshareContentType,
                            update: {
                              screenshareContentType: wn,
                            },
                          });
                        } else
                          Le.log.warn(
                            "No video tracks where available when starting unconstrained content share"
                          );
                      }
                    } catch (Ut) {
                      const $t = _(() => {
                        delete Le.waitForStart,
                          (Le.isScreenshareEnabled = !1),
                          Le.observer.onScreenShareStopped();
                      }, "exitScreenshare");
                      if (Ut.name === "NotAllowedError") {
                        $t(),
                          Ut.message === "Permission denied by system" &&
                            Le.observer.onCheckSystemMediaAccess(l.mT.SCREEN);
                        return;
                      }
                      if (Ut.name === "OverconstrainedError") {
                        $t(),
                          et &&
                            Le.log.error(
                              `Invalid stream constraints prevented screenshare from succeeding: ${JSON.stringify(
                                et
                              )}`
                            );
                        return;
                      }
                      if (
                        ["TypeError", "AbortError", "Error"].includes(Ut.name)
                      ) {
                        $t(), Le.observer.onScreenShareError(l.lD.ERROR);
                        return;
                      }
                      if (Ut.name === "NotReadableError") {
                        $t(),
                          Le.observer.onScreenShareError(
                            l.lD.NOT_READABLE_ERROR
                          );
                        return;
                      }
                      throw (
                        (Ut.name === "NotFoundError" &&
                          ($t(),
                          Le.observer.onScreenShareError(l.lD.NOT_FOUND_ERROR)),
                        Le.log.error(
                          `Encountered an uncaught error attempting to start screen share: ${Ut.name} ${Ut.message}`
                        ),
                        Le.waitForStart.resolve(!1),
                        $t(),
                        Ut)
                      );
                    }
                    (Le.lastEnableTimeMs = Date.now()),
                      (Le.isScreenshareEnabled = Y);
                  } else Le.isScreenshareEnabled && (yield Le.stopContentShare());
                })();
              }
              applyContentShareConstraints(Y) {
                var se = this;
                return (0, t.coroutine)(function* () {
                  if (!se.isExperimentalSDK) return;
                  const he = Y.getVideoTracks()[0];
                  if (!he) {
                    se.log.info(
                      "Constraints not re-applied no video track available"
                    );
                    return;
                  }
                  he.getSettings() ||
                    se.log.info(
                      "Constraints not re-applied no video track settings available"
                    );
                  const qe = {
                    width: {
                      ideal: Tt,
                    },
                    height: {
                      ideal: Tt,
                    },
                    frameRate: {
                      ideal: it,
                    },
                  };
                  yield he.applyConstraints(qe),
                    se.log.info(
                      "Constraints re-applied to content share (resolution overwrite applied)"
                    );
                })();
              }
              isScreenShareEnabled() {
                return this.isScreenshareEnabled || !1;
              }
              stopContentShare() {
                var Y = this;
                return (0, t.coroutine)(function* () {
                  let se = !1;
                  if (
                    (Y.waitForStart.isPending()
                      ? Date.now() - Y.lastEnableTimeMs > 1e4
                        ? ((se = !0),
                          Y.log.info(
                            `Stop screen share, force: ${
                              Date.now() - Y.lastEnableTimeMs
                            } ms since start`
                          ))
                        : (Y.log.info(
                            "Stop screen share, waiting for content share start to resolve"
                          ),
                          (se = yield Y.waitForStart),
                          Y.log.info(
                            `Stop screen share, wait for content share start resolve finished: ${se}`
                          ))
                      : ((se = Y.waitForStart.value()),
                        Y.log.info(
                          `Stop screen share, promise resolved: ${se}`
                        )),
                    se)
                  ) {
                    Y.audioVideoFacade.stopContentShare(),
                      (Y.isScreenshareEnabled = !1);
                    const { huddleEventsTrace: he } = (0,
                    g.A)().getAllTraceHandlers();
                    he == null ||
                      he.update({
                        name: I.p.SCREENSHARE,
                        type: I.G.STOP,
                      }),
                      B.A.publish({
                        type: U.lx.ScreenshareContentType,
                        update: null,
                      });
                  } else Y.log.warn("Screen share disable ignored as screen share was not started successfully");
                  return se;
                })();
              }
              constructor(Y, se, he, Le) {
                (this.audioVideoFacade = Y),
                  (this.observer = se),
                  (this.huddlesJukeboxEnabled = he),
                  (this.isExperimentalSDK = Le),
                  (this.log = (0, a.tZ)("FREE-WILLY-CONTENT-SHARE")),
                  (this.isStopRequested = !1),
                  (this.lastEnableTimeMs = 0),
                  this.audioVideoFacade.addContentShareObserver(this),
                  (this.setScreenshare = h(this, this.setScreenshare, {
                    skipIntermediatePendingRuns: !1,
                  }));
              }
            },
            "ContentShareManager"
          ),
          bn = _(
            class {
              addObserver(Y) {
                var se, he;
                (se = this.videoDownlinkPolicy) === null ||
                  se === void 0 ||
                  (he = se.addObserver) === null ||
                  he === void 0 ||
                  he.call(se, Y);
              }
              removeObserver(Y) {
                var se, he;
                (se = this.videoDownlinkPolicy) === null ||
                  se === void 0 ||
                  (he = se.removeObserver) === null ||
                  he === void 0 ||
                  he.call(se, Y);
              }
              remoteVideoSourcesDidChange(Y) {
                (this.videoSources = Y), this.updateChimeVideoPreferences();
              }
              updateChimeVideoPreferences() {
                if (!this.videoSources || !this.videoDownlinkPolicy) return;
                const Y = [];
                this.videoSources.forEach((se) => {
                  var he;
                  const Le =
                    (he = se.attendee) === null || he === void 0
                      ? void 0
                      : he.attendeeId;
                  Le === this.selfAttendeeId ||
                    !Le ||
                    ((Le.includes("#content") || !this.isAudioOnlyMode) &&
                      Y.push(se));
                }),
                  this.sendChimeVideoPreferences(Y);
              }
              constructor({ selfAttendeeId: Y, videoDownlinkPolicy: se }) {
                (this.logger = new Ee.k("Huddles Video Downlink Manager")),
                  (this.isAudioOnlyMode = !1),
                  (this.toggleAllIncomingVideo = (he) => {
                    (this.isAudioOnlyMode = he),
                      this.updateChimeVideoPreferences();
                  }),
                  (this.sendChimeVideoPreferences = (he) => {
                    var Le;
                    try {
                      this.logger.debug(
                        `Sending updated video preferences to chime: ${JSON.stringify(
                          he
                        )}`
                      );
                    } catch {}
                    (Le = this.videoDownlinkPolicy) === null ||
                      Le === void 0 ||
                      Le.chooseRemoteVideoSources(he);
                  }),
                  (this.videoDownlinkPolicy = se),
                  (this.selfAttendeeId = Y);
              }
            },
            "VideoDownlinkManager"
          );
        const Wn = null;
        var hn = e(796111729),
          Bn = e(2240330919);
        const Rn = 30,
          zn = 720;
        class is {
          get videoParticipantCount() {
            const Y = this.audioVideoFacade.hasStartedLocalVideoTile() ? 1 : 0;
            return (this.remoteVideoParticipantCount || 0) + Y;
          }
          constructor(Y, se) {
            var he = this;
            (this.observer = Y),
              (this.audioVideoFacade = se),
              (this.logger = (0, hn.Wo)({
                label: "VIDEO-UPLINK",
              })),
              (this.remoteVideoParticipantCount = 0),
              (this.maxIdealBitrate = 1200),
              (this.minimumBitrate = 100),
              (this.useMinimumBitrate = !1),
              (this.currentBitrate = this.maxIdealBitrate),
              (this.isActiveSpeaker = !1),
              (this.bitrateUpdateDelayMs = 5e3),
              (this.remoteVideoSourcesDidChange = (Le) => {
                this.logger.info("remote video sources changed", Le),
                  (this.remoteVideoParticipantCount = Le.length),
                  this.updateVideoQualitySettings();
              }),
              (this.reportActiveSpeakerChange = (Le) => {
                this.logger.debug(`user is active speaker: ${Le}`);
                const qe = this.isActiveSpeaker;
                (this.isActiveSpeaker = Le),
                  qe === this.isActiveSpeaker
                    ? this.logger.debug(
                        `Active speaker status unchanged ${this.isActiveSpeaker}.`
                      )
                    : (this.logger.info(
                        `Active speaker status changed to ${this.isActiveSpeaker}. Updating video quality settings.`
                      ),
                      this.updateVideoQualitySettings());
              }),
              (this.updateVideoQualitySettings = () => {
                const Le = this.maxIdealBitrate;
                if (!this.videoParticipantCount) {
                  this.logger.debug("Video not active in Huddle. Returning.");
                  return;
                }
                const qe = this.currentBitrate;
                if (
                  (this.useMinimumBitrate
                    ? (this.currentBitrate = this.minimumBitrate)
                    : this.isActiveSpeaker
                    ? (this.currentBitrate = Le)
                    : this.remoteVideoParticipantCount <= 2
                    ? (this.currentBitrate = Le)
                    : this.remoteVideoParticipantCount <= 4
                    ? (this.currentBitrate = (Le * 2) / 3)
                    : (this.currentBitrate =
                        (Le * 2) / this.remoteVideoParticipantCount),
                  (this.currentBitrate =
                    (0, Bn.A)([this.currentBitrate, this.minimumBitrate]) ||
                    qe),
                  qe === this.currentBitrate)
                ) {
                  this.logger.info(
                    `Target video bitrate unchanged (${this.currentBitrate} kbps). Not updating max bitrate`
                  );
                  return;
                }
                const ht = qe > this.currentBitrate;
                this.applyNextVideoSettings(ht);
              }),
              (this.shouldRestrictVideoQuality = (Le) => {
                this.logger.info(
                  `should restrict video quality due to connection quality: ${Le}`
                ),
                  (this.useMinimumBitrate = Le),
                  this.updateVideoQualitySettings();
              }),
              (this.applyBitrate = () => {
                var Le;
                !this.currentBitrate ||
                  !(
                    !((Le = this.audioVideoFacade) === null || Le === void 0) &&
                    Le.setVideoMaxBandwidthKbps
                  ) ||
                  (this.logger.info(
                    `applying new video max bitrate to local video stream ${this.currentBitrate}`
                  ),
                  this.audioVideoFacade.setVideoMaxBandwidthKbps(
                    Math.trunc(this.currentBitrate)
                  ));
              }),
              (this.applyBitrateDelayed = (0, m.A)(
                this.applyBitrate,
                this.bitrateUpdateDelayMs,
                {
                  leading: !1,
                }
              )),
              (this.applyNextVideoSettings = function () {
                (
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : !1
                )
                  ? he.applyBitrateDelayed()
                  : he.applyBitrate();
              }),
              this.logger.info("Initializing video uplink manager"),
              this.audioVideoFacade.chooseVideoInputQuality(zn, zn, Rn),
              this.observer.onMaxTileSizeUpdated(zn),
              this.applyNextVideoSettings();
          }
        }
        _(is, "VideoUplinkManager");
        var ss = e(3146858537),
          jn = e(3398586081),
          Yn = e(1829947126);
        let Qn = _(
          class {
            initialize(Y, se) {
              (this.gainNode = se), (this.audioContext = Y);
            }
            onAudioLevelUpdated(Y) {
              isNaN(Y.value) ||
                Y.value < this.audioLevelActivationThreshold ||
                (this.currentDuckingEndTimeout &&
                  clearTimeout(this.currentDuckingEndTimeout),
                this.startDucking());
            }
            startDucking() {
              if (!this.gainNode || !this.audioContext) return;
              const Y = this.defaultVolume * this.duckingAudioAdjustmentLevel;
              this.gainNode.gain.cancelScheduledValues(
                this.audioContext.currentTime
              ),
                this.gainNode.gain.exponentialRampToValueAtTime(
                  Y,
                  this.audioContext.currentTime + this.fadeInTimeLocal
                ),
                (this.currentDuckingEndTimeout = setTimeout(() => {
                  this.endDucking();
                }, this.waitForFadeOutTime));
            }
            endDucking() {
              var Y;
              this.gainNode &&
                this.audioContext &&
                ((Y = this.gainNode) === null ||
                  Y === void 0 ||
                  Y.gain.exponentialRampToValueAtTime(
                    this.defaultVolume,
                    this.audioContext.currentTime + this.fadeOutTime
                  ));
            }
            constructor(Y) {
              (this.defaultVolume = Y),
                (this.fadeOutTime = 20),
                (this.fadeInTimeLocal = 0.2),
                (this.waitForFadeOutTime = 3e3),
                (this.duckingAudioAdjustmentLevel = 0.2),
                (this.audioLevelActivationThreshold = 0.04),
                (this.onAudioLevelUpdated =
                  this.onAudioLevelUpdated.bind(this)),
                Yn.A.subscribeAll(this.onAudioLevelUpdated);
            }
          },
          "JukeboxDucker"
        );
        const es = "HUDDLE-JUKEBOX";
        let Et = _(
          class {
            startLocalJukebox(Y) {
              let { song: se, volume: he } = Y;
              var Le = this;
              return (0, t.coroutine)(function* () {
                var qe;
                const ht = Le.getSongUrl({
                  song: se,
                });
                if (ht === Le.localAudioUrl) return;
                Le.callLogger.info(
                  `Starting local jukebox song key: ${se.key}.`
                ),
                  Le.audioContext || (Le.audioContext = new AudioContext()),
                  Le.cleanup(),
                  (Le.localAudioUrl = ht);
                const Ut = yield (yield window.fetch(ht)).arrayBuffer(),
                  $t = yield Le.audioContext.decodeAudioData(Ut);
                (Le.audioBufferSourceNode =
                  Le.audioContext.createBufferSource()),
                  (Le.audioBufferSourceNode.buffer = $t),
                  (Le.localAudio = new Audio()),
                  (Le.localAudio.volume = he),
                  yield Le.localAudio.setSinkId((0, P._o)()),
                  (Le.localMediaStreamAudioDestinationNode =
                    Le.audioContext.createMediaStreamDestination()),
                  (Le.gainNode = Le.audioContext.createGain()),
                  (qe = Le.jukeboxDucker) === null ||
                    qe === void 0 ||
                    qe.initialize(Le.audioContext, Le.gainNode),
                  (Le.gainNode.gain.value = Le.defaultVolume),
                  Le.audioBufferSourceNode.connect(Le.gainNode),
                  Le.gainNode.connect(Le.localMediaStreamAudioDestinationNode),
                  (Le.localAudio.srcObject =
                    Le.localMediaStreamAudioDestinationNode.stream),
                  (Le.audioBufferSourceNode.loop = !0),
                  Le.audioBufferSourceNode.start(),
                  Le.localAudio.play();
              })();
            }
            startContentShareJukebox(Y) {
              let { song: se } = Y;
              var he = this;
              return (0, t.coroutine)(function* () {
                var Le, qe;
                he.audioContext || (he.audioContext = new AudioContext()),
                  he.audioDestination ||
                    (he.audioDestination =
                      he.audioContext.createMediaStreamDestination()),
                  he.callLogger.info(`Starting jukebox song key: ${se.key}`),
                  he.cleanup();
                const ht = he.getSongUrl({
                    song: se,
                  }),
                  Ut = yield (yield window.fetch(ht)).arrayBuffer(),
                  $t = yield he.audioContext.decodeAudioData(Ut);
                return (
                  (he.audioBufferSourceNode =
                    he.audioContext.createBufferSource()),
                  (he.audioBufferSourceNode.buffer = $t),
                  (he.localAudio = new Audio()),
                  yield he.localAudio.setSinkId((0, P._o)()),
                  (he.localMediaStreamAudioDestinationNode =
                    he.audioContext.createMediaStreamDestination()),
                  (he.gainNode = he.audioContext.createGain()),
                  (Le = he.jukeboxDucker) === null ||
                    Le === void 0 ||
                    Le.initialize(he.audioContext, he.gainNode),
                  (he.gainNode.gain.value = he.defaultVolume),
                  he.audioBufferSourceNode.connect(he.gainNode),
                  he.gainNode.connect(he.audioDestination),
                  he.gainNode.connect(he.localMediaStreamAudioDestinationNode),
                  (he.localAudio.srcObject =
                    he.localMediaStreamAudioDestinationNode.stream),
                  (he.audioBufferSourceNode.loop = !0),
                  he.audioBufferSourceNode.start(),
                  he.localAudio.play(),
                  (qe = he.audioDestination) === null || qe === void 0
                    ? void 0
                    : qe.stream
                );
              })();
            }
            stopJukebox() {
              this.callLogger.info(
                `Stopping jukebox for song: ${this.localAudioUrl || ""}`
              ),
                this.cleanup(),
                (this.audioContext = void 0),
                (this.audioDestination = void 0);
            }
            cleanup() {
              var Y, se, he, Le;
              (Y = this.audioBufferSourceNode) === null ||
                Y === void 0 ||
                Y.stop(),
                (this.audioBufferSourceNode = void 0),
                (se = this.localAudio) === null || se === void 0 || se.pause(),
                (this.localAudio = void 0),
                (this.localAudioUrl = void 0),
                (he = this.gainNode) === null ||
                  he === void 0 ||
                  he.disconnect(),
                (this.gainNode = void 0),
                (Le = this.audioDestination) === null ||
                  Le === void 0 ||
                  Le.disconnect();
            }
            hasAudio() {
              return !!this.localAudio;
            }
            getVolume() {
              var Y;
              return (Y = this.localAudio) === null || Y === void 0
                ? void 0
                : Y.volume;
            }
            getSongUrl(Y) {
              let { song: se } = Y;
              return se.url;
            }
            constructor() {
              (this.defaultVolume = 0.3),
                (this.callLogger = (0, a.Jt)(es)),
                this.callLogger.info("Huddle Jukebox Manager created."),
                (this.jukeboxDucker = new Qn(this.defaultVolume));
            }
          },
          "JukeboxManager"
        );
        const Ft = (0, jn.A)(() => new Et()),
          nn = {
            connectionWaitTimeMs: 15 * 1e3,
            connectionUnhealthyThreshold: 5,
            sendingAudioFailureSamplesToConsider: 3,
            sendingAudioFailureInitialWaitTimeMs: 15 * 1e3,
            missedPongsLowerThreshold: 1,
            missedPongsUpperThreshold: 3,
          },
          bt = _(
            class {
              constructor({ enableExperimentalConfig: Y }) {
                (this.enableExperimentalConfig = !1),
                  (this.getConfiguration = () =>
                    this.enableExperimentalConfig ? nn : {}),
                  (this.enableExperimentalConfig = !!Y);
              }
            },
            "ConnectionHealthPolicyManager"
          );
        var In = e(610288365),
          xn = e(1921074781),
          Nt;
        (function (dt) {
          (dt.Control = "control"),
            (dt.Vp8 = "vp8"),
            (dt.Vp8Svc = "vp8_svc"),
            (dt.Vp9 = "vp9"),
            (dt.Vp9Svc = "vp9_svc"),
            (dt.Av1 = "av1"),
            (dt.Av1Svc = "av1_svc");
        })(Nt || (Nt = {}));
        const At = (0, hn.Wo)({
            label: "HUDDLE-VIDEO-CODECS",
          }),
          te = (function () {
            var dt = (0, t.coroutine)(function* (Y) {
              let {
                audioVideoFacade: se,
                h264BaselineProfileEnabled: he,
                disableVp9: Le,
              } = Y;
              var qe, ht;
              const et = [];
              !(0, T.gm)() && !Le && et.push(i.KK.vp9()),
                he && et.push(i.KK.h264BaselineProfile()),
                et.push(i.KK.h264()),
                At.info(
                  `Setting preferred camera video codec to ${
                    (qe = et[0]) === null || qe === void 0
                      ? void 0
                      : qe.codecName
                  }`
                ),
                At.debug("Setting camera video codec preferences", et),
                (ht = se.setVideoCodecSendPreferences) === null ||
                  ht === void 0 ||
                  ht.call(se, et);
            });
            return _(function (se) {
              return dt.apply(this, arguments);
            }, "setCameraVideoCodec");
          })(),
          _e = (function () {
            var dt = (0, t.coroutine)(function* (Y) {
              let {
                useAv1: se,
                audioVideoFacade: he,
                h264BaselineProfileEnabled: Le,
              } = Y;
              var qe, ht;
              const et = [];
              se && et.push(i.KK.av1()),
                Le && et.push(i.KK.h264BaselineProfile()),
                et.push(i.KK.h264()),
                At.info(
                  `Setting preferred content share video codec to ${
                    (qe = et[0]) === null || qe === void 0
                      ? void 0
                      : qe.codecName
                  }`
                ),
                At.debug("Setting content share video codec preferences", et),
                (ht = he.setContentShareVideoCodecPreferences) === null ||
                  ht === void 0 ||
                  ht.call(he, et);
            });
            return _(function (se) {
              return dt.apply(this, arguments);
            }, "setScreenshareVideoCodec");
          })();
        var Ie = e(2028988448),
          Ne;
        (function (dt) {
          (dt.CONNECTION_STATE_CHANGE = "connectionstatechange"),
            (dt.ICE_CONNECTION_STATE_CHANGE = "iceconnectionstatechange");
        })(Ne || (Ne = {}));
        var We;
        (function (dt) {
          (dt.CLOSE = "close"), (dt.ERROR = "error");
        })(We || (We = {}));
        var $e;
        (function (dt) {
          (dt.DISCONNECTED = "disconnected"), (dt.FAILED = "failed");
        })($e || ($e = {}));
        const mt = 5 * 1e3,
          Xt = 1 * 1e3;
        let _n = null;
        class mn {
          constructor(Y) {
            var se = this;
            (this.observer = Y),
              (this.callLogger = (0, a.Jt)("DISCONNECT-OBSERVER")),
              (this.genericLogger = (0, hn.Wo)({
                label: "DISCONNECT-OBSERVER",
              })),
              (this.peerConnection = null),
              (this.webSocket = null),
              (this.shouldIgnoreDisconnectEvents = !1),
              (this.getPeerConnectionRef = (he) => {
                var Le, qe;
                const ht =
                  (Le = he) === null ||
                  Le === void 0 ||
                  (qe = Le.audioVideoController) === null ||
                  qe === void 0
                    ? void 0
                    : qe.meetingSessionContext;
                return ht == null ? void 0 : ht.peer;
              }),
              (this.getWebSocketRef = (he) => {
                var Le, qe, ht, et;
                const Ut =
                  (Le = he) === null ||
                  Le === void 0 ||
                  (qe = Le.audioVideoController) === null ||
                  qe === void 0
                    ? void 0
                    : qe.meetingSessionContext;
                return Ut == null ||
                  (ht = Ut.signalingClient) === null ||
                  ht === void 0 ||
                  (et = ht.webSocket) === null ||
                  et === void 0
                  ? void 0
                  : et.connection;
              }),
              (this.onConnectionUpdate = function (he) {
                (arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : !1) &&
                  (se.brieflyIgnoreDisconnectEvents(),
                  se.genericLogger.debug(
                    "Connection restored. Ignoring disconnection events for 5 seconds."
                  ));
                try {
                  se.resetConnectionRefs(he),
                    se.registerAllEventHandlers(),
                    se.genericLogger.debug(
                      "Reconnected and monitoring for future disconnections."
                    );
                } catch (qe) {
                  se.callLogger.error(
                    "Error updating connection references on reconnection:",
                    qe
                  );
                }
              }),
              (this.brieflyIgnoreDisconnectEvents = () => {
                (this.shouldIgnoreDisconnectEvents = !0),
                  setTimeout(() => {
                    (this.shouldIgnoreDisconnectEvents = !1),
                      this.genericLogger.debug(
                        "Reconnection delay over. Now responding to disconnection events."
                      );
                  }, mt);
              }),
              (this.resetConnectionRefs = (he) => {
                this.unregisterAllEventHandlers(),
                  (this.peerConnection = this.getPeerConnectionRef(he) || null),
                  (this.webSocket = this.getWebSocketRef(he) || null),
                  this.webSocket
                    ? this.genericLogger.debug(
                        "WebSocket reference obtained successfully."
                      )
                    : this.callLogger.error(
                        "WebSocket reference not available."
                      );
              }),
              (this.broadcastDisconnection = (0, m.A)(
                () => {
                  var he;
                  if (this.shouldIgnoreDisconnectEvents) {
                    this.genericLogger.debug(
                      "Disconnection event ignored due to recent reconnection."
                    );
                    return;
                  }
                  this.genericLogger.info(
                    "Disconnection detected. Informing the user."
                  ),
                    (he = this.observer) === null ||
                      he === void 0 ||
                      he.onSelfDisconnected();
                },
                Xt,
                {
                  leading: !0,
                  trailing: !1,
                }
              )),
              (this.onHuddleEnd = () => {
                this.genericLogger.debug(
                  "Huddle ended. Cleaning up event handlers and connection references."
                );
                try {
                  this.unregisterAllEventHandlers();
                } catch (he) {
                  this.callLogger.error(
                    `Error during Huddle end cleanup: ${he}`
                  );
                }
                (this.webSocket = null),
                  (this.peerConnection = null),
                  (_n = null);
              }),
              (this.testNetworkDrop = () => {
                var he, Le;
                this.genericLogger.info(
                  "Simulating network drop by closing WebSocket and PeerConnection."
                ),
                  (he = this.webSocket) === null || he === void 0 || he.close(),
                  (Le = this.peerConnection) === null ||
                    Le === void 0 ||
                    Le.close();
              }),
              (this.registerAllEventHandlers = () => {
                this.genericLogger.debug(
                  "Registering event handlers for WebSocket and PeerConnection."
                ),
                  this.registerPeerConnectionEventHandlers(),
                  this.registerWebSocketEventHandlers();
              }),
              (this.unregisterAllEventHandlers = () => {
                this.genericLogger.debug(
                  "Unregistering event handlers for WebSocket and PeerConnection."
                ),
                  this.unregisterPeerConnectionEventHandlers(),
                  this.unregisterWebSocketEventHandlers();
              }),
              (this.registerPeerConnectionEventHandlers = () => {
                var he, Le;
                (he = this.peerConnection) === null ||
                  he === void 0 ||
                  he.addEventListener(
                    Ne.CONNECTION_STATE_CHANGE,
                    this.handlePeerConnectionStateChange
                  ),
                  (Le = this.peerConnection) === null ||
                    Le === void 0 ||
                    Le.addEventListener(
                      Ne.ICE_CONNECTION_STATE_CHANGE,
                      this.handleIceConnectionStateChange
                    );
              }),
              (this.registerWebSocketEventHandlers = () => {
                var he, Le;
                (he = this.webSocket) === null ||
                  he === void 0 ||
                  he.addEventListener(We.CLOSE, this.handleWebSocketClose),
                  (Le = this.webSocket) === null ||
                    Le === void 0 ||
                    Le.addEventListener(We.ERROR, this.handleWebSocketError);
              }),
              (this.unregisterPeerConnectionEventHandlers = () => {
                var he, Le;
                (he = this.peerConnection) === null ||
                  he === void 0 ||
                  he.removeEventListener(
                    Ne.CONNECTION_STATE_CHANGE,
                    this.handlePeerConnectionStateChange
                  ),
                  (Le = this.peerConnection) === null ||
                    Le === void 0 ||
                    Le.removeEventListener(
                      Ne.ICE_CONNECTION_STATE_CHANGE,
                      this.handleIceConnectionStateChange
                    );
              }),
              (this.unregisterWebSocketEventHandlers = () => {
                var he, Le;
                (he = this.webSocket) === null ||
                  he === void 0 ||
                  he.removeEventListener(We.CLOSE, this.handleWebSocketClose),
                  (Le = this.webSocket) === null ||
                    Le === void 0 ||
                    Le.removeEventListener(We.ERROR, this.handleWebSocketError);
              }),
              (this.handleIceConnectionStateChange = () => {
                var he, Le;
                if (
                  ((he = this.peerConnection) === null || he === void 0
                    ? void 0
                    : he.iceConnectionState) === $e.DISCONNECTED ||
                  ((Le = this.peerConnection) === null || Le === void 0
                    ? void 0
                    : Le.iceConnectionState) === $e.FAILED
                )
                  this.logDisconnectionWarning(
                    "ICE connection state is either disconnected or failed."
                  ),
                    this.broadcastDisconnection();
                else {
                  var qe;
                  this.callLogger.info(
                    `ICE connection state changed to: ${
                      (qe = this.peerConnection) === null || qe === void 0
                        ? void 0
                        : qe.iceConnectionState
                    }.`
                  );
                }
              }),
              (this.handlePeerConnectionStateChange = () => {
                var he, Le;
                if (
                  ((he = this.peerConnection) === null || he === void 0
                    ? void 0
                    : he.connectionState) === $e.DISCONNECTED ||
                  ((Le = this.peerConnection) === null || Le === void 0
                    ? void 0
                    : Le.connectionState) === $e.FAILED
                )
                  this.logDisconnectionWarning(
                    "Peer connection has either disconnected or failed."
                  ),
                    this.broadcastDisconnection();
                else {
                  var qe;
                  this.callLogger.info(
                    `peer connection state changed: ${
                      (qe = this.peerConnection) === null || qe === void 0
                        ? void 0
                        : qe.connectionState
                    }`
                  );
                }
              }),
              (this.handleWebSocketClose = (he) => {
                this.logDisconnectionWarning(
                  `WebSocket connection closed unexpectedly (Code: ${
                    he.code
                  }, Reason: ${he.reason || "None provided"}).`
                ),
                  this.broadcastDisconnection();
              }),
              (this.handleWebSocketError = (he) => {
                this.callLogger.error(`WebSocket encountered an error: ${he}.`);
              }),
              (this.logDisconnectionWarning = (he) => {
                this.callLogger.warn(
                  `ALERT! ${he} This may result in temporary audio/video disruption. Possible causes include network instability, network congestion, and security software (like VPNs, firewalls, or proxies) blocking or dropping the connection. If the issue persists, users should check their network or security settings and contact their IT team if necessary.`
                );
              }),
              this.callLogger.info(
                "Disconnection observer initialized. Monitoring for disconnections..."
              ),
              (_n = _(() => this.testNetworkDrop(), "testNetworkDropFn"));
          }
        }
        _(mn, "HuddleDisconnectObserver");
        const Fn = null;
        (0, Ie.ul)("testHuddleNetworkDrop", () => {
          _n == null || _n();
        });
        class Kn {
          initialize(Y, se, he, Le, qe, ht) {
            var et = this;
            return (0, t.coroutine)(function* () {
              var Ut, $t, En, wn, $n, j, ue, we;
              qe && (et.waitForStop = qe),
                ht && (et.dataChannelSubscribers = ht),
                et.observer.onInit(),
                (et.options = Y);
              const {
                serverConfig: ft,
                useChimeSdkExp: pn,
                useSimulcast: An,
                useGetMediaAccessCheckForWindows: yn,
                useHuddlesFilterWorker: xt,
              } = et.options;
              yield (0, i.ZT)(pn),
                (et.chimeLogger = new Ee.k(et.loggerName)),
                (et.callLogger = (0, a.Jt)(et.loggerName)),
                (Ut = et.callLogger) === null ||
                  Ut === void 0 ||
                  Ut.info(`user agent: ${navigator.userAgent}`);
              const Vn = (0, o.HF)();
              ($t = et.callLogger) === null ||
                $t === void 0 ||
                $t.info(`Version TS: ${Vn}`);
              const Jn =
                (document == null ||
                (En = document.documentElement) === null ||
                En === void 0 ||
                (wn = En.dataset) === null ||
                wn === void 0
                  ? void 0
                  : wn.versionHash) || "unknown";
              ($n = et.callLogger) === null ||
                $n === void 0 ||
                $n.info(`Version Hash: ${Jn}`),
                (j = et.callLogger) === null ||
                  j === void 0 ||
                  j.info(
                    `Chime SDK Version: ${i.zF.sdkVersion}${
                      pn ? " (Experimental)" : ""
                    }`
                  ),
                (et.meeting = ft.meeting),
                (et.attendee = ft.attendee),
                (et.selfAttendeeId = et.attendee.AttendeeId);
              const Je = (0, u.Y)(ft.attendee.ExternalUserId);
              try {
                var Bt;
                const Mn = JSON.stringify((0, n.A)(Y, "serverConfig"), null, 2);
                (Bt = et.callLogger) === null ||
                  Bt === void 0 ||
                  Bt.debug(
                    `Huddle SDK [${Je}] initialized with options: ${Mn}`
                  );
              } catch (Mn) {
                var Lt;
                (Lt = et.callLogger) === null ||
                  Lt === void 0 ||
                  Lt.error("Error stringifying options", Mn);
              }
              if (
                ((et.transportProtocols = ft.transportProtocols),
                (et.isPrejoin = et.options.isPrejoin),
                (et.meetingSessionConfiguration = new i.QJ(
                  et.meeting,
                  et.attendee
                )),
                An && et.meetingSessionConfiguration)
              ) {
                var rt;
                (rt = et.callLogger) === null ||
                  rt === void 0 ||
                  rt.info("Simulcast enabled"),
                  (et.meetingSessionConfiguration.enableSimulcastForUnifiedPlanChromiumBasedBrowsers =
                    !0);
              }
              if (
                (et.options.usePriorityDownlinkPolicy &&
                  ((et.videoDownlinkPolicy = new i.gi(et.selfAttendeeId)),
                  (et.meetingSessionConfiguration.videoDownlinkBandwidthPolicy =
                    et.videoDownlinkPolicy),
                  (et.meetingSessionConfiguration.keepLastFrameWhenPaused = !0),
                  (et.videoDownlinkManager = new bn({
                    selfAttendeeId: et.selfAttendeeId,
                    videoDownlinkPolicy: et.videoDownlinkPolicy,
                  }))),
                et.meetingSessionConfiguration.urls &&
                  (et.meetingSessionConfiguration.urls.urlRewriter =
                    et.urlRewriter.bind(et)),
                et.meetingSessionConfiguration &&
                  et.meetingSessionConfiguration
                    .connectionHealthPolicyConfiguration &&
                  (0, s.A)(
                    et.options.enableExperimentalConnectionHealthPolicyConfig
                  ))
              ) {
                const Mn = new bt({
                  enableExperimentalConfig:
                    et.options.enableExperimentalConnectionHealthPolicyConfig,
                });
                Object.assign(
                  et.meetingSessionConfiguration
                    .connectionHealthPolicyConfiguration,
                  Mn.getConfiguration()
                );
              }
              (et.meetingSessionConfiguration.disablePeriodicKeyframeRequestOnContentSender =
                !0),
                yield et.initVoiceFocus();
              const yt = {
                audio: se.includes(l.mT.MICROPHONE),
                video: se.includes(l.mT.CAMERA),
              };
              i.vB.disable();
              let ot;
              const lt = !!(
                  !((ue = et.voiceFocusManager) === null || ue === void 0) &&
                  ue.isAvailable()
                ),
                Ge = et.options.disableAudioRedundancy || !1;
              if (pn) {
                const Mn = (0, i.Q_)(),
                  ds = (0, i.RM)();
                if (
                  ((et.defaultDeviceController = new ds(et.chimeLogger, {
                    enableWebAudio: lt,
                  })),
                  et.defaultDeviceController.setDeviceLabelTrigger(() =>
                    navigator.mediaDevices.getUserMedia(yt)
                  ),
                  (et.sessionExp = new Mn(
                    et.meetingSessionConfiguration,
                    et.chimeLogger,
                    et.defaultDeviceController
                  )),
                  (ot = et.sessionExp.audioVideo),
                  Ge)
                ) {
                  const un = (0, i.Ls)();
                  ot.setAudioProfile(new un(null, !1)),
                    ot.setContentAudioProfile(new un(null, !1));
                }
              } else {
                const Mn = (0, i.of)(),
                  ds = (0, i.zg)();
                if (
                  ((et.defaultDeviceController = new ds(et.chimeLogger, {
                    enableWebAudio: lt,
                  })),
                  et.defaultDeviceController.setDeviceLabelTrigger(() =>
                    navigator.mediaDevices.getUserMedia(yt)
                  ),
                  (et.session = new Mn(
                    et.meetingSessionConfiguration,
                    et.chimeLogger,
                    et.defaultDeviceController
                  )),
                  (ot = et.session.audioVideo),
                  Ge)
                ) {
                  const un = (0, i.j3)();
                  ot.setAudioProfile(new un(null, !1)),
                    ot.setContentAudioProfile(new un(null, !1));
                }
              }
              if (et.options.useVideoUplinkPolicy) {
                var jt;
                (jt = et.callLogger) === null ||
                  jt === void 0 ||
                  jt.info("Video uplink policy enabled"),
                  (et.videoUplinkManager = new is(et.observer, ot));
              }
              yield et.populateDeviceInfoCache();
              const on = et.options.useH264Baseline || !1;
              te({
                audioVideoFacade: ot,
                h264BaselineProfileEnabled: on,
                disableVp9: !!et.options.disableVp9,
              });
              const cn = et.options.useH264BaselineScreenshare || !1,
                Wt = et.options.useAv1Screenshare;
              _e({
                useAv1: Wt,
                audioVideoFacade: ot,
                h264BaselineProfileEnabled: cn,
              });
              const en = {
                  useGetMediaAccessCheckForWindows: yn,
                  useHuddlesFilterWorker: xt,
                  backgroundVideoFilteringSetting: r.uT.Both,
                  useDevicesExp: et.options.useDevicesExp,
                  useVideoUplinkPolicy: et.options.useVideoUplinkPolicy,
                },
                Un = Se;
              (et.deviceManager = new Un(
                ot,
                et.audioOutputElement,
                et.observer,
                en,
                he,
                et.chimeLogger,
                et.defaultDeviceController,
                et.voiceFocusManager
              )),
                (we = et.dataChannelSubscribers) === null ||
                  we === void 0 ||
                  we.forEach((Mn) => Mn.onInitializeDataChannelSubscriber()),
                et.options.disconnectObserverEnabled &&
                  (et.disconnectObserver = new mn(et.observer)),
                (et.audioVideoObserver = new Ye(
                  et.selfAttendeeId,
                  et.meeting.MeetingId,
                  et.meeting.MediaRegion,
                  Je,
                  ot,
                  et.observer,
                  et.deviceManager,
                  et.videoDownlinkManager,
                  et.disconnectObserver,
                  Le,
                  et.waitForStop,
                  et.dataChannelSubscribers,
                  et.videoUplinkManager
                ));
              const Pn = et.options.huddlesJukeboxEnabled;
              if (Pn) {
                var Cn;
                (Cn = et.callLogger) === null ||
                  Cn === void 0 ||
                  Cn.info("Huddles Jukebox experiment enabled (prototype)");
              }
              (et.contentShareManager = new Yt(ot, et.observer, !!Pn, pn)),
                (et.audioVideoFacadeSubscriber = new Ot(
                  et.selfAttendeeId,
                  ot,
                  et.observer,
                  et.videoUplinkManager
                )),
                (0, In.Ay)().initialize(),
                et.connect(),
                (et.screenManager = new c.A()),
                et.observer.onMeetingSessionInitialized(),
                et.waitForInit.resolve();
            })();
          }
          shutdown(Y) {
            var se = this;
            return (0, t.coroutine)(function* () {
              var he, Le, qe, ht, et, Ut, $t;
              if (
                ((he = se.callLogger) === null ||
                  he === void 0 ||
                  he.info("Huddles SDK shutdown initiated"),
                (Le = se.disconnectObserver) === null ||
                  Le === void 0 ||
                  Le.onHuddleEnd(),
                delete se.disconnectObserver,
                yield se.waitForInit,
                se.cleanupDataChannelSubscribers(),
                (qe = se.contentShareManager) === null ||
                  qe === void 0 ||
                  qe.stop(),
                (ht = se.audioVideoObserver) === null ||
                  ht === void 0 ||
                  ht.stop(),
                yield (et = se.deviceManager) === null || et === void 0
                  ? void 0
                  : et.shutdown(),
                xn.F.doesInstanceExist())
              ) {
                var En;
                (En = xn.F.getInstance()) === null ||
                  En === void 0 ||
                  En.release();
              }
              (Ut = se.audioVideoFacadeSubscriber) === null ||
                Ut === void 0 ||
                Ut.destroy(),
                yield se.waitForStop,
                delete se.session,
                delete se.sessionExp,
                delete se.meetingSessionConfiguration,
                yield se.cleanupDefaultDeviceControllerRefs(),
                ($t = se.callLogger) === null ||
                  $t === void 0 ||
                  $t.info("Huddles SDK shutdown completed"),
                delete se.chimeLogger,
                delete se.callLogger,
                delete se.deviceManager,
                delete se.audioVideoFacadeSubscriber,
                delete se.audioVideoObserver,
                delete se.contentShareManager,
                delete se.screenManager,
                delete se.voiceFocusManager,
                delete se.videoDownlinkManager,
                delete se.videoDownlinkPolicy,
                delete se.videoUplinkManager,
                Y && Y();
            })();
          }
          selfMicrophoneEnabled(Y) {
            var se;
            (se = this.deviceManager) === null ||
              se === void 0 ||
              se.setMicrophone(Y);
          }
          selfVideoEnabled(Y, se, he, Le) {
            var qe, ht;
            (qe = this.deviceManager) === null ||
              qe === void 0 ||
              qe.setCamera(Y),
              (ht = this.contentShareManager) === null ||
                ht === void 0 ||
                ht.setScreenshare(se, he, Le);
          }
          startContentShareJukebox(Y) {
            let { song: se } = Y;
            var he = this;
            return (0, t.coroutine)(function* () {
              var Le;
              const qe = yield Ft().startContentShareJukebox({
                song: se,
              });
              qe &&
                ((Le = he.contentShareManager) === null ||
                  Le === void 0 ||
                  Le.setSongStream(qe));
            })();
          }
          selfStopJukebox() {
            var Y = this;
            return (0, t.coroutine)(function* () {
              var se;
              Ft().stopJukebox(),
                (se = Y.contentShareManager) === null ||
                  se === void 0 ||
                  se.stopMusic({
                    cleanObserver: !1,
                  });
            })();
          }
          setCameraQuality(Y, se, he, Le) {
            var qe;
            if (
              !(
                !((qe = this.options) === null || qe === void 0) &&
                qe.useVideoUplinkPolicy
              )
            ) {
              var ht;
              (ht = this.deviceManager) === null ||
                ht === void 0 ||
                ht.setCameraQuality(Y, se, he, Le);
            }
          }
          setAGC(Y) {
            var se;
            (se = this.deviceManager) === null || se === void 0 || se.setAGC(Y);
          }
          setNewPreferredDevice(Y, se) {
            var he;
            (he = this.deviceManager) === null ||
              he === void 0 ||
              he.setPreferredDevice(Y, se);
          }
          setNoiseSuppression(Y) {
            var se;
            (se = this.deviceManager) === null ||
              se === void 0 ||
              se.setNoiseSuppression(Y);
          }
          setVideoBackgroundEffect(Y) {
            var se;
            (se = this.deviceManager) === null ||
              se === void 0 ||
              se.setVideoBackgroundEffect(Y);
          }
          requestPreviewStreamForDeviceId(Y, se, he) {
            var Le;
            (Le = this.deviceManager) === null ||
              Le === void 0 ||
              Le.requestPreviewStreamForDeviceId(Y, se, he);
          }
          stopVideoPreviewForVideoInput(Y) {
            var se;
            (se = this.deviceManager) === null ||
              se === void 0 ||
              se.stopVideoPreviewForVideoInput(Y);
          }
          getScreenThumbnails(Y) {
            var se = this;
            return (0, t.coroutine)(function* () {
              var he;
              return yield (he = se.screenManager) === null || he === void 0
                ? void 0
                : he.getScreenThumbnails(
                    Y == null ? void 0 : Y.thumbnailDimensions,
                    Y == null ? void 0 : Y.isRefetch
                  );
            })();
          }
          selfDrawEnabled(Y) {
            var se;
            (se = this.audioVideoFacadeSubscriber) === null ||
              se === void 0 ||
              se.selfDrawEnabled(Y);
          }
          sendReacji(Y, se) {
            var he;
            (he = this.audioVideoFacadeSubscriber) === null ||
              he === void 0 ||
              he.sendReacji(Y, se);
          }
          sendBackground(Y) {
            var se;
            (se = this.audioVideoFacadeSubscriber) === null ||
              se === void 0 ||
              se.sendBackground(Y);
          }
          sendMuteRequest(Y) {
            var se;
            (se = this.audioVideoFacadeSubscriber) === null ||
              se === void 0 ||
              se.sendMuteRequest(Y);
          }
          sendJukeboxRequest(Y) {
            var se;
            (se = this.audioVideoFacadeSubscriber) === null ||
              se === void 0 ||
              se.sendJukeboxRequest(Y);
          }
          sendJukeboxStopRequest() {
            var Y;
            (Y = this.audioVideoFacadeSubscriber) === null ||
              Y === void 0 ||
              Y.sendJukeboxStopRequest();
          }
          sendDrawMessage(Y) {
            var se;
            (se = this.audioVideoFacadeSubscriber) === null ||
              se === void 0 ||
              se.sendDrawMessage(Y);
          }
          sendContentShareDetails(Y) {
            var se;
            (se = this.audioVideoFacadeSubscriber) === null ||
              se === void 0 ||
              se.sendContentShareDetails(Y);
          }
          sendRecordingStartNotification() {
            var Y;
            (Y = this.audioVideoFacadeSubscriber) === null ||
              Y === void 0 ||
              Y.sendRecordingStartNotification();
          }
          maybeBindAudioOutputElement() {
            var Y;
            (Y = this.deviceManager) === null ||
              Y === void 0 ||
              Y.maybeBindAudioOutputElement();
          }
          maybeCheckSystemMediaAccess(Y) {
            var se;
            return (se = this.deviceManager) === null || se === void 0
              ? void 0
              : se.maybeCheckSystemMediaAccess(Y);
          }
          setIncludeSelfAndNoneActiveSpeaker(Y, se) {
            var he;
            (he = this.audioVideoFacadeSubscriber) === null ||
              he === void 0 ||
              he.setIncludeSelfAndNoneActiveSpeaker(Y, se);
          }
          bindVideo(Y, se, he) {
            var Le;
            const qe = this.session || this.sessionExp;
            if (!qe) return;
            const ht =
              (Le = qe.audioVideo.getVideoTile(Y)) === null || Le === void 0
                ? void 0
                : Le.state();
            he
              ? ht != null &&
                ht.boundVideoStream &&
                i.xc.connectVideoStreamToVideoElement(
                  ht.boundVideoStream,
                  se,
                  !1
                )
              : (this.videoDownlinkPolicy &&
                  ht != null &&
                  ht.paused &&
                  qe.audioVideo.unpauseVideoTile(Y),
                qe.audioVideo.bindVideoElement(Y, se));
          }
          unbindVideo(Y, se, he) {
            const Le = this.session || this.sessionExp;
            Le &&
              (he
                ? i.xc.disconnectVideoStreamFromVideoElement(se, !0)
                : Le.audioVideo.getVideoTile(Y) &&
                  Le.audioVideo.unbindVideoElement(Y));
          }
          pauseVideo(Y) {
            const se = this.session || this.sessionExp;
            if (!se) return;
            const he = se.audioVideo.getVideoTile(Y),
              Le = he == null ? void 0 : he.state();
            !(Le != null && Le.isContent) &&
              Le != null &&
              Le.active &&
              (he == null || he.pause());
          }
          unpauseVideo(Y) {
            const se = this.session || this.sessionExp;
            if (!se) return;
            const he = se.audioVideo.getVideoTile(Y),
              Le = he == null ? void 0 : he.state();
            Le != null && Le.paused && (he == null || he.unpause());
          }
          videoTileHasStream(Y) {
            const se = this.session || this.sessionExp;
            if (!se) return !1;
            const he = se.audioVideo.getVideoTile(Y);
            if (!he) return !1;
            const Le = he.state();
            return Le ? !!Le.boundVideoStream : !1;
          }
          getMeetingMediaRegion() {
            var Y;
            return (Y = this.meeting) === null || Y === void 0
              ? void 0
              : Y.MediaRegion;
          }
          completePrejoin(Y) {
            var se = this;
            return (0, t.coroutine)(function* () {
              const { isStartMuted: he } = Y;
              if (se.isPrejoin) {
                var Le, qe;
                return (
                  he &&
                    ((Le = se.deviceManager) === null ||
                      Le === void 0 ||
                      Le.setStartMutedBarrier(he)),
                  (qe = se.audioVideoObserver) === null ||
                    qe === void 0 ||
                    qe.start(),
                  se.maybeBindAudioOutputElement(),
                  se.setIncludeSelfAndNoneActiveSpeaker(!0, !0),
                  (se.isPrejoin = !1),
                  !0
                );
              }
              return !1;
            })();
          }
          urlRewriter(Y) {
            if (!Y) return Y;
            if (this.transportProtocols) {
              const qe = this.transportProtocols;
              if (Y.includes("?transport=udp") && !qe.includes("udp")) {
                var se;
                return (
                  (se = this.callLogger) === null ||
                    se === void 0 ||
                    se.info("Dropping UDP transport"),
                  ""
                );
              }
              if (Y.includes("?transport=tcp")) {
                if (Y.includes("turns:")) {
                  if (!qe.includes("tls")) {
                    var he;
                    return (
                      (he = this.callLogger) === null ||
                        he === void 0 ||
                        he.info("Dropping TLS transport"),
                      ""
                    );
                  }
                } else if (!qe.includes("tcp")) {
                  var Le;
                  return (
                    (Le = this.callLogger) === null ||
                      Le === void 0 ||
                      Le.info("Dropping TCP transport"),
                    ""
                  );
                }
              }
            }
            return Y.replace(
              `:${this.TURN_PORT_UDP}`,
              `:${this.OVERRIDE_TURN_PORT_UDP}`
            );
          }
          hasSession() {
            return !!this.session || !!this.sessionExp;
          }
          setupVideoDeviceLabelTrigger() {
            var Y,
              se = this;
            const he = (function () {
              var Le = (0, t.coroutine)(function* () {
                try {
                  var qe;
                  se.videoDevicePermissionStatus = "IN_PROGRESS";
                  const et = yield navigator.mediaDevices.getUserMedia({
                    video: !0,
                  });
                  return (
                    (qe = se.callLogger) === null ||
                      qe === void 0 ||
                      qe.info("Video device permissions granted"),
                    (se.videoDevicePermissionStatus = "GRANTED"),
                    et
                  );
                } catch (et) {
                  var ht;
                  throw (
                    ((se.videoDevicePermissionStatus = "DENIED"),
                    se.observer.onSetNoMediaInput(l.mT.CAMERA),
                    (ht = se.callLogger) === null ||
                      ht === void 0 ||
                      ht.info("Video device permissions denied"),
                    et)
                  );
                }
              });
              return _(function () {
                return Le.apply(this, arguments);
              }, "callback");
            })();
            (Y = this.defaultDeviceController) === null ||
              Y === void 0 ||
              Y.setDeviceLabelTrigger(he);
          }
          maybeEnableSelfCamera() {
            let { isScreenshareEnabled: Y } =
              arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : {};
            var se = this;
            return (0, t.coroutine)(function* () {
              if (
                (yield se.initVideoPermission()) &&
                (se.videoDevicePermissionStatus === "INITIAL" ||
                  se.videoDevicePermissionStatus === "GRANTED")
              ) {
                var Le;
                se.selfVideoEnabled(!0, !!Y),
                  se.observer.onPeerCameraActive("self", !0),
                  (Le = se.callLogger) === null ||
                    Le === void 0 ||
                    Le.info(
                      "maybeEnableSelfCamera:: enabling camera function executed"
                    );
              }
            })();
          }
          initVideoPermission() {
            var Y = this;
            return (0, t.coroutine)(function* () {
              var se;
              return (
                Y.setupVideoDeviceLabelTrigger(),
                yield (se = Y.deviceManager) === null || se === void 0
                  ? void 0
                  : se.initVideoInputDevices()
              );
            })();
          }
          getSelfAttendeeId() {
            return this.selfAttendeeId;
          }
          constructor(Y, se, he = "FREE-WILLY-SDK") {
            (this.observer = Y),
              (this.audioOutputElement = se),
              (this.loggerName = he),
              (this.TURN_PORT_UDP = 3478),
              (this.OVERRIDE_TURN_PORT_UDP = 22466),
              (this.waitForInit = (0, d.u)()),
              (this.waitForStop = (0, d.u)());
            var Le = this;
            this.initVoiceFocus = (0, t.coroutine)(function* () {
              let Ut = 0;
              const $t = Date.now();
              (Le.voiceFocusManager = new ss.A(Le.chimeLogger)),
                yield Le.voiceFocusManager.init({
                  configOnly: !1,
                }),
                (Ut = Date.now() - $t),
                Le.observer.onMaybeVoiceFocusInitialized(Ut);
            });
            var qe = this;
            (this.populateDeviceInfoCache = (0, t.coroutine)(function* () {
              var Ut, $t, En, wn;
              const $n = Date.now(),
                j = yield (Ut = qe.defaultDeviceController) === null ||
                Ut === void 0
                  ? void 0
                  : Ut.listAudioInputDevices(),
                ue = yield ($t = qe.defaultDeviceController) === null ||
                $t === void 0
                  ? void 0
                  : $t.listAudioOutputDevices(),
                we = yield (En = qe.defaultDeviceController) === null ||
                En === void 0
                  ? void 0
                  : En.listVideoInputDevices(),
                ft = Date.now() - $n;
              (wn = qe.callLogger) === null ||
                wn === void 0 ||
                wn.info(
                  `Populated device info cache in ${ft}ms with ${
                    j == null ? void 0 : j.length
                  } microphones, ${
                    ue == null ? void 0 : ue.length
                  } speakers, and ${we == null ? void 0 : we.length} cameras`
                );
            })),
              (this.cleanupDataChannelSubscribers = () => {
                this.dataChannelSubscribers &&
                  (this.dataChannelSubscribers.forEach((Ut) =>
                    Ut.onShutdownDataChannelSubscriber()
                  ),
                  (this.dataChannelSubscribers = void 0));
              });
            var ht = this;
            (this.cleanupDefaultDeviceControllerRefs = (0, t.coroutine)(
              function* () {
                var Ut;
                if (!ht.defaultDeviceController) return;
                yield ht.defaultDeviceController.destroy();
                const $t =
                  (Ut = ht.defaultDeviceController) === null || Ut === void 0
                    ? void 0
                    : Ut.eventController;
                if ($t) {
                  var En;
                  const wn =
                    (En = $t.configuration) === null || En === void 0
                      ? void 0
                      : En.urls;
                  wn && (wn.urlRewriter = void 0);
                }
                (ht.defaultDeviceController.deviceLabelTrigger = void 0),
                  delete ht.defaultDeviceController;
              }
            )),
              (this.handleClientOffline = () => {
                var Ut;
                (Ut = this.audioVideoObserver) === null ||
                  Ut === void 0 ||
                  Ut.audioVideoDidStartConnecting(!0);
              }),
              (this.toggleAllIncomingVideo = (Ut) => {
                var $t;
                ($t = this.videoDownlinkManager) === null ||
                  $t === void 0 ||
                  $t.toggleAllIncomingVideo(Ut);
              });
            var et = this;
            (this.connect = (0, t.coroutine)(function* () {
              var Ut, $t;
              if (
                ((Ut = et.audioVideoObserver) === null ||
                  Ut === void 0 ||
                  Ut.startWithSignalingOnly(),
                yield ($t = et.deviceManager) === null || $t === void 0
                  ? void 0
                  : $t.init(),
                !et.isPrejoin)
              ) {
                var En;
                if (!F.Ay.canAccessMediaResource(l.mT.MICROPHONE)) {
                  var wn;
                  (wn = et.callLogger) === null ||
                    wn === void 0 ||
                    wn.error(
                      "Missing microphone permissions. Not connecting to huddle"
                    );
                  return;
                }
                (En = et.audioVideoObserver) === null ||
                  En === void 0 ||
                  En.start();
              }
            })),
              (this.videoDevicePermissionStatus = "INITIAL");
          }
        }
        _(Kn, "FreeWillySdk");
      },
      5016574668: (W, A, e) => {
        "use strict";
        e.d(A, {
          An: () => i,
          Kp: () => r,
          Nb: () => s,
          RN: () => c,
          Sq: () => a,
          ZT: () => t,
          jt: () => u,
          tz: () => d,
          w4: () => o,
          yz: () => n,
        });
        const t = 10 * 1e3,
          n = 1e3,
          s = "2.5",
          i = 450 * 450,
          d = 25,
          o = 15,
          a = "huddles_perf",
          r = "app_metrics",
          c = "client_metrics",
          u = 5;
      },
      2205899741: (W, A, e) => {
        "use strict";
        e.d(A, {
          $c: () => O,
          h7: () => C,
          t5: () => T,
          e7: () => l,
          KG: () => D,
          q4: () => g,
          _N: () => E,
          sI: () => K,
          Ap: () => v,
          kq: () => U,
          ik: () => M,
          No: () => b,
          fB: () => B,
          Ye: () => I,
          RI: () => c,
          Fq: () => S,
          oj: () => m,
          qf: () => P,
          Tg: () => f,
        });
        const t = 30,
          n = 300,
          s = 300,
          i = 30,
          d = 10,
          o = 30,
          a = 1,
          r = _(
            (R) =>
              function (G) {
                for (
                  var H = arguments.length,
                    F = new Array(H > 1 ? H - 1 : 0),
                    V = 1;
                  V < H;
                  V++
                )
                  F[V - 1] = arguments[V];
                if (!(typeof G != "string" && typeof G != "number"))
                  return R(G, ...F);
              },
            "makeDeduction"
          ),
          c = r((R) => (R > i ? R / 5 : void 0)),
          u = r((R) => (R > 400 ? R / 20 : void 0)),
          l = r((R) => (R > 1 ? R : void 0)),
          m = r((R) => (R > s ? R / 7.5 : void 0)),
          v = r((R) => (R > 1 ? R * 10 : void 0)),
          E = r((R) => (R > t ? R / 2 : void 0)),
          T = r((R) => (R > o ? R * 1.25 : void 0)),
          g = r((R) => (R > n ? R / 10 : void 0)),
          I = r((R) => (R > o ? R * 1.5 : void 0)),
          f = r((R) => (R > d ? R * 1.5 : void 0)),
          y = r((R) => R * 2),
          M = r((R) => (R && R !== "udp" ? 40 : void 0)),
          p = r((R) => (R && R > 500 ? R / 100 : void 0)),
          O = r((R) => (R > 150 ? R / 5 : void 0)),
          C = r((R) => (R > 15 ? R * 2 : void 0)),
          h = r((R) => (R > 5 ? R : void 0)),
          D = r((R) => (R > 20 ? R / 5 : void 0)),
          P = r((R) => (R > 1 ? R * 2.5 : void 0)),
          S = r((R) => (!R || R === "none" ? void 0 : 25)),
          b = r((R) => (R > 0 ? R * 20 : void 0)),
          K = r((R) => (R > 1 ? R * 1.25 : void 0)),
          x = r((R) => (R > 300 ? R / 10 : void 0)),
          B = r((R) => (R && R > o ? R * 1.5 : void 0)),
          U = r((R) => (R > a ? Math.round(R * 7.5) : void 0));
      },
      8634352961: (W, A, e) => {
        "use strict";
        e.d(A, {
          Zr: () => y,
          gR: () => g,
          kB: () => f,
          oB: () => M,
          ws: () => T,
          zT: () => I,
        });
        var t = e(7578217447),
          n = e(3852424459),
          s = e(796111729),
          i = e(9101533895),
          d = e(5795074931),
          o = e(3078252698);
        const a = (0, s.Wo)({
            label: "HUDDLE-RTM-FILTER",
          }),
          r = new Set([
            "file_shared",
            "file_created",
            "file_unshared",
            "file_change",
          ]),
          c = new Set([
            "sh_room_join",
            "huddle_invite_cancel",
            "update_thread_state",
            "thread_subscribed",
            "ended_huddle_update",
          ]);
        let u = _(
            class {
              constructor(O) {
                (this.skippedCount = 0),
                  (this.allowedCount = 0),
                  (this.allowedTypes = {}),
                  (this.updateSubscribedChannels = () => {
                    const h = this.getState();
                    this.mutedChannels = (0, n.m)(h);
                    const D = (0, i.D5)(h);
                    (this.joinedChannelIds = new Set(D.map((P) => P.id))),
                      a.info(
                        `Huddle RTM filter initialized. XWS joined channel count: ${
                          this.joinedChannelIds.size
                        } - Muted channel count: ${
                          this.mutedChannels
                            ? Object.keys(this.mutedChannels).length
                            : 0
                        }`
                      );
                  }),
                  (this.getTopAllowedTypes = () =>
                    this.allowedCount
                      ? Object.entries(this.allowedTypes)
                          .sort((h, D) => {
                            let [, P] = h,
                              [, S] = D;
                            return S - P;
                          })
                          .slice(0, 5)
                          .map((h) => {
                            let [D] = h;
                            return D;
                          })
                          .join(" ")
                      : ""),
                  (this.getPercentSkipped = () =>
                    Math.round(
                      (this.skippedCount /
                        (this.skippedCount + this.allowedCount)) *
                        100
                    )),
                  (this.isChannelDm = (h) => h.startsWith("D")),
                  (this.isChannelMuted = (h) =>
                    !h || !this.mutedChannels ? !1 : !!this.mutedChannels[h]),
                  (this.isChannelJoined = (h) =>
                    !h || !this.joinedChannelIds
                      ? !1
                      : !!this.joinedChannelIds.has(h)),
                  (this.skipRtm = () => ((this.skippedCount += 1), !0)),
                  (this.allowRtm = (h) => {
                    this.allowedCount += 1;
                    const D =
                      h.type === "message" ? `${h.type}/${h.subtype}` : h.type;
                    return (
                      (this.allowedTypes[h.type] =
                        (this.allowedTypes[D] || 0) + 1),
                      a.debug(
                        `Allowed RTM type: ${h.type} - subtype: ${h.subtype}`,
                        h
                      ),
                      !1
                    );
                  }),
                  (this.shouldSkipRtm = (h) => {
                    var D, P;
                    if (c.has(h.type)) return this.allowRtm(h);
                    if (
                      ((D = h.user) === null || D === void 0
                        ? void 0
                        : D.id) === this.currentUserId ||
                      h.user === this.currentUserId ||
                      h.user_id === this.currentUserId
                    )
                      return this.allowRtm(h);
                    if (
                      h.type === "channel_joined" ||
                      h.type === "mpim_joined" ||
                      h.type === "im_open" ||
                      h.type === "member_joined_channel" ||
                      (h.type === "message" && h.subtype === "channel_join") ||
                      (h.type === "desktop_notification" && h.is_channel_invite)
                    )
                      return (
                        a.info(
                          "Received IM/MPDM/channel join RTM. Updating channel references",
                          h
                        ),
                        this.updateSubscribedChannels(),
                        this.allowRtm(h)
                      );
                    const S =
                        h.channel ||
                        ((P = h.item) === null || P === void 0
                          ? void 0
                          : P.channel) ||
                        h.channel_id,
                      b = (0, o.A)(S) ? S : void 0;
                    return b && this.isChannelDm(b)
                      ? this.allowRtm(h)
                      : b && this.isChannelMuted(b)
                      ? this.skipRtm()
                      : b && !this.isChannelJoined(b)
                      ? this.skipRtm()
                      : t.Sj.has(h.type) && !r.has(h.type)
                      ? this.skipRtm()
                      : h.type === "dnd_invalidated"
                      ? this.skipRtm()
                      : h.type === "bot_added" ||
                        h.type === "bot_changed" ||
                        h.type === "hermes_trigger_updated" ||
                        h.type === "apps_changed" ||
                        h.type === "apps_installed" ||
                        h.type === "apps_uninstalled"
                      ? this.skipRtm()
                      : this.allowRtm(h);
                  });
                const C = O();
                (this.getState = O),
                  (this.currentUserId = (0, d.WR)(C)),
                  this.updateSubscribedChannels();
              }
            },
            "HuddleRtmFilter"
          ),
          l,
          m,
          v = 0;
        const E = _(() => {
            (v = 0), (m = Date.now());
          }, "clearRtmsSinceLastReport"),
          T = _((p) => {
            try {
              a.info("initializing Huddle RTM filter"),
                l || ((l = new u(p)), E());
            } catch (O) {
              a.error("Error in initHuddleRtmFilter", O);
            }
          }, "initHuddleRtmFilter"),
          g = _(() => {
            a.info("destroying Huddle RTM filter"), (l = void 0), E();
          }, "destroyHuddleRtmFilter"),
          I = _(() => {
            if (l) return l.getPercentSkipped();
          }, "getRtmFilterPercentSkipped"),
          f = _(() => {
            if (l) return l.getTopAllowedTypes();
          }, "getRtmFilterTopAllowedTypes"),
          y = _((p) => {
            try {
              return (
                (v += 1), m || (m = Date.now()), l ? l.shouldSkipRtm(p) : !1
              );
            } catch (O) {
              return a.error("Error in shouldSkipRtmDuringHuddle", O), !1;
            }
          }, "shouldSkipRtmDuringHuddle"),
          M = _(() => {
            try {
              if (!m || !v) return 0;
              const p = Date.now() - m,
                O = Math.round(v / (p / 1e3));
              return E(), O;
            } catch (p) {
              return a.error("Error in getRtmsPerSecond", p), 0;
            }
          }, "getRtmsPerSecond");
      },
      415910655: (W, A, e) => {
        "use strict";
        e.d(A, {
          ZR: () => i,
          jm: () => n,
          s2: () => s,
        });
        let t;
        const n = _((d) => {
            t || (t = {}), Object.assign(t, d);
          }, "updateJoinTimingMetrics"),
          s = _(() => t, "getJoinTimingMetrics"),
          i = _(() => {
            t = void 0;
          }, "resetJoinTimingMetrics");
      },
      5470425448: (W, A, e) => {
        "use strict";
        e.d(A, {
          lx: () => r,
          zu: () => a,
        });
        var t;
        (function (c) {
          (c.UDP = "udp"), (c.TCP = "tcp");
        })(t || (t = {}));
        var n;
        (function (c) {
          (c.RELAY = "relay"), (c.DIRECT = "direct");
        })(n || (n = {}));
        var s;
        (function (c) {
          (c.UPLINK = "uplink"), (c.DOWNLINK = "downlink");
        })(s || (s = {}));
        var i;
        (function (c) {
          (c.GOOD = "good"),
            (c.FAIR = "fair"),
            (c.BAD = "bad"),
            (c.WORST = "worst");
        })(i || (i = {}));
        var d;
        (function (c) {
          (c.GOOD = "good"),
            (c.FAIR = "fair"),
            (c.BAD = "bad"),
            (c.WORST = "worst");
        })(d || (d = {}));
        var o;
        (function (c) {
          (c[(c.UPSTREAM = 0)] = "UPSTREAM"),
            (c[(c.DOWNSTREAM = 1)] = "DOWNSTREAM");
        })(o || (o = {}));
        var a;
        (function (c) {
          (c[(c.AUDIO = 0)] = "AUDIO"), (c[(c.VIDEO = 1)] = "VIDEO");
        })(a || (a = {}));
        var r;
        (function (c) {
          (c.RtmMetrics = "rtm-metrics"),
            (c.RenderTiming = "render-timing"),
            (c.BluetoothDevices = "bluetooth-devices"),
            (c.MemoryLeaks = "memory-leaks"),
            (c.SelectedMediaRegion = "selected-media-region"),
            (c.PreferredMediaRegion = "preferred-media-region"),
            (c.VoiceFocusConfig = "voice-focus-config"),
            (c.NetworkDisconnect = "network-disconnect"),
            (c.CallId = "call-id"),
            (c.ScreenshareContentType = "screenshare-content-type"),
            (c.AppMetrics = "app-metrics"),
            (c.NoAudio = "no-audio"),
            (c.CameraResolution = "max-camera-resolution"),
            (c.SetIsDebugApp = "set-is-debug-app"),
            (c.TroubleshootingContactUsClicked =
              "troubleshooting-contact-us-clicked"),
            (c.TroubleshootingEntryPoint = "troubleshooting-entry-point"),
            (c.TroubleshootingExitHealthSnapshot =
              "troubleshooting-exit-health-snapshot");
        })(r || (r = {}));
      },
      5071086688: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => n,
        });
        var t = e(6267571562);
        const n = new t.G();
      },
      5403856613: (W, A, e) => {
        "use strict";
        e.d(A, {
          U: () => i,
          p: () => o,
        });
        var t = e(7091646278),
          n = e(2205899741);
        const s = 20,
          i = 80,
          d = 60,
          o = _((a) => {
            const {
              audioDownstreamQualityScore: r,
              networkQualityScore: c,
              networkType: u,
              networkProtocol: l,
              networkRelayProtocol: m,
              networkAvailableOutgoingBitrate: v,
              networkJitterMs: E,
              audioDownstreamJitterBufferDelay: T,
              networkCurrentRoundTripTimeMs: g,
              mediaRegionSelected: I,
              mediaRegionPreferred: f,
              cpuUse: y,
              cpuUseRelative: M,
              cpuCompetitionScore: p,
              gpuUse: O,
              batteryIsUsing: C,
              selectedMicrophone: h,
              selectedCamera: D,
              selectedSpeakers: P,
              cameraIsBlocked: S,
              cameraIsAvailable: b,
              microphoneIsBlocked: K,
              microphoneIsAvailable: x,
              isMicrophoneBluetooth: B,
              isSpeakerBluetooth: U,
              isMicrophoneAndSpeakerOnSameDevice: R,
              isHardwareAccelerationEnabled: G,
              isDisconnected: H,
              noAudioInput: F,
              osIsThrottlingCpu: V,
              networkPacketLossPercent: X,
            } = a;
            let q;
            switch (!0) {
              case c <= 0:
                q = t.bz.Bad;
                break;
              case c <= i:
                q = t.bz.Warn;
                break;
              default:
                q = t.bz.Good;
            }
            return {
              metrics: {
                stable: {
                  mediaRegionSelected: I,
                  mediaRegionPreferred: f,
                  selectedMicrophone: h,
                  selectedCamera: D,
                  selectedSpeakers: P,
                },
                unstable: {
                  cpuCompetitionScore: p,
                  cpuUse: y,
                  gpuUse: O,
                  cpuUseRelative: M,
                  audioQualityScore: r,
                  jitterMs: E,
                  audioDelayMs: T,
                  roundTripTimeMs: g,
                  packetLossPercent: X,
                  incomingBandwidth: v,
                  networkQualityScore: c,
                },
              },
              warnings: {
                stable: {
                  isVpnEnabled: u === "vpn",
                  isSuboptimalProtocol: !!(0, n.ik)(l) || !!(0, n.ik)(m),
                  isMediaRegionSuboptimal: !!I && !!f && I !== f,
                  isUsingBatteryPower: C,
                  isMicrophoneBluetooth: B,
                  isMicrophoneAndSpeakerOnSameDevice: R,
                  isSpeakerBluetooth: U,
                  isCameraProbablyIphone: /iphone/.test(
                    D == null ? void 0 : D.toLowerCase()
                  ),
                  isHardwareAccelerationDisabled: G === !1,
                  isOSThrottlingCpu: !!V,
                },
                unstable: {
                  isCpuUsePoor: !!(0, n.$c)(y),
                  isCpuUseRelativePoor: !!(0, n.h7)(M),
                  isGpuUsePoor: !!(0, n.KG)(O),
                  isJitterPoor: !!(0, n._N)(E),
                  isRTTPoor: !!(0, n.oj)(g),
                  isAudioDelayPoor: !!(0, n.q4)(T),
                  isPacketLossPoor: !!(0, n.kq)(X),
                },
              },
              alerts: {
                stable: {
                  isCameraBlocked: S || !b,
                  isMicrophoneBlocked: K || !x,
                  isMicrophoneNotSendingAudio: !!F,
                  isDisconnected: H,
                },
                unstable: {
                  networkQualityHealth: q,
                  isNetworkQualityPoor: c <= i,
                  isAudioQualityPoor: r <= s,
                  isCpuCompetitionPoor: p <= d,
                },
              },
            };
          }, "getTroubleshootingMetricsFromTags");
      },
      6246464105: (W, A, e) => {
        "use strict";
        e.d(A, {
          N5: () => c,
          R1: () => d,
          Y: () => r,
        });
        var t = e(6797417739),
          n = e(2825968873),
          s = e(5470425448),
          i = e(5071086688),
          d;
        (function (u) {
          (u.HuddlesSdk = "huddles-sdk"),
            (u.ChimeChannelListener = "chime-channel-listener"),
            (u.ChimeChannelBroadcaster = "chime-channel-broadcaster"),
            (u.VoiceFocusDevice = "voice-focus-device"),
            (u.VideoTransformDevice = "video-transform-device"),
            (u.VideoFrameProcessor = "video-frame-processor");
        })(d || (d = {}));
        const o = new Map([
            [
              d.HuddlesSdk,
              t.Y.create({
                name: d.HuddlesSdk,
              }),
            ],
            [
              d.ChimeChannelListener,
              t.Y.create({
                name: d.ChimeChannelListener,
              }),
            ],
            [
              d.ChimeChannelBroadcaster,
              t.Y.create({
                name: d.ChimeChannelBroadcaster,
              }),
            ],
            [
              d.VoiceFocusDevice,
              t.Y.create({
                name: d.VoiceFocusDevice,
              }),
            ],
            [
              d.VideoTransformDevice,
              t.Y.create({
                name: d.VideoTransformDevice,
              }),
            ],
            [
              d.VideoFrameProcessor,
              t.Y.create({
                name: d.VideoFrameProcessor,
              }),
            ],
          ]),
          a = (0, n.Jt)("HUDDLE-LEAK-MONITOR"),
          r = _((u) => {
            let { name: l, ref: m } = u;
            const v = o.get(l);
            if (!v) return;
            const E = v.getMetrics();
            if (E) {
              const { numberOfObjects: T, numberOfExpiredObjects: g } = E,
                I = T - g;
              g > 3 &&
                (a.warn(
                  `Detected ${g} memory leak(s) for ${l}${
                    I ? ` (with another ${I} instances in memory)` : ""
                  }`
                ),
                i.A.publish({
                  type: s.lx.MemoryLeaks,
                  update: {
                    name: l,
                    leakCount: g,
                  },
                }));
            }
            v.watch(m);
          }, "monitorObjectForMemoryLeaks"),
          c = _(() => {
            for (const [, u] of o) u.expectGCAll();
          }, "detectMemoryLeaks");
      },
      8872167513: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => Nt,
        });
        var t = e(3398586081),
          n = e(4724591729),
          s = e(796111729),
          i = e(3855029223),
          d = e(4798756512),
          o = e(9680914051);
        let a = _(
            class {
              initializeHuddleReconnectTracer() {
                var te, _e, Ie;
                (this.reconnectSpan =
                  (te = this.trace) === null || te === void 0
                    ? void 0
                    : te.startSpan(o.xN)),
                  (this.reconnectSuccessSpan =
                    (_e = this.trace) === null || _e === void 0
                      ? void 0
                      : _e.startSpan(o.xx)),
                  (this.reconnectFailureSpan =
                    (Ie = this.trace) === null || Ie === void 0
                      ? void 0
                      : Ie.startSpan(o.cJ));
              }
              traceReconnectAttemptOutcome(te) {
                let { isSuccess: _e } = te;
                var Ie;
                _e
                  ? (this.reconnectSuccessCount += 1)
                  : (this.reconnectFailureCount += 1),
                  (Ie = this.logger) === null ||
                    Ie === void 0 ||
                    Ie.info(
                      `Registered huddle reconnect attempt outcome - isSuccess: ${_e}`
                    );
              }
              traceReconnectAttempt() {
                var te;
                (this.reconnectCount += 1),
                  (te = this.logger) === null ||
                    te === void 0 ||
                    te.info("Counted huddle reconnect attempt");
              }
              report() {
                var te, _e, Ie, Ne, We;
                (te = this.reconnectSpan) === null ||
                  te === void 0 ||
                  te
                    .addTags({
                      metric_value: this.reconnectCount,
                    })
                    .close(),
                  (_e = this.reconnectSuccessSpan) === null ||
                    _e === void 0 ||
                    _e
                      .addTags({
                        metric_value: this.reconnectSuccessCount,
                      })
                      .close(),
                  (Ie = this.reconnectFailureSpan) === null ||
                    Ie === void 0 ||
                    Ie.addTags({
                      metric_value: this.reconnectFailureCount,
                    }).close(),
                  (Ne = this.tracer) === null ||
                    Ne === void 0 ||
                    Ne.reportSpans([
                      this.reconnectSpan,
                      this.reconnectSuccessSpan,
                      this.reconnectFailureSpan,
                    ]),
                  (We = this.logger) === null ||
                    We === void 0 ||
                    We.info("Reported reconnect attempt metric trace");
              }
              constructor({ tracer: te, trace: _e, logger: Ie }) {
                (this.reconnectCount = 0),
                  (this.reconnectSuccessCount = 0),
                  (this.reconnectFailureCount = 0),
                  (this.tracer = te),
                  (this.trace = _e),
                  (this.logger = Ie),
                  this.initializeHuddleReconnectTracer();
              }
            },
            "HuddleReconnectTracer"
          ),
          r = _(
            class {
              addTTIMetaTags(te) {
                let {
                  entryPoint: _e,
                  preferredMediaRegion: Ie,
                  isPrejoin: Ne,
                  isCreate: We,
                } = te;
                var $e;
                ($e = this.trace) === null ||
                  $e === void 0 ||
                  $e.addTags({
                    entry_point: _e,
                    preferred_media_region: Ie,
                    is_prejoin: Ne,
                    is_create: We,
                    success: !1,
                  });
              }
              createFetchCredentialsSpan() {
                var te;
                this.fetchCredentialsSpan =
                  (te = this.trace) === null || te === void 0
                    ? void 0
                    : te.startSpan(o.xl);
              }
              setCachedTag(te) {
                let { cached: _e } = te;
                var Ie;
                (Ie = this.trace) === null ||
                  Ie === void 0 ||
                  Ie.addTags({
                    cached: _e,
                  });
              }
              closeFetchCredentialsSpan() {
                var te;
                (te = this.fetchCredentialsSpan) === null ||
                  te === void 0 ||
                  te.close();
              }
              createConnectToMediaServiceSpan() {
                var te;
                this.connectToMediaServiceSpan =
                  (te = this.trace) === null || te === void 0
                    ? void 0
                    : te.startSpan(o.xA);
              }
              closeConnectToMediaServiceSpan() {
                var te, _e, Ie, Ne;
                (te = this.connectToMediaServiceSpan) === null ||
                  te === void 0 ||
                  te.close(),
                  (_e = this.trace) === null ||
                    _e === void 0 ||
                    _e.addTags({
                      success: !0,
                    }),
                  (Ie = this.tracer) === null ||
                    Ie === void 0 ||
                    Ie.reportTrace(this.trace),
                  (this.traceReported = !0),
                  (Ne = this.logger) === null ||
                    Ne === void 0 ||
                    Ne.info("Reported TTI metric trace");
              }
              getTTITraceId() {
                var te;
                return (te = this.trace) === null || te === void 0
                  ? void 0
                  : te.getTraceId();
              }
              getFetchCredentialsSpanId() {
                var te;
                return (te = this.fetchCredentialsSpan) === null ||
                  te === void 0
                  ? void 0
                  : te.getId();
              }
              setMediaRegionTag(te) {
                var _e, Ie;
                const Ne =
                  (_e = this.trace) === null || _e === void 0
                    ? void 0
                    : _e.getTags().preferred_media_region;
                (Ie = this.trace) === null ||
                  Ie === void 0 ||
                  Ie.addTags({
                    media_region: te,
                    media_region_matches: te === Ne,
                  });
              }
              report() {
                var te, _e;
                if (!this.traceReported) {
                  var Ie, Ne;
                  (Ie = this.tracer) === null ||
                    Ie === void 0 ||
                    Ie.reportTrace(this.trace),
                    (this.traceReported = !0),
                    (Ne = this.logger) === null ||
                      Ne === void 0 ||
                      Ne.info("Reported TTI metric trace in final clean up");
                }
                (te = this.tracer) === null ||
                  te === void 0 ||
                  te.clearTrace(this.trace),
                  (_e = this.logger) === null ||
                    _e === void 0 ||
                    _e.info("Cleaned up TTI metric trace");
              }
              constructor({ teamId: te, logger: _e }) {
                (this.traceReported = !1),
                  (this.tracer = (0, i.E)({
                    teamOrEnterpriseId: te,
                  })),
                  (this.trace = this.tracer.createTrace({
                    traceName: o.bQ,
                    samplingOptions: {
                      sampleRate: (0, n.Cu)() ? 1 : 0.05,
                      sampleType: d.tS.SESSION,
                    },
                  })),
                  (this.logger = _e);
              }
            },
            "HuddleTTITracer"
          );
        var c = e(7542104324),
          u = e(5470425448),
          l = e(9706240641),
          m = e(5016574668),
          v = e(1616072515);
        let E = _(
          class {
            recordAppMetrics(te) {
              var _e = this;
              return (0, l.coroutine)(function* () {
                const Ie = Date.now();
                if (Ie - _e.lastRecordedSpanTs < _e.reportingInterval) return;
                _e.logger.debug(`Adding new ${m.Sq}:${m.Kp} span`);
                const We = _e.trace.startSpan(m.Kp),
                  $e = (0, v.tT)(te),
                  mt = Object.keys($e).length;
                We.addTags($e),
                  We.close(),
                  _e.logger.debug(
                    `Added new ${m.Sq}:${m.Kp} span with ${mt} tags`
                  ),
                  _e.getSpanCount() > m.jt && _e.report(),
                  (_e.lastRecordedSpanTs = Ie);
              })();
            }
            constructor({
              teamId: te,
              logger: _e,
              callLogger: Ie,
              enableMaxReportingFrequency: Ne,
            }) {
              var We = this;
              (this.traceReported = !1),
                (this.lastRecordedSpanTs = 0),
                (this.getMetricsCollectionInterval = () =>
                  (0, n.Cu)() || this.enableMaxReportingFrequency
                    ? m.yz
                    : m.ZT),
                (this.createNewTrace = () => (
                  (this.trace = this.tracer.createTrace({
                    traceName: m.Sq,
                    tags: {
                      __dataset: m.RN,
                    },
                    samplingOptions: {
                      sampleType: d.tS.ALWAYS,
                    },
                  })),
                  this.trace
                )),
                (this.getSpanCount = () => {
                  var $e;
                  const mt =
                    ($e = this.trace) === null || $e === void 0
                      ? void 0
                      : $e.getSpans();
                  return mt ? Object.keys(mt).length : 0;
                }),
                (this.report = function () {
                  let $e =
                    arguments.length > 0 && arguments[0] !== void 0
                      ? arguments[0]
                      : !1;
                  if (
                    ($e &&
                      We.callLogger.debug(
                        `Huddle ${
                          We.callId
                        } is ending. Reporting ${We.getSpanCount()} remaining spans`
                      ),
                    !We.traceReported && We.getSpanCount() > 0)
                  ) {
                    var mt, Xt;
                    (mt = We.tracer) === null ||
                      mt === void 0 ||
                      mt.reportTrace(We.trace),
                      (Xt = We.tracer) === null ||
                        Xt === void 0 ||
                        Xt.clearTrace(We.trace),
                      We.logger.debug(`Cleared ${m.Sq}:${m.Kp} event trace`),
                      $e ? (We.traceReported = !0) : We.createNewTrace();
                  } else
                    We.logger.debug(
                      `Attempted to report ${m.Sq}:${m.Kp} trace but there was nothing to report`
                    );
                }),
                (this.tracer = (0, i.E)({
                  teamOrEnterpriseId: te,
                })),
                (this.enableMaxReportingFrequency = !!Ne),
                (this.reportingInterval = this.getMetricsCollectionInterval()),
                this.createNewTrace(),
                (this.logger = _e),
                (this.callLogger = Ie);
            }
          },
          "HuddlePerfTracer"
        );
        const T = null;
        var g = e(4103274853),
          I = e(166097325),
          f = e(8478954380),
          y = e(5403856613);
        const M = 10 * 1e3,
          p = 30 * 1e3;
        class O {
          constructor(te) {
            (this.logger = te),
              (this.currentUnstableAlerts = {}),
              (this.currentAlerts = {
                networkQualityHealth: [],
                isNetworkQualityPoor: [],
                isAudioQualityPoor: [],
                isCpuCompetitionPoor: [],
              }),
              (this.updateInterval = M),
              (this.updateIntervalIncrements = 0),
              (this.maybeIncrementUpdateInterval = () => {
                (this.updateIntervalIncrements += 1),
                  this.updateIntervalIncrements % 3 === 0 &&
                    (this.updateInterval = Math.min(
                      p,
                      this.updateInterval + 1e3
                    ));
              }),
              (this.getStableAlerts = (_e, Ie) => {
                const Ne = _((We) => {
                  const $e = _e[We];
                  let mt = this.currentAlerts[We];
                  const Xt = Date.now();
                  mt.push({
                    timestamp: Xt,
                    value: $e,
                  }),
                    (mt = mt.filter((dt) => {
                      let { timestamp: Y } = dt;
                      return Xt - Y <= p;
                    })),
                    (this.currentAlerts[We] = mt),
                    (mt = mt.filter((dt) => {
                      let { timestamp: Y } = dt;
                      return Xt - Y <= Ie.interval;
                    }));
                  const _n = new Map();
                  for (const dt of mt)
                    _n.has(dt.value) || _n.set(dt.value, 0),
                      _n.set(dt.value, _n.get(dt.value) + 1);
                  const mn = Array.from(_n.entries());
                  let [Fn, Kn] = mn[0];
                  for (const [dt, Y] of mn.slice(1))
                    Y > Kn && ((Kn = Y), (Fn = dt));
                  return mn.length ? Fn : this.currentUnstableAlerts[We];
                }, "nextAlert");
                return {
                  isAudioQualityPoor: Ne("isAudioQualityPoor"),
                  isCpuCompetitionPoor: Ne("isCpuCompetitionPoor"),
                  isNetworkQualityPoor: Ne("isNetworkQualityPoor"),
                  networkQualityHealth: Ne("networkQualityHealth"),
                };
              }),
              (this.getStabilityConfig = () => ({
                interval: this.updateInterval,
              })),
              (this.getAlertUpdates = (_e) => {
                let { alerts: Ie } = _e;
                const Ne = this.getStableAlerts(Ie, this.getStabilityConfig()),
                  We = !(0, I.A)(Ne, this.currentUnstableAlerts);
                if ((this.maybeIncrementUpdateInterval(), We))
                  return (
                    (this.currentUnstableAlerts = Ne),
                    this.logger.debug(
                      "Updated alerts and metrics will be dispatched to redux"
                    ),
                    Ne
                  );
              });
          }
        }
        _(O, "AlertUpdater");
        const C = null,
          h =
            "https://slack.com/help/articles/115003538426-Troubleshoot-audio-and-video-issues-in-Slack",
          D = {
            isMicrophoneBluetooth:
              "The user is using a Bluetooth microphone, which could cause audio delays, reduce audio quality, or cause audio and video to fall out of sync. If these problems occur, suggest they switch to a wired or built-in microphone.",
            isCameraProbablyIphone:
              'The user might be unknowingly using their iPhone camera, which could lead to issues like a black screen or missing video. To prevent this, they can disable the "Continuity Camera" feature on their device. Guide them to go to Settings > Camera > Continuity and turn off the option.',
            isVpnEnabled: `The user is connected via a VPN, which can increase latency or cause connectivity issues if the VPN isn't optimized for video conferencing. Suggest they disable the VPN or ask their IT team to allow Slack traffic to bypass it. More details can be found here: ${h}`,
            isSuboptimalProtocol: `The user's connection protocol is TLS, not TCP, which may be due to a VPN, proxy, or firewall not configured for video conferencing. Suggest they disable their VPN or proxy, or ask their IT team to allow Slack traffic to bypass it. More details can be found here: ${h}`,
            isHardwareAccelerationDisabled:
              "Hardware acceleration seems to be disabled on the user's device, which could degrade performance. Suggest they re-enable hardware acceleration in their Slack preferences. They can do this by going to Preferences > Advanced > Enable hardware acceleration.",
            isUsingBatteryPower:
              "The user's device is running on battery power, which could limit device performance and cause audio, video, or application lag. If they report such issues, suggest they connect their device to a power source.",
            isMediaRegionSuboptimal:
              "The user is in a different region from the Huddle host, potentially causing increased latency and instability. This geographical disparity can't be controlled by users but network stability and connectivity can be improved. Suggest that they move closer to their Wi-Fi router, switch to a wired connection if possible, limit other bandwidth-intensive activities on their computer or network, or try connecting with a different network.",
            isOSThrottlingCpu:
              "The operating system is throttling CPU to manage heat or conserve battery power, which could lead to degraded audio or video quality and/or a general sense that Slack is slow or unresponsive. This might manifest as video freezing frequently, audio cutting out frequently, or audio-video sync issues. In more extreme cases, it can even trigger disconnections from the Chime media server. To mitigate this, ensure the user's device is well-ventilated, that they avoid running unnecessary applications during the call, and, if they are on a laptop, they should connect it to a power source. Adjusting power settings to prefer maximum performance (even when battery is being used) can also help. For detailed steps, please refer to your device's power management settings.",
          },
          b = {
            ...{
              isNetworkQualityPoor:
                "The user's network quality is poor, which can cause delays or degraded audio or video, drops in connectivity, and audio/video desynchronization. Guide them through improving network stability, for instance, moving closer to their Wi-Fi router, switching to a wired connection if possible, limiting other bandwidth-intensive activities, or trying to connect with a different network.",
              isCpuCompetitionPoor:
                "The user\u2019s device is experiencing high CPU usage, causing audio or video delays, connectivity drops, or desynchronization. Suggest they close unnecessary applications, tabs, limit other CPU-intensive activities, ensure their computer has adequate airflow around it, and check if their hardware meets the recommended specifications.",
            },
            ...{
              isDisconnected:
                "The user is disconnected from the Huddle and can't send or receive audio or video. This might be due to network instability, incorrect configurations, hardware issues, or connectivity problems. Guide them through checking their network connection, suggest they limit other bandwidth-intensive activities, try connecting with a different network, move closer to their router, and suggest restarting the call.",
              isMicrophoneBlocked:
                "Slack can't access the user's microphone, possibly due to permission or settings issues. Verify that Slack has been granted permission to use the microphone, and ensure no other application is using it. They can check this by going to System Preferences (on macOS) or Sound settings (on Windows) and ensuring that Slack is checked.",
              isMicrophoneNotSendingAudio:
                "The user's microphone is connected, but isn't sending any audio, possibly due to another application using it, being muted, or system-level settings. Suggest they unplug and replug their device, restart Slack, limit other CPU-intensive activities, ensure their computer has adequate airflow around it, close unnecessary applications or tabs, and check for conflicting settings.",
              isCameraBlocked:
                "Slack can't access the user's camera, likely due to settings or permissions issues. Verify that Slack has permission to use their camera, and ensure no other application is using it. They can check this by going to System Preferences (on macOS) or Camera Privacy Settings (on Windows) and ensuring that Slack is checked.",
            },
            ...D,
          },
          K = {
            isNetworkQualityPoor: "networkQualityScoreReasons",
            isCpuCompetitionPoor: "cpuCompetitionScoreReasons",
          };
        class x {
          constructor({ callLogger: te, logger: _e, dispatch: Ie }) {
            (this.isDev = (0, n.Cu)()),
              (this.isJsPath = (0, n.b3)()),
              (this.loggedHuddleConfigInfo = !1),
              (this.lastProcessedTagsTs = null),
              (this.lastProcessedStats = null),
              (this.lastUnstableMetricsUpdateTs = 0),
              (this.lastLoggedTagsTs = Date.now()),
              (this.logHuddleConfigInfo = (Ne) => {
                if (this.loggedHuddleConfigInfo || !this.lastProcessedTagsTs)
                  return;
                const {
                  isIA4Prod: We,
                  isUnifiedGrid: $e,
                  visibleSidebarItemCount: mt,
                  networkType: Xt,
                  networkProtocol: _n,
                  networkRelayProtocol: mn,
                  isHardwareAccelerationEnabled: Fn,
                  batteryIsUsing: Kn,
                } = Ne;
                this.callLogger.info(
                  `Initial Huddle Config: Network Type=${Xt}; Network Protocol=${_n}; Network Relay Protocol=${mn}; IA4=${We}; Unified Grid=${$e}; Hardware Acceleration=${
                    Fn ?? "unknown (browser)"
                  }; Using Battery Power=${Kn}; Sidebar Size=${mt};`
                ),
                  (this.loggedHuddleConfigInfo = !0);
              }),
              (this.logWarningAndAlertUpdates = (Ne, We) => {
                Object.entries(Ne).forEach(($e) => {
                  let [mt, Xt] = $e;
                  if (Xt && this.isRelevantWarning(mt, Ne) && b[mt]) {
                    let _n;
                    if (mt in K) {
                      const Fn = K[mt];
                      Fn && We != null && We[Fn] && (_n = We[Fn]);
                    }
                    this.logger.warn(
                      `\u{1F6A8} WARNING! ${b[mt]}${
                        _n ? ` reasons: (${_n})` : ""
                      }`
                    );
                  }
                });
              }),
              (this.isRelevantWarning = (Ne, We) =>
                Ne === "isNetworkQualityPoor" || Ne === "isCpuCompetitionPoor"
                  ? "isAudioQualityPoor" in We && !!We.isAudioQualityPoor
                  : !0),
              (this.logTags = (Ne) => {
                const We = Date.now();
                this.isJsPath || this.isDev
                  ? this.logger.info(
                      `Recorded ${m.Sq}:${m.Kp} event span tags`,
                      Ne
                    )
                  : We - this.lastLoggedTagsTs > 10 * 1e3 &&
                    (this.logger.debug(
                      `Recorded ${m.Sq}:${m.Kp} event span tags`,
                      Ne
                    ),
                    (this.lastLoggedTagsTs = We));
              }),
              (this.getStatsDiff = (Ne) => {
                const We = this.lastProcessedStats;
                return (0, g.A)(Ne, ($e, mt) => {
                  var Xt, _n;
                  return {
                    stable: We
                      ? !(0, I.A)(
                          (Xt = We[mt]) === null || Xt === void 0
                            ? void 0
                            : Xt.stable,
                          $e == null ? void 0 : $e.stable
                        )
                      : null,
                    unstable: We
                      ? !(0, I.A)(
                          (_n = We[mt]) === null || _n === void 0
                            ? void 0
                            : _n.unstable,
                          $e == null ? void 0 : $e.unstable
                        )
                      : null,
                  };
                });
              }),
              (this.maybeUpdateTroubleshootingPanel = (Ne) => {
                var We, $e, mt, Xt, _n, mn, Fn, Kn, dt;
                const Y = Date.now(),
                  se = (0, y.p)(Ne),
                  he = this.getStatsDiff(se);
                if (
                  ((this.lastProcessedStats = se),
                  ((!((We = he.alerts) === null || We === void 0) &&
                    We.stable) ||
                    (($e = he.alerts) === null || $e === void 0
                      ? void 0
                      : $e.stable) === null) &&
                    se.alerts.stable &&
                    (this.dispatch((0, f._6)(se.alerts.stable)),
                    he.alerts.stable &&
                      this.logWarningAndAlertUpdates(se.alerts.stable)),
                  ((!((mt = he.metrics) === null || mt === void 0) &&
                    mt.stable) ||
                    ((Xt = he.metrics) === null || Xt === void 0
                      ? void 0
                      : Xt.stable) === null) &&
                    se.metrics.stable &&
                    this.dispatch((0, f.qO)(se.metrics.stable)),
                  ((!((_n = he.warnings) === null || _n === void 0) &&
                    _n.stable) ||
                    ((mn = he.warnings) === null || mn === void 0
                      ? void 0
                      : mn.stable) === null) &&
                    se.warnings.stable &&
                    (this.dispatch((0, f.it)(se.warnings.stable)),
                    this.logWarningAndAlertUpdates(se.warnings.stable)),
                  !((Fn = se.alerts) === null || Fn === void 0) && Fn.unstable)
                ) {
                  const Le = this.alertUpdater.getAlertUpdates({
                    alerts: se.alerts.unstable,
                  });
                  Le &&
                    (this.dispatch((0, f.Li)(Le)),
                    this.logWarningAndAlertUpdates(Le, Ne));
                }
                se.metrics.unstable &&
                  se.warnings.unstable &&
                  (!this.lastUnstableMetricsUpdateTs ||
                    (Y - this.lastUnstableMetricsUpdateTs > 1e4 &&
                      ((!((Kn = he.warnings) === null || Kn === void 0) &&
                        Kn.unstable) ||
                        (!((dt = he.metrics) === null || dt === void 0) &&
                          dt.unstable)))) &&
                  (this.dispatch(
                    (0, f.bW)({
                      metrics: se.metrics.unstable,
                      warnings: se.warnings.unstable,
                    })
                  ),
                  (this.lastUnstableMetricsUpdateTs = Y));
              }),
              (this.processTags = (Ne) => {
                this.maybeUpdateTroubleshootingPanel(Ne),
                  this.logHuddleConfigInfo(Ne),
                  this.logTags(Ne),
                  (this.lastProcessedTagsTs = Date.now());
              }),
              (this.callLogger = te),
              (this.logger = _e),
              (this.dispatch = Ie),
              (this.alertUpdater = new O(_e)),
              this.callLogger.info("huddle perf observer initialized");
          }
        }
        _(x, "HuddlePerfObserver");
        const B = null,
          U = x;
        var R = e(2825968873),
          G = e(5238395322),
          H = e(2208015175),
          F = e(9137897911),
          V = e(9113979368),
          X = e(8872403767),
          q = e(6313685253),
          oe = e(1687672245),
          z = e(6696292586);
        const Ae = _((At) => {
            if ((0, V.A)(At)) return;
            const te = (0, q.A)(
              At,
              (_e, Ie) => (0, oe.A)(_e, Ie, (Ne, We) => (Ne || 0) + We),
              {}
            );
            return (0, g.A)(te, (_e) => _e / At.length);
          }, "calculateIncomingVideoStatsAverages"),
          ae = _((At) => {
            if (typeof At == "string" || typeof At == "boolean") return At;
            if (!isNaN(At) && !(typeof At > "u" || At === null))
              return Math.round(At);
          }, "getScrubbedMetricValue"),
          de = _((At) => {
            let { clientMetricReport: te, direction: _e } = At;
            const Ie = Object.keys(te.streamMetricReports);
            let Ne;
            return (
              Ie.forEach((We) => {
                const $e = Number(We),
                  mt = te.streamMetricReports[$e];
                mt.direction === _e && mt.mediaType === u.zu.AUDIO && (Ne = $e);
              }),
              Ne
            );
          }, "getAudioSsrcId"),
          ve = _((At, te, _e, Ie, Ne) => {
            const We = At == null ? void 0 : At.getMetricMap(te, _e)[Ie];
            if (We != null && We.transform) return We.transform(Ie, Ne);
          }, "getNonObservedMetric"),
          Se = _((At, te) => {
            const _e = te ? At.replace(te, "") : At;
            return _e.charAt(0).toUpperCase() + _e.slice(1);
          }, "removeSubstringAndCapitalize"),
          Ee = _(function (At) {
            let te =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : 50,
              _e =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : 0;
            if (!(0, z.A)(te) || !(0, z.A)(At)) return 0;
            const Ie = isNaN(_e) ? 0 : _e;
            if (At === te || At > te) return 0;
            const We = ((te - At) / te) * 100 - Ie;
            return Math.round(We);
          }, "calculateNonNetworkPacketLoss");
        var be = e(5057176955),
          Ce;
        (function (At) {
          (At[(At.UPSTREAM = 0)] = "UPSTREAM"),
            (At[(At.DOWNSTREAM = 1)] = "DOWNSTREAM");
        })(Ce || (Ce = {}));
        var Z;
        (function (At) {
          (At[(At.AUDIO = 0)] = "AUDIO"), (At[(At.VIDEO = 1)] = "VIDEO");
        })(Z || (Z = {}));
        let $, N;
        const L = _(function (At, te, _e) {
            let Ie =
              arguments.length > 3 && arguments[3] !== void 0
                ? arguments[3]
                : !1;
            if (!At || !te) return;
            const Ne = (te.timestamp - At.timestamp) / 1e3,
              We = te[_e] - At[_e];
            return Ie ? We / Ne : We;
          }, "getNextStat"),
          w = _((At) => {
            let { clientMetricReport: te, selfAttendeeId: _e } = At;
            const Ie = te.getObservableVideoMetrics();
            if (!Ie || !_e) return;
            let Ne = 0;
            const We = {},
              $e = [];
            return (
              (0, H.A)(Ie, (mt, Xt) => {
                var _n;
                const mn = Number(
                  (_n = Object.keys(mt)) === null || _n === void 0
                    ? void 0
                    : _n[0]
                );
                if (!mn) return;
                const Fn = mt[mn];
                if (Xt.endsWith("#content")) {
                  var Kn, dt;
                  (Ne += 1),
                    (0, H.A)(Fn, (ht, et) => {
                      We[
                        (0, F.A)(
                          `screenshare_${(0, v._3)(et)}${
                            Ne > 1 ? `${Ne}_` : ""
                          }`
                        )
                      ] = ae(ht);
                    }),
                    Object.assign(We, {
                      screenshareVideoDownstreamDecoderImplementation:
                        (Kn = te.streamMetricReports[mn]) === null ||
                        Kn === void 0 ||
                        (dt = Kn.currentStringMetrics) === null ||
                        dt === void 0
                          ? void 0
                          : dt.decoderImplementation,
                      screenshareVideoDownstreamFramesReceivedPerSecond:
                        te.countPerSecond("framesReceived", mn),
                      screenshareVideoDownstreamFramesDroppedPerSecond: ve(
                        te,
                        Z.VIDEO,
                        Ce.DOWNSTREAM,
                        "framesDropped",
                        mn
                      ),
                      screenshareVideoDownstreamFreezeCount: ve(
                        te,
                        Z.VIDEO,
                        Ce.DOWNSTREAM,
                        "freezeCount",
                        mn
                      ),
                      screenshareVideoDownstreamTotalDecodeTime: ve(
                        te,
                        Z.VIDEO,
                        Ce.DOWNSTREAM,
                        "totalDecodeTime",
                        mn
                      ),
                      screenshareVideoDownstreamTotalFreezesDuration: ve(
                        te,
                        Z.VIDEO,
                        Ce.DOWNSTREAM,
                        "totalFreezesDuration",
                        mn
                      ),
                    });
                  return;
                }
                if (_e === Xt) {
                  if (Fn.videoUpstreamBitrate !== 0) {
                    var Y, se;
                    (0, H.A)(Fn, (ht, et) => {
                      We[`self${Se(et, "Upstream")}`] = ae(ht);
                    }),
                      Object.assign(We, {
                        selfVideoHardwareEncoder: ve(
                          te,
                          Z.VIDEO,
                          Ce.UPSTREAM,
                          "encoderImplementation",
                          mn
                        ),
                        selfVideoEncoderImplementation:
                          (Y = te.streamMetricReports[mn]) === null ||
                          Y === void 0 ||
                          (se = Y.currentStringMetrics) === null ||
                          se === void 0
                            ? void 0
                            : se.encoderImplementation,
                        selfVideoTotalEncodeTime: ve(
                          te,
                          Z.VIDEO,
                          Ce.UPSTREAM,
                          "totalEncodeTime",
                          mn
                        ),
                      });
                  }
                } else {
                  var he, Le;
                  const ht = ve(
                    te,
                    Z.VIDEO,
                    Ce.DOWNSTREAM,
                    "totalDecodeTime",
                    mn
                  );
                  if (ht) {
                    var qe;
                    We.videoDownstreamTotalDecodeTime =
                      ((qe = We.videoDownstreamTotalDecodeTime) !== null &&
                      qe !== void 0
                        ? qe
                        : 0) + ht;
                  }
                  Object.assign(We, {
                    videoDownstreamDecoderImplementation:
                      (he = te.streamMetricReports[mn]) === null ||
                      he === void 0 ||
                      (Le = he.currentStringMetrics) === null ||
                      Le === void 0
                        ? void 0
                        : Le.decoderImplementation,
                  }),
                    $e.push({
                      ...Fn,
                      videoDownstreamFramesReceivedPerSecond: te.countPerSecond(
                        "framesReceived",
                        mn
                      ),
                      videoDownstreamFramesDroppedPerSecond: ve(
                        te,
                        Z.VIDEO,
                        Ce.DOWNSTREAM,
                        "framesDropped",
                        mn
                      ),
                    });
                }
              }),
              (0, V.A)($e) || Object.assign(We, Ae($e)),
              We
            );
          }, "getVideoMetricTags"),
          k = [
            "nackCountReceivedPerSecond",
            "currentRoundTripTimeMs",
            "availableOutgoingBitrate",
            "availableIncomingBitrate",
          ],
          J = _((At) => {
            let { clientMetricReport: te } = At;
            const {
                audioDecoderLoss: _e,
                audioPacketLossPercent: Ie,
                audioPacketsReceived: Ne,
                audioPacketsReceivedFractionLoss: We,
                audioPacketsSent: $e,
                audioSpeakerDelayMs: mt,
                audioDownstreamJitterMs: Xt,
                videoUpstreamBitrate: _n,
                videoPacketSentPerSecond: mn,
                currentRoundTripTimeMs: Fn,
                availableIncomingBitrate: Kn,
                availableOutgoingBitrate: dt,
                nackCountReceivedPerSecond: Y,
                audioUpstreamRoundTripTimeMs: se,
                audioUpstreamJitterMs: he,
              } = te.getObservableMetrics(),
              Le = 50,
              qe = Ee(Ne, Le, We),
              ht = Ee($e, Le, Ie),
              et = {
                audioDownstreamDecoderLoss: _e,
                audioUpstreamPacketLossPercent: Ie,
                audioDownstreamPacketsReceived: Ne,
                audioDownstreamPacketLossPercent: We,
                audioDownstreamJitterMs: Xt,
                audioUpstreamPacketsSent: $e,
                audioDownstreamNonNetworkPacketLossPercent: qe,
                audioUpstreamNonNetworkPacketLossPercent: ht,
                audioDownstreamJitterBufferDelay: mt,
                selfVideoBitrate: _n,
                selfVideoPacketsSentPerSecond: mn,
                audioUpstreamRoundTripTimeMs: se,
                audioUpstreamJitterMs: he,
                networkCurrentRoundTripTimeMs: Fn,
                networkAvailableIncomingBitrate: Kn,
                networkAvailableOutgoingBitrate: dt,
                networkNackCountReceivedPerSecond: Y,
              },
              Ut = (0, X.A)(et, (ue, we) =>
                k.indexOf(we) > -1 ? (0, F.A)(`network_${we}`) : we
              ),
              En = {
                networkSocketPacketsDiscardedOnSend:
                  te.globalMetricReport.currentMetrics.packetsDiscardedOnSend,
              },
              wn = de({
                clientMetricReport: te,
                direction: Ce.DOWNSTREAM,
              });
            let $n;
            if (wn) {
              const ue = ve(te, Z.AUDIO, Ce.DOWNSTREAM, "concealedSamples", wn);
              $n = {
                audioDownstreamTotalSamplesReceived: ve(
                  te,
                  Z.AUDIO,
                  Ce.DOWNSTREAM,
                  "totalSamplesReceived",
                  wn
                ),
                audioDownstreamConcealedSamples: ue,
              };
            }
            return (0, g.A)(
              {
                ...Ut,
                ...En,
                ...$n,
              },
              (ue) => ae(ue)
            );
          }, "getAudioMetricTags"),
          ee = _((At) => {
            const te = {},
              _e = [];
            let Ie;
            if (!At) return ($ = void 0), te;
            At.forEach((We) => {
              We.type === "local-candidate" && _e.push(We),
                We.type === "media-source" &&
                  We.kind === "audio" &&
                  ((te.audioUpstreamTotalSamplesDuration =
                    We.totalSamplesDuration),
                  (te.audioUpstreamAudioLevel = We.audioLevel),
                  (te.audioUpstreamTotalAudioEnergy = We.totalAudioEnergy)),
                We.type === "candidate-pair" &&
                  We.state === "succeeded" &&
                  We.nominated &&
                  We.localCandidateId &&
                  ((Ie = We.localCandidateId),
                  (te.networkBytesSent = We.bytesSent),
                  (te.networkBytesReceived = We.bytesReceived),
                  (te.networkBytesDiscardedOnSend = We.bytesDiscardedOnSend)),
                We.type === "inbound-rtp" &&
                  We.kind === "audio" &&
                  (te.audioDownstreamLevel = We.audioLevel),
                We.type === "outbound-rtp" &&
                  We.kind === "video" &&
                  ((te.selfVideoQualityLimitationDurations =
                    We.qualityLimitationDurations &&
                    (0, be.Zf)(We.qualityLimitationDurations)),
                  (te.selfVideoOutboundFramesPerSecond = We.framesPerSecond),
                  (te.selfVideoPacketSendDelay = L(
                    $,
                    We,
                    "totalPacketSendDelay"
                  )),
                  ($ = We)),
                We.type === "media-source" &&
                  We.kind === "video" &&
                  (te.selfVideoSourceFramesPerSecond = We.framesPerSecond);
            });
            const Ne = _e.find((We) => We.id === Ie);
            if (Ne) {
              const { networkType: We, protocol: $e, relayProtocol: mt } = Ne;
              (te.networkType = We),
                (te.networkProtocol = $e),
                (te.networkRelayProtocol = mt);
            }
            return te;
          }, "getRtcStatsTags"),
          ne = _((At) => {
            if (!At) {
              N = void 0;
              return;
            }
            const te = {};
            return (
              At.forEach((_e) => {
                if (_e.type === "remote-inbound-rtp" && _e.kind === "video") {
                  const {
                    fractionLost: Ie,
                    jitter: Ne,
                    roundTripTime: We,
                  } = _e;
                  Object.assign(te, {
                    screenshareUpstreamJitter: Ne * 1e3,
                    screenshareUpstreamPacketLossPercent: Ie * 100,
                    screenshareUpstreamRoundTripTime: We * 1e3,
                  });
                }
                if (_e.type === "outbound-rtp" && _e.kind === "video") {
                  const {
                    frameHeight: Ie,
                    frameWidth: Ne,
                    framesPerSecond: We,
                    targetBitrate: $e,
                    encoderImplementation: mt,
                    scalabilityMode: Xt,
                    powerEfficientEncoder: _n,
                  } = _e;
                  if (
                    (Object.assign(te, {
                      screenshareUpstreamTargetBitrate: $e,
                      screenshareUpstreamFrameWidth: Ne,
                      screenshareUpstreamFrameHeight: Ie,
                      screenshareUpstreamFramesPerSecond: We,
                      screenshareUpstreamEncoderImplementation: mt,
                      screenshareUpstreamPowerEfficientEncoder: _n,
                      screenshareUpstreamScalabilityMode: Xt,
                    }),
                    !N)
                  ) {
                    N = _e;
                    return;
                  }
                  const mn = L(N, _e, "totalEncodeTime", !0),
                    Fn = mn && mn * 1e3;
                  Object.assign(te, {
                    screenshareUpstreamPacketsSent: L(N, _e, "packetsSent"),
                    screenshareUpstreamPacketSendDelay: L(
                      N,
                      _e,
                      "totalPacketSendDelay"
                    ),
                    screenshareUpstreamKeyFramesEncoded: L(
                      N,
                      _e,
                      "keyFramesEncoded"
                    ),
                    screenshareUpstreamBitrate: L(N, _e, "bytesSent", !0),
                    screenshareUpstreamTotalEncodeTime: Fn,
                  }),
                    (N = _e);
                }
              }),
              (0, g.A)(te, (_e) => ae(_e))
            );
          }, "getScreenshareRtcStatsTags"),
          pe = _((At) => {
            let { clientMetricReport: te, selfAttendeeId: _e } = At;
            const Ie = w({
                clientMetricReport: te,
                selfAttendeeId: _e,
              }),
              Ne = J({
                clientMetricReport: te,
              });
            return {
              ...Ie,
              ...Ne,
            };
          }, "getClientMetricReportTags"),
          Me = {
            getVideoMetricTags: w,
            getAudioMetricTags: J,
            getClientMetricReportTags: pe,
            getScreenshareRtcStatsTags: ne,
            getRtcStatsTags: ee,
          };
        var ke = e(4404059078),
          ge = e(6890312250),
          fe = e(2205899741);
        const re = 0,
          le = 100;
        function Re(At) {
          return At.endsWith(",") ? At.slice(0, -1) : At;
        }
        _(Re, "trimComma");
        const ye = _(() => {
            let At = 100,
              te = "";
            return {
              deductFromScoreForReason: (_e, Ie) => {
                _e && ((At -= _e), (te += `${Ie},`));
              },
              getScore: () => (0, ke.A)(At, re, le),
              getReasons: () => Re(te),
            };
          }, "trackScoreAndReasons"),
          Te = _((At) => {
            const {
                deductFromScoreForReason: te,
                getScore: _e,
                getReasons: Ie,
              } = ye(),
              {
                screenshareUpstreamBitrate: Ne,
                screenshareUpstreamPacketLossPercent: We,
                screenshareUpstreamJitter: $e,
                screenshareUpstreamRoundTripTime: mt,
                screenshareUpstreamFramesPerSecond: Xt,
                screenshareUpstreamPacketSendDelay: _n,
                screenshareUpstreamQualityLimitationReason: mn,
              } = At;
            if (Ne)
              return (
                te((0, fe.Tg)(We), "screenshareUpstreamPacketLossPercent"),
                te((0, fe._N)($e), "screenshareUpstreamJitter"),
                te((0, fe.oj)(mt), "screenshareUpstreamRoundTripTime"),
                te((0, fe.RI)(_n), "screenshareUpstreamPacketSendDelay"),
                te((0, fe.qf)(m.w4 - Xt), "screenshareUpstreamFramesPerSecond"),
                te(
                  (0, fe.Fq)(mn),
                  "screenshareUpstreamQualityLimitationReason"
                ),
                {
                  screenshareUpstreamQualityScore: _e(),
                  screenshareUpstreamQualityScoreReasons: Ie(),
                }
              );
          }, "getScreenshareUpstreamQualityScore"),
          De = _((At) => {
            const {
              selfVideoPacketLossPercent: te,
              selfVideoFrameHeight: _e,
              selfVideoFrameWidth: Ie,
              selfVideoRoundTripTime: Ne,
              selfVideoJitterMs: We,
              selfVideoFramesEncodedPerSecond: $e,
              isSelfVideoEnabled: mt,
            } = At;
            if (!mt || !Ie) return;
            const {
              deductFromScoreForReason: Xt,
              getScore: _n,
              getReasons: mn,
            } = ye();
            Xt((0, fe.Tg)(te), "selfVideoPacketLossPercent");
            const Fn = _e * Ie;
            return (
              Xt(
                (0, fe.e7)(100 - (Fn / m.An) * 100),
                "selfVideoFrameHeight,selfVideoFrameWidth"
              ),
              Xt((0, fe._N)(We), "selfVideoJitterMs"),
              Xt((0, fe.oj)(Ne), "selfVideoRoundTripTime"),
              Xt((0, fe.qf)(m.tz - $e), "selfVideoFramesEncodedPerSecond"),
              {
                selfVideoQualityScore: _n(),
                selfVideoQualityScoreReasons: mn(),
              }
            );
          }, "getSelfVideoQualityScore"),
          Ue = _((At) => {
            const {
              videoDownstreamPacketLossPercent: te,
              videoDownstreamFramesDecodedPerSecond: _e,
              videoDownstreamFrameHeight: Ie,
              videoDownstreamFrameWidth: Ne,
              videoDownstreamJitterMs: We,
              videoDownstreamDelayMs: $e,
            } = At;
            if (!Ne) return;
            const {
              deductFromScoreForReason: mt,
              getScore: Xt,
              getReasons: _n,
            } = ye();
            mt((0, fe.Tg)(te), "videoDownstreamPacketLossPercent");
            const mn = Ie * Ne;
            return (
              mt(
                (0, fe.e7)(m.An / mn),
                "videoDownstreamFrameHeight,videoDownstreamFrameWidth"
              ),
              mt((0, fe.q4)($e), "videoDownstreamDelayMs"),
              mt((0, fe._N)(We), "videoDownstreamJitterMs"),
              mt(
                (0, fe.qf)(m.tz - _e),
                "videoDownstreamFramesDecodedPerSecond"
              ),
              {
                videoDownstreamQualityScore: Xt(),
                videoDownstreamQualityScoreReasons: _n(),
              }
            );
          }, "getVideoDownstreamQualityScore"),
          Ke = _(function (At) {
            let te =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : !1;
            const {
              deductFromScoreForReason: _e,
              getScore: Ie,
              getReasons: Ne,
            } = ye();
            if (te) {
              const {
                screenshareVideoDownstreamPacketLossPercent2: _n,
                screenshareVideoDownstreamJitterMs2: mn,
                screenshareVideoDownstreamDelayMs2: Fn,
                screenshareVideoDownstreamFrameHeight2: Kn,
              } = At;
              return Kn
                ? (_e(
                    (0, fe.Tg)(_n),
                    "screenshareVideoDownstreamPacketLossPercent2"
                  ),
                  _e((0, fe._N)(mn), "screenshareVideoDownstreamJitterMs2"),
                  _e((0, fe.q4)(Fn), "screenshareVideoDownstreamDelayMs2"),
                  {
                    screenshareVideoDownstreamQualityScore2: Ie(),
                    screenshareVideoDownstreamQualityScoreReasons2: Ne(),
                  })
                : void 0;
            }
            const {
              screenshareVideoDownstreamPacketLossPercent: We,
              screenshareVideoDownstreamJitterMs: $e,
              screenshareVideoDownstreamDelayMs: mt,
              screenshareVideoDownstreamFrameHeight: Xt,
            } = At;
            if (Xt)
              return (
                _e(
                  (0, fe.Tg)(We),
                  "screenshareVideoDownstreamPacketLossPercent"
                ),
                _e((0, fe._N)($e), "screenshareVideoDownstreamJitterMs"),
                _e((0, fe.q4)(mt), "screenshareVideoDownstreamDelayMs"),
                {
                  screenshareVideoDownstreamQualityScore: Ie(),
                  screenshareVideoDownstreamQualityScoreReasons: Ne(),
                }
              );
          }, "getScreenshareDownstreamQualityScore"),
          Ze = _((At) => {
            const {
              audioUpstreamPacketLossPercent: te,
              audioUpstreamRoundTripTimeMs: _e,
              audioUpstreamJitterMs: Ie,
              audioUpstreamNonNetworkPacketLossPercent: Ne,
            } = At;
            if (!_e) return;
            const {
              deductFromScoreForReason: We,
              getScore: $e,
              getReasons: mt,
            } = ye();
            return (
              We((0, fe.Ye)(te), "audioUpstreamPacketLossPercent"),
              We((0, fe.oj)(_e), "audioUpstreamRoundTripTimeMs"),
              We((0, fe._N)(Ie), "audioUpstreamJitterMs"),
              We((0, fe.fB)(Ne), "audioUpstreamNonNetworkPacketLossPercent"),
              {
                audioUpstreamQualityScore: $e(),
                audioUpstreamQualityScoreReasons: mt(),
              }
            );
          }, "getAudioUpstreamQualityScore"),
          Q = _((At) => {
            const te = {};
            return (
              At.screenshareVideoDownstreamFrameHeight2 &&
                Object.assign(te, Ke(At, !0)),
              {
                ...Ke(At),
                ...te,
              }
            );
          }, "getScreenshareDownstreamQualityScores"),
          ie = _((At) => {
            const {
                cpuUse: te,
                gpuUse: _e,
                cpuUseRelative: Ie,
                longTasksPercentage: Ne,
              } = At,
              {
                deductFromScoreForReason: We,
                getScore: $e,
                getReasons: mt,
              } = ye();
            return (
              We((0, fe.sI)(Ne), "longTasksPercentage"),
              We((0, fe.$c)(te), "cpuUse"),
              We((0, fe.KG)(_e), "gpuUse"),
              We((0, fe.h7)(Ie), "cpuUseRelative"),
              {
                cpuCompetitionScore: $e(),
                cpuCompetitionScoreReasons: mt(),
              }
            );
          }, "getCpuCompetitionScoreTags"),
          Ve = _(function () {
            for (
              var At = arguments.length, te = new Array(At), _e = 0;
              _e < At;
              _e++
            )
              te[_e] = arguments[_e];
            const Ie = te.filter(z.A);
            return Ie.length ? Math.round((0, ge.A)(Ie)) : 0;
          }, "getMetricAverage"),
          xe = _((At) => {
            const {
                networkCurrentRoundTripTimeMs: te,
                networkNackCountReceivedPerSecond: _e,
                networkSocketPacketsDiscardedOnSend: Ie,
                networkProtocol: Ne,
                networkRelayProtocol: We,
                audioDownstreamJitterMs: $e,
                audioDownstreamPacketLossPercent: mt,
                audioUpstreamPacketLossPercent: Xt,
                audioUpstreamJitterMs: _n,
                videoDownstreamPacketLossPercent: mn,
                screenshareDownstreamPacketLossPercent: Fn,
                screenshareUpstreamPacketLossPercent: Kn,
                selfVideoPacketLossPercent: dt,
              } = At,
              {
                deductFromScoreForReason: Y,
                getScore: se,
                getReasons: he,
              } = ye();
            Y((0, fe.ik)(Ne), "networkProtocol"),
              Y((0, fe.ik)(We), "networkRelayProtocol"),
              Y((0, fe.No)(Ie), "networkSocketPacketsDiscardedOnSend"),
              Y((0, fe.oj)(te), "networkCurrentRoundTripTimeMs");
            const Le = Ve($e, _n);
            Y((0, fe._N)(Le), "networkJitterMs"),
              Y((0, fe.Ap)(_e), "networkNackCountReceivedPerSecond");
            const qe = Ve(mt, mn, Fn, Xt, dt, Kn);
            return (
              Y((0, fe.kq)(qe), "networkPacketLossPercent"),
              {
                networkJitterMs: Le,
                networkPacketLossPercent: qe,
                networkQualityScore: se(),
                networkQualityScoreReasons: he(),
              }
            );
          }, "getNetworkQualityScoreTags"),
          je = _((At) => {
            const {
                audioDownstreamDecoderLoss: te,
                audioDownstreamJitterBufferDelay: _e,
                audioDownstreamPacketLossPercent: Ie,
              } = At,
              {
                deductFromScoreForReason: Ne,
                getScore: We,
                getReasons: $e,
              } = ye();
            return (
              Ne((0, fe.t5)(te), "audioDownstreamDecoderLoss"),
              Ne((0, fe.q4)(_e), "audioDownstreamJitterBufferDelay"),
              Ne((0, fe.Ye)(Ie), "audioDownstreamPacketLossPercent"),
              {
                audioDownstreamQualityScore: We(),
                audioDownstreamQualityScoreReasons: $e(),
              }
            );
          }, "getAudioDownstreamQualityTags"),
          He = _(
            (At) => ({
              ...je(At),
              ...xe(At),
              ...Ze(At),
              ...De(At),
              ...Q(At),
              ...Te(At),
              ...ie(At),
              ...Ue(At),
              qualityScoringVersion: m.Nb,
            }),
            "getQualityScoreTags"
          ),
          Oe = _((At, te) => {
            let { type: _e, update: Ie } = At;
            switch (_e) {
              case u.lx.BluetoothDevices:
              case u.lx.PreferredMediaRegion:
              case u.lx.CameraResolution:
              case u.lx.CallId:
              case u.lx.ScreenshareContentType:
                Object.assign(te.sharedTags, Ie);
                break;
              case u.lx.MemoryLeaks: {
                const Ne = te.sharedTags.memoryLeakCount;
                Object.assign(te.sharedTags, {
                  type: "shared",
                  tags: {
                    [`memoryLeaks-${Ie.name}`]: Ie.leakCount,
                    memoryLeakCount: Ne ? Ne + Ie.leakCount : Ie.leakCount,
                  },
                });
                break;
              }
              case u.lx.SelectedMediaRegion: {
                const { mediaRegionPreferred: Ne } = te.sharedTags,
                  We =
                    Ne && Ie.mediaRegionSelected
                      ? Ne === Ie.mediaRegionSelected
                      : !0;
                Object.assign(te.sharedTags, {
                  mediaRegionSelected: Ie.mediaRegionSelected,
                  mediaRegionMatchesPreference: We,
                });
                break;
              }
              case u.lx.VoiceFocusConfig:
                Object.assign(te.sharedTags, {
                  vfSimdSupported: Ie.model.simd,
                  vfModelVariant: Ie.model.variant,
                  vfSupported: Ie.supported,
                });
                break;
              case u.lx.NetworkDisconnect:
                Ie.peerId === "self" &&
                  Object.assign(te.transientTags, {
                    selfDisconnectCount:
                      (te.transientTags.selfDisconnectCount || 0) + 1,
                  });
                break;
              case u.lx.NoAudio: {
                const Ne =
                  Ie.direction === "send"
                    ? {
                        noAudioInput: Ie.noAudio,
                      }
                    : {
                        noAudioOutput: Ie.noAudio,
                      };
                Object.assign(te.sharedTags, Ne);
                break;
              }
              case u.lx.SetIsDebugApp:
                Object.assign(te.sharedTags, {
                  isDebugApp: !0,
                });
                break;
              default: {
                (0, R.tZ)("HUDDLES-PERF").error(
                  new Error(`Unexpected type: ${_e}`)
                );
                break;
              }
            }
          }, "updateState"),
          Ye = null;
        var at = e(6267571562);
        const _t = (0, s.Wo)({
            label: "COMPUTE-PRESSURE",
          }),
          pt = {
            nominal: 1,
            fair: 2,
            serious: 3,
            critical: 4,
          };
        class Qe {
          constructor() {
            (this.defaultSampleRate = 0.5),
              (this.pubSub = new at.G()),
              (this.isObserving = !1),
              (this.currentLevel = null);
            var te = this;
            (this.startObserving = (0, l.coroutine)(function* () {
              if (!te.isObserving) {
                try {
                  var Ie;
                  (te.isObserving = !0),
                    yield (Ie = te.pressureObserver) === null || Ie === void 0
                      ? void 0
                      : Ie.observe("cpu");
                } catch (Ne) {
                  (te.isObserving = !1),
                    _t.error(
                      "An error occurred while attempting to observe compute pressure",
                      Ne
                    );
                }
                _t.info("Observing compute pressure");
              }
            })),
              (this.getPressureLevelFromRecord = (Ie) =>
                Ie ? pt[Ie.state] : void 0),
              (this.pressureObserverCallback = (Ie) => {
                const Ne = Ie.pop();
                if (!Ne) return;
                const We = this.getPressureLevelFromRecord(Ne);
                We &&
                  ((this.currentLevel = We),
                  We === 1
                    ? _t.debug(
                        `Compute pressure updated to ${Ne.state} (${We} of 4)`
                      )
                    : _t.warn(
                        `Compute pressure updated to ${Ne.state} (${We} of 4)`
                      ),
                  this.pubSub.publish(We));
              });
            var _e = this;
            (this.subscribe = (function () {
              var Ie = (0, l.coroutine)(function* (Ne) {
                _e.pubSub.subscribe(Ne), yield _e.startObserving();
              });
              return function (Ne) {
                return Ie.apply(this, arguments);
              };
            })()),
              (this.unsubscribe = (Ie) => {
                if ((this.pubSub.unsubscribe(Ie), !this.pubSub.subscriberCount))
                  try {
                    var Ne;
                    (Ne = this.pressureObserver) === null ||
                      Ne === void 0 ||
                      Ne.disconnect(),
                      _t.debug("No longer observing compute pressure.");
                  } catch (We) {
                    _t.error(
                      "An error occurred attempted to disconnect from the compute pressure observer",
                      We
                    );
                  }
              }),
              (this.getCurrentLevel = () => {
                if (this.currentLevel) return this.currentLevel;
                let Ie;
                try {
                  var Ne;
                  Ie =
                    (Ne = this.pressureObserver) === null || Ne === void 0
                      ? void 0
                      : Ne.takeRecords();
                } catch ($e) {
                  _t.error(
                    "An error occurred attempting to get latest compute pressure reports",
                    $e
                  );
                }
                const We = Ie
                  ? this.getPressureLevelFromRecord(Ie.pop())
                  : void 0;
                return We && (this.currentLevel = We), We;
              }),
              _t.info(
                "Compute Pressure API is supported. Initializing pressure observer."
              );
            try {
              this.pressureObserver = new PressureObserver(
                this.pressureObserverCallback,
                {
                  sampleRate: this.defaultSampleRate,
                }
              );
            } catch (Ie) {
              _t.error(
                "An error occurred creating a new instance of the PressureObserver",
                Ie
              );
            }
            if (!this.pressureObserver) {
              _t.error(
                "Compute pressure observer not created, though PressureObserver API should be supported"
              );
              return;
            }
            this.startObserving();
          }
        }
        _(Qe, "ComputePressureObserver"),
          (Qe.isSupported = () => "PressureObserver" in globalThis);
        let ct;
        const Pt = _(() => {
            if (ct) return ct;
            if (!Qe.isSupported()) {
              _t.info("Compute Pressure API is not supported.");
              return;
            }
            try {
              ct = new Qe();
            } catch (At) {
              _t.error(
                "An error occurred while attempting to create compute pressure observer",
                At
              );
              return;
            }
            return ct;
          }, "getComputePressureObserver"),
          zt = null,
          an = null,
          Qt = Pt,
          tn = {
            longTasksPercentage: 0,
            longTasksPeakDuration: 0,
            longTasksCount: 0,
            longTasksTotalDuration: 0,
          };
        let Ht = _(
          class {
            initializeReport() {
              (this.report = {
                ...tn,
              }),
                (this.lastReportTime = performance.now());
            }
            isLongTaskTimingSupported() {
              return (
                typeof PerformanceObserver < "u" &&
                PerformanceObserver.supportedEntryTypes &&
                PerformanceObserver.supportedEntryTypes.includes("longtask")
              );
            }
            start() {
              this.observer ||
                !this.isSupported ||
                ((this.observer = new PerformanceObserver(
                  this.onReceiveLongTaskList
                )),
                this.observer.observe({
                  entryTypes: ["longtask"],
                }),
                this.observer.takeRecords());
            }
            stop() {
              this.observer &&
                (this.observer.disconnect(), (this.observer = null));
            }
            getReportSinceLastCall() {
              if (!this.observer || !this.isSupported) return;
              const _e = performance.now() - this.lastReportTime;
              this.report.longTasksCount > 0 &&
                (this.report.longTasksPercentage = Math.round(
                  (this.report.longTasksTotalDuration / _e) * 100
                ));
              const Ie = {
                ...this.report,
              };
              return this.initializeReport(), Ie;
            }
            constructor() {
              (this.report = {
                ...tn,
              }),
                (this.lastReportTime = performance.now()),
                (this.observer = null),
                (this.onReceiveLongTaskList = (te) => {
                  const _e = te.getEntries();
                  let Ie = 0,
                    Ne = 0;
                  _e.forEach((We) => {
                    const $e = We.duration;
                    (Ie += $e), $e > Ne && (Ne = $e);
                  }),
                    (this.report.longTasksTotalDuration += Ie),
                    (this.report.longTasksCount += _e.length),
                    Ne > this.report.longTasksPeakDuration &&
                      (this.report.longTasksPeakDuration = Ne);
                }),
                (this.isSupported = this.isLongTaskTimingSupported());
            }
          },
          "LongTaskObserver"
        );
        const Kt = null,
          qt = Ht;
        let Tn = 0;
        const Mt = {
            traceName: m.Sq,
          },
          Jt = "HUDDLES-PERF",
          dn = {
            troubleshootingEntryPoint: null,
            troubleshootingContactUsClicked: !1,
          };
        let rn = _(
          class {
            constructor() {
              var te;
              (this.callLogger = (0, R.tZ)(Jt)),
                (this.logger = (0, s.Wo)({
                  label: Jt,
                })),
                (this.sharedTags = Mt),
                (this.transientTags = {}),
                (this.renderTimings = []),
                (this.rtmProcessingTimings = []),
                (this.troubleshootingTags = {
                  ...dn,
                }),
                (this.lastAppMetricsRecordingTs = Date.now()),
                (this.currentTags = {}),
                (this.computePressure = null),
                (this.longTaskObserver = new qt()),
                (this.initSharedTags = () => {
                  (Tn += 1),
                    this.updateSharedTags({
                      huddlesCountSinceRefresh: Tn,
                    });
                }),
                (this.initComputePressureObserver = () => {
                  (this.computePressureObserver = Qt()),
                    this.computePressureObserver &&
                      this.computePressureObserver
                        .subscribe(this.updateComputePressure)
                        .then(() => {
                          var _e;
                          const Ie =
                            (_e = this.computePressureObserver) === null ||
                            _e === void 0
                              ? void 0
                              : _e.getCurrentLevel();
                          this.computePressure = Ie;
                        });
                }),
                (this.updateSharedTags = (_e) => {
                  this.sharedTags = {
                    ...this.sharedTags,
                    ..._e,
                  };
                }),
                (this.updateTransientTags = (_e) => {
                  this.transientTags = {
                    ...this.transientTags,
                    ..._e,
                  };
                }),
                (this.updateComputePressure = (_e) => {
                  const Ie = this.computePressure;
                  this.computePressure = _e;
                  let Ne;
                  switch (_e) {
                    case 1:
                      Ne =
                        "System workload is minimal, operating at lower clock speed to conserve power.";
                      break;
                    case 2:
                      Ne =
                        "System is performing well but under a fair amount of pressure. Still able to take on additional workload without issues.";
                      break;
                    case 3:
                      Ne =
                        "System is experiencing significant pressure but remains sustainable; close to operational limits.";
                      break;
                    case 4:
                      Ne =
                        "System is now about to reach its operational limits; continued pressure may lead to CPU throttling.";
                      break;
                    default:
                      Ne = "Unknown system workload condition.";
                  }
                  _e > 2
                    ? this.callLogger.warn(
                        `Compute pressure updated to level ${_e} of 4. This is a measure of the strain on the user's computer's processing capacity, which may or may not be caused by Slack or Huddles, but will likely impact performance. A score of ${_e} suggests that: ${Ne}. If this warning is frequent, suggest that the user close unused tabs or applications on their computer, ensure their computer is not in battery-saving mode, and/or give other general advice around reducing CPU use.`
                      )
                    : Ie &&
                      Ie > 2 &&
                      this.logger.debug(
                        `Compute pressure updated to level ${_e} of 4 from ${Ie}. ${Ne}`
                      );
                }),
                (this.updateState = (_e) => {
                  switch (_e.type) {
                    case u.lx.RenderTiming:
                      this.renderTimings.push(_e.update);
                      break;
                    case u.lx.RtmMetrics:
                      this.rtmProcessingTimings.push(_e.update);
                      break;
                    case u.lx.AppMetrics:
                      this.updateMetrics(_e.update);
                      break;
                    case u.lx.TroubleshootingEntryPoint:
                      this.troubleshootingTags.troubleshootingEntryPoint =
                        _e.update;
                      break;
                    case u.lx.TroubleshootingContactUsClicked:
                      this.troubleshootingTags.troubleshootingContactUsClicked =
                        !0;
                      break;
                    default:
                      Oe(_e, {
                        sharedTags: this.sharedTags,
                        transientTags: this.transientTags,
                      });
                  }
                }),
                (this.updateMetrics = (_e) => {
                  let {
                    huddleStateSnapshot: Ie,
                    clientMetricReport: Ne,
                    screenshareRtcStats: We,
                  } = _e;
                  const $e = Ne
                      ? pe({
                          clientMetricReport: Ne,
                          selfAttendeeId: Ne.selfAttendeeId,
                        })
                      : {},
                    mt = Ne ? ee(Ne.getRTCStatsReport()) : {},
                    Xt = ne(We),
                    _n = {
                      ...Ie,
                      ...$e,
                      ...Xt,
                      ...mt,
                      ...this.sharedTags,
                      ...this.transientTags,
                      ...this.getRtmMetricTags(),
                      ...this.getRenderTimingTags(),
                      ...this.getTimestampTags(),
                      ...this.getComputePressureTags(),
                      ...this.getLongTaskTags(),
                      ...this.getTroubleshootingTags(),
                    },
                    mn = He(_n);
                  (this.currentTags = {
                    ..._n,
                    ...mn,
                  }),
                    this.clearTransientTags(),
                    (this.lastAppMetricsRecordingTs = Date.now());
                }),
                (this.getCurrentTags = () => ({
                  ...this.currentTags,
                })),
                (this.clearTransientTags = () => {
                  this.transientTags = {};
                }),
                (this.getLongTaskTags = () => {
                  var _e;
                  return (_e = this.longTaskObserver) === null || _e === void 0
                    ? void 0
                    : _e.getReportSinceLastCall();
                }),
                (this.getTimestampTags = () => {
                  const { huddleStartTimestamp: _e } = this.currentTags;
                  return _e
                    ? {
                        secondsSinceJoining: Math.floor(
                          (Date.now() - _e) / 1e3
                        ),
                      }
                    : {};
                }),
                (this.getRtmMetricTags = () => {
                  const _e = this.rtmProcessingTimings.length;
                  return (
                    (this.rtmProcessingTimings = []),
                    {
                      rtmMessagesProcessed: _e,
                    }
                  );
                }),
                (this.getTroubleshootingTags = () => {
                  const _e = {
                    ...this.troubleshootingTags,
                  };
                  return (
                    (this.troubleshootingTags = {
                      ...dn,
                    }),
                    _e
                  );
                }),
                (this.getComputePressureTags = () => ({
                  computePressure: this.computePressure,
                })),
                (this.getRenderTimingTags = () => {
                  const _e = Date.now() - this.lastAppMetricsRecordingTs,
                    Ie = (0, G.A)(this.renderTimings),
                    Ne = this.renderTimings.length;
                  return !Ie || !_e
                    ? {
                        uiRenderTimePercent: 0,
                        uiRenderTimeMs: 0,
                      }
                    : ((this.renderTimings = []),
                      {
                        uiRenderTimePercent: Number(
                          ((Ie / _e) * 100).toFixed(1)
                        ),
                        uiRenderCount: Ne,
                      });
                }),
                (this.cleanup = () => {
                  var _e, Ie;
                  (_e = this.computePressureObserver) === null ||
                    _e === void 0 ||
                    _e.unsubscribe(this.updateComputePressure),
                    delete this.computePressureObserver,
                    (Ie = this.longTaskObserver) === null ||
                      Ie === void 0 ||
                      Ie.stop(),
                    delete this.longTaskObserver;
                }),
                this.initSharedTags(),
                this.initComputePressureObserver(),
                (te = this.longTaskObserver) === null ||
                  te === void 0 ||
                  te.start();
            }
          },
          "HuddlePerfStateInternal"
        );
        const gn = null,
          Zt = rn;
        var Vt = e(5071086688),
          Sn = e(5387083734),
          ze = e(8634352961),
          Ot = e(415910655),
          fn = e(5332875232);
        const ln = "HUDDLES-PERF",
          it = 5e3,
          Tt = 1e3;
        let Ct = _(
          class {
            constructor({
              teamId: te,
              logger: _e,
              dispatch: Ie,
              getState: Ne,
              useRtmFiltering: We = !1,
            }) {
              (this.logger = (0, s.Wo)({
                label: ln,
              })),
                (this.callLogger = (0, R.tZ)(ln)),
                (this.errorReported = !1),
                (this.lastRecordedMetricsTs = 0),
                (this.reportCounts = {
                  skipped: 0,
                  recorded: 0,
                }),
                (this.reportUpdate = ($e) => {
                  $e.type === u.lx.AppMetrics
                    ? this.recordAppMetrics($e)
                    : this.huddlePerfState.updateState($e);
                }),
                (this.recordAppMetrics = ($e) => {
                  (0, Sn.IE)(
                    "huddle-perf-metrics",
                    () => {
                      var mt, Xt;
                      if (
                        !this.shouldRecordAppMetrics({
                          nextReportTimestamp:
                            (mt = $e.update) === null ||
                            mt === void 0 ||
                            (Xt = mt.clientMetricReport) === null ||
                            Xt === void 0
                              ? void 0
                              : Xt.currentTimestampMs,
                        })
                      ) {
                        this.reportCounts.skipped += 1;
                        return;
                      }
                      this.logger.debug(
                        "Recording app metrics",
                        this.reportCounts.recorded
                      ),
                        this.huddlePerfState.updateState($e);
                      const _n = this.huddlePerfState.getCurrentTags();
                      this.huddlePerfTrace.recordAppMetrics(_n);
                      try {
                        this.huddlePerfObserver.processTags(_n);
                      } catch (mn) {
                        this.errorReported ||
                          (this.callLogger.error(
                            "An error occurred while processing tags",
                            mn
                          ),
                          (this.errorReported = !0));
                      }
                      (this.lastRecordedMetricsTs = Date.now()),
                        (this.reportCounts.recorded += 1);
                    },
                    {
                      delay: 100,
                    }
                  );
                }),
                (this.shouldRecordAppMetrics = ($e) => {
                  let { nextReportTimestamp: mt } = $e;
                  if (!mt) return !1;
                  const Xt = Date.now(),
                    _n = Xt - this.lastRecordedMetricsTs;
                  if (_n < Tt)
                    return (
                      this.logger.debug(
                        `Not enough time has passed since last report was recorded (${_n}ms). Skipping. Total skipped: ${this.reportCounts.skipped}`
                      ),
                      !1
                    );
                  const Fn = Xt - mt;
                  return Fn > it
                    ? (this.logger.debug(
                        `Too much time has passed since the current report was made (${Fn}ms). Skipping. Total skipped: ${this.reportCounts.skipped}`
                      ),
                      !1)
                    : !0;
                }),
                (this.report = ($e) => {
                  this.huddlePerfTrace.report($e),
                    Vt.A.unsubscribe(this.reportUpdate),
                    this.huddlePerfState.cleanup(),
                    (0, c.rH)(!1),
                    (0, Ot.ZR)(),
                    this.useRtmFiltering &&
                      (this.callLogger.info("RTM filtering will be disabled"),
                      (0, ze.gR)());
                }),
                (this.huddlePerfTrace = new E({
                  teamId: te,
                  logger: _e,
                  callLogger: this.callLogger,
                  enableMaxReportingFrequency: (0, fn.CN)(Ne()),
                })),
                (this.huddlePerfObserver = new U({
                  logger: _e,
                  callLogger: this.callLogger,
                  dispatch: Ie,
                })),
                (this.useRtmFiltering = We),
                (this.huddlePerfState = new Zt()),
                Vt.A.subscribe(this.reportUpdate),
                (0, c.rH)(!0),
                this.useRtmFiltering && (0, ze.ws)(Ne);
            }
          },
          "HuddlePerfManager"
        );
        const Rt = null,
          Yt = Ct;
        var bn = e(6533394955),
          Wn = e(2141441167),
          hn = e(2709531527),
          Bn = e(8276911661),
          Rn = e(5795074931),
          zn = e(5286203919),
          is = e(8847766420),
          ss = e(7606781622),
          jn = e(6251210828),
          Yn = e(3792998666);
        const Qn = _((At) => {
            let { teamId: te } = At;
            var _e, Ie;
            const Ne = (0, bn.getStoreInstanceByTeamId)(te).getState(),
              We = (0, bn.getClientStoreInstance)().getState(),
              $e = (0, zn.E9)(We),
              mt = (0, zn.hc)(We),
              Xt = (0, is.jV)(Ne),
              _n = (0, jn.ok)(Ne, {
                huddleId: $e,
              }),
              mn = (0, jn.Zg)(Ne, {
                huddleId: $e,
              }),
              Fn = (0, Rn.WR)(Ne),
              Kn = mn
                ? mn.timestamps
                    .map((qe) => (mt ? (0, ss.Ld)(Ne, mt, qe) : void 0))
                    .filter((qe) => (qe == null ? void 0 : qe.user) === Fn)
                : [],
              dt = (_e = Kn[0]) === null || _e === void 0 ? void 0 : _e.ts,
              Y =
                (Ie = Kn.slice(-1)[0]) === null || Ie === void 0
                  ? void 0
                  : Ie.ts,
              se = Kn.length,
              he = (0, Bn.nv)(Ne, Fn),
              Le = (0, Yn.P)(he);
            return {
              huddleId: $e,
              channelId: mt,
              enterpriseId: Xt,
              threadId: _n,
              threadReplyCnt: se,
              threadFirstReplyTs: dt,
              threadLastReplyTs: Y,
              isGuest: Le,
            };
          }, "getHuddleEventsStateSnapshot"),
          es = "huddle_events",
          Et = "huddle",
          gt = "vhq",
          Ft = {
            topicName: Et,
            userAgent: navigator.userAgent,
            family: gt,
          };
        let nn = _(
          class {
            get spansList() {
              var te;
              return (
                (0, Wn.A)(
                  (te = this.trace) === null || te === void 0
                    ? void 0
                    : te.getSpans()
                ) || []
              );
            }
            report() {
              var te;
              let _e;
              try {
                _e = (0, v.tT)({
                  ...this.sharedTags,
                  ...Qn({
                    teamId: this.teamId,
                  }),
                });
              } catch (Ne) {
                var Ie;
                this.logger.error(
                  `Error while reporting huddle_events trace: ${Ne}`
                ),
                  (Ie = this.tracer) === null ||
                    Ie === void 0 ||
                    Ie.clearTrace(this.trace);
                return;
              }
              !this.traceReported &&
                this.trace &&
                (this.trace.addTags(_e),
                this.logger.info(
                  `Reporting huddle_events trace: ${this.trace.getTraceId()} with ${
                    this.spansList.length
                  } spans`
                ),
                this.tracer.reportTrace(this.trace),
                (this.traceReported = !0),
                this.logger.debug(
                  "Reported huddle_events trace with tags",
                  _e
                )),
                (te = this.tracer) === null ||
                  te === void 0 ||
                  te.clearTrace(this.trace);
            }
            constructor({ teamId: te, logger: _e }) {
              (this.sharedTags = Ft),
                (this.traceReported = !1),
                (this.getSpanByName = (Ie) =>
                  this.spansList.find((Ne) => Ie === Ne.getOperationName())),
                (this.getDataSet = () => {
                  if (!(0, n.Cu)()) return "client_metrics";
                }),
                (this.addInitialSpans = () => {
                  this.update({
                    name: hn.p.JOIN,
                    type: hn.G.START,
                    tags: {},
                  }),
                    this.update({
                      name: hn.p.MINIPLAYER_VIEW,
                      type: hn.G.START,
                    });
                }),
                (this.isSurfaceChange = (Ie) =>
                  Ie === hn.p.MINIPLAYER_VIEW ||
                  Ie === hn.p.WINDOW_COMPACT_VIEW ||
                  Ie === hn.p.WINDOW_FULL_VIEW),
                (this.handleSurfaceChange = (Ie) => {
                  let { name: Ne, type: We } = Ie;
                  We === hn.G.START &&
                    this.isSurfaceChange(Ne) &&
                    this.spansList
                      .filter(($e) =>
                        this.isSurfaceChange($e.getOperationName())
                      )
                      .forEach(($e) => {
                        $e.getOperationName() !== Ne && this.closeSpan($e);
                      });
                }),
                (this.update = (Ie) => {
                  let { name: Ne, type: We, tags: $e } = Ie;
                  if (this.trace)
                    if (We === hn.G.START || We === hn.G.ONCE) {
                      const mt = this.trace.startSpan(Ne, {
                        parentSpanId: this.joinSpanId,
                      });
                      $e && mt.addTags($e),
                        Ne === hn.p.JOIN && (this.joinSpanId = mt.getId()),
                        this.isSurfaceChange(Ne) &&
                          this.handleSurfaceChange({
                            name: Ne,
                            type: We,
                          }),
                        this.logger.debug(
                          `started new span for huddle_events trace: ${Ne}`
                        ),
                        We === hn.G.ONCE && this.closeSpan(mt);
                    } else {
                      const mt = this.getSpanByName(Ne);
                      this.closeSpan(mt),
                        this.logger.debug(
                          `closed span for huddle_events trace: ${Ne}`
                        );
                    }
                }),
                (this.closeSpan = (Ie) => {
                  Ie && (Ie.getCloseTimeMs() || Ie.close());
                }),
                (this.recordEntryPoint = (Ie) => {
                  Object.assign(this.sharedTags, {
                    entryPoint: Ie,
                  });
                }),
                (this.tracer = (0, i.E)({
                  teamOrEnterpriseId: te,
                })),
                (this.trace = this.tracer.createTrace({
                  traceName: es,
                  tags: {
                    __dataset: this.getDataSet(),
                  },
                  samplingOptions: {
                    sampleRate: 1,
                    sampleType: d.tS.SESSION,
                  },
                })),
                (this.teamId = te),
                (this.logger = _e),
                this.logger.info(
                  `created huddle_events trace:${this.trace.getTraceId()}`
                ),
                this.addInitialSpans();
            }
          },
          "HuddleEventsTracer"
        );
        const Dn = "HUDDLE-TRACE-MANAGER",
          bt = (0, s.Wo)({
            label: Dn,
          });
        let In = _(
          class {
            initializeTraces(te) {
              let { teamId: _e, isTinySpeck: Ie, isDebugApp: Ne } = te;
              const We = (0, bn.getStoreInstanceByTeamId)(_e),
                $e = We.getState();
              (this.teamId = _e),
                (this.tracer = (0, i.E)({
                  teamOrEnterpriseId: this.teamId,
                })),
                (this.trace = this.tracer.createTrace({
                  traceName: o.ne,
                  samplingOptions: {
                    sampleRate: (0, n.Cu)() || Ie ? 1 : 0.05,
                    sampleType: d.tS.SESSION,
                  },
                  tags: {
                    __dataset: "client_metrics",
                  },
                })),
                Ne ||
                  ((this.reconnectTrace = new a({
                    tracer: this.tracer,
                    trace: this.trace,
                    logger: bt,
                  })),
                  (this.ttiTrace = new r({
                    teamId: this.teamId,
                    logger: bt,
                  })),
                  (this.huddleEventsTrace = new nn({
                    teamId: this.teamId,
                    logger: bt,
                  }))),
                (this.huddlePerfTraceManager = new Yt({
                  teamId: this.teamId,
                  logger: bt,
                  dispatch: We.dispatch,
                  getState: We.getState,
                  useRtmFiltering: (0, fn.DP)($e),
                }));
            }
            setCallId(te) {
              var _e;
              (this.callId = te),
                (_e = this.trace) === null ||
                  _e === void 0 ||
                  _e.addTags({
                    callId: this.callId,
                  }),
                te &&
                  Vt.A.publish({
                    type: u.lx.CallId,
                    update: {
                      callId: te,
                    },
                  });
            }
            getAllTraceHandlers() {
              return {
                reconnectTrace: this.reconnectTrace,
                ttiTrace: this.ttiTrace,
                huddlePerfTraceManager: this.huddlePerfTraceManager,
                huddleEventsTrace: this.huddleEventsTrace,
              };
            }
            cleanup() {
              var te, _e, Ie, Ne, We, $e;
              (te = this.reconnectTrace) === null ||
                te === void 0 ||
                te.report(),
                (_e = this.ttiTrace) === null || _e === void 0 || _e.report(),
                (Ie = this.huddlePerfTraceManager) === null ||
                  Ie === void 0 ||
                  Ie.report(!0),
                (Ne = this.huddleEventsTrace) === null ||
                  Ne === void 0 ||
                  Ne.report(),
                (We = this.tracer) === null ||
                  We === void 0 ||
                  We.reportTrace(this.trace),
                ($e = this.tracer) === null ||
                  $e === void 0 ||
                  $e.clearTrace(this.trace),
                bt.info("Reported and cleared huddle parent trace"),
                delete this.reconnectTrace,
                delete this.ttiTrace,
                delete this.huddlePerfTraceManager,
                delete this.huddleEventsTrace,
                (this.callId = null);
            }
            constructor() {
              bt.info("Huddle Trace Manager created");
            }
          },
          "HuddleTraceManager"
        );
        const Nt = (0, t.A)(() => new In());
      },
      2709531527: (W, A, e) => {
        "use strict";
        e.d(A, {
          G: () => t,
          p: () => n,
        });
        var t;
        (function (s) {
          (s.START = "start"), (s.STOP = "stop"), (s.ONCE = "once");
        })(t || (t = {}));
        var n;
        (function (s) {
          (s.JOIN = "session_join"),
            (s.VIDEO = "video"),
            (s.SCREENSHARE = "screenshare"),
            (s.REACTION = "reaction_posted"),
            (s.MESSAGE = "message_posted"),
            (s.MICROPHONE = "microphone"),
            (s.MINIPLAYER_VIEW = "mini_player_view"),
            (s.WINDOW_COMPACT_VIEW = "window_compact_view"),
            (s.WINDOW_FULL_VIEW = "window_full_view"),
            (s.THREAD_VIEW = "thread_flexpane_view"),
            (s.TRANSCRIPT = "trxn");
        })(n || (n = {}));
      },
      1616072515: (W, A, e) => {
        "use strict";
        e.d(A, {
          _3: () => i,
          tT: () => d,
        });
        var t = e(4178261413),
          n = e(8872403767),
          s = e(6422693406);
        const i = _((a) => (0, t.A)(a), "formatTag"),
          d = _(function (a) {
            let r =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : "peer_video";
            return (0, n.A)(a, (c, u) => (u.indexOf(r) > -1 ? u : i(u)));
          }, "formatTags"),
          o = _(
            () =>
              new Bluebird((a) => {
                setTimeout(a, 0);
              }),
            "waitForNextTick"
          );
      },
      3146858537: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => y,
        });
        var t = e(9706240641),
          n = e(8958249318),
          s = e(6422693406),
          i = e(56548687),
          d = e(1224315998),
          o = e(6664301844),
          a = e(2825968873);
        function r() {
          return 2;
        }
        _(r, "getVoiceFocusCacheVersion");
        var c;
        const u = "voiceFocusCache";
        function l() {
          return {
            userAgent: "unknown",
            sdkVersion: "unknown",
            isSupported: "unknown",
          };
        }
        _(l, "createDefaultVoiceFocusCapability");
        function m() {
          return {
            vfConfig: "unknown",
            lastUpdateTimeMs: 0,
          };
        }
        _(m, "createDefaultVoiceFocusCachedConfig");
        function v() {
          let M =
              arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : window == null ||
                  (c = window.navigator) === null ||
                  c === void 0
                ? void 0
                : c.userAgent,
            p = arguments.length > 1 ? arguments[1] : void 0;
          const O = localStorage.getItem(u),
            C = {
              version: r(),
              voiceFocusCapability: l(),
              voiceFocusCachedConfig: m(),
            };
          if (!O) return C;
          let h;
          try {
            h = JSON.parse(O);
          } catch (D) {
            return (
              (0, a.tZ)("VOICE-FOCUS-CACHE").error(
                "Could not parse voice focus cache from localStorage: ",
                D.message
              ),
              C
            );
          }
          return h.version !== r()
            ? C
            : (h.voiceFocusCapability &&
                (h.voiceFocusCapability.userAgent !== M ||
                  h.voiceFocusCapability.sdkVersion !== p) &&
                ((h.voiceFocusCapability = C.voiceFocusCapability),
                (h.voiceFocusCachedConfig = C.voiceFocusCachedConfig)),
              {
                ...C,
                ...h,
              });
        }
        _(v, "readVoiceFocusCache");
        function E(M) {
          try {
            localStorage.setItem(u, JSON.stringify(M));
          } catch (p) {
            (0, a.tZ)("VOICE-FOCUS-CACHE").error(
              "Could not write voice focus cache to localStorage: ",
              p.message
            );
          }
        }
        _(E, "writeVoiceFocusCache");
        var T = e(5470425448),
          g = e(5071086688);
        const I = 1657647210615,
          f = 1686248081659;
        let y = _(
          class {
            init(p) {
              let { configOnly: O } = p;
              var C = this;
              return (0, t.coroutine)(function* () {
                O || C.callLogger.info(`VF cache: ${!!C.cache}`),
                  (C.isSupported = yield C.isCapable(!!O)),
                  C.isSupported && C.prepare(O);
              })();
            }
            isAvailable() {
              return this.isSupported;
            }
            getTransformDevice() {
              var p = this;
              return (0, t.coroutine)(function* () {
                if (
                  p.isSupported &&
                  (p.voiceFocusConfigPromise &&
                    (yield p.voiceFocusConfigPromise),
                  !!p.voiceFocusDeviceTransformerPromise)
                ) {
                  try {
                    yield p.voiceFocusDeviceTransformerPromise;
                  } catch {
                    p.callLogger.error(
                      "Could not get VoiceFocusDeviceTransformer"
                    );
                    return;
                  }
                  if (p.voiceFocusTransformDevicePromise)
                    try {
                      return yield p.voiceFocusTransformDevicePromise;
                    } catch {
                      p.callLogger.error(
                        "Could not get VoiceFocusTransformDevice"
                      );
                    }
                }
              })();
            }
            shouldDisable() {
              return !1;
            }
            setMute(p) {
              var O = this;
              return (0, t.coroutine)(function* () {
                const C = yield O.getTransformDevice();
                C && (yield C.mute(p));
              })();
            }
            isCapable(p) {
              var O = this;
              return (0, t.coroutine)(function* () {
                if (O.isIFramed())
                  return (
                    p || O.callLogger.warn("not supported due to IFrame"), !1
                  );
                let C = !1;
                switch (O.cache.voiceFocusCapability.isSupported) {
                  case "yes":
                    p || O.callLogger.info("cache says supported"), (C = !0);
                    break;
                  case "no":
                    p || O.callLogger.info("cache says not supported"),
                      (C = !1);
                    break;
                  case "unknown": {
                    p ||
                      O.callLogger.info(
                        "cache says unknown, determining support..."
                      ),
                      (O.cache.voiceFocusCapability.userAgent = (0, n.A)()),
                      (O.cache.voiceFocusCapability.sdkVersion =
                        o.zF.sdkVersion),
                      (C = yield (0, o.w2)().isSupported()),
                      C
                        ? (O.cache.voiceFocusCapability.isSupported = "yes")
                        : (O.cache.voiceFocusCapability.isSupported = "no"),
                      E(O.cache),
                      p ||
                        O.callLogger.info(
                          `determined supported=${O.cache.voiceFocusCapability.isSupported}, writing to cache`
                        );
                    break;
                  }
                  default:
                    O.callLogger.warn(
                      `Voice Focus capability pref bad: ${O.cache.voiceFocusCapability.isSupported}`
                    );
                    break;
                }
                return C;
              })();
            }
            isIFramed() {
              try {
                var p;
                return (
                  ((p = window.frameElement) === null || p === void 0
                    ? void 0
                    : p.nodeName) === "IFRAME" || parent !== top
                );
              } catch {
                return !0;
              }
            }
            isStale(p) {
              const C = this.cache.voiceFocusCachedConfig.lastUpdateTimeMs,
                h = this.allowMaxModelsToBeUsed ? f : I;
              return C === 0 || p - C > 6048e5 || C < h;
            }
            prepare() {
              let p =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : !1;
              const O = Date.now(),
                C = this.cache.voiceFocusCachedConfig.vfConfig,
                h = this.isStale(O),
                D = {},
                P = {
                  logger: this.chimeLogger,
                };
              if (C !== "unknown" && !h) {
                if (p) return;
                if (!C.supported) {
                  this.callLogger.warn(
                    "Unsupported config was returned from the cache"
                  );
                  return;
                }
                this.setupDevice(D, P, C);
                return;
              }
              this.voiceFocusConfigPromise ||
                (this.callLogger.info(
                  "Initializing VoiceFocusDeviceTransformer afresh"
                ),
                (this.voiceFocusConfigPromise = s.S.resolve(
                  (0, o.w2)().configure(D, P)
                )),
                this.voiceFocusConfigPromise
                  .then((S) => {
                    var b;
                    if (!S.supported) {
                      this.callLogger.error(
                        `VF Config was provided as unsupported Reason: ${S.reason}`
                      );
                      return;
                    }
                    if (
                      !(
                        !(
                          S == null ||
                          (b = S.model) === null ||
                          b === void 0
                        ) && b.simd
                      )
                    ) {
                      this.callLogger.error(
                        "VF not enabled because device is not expected to be able to perform adequately"
                      );
                      return;
                    }
                    const x = S;
                    this.callLogger.info(
                      `Got new config, variant: ${x.model.variant}, simd: ${x.model.simd}, executionQuanta: ${x.executionQuanta}`
                    ),
                      this.storeVfConfig(O, x),
                      p || this.setupDevice(D, P, x);
                  })
                  .catch((S) => {
                    this.callLogger.info(
                      `Could not get configuration of voice device transformer: ${S.name}: ${S.message}`
                    ),
                      p || this.setupDevice(D, P);
                  }));
            }
            storeVfConfig(p, O) {
              (this.cache.voiceFocusCachedConfig.vfConfig = O),
                (this.cache.voiceFocusCachedConfig.lastUpdateTimeMs = p),
                E(this.cache);
            }
            updateCacheWithUpdatedConfig(p) {
              var O = this;
              return (0, t.coroutine)(function* () {
                O.callLogger.info("Updating VF cache with new modified model");
                const C = {
                    logger: O.chimeLogger,
                  },
                  h = {
                    variant: p,
                  },
                  D = yield (0, o.w2)().configure(h, C);
                D.supported && O.storeVfConfig(Date.now(), D);
              })();
            }
            setupDevice(p, O, C) {
              const h = p;
              let D = C,
                P,
                S;
              C
                ? ((P = C.model.variant), (S = !0))
                : (this.callLogger.info(
                    "No VFConfig provided defaulting base model to c10"
                  ),
                  (P = "c10"),
                  (S = !1));
              let b = !0;
              this.allowMaxModelsToBeUsed && (b = !1);
              const K = this.chooseModelVariant(P, S, b);
              if (
                (K.modelWasAdjusted &&
                  ((h.variant = K.chosenModel),
                  (D = void 0),
                  this.callLogger.info(
                    `VF Model was adjusted from ${
                      C == null ? void 0 : C.model.variant
                    } to ${K.chosenModel} Reason: ${K.adjustmentReason}`
                  ),
                  this.updateCacheWithUpdatedConfig(K.chosenModel)),
                C)
              ) {
                (0, i.e)().track(d.EventId.CALLS_VOICE_FOCUS_CONFIG, {
                  model_variant_determined: C.model.variant,
                  model_variant_override: h.variant,
                  simd: C.model.simd,
                  execution_quanta: C.executionQuanta,
                  hw_concurrency:
                    navigator == null ? void 0 : navigator.hardwareConcurrency,
                });
                const B = {
                  ...C,
                };
                (B.model.variant = K.chosenModel),
                  g.A.publish({
                    type: T.lx.VoiceFocusConfig,
                    update: B,
                  }),
                  this.callLogger.info(
                    `model_variant_determined: ${
                      C.model.variant
                    }, model_variant_override: ${K.chosenModel}, simd: ${
                      C.model.simd
                    }, execution_quanta: ${
                      C.executionQuanta
                    }, hw_concurrency: ${
                      navigator == null ? void 0 : navigator.hardwareConcurrency
                    }`
                  );
              }
              this.voiceFocusDeviceTransformerPromise = s.S.resolve(
                (0, o.w2)().create(h, O, D)
              );
              var x = this;
              this.voiceFocusDeviceTransformerPromise
                .then(
                  (function () {
                    var B = (0, t.coroutine)(function* (U) {
                      x.voiceFocusTransformDevicePromise = s.S.resolve(
                        U.createTransformDevice(null)
                      );
                    });
                    return function (U) {
                      return B.apply(this, arguments);
                    };
                  })()
                )
                .catch((B) => {
                  this.callLogger.info(
                    `Could not create voice device transformer exp: ${B.name}: ${B.message}`
                  );
                });
            }
            chooseModelVariant(p, O, C) {
              const h = {
                  c10: 1,
                  c20: 2,
                  c50: 3,
                  c100: 4,
                },
                D = navigator == null ? void 0 : navigator.hardwareConcurrency;
              if (!D)
                return (
                  this.callLogger.info(
                    `Hardware concurrency not available, using self-determined model variant: ${p}`
                  ),
                  {
                    modelWasAdjusted: !1,
                    chosenModel: p,
                    adjustmentReason: "",
                  }
                );
              let P;
              return (
                D <= 4
                  ? (P = "c10")
                  : D <= 6
                  ? (P = "c20")
                  : D <= 8
                  ? (P = "c50")
                  : (P = "c100"),
                h[P] < h[p] && !C
                  ? {
                      modelWasAdjusted: this.wasModelAdjusted(P, p, O),
                      chosenModel: P,
                      adjustmentReason:
                        "Using CPU restricted model variant which is weaker",
                    }
                  : h[P] > h[p] &&
                    (this.callLogger.info(
                      `using self-determined model variant which is weaker: ${p}`
                    ),
                    (P = p),
                    !C)
                  ? {
                      modelWasAdjusted: !1,
                      chosenModel: p,
                      adjustmentReason: "",
                    }
                  : P === "c100"
                  ? {
                      modelWasAdjusted: this.wasModelAdjusted("c20", p, O),
                      chosenModel: "c20",
                      adjustmentReason:
                        "Model selection was determined to be c100 capping the model at C20",
                    }
                  : {
                      modelWasAdjusted: this.wasModelAdjusted("c10", p, O),
                      chosenModel: "c10",
                      adjustmentReason:
                        "Model selection was determined to be less than c100 capping the model at C10",
                    }
              );
            }
            wasModelAdjusted(p, O, C) {
              return (p === O && !C) || p !== O;
            }
            tearDown() {
              var p = this;
              return (0, t.coroutine)(function* () {
                const O = yield p.getTransformDevice();
                O &&
                  (p.callLogger.info("Attempting to destroyVoiceFocus"),
                  o.wV.destroyVoiceFocus(O));
              })();
            }
            constructor(p, O) {
              (this.chimeLogger = p),
                (this.allowMaxModelsToBeUsed = O),
                (this.callLogger = (0, a.Jt)("VOICE-FOCUS-MANAGER")),
                (this.isSupported = !1),
                (this.cache = v((0, n.A)(), o.zF.sdkVersion));
            }
          },
          "VoiceFocusManager"
        );
      },
      8558782493: (W, A, e) => {
        "use strict";
        e.d(A, {
          k: () => d,
        });
        var t = e(56548687),
          n = e(5795074931),
          s = e(3395259576),
          i = e(7439555287);
        function d(o, a) {
          let r =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : !0,
            c =
              arguments.length > 3 && arguments[3] !== void 0
                ? arguments[3]
                : !1;
          var u;
          const l =
            (u = (0, i.KA)()) === null || u === void 0 ? void 0 : u.getState();
          if (!l) return;
          const m = (0, t.e)({
            state: l,
          }).setUser((0, n.WR)(l));
          if (r) {
            const v = {
              ...a,
              room_id: (0, s.G0)(l),
            };
            m.track(o, v, {
              sendImmediately: c,
            });
          } else
            m.track(o, a, {
              sendImmediately: c,
            });
        }
        _(d, "trackCallsClog");
      },
      164795489: (W, A, e) => {
        "use strict";
        e.d(A, {
          w: () => f,
        });
        var t = e(9706240641),
          n = e(6680093304),
          s = e(6422693406),
          i = e(1031947056),
          d = e(8276911661),
          o = e(3677514771),
          a = e(1269227002),
          r = e(8445020572),
          c = e(5046160032),
          u = e(4914127094),
          l = e(7299481592);
        const m = "screenhero.rooms.proxyLogs",
          v = (0, i.Ay)("Send call logs to the server", (y, M, p) => {
            let { logs: O, useSendBeacon: C = !1, callId: h } = p;
            const D = M();
            let P;
            if (
              (h
                ? (P = h)
                : D.activeCall && D.activeCall.id && (P = D.activeCall.id),
              !P)
            )
              return (
                (0, l.M)(
                  !1,
                  "There should be an active call in progress in order to send logs."
                ),
                s.S.reject(new Error("SendLogs: no call"))
              );
            const S = (0, d.cA)(D),
              b = (0, o.H7)(D);
            if (!b) return s.S.reject(new Error("SendLogs: no current team"));
            const K = {
                data: {
                  room_id: P,
                  user_id: S.id,
                  team_id: b.id,
                  ua: window.navigator.userAgent,
                  event_type: "calls_js_logs",
                  encoding: "none",
                  logs: O,
                },
              },
              x = {
                data: JSON.stringify(K.data),
              };
            return C
              ? (0, c.A)({
                  apiUrl: "/api/",
                  method: m,
                  token: (0, u.F)(D),
                  versionTs: (0, r.HF)(),
                  versionUid: (0, r.X3)(),
                  args: x,
                })
                ? s.S.resolve()
                : s.S.reject(new Error("SendLogs: beacon failed"))
              : y(
                  (0, a.apiCall)({
                    method: m,
                    reason: "calls-logging",
                    args: x,
                  })
                );
          });
        v.meta = {
          name: "createThunk",
          key: "createThunksendLogs",
          description: "Send call logs to the server",
        };
        var E = e(7439555287),
          T = e(796111729),
          g = e(4518410378);
        const I = 60 * 1e3;
        class f {
          start(M) {
            (0, l.M)(!this.intervalHandle, "Log reporter already started."),
              (this.callId = M),
              (this.intervalHandle = g.J.setInterval(() => this.report(!1), I)),
              g.J.addEventListener("beforeunload", this.unloadHandler);
          }
          joinLogs(M) {
            return M.map((p) => p.join(" ")).join(`
`);
          }
          constructor(M = n.tt) {
            (this.buffer = M),
              (this.unloadHandler = () => {
                g.J.Cypress || this.report(!0);
              });
            var p = this;
            this.stop = (0, t.coroutine)(function* () {
              let h =
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : !1,
                D =
                  arguments.length > 1 && arguments[1] !== void 0
                    ? arguments[1]
                    : !1;
              p.intervalHandle && g.J.clearInterval(p.intervalHandle),
                (p.intervalHandle = void 0),
                g.J.removeEventListener("beforeunload", p.unloadHandler),
                yield p.emptyBuffer(D),
                (p.callId = void 0);
            });
            var O = this;
            this.emptyBuffer = (0, t.coroutine)(function* () {
              let h =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : !1;
              O.buffer.hasItems() &&
                (yield O.report(h), yield O.emptyBuffer(h));
            });
            var C = this;
            this.report = (0, t.coroutine)(function* () {
              let h =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : !1;
              const { dispatch: D } = (0, E.KA)(),
                P = C.buffer.flush();
              if (!P.length) return;
              const S = C.joinLogs(P);
              yield D(
                v({
                  logs: S,
                  useSendBeacon: h,
                  callId: C.callId,
                })
              ).catch(() => {
                (0, T.Wo)().error("Failed to send Huddle logs");
              });
            });
          }
        }
        _(f, "LogReporter");
      },
      3300324857: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => n,
        });
        var t = e(6267571562);
        const n = new t.G();
      },
      6839101721: (W, A, e) => {
        "use strict";
        e.d(A, {
          D8: () => l,
          WY: () => u,
          cn: () => m,
          d2: () => r,
          gJ: () => c,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("connect to free willy media server");
        n.meta = {
          name: "createAction",
          key: "createActionconnectToFreeWillyMediaServer",
          description: "connect to free willy media server",
        };
        const s = (0, t.Ay)(
          "Set flag to indicate if experimental Chime SDK should be used"
        );
        s.meta = {
          name: "createAction",
          key: "createActionsetUseChimeSdkExp",
          description:
            "Set flag to indicate if experimental Chime SDK should be used",
        };
        const i = (0, t.Ay)(
          "Set flag to indicate if simulcast should be used in a Chime call"
        );
        i.meta = {
          name: "createAction",
          key: "createActionsetUseSimulcast",
          description:
            "Set flag to indicate if simulcast should be used in a Chime call",
        };
        const d = (0, t.Ay)(
          "Set flag to indicate if priority based downlink policy should be used in a Chime call"
        );
        d.meta = {
          name: "createAction",
          key: "createActionsetUsePriorityDownlinkPolicy",
          description:
            "Set flag to indicate if priority based downlink policy should be used in a Chime call",
        };
        const o = (0, t.Ay)(
          "Set flag to indicate if getMediaAccess checks for Windows should be used in a Chime call"
        );
        o.meta = {
          name: "createAction",
          key: "createActionsetUseGetMediaAccessCheckForWindows",
          description:
            "Set flag to indicate if getMediaAccess checks for Windows should be used in a Chime call",
        };
        const a = (0, t.Ay)(
          "Set flag to determine if a call is a readiness test call"
        );
        a.meta = {
          name: "createAction",
          key: "createActionsetReadinessCheck",
          description:
            "Set flag to determine if a call is a readiness test call",
        };
        const r = (0, t.Ay)("Binds video tile to a video element");
        r.meta = {
          name: "createAction",
          key: "createActionbindVideo",
          description: "Binds video tile to a video element",
        };
        const c = (0, t.Ay)("Unbinds video tile from a video element");
        c.meta = {
          name: "createAction",
          key: "createActionunbindVideo",
          description: "Unbinds video tile from a video element",
        };
        const u = (0, t.Ay)("Pauses video tile");
        u.meta = {
          name: "createAction",
          key: "createActionpauseVideo",
          description: "Pauses video tile",
        };
        const l = (0, t.Ay)("Unpauses video tile");
        l.meta = {
          name: "createAction",
          key: "createActionunpauseVideo",
          description: "Unpauses video tile",
        };
        const m = (0, t.Ay)(
          "Returns if there in a stream associated with the tileId"
        );
        m.meta = {
          name: "createAction",
          key: "createActionvideoTileHasStream",
          description:
            "Returns if there in a stream associated with the tileId",
        };
      },
      3094144240: (W, A, e) => {
        "use strict";
        e.d(A, {
          P: () => t,
        });
        const t = {
          height: 576,
          width: 1024,
          useContentSize: !0,
          minContentWidth: 704,
          minContentHeight: 396,
          center: !0,
          frame: !0,
          titleBarStyle: "default",
        };
        function n(s) {
          return !!has(s, "activeCall");
        }
        _(n, "isCallWindowContextState");
      },
      5156662944: (W, A, e) => {
        "use strict";
        e.d(A, {
          Rv: () => K,
          Xk: () => b,
          hL: () => S,
          j7: () => H,
          lp: () => x,
          tO: () => z,
          tw: () => B,
          uI: () => q,
          vf: () => X,
        });
        var t = e(5597672932),
          n = e(6007206761),
          s = e(4630136761),
          i = e(9884588328),
          d = e(8798294025),
          o = e(1407713935),
          a = e(2350349607),
          r = e(6839188756),
          c = e(4827886670),
          u = e(8276911661),
          l = e(6728717861),
          m = e(8921478798),
          v = e(8170643398),
          E = e(3534324375),
          T = e(3677514771),
          g = e(735940183),
          I = e(9101533895),
          f = e(5670315214),
          y = e(8767621462),
          M = e(462591818),
          p = e(340763958),
          O = e(6470070112);
        const C = "Slack",
          h = new g.Ay("calls");
        function D(ae) {
          return !!(0, t.x)(ae, "allow_calls");
        }
        _(D, "isCallsAllowedByAdmin");
        function P(ae, de) {
          return (0, O.pt)(ae) && (0, O.Bn)(ae, de);
        }
        _(P, "isHuddlesAllowed");
        function S(ae, de, ve) {
          const Se = (0, I.Pu)(ae, de.id);
          return !(
            (!D(ae) && !P(ae, Se)) ||
            ((0, v.fy)(de) && !ve) ||
            !(0, v._W)(de) ||
            !(0, y.S)(ae, de.id) ||
            (0, i.Mi)(Se)
          );
        }
        _(S, "canCallMember");
        function b(ae, de) {
          let ve =
            arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
          const Se = (0, u.nv)(ae, (0, d.e)(de)),
            Ee = ve && V(ae);
          return (!D(ae) && !P(ae, de) && !Ee) ||
            (0, s.Zz)(de) ||
            ((0, o.LI)(de) && (!Se || !S(ae, Se))) ||
            !(0, i.Ez)(de)
            ? !1
            : (0, c.c)(ae, de);
        }
        _(b, "isCallButtonVisibleForChannel");
        function K(ae, de) {
          return (0, l.Pb)(ae)
            ? ((0, i.bU)(de) || (0, n.F)(de)) && !Ae(de)
            : !0;
        }
        _(K, "isCallButtonDisabledForChannel");
        function x(ae, de) {
          const ve = (0, I.OL)(ae, de);
          return ve && !K(ae, ve) && b(ae, ve);
        }
        _(x, "canStartCallInChannel");
        function B(ae, de, ve) {
          const Se = (0, a.V)(de),
            Ee = (0, f.q8)(ae, Se),
            be = (0, u.nv)(ae, ve, {
              preferNonExistentToNull: !1,
              fetchIfMissing: !0,
            }),
            Ce = (0, v.v8)(be),
            Z = (0, f.OJ)({
              callsApp: Ee,
              memberPhoneNumber: Ce,
              hideVideoApps: !1,
            }),
            $ = Z.length,
            N = P(ae, de);
          let L = $;
          return (
            N && (L += 1),
            L > 1
              ? h.t("{numCallApps} calling options", {
                  numCallApps: L,
                })
              : L === 1
              ? $ === 0
                ? ""
                : h.t("using {appName}", {
                    appName: Z[0].name,
                  })
              : ""
          );
        }
        _(B, "getTipSubtitleForStartCall");
        function U(ae, de, ve) {
          const Se = (0, m.I)(ae, (0, d.e)(de));
          return ve
            ? h.rt("Huddle with {name}", {
                name: Se,
                fallbackHash: "8e987d72e71ed558e674143b7f1cde8c0e13d4aa",
                fallbackHashNs: "huddles",
              })
            : h.rt("Call {name}", {
                name: Se,
              });
        }
        _(U, "getTipForIm");
        function R(ae, de, ve) {
          const Se = (0, i.d3)(ae, de).map((be) => (0, E.sE)(ae, be)),
            Ee = (0, g.jd)(Se, {
              noEscape: !0,
            }).join("");
          return ve
            ? h.rt("Huddle with {listOfNamesWithConjunction}", {
                listOfNamesWithConjunction: Ee,
                fallbackHash: "8e987d72e71ed558e674143b7f1cde8c0e13d4aa",
                fallbackHashNs: "huddles",
              })
            : h.rt("Call {listOfNamesWithConjunction}", {
                listOfNamesWithConjunction: Ee,
              });
        }
        _(R, "getTipForMpim");
        function G(ae, de, ve) {
          return (0, o.LI)(de)
            ? U(ae, de, ve)
            : (0, o.yz)(de)
            ? R(ae, de, ve)
            : ve
            ? h.t("Huddle in {channelName}", {
                channelName: (0, i.SB)(ae, de),
                fallbackHash: "2e4c8c4a478aa889a4b6fe33316b3d0a6d93301d",
                fallbackHashNs: "huddles",
              })
            : h.t("Start a call");
        }
        _(G, "getTipForChannel");
        function H(ae, de) {
          const ve = (0, T.H7)(ae),
            Se = (0, r.qR)(ve),
            Ee = V(ae),
            be = Se || Ee,
            Ce = P(ae, de) && !X(ae);
          return (0, l.Pb)(ae)
            ? be && (0, n.F)(de)
              ? h.t("Unarchive this channel to start a huddle")
              : be && (0, i.bU)(de)
              ? h.t("Join this channel to start a huddle")
              : (Ee || Ae(de), G(ae, de, Ce))
            : h.t("Go online to start a huddle");
        }
        _(H, "getTipForStartCall");
        function F(ae, de) {
          const ve = getCurrentTeam(ae),
            Se = isPaidTeamRule(ve),
            Ee = isMpimRule(de),
            be = V(ae),
            Ce = Se || be;
          return !isClientOnline(ae) ||
            (Ce && isArchived(de)) ||
            (Ce && isPreview(de)) ||
            be
            ? !1
            : !!((!Se && Ee) || (!Se && isNonImOrMpimChannel(de)));
        }
        _(F, "isFreeTeamAndInChannelOrMpim");
        function V(ae) {
          const de = (0, f.wZ)(ae);
          for (let ve = 0; ve < de.length; ve++)
            if (de[ve].id !== M.rq) return !0;
          return !1;
        }
        _(V, "isThirdPartyCallEnabled");
        function X(ae) {
          return (0, f.wZ)(ae).length > 0;
        }
        _(X, "isAnyCallAppEnabled");
        function q(ae) {
          const de = h.t("Start a call?", {
              fallbackHash: "04d5cae8ffd5cbdfd97d6ea2c1afe3e969b3eed7",
            }),
            ve = h.t(
              "You\u2019ll be starting a call that all {count} members of this channel can join.",
              {
                count: ae,
                fallbackHash: "225ecb6662087bf4b09285688dc46d8ecb5ed2aa",
              }
            ),
            Se = h.t("Start Call", {
              fallbackHash: "291a0a58dfa6c640a90c1d868d2af190775ea219",
            });
          return {
            title: de,
            description: ve,
            confirm: Se,
            cancel: h.t("Cancel"),
          };
        }
        _(q, "getCallConfirmationStrings");
        function oe() {
          return !1;
        }
        _(oe, "isNativeSlackCallEnabled");
        function z() {
          return !0;
        }
        _(z, "isSlackCallSlashCommandDisabled");
        function Ae(ae) {
          return (0, p.ju)(ae) && !(0, o.LI)(ae);
        }
        _(Ae, "shouldEnableForSponsoredConnections");
      },
      7561130599: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => E,
        });
        var t = e(9706240641),
          n = e(2825968873),
          s = e(3245843483),
          i = e(7299481592),
          d = e(571104883),
          o = e(8558782493),
          a = e(1224315998),
          r = e(336376314);
        const c = window.RTCPeerConnection,
          u = window.MediaStream,
          l = window.RTCIceCandidate,
          m = window.navigator,
          v = {
            height: 116,
            width: 168,
          };
        let E = _(
          class {
            getScreenThumbnails(I) {
              let f =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : !1;
              var y = this;
              return (0, t.coroutine)(function* () {
                const M = yield (0, s.zxd)();
                f || T(y.log, M);
                const p = ["screen"];
                p.push("window"),
                  (v.width = (I == null ? void 0 : I.width) || 200),
                  (v.height = (I == null ? void 0 : I.height) || 150);
                let O;
                try {
                  O = yield (0, s.Yx3)(v, p);
                } catch (h) {
                  y.log.error(`Could not get screen thumbnails: ${h.message}`);
                }
                return O
                  ? O.map((h, D) => {
                      var P;
                      const S = M.find(
                        (K) => parseInt(h.display_id, 10) === K.id
                      );
                      !S &&
                        !(0, d.tR)() &&
                        !(0, d.cX)() &&
                        !(
                          !((P = h.id) === null || P === void 0) &&
                          P.startsWith("window:")
                        ) &&
                        y.log.error(
                          `Could not find matching display for screen ${D} with id ${h.display_id}`
                        );
                      const b =
                        S || ((0, d.tR)() || (0, d.cX)() ? M[D] : void 0);
                      return {
                        mediaSourceId: h.id,
                        thumbnail: h.thumbnail,
                        displayId: b && b.id,
                        bounds: b && b.bounds,
                        name: h.name,
                      };
                    })
                  : [];
              })();
            }
            getCurrentlyActiveScreenTrack() {
              return this.screenTrack;
            }
            startCapturingScreen(I) {
              var f = this;
              return (0, t.coroutine)(function* () {
                if (
                  ((0, i.M)(
                    !f.screenTrack,
                    "Screen track should not already be active"
                  ),
                  !I)
                ) {
                  if (!m.mediaDevices.getDisplayMedia)
                    throw (
                      (f.log.error(
                        "Error: getDisplayMedia unavailable while trying to screen share in browser"
                      ),
                      new Error("browser screenshare unavailable"))
                    );
                  try {
                    const y = {
                        audio: !1,
                        video: {
                          frameRate: {
                            max: 15,
                          },
                        },
                      },
                      M = yield m.mediaDevices.getDisplayMedia(y);
                    return (
                      (f.screenTrack = M.getVideoTracks()[0]),
                      f.log.info(
                        `Start screen sharing with track id: ${f.screenTrack.id} in browser`
                      ),
                      f.screenTrack
                    );
                  } catch (y) {
                    if (y.name !== "NotAllowedError")
                      throw (
                        (f.log.error(
                          `Error: ${y.name} while trying to screen share in browser`
                        ),
                        (0, o.k)(a.EventId.CALLS_GET_USER_MEDIA_ERROR_SCREEN, {
                          error: y.name,
                        }),
                        y)
                      );
                    return null;
                  }
                }
                try {
                  const y = {
                    audio: !1,
                    video: {
                      mandatory: {
                        chromeMediaSource: "desktop",
                        chromeMediaSourceId: I,
                        maxFrameRate: 15,
                      },
                    },
                  };
                  if (!(0, d.uF)()) {
                    const p = yield f.getScreenDetailsByMediaSourceId(I);
                    p &&
                      p.bounds &&
                      ((y.video.mandatory.maxWidth = p.bounds.width),
                      (y.video.mandatory.maxHeight = p.bounds.height));
                  }
                  const M = yield m.mediaDevices.getUserMedia(y);
                  return (
                    (f.screenTrack = M.getTracks()[0]),
                    f.log.info(
                      "Start screen sharing with track id:",
                      f.screenTrack.id,
                      "and mediaSourceId:",
                      I
                    ),
                    f.screenTrack
                  );
                } catch (y) {
                  throw (
                    (f.log.error(`Error: ${y.name} for screen ${I}`),
                    (0, o.k)(a.EventId.CALLS_GET_USER_MEDIA_ERROR_SCREEN, {
                      error: y.name,
                    }),
                    y)
                  );
                }
              })();
            }
            stopCapturingScreen() {
              if (!this.screenTrack) {
                (0, i.M)("No screenTrack to stop.");
                return;
              }
              this.screenTrack.stop();
              const I = this.screenTrack.id;
              return (
                delete this.screenTrack,
                this.log.info("Stop screen sharing track id:", I),
                I
              );
            }
            clearScreenTrack() {
              delete this.screenTrack;
            }
            getScreenDetailsByMediaSourceId(I) {
              var f = this;
              return (0, t.coroutine)(function* () {
                let y;
                const M = yield f.getScreenThumbnails();
                return M && (y = M.find((p) => p.mediaSourceId === I, M)), y;
              })();
            }
            constructor() {
              this.log = (0, n.tZ)("SCREENS");
            }
          },
          "ScreenManager"
        );
        function T(g, I) {
          if (!I.length) {
            g.error("No screens available");
            return;
          }
          const f = new r.M([
            "id",
            "width",
            "height",
            "x",
            "y",
            "scaleFactor",
            "rotation",
          ]);
          I.forEach((y) => {
            f.add(
              [
                y.id,
                y.bounds.width,
                y.bounds.height,
                y.bounds.x,
                y.bounds.y,
                y.scaleFactor,
                y.rotation,
              ].map(String)
            );
          }),
            g.info(`Available screens:
${f.report()}`);
        }
        _(T, "logDisplays");
      },
      4708000837: (W, A, e) => {
        "use strict";
        e.d(A, {
          Y: () => t,
        });
        function t(n) {
          const s = (n || "").split("-");
          return s && (s.length === 3 || s.length === 4) ? s[1] : null;
        }
        _(t, "getCallIdFromExternalId");
      },
      8405076696: (W, A, e) => {
        "use strict";
        e.d(A, {
          n: () => t,
        });
        function t(n) {
          let { width: s, height: i, top: d, left: o } = n;
          return {
            position: "absolute",
            width: `${s}px`,
            height: `${i}px`,
            top: `${d}px`,
            left: `${o}px`,
          };
        }
        _(t, "cssForRect");
      },
      6117529990: (W, A, e) => {
        "use strict";
        e.d(A, {
          BD: () => s,
          OV: () => n,
          XY: () => d,
          wn: () => i,
          zq: () => o,
        });
        var t = e(4761125736);
        function n(a) {
          return (0, t._Z)(a, "calls_chime_sdk_exp") === "enabled";
        }
        _(n, "isCallsChimeSdkExpEnabled");
        const s = _(
            (a) => (0, t._Z)(a, "calls_org_app_settings") === "treatment",
            "isCallsOrgAppsSettingsExperimentEnabled"
          ),
          i = _(
            (a) => (0, t._Z)(a, "calls_tracing_disabled") === "treatment",
            "isCallsTracingDisabled"
          ),
          d = _(
            (a) => (0, t._Z)(a, "calls_location_lock") === "treatment",
            "isCallsLocationLockEnabled"
          ),
          o = _(
            (a) =>
              (0, t._Z)(a, "calls_disable_screenshare_border") === "treatment",
            "isCallsScreenShareBorderDisabled"
          );
      },
      2004048777: (W, A, e) => {
        "use strict";
        e.d(A, {
          $: () => d,
          Y: () => i,
        });
        var t = e(2615100822),
          n = e(2825968873),
          s = e(796111729);
        function i(o) {
          let { direction: a, type: r, payload: c } = o;
          const u = (0, t.A)() ? "slack" : "call",
            l = "INTER-WINDOW-MESSAGE";
          ((0, t.A)()
            ? (0, n.tZ)(l)
            : (0, s.Wo)({
                label: l,
              })
          ).info(
            `${a === "send" ? "Sending" : "Received"} ${r} ${
              a === "send" ? "to" : "from"
            } the ${u} window${c ? `, with payload: ${JSON.stringify(c)}` : ""}`
          );
        }
        _(i, "logInterWindowMessage");
        function d(o) {
          function a(r, c, u) {
            let l =
              arguments.length > 3 && arguments[3] !== void 0
                ? arguments[3]
                : !0;
            o(c, u, l),
              r.sendData({
                type: c,
                payload: u,
              });
          }
          return _(a, "sendMessage"), a;
        }
        _(d, "createInterWindowMessageSender");
      },
      1371073900: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => n,
        });
        var t = e(571104883);
        function n() {
          return !(0, t.j9)() && (0, t.y3)();
        }
        _(n, "isDrawSupported");
      },
      6267571562: (W, A, e) => {
        "use strict";
        e.d(A, {
          G: () => n,
        });
        var t = e(8403493408);
        class n {
          get subscriberCount() {
            return this.subscribers.length;
          }
          subscribe(i) {
            this.subscribers.push(i);
          }
          unsubscribe(i) {
            (0, t.A)(this.subscribers, i);
          }
          publish(i) {
            this.subscribers.forEach((d) => {
              d(i);
            });
          }
          constructor() {
            this.subscribers = [];
          }
        }
        _(n, "PubSub");
      },
      6155974509: (W, A, e) => {
        "use strict";
        e.d(A, {
          X: () => E,
          a: () => T,
        });
        var t = e(571104883),
          n = e(4387298515),
          s = e(2825968873),
          i = e(2615100822),
          d = e(796111729),
          o = e(6117529990);
        const a = 2e3,
          r = 6,
          c = 0 / 265,
          u = 255 / 265,
          l = 53 / 265,
          m = 1,
          v = "SCREEN-SHARE",
          E = _((g, I) => {
            !(0, t.j9)() &&
              (0, t.dY)("4.13.1") &&
              !(0, o.zq)(I) &&
              ((0, n.$m)(g, a),
              (0, n.VR)(g),
              (0, n.D0)(r),
              (0, n.Mh)(c, u, l, m),
              (0, n.Ac)(),
              ((0, i.A)()
                ? (0, s.tZ)(v)
                : (0, d.Wo)({
                    label: v,
                  })
              ).info("Screenshare border added"));
          }, "showBorderForWindowOrScreenId"),
          T = _(() => {
            !(0, t.j9)() &&
              (0, t.dY)("4.13.1") &&
              ((0, n.th)(),
              ((0, i.A)()
                ? (0, s.tZ)(v)
                : (0, d.Wo)({
                    label: v,
                  })
              ).info("Screenshare border removed"));
          }, "hideScreenShareWindowBorder");
      },
      7304871158: (W, A, e) => {
        "use strict";
        e.d(A, {
          R: () => i,
        });
        var t = e(7299481592),
          n = e(2615100822),
          s = e(2004048777);
        const i = (0, s.$)(function (d, o) {
          let a =
            arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
          (0, t.M)(
            !(0, n.A)(),
            "Expected to send message from the slack window"
          ),
            (0, s.Y)({
              direction: "send",
              type: d,
              payload: a ? o : "REDACTED",
            });
        });
      },
      336376314: (W, A, e) => {
        "use strict";
        e.d(A, {
          M: () => n,
        });
        var t = e(9118672869);
        class n {
          add(i) {
            this.rows.push(i), this.adjustPadding(i);
          }
          report() {
            const i = this.padding.map((o) => "-".repeat(o));
            return (this.columnNames ? [i, this.columnNames, i] : [])
              .concat(this.rows)
              .reduce(
                (o, a) =>
                  o +
                  a.reduce(
                    (r, c, u) =>
                      r +
                      (0, t.A)(c, this.padding[u]) +
                      (u !== a.length - 1
                        ? ` ${this.separator} `
                        : `
`),
                    ""
                  ),
                ""
              );
          }
          adjustPadding(i) {
            this.padding = i.map((d, o) =>
              Math.max(d.length, this.padding[o] || 0)
            );
          }
          constructor(i, d = "|") {
            (this.columnNames = i),
              (this.separator = d),
              (this.padding = []),
              (this.rows = []),
              this.columnNames && this.adjustPadding(this.columnNames);
          }
        }
        _(n, "StringTable");
      },
      5954792826: (W, A, e) => {
        "use strict";
        e.d(A, {
          l: () => t,
        });
        function t(n) {
          const s = (n || "").split("-");
          return s && (s.length === 3 || s.length === 4) ? s[2] : null;
        }
        _(t, "getUserIdFromExternalId");
      },
      1151228631: (W, A, e) => {
        "use strict";
        e.d(A, {
          uM: () => Ee,
          Gf: () => Se,
          lQ: () => be,
        });
        var t = e(6188550760),
          n = e(9706240641),
          s = e(3202757386),
          i = e(2664504268),
          d = e(6533394955),
          o = e(2567914105),
          a = e(4529239752),
          r = e(8628205589),
          c = e(3193155968),
          u = e(9108490430),
          l = e(4096483543),
          m = e(8224196674),
          v = e(109860581),
          E = e(3034856104),
          T = e(8172368937),
          g = e(3642543842),
          I = e(1031947056),
          f = e(8720458890);
        const y = (0, I.Ay)(
          "Determine if fullscreen mode is enabled",
          (Ce, Z) => {
            const $ = Z();
            return (0, f.V)($);
          }
        );
        y.meta = {
          name: "createThunk",
          key: "createThunkgetIsFullscreenEnabled",
          description: "Determine if fullscreen mode is enabled",
        };
        var M = e(9553287e3),
          p = e(8646192222),
          O = e(3875705815),
          C = e(8854307618),
          h = e(7606925238),
          D = e(5223893135),
          P = e(5925742547),
          S = e(9012396182);
        const b = _(
            (Ce, Z) =>
              !(!(0, p.mL)(Ce) || (0, O.V)(Ce) || Z[c.jf] !== c.k6.BBM),
            "shouldPreventBBMHistory"
          ),
          K = _((Ce, Z, $) => {
            if (!(0, p.iB)(Ce) || (0, D.V)(Ce)) return !1;
            const N = (0, d.getStateForClientStore)();
            if (
              (S.getFocusedWorkspace === null ||
              S.getFocusedWorkspace === void 0
                ? void 0
                : (0, S.getFocusedWorkspace)(N)) !== $
            )
              return !1;
            const L = (0, a.jo)(N),
              w = Z[c.jf],
              k = L[c.jf];
            if (w !== k) return !1;
            const J = Z[w],
              ee = L[k];
            return !!(0, P.A)(J, ee);
          }, "shouldPreventDuplicateHistory"),
          x = (0, I.Ay)(
            "Maybe prevent default handling of history on pop state",
            (Ce, Z, $) => {
              let { current: N, index: L, teamId: w } = $;
              const k = Z();
              if (!b(k, N) && !K(k, N, w)) return !1;
              const J = (0, d.getStateForClientStore)(),
                ee = (0, a.XG)(J),
                ne = L > ee;
              if (ne) {
                if ((0, a.yS)(J)) return !0;
              } else if ((0, a.m6)(J)) return !0;
              return Ce((ne ? C.r : h.h)()), !0;
            }
          );
        x.meta = {
          name: "createThunk",
          key: "createThunkmaybePreventHistoryOnPopState",
          description: "Maybe prevent default handling of history on pop state",
        };
        var B = e(2554594353);
        function U(Ce) {
          return R.apply(this, arguments);
        }
        _(U, "onPopState");
        function R() {
          return (
            (R = (0, n.coroutine)(function* (Ce) {
              const Z = Ce.state;
              if (!(Z != null && Z.teamId) || !(Z != null && Z.id)) return;
              const $ = (0, d.getClientStoreInstance)();
              if (!$) return;
              const N = $.getState,
                L = $.dispatch;
              if (!N || !L) return;
              const w = (0, a.jR)(N()),
                k = w.findIndex((ye) => ye.id === Z.id);
              if (k < 0) return;
              const J = (0, a.XG)(N()),
                ee = w[J],
                ne = Z.state[c.jf];
              if (
                (0, d.dispatchForTeamId)(
                  Z.teamId,
                  x({
                    current: Z.state,
                    index: k,
                    teamId: Z.teamId,
                  })
                )
              )
                return;
              var Me;
              const ke =
                  (Me = Z.state[ne]) !== null && Me !== void 0
                    ? Me
                    : (0, c.DP)(ne),
                ge = (0, E.H)(ee) ? ee[c.jf] : void 0,
                fe = (0, E.H)(ee) && ge ? ee[ge] : void 0,
                { viewSet: re } = yield (0, d.dispatchForTeamId)(
                  Z.teamId,
                  (0, g.F)({
                    context: T.b.HistoryStack,
                    prevViewSet: fe,
                    prevTab: ge,
                    nextViewSet: ke,
                    nextTab: ne,
                    windowId: c.N2,
                  })
                );
              (Z.state[ne] = re ?? ke),
                L(
                  (0, r.cM)({
                    windowId: c.N2,
                    index: k,
                    previousIndex: J,
                  })
                ),
                (0, d.dispatchForTeamId)(Z.teamId, (0, u.cQ)(Z.state)),
                (S.getFocusedWorkspace === null ||
                S.getFocusedWorkspace === void 0
                  ? void 0
                  : (0, S.getFocusedWorkspace)(N())) !== Z.teamId &&
                  L(
                    B.b === null || B.b === void 0
                      ? void 0
                      : (0, B.b)({
                          teamId: Z.teamId,
                          fromNavigation: !0,
                        })
                  );
              const Re = (0, d.dispatchForTeamId)(Z.teamId, y())
                ? (0, d.dispatchForTeamId)(
                    Z.teamId,
                    (0, M.n)({
                      id: Z.id,
                    })
                  )
                : void 0;
              (0, d.dispatchForTeamId)(
                Z.teamId,
                (0, m.C)({
                  prevViewSet: fe,
                  prevTab: ge,
                  nextViewSet: ke,
                  nextTab: ne,
                  windowId: c.N2,
                  navigateParams: {
                    destinationContainer: Re,
                  },
                  triggerType: v.w.HISTORY_NAVIGATION,
                })
              );
            })),
            R.apply(this, arguments)
          );
        }
        _(R, "_onPopState");
        function G(Ce) {
          if (!isSonic()) return;
          const Z = Ce.state;
          if (!(Z != null && Z.id)) return;
          const $ = getClientStoreInstance();
          if (!$) return;
          const N = $.getState,
            L = $.dispatch;
          if (!N || !L) return;
          const k = getHistoryForMainWindow(N()).findIndex(
            (ee) => ee.id === Z.id
          );
          if (k < 0) return;
          const J = getHistoryIndexForMainWindow(N());
          L(
            updateIndexForMainWindow({
              windowId: MainWindowId,
              index: k,
              previousIndex: J,
            })
          );
        }
        _(G, "onIA3PopState");
        var H = e(1642614792),
          F = e(8289899277),
          V = e(472899830),
          X = e(796111729);
        function q(Ce) {
          return oe.apply(this, arguments);
        }
        _(q, "navigateAfterPopState");
        function oe() {
          return (
            (oe = (0, n.coroutine)(function* (Ce) {
              var Z;
              if (!(0, s.A)()) return;
              if (
                !(Ce == null || (Z = Ce.state) === null || Z === void 0) &&
                Z.isIA4
              ) {
                (V.p.prevNavigatedTeamOrEnterpriseId = Ce.state.teamId), U(Ce);
                return;
              }
              const $ = (0, H.oI)(),
                N = (0, F.f)(),
                L = (0, t.A_)(),
                w = (0, d.getStoreInstanceByTeamId)(
                  V.p.prevNavigatedTeamOrEnterpriseId
                ),
                k = w ? (0, o.oY)(w.getState()) : !1,
                J = (0, i.A)().slice(0, 8);
              if (
                ((0, X.Wo)().info(
                  "ROUTES",
                  `[${J}]`,
                  `[${N.routeName}]`,
                  "Attempting to popstate navigate to new route",
                  N.params
                ),
                (yield (0, t.$C)({
                  prevTeamOrEnterpriseId: V.p.prevNavigatedTeamOrEnterpriseId,
                  nextTeamOrEnterpriseId: $,
                  prevRouteInfo: V.p.popstatePrevRouteInfo,
                  routeName: N.routeName,
                  params: N.params,
                  reason: t.GB,
                  uuid: J,
                })) === !1 || k === !0)
              ) {
                (0, X.Wo)().info(
                  "ROUTES",
                  `[${J}]`,
                  `[${N.routeName}]`,
                  "willNavigateListener caused early exit"
                ),
                  window.history.forward();
                return;
              }
              if (
                ((0, t.OX)({
                  prevTeamOrEnterpriseId: V.p.prevNavigatedTeamOrEnterpriseId,
                  nextTeamOrEnterpriseId: $,
                  prevRouteInfo: V.p.popstatePrevRouteInfo,
                  routeName: N.routeName,
                  params: N.params,
                  reason: t.GB,
                  uuid: J,
                }),
                (0, X.Wo)().info(
                  "ROUTES",
                  `[${J}]`,
                  `[${N.routeName}]`,
                  "Navigated to new route"
                ),
                (V.p.prevNavigatedTeamOrEnterpriseId = $),
                L && typeof L.onEnter == "function")
              ) {
                const ne = (0, d.getStoreInstanceByTeamId)($);
                L.onEnter.call(
                  null,
                  ne.getState,
                  null,
                  window.location.pathname
                );
              }
            })),
            oe.apply(this, arguments)
          );
        }
        _(oe, "_navigateAfterPopState");
        const z = _(() => {
          window.addEventListener("popstate", q);
        }, "addPopStateListener");
        var Ae = e(9733150292),
          ae = e(7515251865),
          de = e(210422728),
          ve = e(3080748521);
        z();
        function Se() {
          let { store: Ce, shouldSetFocus: Z } =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          const $ = (0, F.f)(window.location.pathname, {
            throwOnNoRoute: !1,
          });
          if ($ && Z && $.routeName !== ae.o) return $;
          if (!Ce) return null;
          const N = (0, ve.D8)(Ce.getState()),
            L = (0, ve.MC)(Ce.getState()),
            w = {
              routeName: N,
              params: L,
            };
          return (0, t.EB)(w) ? w : null;
        }
        _(Se, "determineCurrentView");
        function Ee() {
          return (0, t.Dd)((Ce) => {
            let { nextTeamId: Z, routeName: $, params: N } = Ce;
            (0, d.getStoreInstanceByTeamId)(Z) &&
              (0, d.dispatchForTeamId)(
                Z,
                (0, de.w)({
                  routeName: $,
                  params: N,
                })
              );
          });
        }
        _(Ee, "configureUpdateCurrentRoute");
        function be(Ce) {
          const Z = (0, Ae._z)(Ce, "lastRoute");
          return (0, t.EB)(Z) ? Z : null;
        }
        _(be, "getLastRouteFromLocalConfig");
      },
      210422728: (W, A, e) => {
        "use strict";
        e.d(A, {
          T: () => s,
          w: () => n,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Navigate to a route");
        n.meta = {
          name: "createAction",
          key: "createActionupdateCurrentRoute",
          description: "Navigate to a route",
        };
        const s = (0, t.Ay)(
          "Set a value that represents whether the user navigated during a warm boot"
        );
        s.meta = {
          name: "createAction",
          key: "createActionsetUserNavigatedDuringWarmBoot",
          description:
            "Set a value that represents whether the user navigated during a warm boot",
        };
      },
      8204430196: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => r,
        });
        var t = e(5824283093),
          n = e(9113979368),
          s = e(2562405183),
          i = e(1030162945),
          d = e(2374999399),
          o = e(6818330210);
        function a(c) {
          let {
            memberId: u,
            className: l,
            emoji: m,
            emojiSize: v,
            showTooltips: E,
            stopAnimations: T,
          } = c;
          const g = (0, s.F3)((y) => (0, d.A)(y, u));
          if (!u || !m) return null;
          const { name: I = m, url: f = void 0 } = g
            ? (0, o.H)(m, (0, n.A)(g) ? void 0 : g)
            : {};
          return t.createElement(i.Ay, {
            className: l,
            emojiSize: v || i.lw.SMALL,
            iconInTextMode: !0,
            isEmojiInlineWithText: !0,
            showTooltip: !!E,
            stopAnimations: !!T,
            text: I,
            url: f,
          });
        }
        _(a, "CustomStatusEmoji"), (a.displayName = "CustomStatusEmoji");
        const r = t.memo(a);
      },
      6710730141: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => u,
        });
        var t = e(5824283093),
          n = e(735940183),
          s = e(2406011273),
          i = e(9391594207),
          d = e(1345620242),
          o = e(2047021170);
        const a = new n.Ay("current_status");
        function r(l) {
          let { className: m, expiration: v, time24: E } = l;
          if (!v) return null;
          const T = v * 1e3,
            g = a.t("Until {expirationDate}", {
              expirationDate: (0, s.A)(T, "{status_expiration}", {
                do24hrTime: E,
                shouldCapitalize: !1,
              }),
            });
          return t.createElement(
            "span",
            {
              className: m,
              "data-qa-status-expiration": v,
            },
            g
          );
        }
        _(r, "CustomStatusExpiration"),
          (r.displayName = "CustomStatusExpiration");
        function c(l, m) {
          let { memberId: v } = m;
          return {
            expiration: (0, d.A)(l, v || "") || 0,
            time24: !!(0, o.ty)(l, "time24"),
          };
        }
        _(c, "mapStateToProps");
        const u = (0, i.N)(c)(r);
      },
      5530660703: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => a,
        });
        var t = e(5824283093),
          n = e(2562405183),
          s = e(1030162945),
          i = e(2374999399),
          d = e(7969928607);
        function o(r) {
          let {
            memberId: c,
            className: u,
            emojiSize: l,
            showTooltips: m,
            stopAnimations: v,
            text: E,
          } = r;
          const T = (0, n.F3)((g) => (c ? (0, i.A)(g, c) : void 0));
          return E
            ? t.createElement(
                "span",
                {
                  className: u,
                  "data-qa": "custom_status_text",
                },
                t.createElement(d.A, {
                  text: E,
                  inputIsEscaped: !0,
                  emojiSize: l || s.lw.MEDIUM,
                  showTooltips: !!m,
                  stopAnimations: !!v,
                  emojiDisplayInfo: T,
                })
              )
            : null;
        }
        _(o, "CustomStatusText"), (o.displayName = "CustomStatusText");
        const a = t.memo(o);
      },
      7278430876: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => y,
        });
        var t = e(5824283093),
          n = e(2562405183),
          s = e(5255740490),
          i = e(193084903),
          d = e(2312625946),
          o = e(1030162945),
          a = e(8204430196),
          r = e(2072540560),
          c = e(8276911661),
          u = e(8170643398),
          l = e(2689960678),
          m = e(5530660703);
        function v() {
          return (
            (v =
              Object.assign ||
              function (M) {
                for (var p = 1; p < arguments.length; p++) {
                  var O = arguments[p];
                  for (var C in O)
                    Object.prototype.hasOwnProperty.call(O, C) && (M[C] = O[C]);
                }
                return M;
              }),
            v.apply(this, arguments)
          );
        }
        _(v, "_extends");
        const E = {
            noLinking: !1,
          },
          T = _((M) => {
            let {
              stopAnimations: p = !1,
              noText: O = !1,
              className: C,
              memberId: h = "",
              noLinking: D,
              showEmojiTooltip: P = !1,
              insertTextSpacing: S = !1,
              displayInMemberProfile: b = !1,
              emoji: K,
            } = M;
            const x = (0, n.d4)((R) => (0, r.A)(R, h)),
              B = (0, n.d4)((R) => (0, u.fy)((0, c.nv)(R, h)));
            let U = l.t0;
            return (
              D === !1 && (U = E),
              b
                ? t.createElement(
                    "span",
                    {
                      className: C,
                    },
                    t.createElement(a.A, {
                      memberId: h,
                      emoji: K,
                      stopAnimations: p,
                      showTooltips: P,
                      emojiSize: o.lw.MEDIUM,
                      className: "c-custom_status__emoji_in_member_profile",
                    }),
                    x &&
                      t.createElement(
                        m.A,
                        v(
                          {
                            memberId: h,
                            className: (0, s.A)(
                              "margin_left_50",
                              "padding_right_50",
                              {
                                margin_right_100: B,
                              }
                            ),
                            emojiSize: o.lw.SMALL,
                            stopAnimations: p,
                            text: O ? "" : x,
                          },
                          U
                        )
                      )
                  )
                : t.createElement(
                    "span",
                    {
                      className: C,
                    },
                    t.createElement(a.A, {
                      memberId: h,
                      showTooltips: P,
                      emojiSize: o.lw.SMALL,
                      emoji: K,
                      stopAnimations: p,
                    }),
                    x &&
                      t.createElement(
                        m.A,
                        v(
                          {
                            memberId: h,
                            className: S ? "margin_left_50" : "margin_left_25",
                            emojiSize: o.lw.SMALL,
                            stopAnimations: p,
                            text: O ? "" : x,
                          },
                          U
                        )
                      )
                  )
            );
          }, "CustomStatusTooltipContent");
        T.displayName = "CustomStatusTooltipContent";
        const g = t.memo(T);
        var I = e(6710730141);
        const f = _((M) => {
          let {
            animated: p = !1,
            tooltip: O = !0,
            tipPosition: C,
            noText: h = !1,
            className: D,
            memberId: P = "",
            noLinking: S,
            showEmojiTooltip: b = !1,
            insertTextSpacing: K = !1,
            displayInMemberProfile: x = !1,
          } = M;
          const B = (0, n.d4)((R) => (0, i.A)(R, P)),
            U = (0, t.useCallback)(
              () =>
                t.createElement(
                  t.Fragment,
                  null,
                  t.createElement(g, {
                    className: "c-custom_status__tooltip",
                    noText: h,
                    memberId: P,
                    noLinking: S,
                    showEmojiTooltip: b,
                    insertTextSpacing: K,
                    displayInMemberProfile: x,
                    emoji: B,
                  }),
                  t.createElement(I.A, {
                    className: "c-custom_status__expiration",
                    memberId: P,
                  })
                ),
              [P, h, S, b, K, x, B]
            );
          return B
            ? O
              ? t.createElement(
                  d.Ay,
                  {
                    tip: U,
                    position: C,
                    zIndex: "above_fs",
                    "data-qa": "custom_status_tooltip",
                  },
                  t.createElement(
                    "span",
                    {
                      className: (0, s.A)("c-custom_status", D),
                      "data-qa": "custom_status",
                    },
                    t.createElement(a.A, {
                      memberId: P,
                      showTooltips: !1,
                      emojiSize: o.lw.SMALL,
                      emoji: B,
                      stopAnimations: !p,
                    })
                  )
                )
              : t.createElement(g, {
                  className: (0, s.A)(
                    D,
                    "c-custom_status",
                    "c-custom_status--inline",
                    {
                      display_flex: x,
                    }
                  ),
                  stopAnimations: !p,
                  noText: h,
                  memberId: P,
                  noLinking: S,
                  showEmojiTooltip: b,
                  insertTextSpacing: K,
                  displayInMemberProfile: x,
                  emoji: B,
                })
            : null;
        }, "CustomStatus");
        f.displayName = "CustomStatus";
        const y = t.memo(f);
      },
      2486585453: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => s,
          j: () => n.A,
        });
        var t = e(7278430876),
          n = e(6710730141);
        const s = t.A;
      },
      9580887194: (W, A, e) => {
        "use strict";
        e.d(A, {
          E: () => d,
          a: () => o,
        });
        var t = e(9936232041),
          n = e(9609912577),
          s = e(1031947056),
          i = e(6440800009);
        const d = (0, s.Ay)(
          "Opens the AddCustomEmojiModal for importing a custom emoji",
          (a, r, c) => {
            let { emojiName: u, emojiUrl: l } = c;
            var m;
            a(
              (0, n.A)({
                emojiNameSuggestion:
                  u &&
                  ((m = (0, t.A)(u)) === null || m === void 0
                    ? void 0
                    : m.name),
                emojiUrl: l,
              })
            );
          }
        );
        d.meta = {
          name: "createThunk",
          key: "createThunkopenImportExternalEmojiModal",
          description:
            "Opens the AddCustomEmojiModal for importing a custom emoji",
        };
        const o = (0, s.Ay)(
          "Opens the AddCustomEmojiModal if an emoji can be imported",
          (a, r, c) => {
            const u = r(),
              { event: l, emojiName: m, emojiUrl: v } = c;
            v &&
              (0, i.LU)(u, v, m) &&
              (l == null || l.preventDefault(),
              l == null || l.stopPropagation(),
              a(d(c)));
          }
        );
        o.meta = {
          name: "createThunk",
          key: "createThunkmaybeOpenImportExternalEmojiModal",
          description:
            "Opens the AddCustomEmojiModal if an emoji can be imported",
        };
      },
      8021873188: (W, A, e) => {
        "use strict";
        e.d(A, {
          K: () => o,
        });
        var t = e(5824283093),
          n = e(735940183),
          s = e(8683010724),
          i = e(6440800009);
        const d = new n.Ay("import-external-emoji");
        function o(a) {
          let { emojiUrl: r, emojiName: c } = a;
          return (0, i.tJ)(r, c)
            ? t.createElement(
                "div",
                {
                  className: "margin_top_50",
                },
                t.createElement(s.A, {
                  name: "right-click",
                  inline: !0,
                  size: "18",
                }),
                t.createElement(
                  "span",
                  {
                    className: "margin_left_25",
                  },
                  d.t("Right click to add to your organization")
                )
              )
            : null;
        }
        _(o, "ImportExternalEmojiTooltipInfo"),
          (o.displayName = "ImportExternalEmojiTooltipInfo");
      },
      6440800009: (W, A, e) => {
        "use strict";
        e.d(A, {
          $N: () => x,
          LU: () => h,
          pg: () => P,
          tJ: () => D,
        });
        var t = e(8701485242),
          n = e(4921059838),
          s = e(9936232041),
          i = e(2689960678),
          d = e(317660850),
          o = e(6790819894),
          a = e(3677514771),
          r = e(2757639362),
          c = e(6839188756),
          u = e(5795074931),
          l = e(6457401668),
          m = e(2562405183),
          v = e(2384831516),
          E = e(7606781622),
          T = e(5757070316),
          g = e(9608713960),
          I = e(6783791506),
          f = e(4813703725);
        const y = _((B) => {
            var U;
            return Array.isArray(
              (U = B) === null || U === void 0 ? void 0 : U.elements
            );
          }, "hasElements"),
          M = _((B, U) => (0, t.Ay)(B.emojiName, U.emojiName), "emojiNameSort"),
          p = new Set([
            "black_square",
            "bowtie",
            "cubimal_chick",
            "dusty_stick",
            "glitch_crab",
            "piggy",
            "pride",
            "shipit",
            "slack_call",
            "slack",
            "squirrel",
            "thumbsup_all",
            "white_square",
            "simple_smile",
          ]);
        function O(B) {
          var U;
          const R =
            (U = (0, s.A)(B)) === null || U === void 0 ? void 0 : U.name;
          return !!R && p.has(R);
        }
        _(O, "isBuiltInEmoji");
        function C(B, U, R) {
          return decodeURIComponent(U).includes((0, r.w)())
            ? !1
            : !(R && ((0, n.A)(B, R) || O(R)));
        }
        _(C, "isCustomEmoji");
        const h = (0, v.Mz)((B, U, R) => {
          if (!(U && (0, u.TZ)(B) && C(B, U, R) && (0, d.D)(B))) return !1;
          const H = (0, a.Yc)(B);
          var F;
          const V =
              (F = H == null ? void 0 : H.id) !== null && F !== void 0 ? F : "",
            X = (0, c.Ic)(H);
          return (
            !!X &&
            U.indexOf((0, c.k7)(V, X)) === -1 &&
            U.indexOf(V.slice(1)) === -1
          );
        });
        h.meta = {
          name: "createSelector",
          key: "createSelectorcanUserImportEmoji",
          description: (B, U, R) => {
            if (!(U && (0, u.TZ)(B) && C(B, U, R) && (0, d.D)(B))) return !1;
            const H = (0, a.Yc)(B);
            var F;
            const V =
                (F = H == null ? void 0 : H.id) !== null && F !== void 0
                  ? F
                  : "",
              X = (0, c.Ic)(H);
            return (
              !!X &&
              U.indexOf((0, c.k7)(V, X)) === -1 &&
              U.indexOf(V.slice(1)) === -1
            );
          },
        };
        function D(B, U) {
          return (0, m.d4)((R) => h(R, B, U));
        }
        _(D, "useCanImportThisEmoji");
        function P(B) {
          return (0, m.d4)((U) =>
            B.find((R) =>
              h(U, R == null ? void 0 : R.url, R == null ? void 0 : R.name)
            )
          );
        }
        _(P, "useFindFirstImportEmojiFromArray");
        function S(B, U) {
          for (const R of U || [])
            (0, I.E)(R)
              ? R.display_url &&
                B.set(R.display_url, {
                  emojiName: R.name,
                  emojiUrl: R.display_url,
                })
              : y(R) && S(B, R.elements);
        }
        _(S, "collectMessageEmojis");
        function b(B, U) {
          for (const { name: R, url: G } of U || [])
            G &&
              B.set(G, {
                emojiName: R,
                emojiUrl: G,
              });
        }
        _(b, "collectMessageReactjis");
        const K = (0, o.F)(
            (B, U) => U,
            (B, U) => (0, g.bk)(B, (0, T.J)(U)),
            (B, U) => {
              const R = new Map();
              return b(R, U), S(R, B.blocks), [...R.values()].sort(M);
            }
          ),
          x = (0, f.eI)((B, U) => {
            let { channelId: R, ts: G } = U;
            if (!(0, d.D)(B) || !(0, u.TZ)(B)) return i.Ml;
            const H = (0, E.Ld)(B, R, G);
            return !H || (0, l.aK)(H)
              ? i.Ml
              : K(B, H).filter((F) => {
                  let { emojiName: V, emojiUrl: X } = F;
                  return h(B, X, V);
                });
          });
      },
      5624319675: (W, A, e) => {
        "use strict";
        e.d(A, {
          m: () => n,
        });
        var t = e(4761125736);
        const n = _(
          (s) => (0, t._Z)(s, "agentforce") === "on",
          "isAgentforceEnabled"
        );
      },
      5892132962: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ep: () => l,
          sc: () => m,
        });
        var t = e(9548888903),
          n = e(2035393855),
          s = e(1407713935);
        const i = {
            name: "sf-opportunity",
            variation: "filled",
          },
          d = {
            name: "sf-account",
            variation: "filled",
          },
          o = {
            name: "sf-case",
            variation: "filled",
          },
          a = {
            name: "sf-lead",
            variation: "filled",
          },
          r = {
            name: "sf-contact",
            variation: "filled",
          },
          c = {
            name: "sf-cloud",
            variation: "filled",
          },
          u = {
            name: "headphones",
            variation: "filled",
          };
        function l(v) {
          switch (v) {
            case t.hM.Opportunity:
              return i;
            case t.hM.Account:
              return d;
            case t.hM.Lead:
              return a;
            case t.hM.Case:
              return o;
            case t.hM.Contact:
              return r;
            case t.hM.Org:
            default:
              return c;
          }
        }
        _(l, "getSalesforceObjectTypeIconProps");
        function m(v) {
          if (!(0, s.rI)(v)) return null;
          const E = (0, n.LJ)(v);
          switch ((0, n.fI)(E == null ? void 0 : E.record_id)) {
            case t.B4.Huddle:
              return u;
            default:
              return null;
          }
        }
        _(m, "getRecordChannelOverrideIconProps");
      },
      7244076749: (W, A, e) => {
        "use strict";
        e.d(A, {
          b: () => n,
        });
        var t = e(4724591729);
        function n() {
          return (0, t.b3)();
        }
        _(n, "isSlackKitPlaygroundEnabled");
      },
      8005333273: (W, A, e) => {
        "use strict";
        e.d(A, {
          n: () => i,
        });
        var t = e(1439563189),
          n = e(5597672932),
          s = e(4761125736);
        const i = _(
          (d) =>
            !(
              !(0, t.g)(d) ||
              !((0, s._Z)(d, "custom_solution_creation") === "on") ||
              !(0, n.x)(d, "allow_custom_solution_templates")
            ),
          "isCustomSolutionsEnabledForUser"
        );
      },
      3121972076: (W, A, e) => {
        "use strict";
        e.d(A, {
          g: () => a,
        });
        var t = e(5824283093),
          n = e(9132066222),
          s = e(8521790919),
          i = e(2689960678),
          d = e(2562405183),
          o = e(9101533895);
        function a(r) {
          const c = (0, d.d4)((l) => (0, o.OL)(l, r, !1)),
            u = (0, d.d4)((l) => ((0, n.xA)(l, c) ? (0, s.G)(l, r) : i.Ml));
          return (0, t.useMemo)(
            () =>
              c
                ? [
                    ...((u == null ? void 0 : u.filter((m) => !m.isDisabled)) ||
                      []),
                  ]
                : [],
            [u, c]
          );
        }
        _(a, "useDynamicChannelTabs");
      },
      667891291: (W, A, e) => {
        "use strict";
        e.d(A, {
          H: () => r,
          c: () => a,
        });
        var t = e(6217320234),
          n = e(9374064916),
          s = e(7245481391),
          i = e(2562405183);
        const d = [
          s.fY.Channel,
          s.fY.RecordCreate,
          s.fY.RecordOverview,
          s.fY.RecordSummary,
          s.fY.ChannelCanvas,
        ];
        function o(c) {
          const u = d.indexOf(c);
          return u === -1 ? Number.MAX_SAFE_INTEGER : u;
        }
        _(o, "getTabOrderIndex");
        function a(c) {
          return (0, t.A)(c, (u) => o(u.id));
        }
        _(a, "getSortedStaticTabs");
        function r(c) {
          return (0, i.d4)((l) =>
            (0, n.Hv)(l, {
              channelId: c,
            })
          );
        }
        _(r, "useStaticChannelTabs");
      },
      8521790919: (W, A, e) => {
        "use strict";
        e.d(A, {
          G: () => r,
        });
        var t = e(8359728598),
          n = e(362134992),
          s = e(9132066222),
          i = e(2689960678),
          d = e(4813703725),
          o = e(9101533895);
        const a = (0, t.A)(
            (c) => (0, n.A)(c == null ? void 0 : c.map((u) => (0, s._f)(u))),
            2
          ),
          r = (0, d.eI)((c, u) => {
            var l, m;
            const v =
              ((l = (0, o.OL)(c, u, !1)) === null ||
              l === void 0 ||
              (m = l.properties) === null ||
              m === void 0
                ? void 0
                : m.tabs) || i.Ml;
            return a(v);
          });
      },
      5253816611: (W, A, e) => {
        "use strict";
        e.d(A, {
          d: () => u,
        });
        var t = e(362134992),
          n = e(1190344069),
          s = e(7245481391),
          i = e(2689960678),
          d = e(735940183),
          o = e(8359728598),
          a = e(4813703725);
        const r = new d.Ay("tabbed-channel"),
          c = (0, o.A)((l) => {
            let { recordLabel: m, summaryTabEnabled: v } = l;
            return (0, t.A)([
              {
                id: s.fY.RecordOverview,
                type: s.Xy.RecordOverview,
                label: r.t("{recordLabel} details", {
                  recordLabel: m || r.t("Record"),
                }),
              },
              v && {
                id: s.fY.RecordSummary,
                type: s.Xy.RecordSummary,
                label: r.t("Summary"),
              },
            ]);
          }, 2),
          u = (0, a.eI)((l, m) => {
            let { recordType: v, recordLabel: E } = m;
            const T = (0, n.hm)(l),
              g = (0, n.jL)(l);
            return !v || !T
              ? i.Ml
              : c({
                  recordLabel: E,
                  summaryTabEnabled: g,
                });
          });
      },
      9374064916: (W, A, e) => {
        "use strict";
        e.d(A, {
          Hv: () => I,
        });
        var t = e(362134992),
          n = e(6217320234),
          s = e(3385422400),
          i = e(2035393855),
          d = e(9132066222),
          o = e(5253816611),
          a = e(7245481391),
          r = e(6839188756),
          c = e(735940183),
          u = e(6334717308),
          l = e(8359728598),
          m = e(9101533895),
          v = e(3677514771);
        const E = new c.Ay("tabbed-channel"),
          T = (0, l.A)((M) => {
            let { isFreeTier: p, isGovSlack: O } = M;
            return (0, t.A)([
              {
                id: a.fY.Channel,
                type: a.Xy.Channel,
                label: E.t("Messages"),
              },
              !O && {
                id: a.fY.ChannelCanvas,
                type: a.Xy.ChannelCanvas,
                label: E.t("Canvas"),
              },
              !p && {
                id: a.fY.Workflows,
                type: a.Xy.Workflows,
                isDisabled: !0,
                label: E.t("Workflows"),
              },
              {
                id: a.fY.Bookmarks,
                type: a.Xy.Bookmarks,
                isDisabled: !0,
                label: E.t("Bookmarks", {
                  fallbackHash: "ca3cddd25bd8f6bc4ce35a262e2e1398541ecf3d",
                  fallbackHashNs: "bookmarks-bar",
                }),
              },
              {
                id: a.fY.Files,
                type: a.Xy.Files,
                isDisabled: !0,
                label: E.t("Files"),
              },
              {
                id: a.fY.Pins,
                type: a.Xy.Pins,
                isDisabled: !0,
                label: E.t("Pins"),
              },
            ]);
          }),
          g = _(function () {
            let M =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : [],
              p =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : [],
              O = arguments.length > 2 ? arguments[2] : void 0,
              C = arguments.length > 3 ? arguments[3] : void 0;
            const h = new Set(p == null ? void 0 : p.map((S) => S.type)),
              P = [
                ...T({
                  isFreeTier: O,
                  isGovSlack: C,
                }),
                ...M,
              ].filter((S) => !h.has(S.type));
            return f(P);
          }, "getComputedStaticTabs"),
          I = (0, s.Mz)(
            [
              (M, p) => {
                let { channelId: O } = p;
                const C = (0, m.OL)(M, O);
                return (0, o.d)(M, {
                  recordType: (0, i.dM)(C),
                  recordLabel: (0, i.jT)(C),
                });
              },
              (M, p) => {
                let { channelId: O } = p;
                var C, h;
                return (C = (0, m.OL)(M, O)) === null ||
                  C === void 0 ||
                  (h = C.properties) === null ||
                  h === void 0
                  ? void 0
                  : h.tabs;
              },
              (M) => (0, r.tc)((0, v.H7)(M)),
              (M) => (0, u.c)(M),
            ],
            g
          );
        function f(M) {
          return (0, n.A)(M, (p) => y(p.id));
        }
        _(f, "getSortedStaticTabs");
        function y(M) {
          const p = d.s3.indexOf(M);
          return p === -1 ? Number.MAX_SAFE_INTEGER : p;
        }
        _(y, "getTabOrderIndex");
      },
      8981514155: (W, A, e) => {
        "use strict";
        e.d(A, {
          d: () => x,
          H: () => B,
        });
        var t = e(9706240641),
          n = e(5824283093),
          s = e(6122756707),
          i = e(6027162153),
          d = e(9744286524),
          o = e(3121972076),
          a = e(667891291),
          r = e(9132066222),
          c = e(4427921758),
          u = e(3172414072),
          l = e(6698109330),
          m = e(7245481391),
          v = e(5115870218),
          E = e(1783582283),
          T = e(7937864072),
          g = e(1552255081),
          I = e(6334717308),
          f = e(4849735859),
          y = e(2580646391),
          M = e(2562405183),
          p = e(6252535684),
          O = e(9101533895),
          C = e(1031947056),
          h = e(3430841143),
          D = e(4347488242),
          P = e(5534420337),
          S = e(9530687876);
        const b = (0, C.Ay)(
          S.rd.SET_CHANNEL_PROPERTIES_DEFAULT_TAB_ID,
          (U, R, G) => {
            let { channelId: H, defaultTabId: F } = G;
            const V = R(),
              X = !1,
              q = (0, O.OL)(V, H, X);
            if (!H || !q) return;
            let oe;
            try {
              oe = JSON.stringify({
                default_tab_id: F,
              });
            } catch (Ae) {
              (0, P.Ay)({
                getState: R,
              }).error(Ae, "failed serializing new properties");
              return;
            }
            const z = {
              ...q,
              properties: {
                ...(q == null ? void 0 : q.properties),
                default_tab_id: F,
              },
            };
            return (
              U(
                (0, h.F)({
                  channel: z,
                  reason: S.rd.SET_CHANNEL_PROPERTIES_CANVAS_IS_OPEN_BY_DEFAULT,
                })
              ),
              U(
                (0, D.D)({
                  channelId: H,
                  props: oe,
                  reason: "set_channel_canvas_default_tab_id",
                })
              )
                .then(() => {
                  U(
                    (0, h.F)({
                      channel: z,
                      reason:
                        S.rd.SET_CHANNEL_PROPERTIES_CANVAS_IS_OPEN_BY_DEFAULT,
                    })
                  );
                })
                .catch((Ae) => {
                  (0, h.F)({
                    channel: q,
                  });
                })
            );
          }
        );
        b.meta = {
          name: "createThunk",
          key: "createThunksetChannelPropertiesDefaultTabId",
          description: S.rd.SET_CHANNEL_PROPERTIES_DEFAULT_TAB_ID,
        };
        var K = e(4761125736);
        const x = (0, n.createContext)({});
        function B(U) {
          let { channelId: R, children: G, tabParams: H, currentTabId: F } = U;
          var V;
          const X = (0, M.d4)(
              (le) => (0, K._Z)(le, "unified_canvas_tabs_prototype") === "on"
            ),
            q = (0, M.d4)(
              (le) => (0, K._Z)(le, "channel_default_tabs") === "on"
            ),
            oe = (0, M.d4)(
              (le) => (0, K._Z)(le, "saved_channel_active_tabs") === "on"
            ),
            z = (0, M.d4)((le) => (0, p.M)(le, R)),
            Ae = (0, M.d4)((le) => (0, O.OL)(le, R)),
            ae = (0, M.d4)(g.F),
            de = (0, s.wA)(),
            ve = (0, T.A)(),
            Se = (0, a.H)(R),
            Ee = (0, o.g)(R),
            { channelCanvasFileId: be } = (0, d.A)({
              channelId: R,
            }),
            Ce = (0, M.d4)(I.c),
            [Z, $] = (0, n.useState)(!1),
            N = (0, n.useCallback)(() => {
              $(!0),
                de(
                  (0, f.A)({
                    onCreate: (le) => {
                      let { fileId: Re } = le;
                      de(
                        (0, u.P)({
                          channelId: R,
                          type: "canvas",
                          fileId: Re,
                        })
                      ).then((ye) => {
                        $(!1);
                        const Te = ye.tabs,
                          De =
                            Te == null
                              ? void 0
                              : Te.find((Ue) => {
                                  let { data: Ke } = Ue;
                                  return Ke && Ke.file_id === Re;
                                });
                        De &&
                          de(
                            (0, E.i)({
                              channelId: R,
                              id: De.id,
                              reason: "add-channel-tab",
                            })
                          );
                      });
                    },
                    source: y.P.CREATE_CHANNEL_SPACE,
                  })
                );
            }, [R, de]),
            L = (0, n.useMemo)(() => {
              var le;
              let Re = (0, v.L)({
                tabs: [...Se, ...Ee],
                isGovSlack: Ce,
                hasFullCanvasAccess: ae,
              });
              if (
                !(
                  Ae == null ||
                  (le = Ae.properties) === null ||
                  le === void 0
                ) &&
                le.default_tab_id &&
                q
              ) {
                const ye = Re.find(
                  (Te) => Te.id === Ae.properties.default_tab_id
                );
                ye && ((Re = (0, i.A)(Re, ye)), Re.unshift(ye));
              }
              if (
                X &&
                !be &&
                Re.find((ye) => {
                  let { type: Te } = ye;
                  return Te === m.Xy.ChannelCanvas;
                })
              ) {
                const ye = Re.findIndex((Te) => {
                  let { type: De } = Te;
                  return De === m.Xy.ChannelCanvas;
                });
                Re.find((Te) => {
                  let { type: De } = Te;
                  return De === m.Xy.Canvas;
                })
                  ? Re.splice(ye, 1)
                  : Re.splice(ye, 1, {
                      id: Z ? m.fY.CreatingCanvas : m.fY.CreateCanvas,
                      type: m.Xy.CreateCanvas,
                      label: "Canvas",
                      onSelected: N,
                    });
              }
              return Re;
            }, [Se, Ee, X, q, be, Z, N, Ae, Ce, ae]),
            [w, k] = (0, n.useState)(L),
            [J, ee] = (0, n.useState)(!1);
          if (!J && L !== w) {
            const le = L.find((ye) => ye.id === m.fY.CreatingCanvas);
            (F === m.fY.CreatingCanvas && !le) || k(L);
          }
          const ne = q
              ? (V = Ae.properties) === null || V === void 0
                ? void 0
                : V.default_tab_id
              : "",
            pe = oe ? z : "",
            Me =
              (0, r.Fi)(w, F) ||
              (0, r.Fi)(w, pe) ||
              (0, r.Fi)(w, ne) ||
              (0, r.Fi)(w, m.fY.Channel),
            ke = (0, n.useCallback)(
              (function () {
                var le = (0, t.coroutine)(function* (Re) {
                  let { sourceIndex: ye, destinationIndex: Te } = Re;
                  const De = [...w],
                    Ue = [...w],
                    [Ke] = De.splice(ye, 1);
                  De.splice(Te, 0, Ke);
                  const Ze = De[Te - 1];
                  ee(!0),
                    k(De),
                    q &&
                      (Te === 0 && ye !== 0
                        ? yield de(
                            b({
                              channelId: R,
                              defaultTabId: De[0].id,
                            })
                          )
                        : ye === 0 &&
                          Te !== 0 &&
                          (yield de(
                            b({
                              channelId: R,
                              defaultTabId: "",
                            })
                          ))),
                    (yield de(
                      (0, E.i)({
                        channelId: R,
                        id: Ke.id,
                        ...(!!Ze &&
                          !(0, r.PN)(Ze) && {
                            after: Ze.id,
                          }),
                        reason: "updateTabOrder",
                      })
                    )).ok || k(Ue),
                    ee(!1);
                });
                return function (Re) {
                  return le.apply(this, arguments);
                };
              })(),
              [R, de, q, w]
            ),
            ge = (0, n.useCallback)(
              (function () {
                var le = (0, t.coroutine)(function* (Re) {
                  const ye = [...w],
                    Te = [...w],
                    De = ye.findIndex((Ke) => Ke.id === F);
                  if (De < 0) return;
                  (ye[De].label = Re),
                    ee(!0),
                    k(ye),
                    (yield de(
                      (0, l.N)({
                        channelId: R,
                        tabId: F || ne || m.fY.Channel,
                        label: Re,
                        reason: "updateTabLabel",
                      })
                    )).ok || k(Te),
                    ee(!1);
                });
                return function (Re) {
                  return le.apply(this, arguments);
                };
              })(),
              [R, F, ne, de, w]
            ),
            fe = (0, n.useCallback)(
              (function () {
                var le = (0, t.coroutine)(function* (Re) {
                  let { label: ye, value: Te, targetTabId: De } = Re;
                  const Ue = [...w],
                    Ke = [...w],
                    Ze = Ue.findIndex((ie) =>
                      De ? ie.id === De : ie.id === F
                    );
                  if (Ze < 0) return;
                  (Ue[Ze].data = {
                    ...Ue[Ze].data,
                    listsChannelTabDefaultRefineViewId: Te,
                  }),
                    (Ue[Ze].label = ye),
                    ee(!0),
                    k(Ue),
                    (yield de(
                      (0, l.N)({
                        channelId: R,
                        label: ye,
                        tabId: De || F || ne || m.fY.Channel,
                        reason: "updateListTabDefaultViewId",
                        data: {
                          ...Ue[Ze].data,
                          listsChannelTabDefaultRefineViewId: Te,
                        },
                      })
                    )).ok || (k(Ke), ee(!1)),
                    ee(!1);
                });
                return function (Re) {
                  return le.apply(this, arguments);
                };
              })(),
              [R, F, ne, de, w]
            ),
            re = (0, n.useMemo)(
              () => ({
                tabParams: H,
                tabSchema: w,
                channelId: R,
                currentTab: Me,
                updateTabOrder: ke,
                updateTabLabel: ge,
                updateListTabDefaultViewId: fe,
              }),
              [H, w, R, Me, ke, ge, fe]
            );
          return Me
            ? n.createElement(
                x.Provider,
                {
                  value: re,
                },
                n.createElement(
                  c.j.Provider,
                  {
                    value: re,
                  },
                  G
                )
              )
            : (ve.error(new Error("No current channel tab selected.")), null);
        }
        _(B, "TabbedChannelProvider"),
          (B.displayName = "TabbedChannelProvider");
      },
      4427921758: (W, A, e) => {
        "use strict";
        e.d(A, {
          j: () => n,
        });
        var t = e(6152845331);
        const n = (0, t.Ay)("Tabbed channel", {});
      },
      3172414072: (W, A, e) => {
        "use strict";
        e.d(A, {
          P: () => d,
        });
        var t = e(8786006583),
          n = e(2799479478),
          s = e(1031947056),
          i = e(3639008527);
        const d = (0, s.Ay)(
          "Adds a tab to a channel and navigates to that tab",
          (o, a, r) => {
            let {
              channelId: c,
              type: u,
              label: l,
              fileId: m,
              accessLevel: v,
              data: E,
              reason: T = "add-channel-tab",
            } = r;
            const g =
              m || v || E
                ? {
                    channelId: c,
                    type: u,
                    label: l,
                    data: {
                      fileId: m,
                      accessLevel: v,
                      ...E,
                    },
                    reason: T,
                  }
                : {
                    channelId: c,
                    label: l,
                    type: u,
                    reason: T,
                  };
            return o((0, i.Z)(g)).then((I) => {
              const f = I.tabs;
              let y = (0, t.A)(f);
              return (
                m && !(E != null && E.listsChannelTabDefaultRefineViewId)
                  ? (y =
                      f == null
                        ? void 0
                        : f.find((M) => {
                            let { data: p } = M;
                            return (
                              (p == null ? void 0 : p.file_id) === m &&
                              !(
                                p != null &&
                                p.lists_channel_tab_default_refine_view_id
                              )
                            );
                          }))
                  : E != null && E.recordRelatedListId
                  ? (y =
                      f == null
                        ? void 0
                        : f.find((M) => {
                            let { data: p } = M;
                            return (
                              (p == null
                                ? void 0
                                : p.record_related_list_id) ===
                              E.recordRelatedListId
                            );
                          }))
                  : E != null && E.salesforceListViewId
                  ? (y =
                      f == null
                        ? void 0
                        : f.find((M) => {
                            let { data: p } = M;
                            return (
                              (p == null
                                ? void 0
                                : p.salesforce_list_view_id) ===
                              E.salesforceListViewId
                            );
                          }))
                  : m &&
                    E != null &&
                    E.listsChannelTabDefaultRefineViewId &&
                    (y =
                      f == null
                        ? void 0
                        : f.find((M) => {
                            let { data: p } = M;
                            return (
                              (p == null ? void 0 : p.file_id) === m &&
                              (p == null
                                ? void 0
                                : p.lists_channel_tab_default_refine_view_id) ===
                                (E == null
                                  ? void 0
                                  : E.listsChannelTabDefaultRefineViewId)
                            );
                          })),
                y &&
                  o(
                    (0, n.D)({
                      tabId: y.id,
                      tab: y,
                      channelId: c,
                    })
                  ),
                I
              );
            });
          }
        );
        d.meta = {
          name: "createThunk",
          key: "createThunkaddTabToChannelAndNavigate",
          description: "Adds a tab to a channel and navigates to that tab",
        };
      },
      2799479478: (W, A, e) => {
        "use strict";
        e.d(A, {
          D: () => E,
        });
        var t = e(9132066222),
          n = e(7245481391),
          s = e(5267010247),
          i = e(8822892075),
          d = e(5964896486),
          o = e(82287009),
          a = e(6078549397),
          r = e(1031947056),
          c = e(2522627261),
          u = e(36177209),
          l = e(4033441523),
          m = e(8980478045),
          v = e(9101533895);
        const E = (0, r.Ay)("Navigate to a channel tab", (T, g, I) => {
          let {
            tabId: f,
            tab: y,
            channelId: M,
            docSource: p,
            sectionId: O,
            sectionIdsToHighlightOverride: C,
          } = I;
          const h = g(),
            D = y || (0, t.kt)(h, M, f),
            P = (0, v.OL)(h, M, !1);
          if (D != null && D.data) {
            const S =
                ("fileId" in D.data && D.data.fileId) ||
                ("file_id" in D.data && D.data.file_id),
              b =
                ("listsChannelTabDefaultRefineViewId" in D.data &&
                  D.data.listsChannelTabDefaultRefineViewId) ||
                ("lists_channel_tab_default_refine_view_id" in D.data &&
                  D.data.lists_channel_tab_default_refine_view_id) ||
                void 0;
            if (S) {
              if (D.type === n.Xy.Canvas) {
                const K = {
                  fileId: S,
                  source: p ?? l.f.CHANNEL_TAB,
                  isChannelCanvas: !1,
                  channelId: M,
                };
                return T(
                  (0, s.o)(
                    (0, i.sL)(
                      (0, i.mo)({
                        id: (0, a.Lo)({
                          id: S,
                        }),
                        clogParams: K,
                        sectionIdsToHighlightOverride: C,
                      }),
                      M,
                      f
                    )
                  )
                );
              }
              if (D.type === n.Xy.List)
                return (
                  T(
                    (0, c.w)({
                      listId: S,
                      source: u.B.CHANNEL_TAB,
                      channelId: M,
                    })
                  ),
                  T(
                    (0, s.o)(
                      (0, i.sL)(
                        (0, i.st)({
                          listId: S,
                          listViewId: b,
                        }),
                        M,
                        f
                      )
                    )
                  )
                );
            }
            if (D.type === n.Xy.SalesforceListView) {
              const K =
                ("salesforceListViewId" in D.data &&
                  D.data.salesforceListViewId) ||
                ("salesforce_list_view_id" in D.data &&
                  D.data.salesforce_list_view_id) ||
                void 0;
              return T(
                (0, s.o)(
                  (0, i.sL)(
                    (0, i.i0)({
                      salesforceListViewId: K,
                      tabData: D.data,
                      channelId: M,
                    }),
                    M,
                    f
                  )
                )
              );
            }
          }
          if (
            (D == null ? void 0 : D.type) === n.Xy.ChannelCanvas ||
            f === n.fY.ChannelCanvas
          ) {
            const { fileId: S } = (0, d.H)(P),
              b = (0, m.Pf)(g(), M);
            if (S || b) {
              const K = {
                fileId: S || b || "",
                source: p ?? l.f.CHANNEL_TAB,
                isChannelCanvas: !1,
                channelId: M,
              };
              return T(
                (0, s.o)(
                  (0, i.sL)(
                    (0, i.NB)({
                      entityId: (0, a.Lo)({
                        id: S || b,
                        sectionId: O,
                      }),
                      channelId: M,
                      clogParams: K,
                      sectionIdsToHighlightOverride: C,
                    }),
                    M,
                    f
                  )
                )
              );
            }
            return T(
              (0, o.C$)({
                channelId: M,
              })
            );
          }
          return T(
            (0, s.o)(
              (0, i.id)(M, {
                tabId: f,
                tabParams: D == null ? void 0 : D.data,
              })
            )
          );
        });
        E.meta = {
          name: "createThunk",
          key: "createThunknavigateToChannelTab",
          description: "Navigate to a channel tab",
        };
      },
      6698109330: (W, A, e) => {
        "use strict";
        e.d(A, {
          N: () => o,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(7056498591),
          i = e(796111729),
          d = e(1031947056);
        const o = (0, d.Ay)(
          "Updates a channel tab",
          (function () {
            var a = (0, t.coroutine)(function* (r, c, u) {
              let {
                  channelId: l,
                  tabId: m,
                  data: v,
                  label: E,
                  reason: T = "updateTab",
                } = u,
                g = {
                  ok: !1,
                  tabs: [],
                };
              try {
                g = yield r(
                  (0, s.k)({
                    id: m,
                    ...((E || E === "") && {
                      label: E,
                    }),
                    ...(v && {
                      data: v,
                    }),
                    channelId: l,
                    reason: T,
                  })
                );
              } catch (I) {
                (0, i.Ay)({
                  label: "channel_tabs",
                }).error("error updating tab", I);
              }
              return g;
            });
            return function (r, c, u) {
              return a.apply(this, arguments);
            };
          })()
        );
        o.meta = {
          name: "createThunk",
          key: "createThunkupdateTab",
          description: "Updates a channel tab",
        };
      },
      5115870218: (W, A, e) => {
        "use strict";
        e.d(A, {
          L: () => n,
        });
        var t = e(7245481391);
        const n = _((s) => {
          let {
            tabs: i,
            includeDisabled: d = !1,
            isGovSlack: o = !1,
            hasFullCanvasAccess: a = !1,
          } = s;
          return i.filter((r) => {
            let { type: c, isDisabled: u = !1 } = r;
            return !(
              (u && !d) ||
              c === t.Xy.Pins ||
              (!a && (c === t.Xy.ChannelCanvas || c === t.Xy.CreateCanvas)) ||
              (o && c === t.Xy.ChannelCanvas)
            );
          });
        }, "filterTabs");
      },
      1365065344: (W, A, e) => {
        "use strict";
        e.d(A, {
          T: () => t,
        });
        var t;
        (function (n) {
          (n.ListItem = "list_item"),
            (n.NewTask = "new_task"),
            (n.CompletedHeader = "completed_header"),
            (n.GroupHeader = "group_header"),
            (n.RefineHeader = "refine_header"),
            (n.PaddingBottom = "padding_bottom");
        })(t || (t = {}));
      },
      3032483460: (W, A, e) => {
        "use strict";
        e.d(A, {
          HY: () => o,
          No: () => i,
          Vr: () => l,
          cp: () => m,
          fw: () => d,
          gk: () => u,
          nr: () => v,
          qC: () => r,
          sD: () => c,
          zm: () => a,
        });
        var t = e(1365065344),
          n = e(8191156954),
          s = e(583204418);
        const i = _((E) => !!E && "message" in E, "isMessageReference"),
          d = _((E) => !!E && "message" in E, "isMessageReferenceApi"),
          o = _((E) => !!E && "list_record" in E, "isListRecordReferenceApi"),
          a = _((E) => {
            var T;
            return (
              E.type === n.$.Select &&
              ((T = E.options) === null || T === void 0 ? void 0 : T.format) !==
                s.YP.MultiSelect
            );
          }, "isSingleSelectField"),
          r = _((E) => {
            if (i(E)) {
              const g = E.message;
              return g.threadTs
                ? `message-${g.channelId}-${g.ts}-${g.threadTs}`
                : `message-${g.channelId}-${g.ts}`;
            }
            const T = E == null ? void 0 : E.listRecord;
            return T ? `list_record-${T.listId}-${T.rowId}` : "";
          }, "makeReferenceTrackerStoreKey"),
          c = _((E) => {
            if (d(E)) {
              const g = E.message;
              return g.thread_ts
                ? `message-${g.channel_id}-${g.ts}-${g.thread_ts}`
                : `message-${g.channel_id}-${g.ts}`;
            }
            const T = E == null ? void 0 : E.list_record;
            return T ? `list_record-${T.list_id}-${T.row_id}` : "";
          }, "makeReferenceApiTrackerStoreKey"),
          u = _((E) => {
            var T;
            return !!(
              !(E == null || (T = E.fields) === null || T === void 0) &&
              T.todo_completed
            );
          }, "isMyTaskItemCompleted"),
          l = _(
            (E) =>
              d(E)
                ? {
                    message: {
                      channelId: E.message.channel_id,
                      ts: E.message.ts,
                      threadTs: E.message.thread_ts,
                    },
                  }
                : {
                    listRecord: {
                      listId: E.list_record.list_id,
                      rowId: E.list_record.row_id,
                    },
                  },
            "convertReferenceApiToReference"
          ),
          m = _((E) => {
            let { rowId: T } = E;
            return T === t.T.NewTask || T.endsWith(`---${t.T.NewTask}`);
          }, "isNewTaskRow"),
          v = _((E) => {
            let { groupKey: T } = E;
            return `${T}---${t.T.NewTask}`;
          }, "createNewTaskRowId");
      },
      3937186022: (W, A, e) => {
        "use strict";
        e.d(A, {
          B: () => n,
          H: () => s,
        });
        var t = e(4761125736);
        function n(i) {
          return (0, t._Z)(i, "work_object_record_channels") === "on";
        }
        _(n, "isWorkObjectRecordChannelsEnabled");
        function s(i) {
          return (0, t._Z)(i, "work_object_unfurls") === "on";
        }
        _(s, "isWorkObjectUnfurlsEnabled");
      },
      73855031: (W, A, e) => {
        "use strict";
        e.d(A, {
          n: () => c,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(2036354333),
          i = e(8683010724),
          d = e(6627147571),
          o = e.n(d);
        function a() {
          return (
            (a =
              Object.assign ||
              function (u) {
                for (var l = 1; l < arguments.length; l++) {
                  var m = arguments[l];
                  for (var v in m)
                    Object.prototype.hasOwnProperty.call(m, v) && (u[v] = m[v]);
                }
                return u;
              }),
            a.apply(this, arguments)
          );
        }
        _(a, "_extends");
        const r = {
          item: "accordion-list-item",
          itemHeader: "accordion-list-item-header",
          itemDescription: "accordion-list-item-description",
          expandedIcon: "accordion-list-item-expanded-icon",
          imageCaret: "accordion-list-item-image-caret",
        };
        function c(u) {
          let {
            accordionItems: l,
            className: m,
            showImageCaret: v,
            autoClogProps: E,
            showItemBorder: T = !0,
            itemClassName: g = "",
            itemHeaderClassName: I = "",
            itemHeaderButtonClassName: f = "",
            itemDescriptionClassName: y = "",
            expandedIconClassName: M = "",
            collapsedIconClassName: p = "",
            imageCaretClassName: O = "",
          } = u;
          const [C, h] = (0, t.useState)(
              l.map((B, U) => ({
                ...B,
                isExpanded: U === 0,
              }))
            ),
            [D, P] = (0, t.useState)(""),
            S = (0, t.useRef)({}),
            b = (0, t.useCallback)(
              (B, U) => () => {
                U.isExpanded ||
                  (h(
                    C.map((R, G) => ({
                      ...R,
                      isExpanded: G === B,
                    }))
                  ),
                  P(U.id),
                  typeof U.onExpand == "function" && U.onExpand());
              },
              [C]
            ),
            K = (0, t.useCallback)(
              (B) => (U) => {
                S.current[B] = U;
              },
              []
            );
          (0, t.useEffect)(() => {
            if (D && S.current[D]) {
              var B;
              (B = S.current[D]) === null || B === void 0 || B.focus();
            }
          }, [D]);
          const x = _(
            (B) => ({
              ...E,
              onClick: {
                enableClogAction: !B.isExpanded,
              },
              elementValue: B.id,
            }),
            "getAutoClogProps"
          );
          return t.createElement(
            "ul",
            {
              className: (0, n.A)(o().accordion, m),
            },
            C.map((B, U) =>
              t.createElement(
                "li",
                {
                  key: B.id,
                  "data-qa": r.item,
                  className: (0, n.A)(
                    o().item,
                    {
                      [o().expanded]: B.isExpanded,
                      [o().noBorder]: !T,
                    },
                    g
                  ),
                },
                t.createElement(
                  s.A,
                  {
                    "aria-expanded": B.isExpanded,
                    "aria-controls": `description-${U}`,
                    className: (0, n.A)(o().itemHeader, {
                      [f]: !!f,
                    }),
                    onClick: b(U, B),
                    autoClogProps: x(B),
                    ref: K(B.id),
                  },
                  t.createElement(
                    "div",
                    {
                      className: o().iconSpacer,
                    },
                    B.isExpanded
                      ? t.createElement(
                          "span",
                          {
                            className: (0, n.A)(o().expandedIcon, {
                              [M]: !!M,
                            }),
                            "data-qa": r.expandedIcon,
                          },
                          B.iconProps
                            ? t.createElement(i.A, a({}, B.iconProps))
                            : t.createElement(i.A, {
                                name: "check",
                                variation: "filled",
                              })
                        )
                      : t.createElement(
                          "span",
                          {
                            className: (0, n.A)({
                              [p]: !!p,
                            }),
                          },
                          t.createElement(i.A, {
                            name: "caret-right",
                            variation: "filled",
                          })
                        )
                  ),
                  t.createElement(
                    "h2",
                    {
                      className: (0, n.A)(o().header, {
                        [I]: !!I,
                      }),
                      "data-qa": r.itemHeader,
                    },
                    B.header
                  )
                ),
                t.createElement(
                  "div",
                  {
                    className: o().descriptionWrapper,
                  },
                  t.createElement(
                    "div",
                    {
                      className: o().description,
                    },
                    t.createElement("div", {
                      className: o().iconSpacer,
                    }),
                    t.createElement(
                      "div",
                      {
                        id: `description-${U}`,
                        "aria-hidden": !B.isExpanded,
                        "data-qa": r.itemDescription,
                        className: (0, n.A)({
                          [y]: !!y,
                        }),
                      },
                      B.description
                    )
                  )
                ),
                v &&
                  B.isExpanded &&
                  t.createElement("div", {
                    className: (0, n.A)(o().imageCaret, O),
                    "data-qa": r.imageCaret,
                  })
              )
            )
          );
        }
        _(c, "Accordion"), (c.displayName = "Accordion");
      },
      7156540029: (W, A, e) => {
        "use strict";
        e.d(A, {
          K8: () => s,
          Q1: () => t,
        });
        const t = 20,
          n = {
            FETCH: "activity_fetch",
            VIEW_LOAD: "activity_view_load",
            VIEW_UPDATED: "activity_view_updated",
          },
          s = {
            PREF: "activity_view",
            PAGE: "page",
            FLEXPANE: "flexpane",
          };
      },
      9509635375: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => u,
        });
        var t = e(2562405183),
          n = e(603616571),
          s = e(735940183),
          i = e(5255740490),
          d = e(5824283093),
          o = e(1206744593);
        function a() {
          return (
            (a =
              Object.assign ||
              function (l) {
                for (var m = 1; m < arguments.length; m++) {
                  var v = arguments[m];
                  for (var E in v)
                    Object.prototype.hasOwnProperty.call(v, E) && (l[E] = v[E]);
                }
                return l;
              }),
            a.apply(this, arguments)
          );
        }
        _(a, "_extends");
        const r = new s.Ay("members");
        function c(l) {
          let {
            className: m,
            inverse: v = !1,
            isWorkflow: E = !1,
            isLegacyWorkflow: T = !1,
            ...g
          } = l;
          const I = (0, t.d4)(n.TX),
            f = (0, t.d4)(o.x$);
          let y = r.t("WORKFLOW", {
            fallbackHash: "aa16061e7815ca19a57c9db8f84c9601b739f570",
          });
          T &&
            f &&
            (y = r.t("LEGACY WORKFLOW", {
              fallbackHash: "aa16061e7815ca19a57c9db8f84c9601b739f570",
            })),
            I && E ? (y = r.t("BETA")) : E || (y = r.t("APP"));
          const M = (0, i.A)(m, "c-app_badge", {
            "c-app_badge--inverse": v,
          });
          return d.createElement(
            "span",
            a({}, g, {
              className: M,
              "data-stringify-suffix": " ",
            }),
            y
          );
        }
        _(c, "AppBadge"), (c.displayName = "AppBadge");
        const u = (0, d.memo)(c);
      },
      5874162200: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => i,
        });
        var t = e(735940183);
        const n = new t.Ay("audio_player");
        function s(d) {
          const o = Math.floor(d / 3600),
            a = Math.floor((d - o * 3600) / 60),
            r = Math.floor(d - o * 3600 - a * 60);
          return o > 0
            ? n.t(
                "{hours} {hours, plural, =1 {hour} other {hours}}, {minutes} {minutes, plural, =1 {minute} other {minutes}}, {seconds} {seconds, plural, =1 {second} other {seconds}}",
                {
                  seconds: r,
                  minutes: a,
                  hours: o,
                }
              )
            : a > 0
            ? n.t(
                "{minutes} {minutes, plural, =1 {minute} other {minutes}}, {seconds} {seconds, plural, =1 {second} other {seconds}}",
                {
                  seconds: r,
                  minutes: a,
                }
              )
            : n.t("{seconds} {seconds, plural, =1 {second} other {seconds}}", {
                seconds: r,
              });
        }
        _(s, "secondsToSpokenTime");
        const i = s;
      },
      7999544567: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => n,
        });
        var t = e(297247517);
        function n(s) {
          if ((0, t.P)(s)) {
            const i = s && s.text && s.text.trim();
            if (i) return i.length;
          }
          return 0;
        }
        _(n, "__WEBPACK_DEFAULT_EXPORT__");
      },
      5577180258: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => u,
        });
        var t = e(45851552),
          n = e(5404505308),
          s = e(6783791506),
          i = e(297247517),
          d = e(8389327410),
          o = e(5305906809),
          a = e(7999544567);
        const { _EMOJI_GROUP: r } = d.Lv;
        function c(l, m, v, E, T, g, I) {
          const f = l.slice(g, I),
            y = g + (0, t.A)(f, s.E),
            M = g + (0, n.A)(f, s.E) + 1;
          l.splice(y, M - y, {
            type: r,
            name: m,
            size: v,
            displayAlias: E,
            skinTone: T,
            elements: l.slice(y, M),
          });
        }
        _(c, "insertEmojiGroup");
        function u(l) {
          let m,
            v,
            E,
            T,
            g,
            I = l.length - 1;
          for (; I >= -1; ) {
            const y = l[I];
            if (((E = E ?? I), (v = v ?? 0), (0, s.E)(y)))
              y.name === m && y.displayAlias === T && y.skinTone === g
                ? (v += 1)
                : (v >= o.uz && c(l, m, v, T, g, I + 1, E + 1),
                  (m = y.name),
                  (T = y.displayAlias),
                  (g = y.skinTone),
                  (E = I),
                  (v = 1));
            else if (!(0, i.P)(y) || (0, a.A)(y) !== 0) {
              var f;
              v >= o.uz && c(l, m, v, T, g, I + 1, E + 1),
                (m = void 0),
                (T = void 0),
                (g = void 0),
                (E = void 0),
                (v = void 0),
                !((f = y) === null || f === void 0) &&
                  f.elements &&
                  u(y.elements);
            }
            I -= 1;
          }
          return l;
        }
        _(u, "groupEmojis");
      },
      9744286524: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => l,
        });
        var t = e(5824283093),
          n = e(6122756707),
          s = e(1668417071),
          i = e(8980478045),
          d = e(2562405183),
          o = e(6403319589),
          a = e(82287009),
          r = e(9671982974),
          c = e(2054605226),
          u = e(5914783706);
        function l(m) {
          let { channelId: v } = m;
          const E = (0, n.wA)(),
            { spaceFileId: T, spaceIsEmpty: g } = (0, r.A)({
              channelId: v,
            }),
            I = (0, d.d4)((D) => (v ? (0, i.Pf)(D, v) : void 0)),
            f = I ?? T,
            y = (0, a.$s)(f),
            M = (0, o.A)(y, y == null ? void 0 : y.isEmpty),
            p = typeof M == "boolean" || typeof g == "boolean",
            O = g !== void 0 ? g === !1 : M === !1,
            C = (0, u.A)(O),
            h = (0, d.d4)((D) => (v ? (0, s.kM)(D, v) : void 0));
          return (
            (0, t.useEffect)(() => {
              v &&
                h &&
                C &&
                !O &&
                E(
                  (0, c.ot)({
                    channelId: v,
                    template: void 0,
                  })
                );
            }, [v, h, O, C, E]),
            {
              channelCanvasHasContent: O || (!!h && h !== "blank_page"),
              isLoaded: p,
              doc: y,
              templateSelected: h,
              channelCanvasFileId: T,
            }
          );
        }
        _(l, "useChannelCanvasContent");
      },
      9671982974: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => o,
        });
        var t = e(2562405183),
          n = e(937317117),
          s = e(497761763),
          i = e(396294106),
          d = e(8393662842);
        function o(a) {
          let { channelId: r } = a;
          const {
              spaceFileId: c,
              spaceIsPrimary: u,
              spaceIsEmpty: l,
              isLinkedCanvasDeleted: m,
              editsRestrictedToChannelManager: v,
              setEditsRestrictedToChannelManager: E,
              hasClickedUseBlankCanvasForChannel: T,
            } = (0, i.A)({
              channelId: r,
            }),
            g = (0, t.d4)((f) => (c && (0, s.A)(c) ? (0, n.Lp)(f, c) : null)),
            I = (0, d.ln)(g);
          return {
            spaceFileId: c,
            spaceIsPrimary: u,
            spaceIsEmpty: l,
            isLinkedCanvasDeleted: m,
            editsRestrictedToChannelManager: v,
            setEditsRestrictedToChannelManager: E,
            isChannelCanvasLocked: I,
            hasClickedUseBlankCanvasForChannel: T,
          };
        }
        _(o, "useChannelSpaceForChannel");
      },
      396294106: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => O,
        });
        var t = e(9706240641),
          n = e(5824283093),
          s = e(6122756707),
          i = e(2562405183),
          d = e(8040098042),
          o = e(4761125736),
          a = e(1031947056),
          r = e(9101533895),
          c = e(3430841143),
          u = e(9530687876);
        const l = (0, a.Ay)(
          u.rd.SET_CHANNEL_PROPERTIES_CANVAS_IS_PRIMARY_VIEW,
          (C, h, D) => {
            let { id: P, isPrimaryView: S } = D;
            var b;
            const K = h(),
              x = !1,
              B = (0, r.OL)(K, P, x);
            if (!P || !B) return;
            const U = {
              ...B,
              properties: {
                ...(B == null ? void 0 : B.properties),
                canvas: {
                  ...(B == null || (b = B.properties) === null || b === void 0
                    ? void 0
                    : b.canvas),
                  is_primary_view: S,
                },
              },
            };
            C(
              (0, c.F)({
                channel: U,
                reason: u.rd.SET_CHANNEL_PROPERTIES_CANVAS_IS_PRIMARY_VIEW,
              })
            );
          }
        );
        l.meta = {
          name: "createThunk",
          key: "createThunksetChannelPropertiesCanvasIsPrimaryView",
          description: u.rd.SET_CHANNEL_PROPERTIES_CANVAS_IS_PRIMARY_VIEW,
        };
        var m = e(4347488242),
          v = e(5534420337);
        const E = (0, a.Ay)(
          u.rd.SET_CHANNEL_PROPERTIES_CANVAS_IS_OPEN_BY_DEFAULT,
          (C, h, D) => {
            let { id: P, isOpenByDefault: S } = D;
            const b = h(),
              K = !1,
              x = (0, r.OL)(b, P, K),
              B = (0, o._Z)(b, "channel_properties_api_setter") === "on";
            if (!P || !x || !B) return;
            let U;
            try {
              U = JSON.stringify({
                canvas: {
                  is_open_by_default: S,
                },
              });
            } catch (R) {
              (0, v.Ay)({
                getState: h,
              }).error(R, "failed serializing new properties");
              return;
            }
            return C(
              (0, m.D)({
                channelId: P,
                props: U,
                reason: "set_channel_canvas_open_by_default",
              })
            ).then(() => {
              var R;
              const G = {
                ...x,
                properties: {
                  ...(x == null ? void 0 : x.properties),
                  canvas: {
                    ...(x == null || (R = x.properties) === null || R === void 0
                      ? void 0
                      : R.canvas),
                    is_open_by_default: S,
                  },
                },
              };
              C(
                (0, c.F)({
                  channel: G,
                  reason: u.rd.SET_CHANNEL_PROPERTIES_CANVAS_IS_OPEN_BY_DEFAULT,
                })
              );
            });
          }
        );
        E.meta = {
          name: "createThunk",
          key: "createThunksetChannelPropertiesCanvasIsOpenByDefault",
          description: u.rd.SET_CHANNEL_PROPERTIES_CANVAS_IS_OPEN_BY_DEFAULT,
        };
        const T = (0, a.Ay)(
          u.rd
            .SET_CHANNEL_PROPERTIES_CANVAS_EDITS_RESTRICTED_TO_CHANNEL_MANAGER,
          (C, h, D) => {
            let { id: P, editsRestrictedToChannelManager: S } = D;
            const b = h(),
              K = !1,
              x = (0, r.OL)(b, P, K),
              B = (0, o._Z)(b, "channel_manager_chanvas_edits") === "on",
              U = (0, o._Z)(b, "channel_manager_chanvas_ui") === "on";
            if (!P || !x || !U || !B) return;
            let R;
            try {
              R = JSON.stringify({
                canvas: {
                  edits_restricted_to_channel_manager: S,
                },
              });
            } catch (G) {
              (0, v.Ay)({
                getState: h,
              }).error(G, "failed serializing new properties");
              return;
            }
            return C(
              (0, m.D)({
                channelId: P,
                props: R,
                reason: "set_edits_restricted_to_channel_manager",
              })
            ).then(() => {
              var G;
              const H = {
                ...x,
                properties: {
                  ...(x == null ? void 0 : x.properties),
                  canvas: {
                    ...(x == null || (G = x.properties) === null || G === void 0
                      ? void 0
                      : G.canvas),
                    edits_restricted_to_channel_manager: S,
                  },
                },
              };
              C(
                (0, c.F)({
                  channel: H,
                  reason:
                    u.rd
                      .SET_CHANNEL_PROPERTIES_CANVAS_EDITS_RESTRICTED_TO_CHANNEL_MANAGER,
                })
              );
            });
          }
        );
        T.meta = {
          name: "createThunk",
          key: "createThunksetChannelPropertiesEditsRestrictedToChannelManager",
          description:
            u.rd
              .SET_CHANNEL_PROPERTIES_CANVAS_EDITS_RESTRICTED_TO_CHANNEL_MANAGER,
        };
        var g = e(1523378513),
          I = e(4079686795),
          f = e(1668417071),
          y = e(8362292758),
          M = e(1407713935),
          p = e(5964896486);
        function O(C) {
          let { channelId: h } = C;
          const D = (0, s.wA)(),
            P = (0, y.A)(),
            S = h ? (0, d.A)(h) : !1,
            b = (0, i.d4)((Ae) => (0, r.OL)(Ae, h)),
            K = (0, p.H)(b),
            x = K == null ? void 0 : K.fileId,
            B = K == null ? void 0 : K.isEmpty,
            U =
              S &&
              !(0, M.LI)(b) &&
              !(0, M.yz)(b) &&
              (K == null ? void 0 : K.isPrimaryView),
            R = S && (K == null ? void 0 : K.isOpenByDefault),
            G = K == null ? void 0 : K.isLinkedCanvasDeleted,
            H = K == null ? void 0 : K.editsRestrictedToChannelManager,
            F = (0, i.d4)(
              (Ae) => (0, o._Z)(Ae, "channel_properties_api_setter") === "on"
            ),
            V = (0, i.d4)(f.As),
            X = h && S ? V[h] : void 0,
            q = (0, n.useCallback)(
              (function () {
                var Ae = (0, t.coroutine)(function* (ae) {
                  if (!h || !S) return;
                  D(
                    l({
                      id: h,
                      isPrimaryView: ae,
                    })
                  ),
                    D(
                      (0, I.z)({
                        channelId: h,
                        pref: "space_is_primary",
                        value: {
                          enabled: ae,
                        },
                      })
                    );
                  let de;
                  try {
                    de = JSON.stringify({
                      space_is_primary: ae,
                    });
                  } catch (ve) {
                    P.error(ve, "failed serializing new prefs");
                    return;
                  }
                  return D(
                    (0, g.E)({
                      channelId: h,
                      newPrefs: de,
                      reason: "use-channel-space-prefs--set-space-is-primary",
                    })
                  );
                });
                return function (ae) {
                  return Ae.apply(this, arguments);
                };
              })(),
              [h, D, P, S]
            ),
            oe = (0, n.useCallback)(
              (function () {
                var Ae = (0, t.coroutine)(function* (ae) {
                  if (!h || !S) return;
                  if (F)
                    return D(
                      E({
                        id: h,
                        isOpenByDefault: ae,
                      })
                    );
                  D(
                    (0, I.z)({
                      channelId: h,
                      pref: "space_open_by_default",
                      value: {
                        enabled: ae,
                      },
                    })
                  );
                  let de;
                  try {
                    de = JSON.stringify({
                      space_open_by_default: ae,
                    });
                  } catch (ve) {
                    P.error(ve, "failed serializing new prefs");
                    return;
                  }
                  return D(
                    (0, g.E)({
                      channelId: h,
                      newPrefs: de,
                      reason:
                        "use-channel-space-prefs--set-space-is-open-by-default",
                    })
                  );
                });
                return function (ae) {
                  return Ae.apply(this, arguments);
                };
              })(),
              [h, D, P, S, F]
            ),
            z = (0, n.useCallback)(
              (function () {
                var Ae = (0, t.coroutine)(function* (ae) {
                  if (!(!h || !S))
                    return D(
                      T({
                        id: h,
                        editsRestrictedToChannelManager: ae,
                      })
                    );
                });
                return function (ae) {
                  return Ae.apply(this, arguments);
                };
              })(),
              [h, D, S]
            );
          return {
            spaceFileId: x,
            spaceIsPrimary: U,
            spaceIsEmpty: B,
            spaceIsOpenByDefault: R,
            editsRestrictedToChannelManager: H,
            setSpaceIsPrimary: q,
            setSpaceIsOpenByDefault: oe,
            setEditsRestrictedToChannelManager: z,
            isLinkedCanvasDeleted: G,
            hasClickedUseBlankCanvasForChannel: X,
          };
        }
        _(O, "useChannelSpacePrefs");
      },
      6403319589: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => i,
        });
        var t = e(2562405183),
          n = e(7115106069),
          s = e(9388275297);
        function i(d, o) {
          const a = d == null ? void 0 : d.id.get(),
            r = (0, t.d4)((c) => a && (0, n.d0)(c, a));
          return (0, s.A)(r ? o : void 0);
        }
        _(i, "useQuipDocValueIfSubscribed");
      },
      7592430824: (W, A, e) => {
        "use strict";
        e.d(A, {
          N: () => i,
          u: () => s,
        });
        var t = e(5824283093),
          n = e(6152845331);
        const s = (0, n.Ay)("Embedded UI Provider", null),
          i = t.createContext({
            embeddedUIContainerElement: null,
            embeddedUiData: null,
            inChannelCanvas: !1,
            slackFileId: void 0,
            docEmbed: void 0,
          });
      },
      5645915081: (W, A, e) => {
        "use strict";
        e.d(A, {
          Zq: () => o,
          zF: () => n,
          zf: () => a,
        });
        var t = e(5244168417),
          n;
        (function (r) {
          (r.PARAGRAPH = "paragraph"),
            (r.H1 = "h1"),
            (r.H2 = "h2"),
            (r.H3 = "h3"),
            (r.CHECK_LIST = "check-list"),
            (r.CHECK_LIST_TOGGLE = "check-list-toggle"),
            (r.ORDERED_LIST = "ordered-list"),
            (r.BULLET_LIST = "bullet-list"),
            (r.BLOCKQUOTE = "blockquote"),
            (r.CODE_BLOCK = "code-block");
        })(n || (n = {}));
        const s = [
            [t.DocBlockStyle.PLAIN, n.PARAGRAPH],
            [t.DocBlockStyle.H1, n.H1],
            [t.DocBlockStyle.H2, n.H2],
            [t.DocBlockStyle.H3, n.H3],
            [t.DocBlockStyle.LIST_CHECKLIST, n.CHECK_LIST],
            [t.DocBlockStyle.LIST_NUMBERED, n.ORDERED_LIST],
            [t.DocBlockStyle.LIST_BULLET, n.BULLET_LIST],
            [t.DocBlockStyle.BLOCKQUOTE, n.BLOCKQUOTE],
            [t.DocBlockStyle.CODE, n.CODE_BLOCK],
          ],
          i = new Map(s),
          d = new Map(s.map((r) => [r[1], r[0]]));
        function o(r) {
          return i.get(r);
        }
        _(o, "blockStyleToFormat");
        function a(r) {
          return d.get(r);
        }
        _(a, "formatToBlockStyle");
      },
      4843305308: (W, A, e) => {
        "use strict";
        e.d(A, {
          P: () => s,
        });
        var t = e(7731278967),
          n = e(9084547259);
        const s = _((i) => {
          switch (i) {
            case t.r.FILE:
              return {
                name: "attachment",
              };
            case t.r.IMAGE:
              return {
                name: "image",
              };
            case t.r.CHECK_LIST:
              return {
                name: "checkbox",
              };
            case t.r.CHECK_LIST_TOGGLE:
              return {
                name: "checkbox",
              };
            case t.r.BULLET_LIST:
              return {
                name: "bulleted-list",
              };
            case t.r.ORDERED_LIST:
              return {
                name: "numbered-list",
              };
            case t.r.VIDEO_CLIP:
              return {
                name: "video",
              };
            case t.r.AUDIO_CLIP:
              return {
                name: "microphone",
              };
            case t.r.DIVIDER:
              return {
                name: "divider",
              };
            case t.r.TABLE:
              return {
                name: "spreadsheet",
              };
            case t.r.LAYOUT_2_COLUMNS:
              return {
                name: "column-two",
              };
            case t.r.LAYOUT_3_COLUMNS:
              return {
                name: "column-three",
              };
            case t.r.PINS:
              return {
                name: "pin",
              };
            case t.r.SMART_SUMMARY:
            case t.r.RECENT_FILES:
            case t.r.ACTIVE_DISCUSSIONS:
            case t.r.CHANNEL_HUDDLES:
              return {
                name: "magic-wand",
              };
            case t.r.BLOCKQUOTE:
              return {
                name: "quote",
              };
            case t.r.CODE_BLOCK:
              return {
                name: "code-block",
              };
            case n.L.CODE:
              return {
                name: "code",
              };
            case t.r.PARAGRAPH:
              return {
                name: "paragraph",
              };
            case t.r.H1:
              return {
                name: "heading-1",
              };
            case t.r.H2:
              return {
                name: "heading-2",
              };
            case t.r.H3:
              return {
                name: "heading-3",
              };
            case t.r.CANVAS:
              return {
                name: "canvas",
              };
            case t.r.WORKFLOW:
              return {
                name: "play",
              };
            case t.r.LIST:
              return {
                name: "lists",
              };
            case t.r.WIDGET:
              return {
                name: "blocks",
              };
            case t.r.SALESFORCE_RECORD:
              return {
                name: "sf-cloud",
              };
            case t.r.USER_PROFILE_UNFURL:
              return {
                name: "user",
              };
            case t.r.PLACEHOLDER_CARD_SUBMENU:
              return {
                name: "add-placeholder",
              };
            case t.r.PLACEHOLDER_CARD_VIDEO:
              return {
                name: "video",
              };
            case t.r.PLACEHOLDER_CARD_PROFILE:
              return {
                name: "user",
              };
            case t.r.PLACEHOLDER_CARD_AUDIO:
              return {
                name: "microphone",
              };
            case t.r.PLACEHOLDER_CARD_WORKFLOW:
              return {
                name: "play",
              };
            case t.r.PLACEHOLDER_CARD_IMAGE:
              return {
                name: "image",
              };
            case t.r.PLACEHOLDER_CARD_CANVAS:
              return {
                name: "canvas",
              };
            case t.r.PLACEHOLDER_CARD_FILE:
              return {
                name: "attachment",
              };
            case t.r.PLACEHOLDER_CARD_LINK:
              return {
                name: "link",
              };
            case t.r.PLACEHOLDER_CARD_LIST:
              return {
                name: "lists",
              };
            case t.r.PLACEHOLDER_CARD_SALESFORCE_RECORD:
              return {
                name: "sf-cloud",
              };
            case t.r.DATE_MENTION:
              return {
                name: "calendar",
              };
            case t.r.AI_ASSISTANT:
              return {
                name: "sparkles",
              };
            case t.r.CALLOUT:
              return {
                name: "callout",
              };
            default:
              return {
                name: "help",
              };
          }
        }, "getQuipButtonIcon");
      },
      8079225585: (W, A, e) => {
        "use strict";
        e.d(A, {
          O: () => d,
        });
        var t = e(735940183),
          n = e(7731278967),
          s = e(9084547259);
        const i = new t.Ay("slack_docs"),
          d = _(function (o) {
            let {
              experimentCanvasInsertWorkflowMenuGroupOn: a,
              experimentCanvasSmartCardsGroupOn: r,
              experimentWidgetsGroupOn: c,
            } = arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : {};
            switch (o) {
              case n.r.FILE:
                return i.t("File");
              case n.r.IMAGE:
                return i.t("Image");
              case n.r.CHECK_LIST:
                return i.t("Check list");
              case n.r.CHECK_LIST_TOGGLE:
                return i.t("Check list");
              case n.r.BULLET_LIST:
                return i.t("Bulleted list");
              case n.r.ORDERED_LIST:
                return i.t("Ordered list");
              case n.r.VIDEO_CLIP:
                return i.t("Record video clip");
              case n.r.AUDIO_CLIP:
                return i.t("Record audio clip");
              case n.r.DIVIDER:
                return i.t("Divider");
              case n.r.PINS:
                return i.t("Pins");
              case n.r.SMART_SUMMARY:
                return r ? i.t("AI Channel Summary") : "";
              case n.r.RECENT_FILES:
                return r ? i.t("Recent Files") : "";
              case n.r.ACTIVE_DISCUSSIONS:
                return r ? i.t("Active Discussions") : "";
              case n.r.CHANNEL_HUDDLES:
                return r ? i.t("Huddles") : "";
              case n.r.BLOCKQUOTE:
                return i.t("Blockquote");
              case n.r.CODE_BLOCK:
                return i.t("Code block");
              case n.r.PARAGRAPH:
                return i.t("Paragraph");
              case n.r.H1:
                return i.t("Big heading");
              case n.r.H2:
                return i.t("Medium heading");
              case n.r.H3:
                return i.t("Small heading");
              case n.r.CANVAS:
                return i.t("Canvas");
              case n.r.WORKFLOW:
                return a ? i.t("Workflow") : "";
              case s.L.CODE:
                return i.t("Code");
              case n.r.TABLE:
                return i.t("Table");
              case n.r.LAYOUT_2_COLUMNS:
                return i.t("2 columns", {
                  fallbackHash: "8d8f0f25822179c33b917613ec2d022ef593c340",
                  fallbackHashNs: "quip_shortcut_handlers",
                });
              case n.r.LAYOUT_3_COLUMNS:
                return i.t("3 columns", {
                  fallbackHash: "b505f5f09f70ff9d216f1c3cbb5c1a8a4e82179b",
                  fallbackHashNs: "quip_shortcut_handlers",
                });
              case n.r.LIST:
                return i.t("List");
              case n.r.WIDGET:
                return c ? i.t("Widget") : "Widget";
              case n.r.USER_PROFILE_UNFURL:
                return i.t("Profile", {
                  fallbackHash: "ff4fc0276e960c348647b647235f68200887c9d2",
                  fallbackHashNs: "menu",
                });
              case n.r.SALESFORCE_RECORD:
                return i.t("Salesforce record");
              case n.r.PLACEHOLDER_CARD_VIDEO:
                return i.t("Video", {
                  fallbackHash: "bc17c1f0179a888f2a7e8389f67d4f2cf5cf4531",
                  fallbackHashNs: "slack_kit_video",
                });
              case n.r.PLACEHOLDER_CARD_PROFILE:
                return i.t("Profile", {
                  fallbackHash: "ff4fc0276e960c348647b647235f68200887c9d2",
                  fallbackHashNs: "menu",
                });
              case n.r.PLACEHOLDER_CARD_AUDIO:
                return i.t("Audio", {
                  fallbackHash: "acdac205f5e24cb75113c4b281a2c13f08b75159",
                  fallbackHashNs: "files",
                });
              case n.r.PLACEHOLDER_CARD_WORKFLOW:
                return i.t("Workflow", {
                  fallbackHash: "d7a484140f5f9f7f5427e1f2c44dbfc1d3ad9eea",
                  fallbackHashNs: "slack_docs",
                });
              case n.r.PLACEHOLDER_CARD_IMAGE:
                return i.t("Image");
              case n.r.PLACEHOLDER_CARD_CANVAS:
                return i.t("Canvas");
              case n.r.PLACEHOLDER_CARD_FILE:
                return i.t("File");
              case n.r.PLACEHOLDER_CARD_LINK:
                return i.t("Link");
              case n.r.PLACEHOLDER_CARD_LIST:
                return i.t("List");
              case n.r.PLACEHOLDER_CARD_SALESFORCE_RECORD:
                return i.t("Salesforce record");
              case n.r.DATE_MENTION:
                return i.t("Date", {
                  fallbackHash: "eb9a4bc1c0c153e4e4b042a79113b815b7e3021d",
                  fallbackHashNs: "calendar",
                });
              case n.r.CALLOUT:
                return i.t("Callout", {
                  fallbackHash: "f3e792e7d41d161d609362af9fd451593481fd5d",
                });
              case n.r.AI_ASSISTANT:
                return i.t("AI assistant", {
                  fallbackHash: "fc7ba35433ce677dc7b72889cebdbbaf99c6d596",
                  fallbackHashNs: "ai_apps",
                });
              default:
                return o;
            }
          }, "getQuipButtonLabel");
      },
      9084547259: (W, A, e) => {
        "use strict";
        e.d(A, {
          B: () => i,
          L: () => n,
        });
        var t = e(5244168417),
          n;
        (function (d) {
          (d.BOLD = "bold"),
            (d.STRIKE = "strike"),
            (d.ITALIC = "italic"),
            (d.CODE = "code"),
            (d.LINK = "link"),
            (d.UNDERLINE = "underline");
        })(n || (n = {}));
        const s = new Map([
          [t.DocInlineStyle.BOLD, n.BOLD],
          [t.DocInlineStyle.STRIKETHROUGH, n.STRIKE],
          [t.DocInlineStyle.ITALIC, n.ITALIC],
          [t.DocInlineStyle.CODE, n.CODE],
          [t.DocInlineStyle.LINK, n.LINK],
        ]);
        function i(d) {
          return s.get(d);
        }
        _(i, "inlineStyleToFormat");
      },
      7731278967: (W, A, e) => {
        "use strict";
        e.d(A, {
          r: () => s,
        });
        var t = e(5645915081),
          n;
        (function (i) {
          (i.UNKNOWN = "unknown"),
            (i.TITLE = "title"),
            (i.FILE = "file"),
            (i.IMAGE = "image"),
            (i.VIDEO_CLIP = "video-clip"),
            (i.AUDIO_CLIP = "audio-clip"),
            (i.DIVIDER = "divider"),
            (i.TABLE = "table"),
            (i.SHORTCUT = "shortcut"),
            (i.MENU_SEPARATOR = "menu-separator"),
            (i.PINS = "pins"),
            (i.BOOKMARKS = "bookmarks"),
            (i.USER_UNFURL = "user-unfurl"),
            (i.CANVAS_UNFURL = "canvas-unfurl"),
            (i.MESSAGE_UNFURL = "message-unfurl"),
            (i.PUBLIC_LINK_UNFURL = "public-link-unfurl"),
            (i.SHORTCUT_UNFURL = "shortcut-unfurl"),
            (i.USER_PROFILE_UNFURL = "user-profile-unfurl"),
            (i.UNFURL = "unfurl"),
            (i.CANVAS = "canvas"),
            (i.GENERIC = "generic"),
            (i.WORKFLOW = "workflow"),
            (i.FILE_UPLOAD_BLOCKED_MESSAGE_BANNER =
              "file-upload-blocked-message-banner"),
            (i.SMART_SUMMARY = "smart-summary"),
            (i.RECENT_FILES = "recent-files"),
            (i.ACTIVE_DISCUSSIONS = "active-discussions"),
            (i.CHANNEL_HUDDLES = "channel-huddles"),
            (i.LIST = "list"),
            (i.WIDGET = "widget"),
            (i.LAYOUT_2_COLUMNS = "layout-2-columns"),
            (i.LAYOUT_3_COLUMNS = "layout-3-columns"),
            (i.PLACEHOLDER_CARD_SUBMENU = "placeholder-card-submenu"),
            (i.PLACEHOLDER_CARD_VIDEO = "placeholder-card-video"),
            (i.PLACEHOLDER_CARD_PROFILE = "placeholder-card-profile"),
            (i.PLACEHOLDER_CARD_AUDIO = "placeholder-card-audio"),
            (i.PLACEHOLDER_CARD_WORKFLOW = "placeholder-card-workflow"),
            (i.PLACEHOLDER_CARD_IMAGE = "placeholder-card-image"),
            (i.PLACEHOLDER_CARD_CANVAS = "placeholder-card-canvas"),
            (i.PLACEHOLDER_CARD_FILE = "placeholder-card-file"),
            (i.PLACEHOLDER_CARD_LINK = "placeholder-card-link"),
            (i.PLACEHOLDER_CARD_LIST = "placeholder-card-list"),
            (i.PLACEHOLDER_CARD_SALESFORCE_RECORD =
              "placeholder-card-salesforce-record"),
            (i.SALESFORCE_RECORD = "salesforce-record"),
            (i.DATE_MENTION = "date-mention"),
            (i.CALLOUT = "callout"),
            (i.AI_ASSISTANT = "ai-assistant");
        })(n || (n = {}));
        const s = {
          ...t.zF,
          ...n,
        };
      },
      1069376685: (W, A, e) => {
        "use strict";
        e.d(A, {
          D: () => t,
        });
        var t;
        (function (n) {
          (n.SpecificMembers = "add-specific-members"),
            (n.AllMembers = "add-all-members");
        })(t || (t = {}));
      },
      8414606991: (W, A, e) => {
        "use strict";
        e.d(A, {
          v: () => o,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(207659888),
          i = e(8683010724),
          d = e(1610251172);
        const o = _((a) => {
          let { type: r, spacing: c = "medium" } = a;
          const u = (0, n.A)("three_fourths_opacity", {
            margin_right_0: c === "none",
            margin_right_25: c === "small",
            margin_right_50: c === "medium",
          });
          return r === s.VZ.Channels || r === s.VZ.OrgChannels
            ? t.createElement(d.A, {
                type: "channel",
                size: "inherit",
                className: u,
              })
            : r === s.VZ.DirectMessages
            ? t.createElement(d.A, {
                type: "dm",
                size: "inherit",
                className: u,
              })
            : r === s.VZ.RecentApps
            ? t.createElement(d.A, {
                type: "gn-menu",
                size: "inherit",
                className: u,
              })
            : r === s.aw || r === s.oX
            ? t.createElement(d.A, {
                type: "shared-channels-outline",
                size: "inherit",
                className: u,
              })
            : r === s.VH
            ? t.createElement(d.A, {
                type: "star-o",
                size: "inherit",
                className: u,
              })
            : r === s.VZ.UserGroup
            ? t.createElement(
                "div",
                {
                  className: (0, n.A)("c-icon", "c-icon--inherit", u),
                },
                t.createElement(i.A, {
                  variation: "filled",
                  name: "user-groups",
                })
              )
            : t.createElement(d.A, {
                type: "star-o",
                size: "inherit",
                className: u,
              });
        }, "InlineChannelSectionFallbackIcon");
        o.displayName = "InlineChannelSectionFallbackIcon";
      },
      126225536: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => l,
        });
        var t = e(5824283093),
          n = e(6122756707),
          s = e(5255740490),
          i = e(4308550795),
          d = e(1030162945),
          o = e(207659888),
          a = e(863162513),
          r = e(1033870301),
          c = e(8414606991);
        function u(m) {
          let {
            channelSection: v,
            className: E,
            spacing: T = "medium",
            showIcon: g = !0,
          } = m;
          const f = (0, n.wA)()(
              (0, r.i1)({
                channelSection: v,
              })
            ),
            y = f && f.split(" "),
            M = y && y[0],
            p = y && (y.length > 1 ? ` ${y.slice(1).join(" ")}` : null),
            O = _(() => {
              if (!g) return null;
              if (v.type === o.VZ.UserGroup)
                return t.createElement(c.v, {
                  type: v.type,
                  spacing: T,
                });
              const C = (0, s.A)({
                margin_right_0: T === "none",
                margin_right_25: T === "small",
                margin_right_50: T === "medium",
              });
              return v.emoji
                ? t.createElement(d.Ay, {
                    className: C,
                    shouldFallbackOnLoadError: !0,
                    text: v.emoji,
                    stopAnimations: !0,
                    emojiSize: d.lw.SMALL,
                    forceDisplay: !0,
                    isEmojiInlineWithText: !0,
                    renderEmojiFallback: !0,
                  })
                : v.type === o.VZ.ExternalWorkspace
                ? t.createElement(i.A, {
                    workspaceId: (0, a.de)(v.id),
                    size: 15,
                    className: C,
                  })
                : t.createElement(c.v, {
                    type: v.type,
                    spacing: T,
                  });
            }, "getIcon");
          return (
            (O.displayName = "getIcon"),
            t.createElement(
              "span",
              {
                className: (0, s.A)("p-inline_channel_section", E),
              },
              t.createElement(
                "span",
                {
                  className: "p-inline_channel_section__lockup",
                },
                O(),
                M
              ),
              p
            )
          );
        }
        _(u, "InlineChannelSection"), (u.displayName = "InlineChannelSection");
        const l = u;
      },
      4308550795: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => I,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(2562405183),
          i = e(9950739645),
          d = e(698013937),
          o = e(3391133100),
          a = e(5865611660),
          r = e(3677514771),
          c = e(5672691263),
          u = e.n(c);
        const l = 20,
          m = 0.8,
          v = 0.2,
          E = {
            width: "auto",
          };
        function T(f) {
          let { id: y, size: M, spacing: p } = f;
          const O = `${Math.ceil(M / 2 - 1)}px`,
            C = `${M}px`,
            h = `${p}px`;
          return t.createElement(
            "svg",
            {
              className: "sr-only",
            },
            t.createElement(
              "mask",
              {
                id: y,
              },
              t.createElement("rect", {
                x: O,
                y: O,
                width: C,
                height: C,
                rx: h,
                ry: h,
                fill: "white",
              })
            )
          );
        }
        _(T, "SecondaryIconMask"), (T.displayName = "SecondaryIconMask");
        function g(f) {
          let {
            size: y = l,
            className: M,
            workspaceId: p,
            externalWorkspaceHostId: O,
          } = f;
          const C = (0, t.useMemo)(() => `scw-icon-mask-${(0, o.r9)()}`, []),
            h = (0, t.useMemo)(
              () => ({
                mask: `url(#${C}) exclude, linear-gradient(#000 0 0)`,
              }),
              [C]
            ),
            D = Math.floor(y * m),
            P = Math.floor(y * v),
            S = (0, t.useMemo)(
              () => ({
                marginRight: `-${P}px`,
                marginBottom: `-${P}px`,
              }),
              [P]
            );
          return t.createElement(
            "span",
            {
              style: E,
              className: (0, n.A)(M, u().container),
            },
            t.createElement(
              "span",
              {
                style: h,
                className: u().primaryIcon,
              },
              t.createElement(d.A, {
                id: p,
                size: y,
                allowTeamInitials: !0,
              })
            ),
            t.createElement(
              "span",
              {
                style: S,
                className: u().secondaryIcon,
              },
              t.createElement(d.A, {
                id: O,
                size: D,
                allowTeamInitials: !0,
              })
            ),
            t.createElement(T, {
              id: C,
              size: D,
              spacing: P,
            })
          );
        }
        _(g, "ExternalWorkspaceIconStack"),
          (g.displayName = "ExternalWorkspaceIconStack");
        function I(f) {
          let { size: y = l, className: M, workspaceId: p } = f;
          const O = (0, s.d4)((h) => (0, r._J)(h, p)),
            C = (0, s.d4)((h) => (0, a.m)(h, O));
          return (0, i.N)(O)
            ? C
              ? t.createElement(g, {
                  workspaceId: p,
                  externalWorkspaceHostId: C,
                  size: y,
                  className: M,
                })
              : t.createElement(d.A, {
                  id: p,
                  size: y,
                  className: M,
                  allowTeamInitials: !0,
                })
            : null;
        }
        _(I, "ExternalWorkspaceIcon"),
          (I.displayName = "ExternalWorkspaceIcon");
      },
      9399618736: (W, A, e) => {
        "use strict";
        e.d(A, {
          AV: () => r,
          Cu: () => m,
          Gu: () => a,
          g4: () => u,
          qn: () => c,
        });
        var t = e(4423055085),
          n = e(796111729),
          s = e(6188550760);
        let i = 1,
          d = 1;
        const o = (0, n.Wo)({
            label: "HISTORY-NAVIGATION",
          }),
          a = _(() => {
            d !== i &&
              (o.info(
                "Incrementing the users current position in the history stack"
              ),
              (d += 1));
          }, "onNavigateForward"),
          r = _(() => {
            d !== 1 &&
              (o.info(
                "Decrementing the users current position in the history stack"
              ),
              (d -= 1));
          }, "onNavigateBack"),
          c = _(() => d === 1, "isBackDisabled"),
          u = _(() => d === i, "isForwardDisabled");
        function l() {
          o.info("Adding route to the history stack"), (d += 1), (i = d);
        }
        _(l, "incrementHistoryLength");
        function m(E) {
          let { shouldReplaceState: T, reason: g } = E;
          T || (g !== s.GB && l());
        }
        _(m, "maybeIncrementHistoryLength"),
          (0, t.ul)("history", {
            getHistoryLength: () => i,
            getHistoryIndex: () => d,
          });
        const v = {
          maybeIncrementHistoryLength: m,
        };
      },
      5670315214: (W, A, e) => {
        "use strict";
        e.d(A, {
          Hu: () => v,
          OJ: () => h,
          q8: () => O,
          vU: () => C,
          wZ: () => D,
        });
        var t = e(6249041335),
          n = e(735940183),
          s = e(4813703725),
          i = e(5597672932),
          d = e(462591818),
          o = e(6565762531),
          a = e(1223723593),
          r = e(6575028637),
          c = e(3677514771),
          u = e(6470070112),
          l = e(6946629059),
          m = e(6790819894);
        const v = {
            video: "video",
            audio: "audio",
            profileFieldOptions: "profile_field_options",
          },
          E = new n.Ay("huddles"),
          T = _(
            (P, S) => ({
              video: [...(P && P.video ? P.video : [])],
              audio: [...(!S && P && P.audio ? P.audio : [])],
              profile_field_options: [],
            }),
            "getInnerCallsAppsFromTeamPref"
          ),
          g = _((P) => {
            const S = P.reduce(
                (K, x) => (
                  Object.entries(x).forEach((B) => {
                    let [U, R] = B;
                    (U === "video" || U === "audio") &&
                      (K[U] = K[U] ? [...K[U], ...R] : [...R]);
                  }),
                  K
                ),
                {}
              ),
              b = {
                video: [],
                audio: [],
              };
            return (
              Object.entries(S).forEach((K) => {
                let [x, B] = K;
                (x === "video" || x === "audio") &&
                  (b[x] = B.filter(
                    (U, R, G) =>
                      R === G.findIndex((H) => H.id === U.id && H.id !== void 0)
                  ));
              }),
              b
            );
          }, "combineCallApps"),
          I = _((P) => {
            const b = (0, c.FR)(P)
              .map((x) => (0, i.x)(P, "calls_apps", x.id))
              .filter(l.b);
            return g(b);
          }, "retrieveCallsAppsForUnifiedOrg"),
          f = _(
            (P) => ((0, r.ss)(P) ? I(P) : (0, i.x)(P, "calls_apps")),
            "retrieveCallsAppsFromPrefs"
          ),
          y = _((P, S) => {
            const b = f(P);
            if (S) {
              var K;
              const x =
                b == null || (K = b.video) === null || K === void 0
                  ? void 0
                  : K.findIndex((B) => B.id === d.rq);
              x >= 0 && b.video.splice(x, 1);
            }
            return b;
          }, "filterCallsAppsFromTeamPref"),
          M = (0, s.ik)(
            (P, S) => y(P, S),
            (P) => T(P, !1)
          ),
          p = (0, s.ik)(
            (P, S) => y(P, S),
            (P) => T(P, !0)
          ),
          O = _(function (P) {
            return (
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : !1
            )
              ? p(P, !0)
              : M(P, !0);
          }, "getCallsAppsFromTeamPref"),
          C = (0, m.F)(O, u.pt, (P, S) => {
            const b = {},
              K = P && P.video ? P.video : [],
              x = P && P.audio ? P.audio : [],
              B = E.t("Start a huddle"),
              U = S
                ? [
                    {
                      id: "A01",
                      name: B,
                      image: "/marketing/img/homepage/icons/huddle-icon.png",
                    },
                  ]
                : [];
            return (
              [...K, ...x, ...U].forEach((R) => {
                let G;
                R.id === d.rq
                  ? (G = {
                      id: R.id,
                      name: R.name,
                      image: R.image,
                    })
                  : [
                      "A5GE9BMQC",
                      "A649AA069",
                      "A5W4BRDNX",
                      "ARQS1U88Y",
                      "ARUFE7YMU",
                    ].findIndex((H) => R.id === H) !== -1
                  ? (G = {
                      id: R.id,
                      name: R.name,
                      image: "/marketing/img/homepage/icons/zoom-icon.png",
                    })
                  : (G = R),
                  (b[G.id] = G);
              }),
              b
            );
          }),
          h = _((P) => {
            let {
              callsApp: S,
              memberPhoneNumber: b,
              hideVideoApps: K = !1,
            } = P;
            const x = [];
            return (
              S &&
                (!K &&
                  S.video &&
                  x.push(
                    ...S.video.map((B) => ({
                      ...B,
                      type: a.JG.Video,
                    }))
                  ),
                S.audio &&
                  (0, o.A)((0, t.A)(b)) &&
                  x.push(
                    ...S.audio.map((B) => ({
                      ...B,
                      type: a.JG.Audio,
                    }))
                  )),
              x
            );
          }, "getCallAppList"),
          D = _((P) => {
            const S = y(P, !0),
              b = S && S.video ? S.video : [],
              K = S && S.audio ? S.audio : [];
            return [...b, ...K];
          }, "getFlattenTeamPrefCallsApps");
      },
      4980558152: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => l,
        });
        var t = e(5824283093),
          n = e(4103274853),
          s = e(7715417323),
          i = e(3245843483),
          d = e(2664504268),
          o = e(3514831633),
          a = e(3753517560),
          r = e(4776067035);
        function c() {
          return (
            (c =
              Object.assign ||
              function (m) {
                for (var v = 1; v < arguments.length; v++) {
                  var E = arguments[v];
                  for (var T in E)
                    Object.prototype.hasOwnProperty.call(E, T) && (m[T] = E[T]);
                }
                return m;
              }),
            c.apply(this, arguments)
          );
        }
        _(c, "_extends");
        let u = _(
          class extends t.Component {
            onDesktopContextMenu(v) {
              const { getTemplate: E, overrideDefaultMenu: T } = this.props,
                g = _(
                  (M) => ({
                    ...M,
                    id: (0, d.A)(),
                    submenu: M.submenu && M.submenu.map(g),
                  }),
                  "addIdsToItem"
                ),
                I = E ? E().map(g) : [];
              if (!I.length) return;
              const { x: f, y } = (0, n.A)(
                this.getCoordinatesForContextMenu(v),
                (M) => (0, i.xhB)() * M
              );
              (0, i.O0f)(I, {
                x: f,
                y,
                overrideDefaultMenu: T,
              }),
                this.props.onClick && this.props.onClick();
            }
            getCoordinatesForContextMenu(v) {
              if (!this.props.hasKeyboardFocus || !v) return {};
              const {
                  left: E,
                  top: T,
                  width: g,
                  height: I,
                } = v.currentTarget.getBoundingClientRect(),
                f = E + g / 2,
                y = T + I / 2;
              return {
                x: f,
                y,
              };
            }
            renderMenuFromTemplate(v) {
              const {
                getTemplate: E,
                width: T,
                showSlackKitContextMenuOnDesktop: g,
                menuAriaLabel: I,
              } = this.props;
              function f(M) {
                return M.replace(/&([\w&])/g, (p, O) => O);
              }
              _(f, "removeKeyboardAccelerators");
              const y = E
                ? E().map((M) =>
                    !M.label || g
                      ? M
                      : {
                          ...M,
                          label: f(M.label),
                        }
                  )
                : [];
              return y.length
                ? t.createElement(
                    o.a,
                    c(
                      {
                        "aria-label": I,
                        width: T,
                      },
                      v,
                      {
                        template: y,
                        isContextMenu: !0,
                        stripTerminalSeparators: !0,
                      }
                    )
                  )
                : null;
            }
            render() {
              if ((0, i.g9M)() && !this.props.showSlackKitContextMenuOnDesktop)
                return (0, r.A)(this.props.children, {
                  onContextMenu: this.onDesktopContextMenu,
                });
              const {
                forceOpen: v,
                onClick: E,
                onClose: T,
                isDisabled: g,
                renderMenu: I,
                preventScroll: f,
              } = this.props;
              return this.props.desktopAppOnly
                ? (0, r.A)(this.props.children)
                : t.createElement(
                    o.cQ,
                    {
                      isContextMenu: !0,
                      position: "right-bottom",
                      tryOppositePosition: !0,
                      forceOpen: v,
                      shouldFade: !1,
                      renderMenu: I || this.renderMenuFromTemplate,
                      onClick: E,
                      onClose: T,
                      isDisabled: g,
                      preventScroll: f,
                    },
                    this.props.children
                  );
            }
            constructor(v) {
              super(v),
                (this.onDesktopContextMenu =
                  this.onDesktopContextMenu.bind(this)),
                (this.renderMenuFromTemplate =
                  this.renderMenuFromTemplate.bind(this));
            }
          },
          "ContextMenuTrigger"
        );
        (u.displayName = "ContextMenuTrigger"),
          (u.defaultProps = {
            overrideDefaultMenu: !1,
            desktopAppOnly: !0,
            hasKeyboardFocus: !1,
            showSlackKitContextMenuOnDesktop: !1,
            onClick: s.A,
            onClose: s.A,
            isDisabled: !1,
            forceOpen: !1,
            stripTerminalSeparators: !1,
          });
        const l = (0, a.A)(u);
      },
      2837660778: (W, A, e) => {
        "use strict";
        e.d(A, {
          $g: () => p,
          Mo: () => I,
          rp: () => M,
        });
        var t = e(6217320234),
          n = e(7823346015),
          s = e(3385422400),
          i = e(8161242485),
          d = e(735940183),
          o = e(3707193570),
          a = e(6839188756),
          r = e(9950739645),
          c = e(6536982570),
          u = e(8276911661),
          l = e(3677514771),
          m = e(8847766420),
          v = e(241752795),
          E = e(5962670951),
          T = e(1439563189);
        const g = new d.Ay("create_channel_modal"),
          I = (0, i.Ay)((O) => {
            const C = (0, u.cA)(O),
              h = (0, c.HI)(C),
              D = (0, l.H7)(O);
            if (!D) return [];
            const P = (0, m.VO)(O) || [],
              S = [D.id, ...h, ...P],
              b = [...new Set(S)]
                .filter((K) => !(0, o.JV)(K))
                .map((K) => (0, l._J)(O, K))
                .filter((K) => !!K && !(0, a.Zx)(K));
            return (0, t.A)(b, (K) => (0, a.F1)(K));
          });
        I.meta = {
          name: "createSelector",
          key: "createSelectorgetAllInvitableWorkspaces",
          description: (O) => {
            const C = (0, u.cA)(O),
              h = (0, c.HI)(C),
              D = (0, l.H7)(O);
            if (!D) return [];
            const P = (0, m.VO)(O) || [],
              S = [D.id, ...h, ...P],
              b = [...new Set(S)]
                .filter((K) => !(0, o.JV)(K))
                .map((K) => (0, l._J)(O, K))
                .filter((K) => !!K && !(0, a.Zx)(K));
            return (0, t.A)(b, (K) => (0, a.F1)(K));
          },
        };
        const f = _((O, C) => {
            const h = C == null ? void 0 : C.map((D) => D.id);
            return O.map((D) => {
              var P, S;
              return {
                label: (0, a.F1)(D),
                value: D,
                optgroup: D.enterprise_name,
                key: D.id,
                isDisabled: !!(h !== void 0 && h.includes(D.id)),
                displayReason:
                  (S =
                    (P = C == null ? void 0 : C.find((b) => b.id === D.id)) ===
                      null || P === void 0
                      ? void 0
                      : P.displayReason) !== null && S !== void 0
                    ? S
                    : "",
              };
            });
          }, "mapWorkspacesToSelectOptionItems"),
          y = _((O, C) => {
            let { ineligibleWorkspaces: h, excludeExternalWorkspaces: D } = C;
            const [P, S] = (0, n.A)(O, (K) => (0, r.N)(K)),
              b = {
                value: void 0,
                label: "",
                type: "divider",
              };
            return [...f(S, h), ...(!D && P.length > 0 ? [b, ...f(P, h)] : [])];
          }, "mapInvitableWorkspacesToSelectOptions"),
          M = (0, i.Ay)((O) => {
            const C = (0, T.g)(O),
              h = (0, v.y5)(O),
              D = (0, E.S)(O),
              P = I(O),
              S = P.filter((b) => !h.includes(b.id) && !D.includes(b.id)).map(
                (b) => ({
                  id: b.id,
                  displayReason: C
                    ? ""
                    : g.t("You don\u2019t have access to this"),
                })
              );
            return y(P, {
              ineligibleWorkspaces: S,
            });
          });
        M.meta = {
          name: "createSelector",
          key: "createSelectorgetAllInvitableWorkspaceSelectOptions",
          description: (O) => {
            const C = (0, T.g)(O),
              h = (0, v.y5)(O),
              D = (0, E.S)(O),
              P = I(O),
              S = P.filter((b) => !h.includes(b.id) && !D.includes(b.id)).map(
                (b) => ({
                  id: b.id,
                  displayReason: C
                    ? ""
                    : g.t("You don\u2019t have access to this"),
                })
              );
            return y(P, {
              ineligibleWorkspaces: S,
            });
          },
        };
        const p = (0, s.Mz)(I, (O) => O.length > 1);
      },
      9364044512: (W, A, e) => {
        "use strict";
        e.d(A, {
          D: () => Ot,
          A: () => ln,
        });
        var t = e(5824283093),
          n = e(6122756707),
          s = e(5255740490),
          i = e(9003400431),
          d = e(980293773),
          o = e(3214129289);
        function a(it) {
          return it && it.id;
        }
        _(a, "getEmojiCollectionId");
        var r = e(370406050);
        function c(it) {
          return it && it.author;
        }
        _(c, "getEmojiCollectionAuthor");
        var u = e(6045879501);
        function l(it) {
          return it && it.localEmoji;
        }
        _(l, "getEmojiCollectionLocalEmoji");
        var m = e(735940183),
          v = e(2562405183),
          E = e(9113979368),
          T = e(2101927269),
          g = e(2141441167),
          I = e(6217320234),
          f = e(3783303734),
          y = e(4978843660),
          M = e(3297051565),
          p = e.n(M),
          O = e(3004085654),
          C = e(7564917982);
        function h(it) {
          return it && it.date_create;
        }
        _(h, "getEmojiCollectionDateCreate");
        var D = e(5071545805),
          P = e(2047021170),
          S = e(387484329),
          b = e(8840779375),
          K = e(5331686899),
          x = e(1610251172),
          B = e(7420598276),
          U = e(2036354333);
        const R = new m.Ay("custom_emoji_list"),
          G = "emoji_packs_clicked_collection_cta",
          H = _((it) => {
            let {
              id: Tt,
              name: Ct,
              author: Rt,
              emoji: Yt,
              installed: bn,
              onClick: Wn,
            } = it;
            const hn = (0, n.wA)(),
              Bn = (0, v.d4)((Et) => (0, P.ty)(Et, G)),
              Rn = (0, v.d4)(O.fl),
              zn = (0, v.d4)(O._J);
            if (!Yt) return null;
            const ss = a(zn) === Tt && Rn && !Bn;
            function jn() {
              ss &&
                hn(
                  (0, S.AZ)({
                    pref: G,
                    value: !0,
                  })
                ),
                Wn();
            }
            _(jn, "handleOnClick");
            const Yn = (0, b.A)(Yt, (Et, gt) => ({
                name: gt,
                url: Et,
              })),
              Qn = (0, y.A)(Yn, 4),
              es = R.t("by {author}", {
                author: Rt,
              });
            return t.createElement(
              U.A,
              {
                className: "p-emoji_pack_card p-emoji_pack_card--clickable",
                onClick: jn,
              },
              t.createElement(
                "div",
                {
                  className:
                    "display_flex align_items_center margin_bottom_100",
                },
                t.createElement(
                  "div",
                  {
                    className: "flex_one",
                  },
                  t.createElement(
                    "div",
                    {
                      className: "p-emoji_pack_card__header",
                    },
                    Ct,
                    ss &&
                      t.createElement(
                        "span",
                        {
                          className: "margin_left_25",
                        },
                        t.createElement(B.A, null, R.t("NEW"))
                      )
                  ),
                  t.createElement(
                    "div",
                    {
                      className: "p-emoji_pack_card__subheader",
                    },
                    es
                  )
                ),
                bn &&
                  !ss &&
                  t.createElement(
                    "div",
                    {
                      className: "flex_none",
                    },
                    t.createElement(x.A, {
                      size: "inherit",
                      type: "circle-checkbox-checked",
                      className: "p-emoji_pack_card__checkmark",
                    })
                  )
              ),
              t.createElement(
                "div",
                {
                  className: "p-emoji_pack_card_rows",
                },
                Qn.map((Et) =>
                  t.createElement(
                    "div",
                    {
                      key: Et.map((gt) => `${gt.name}-card-`).join(),
                      className: "p-emoji_pack_card__row",
                    },
                    Et.map((gt) =>
                      t.createElement(K.Ay, {
                        key: `emoji-pack-${gt.name}`,
                        showTooltip: !1,
                        text: `:${gt.name}:`,
                        url: gt.url,
                        emojiSize: K.lw.LARGE,
                      })
                    ),
                    [...new Array(4 - Et.length)]
                      .map((gt, Ft) => `emoji-pack-spacer-${Ft}`)
                      .map((gt) =>
                        t.createElement("div", {
                          key: gt,
                          className: "p-emoji_pack_card__spacer",
                        })
                      )
                  )
                )
              )
            );
          }, "EmojiPackCard");
        H.displayName = "EmojiPackCard";
        const F = H,
          V = new m.Ay("custom_emoji_list"),
          X = _(() => {
            const it = V.t("STAY TUNED"),
              Tt = V.t("More emoji packs are on the way");
            return t.createElement(
              "div",
              {
                className: "p-emoji_pack_card p-emoji_pack_coming_soon",
              },
              t.createElement(
                B.A,
                {
                  className: "p-emoji_pack_coming_soon__pill",
                },
                it
              ),
              t.createElement(
                "div",
                {
                  className: "p-emoji_pack_coming_soon__text",
                },
                Tt
              ),
              t.createElement(
                "div",
                {
                  className: "p-emoji_pack_coming_soon__illustrations",
                },
                t.createElement(
                  "svg",
                  {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "198",
                    height: "30",
                    viewBox: "0 0 198 30",
                    fill: "none",
                  },
                  t.createElement(
                    "g",
                    {
                      opacity: "0.8",
                    },
                    t.createElement(
                      "g",
                      {
                        clipPath: "url(#clip0)",
                      },
                      t.createElement("path", {
                        d: "M22.7 30C35.2 30 45.3 19.9 45.3 7.3 45.3-5.2 35.2-15.3 22.7-15.3 10.1-15.3 0-5.2 0 7.3 0 19.9 10.1 30 22.7 30Z",
                        fill: "#FFCC4D",
                      }),
                      t.createElement("path", {
                        d: "M24 20C25.5 20 26.7 18.5 26.7 16.7 26.7 14.8 25.5 13.3 24 13.3 22.5 13.3 21.3 14.8 21.3 16.7 21.3 18.5 22.5 20 24 20Z",
                        fill: "#664500",
                      }),
                      t.createElement("path", {
                        d: "M10.8 10.5C10.6 10.5 10.3 10.4 10.1 10.3 9.5 9.9 9.3 9.1 9.7 8.5 10.9 6.5 14.6 3.2 19.9 4.5 20.7 4.7 21.1 5.4 20.9 6.1 20.7 6.8 20 7.3 19.3 7.1 14.5 5.9 12 9.8 11.9 9.9 11.7 10.3 11.3 10.5 10.8 10.5V10.5ZM26.8 5.5C26.4 5.5 26 5.4 25.7 5 25.3 4.5 25.4 3.6 25.9 3.2 30.2-0.3 34.9 1.1 36.9 2.3 37.5 2.7 37.7 3.5 37.3 4.1 36.9 4.8 36.1 4.9 35.5 4.6 35.3 4.4 31.4 2.1 27.6 5.2 27.4 5.4 27.1 5.5 26.8 5.5Z",
                        fill: "#664500",
                      }),
                      t.createElement("path", {
                        d: "M17.8 23.7C17.7 23.7 17.6 23.7 17.5 23.7 17 23.5 16.7 23 16.8 22.4 17.4 20.4 17.2 18.4 16.2 17 15.5 16 14.6 15.5 13.6 15.4 13 15.4 12.6 14.9 12.7 14.3 12.7 13.8 13.2 13.3 13.7 13.4 15.3 13.5 16.8 14.4 17.8 15.8 19.2 17.7 19.5 20.3 18.8 23 18.6 23.4 18.2 23.7 17.8 23.7ZM32.5 19.6C32.3 19.6 32.1 19.6 32 19.5 30.4 18.4 29.5 16.6 29.6 14.5 29.6 12.3 30.7 10.3 32.2 9.4 32.7 9.1 33.3 9.2 33.6 9.7 33.9 10.2 33.7 10.8 33.3 11.1 32.3 11.7 31.6 13.1 31.6 14.6 31.5 16 32.1 17.1 33.1 17.8 33.5 18.1 33.6 18.7 33.3 19.2 33.2 19.5 32.8 19.6 32.5 19.6V19.6Z",
                        fill: "#E2A62D",
                      }),
                      t.createElement("path", {
                        d: "M22.9-14.4C22.8-14.4 22.8-14.5 22.7-14.5 22.7-14.5 1.4-18.5 0.5-17.7 -0.4-16.9 1 4.7 1 4.7 1 4.8 1 4.9 1.1 4.9 1.9 5.8 7.4 2.3 13.4-3.1 19.5-8.4 23.7-13.5 22.9-14.4V-14.4Z",
                        fill: "#DD2E44",
                      }),
                      t.createElement("path", {
                        d: "M0.5-17.6C0.4-17.6 0.4-17.5 0.4-17.5 0.6-15.6 2.7-0.6 4 4.1 5.9 3 7.8 1.6 10.1-0.2 8.2-3.8 1.5-17.8 0.5-17.6Z",
                        fill: "#EA596E",
                      }),
                      t.createElement("path", {
                        d: "M39.9 21L25.8 19.2C24.3 19.1 21.6 19.1 21.8 16.7 21.9 14.5 24.5 14.9 26.4 15.2L40.6 17.5 39.9 21V21Z",
                        fill: "#3B88C3",
                      }),
                      t.createElement("path", {
                        d: "M40.6 17.5L34.9 16.6C34.3 16.4 33.7 17.4 33.7 18.5 33.6 19.6 34 20.2 34.6 20.3L40.2 21 40.6 17.5V17.5Z",
                        fill: "#88C9F9",
                      }),
                      t.createElement("path", {
                        d: "M46.6 17.1L43.1 20.3 36.8 13.5 40.3 10.3C42.1 8.7 45 8.8 46.6 10.6L46.8 10.8C48.5 12.6 48.4 15.5 46.6 17.1Z",
                        fill: "#3B88C3",
                      }),
                      t.createElement("path", {
                        d: "M43.1 20.3C44.6 19 44.4 16.3 42.7 14.4 40.9 12.6 38.3 12.2 36.8 13.5 35.3 14.9 35.5 17.6 37.2 19.4 38.9 21.3 41.6 21.7 43.1 20.3Z",
                        fill: "#88C9F9",
                      }),
                      t.createElement("path", {
                        d: "M41.8 19C42.6 18.3 42.3 16.8 41.3 15.7 40.3 14.6 38.8 14.2 38.1 14.9 37.3 15.6 37.5 17.1 38.6 18.2 39.6 19.3 41.1 19.7 41.8 19Z",
                        fill: "#269",
                      }),
                      t.createElement("path", {
                        d: "M3.3 28.7C4.4 28.7 5.3 27.8 5.3 26.7 5.3 25.6 4.4 24.7 3.3 24.7 2.2 24.7 1.3 25.6 1.3 26.7 1.3 27.8 2.2 28.7 3.3 28.7Z",
                        fill: "#55ACEE",
                      }),
                      t.createElement("path", {
                        d: "M6.5 21L3.4 13.5 0.5 21.6 6.5 21ZM34.7-11.3L29.3-10 30.7-15.3 34.7-11.3Z",
                        fill: "#EA596E",
                      })
                    )
                  ),
                  t.createElement(
                    "g",
                    {
                      opacity: "0.8",
                    },
                    t.createElement("path", {
                      d: "M123 6C123 19.3 112.3 30 99 30 85.7 30 75 19.3 75 6 75-7.3 85.7-18 99-18 112.3-18 123-7.3 123 6Z",
                      fill: "#FFCC4D",
                    }),
                    t.createElement("path", {
                      d: "M99 11.3C94.2 11.3 91 10.8 87 10 86.1 9.8 84.3 10 84.3 12.7 84.3 18 90.5 24.7 99 24.7 107.5 24.7 113.7 18 113.7 12.7 113.7 10 111.9 9.8 111 10 107 10.8 103.8 11.3 99 11.3Z",
                      fill: "#664500",
                    }),
                    t.createElement("path", {
                      d: "M87 12.7C87 12.7 91 14 99 14 107 14 111 12.7 111 12.7 111 12.7 108.3 18 99 18 89.7 18 87 12.7 87 12.7Z",
                      fill: "white",
                    }),
                    t.createElement("path", {
                      d: "M115.8 6.3C115.6 6.2 113.2 4.4 109.6 3.1 109.6 3 109.7 2.8 109.7 2.7 109.7 2.2 109.5 1.7 109.2 1.4 111.6 0.7 113.6 0.7 113.7 0.7 114.4 0.7 115 0.1 115-0.7 115-1.4 114.4-2 113.7-2 113.4-2 106.4-1.9 102.1 2.4 101.7 2.8 101.6 3.3 101.8 3.8 102 4.3 102.5 4.7 103 4.7 109.1 4.7 114.2 8.4 114.2 8.4 114.4 8.6 114.7 8.7 115 8.7 115.4 8.7 115.8 8.5 116.1 8.1 116.5 7.5 116.4 6.7 115.8 6.3V6.3ZM95.9 2.4C91.6-1.9 84.6-2 84.3-2 83.6-2 83-1.4 83-0.7 83 0.1 83.6 0.7 84.3 0.7 84.4 0.7 86.4 0.7 88.8 1.4 88.5 1.7 88.3 2.2 88.3 2.7 88.3 2.8 88.4 3 88.4 3.1 84.8 4.4 82.4 6.2 82.2 6.3 81.6 6.7 81.5 7.5 81.9 8.1 82.2 8.5 82.6 8.7 83 8.7 83.3 8.7 83.6 8.6 83.8 8.4 83.8 8.4 88.8 4.7 95 4.7 95.5 4.7 96 4.3 96.2 3.8 96.4 3.3 96.3 2.8 95.9 2.4V2.4Z",
                      fill: "#664500",
                    })
                  ),
                  t.createElement(
                    "g",
                    {
                      opacity: "0.8",
                    },
                    t.createElement("path", {
                      d: "M198 6C198 19.3 187.3 30 174 30 160.7 30 150 19.3 150 6 150-7.3 160.7-18 174-18 187.3-18 198-7.3 198 6Z",
                      fill: "#FFCC4D",
                    }),
                    t.createElement("path", {
                      d: "M188.7 19.3C192.3 19.3 195.3 16.3 195.3 12.7 195.3 9 192.3 6 188.7 6 185 6 182 9 182 12.7 182 16.3 185 19.3 188.7 19.3Z",
                      fill: "#FF7892",
                    }),
                    t.createElement("path", {
                      d: "M159.3 19.3C163 19.3 166 16.3 166 12.7 166 9 163 6 159.3 6 155.7 6 152.7 9 152.7 12.7 152.7 16.3 155.7 19.3 159.3 19.3Z",
                      fill: "#FF7892",
                    }),
                    t.createElement("path", {
                      d: "M182.7 11.3C186.7 11.3 190 8.1 190 4 190-0.1 186.7-3.3 182.7-3.3 178.6-3.3 175.3-0.1 175.3 4 175.3 8.1 178.6 11.3 182.7 11.3Z",
                      fill: "#F5F8FA",
                    }),
                    t.createElement("path", {
                      d: "M165.3 11.3C169.4 11.3 172.7 8.1 172.7 4 172.7-0.1 169.4-3.3 165.3-3.3 161.3-3.3 158-0.1 158 4 158 8.1 161.3 11.3 165.3 11.3Z",
                      fill: "#F5F8FA",
                    }),
                    t.createElement("path", {
                      d: "M165.3 7.3C167.2 7.3 168.7 5.8 168.7 4 168.7 2.2 167.2 0.7 165.3 0.7 163.5 0.7 162 2.2 162 4 162 5.8 163.5 7.3 165.3 7.3Z",
                      fill: "#664500",
                    }),
                    t.createElement("path", {
                      d: "M182.7 7.3C184.5 7.3 186 5.8 186 4 186 2.2 184.5 0.7 182.7 0.7 180.8 0.7 179.3 2.2 179.3 4 179.3 5.8 180.8 7.3 182.7 7.3Z",
                      fill: "#664500",
                    }),
                    t.createElement("path", {
                      d: "M179.3 22H168.7C167.9 22 167.3 21.4 167.3 20.7 167.3 19.9 167.9 19.3 168.7 19.3H179.3C180.1 19.3 180.7 19.9 180.7 20.7 180.7 21.4 180.1 22 179.3 22ZM190-3.3C189.6-3.3 189.2-3.5 188.9-3.9 185.4-8.6 180.9-8.7 180.7-8.7 179.9-8.7 179.3-9.3 179.3-10 179.3-10.7 179.9-11.3 180.7-11.3 180.9-11.3 186.7-11.3 191.1-5.5 191.5-4.9 191.4-4 190.8-3.6 190.6-3.4 190.3-3.3 190-3.3V-3.3ZM158-3.3C157.7-3.3 157.4-3.4 157.2-3.6 156.6-4 156.5-4.9 156.9-5.5 161.3-11.3 167.1-11.3 167.3-11.3 168.1-11.3 168.7-10.7 168.7-10 168.7-9.3 168.1-8.7 167.3-8.7 167.1-8.7 162.6-8.6 159.1-3.9 158.8-3.5 158.4-3.3 158-3.3Z",
                      fill: "#664500",
                    })
                  ),
                  t.createElement(
                    "defs",
                    null,
                    t.createElement(
                      "clipPath",
                      null,
                      t.createElement("rect", {
                        y: "-18",
                        width: "48",
                        height: "48",
                        fill: "white",
                      })
                    )
                  )
                ),
                t.createElement(
                  "svg",
                  {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "198",
                    height: "30",
                    viewBox: "0 0 198 30",
                    fill: "none",
                  },
                  t.createElement(
                    "g",
                    {
                      opacity: "0.8",
                    },
                    t.createElement("path", {
                      d: "M48 24C48 37.3 37.3 48 24 48 10.7 48 0 37.3 0 24 0 10.7 10.7 0 24 0 37.3 0 48 10.7 48 24Z",
                      fill: "#DA2F47",
                    }),
                    t.createElement("path", {
                      d: "M34 39.8C33.9 39.6 32.4 34 24 34 15.6 34 14.1 39.6 14 39.8 13.9 40.1 14.1 40.4 14.3 40.6 14.6 40.7 14.9 40.7 15.1 40.5 15.2 40.4 17.7 38 24 38 30.3 38 32.8 40.4 32.9 40.5 33 40.6 33.2 40.7 33.3 40.7 33.4 40.7 33.6 40.6 33.7 40.6 33.9 40.4 34.1 40.1 34 39.8V39.8ZM20.9 23.1C16.6 18.7 9.6 18.7 9.3 18.7 8.6 18.7 8 19.3 8 20 8 20.7 8.6 21.3 9.3 21.3 9.4 21.3 11.9 21.4 14.6 22.3 13.9 23.2 13.3 24.5 13.3 26 13.3 28.6 14.8 30.7 16.7 30.7 18.5 30.7 20 28.6 20 26 20 25.8 20 25.5 20 25.3 20 25.3 20 25.3 20 25.3 20.3 25.3 20.7 25.2 20.9 24.9 21.5 24.4 21.5 23.6 20.9 23.1V23.1ZM38.7 18.7C38.4 18.7 31.4 18.7 27.1 23.1 26.5 23.6 26.5 24.4 27.1 24.9 27.3 25.2 27.7 25.3 28 25.3 28 25.3 28 25.3 28 25.3 28 25.5 28 25.8 28 26 28 28.6 29.5 30.7 31.3 30.7 33.2 30.7 34.7 28.6 34.7 26 34.7 24.5 34.1 23.2 33.4 22.3 36.1 21.4 38.6 21.3 38.7 21.3 39.4 21.3 40 20.7 40 20 40 19.3 39.4 18.7 38.7 18.7V18.7Z",
                      fill: "#292F33",
                    })
                  ),
                  t.createElement(
                    "g",
                    {
                      opacity: "0.8",
                    },
                    t.createElement("path", {
                      d: "M198 24C198 37.3 187.3 48 174 48 160.7 48 150 37.3 150 24 150 10.7 160.7 0 174 0 187.3 0 198 10.7 198 24Z",
                      fill: "#FFCC4D",
                    }),
                    t.createElement("path", {
                      d: "M174 28C169.2 28 166 27.4 162 26.7 161.1 26.5 159.3 26.7 159.3 29.3 159.3 34.7 165.5 41.3 174 41.3 182.5 41.3 188.7 34.7 188.7 29.3 188.7 26.7 186.9 26.5 186 26.7 182 27.4 178.8 28 174 28Z",
                      fill: "#664500",
                    }),
                    t.createElement("path", {
                      d: "M162 29.3C162 29.3 166 30.7 174 30.7 182 30.7 186 29.3 186 29.3 186 29.3 183.3 34.7 174 34.7 164.7 34.7 162 29.3 162 29.3Z",
                      fill: "white",
                    }),
                    t.createElement("path", {
                      d: "M170.9 5.9L164.9 7 161.7 1.3C161.4 0.7 160.7 0.3 160 0.4 159.3 0.6 158.7 1.1 158.6 1.8L157.6 8.2 151.6 9.3C150.9 9.4 150.3 10 150.2 10.7 150.1 11.4 150.5 12.1 151.2 12.4L156.6 15 155.6 21.4C155.5 22.1 155.8 22.9 156.5 23.2 156.7 23.3 157 23.4 157.2 23.4 157.7 23.4 158.1 23.2 158.4 22.9L163.1 18.1 169.1 21C169.8 21.3 170.6 21.1 171.1 20.6 171.5 20.1 171.6 19.3 171.3 18.7L168.2 13 172.4 8.7C172.9 8.2 173 7.4 172.7 6.8 172.3 6.1 171.6 5.8 170.9 5.9V5.9ZM177.1 5.9L183.1 7 186.3 1.3C186.6 0.7 187.3 0.3 188 0.4 188.7 0.6 189.3 1.1 189.4 1.8L190.4 8.2 196.4 9.3C197.1 9.4 197.7 10 197.8 10.7 197.9 11.4 197.5 12.1 196.8 12.4L191.4 15 192.4 21.4C192.5 22.1 192.2 22.9 191.5 23.2 191.3 23.3 191 23.4 190.8 23.4 190.3 23.4 189.9 23.2 189.6 22.9L184.9 18.1 178.9 21C178.2 21.3 177.4 21.1 176.9 20.6 176.5 20.1 176.4 19.3 176.7 18.7L179.8 13 175.6 8.7C175.1 8.2 175 7.4 175.3 6.8 175.7 6.1 176.4 5.8 177.1 5.9V5.9Z",
                      fill: "#E95F28",
                    })
                  ),
                  t.createElement(
                    "g",
                    {
                      opacity: "0.8",
                    },
                    t.createElement("path", {
                      d: "M99 48C112.3 48 123 37.3 123 24 123 10.7 112.3 0 99 0 85.7 0 75 10.7 75 24 75 37.3 85.7 48 99 48Z",
                      fill: "#FFCC4D",
                    }),
                    t.createElement("path", {
                      d: "M98.1 22.1C97.8 22 97.5 22 97.3 22.1 97.3 22.1 95.6 23.3 92.3 23.3 89.1 23.3 87.4 22.1 87.4 22.1 87.2 22 86.8 22 86.6 22.1 86.3 22.3 86.3 22.7 86.4 22.9 86.5 23.1 88.4 27.3 92.3 27.3 96.3 27.3 98.2 23.1 98.3 22.9 98.4 22.7 98.3 22.3 98.1 22.1V22.1ZM111.4 22.1C111.2 22 110.8 22 110.6 22.1 110.6 22.1 108.9 23.3 105.7 23.3 102.4 23.3 100.7 22.1 100.7 22.1 100.5 22 100.2 22 99.9 22.1 99.7 22.3 99.6 22.7 99.7 22.9 99.8 23.1 101.7 27.3 105.7 27.3 109.6 27.3 111.5 23.1 111.6 22.9 111.7 22.7 111.7 22.3 111.4 22.1V22.1Z",
                      fill: "#664500",
                    }),
                    t.createElement("path", {
                      d: "M120.9 16.7C120.9 16.7 120.9 16.6 120.9 16.5 120.9 15.5 120.2 15 119.3 15H114.5L120.2 7C120.5 6.6 120.6 6.4 120.6 5.9 120.6 4.9 119.8 4.8 119.4 4.8H112.3L112.3 3.8C112.3 3.8 110.4 5 110.3 5 110.1 5.1 109.6 5.5 109.6 6.3 109.6 7.3 110.3 7.9 111.2 7.9H115.4L109.7 15.9C109.6 16.1 109.4 16.5 109.4 16.9 109.4 17.7 110.1 18.1 110.9 18.1H119.3C119.6 18.1 120 18 120.2 17.9L122.2 16.7H120.9V16.7Z",
                      fill: "#FFAC33",
                    }),
                    t.createElement("path", {
                      d: "M117.4 6.8H113.2C112.3 6.8 111.5 6.2 111.5 5.2 111.5 4.2 112.3 3.6 113.2 3.6H121.4C121.7 3.6 122.6 3.8 122.6 4.7 122.6 5.2 122.5 5.4 122.2 5.8L116.5 13.8H121.3C122.2 13.8 122.9 14.4 122.9 15.4 122.9 16.4 122.2 17 121.3 17H112.8C112 17 111.4 16.6 111.4 15.7 111.4 15.3 111.6 15 111.7 14.8L117.4 6.8V6.8Z",
                      fill: "#2A6797",
                    }),
                    t.createElement("path", {
                      d: "M108.2 10C108.2 9.9 108.2 9.9 108.2 9.9 108.2 9.1 107.7 8.7 107 8.7H103.4L107.7 2.7C107.9 2.4 108 2.2 108 1.9 108 1.1 107.3 1 107.1 1H101.7L101.7 0.3C101.7 0.3 100.3 1.2 100.2 1.2 100.1 1.3 99.7 1.6 99.7 2.2 99.7 3 100.2 3.4 100.9 3.4H104.1L99.8 9.4C99.7 9.5 99.6 9.8 99.6 10.1 99.6 10.7 100.1 11 100.7 11H107C107.2 11 107.5 11 107.7 10.9L109.2 10H108.2V10Z",
                      fill: "#FFAC33",
                    }),
                    t.createElement("path", {
                      d: "M105.5 2.5H102.4C101.7 2.5 101.2 2.1 101.2 1.4 101.2 0.6 101.7 0.2 102.4 0.2H108.5C108.8 0.2 109.4 0.3 109.4 1 109.4 1.4 109.3 1.5 109.1 1.8L104.9 7.8H108.4C109.1 7.8 109.7 8.2 109.7 9 109.7 9.7 109.1 10.2 108.4 10.2H102.1C101.5 10.2 101 9.9 101 9.3 101 9 101.2 8.7 101.3 8.5L105.5 2.5V2.5Z",
                      fill: "#2A6797",
                    }),
                    t.createElement("path", {
                      d: "M98.7 13.9C98.7 13.9 98.7 13.8 98.7 13.8 98.7 13.2 98.2 12.8 97.6 12.8H94.6L98.2 7.7C98.4 7.4 98.5 7.3 98.5 7 98.5 6.3 97.9 6.2 97.7 6.2H93.1L93.1 5.7 91.8 6.4C91.7 6.5 91.4 6.7 91.4 7.3 91.4 7.9 91.9 8.3 92.4 8.3H95.1L91.5 13.4C91.4 13.5 91.3 13.8 91.3 14 91.3 14.6 91.7 14.8 92.2 14.8H97.6C97.8 14.8 98.1 14.7 98.2 14.7L99.5 13.9H98.7Z",
                      fill: "#FFAC33",
                    }),
                    t.createElement("path", {
                      d: "M96.4 7.5H93.7C93.1 7.5 92.6 7.2 92.6 6.5 92.6 5.9 93.1 5.5 93.7 5.5H99C99.2 5.5 99.7 5.6 99.7 6.2 99.7 6.5 99.7 6.7 99.5 6.9L95.8 12H98.9C99.5 12 99.9 12.4 99.9 13.1 99.9 13.7 99.5 14.1 98.9 14.1H93.5C93 14.1 92.5 13.8 92.5 13.3 92.5 13 92.7 12.8 92.7 12.7L96.4 7.5V7.5Z",
                      fill: "#2A6797",
                    })
                  )
                )
              )
            );
          }, "EmojiPackComingSoon");
        X.displayName = "EmojiPackComingSoon";
        const q = X,
          oe = new m.Ay("custom_emoji_list");
        function z(it) {
          let { row: Tt, className: Ct, onPackClick: Rt } = it;
          return t.createElement(
            "div",
            {
              key: Tt.map((Yt) => `${a(Yt)}-row`).join(),
              className: Ct,
            },
            Tt.map((Yt) => {
              if (Yt.type === "coming_soon")
                return t.createElement(q, {
                  key: "emoji-pack-coming-soon",
                });
              if (Yt.type === "spacer")
                return t.createElement("div", {
                  key: "emoji-pack-spacer",
                  className: "p-emoji_pack__spacer",
                });
              const bn = (0, D.j)(Yt);
              return t.createElement(F, {
                key: `emoji-pack-${a(Yt)}`,
                installed: bn,
                id: a(Yt) || void 0,
                name: (0, r.M)(Yt),
                author: c(Yt),
                emoji: (0, u.H)(Yt),
                onClick: () =>
                  Rt(Yt, {
                    installed: bn,
                  }),
              });
            })
          );
        }
        _(z, "Row"),
          (z.displayName = "Row"),
          (z.propTypes = {
            row: p().arrayOf(p().object),
            className: p().string,
            onPackClick: p().func.isRequired,
          }),
          (z.defaultProps = {
            row: [],
            className: void 0,
          });
        function Ae(it) {
          let { orgName: Tt, onPackClick: Ct } = it;
          const Rt = (0, n.wA)(),
            Yt = (0, v.d4)(O.uI);
          if (
            ((0, t.useEffect)(() => {
              Rt(
                (0, C.H)({
                  reason: "emojiPack:dialog",
                })
              );
            }, [Rt]),
            (0, E.A)(Yt))
          )
            return null;
          const bn = (0, T.A)(Yt, (Rn) => (0, D.j)(Rn)).length;
          let Wn = (0, g.A)(Yt);
          (Wn = (0, I.A)(Wn, (Rn) => -1 * h(Rn))),
            (0, f.A)(Yt) < 2 &&
              Wn.push({
                type: "coming_soon",
              }),
            Wn.length % 2 !== 0 &&
              Wn.push({
                type: "spacer",
              });
          const hn = (0, y.A)(Wn, 2);
          let Bn;
          return (
            Tt
              ? (Bn = oe.rt(
                  "Emoji packs let you add a whole set new of emoji to every {orgName} workspace. They\u2019ll appear in the custom tab of the emoji picker (the one with the Slack icon!).",
                  {
                    orgName: t.createElement("b", null, Tt),
                  }
                ))
              : (Bn = oe.t(
                  "Emoji packs let you add a whole set new of emoji for your team. They\u2019ll appear in the custom tab of the emoji picker (the one with the Slack icon!)."
                )),
            t.createElement(
              d.$m,
              null,
              t.createElement(
                d.qf,
                null,
                t.createElement(
                  "div",
                  null,
                  bn > 0 &&
                    t.createElement(
                      "div",
                      {
                        className: "p-emoji_pack__header",
                      },
                      oe.t("Added"),
                      t.createElement(
                        "div",
                        {
                          className: "p-emoji_pack__pill",
                        },
                        bn
                      )
                    ),
                  t.createElement(
                    "div",
                    {
                      className: "p-emoji_pack__list",
                    },
                    hn.map((Rn) =>
                      t.createElement(z, {
                        key: Rn.map((zn) => `${a(zn)}-rp-`).join(),
                        className: "p-emoji_pack__pack_row",
                        row: Rn,
                        onPackClick: Ct,
                      })
                    )
                  ),
                  t.createElement(
                    "div",
                    {
                      className: "p-emoji_pack__help",
                    },
                    Bn
                  )
                )
              )
            )
          );
        }
        _(Ae, "AddEmojiPackDialogContent"),
          (Ae.displayName = "AddEmojiPackDialogContent");
        const ae = Ae;
        var de = e(9391594207),
          ve = e(2003990933),
          Se = e(7715417323),
          Ee = e(9268023148),
          be = e(2322735331),
          Ce = e(56548687),
          Z = e(2219904496),
          $ = e(1030162945),
          N = e(5733135148),
          L = e(581167618),
          w = e(6084388622),
          k = e(1563996154),
          J = e(5795074931),
          ee = e(5060694341),
          ne = e(3842747943),
          pe = e(1224315998),
          Me = e(9746734072),
          ke = e(7156798807),
          ge = e(1269227002),
          fe = e(5257368278),
          re = e(330221449),
          le = e(8161242485);
        const Re = (0, le.Ay)((it) =>
          !it ||
          !it.customizeEmoji ||
          !it.customizeEmoji.customEmojiData ||
          !it.customizeEmoji.customEmojiData.length
            ? []
            : it.customizeEmoji.customEmojiData
        );
        Re.meta = {
          name: "createSelector",
          key: "createSelectorgetCustomEmojiData",
          description: (it) =>
            !it ||
            !it.customizeEmoji ||
            !it.customizeEmoji.customEmojiData ||
            !it.customizeEmoji.customEmojiData.length
              ? []
              : it.customizeEmoji.customEmojiData,
        };
        const ye = (0, le.Ay)((it) =>
          it && it.customizeEmoji && it.customizeEmoji.customEmojiTotalCount
            ? it.customizeEmoji.customEmojiTotalCount
            : 0
        );
        ye.meta = {
          name: "createSelector",
          key: "createSelectorgetCustomEmojiTotalCount",
          description: (it) =>
            it && it.customizeEmoji && it.customizeEmoji.customEmojiTotalCount
              ? it.customizeEmoji.customEmojiTotalCount
              : 0,
        };
        const Te = (0, le.Ay)((it) =>
          it && it.customizeEmoji && it.customizeEmoji.currentPage
            ? it.customizeEmoji.currentPage
            : 0
        );
        Te.meta = {
          name: "createSelector",
          key: "createSelectorgetLastPageRetrieved",
          description: (it) =>
            it && it.customizeEmoji && it.customizeEmoji.currentPage
              ? it.customizeEmoji.currentPage
              : 0,
        };
        const De = (0, le.Ay)((it) =>
          it && it.customizeEmoji && it.customizeEmoji.totalPages
            ? it.customizeEmoji.totalPages
            : 0
        );
        De.meta = {
          name: "createSelector",
          key: "createSelectorgetTotalPages",
          description: (it) =>
            it && it.customizeEmoji && it.customizeEmoji.totalPages
              ? it.customizeEmoji.totalPages
              : 0,
        };
        const Ue = (0, le.Ay)((it) =>
          it && it.customizeEmoji && it.customizeEmoji.isLoadingNewPage
            ? it.customizeEmoji.isLoadingNewPage
            : !1
        );
        Ue.meta = {
          name: "createSelector",
          key: "createSelectorgetIsLoadingNewPage",
          description: (it) =>
            it && it.customizeEmoji && it.customizeEmoji.isLoadingNewPage
              ? it.customizeEmoji.isLoadingNewPage
              : !1,
        };
        const Ke = (0, le.Ay)((it) =>
          it && it.customizeEmoji && it.customizeEmoji.isLoadingNewSearchQuery
            ? it.customizeEmoji.isLoadingNewSearchQuery
            : !1
        );
        Ke.meta = {
          name: "createSelector",
          key: "createSelectorgetIsLoadingNewSearchQuery",
          description: (it) =>
            it && it.customizeEmoji && it.customizeEmoji.isLoadingNewSearchQuery
              ? it.customizeEmoji.isLoadingNewSearchQuery
              : !1,
        };
        const Ze = (0, le.Ay)((it) =>
          it && it.customizeEmoji && it.customizeEmoji.deletedEmojiList
            ? it.customizeEmoji.deletedEmojiList
            : []
        );
        Ze.meta = {
          name: "createSelector",
          key: "createSelectorgetDeletedEmojiList",
          description: (it) =>
            it && it.customizeEmoji && it.customizeEmoji.deletedEmojiList
              ? it.customizeEmoji.deletedEmojiList
              : [],
        };
        const Q = (0, le.Ay)((it) =>
          it && it.customizeEmoji && it.customizeEmoji.disabledEmoji
            ? it.customizeEmoji.disabledEmoji
            : {}
        );
        Q.meta = {
          name: "createSelector",
          key: "createSelectorgetDisabledEmoji",
          description: (it) =>
            it && it.customizeEmoji && it.customizeEmoji.disabledEmoji
              ? it.customizeEmoji.disabledEmoji
              : {},
        };
        const ie = (0, le.Ay)((it) =>
          it && it.customizeEmoji && it.customizeEmoji.sortDir
            ? it.customizeEmoji.sortDir
            : "asc"
        );
        ie.meta = {
          name: "createSelector",
          key: "createSelectorgetSortDirection",
          description: (it) =>
            it && it.customizeEmoji && it.customizeEmoji.sortDir
              ? it.customizeEmoji.sortDir
              : "asc",
        };
        const Ve = (0, le.Ay)((it) =>
          it && it.customizeEmoji && it.customizeEmoji.sortBy
            ? it.customizeEmoji.sortBy
            : "name"
        );
        Ve.meta = {
          name: "createSelector",
          key: "createSelectorgetSortBy",
          description: (it) =>
            it && it.customizeEmoji && it.customizeEmoji.sortBy
              ? it.customizeEmoji.sortBy
              : "name",
        };
        const xe = (0, fe.A)(
          "Load the next page of custom emoji data",
          function (it, Tt) {
            let {
              count: Ct = 100,
              queries: Rt,
              userIds: Yt,
              reason: bn = "customize-emoji-next-page",
            } = arguments.length > 2 && arguments[2] !== void 0
              ? arguments[2]
              : {};
            const Wn = Tt();
            it((0, re.en)(!0));
            const Bn = {
              page: Te(Wn) + 1,
              count: Ct,
              sort_by: Ve(Wn),
              sort_dir: ie(Wn),
            };
            return (
              Rt && (Bn.queries = JSON.stringify(Rt)),
              Yt && (Bn.user_ids = JSON.stringify(Yt)),
              it(
                (0, ge.apiCall)({
                  method: "emoji.adminList",
                  reason: bn,
                  args: Bn,
                })
              )
                .then((Rn) => {
                  it((0, re.en)(!1));
                  const zn = (0, Me.A)(Rn.disabled_emoji)
                    ? (0, ke.A)(Rn.disabled_emoji, "name")
                    : Rn.disabled_emoji;
                  it(
                    (0, re.X8)({
                      newCustomEmojiData: Rn.emoji,
                      disabledEmoji: zn,
                      customEmojiTotalCount: Rn.custom_emoji_total_count,
                      customEmojiSearchCount: Rn.paging.total,
                      currentPage: Rn.paging.page,
                      totalPages: Rn.paging.pages,
                    })
                  );
                })
                .catch((Rn) => {
                  throw Rn;
                })
            );
          }
        );
        (xe.meta = {
          name: "createFetcher",
          key: "createFetcherfetchCustomEmojiNextPage",
          description: "Load the next page of custom emoji data",
        }),
          (xe.propTypes = {
            queries: p().array,
            userIds: p().array,
          });
        const je = (0, fe.A)(
          "Load custom emoji data with a new search query",
          function (it, Tt) {
            let {
              queries: Ct,
              page: Rt = 1,
              count: Yt = 100,
              sortBy: bn,
              sortDir: Wn,
              userIds: hn,
              reason: Bn = "customize-emoji-new-query",
            } = arguments.length > 2 && arguments[2] !== void 0
              ? arguments[2]
              : {};
            it((0, re.d$)(!0));
            const Rn = {
              page: Rt,
              count: Yt,
            };
            return (
              Ct && (Rn.queries = JSON.stringify(Ct)),
              hn && (Rn.user_ids = JSON.stringify(hn)),
              bn && Wn && ((Rn.sort_by = bn), (Rn.sort_dir = Wn)),
              it(
                (0, ge.apiCall)({
                  method: "emoji.adminList",
                  reason: Bn,
                  args: Rn,
                })
              )
                .then((zn) => {
                  it((0, re.d$)(!1));
                  const is = (0, Me.A)(zn.disabled_emoji)
                    ? (0, ke.A)(zn.disabled_emoji, "name")
                    : zn.disabled_emoji;
                  it(
                    (0, re.Ot)({
                      newCustomEmojiData: zn.emoji,
                      disabledEmoji: is,
                      customEmojiTotalCount: zn.custom_emoji_total_count,
                      customEmojiSearchCount: zn.paging.total,
                      currentPage: zn.paging.page,
                      totalPages: zn.paging.pages,
                      sortBy: bn,
                      sortDir: Wn,
                    })
                  );
                })
                .catch((zn) => {
                  throw zn;
                })
            );
          }
        );
        (je.meta = {
          name: "createFetcher",
          key: "createFetcherfetchResetCustomEmoji",
          description: "Load custom emoji data with a new search query",
        }),
          (je.propTypes = {
            queries: p().array,
            page: p().number,
            count: p().number,
            sortBy: p().oneOf(["created", "name"]),
            sortDir: p().oneOf(["asc", "desc"]),
            userIds: p().array,
          });
        const Fe = (0, fe.A)(
          "Deletes the given custom emoji",
          function (it, Tt) {
            let {
              emojiName: Ct,
              isPrimaryEmoji: Rt = !1,
              synonyms: Yt = [],
              reason: bn = "customize-emoji-remove",
            } = arguments.length > 2 && arguments[2] !== void 0
              ? arguments[2]
              : {};
            return (
              it(
                (0, re.gx)({
                  emojiName: Ct,
                  isPrimaryEmoji: Rt,
                  synonyms: Yt,
                })
              ),
              it(
                (0, ge.apiCall)({
                  method: "emoji.remove",
                  reason: bn,
                  args: {
                    name: Ct,
                  },
                })
              )
                .then((Wn) => Wn)
                .then(() => {
                  (0, Ce.e)({
                    state: Tt(),
                  }).track("PAGE_CUSTOMIZE_EMOJI", {
                    contexts: {
                      ui_context: {
                        step: "delete",
                        action: "remove",
                        action_status: "success",
                      },
                    },
                  });
                })
                .catch((Wn) => {
                  throw (
                    ((0, Ce.e)({
                      state: Tt(),
                    }).track("PAGE_CUSTOMIZE_EMOJI", {
                      contexts: {
                        ui_context: {
                          step: "delete",
                          action: "remove",
                          action_status: "fail",
                        },
                      },
                    }),
                    Wn)
                  );
                })
            );
          }
        );
        (Fe.meta = {
          name: "createFetcher",
          key: "createFetchersubmitRemoveCustomEmoji",
          description: "Deletes the given custom emoji",
        }),
          (Fe.propTypes = {
            emojiName: p().string,
            isPrimaryEmoji: p().bool,
            synonyms: p().array,
          });
        const He = (0, fe.A)(
          "Creates a new custom emoji or alias",
          function (it, Tt) {
            let {
              mode: Ct,
              name: Rt,
              aliasFor: Yt,
              image: bn,
              searchArgs: Wn = {},
              reason: hn = "customize-emoji-add",
            } = arguments.length > 2 && arguments[2] !== void 0
              ? arguments[2]
              : {};
            return it(
              (0, ge.apiCall)({
                method: "emoji.add",
                reason: hn,
                args: {
                  mode: Ct,
                  name: Rt,
                  alias_for: Yt,
                  image: bn,
                },
              })
            )
              .then((Bn) => Bn)
              .then(() => {
                it(je(Wn));
              })
              .catch((Bn) => {
                throw Bn;
              });
          }
        );
        (He.meta = {
          name: "createFetcher",
          key: "createFetchersubmitAddCustomEmoji",
          description: "Creates a new custom emoji or alias",
        }),
          (He.propTypes = {
            mode: p().string,
            name: p().string,
            aliasFor: p().string,
            image: p().object,
          });
        const Oe = (0, fe.A)(
          "Gets the emoji data for a given emoji",
          function (it, Tt) {
            let { name: Ct, reason: Rt = "customize-emoji-get-info" } =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : {};
            return it(
              (0, ge.apiCall)({
                method: "emoji.getInfo",
                reason: Rt,
                args: {
                  name: Ct,
                },
              })
            )
              .then((Yt) => Yt)
              .catch((Yt) => {
                throw Yt;
              });
          }
        );
        (Oe.meta = {
          name: "createFetcher",
          key: "createFetchergetEmojiInfo",
          description: "Gets the emoji data for a given emoji",
        }),
          (Oe.propTypes = {
            name: p().string,
          });
        const Ye = (0, fe.A)(
          "Renames the custom emoji with the new name",
          function (it, Tt) {
            let {
              oldName: Ct,
              newName: Rt,
              reason: Yt = "customize-emoji-rename",
            } = arguments.length > 2 && arguments[2] !== void 0
              ? arguments[2]
              : {};
            return it(
              (0, ge.apiCall)({
                method: "emoji.rename",
                reason: Yt,
                args: {
                  name: Ct,
                  new_name: Rt,
                },
              })
            )
              .then((bn) => bn)
              .then(() => {
                it(je()), it((0, re.S9)(Ct));
              })
              .catch((bn) => {
                throw bn;
              });
          }
        );
        (Ye.meta = {
          name: "createFetcher",
          key: "createFetchersubmitRenameEmoji",
          description: "Renames the custom emoji with the new name",
        }),
          (Ye.propTypes = {
            oldName: p().string,
            newName: p().string,
          });
        var at = e(3456937405);
        function _t(it) {
          return /^[a-zA-Z0-9\u00E0\u00E1\u00E2\u00E4\u00E3\u00E8\u00E9\u00EA\u00EB\u00ED\u00EE\u00EF\u00F3\u00F6\u00F4\u00F5\u0153\u00FA\u00F9\u00FB\u00FC\u00FF\u00E7\u00DF\u00F1\u00C0\u00C1\u00C2\u00C4\u00C3\u00C8\u00C9\u00CA\u00CB\u00CD\u00CE\u00CF\u00D3\u00D6\u00D4\u00D5\u0152\u00DA\u00D9\u00DB\u00DC\u0178\u00C7\u00D1\uFF41-\uFF5A\uFF10-\uFF19-_+'\uFF3F\uFF0B\u30FC\u3005\u3041-\u3096\u30A0-\u30FF\uFF61-\uFF9F\u3400-\u4DB5\u4E00-\u9FFF\u2E80-\u2FD5\u1100-\u11FF\uA960-\uA97F\uAC00-\uD7A3\uD7B0-\uD7FF\u3139-\u318F\uF900-\uFAFF\u0400-\u04FF\u0500-\u052F]*$/.test(
            it
          );
        }
        _(_t, "isValidEmojiName");
        var pt = e(4244379358),
          Qe = e(4675837085);
        const ct = new m.Ay("custom_emoji_list"),
          Pt = {
            ADD_DIALOG_INPUT: "customize_emoji_add_dialog_input",
            ADD_DIALOG_ERROR: "customize_emoji_add_dialog_error",
            ADD_DIALOG_FILE_INPUT: "customize_emoji_add_dialog_file_input",
            ADD_DIALOG_FILE_INFO: "customize_emoji_add_dialog_file_info",
            ADD_DIALOG_IMAGE_PREVIEW:
              "customize_emoji_add_dialog_image_preview",
            ADD_DIALOG_IMAGE_PREVIEW_ERROR:
              "customize_emoji_add_dialog_image_preview_error",
            ADD_DIALOG_MESSAGE: "customize_emoji_add_dialog_message",
            ADD_DIALOG_UPLOAD: "customize_emoji_add_dialog_upload",
            ADD_DIALOG_UPLOAD_IMAGE_PROMPT:
              "customize_emoji_add_dialog_upload_image_prompt",
            ADD_DIALOG_UPLOAD_PREVIEW:
              "customize_emoji_add_dialog_upload_preview",
            ADD_DIALOG: "customize_emoji_add_dialog",
            ADD_DIALOG_DUPLICATE_PREVIEW:
              "customize_emoji_add_dialog_duplicate_preview",
          };
        let zt = _(
          class extends t.PureComponent {
            componentDidMount() {
              const { clogger: Tt } = this.props;
              Tt.track(this.eventId, {
                contexts: {
                  ui_context: {
                    step: "add_custom_emoji",
                    action: "impression",
                    ui_component: "dialog",
                    ui_properties: {
                      element_type: "dialog",
                      element_name: "add_custom_emoji_dialog",
                    },
                  },
                },
              }),
                this.maybeLoadEmojiPreviewFromUrl(),
                this.props.emojiNameSuggestion &&
                  this.state.newEmojiName &&
                  this.checkIfEmojiNameAlreadyExistsImmediate(
                    this.props.emojiNameSuggestion
                  );
            }
            shouldPreventSubmit() {
              const {
                  newEmojiName: Tt,
                  uploadedImage: Ct,
                  nameErrorText: Rt,
                } = this.state,
                { emojiUrl: Yt } = this.props,
                bn = Tt.length > 100;
              return !Tt || bn || !!Rt || (!Yt && !Ct);
            }
            onDragOver(Tt) {
              Tt.preventDefault(), (Tt.dataTransfer.dropEffect = "copy");
            }
            onDrop(Tt) {
              Tt.preventDefault();
              const Ct = Tt.dataTransfer.files[0];
              if (Ct) {
                const Rt = Ct.name,
                  Yt = URL.createObjectURL(Ct);
                this.updateAfterUpload({
                  uploadedImage: Ct,
                  fileName: Rt,
                  previewImageUrl: Yt,
                });
              } else
                this.setState(() => ({
                  uploadedImage: null,
                  fileName: "",
                  previewImageUrl: "",
                  imagePreviewError: !1,
                }));
            }
            onEmojiNameChange(Tt) {
              const { standardEmojiData: Ct } = this.props;
              let Rt = "";
              this.setState(() => ({
                newEmojiName: Tt,
              })),
                /[A-Z]/.test(Tt) ||
                /[ .,;`\u2013~!@#$%^&*(){}=\\:"<>?|]/.test(Tt)
                  ? (Rt = ct.t(
                      "Names must be lowercase, and can\u2019t contain spaces, periods, or most punctuation."
                    ))
                  : Tt in Ct
                  ? (Rt = ct.t(
                      "An emoji with this name already exists. Check if the existing emoji is a duplicate, or try a different name."
                    ))
                  : _t(Tt)
                  ? this.checkIfEmojiNameAlreadyExists(Tt)
                  : (Rt = ct.t(
                      "Names must be lowercase, and can\u2019t contain spaces, periods, or most punctuation."
                    )),
                this.setState(() => ({
                  nameErrorText: Rt,
                }));
            }
            onImagePreviewError() {
              this.setState(() => ({
                imagePreviewError: !0,
              }));
            }
            onSubmit(Tt) {
              Tt && Tt.preventDefault();
              const { newEmojiName: Ct, uploadedImage: Rt } = this.state,
                { emojiUrl: Yt } = this.props;
              if (this.shouldPreventSubmit()) return;
              this.setState(() => ({
                goButtonIsPending: !0,
              }));
              const Wn = {
                ...{
                  reason: "add-custom-emoji-dialog-content",
                  name: Ct,
                },
                ...(Yt
                  ? {
                      mode: "url",
                      url: Yt,
                    }
                  : {
                      mode: "data",
                      searchArgs: this.props.searchArgs,
                      ...(Rt
                        ? {
                            image: Rt,
                          }
                        : {}),
                    }),
              };
              this.props
                .addCustomEmoji(Wn)
                .then(() => {
                  this.props.closeModal();
                  const hn = this.renderToastMessage();
                  this.props.enqueueToast({
                    element: hn,
                  }),
                    this.setState(() => ({
                      goButtonIsPending: !1,
                    })),
                    this.props.clogger.track(this.eventId, {
                      contexts: {
                        ui_context: {
                          step: Yt ? "import_custom_emoji" : "add_custom_emoji",
                          action: Yt ? "import" : "add",
                          action_status: "success",
                          ui_component: "dialog",
                          ui_properties: {
                            element_type: "button",
                            element_name: "save",
                          },
                        },
                      },
                    });
                })
                .catch((hn) => {
                  let Bn;
                  const Rn = (0, ve.A)(hn, "data.error");
                  (Rn === at.W.NoUrlProvided || Rn === at.W.NoUrlImage) &&
                    (Bn = ct.t(
                      "Something happened that prevented the image from being imported. Try again?"
                    )),
                    Rn === "error_bad_upload"
                      ? (Bn = ct.t(
                          "Something happened that prevented your file from being uploaded. Try again?"
                        ))
                      : Rn === "error_bad_format"
                      ? (Bn = ct.t(
                          "Please make sure your file is a GIF, JPEG, PNG, or WEBP."
                        ))
                      : Rn === "resized_but_still_too_large" ||
                        Rn === "too_many_frames"
                      ? (Bn = ct.t(
                          "This image is a bit too big, even after resizing. A smaller file might help?"
                        ))
                      : Rn === "error_too_big"
                      ? (Bn = ct.t("Please choose an image smaller than 64KB."))
                      : Rn === "error_name_taken_i18n"
                      ? (Bn = ct.rt(
                          "Unfortunately, the international emoji set already includes an emoji named <b>{newEmojiName}</b>. Mind trying a different name?",
                          {
                            newEmojiName: Ct,
                          }
                        ))
                      : Rn === "error_name_taken"
                      ? (Bn = ct.rt(
                          "The name <b>{newEmojiName}</b> is already in use by another emoji.",
                          {
                            newEmojiName: Ct,
                          }
                        ))
                      : (Rn === "error_bad_name" ||
                          Rn === "error_bad_name_i18n") &&
                        (Bn = ct.t(
                          "Names must be lowercase, and can\u2019t contain spaces, periods, or most punctuation."
                        )),
                    this.setState(() => ({
                      apiErrorText: Bn,
                      goButtonIsPending: !1,
                    })),
                    this.props.clogger.track(this.eventId, {
                      contexts: {
                        ui_context: {
                          step: "add_custom_emoji",
                          action: "add",
                          action_status: "fail",
                          ui_component: "dialog",
                          ui_properties: {
                            element_type: "button",
                            element_name: "save",
                          },
                        },
                      },
                    });
                });
            }
            onTextBlur() {
              this.setState(() => ({
                placeholder: !0,
              }));
            }
            onTextFocus() {
              this.setState(() => ({
                placeholder: !1,
              }));
            }
            onUploadChange() {
              var Tt, Ct;
              const Rt =
                !(
                  (Tt = this.fileInput) === null ||
                  Tt === void 0 ||
                  (Ct = Tt.current) === null ||
                  Ct === void 0
                ) && Ct.files
                  ? this.fileInput.current.files[0]
                  : null;
              if (Rt) {
                const Yt = Rt.name,
                  bn = URL.createObjectURL(Rt);
                this.updateAfterUpload({
                  uploadedImage: Rt,
                  fileName: Yt,
                  previewImageUrl: bn,
                });
              } else
                this.setState(() => ({
                  uploadedImage: null,
                  fileName: "",
                  previewImageUrl: "",
                  imagePreviewError: !1,
                }));
            }
            maybeLoadEmojiPreviewFromUrl() {
              const { emojiUrl: Tt } = this.props;
              Tt &&
                this.setState(() => ({
                  previewImageUrl: Tt,
                  imagePreviewError: !1,
                }));
            }
            convertFileNameToEmojiName(Tt) {
              if (!Tt) return null;
              const Ct = Tt.lastIndexOf("."),
                Rt = Ct > 0 ? Tt.substring(0, Ct) : Tt;
              return Rt
                ? Rt.toLowerCase()
                    .replace(/\s/g, "-")
                    .replace(/[ .,;`\u2013~!@#$%^&*(){}=\\:"<>?|]/g, "")
                : null;
            }
            updateAfterUpload(Tt) {
              let { uploadedImage: Ct, fileName: Rt, previewImageUrl: Yt } = Tt;
              const { newEmojiName: bn, fileName: Wn } = this.state;
              let hn = bn;
              (!bn || bn === this.convertFileNameToEmojiName(Wn)) &&
                (hn = this.convertFileNameToEmojiName(Rt) || hn),
                this.setState(
                  () => ({
                    uploadedImage: Ct,
                    fileName: Rt,
                    previewImageUrl: Yt,
                    imagePreviewError: !1,
                  }),
                  () => this.onEmojiNameChange(hn)
                );
            }
            fileUpload() {
              var Tt;
              const Ct =
                (Tt = this.props.windowRef.deref()) === null || Tt === void 0
                  ? void 0
                  : Tt.document.getElementById("emojiimg");
              Ct == null || Ct.click(),
                this.props.clogger.track(this.eventId, {
                  contexts: {
                    ui_context: {
                      step: "add_custom_emoji",
                      action: "click",
                      ui_component: "dialog",
                      ui_properties: {
                        element_type: "button",
                        element_name: "upload_image",
                      },
                    },
                  },
                });
            }
            renderChooseNamePrompt() {
              const { newEmojiName: Tt, nameErrorText: Ct } = this.state;
              return t.createElement(
                "ol",
                {
                  className: "black margin_bottom_0",
                  start: 2,
                },
                t.createElement(
                  "li",
                  {
                    className: "margin_bottom_0",
                  },
                  t.createElement(
                    "div",
                    null,
                    " ",
                    ct.t("Give it a name"),
                    " "
                  ),
                  t.createElement(
                    "div",
                    {
                      className:
                        "normal sk_foreground_max p-add_custom_emoji_dialog__choose_name_container",
                    },
                    ct.t(
                      "This is also what you\u2019ll type to add this emoji to your messages."
                    )
                  ),
                  t.createElement(
                    "div",
                    {
                      className: "p_add_custom_emoji_dialog__name_input",
                    },
                    t.createElement(Z.A, {
                      id: "emojiname",
                      name: "name",
                      value: Tt,
                      onChange: this.onEmojiNameChange,
                      onFocus: this.onTextFocus,
                      onBlur: this.onTextBlur,
                      placeholder: this.renderPlaceholderText(),
                      prefix: ":",
                      suffix: ":",
                      maxCharacterLimit: 100,
                      counterMinimumCharacters: 101,
                      errorText: Ct,
                      "data-qa": Pt.ADD_DIALOG_INPUT,
                      useInlineAlert: !0,
                    })
                  )
                )
              );
            }
            maybeRenderDuplicateNameErrorPreview() {
              const { newEmojiName: Tt, nameErrorText: Ct } = this.state,
                Rt = ct.t(
                  "An emoji with this name already exists. Check if the existing emoji is a duplicate, or try a different name."
                );
              return Ct === Rt
                ? t.createElement(
                    "div",
                    {
                      className: "inline_flex full_width",
                      "data-qa": Pt.ADD_DIALOG_DUPLICATE_PREVIEW,
                    },
                    t.createElement($.Ay, {
                      text: Tt,
                      alt: Tt,
                      emojiSize: "larger",
                      className: "flex_shrink_none",
                    }),
                    t.createElement(
                      "div",
                      {
                        className: "padding_left_50 overflow_hidden",
                      },
                      t.createElement("strong", null, ct.t("Existing emoji")),
                      t.createElement(
                        "span",
                        {
                          className: "block normal overflow_ellipsis",
                        },
                        ":",
                        Tt,
                        ":"
                      )
                    )
                  )
                : null;
            }
            renderDialogMessage() {
              const { orgName: Tt } = this.props;
              let Ct;
              return (
                Tt
                  ? (Ct = ct.rt(
                      "Your custom emoji will be available in every <b>{orgName}</b> workspace. You\u2019ll find it in the custom tab of the emoji picker. (Hint: it\u2019s the one with the Slack icon!)",
                      {
                        orgName: Tt,
                      }
                    ))
                  : (Ct = ct.t(
                      "Your custom emoji will be available to everyone in your workspace. You\u2019ll find it in the custom tab of the emoji picker. (Hint: it\u2019s the one with the Slack icon!)"
                    )),
                t.createElement(
                  "div",
                  {
                    className: "p-add_custom_emoji_dialog",
                    "data-qa": Pt.ADD_DIALOG_MESSAGE,
                  },
                  t.createElement("div", null, Ct),
                  t.createElement("div", null, this.renderErrorMessage()),
                  t.createElement(
                    "form",
                    {
                      className: "p-add_custom_emoji_dialog__form",
                      onSubmit: this.onSubmit,
                    },
                    this.renderUploadImagePrompt(),
                    t.createElement("hr", null),
                    this.renderChooseNamePrompt(),
                    this.maybeRenderDuplicateNameErrorPreview()
                  )
                )
              );
            }
            renderErrorMessage() {
              const { apiErrorText: Tt } = this.state;
              return Tt
                ? t.createElement(
                    L.Ay,
                    {
                      level: "error",
                      className: "margin_top_50 margin_bottom_100",
                      "data-qa": Pt.ADD_DIALOG_ERROR,
                    },
                    t.createElement("span", null, " ", Tt, " ")
                  )
                : null;
            }
            renderImagePreview() {
              const { previewImageUrl: Tt } = this.state,
                Ct = t.createElement("img", {
                  src: Tt,
                  alt: ct.t("image preview"),
                  className: "p-add_custom_emoji_dialog__image",
                  onError: this.onImagePreviewError,
                  draggable: !1,
                }),
                { imagePreviewError: Rt } = this.state;
              return Rt
                ? t.createElement(
                    "div",
                    {
                      className: "p-add_custom_emoji_dialog__icon_container",
                      "data-qa": Pt.ADD_DIALOG_IMAGE_PREVIEW_ERROR,
                    },
                    t.createElement(
                      k.Ay,
                      {
                        tip: ct.t(
                          "We couldn't preview your image. Make sure it's a GIF, JPEG, or PNG."
                        ),
                        zIndex: "above_fs",
                      },
                      t.createElement(x.A, {
                        type: "exclamation-circle",
                        size: "inherit",
                        className:
                          "p-add_custom_emoji_dialog__icon_broken block",
                      })
                    )
                  )
                : t.createElement(
                    "div",
                    {
                      className:
                        "align_center p-add_custom_emoji_dialog__image_container",
                      "data-qa": Pt.ADD_DIALOG_IMAGE_PREVIEW,
                    },
                    Ct
                  );
            }
            renderPlaceholderText() {
              const { placeholder: Tt } = this.state;
              let Ct;
              return Tt ? (Ct = ct.t("avocado")) : (Ct = ""), Ct;
            }
            renderToastMessage() {
              const { newEmojiName: Tt, previewImageUrl: Ct } = this.state,
                Rt = t.createElement($.Ay, {
                  text: Tt,
                  url: Ct,
                  emojiSize: $.lw.MEDIUM,
                }),
                Yt = ct.rt(
                  "{emoji} :{newEmojiName}: has been added and is ready for use.",
                  {
                    emoji: Rt,
                    newEmojiName: Tt,
                  }
                );
              return t.createElement(
                N.Ay,
                {
                  toastClasses: "p-customize_emoji_list__toast",
                },
                t.createElement("span", null, Yt)
              );
            }
            renderUploadImagePrompt() {
              const { emojiUrl: Tt } = this.props,
                Ct = ct.t(
                  "Square images under 128KB and with transparent backgrounds work best. If your image is too large, we\u2019ll try to resize it for you."
                ),
                Rt = t.createElement(
                  t.Fragment,
                  null,
                  t.createElement(
                    "div",
                    {
                      className:
                        "p-add_custom_emoji_dialog__upload_preview rounded bordered",
                    },
                    this.renderUploadPreview()
                  ),
                  t.createElement(
                    "div",
                    {
                      className:
                        "p-add_custom_emoji_dialog__upload_preview p-add_custom_emoji_dialog__upload_preview--dark rounded bordered margin_left_50",
                    },
                    this.renderUploadPreview()
                  )
                ),
                Yt = Tt
                  ? ct.t("Import external emoji")
                  : ct.t("Upload an image");
              return t.createElement(
                "ol",
                {
                  className: "black",
                  onDragOver: this.onDragOver,
                  onDrop: this.onDrop,
                  "data-qa": Pt.ADD_DIALOG_UPLOAD_IMAGE_PROMPT,
                },
                t.createElement(
                  "li",
                  {
                    className: "large_bottom_margin",
                  },
                  t.createElement("div", null, " ", Yt, " "),
                  !Tt &&
                    t.createElement(
                      "div",
                      {
                        className: "normal sk_foreground_max",
                      },
                      Ct
                    ),
                  t.createElement(
                    "div",
                    {
                      className:
                        "normal p-add_custom_emoji_dialog__upload_container",
                    },
                    Rt,
                    !Tt &&
                      t.createElement(
                        "div",
                        {
                          className:
                            "p-add_custom_emoji_dialog__upload_button margin_left_100",
                        },
                        this.renderUploadedFileText(),
                        t.createElement("input", {
                          type: "file",
                          className: "p-add_custom_emoji_dialog__upload_input",
                          id: "emojiimg",
                          name: "img",
                          accept: "image/*;capture=camera",
                          ref: this.fileInput,
                          onChange: this.onUploadChange,
                          "data-qa": Pt.ADD_DIALOG_FILE_INPUT,
                        }),
                        t.createElement(
                          w.Ay,
                          {
                            type: "outline",
                            size: "medium",
                            onClick: this.fileUpload,
                            "data-qa": Pt.ADD_DIALOG_UPLOAD,
                          },
                          " ",
                          ct.t("Upload Image"),
                          " "
                        )
                      )
                  )
                )
              );
            }
            renderUploadPreview() {
              const { fileName: Tt } = this.state,
                { emojiUrl: Ct } = this.props;
              let Rt;
              return (
                Tt || Ct
                  ? (Rt = this.renderImagePreview())
                  : (Rt = t.createElement(
                      "div",
                      {
                        className: "p-add_custom_emoji_dialog__icon_container",
                        "data-qa": Pt.ADD_DIALOG_UPLOAD_PREVIEW,
                      },
                      t.createElement(x.A, {
                        type: "file-image",
                        size: "inherit",
                        className: "p-add_custom_emoji_dialog__icon block ",
                      })
                    )),
                Rt
              );
            }
            renderUploadedFileText() {
              const { fileName: Tt } = this.state;
              let Ct;
              return (
                Tt
                  ? (Ct = t.createElement(
                      "div",
                      {
                        className:
                          "margin_bottom_25 p-add_custom_emoji_dialog__filename",
                      },
                      " ",
                      Tt,
                      " "
                    ))
                  : (Ct = t.createElement(
                      "div",
                      {
                        className: "sk_foreground_max margin_bottom_25",
                      },
                      " ",
                      ct.t("Select an image"),
                      " "
                    )),
                Ct
              );
            }
            render() {
              const { goButtonIsPending: Tt } = this.state,
                Ct = this.shouldPreventSubmit();
              return t.createElement(
                t.Fragment,
                null,
                t.createElement(
                  d.$m,
                  null,
                  t.createElement(
                    d.qf,
                    {
                      "data-qa": `${Pt.ADD_DIALOG}_body`,
                    },
                    this.renderDialogMessage()
                  )
                ),
                t.createElement(
                  d.jl,
                  null,
                  t.createElement(
                    d.ox,
                    null,
                    t.createElement(
                      d.s_,
                      {
                        type: "outline",
                        "aria-label": ct.t("Cancel"),
                      },
                      ct.t("Cancel")
                    ),
                    t.createElement(
                      w.lV,
                      {
                        type: "primary",
                        onClick: this.onSubmit,
                        loading: Tt,
                        disabled: Ct,
                        "data-qa": `${Pt.ADD_DIALOG}_go`,
                        "aria-label": ct.t("Save"),
                      },
                      ct.t("Save")
                    )
                  )
                )
              );
            }
            constructor(Tt) {
              super(Tt),
                (this.fileInput = t.createRef()),
                (this.checkIfEmojiNameAlreadyExistsImmediate = (Ct) => {
                  this.props
                    .getEmojiInfo({
                      name: Ct,
                    })
                    .then(() => {
                      this.state.newEmojiName === Ct &&
                        this.setState(() => ({
                          nameErrorText: ct.t(
                            "An emoji with this name already exists. Check if the existing emoji is a duplicate, or try a different name."
                          ),
                        }));
                    })
                    .catch(Se.A);
                }),
                (this.checkIfEmojiNameAlreadyExists = (0, Ee.A)(
                  this.checkIfEmojiNameAlreadyExistsImmediate,
                  200
                )),
                (this.state = {
                  uploadedImage: null,
                  newEmojiName: this.props.emojiNameSuggestion,
                  fileName: "",
                  previewImageUrl: this.props.emojiUrl || "",
                  placeholder: !0,
                  nameErrorText: "",
                  apiErrorText: null,
                  imagePreviewError: !1,
                  goButtonIsPending: !1,
                }),
                (this.fileInput = t.createRef()),
                (this.eventId = Tt.clientApp
                  ? pe.EventId.ADD_CUSTOM_EMOJI_IN_CLIENT
                  : pe.EventId.PAGE_CUSTOMIZE_EMOJI),
                (0, be.v)(this, [
                  "onEmojiNameChange",
                  "onTextFocus",
                  "onTextBlur",
                  "onUploadChange",
                  "onImagePreviewError",
                  "onSubmit",
                  "renderUploadedFileText",
                  "renderUploadPreview",
                  "renderUploadImagePrompt",
                  "renderPlaceholderText",
                  "renderChooseNamePrompt",
                  "renderDialogMessage",
                  "renderToastMessage",
                  "renderErrorMessage",
                  "renderImagePreview",
                  "fileUpload",
                  "onDrop",
                  "onDragOver",
                  "maybeLoadEmojiPreviewFromUrl",
                  "maybeRenderDuplicateNameErrorPreview",
                ]);
            }
          },
          "AddCustomEmojiDialogContent"
        );
        (zt.displayName = "AddCustomEmojiDialogContent"),
          (zt.defaultProps = {
            standardEmojiData: {},
            addCustomEmoji: Se.A,
            enqueueToast: Se.A,
            clientApp: !1,
            closeModal: Se.A,
            getEmojiInfo: Se.A,
            searchArgs: {},
            emojiNameSuggestion: "",
            windowRef: (0, Qe.O)(window),
          });
        const an = _(
            (it) => ({
              addCustomEmoji: (Tt) => it((0, at.l)(Tt)),
              enqueueToast: function () {
                for (
                  var Tt = arguments.length, Ct = new Array(Tt), Rt = 0;
                  Rt < Tt;
                  Rt++
                )
                  Ct[Rt] = arguments[Rt];
                return it((0, ee.M)(...Ct));
              },
              closeModal: () => it((0, i.O)()),
              getEmojiInfo: function () {
                for (
                  var Tt = arguments.length, Ct = new Array(Tt), Rt = 0;
                  Rt < Tt;
                  Rt++
                )
                  Ct[Rt] = arguments[Rt];
                return it(Oe(...Ct));
              },
            }),
            "mapDispatchToProps"
          ),
          Qt = _(
            (it) => ({
              standardEmojiData: (0, ne.O)(it),
              clientApp: (0, J.TZ)(it),
              clogger: (0, Ce.e)({
                state: it,
              }),
            }),
            "mapStateToProps"
          ),
          tn = (0, de.N)(Qt, an)((0, pt.A)(zt));
        var Ht = e(1194535350),
          Kt = e(4318855015),
          qt = e(5510392579),
          Tn = e(9236644324),
          Mt = e(6105929840),
          Jt = e(5305906809);
        const dn = new m.Ay("custom_emoji_list"),
          rn = _((it) => {
            let { adding: Tt, name: Ct } = it;
            const Rt = (0, n.wA)();
            return t.createElement(
              N.Ay,
              {
                onCloseComplete: () => {
                  Tt && Rt((0, Kt.su)());
                },
              },
              t.createElement(
                "span",
                {
                  "data-qa": "emoji-pack-action",
                },
                Tt &&
                  dn.rt(
                    "The {name} emoji pack has been added to your workspace.",
                    {
                      name: t.createElement("b", null, Ct),
                    }
                  ),
                !Tt &&
                  dn.rt(
                    "The {name} emoji pack has been removed from your workspace.",
                    {
                      name: t.createElement("b", null, Ct),
                    }
                  )
              )
            );
          }, "InstallToast");
        rn.displayName = "InstallToast";
        const gn = _((it) => {
          let {
            name: Tt,
            url: Ct,
            index: Rt,
            copyToClipboard: Yt,
            onClose: bn,
          } = it;
          const Wn = (0, n.wA)(),
            hn = t.createElement(K.Ay, {
              showTooltip: !0,
              text: Tt,
              url: Ct,
              emojiSize: K.lw.LARGE,
            });
          function Bn() {
            (0, Tn.x3)(Tt),
              bn && bn(),
              Wn((0, i.O)()),
              Wn(
                (0, ee.M)({
                  element: t.createElement(
                    N.Ay,
                    null,
                    t.createElement(
                      "span",
                      null,
                      dn.rt("Emoji copied to clipboard", {
                        name: Tt,
                      })
                    )
                  ),
                })
              );
          }
          return (
            _(Bn, "onClick"),
            (Bn.displayName = "onClick"),
            Yt && (0, Tn.tD)()
              ? t.createElement(
                  U.A,
                  {
                    className: "p-emoji_pack_details__button",
                    "data-color-index": Rt % Jt.dX,
                    onClick: Bn,
                  },
                  hn
                )
              : hn
          );
        }, "EmojiButton");
        gn.displayName = "EmojiButton";
        const Zt = _((it) => {
          let {
            collectionId: Tt,
            name: Ct,
            author: Rt,
            installed: Yt,
            emoji: bn,
            onCancelClick: Wn,
            onClose: hn,
          } = it;
          const Bn = (0, n.wA)(),
            Rn = (0, v.d4)(qt.h3),
            [zn, is] = (0, t.useState)(!1),
            ss = (0, t.useCallback)(() => {
              is(!0),
                Bn(
                  (0, Ht._J)({
                    collectionId: Tt,
                    reason: "emojiPack:dialog",
                  })
                ).then(() => {
                  is(!1),
                    hn && hn(),
                    Bn((0, i.O)()),
                    Bn(
                      (0, ee.M)({
                        element: t.createElement(rn, {
                          adding: !0,
                          name: Ct,
                        }),
                      })
                    );
                });
            }, [Bn, Tt, Ct, hn]),
            [jn, Yn] = (0, t.useState)(!1),
            Qn = (0, t.useCallback)(() => {
              Yn(!0),
                Bn(
                  (0, Ht.zx)({
                    collectionId: Tt,
                    reason: "emojiPack:dialog",
                  })
                ).then(() => {
                  Yn(!1),
                    hn && hn(),
                    Bn((0, i.O)()),
                    Bn(
                      (0, ee.M)({
                        element: t.createElement(rn, {
                          adding: !1,
                          name: Ct,
                        }),
                      })
                    );
                });
            }, [Bn, Tt, Ct, hn]);
          if (!bn) return null;
          const es = (0, b.A)(bn, (bt, In) => ({
              name: In,
              url: bt,
            })).map((bt, In) => ({
              ...bt,
              index: In,
            })),
            Et = (0, y.A)(es, 5),
            gt = dn.t("{emojiCount, plural, =1 {# emoji} other {# emoji}}", {
              emojiCount: (0, f.A)(bn),
            }),
            Ft = dn.t("by {author}", {
              author: Rt,
            }),
            nn = t.createElement(
              t.Fragment,
              null,
              t.createElement(
                "span",
                {
                  className: "p-emoji_pack_details__subtitle_author",
                },
                Ft
              ),
              gt
            ),
            Dn = t.createElement(Mt.A, {
              "aria-label": dn.t("Go back"),
              icon: "chevron-large-left",
              onClick: () => Wn(),
            });
          return t.createElement(
            t.Fragment,
            null,
            t.createElement(
              d.rQ,
              null,
              t.createElement(d.Rc, {
                icon: Dn,
                title: Ct,
                subtitle: nn,
              })
            ),
            t.createElement(
              d.$m,
              null,
              t.createElement(
                d.qf,
                null,
                Et.map((bt) =>
                  t.createElement(
                    "div",
                    {
                      key: bt.map((In) => In.name).join("-details-"),
                      className: "p-emoji_pack_details__emoji_row",
                    },
                    bt.map((In) =>
                      t.createElement(gn, {
                        key: `emoji-pack-details-${In.name}`,
                        name: `:${In.name}:`,
                        url: In.url,
                        index: In.index,
                        copyToClipboard: Yt,
                        onClose: hn,
                      })
                    ),
                    [...new Array(5 - bt.length)]
                      .map((In, xn) => `emoji-pack-details-spacer-${xn}`)
                      .map((In) =>
                        t.createElement("div", {
                          key: In,
                          className: "p-emoji_pack_details__emoji_spacer",
                        })
                      )
                  )
                )
              )
            ),
            t.createElement(
              d.jl,
              null,
              Yt &&
                (0, Tn.tD)() &&
                t.createElement(
                  "span",
                  {
                    className: "p-emoji_pack_details__tip",
                  },
                  dn.t("Click an emoji to copy to clipboard")
                ),
              t.createElement(
                d.ox,
                null,
                Yt &&
                  Rn &&
                  t.createElement(
                    w.lV,
                    {
                      autoFocus: !0,
                      type: "danger",
                      loading: jn,
                      onClick: Qn,
                      "aria-label": dn.t("Remove pack"),
                    },
                    dn.t("Remove pack")
                  ),
                !Yt &&
                  t.createElement(
                    w.lV,
                    {
                      autoFocus: !0,
                      loading: zn,
                      onClick: ss,
                      "aria-label": dn.t("Add pack"),
                    },
                    dn.t("Add pack")
                  )
              )
            )
          );
        }, "EmojiPackDetails");
        Zt.displayName = "EmojiPackDetails";
        const Vt = Zt;
        var Sn = e(1655938719);
        const ze = new m.Ay("custom_emoji_list"),
          Ot = {
            CUSTOM: "custom",
            PACKS: "packs",
          },
          fn = _((it) => {
            let {
              orgName: Tt = "",
              searchArgs: Ct = {},
              showEmojiPacks: Rt,
              initialTab: Yt = Ot.CUSTOM,
              emojiNameSuggestion: bn = "",
              emojiUrl: Wn,
              megaphoneEventOnClose: hn,
            } = it;
            const Bn = (0, n.wA)(),
              [Rn, zn] = (0, t.useState)(Yt),
              [is, ss] = (0, t.useState)(!1),
              [jn, Yn] = (0, t.useState)(null),
              Qn = Wn ? ze.t("Add emoji to your organization") : void 0,
              es = Rt ? ze.t("Add emoji") : ze.t("Add custom emoji"),
              Et = Qn ?? es,
              gt = ze.t("Emoji packs"),
              Ft = ze.t("Custom emoji"),
              nn = (0, t.useMemo)(
                () => [
                  {
                    title: Ft,
                    id: Ot.CUSTOM,
                    onClick: () => zn(Ot.CUSTOM),
                    "data-qa": "add_emoji_dialog_tab_custom",
                  },
                  {
                    title: gt,
                    id: Ot.PACKS,
                    onClick: () => zn(Ot.PACKS),
                    "data-qa": "add_emoji_dialog_tab_packs",
                  },
                ],
                [Ft, gt]
              ),
              Dn = (0, t.useCallback)(() => {
                hn &&
                  Bn(
                    (0, Sn.iR)({
                      event: {
                        type: hn,
                      },
                    })
                  );
              }, [Bn, hn]),
              bt = (0, t.useCallback)(() => {
                Dn(), Bn((0, i.O)());
              }, [Bn, Dn]),
              In = Rt && Rn === Ot.PACKS,
              xn = Rt
                ? t.createElement(o.A, {
                    tabs: nn,
                    currentTabId: Rn,
                    className: "p-add_custom_emoji_dialog__tabs",
                    ariaLabel: Et,
                  })
                : null,
              Nt = (0, s.A)("p-add_emoji_dialog", {
                "p-add_emoji_dialog--without_tabs": !Rt,
              });
            return Rt && jn
              ? t.createElement(
                  d.dW,
                  {
                    closeModal: bt,
                    isOpen: !0,
                    className: Nt,
                  },
                  t.createElement(Vt, {
                    collectionId: a(jn),
                    name: (0, r.M)(jn),
                    author: c(jn),
                    emoji: is ? l(jn) : (0, u.H)(jn),
                    installed: is,
                    onCancelClick: () => {
                      Yn(null);
                    },
                    onClose: Dn,
                  })
                )
              : t.createElement(
                  d.dW,
                  {
                    overlayClassName: "p-add_emoji_dialog_overlay",
                    closeModal: bt,
                    isOpen: !0,
                    className: Nt,
                  },
                  t.createElement(
                    d.rQ,
                    null,
                    t.createElement(d.Rc, {
                      title: Et,
                      className: "no_min_height padding_bottom_50",
                    }),
                    xn
                  ),
                  In &&
                    t.createElement(ae, {
                      orgName: Tt,
                      onPackClick: (At, te) => {
                        let { installed: _e } = te;
                        ss(_e), Yn(At);
                      },
                    }),
                  !In &&
                    t.createElement(tn, {
                      orgName: Tt,
                      searchArgs: Ct,
                      emojiNameSuggestion: bn,
                      emojiUrl: Wn,
                    })
                );
          }, "AddEmojiDialog");
        fn.displayName = "AddEmojiDialog";
        const ln = fn;
      },
      5331686899: (W, A, e) => {
        "use strict";
        e.d(A, {
          lw: () => K,
          Ay: () => G,
        });
        var t = e(7752974446),
          n = e.n(t),
          s = e(5824283093),
          i = e(2562405183),
          d = e(9391594207),
          o = e(5255740490),
          a = e(2047021170),
          r = e(8525228540),
          c = e(8847766420),
          u = e(3829348308),
          l = e(3043682041),
          m = e(9599231336),
          v = e(735940183),
          E = e(8556787853),
          T = e(5799716058),
          g = e(4921059838),
          I = e(6795568989),
          f = e(3695531806),
          y = e(1563996154),
          M = e(1610251172),
          p = e(796111729);
        function O() {
          return (
            (O =
              Object.assign ||
              function (H) {
                for (var F = 1; F < arguments.length; F++) {
                  var V = arguments[F];
                  for (var X in V)
                    Object.prototype.hasOwnProperty.call(V, X) && (H[X] = V[X]);
                }
                return H;
              }),
            O.apply(this, arguments)
          );
        }
        _(O, "_extends");
        function C(H) {
          return class extends s.PureComponent {
            componentDidCatch(F, V) {
              this.setState(() => ({
                hasError: !0,
              })),
                (0, p.Wo)().error({
                  label: "Error rendering emoji component",
                  error: F,
                  message: V,
                });
            }
            render() {
              return this.state.hasError
                ? s.createElement(
                    "span",
                    {
                      "data-qa": "missing_emoji",
                      className: "c-emoji c-emoji__medium c-emoji--inline",
                    },
                    s.createElement("img", {
                      src: n(),
                    })
                  )
                : s.createElement(H, O({}, this.props));
            }
            constructor(F) {
              super(F),
                (this.state = {
                  hasError: !1,
                });
            }
          };
        }
        _(C, "withEmojiErrorBoundary"),
          (C.displayName = "withEmojiErrorBoundary");
        const h = C;
        var D = e(9580887194),
          P = e(8021873188),
          S = e(9936232041);
        function b() {
          return (
            (b =
              Object.assign ||
              function (H) {
                for (var F = 1; F < arguments.length; F++) {
                  var V = arguments[F];
                  for (var X in V)
                    Object.prototype.hasOwnProperty.call(V, X) && (H[X] = V[X]);
                }
                return H;
              }),
            b.apply(this, arguments)
          );
        }
        _(b, "emoji_extends");
        const K = {
            SMALL: "small",
            MEDIUM: "medium",
            LARGE: "large",
            LARGER: "larger",
            XLARGE: "xlarge",
          },
          x = _((H) => {
            const F = (0, i.d4)((V) => {
              if (!H.isStandard) return H.url;
              var X;
              const q =
                (X = H.sourceTeamId) !== null && X !== void 0
                  ? X
                  : (0, c.ZT)(V);
              return H.isStandard
                ? (0, u.Ez)(V, {
                    text: H.text || "",
                    teamId: q,
                    emojiMode: (0, l.w)(V, {
                      forceDisplay: !!H.forceDisplay,
                    }),
                    emojiSize: K.XLARGE,
                  })
                : H.url;
            });
            return s.createElement(B, {
              shouldFallbackOnLoadError: !0,
              renderAsText: !1,
              showTooltip: !1,
              emojiSize: K.LARGER,
              text: H.text,
              displayText: H.displayText,
              url: F || "",
              sourceTeamId: H.sourceTeamId,
              ariaLabel: H.ariaLabel,
              alt: H.alt,
              unicode: H.unicode,
              emojiNameFromText: H.emojiNameFromText,
              dispatch: H.dispatch,
              stopAnimations: H.stopAnimations,
              fallbackUrl: H.fallbackUrl,
              isStandard: H.isStandard,
            });
          }, "EmojiTooltipEmoji");
        x.displayName = "EmojiTooltipEmoji";
        let B = _(
          class extends s.PureComponent {
            onLoadError() {
              this.setState(() => ({
                isLoadError: !0,
              }));
            }
            renderIconFallback() {
              return s.createElement(M.A, {
                legacy: !0,
                className: "c-emoji__text_mode_icon",
                type: "info-circle",
                align: "top",
                inherit: !0,
              });
            }
            isImportable() {
              const { isLoadError: F } = this.state,
                { isImportAllowed: V, isStandard: X } = this.props;
              return V && !X && !F;
            }
            renderEmojiElement() {
              const {
                  text: F,
                  displayText: V,
                  url: X,
                  emojiSize: q,
                  isEmojiInlineWithText: oe,
                  className: z,
                  shouldFallbackOnLoadError: Ae,
                  fallbackUrl: ae,
                  ariaLabel: de,
                  alt: ve,
                } = this.props,
                { isLoadError: Se } = this.state,
                Ee = (0, o.A)("c-emoji", `c-emoji__${q}`, z, {
                  "c-emoji--inline": oe,
                }),
                be = de ?? (V && (0, T.A)(V)),
                Ce = {
                  "data-stringify-type": "emoji",
                  "data-stringify-emoji": F,
                },
                Z = this.isImportable() ? this.handleEmojiImport : void 0;
              return oe
                ? s.createElement(
                    "span",
                    {
                      className: Ee,
                      "data-qa": (Se || !X) && Ae ? "emoji-fallback" : "emoji",
                    },
                    s.createElement(
                      "img",
                      b(
                        {
                          src: (Se || !X) && Ae ? ae : X,
                          onError: this.onLoadError,
                          onContextMenu: Z,
                          "aria-label": be,
                          alt: V,
                        },
                        Ce
                      )
                    )
                  )
                : s.createElement(
                    "img",
                    b(
                      {
                        src: (Se || !X) && Ae ? ae : X,
                        onError: this.onLoadError,
                        "aria-label": be,
                        alt: ve ?? V,
                        className: Ee,
                        onContextMenu: Z,
                        "data-qa":
                          (Se || !X) && Ae ? "emoji-fallback" : "emoji",
                      },
                      Ce
                    )
                  );
            }
            renderUnicodeAsEmoji(F) {
              if (F && (0, I.d)(F)) {
                const { emojiSize: V } = this.props,
                  X = (0, f.z)({
                    codePointLikeString: F,
                  });
                return s.createElement(
                  "span",
                  {
                    className: (0, o.A)("c-emoji__unicode", {
                      "c-emoji__unicode--large": V === K.LARGE,
                    }),
                  },
                  X
                );
              }
            }
            renderTooltip() {
              const {
                renderAsText: F,
                displayText: V,
                text: X,
                isStandard: q,
                url: oe,
                unicode: z,
                sourceTeamId: Ae,
                ariaLabel: ae,
                alt: de,
                emojiNameFromText: ve,
                stopAnimations: Se,
                fallbackUrl: Ee,
                forceDisplay: be,
              } = this.props;
              if (F) return V;
              const Ce = q ? void 0 : oe;
              return s.createElement(
                s.Fragment,
                null,
                s.createElement(
                  "div",
                  {
                    className: "c-emoji__emoji-tooltip",
                  },
                  s.createElement(x, {
                    text: X,
                    displayText: V,
                    url: Ce,
                    sourceTeamId: Ae,
                    ariaLabel: ae,
                    alt: de,
                    unicode: z,
                    emojiNameFromText: ve,
                    dispatch: this.props.dispatch,
                    stopAnimations: Se,
                    fallbackUrl: Ee,
                    isStandard: q,
                    forceDisplay: be,
                  })
                ),
                V,
                this.isImportable() &&
                  s.createElement(P.K, {
                    emojiName: V,
                    emojiUrl: oe,
                  })
              );
            }
            render() {
              const {
                displayText: F,
                url: V,
                renderAsText: X,
                showTooltip: q,
                iconInTextMode: oe,
                renderEmojiFallback: z,
                unicode: Ae,
                emojiNameFromText: ae,
              } = this.props;
              if (!V && !F && !Ae) return null;
              if ((X || !V) && !z && !Ae)
                return oe ? this.renderIconFallback() : F;
              if (Ae && !ae) {
                var de;
                return (de = this.renderUnicodeAsEmoji(Ae)) !== null &&
                  de !== void 0
                  ? de
                  : F;
              }
              return q
                ? s.createElement(
                    y.Ay,
                    {
                      tip: this.renderTooltip,
                      delay: y.PK,
                      zIndex: "above_fs",
                    },
                    this.renderEmojiElement()
                  )
                : this.renderEmojiElement();
            }
            constructor(F) {
              super(F),
                (this.handleEmojiImport = (V) => {
                  if (V != null && V.altKey) return;
                  const { url: X, dispatch: q, displayText: oe } = this.props;
                  q(
                    (0, D.a)({
                      emojiName: oe,
                      emojiUrl: X,
                      event: V,
                    })
                  );
                }),
                (this.onLoadError = this.onLoadError.bind(this)),
                (this.renderTooltip = this.renderTooltip.bind(this)),
                (this.state = {
                  isLoadError: !1,
                });
            }
          },
          "Emoji"
        );
        (B.displayName = "Emoji"),
          (B.defaultProps = {
            text: "",
            showTooltip: !1,
            className: void 0,
            stopAnimations: !1,
            iconInTextMode: !1,
            url: void 0,
            emojiSize: K.MEDIUM,
            isEmojiInlineWithText: !1,
            isImportAllowed: !1,
            displayText: "",
            sourceTeamId: void 0,
            shouldFallbackOnLoadError: !1,
            renderEmojiFallback: !1,
            ariaLabel: void 0,
            alt: void 0,
          });
        const U = _((H, F) => {
            const {
              stopAnimations: V,
              forceDisplay: X,
              emojiSize: q = K.MEDIUM,
              url: oe,
              unicode: z,
            } = F;
            let { text: Ae } = F,
              ae = (0, u.qJ)(H, z ?? "");
            ae &&
              ae.charAt(ae.length - 1) !== ":" &&
              ae.charAt(0) !== ":" &&
              (ae = `:${ae}:`),
              (Ae = ae || Ae || "");
            let de = oe;
            const ve = (0, c.ZT)(H) || "",
              Se = !(0, a.ty)(H, "a11y_animations"),
              Ee = V || Se,
              be = (0, v.Yp)({
                teamOrEnterpriseId: ve,
                recalc: !1,
              }),
              Ce = (0, r.bR)({
                state: H,
                locale: be,
                name: Ae,
              }),
              Z = !X && (0, m.P)(H),
              $ = (0, S.A)(Ae),
              N = (0, g.R)(H, $);
            if (!Z && !de) {
              const k = (0, l.w)(H, {
                forceDisplay: !!X,
              });
              var L;
              const J = (L = F.sourceTeamId) !== null && L !== void 0 ? L : ve;
              de =
                (0, u.Ez)(H, {
                  text: Ae,
                  parsedEmoji: $,
                  teamId: J,
                  emojiMode: k,
                  emojiSize: q === K.LARGER ? K.XLARGE : q,
                }) || void 0;
            }
            if (Ee && !N) {
              var w;
              de =
                (w = (0, E.Ay)(H, {
                  url: de,
                  stopAnimations: Ee,
                  isEmoji: !0,
                })) !== null && w !== void 0
                  ? w
                  : void 0;
            }
            return {
              text: Ae,
              url: de,
              renderAsText: Z,
              emojiSize: q,
              displayText: Ce || "",
              stopAnimations: Ee,
              fallbackUrl: n(),
              isStandard: N,
              emojiNameFromText: ae,
            };
          }, "mapStateToProps"),
          R = {
            mapStateToProps: U,
          },
          G = h((0, d.N)(U)(B));
      },
      1030162945: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => n,
          lw: () => t.lw,
        });
        var t = e(5331686899);
        const n = t.Ay;
      },
      4899054948: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => C,
        });
        var t = e(5824283093),
          n = e(9391594207),
          s = e(5255740490),
          i = e(3879245650),
          d = e(3202757386),
          o = e(4724591729),
          a = e(735940183),
          r = e(6084388622),
          c = e(8739505998),
          u = e(796111729),
          l = e(2786906754),
          m = e(9190452268),
          v = e(6968387112),
          E = e(7545496485);
        const g = _(
          (h) => !!(0, E.w)(h).isWorkspace,
          "looksLikeWorkspaceState"
        );
        var I = e(2229064554),
          f = e(8022922400),
          y = e(6338445630);
        const M = new a.Ay("error_boundary"),
          p = "REB";
        let O = _(
          class extends t.Component {
            componentDidUpdate(D) {
              this.state.hasError &&
                D.id !== this.props.id &&
                this.resetHasError();
            }
            componentDidCatch(D, P) {
              let S = null;
              try {
                S = `${p}${(0, i.B)((0, f.A)(D.message))
                  .substr(0, 9)
                  .toUpperCase()}`;
              } catch {}
              if (
                (this.setState(
                  () => ({
                    hasError: !0,
                    errCode: S,
                  }),
                  () => {
                    var b, K;
                    return (K = (b = this.props).onError) === null ||
                      K === void 0
                      ? void 0
                      : K.call(b, D);
                  }
                ),
                !(0, o.Cu)())
              ) {
                const b = P.componentStack
                  .split(
                    `
`
                  )
                  .slice(0, Error.stackTraceLimit).join(`
`);
                this.props.logger.error("ERROR-BOUNDARY", D, S, b, {
                  subtype: this.props.subtype || "component_error_boundary",
                });
              }
            }
            onClickReloadButton(D) {
              D.preventDefault();
              let P = window.location.href;
              this.props.telemeter.count("react_error_boundary_reload_click"),
                (0, d.A)()
                  ? ((P = (0, l.M6)(
                      window.location.href,
                      "force_cold_boot",
                      1
                    )),
                    this.props.logger.info(
                      "GANTRY",
                      `Reloading at ${P} after hitting ErrorBoundary`
                    ),
                    (0, y.Lz)().finally(() => {
                      window.location.href = P;
                    }))
                  : (this.props.logger.info(
                      "LEGACY",
                      `Reloading at ${P} after hitting ErrorBoundary`
                    ),
                    (window.location.href = P));
            }
            resetHasError() {
              this.setState(() => ({
                hasError: !1,
                errCode: null,
              }));
            }
            renderReloadLinkMsg() {
              const D = _((P) => {
                let { text: S, key: b } = P;
                return t.createElement(
                  c.A,
                  {
                    href: `https://${(0, v.qF)()}/help/contact`,
                    rel: "noopener noreferrer",
                    key: b,
                  },
                  S
                );
              }, "renderLink");
              return this.state.errCode === "REBD7A8C1099"
                ? M.rt(
                    "This particular hiccup is something we know about and are working to fix. Please reload and things should be cleared up. If this issue persists, please <a>drop us a line.</a>",
                    {
                      fallbackHash: "e429542887f26442dba7a085bd05bea15803edd9",
                      fallbackHashNs: "error_boundary",
                    },
                    D
                  )
                : M.rt(
                    "Reloading Slack might clear things up. If it doesn\u2019t, <a>drop us a line.</a>",
                    null,
                    D
                  );
            }
            render() {
              if (this.state.hasError) {
                if (
                  (this.props.telemeter.count("react_error_boundary_rendered"),
                  this.props.renderError)
                )
                  return this.props.renderError({
                    errCode: this.state.errCode,
                  });
                const D = (0, s.A)("p-error_boundary", this.props.className, {
                  "p-error_boundary--short": this.props.variant === "short",
                });
                return t.createElement(
                  "div",
                  {
                    className: D,
                  },
                  t.createElement(
                    "div",
                    {
                      className: "p-error_boundary__content",
                    },
                    t.createElement(
                      "div",
                      {
                        className: "p-error_boundary__message",
                      },
                      t.createElement(
                        "h1",
                        {
                          className: "p-error_boundary__heading",
                        },
                        t.createElement(
                          "span",
                          null,
                          M.t("Something went wrong")
                        ),
                        t.createElement(
                          "span",
                          {
                            className:
                              "p-error_boundary__icon p-error_boundary__icon--turtle",
                            role: "img",
                            "aria-label": M.t("Something went wrong"),
                          },
                          "\u{1F422}"
                        )
                      ),
                      t.createElement(
                        "p",
                        {
                          className: "p-error_boundary__contact_msg",
                        },
                        this.renderReloadLinkMsg()
                      )
                    ),
                    this.state.errCode &&
                      t.createElement(I.A, {
                        errCode: this.state.errCode,
                      }),
                    t.createElement(
                      r.Ay,
                      {
                        type: "primary",
                        className: "margin_right_50",
                        onClick: this.onClickReloadButton,
                        "data-qa": "error_reload",
                      },
                      M.t("Reload")
                    )
                  )
                );
              }
              return this.props.children;
            }
            constructor(D) {
              super(D),
                (this.state = {
                  hasError: !1,
                  errCode: null,
                }),
                (this.onClickReloadButton =
                  this.onClickReloadButton.bind(this));
            }
          },
          "ErrorBoundary"
        );
        O.displayName = "ErrorBoundary";
        const C = (0, n.N)((h) => ({
          logger: g(h)
            ? (0, u.Ay)({
                state: h,
              })
            : (0, u.Wo)(),
          telemeter: g(h)
            ? (0, m.Cy)({
                state: h,
              })
            : (0, m.rh)(),
        }))(O);
      },
      2229064554: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => i,
        });
        var t = e(5824283093),
          n = e(735940183);
        const s = new n.Ay("error_boundary");
        function i(d) {
          let { errCode: o } = d;
          return t.createElement(
            "p",
            {
              className: "p-error_boundary__error_code_container",
            },
            t.createElement(
              "span",
              {
                className: "p-error_boundary__error_code",
                "data-qa": "error_code",
              },
              s.t("Error: "),
              o
            )
          );
        }
        _(i, "ErrorCode");
      },
      3837503631: (W, A, e) => {
        "use strict";
        e.d(A, {
          H: () => o,
          A: () => a,
        });
        var t = e(4899054948),
          n = e(5824283093);
        function s() {
          return (
            (s =
              Object.assign ||
              function (r) {
                for (var c = 1; c < arguments.length; c++) {
                  var u = arguments[c];
                  for (var l in u)
                    Object.prototype.hasOwnProperty.call(u, l) && (r[l] = u[l]);
                }
                return r;
              }),
            s.apply(this, arguments)
          );
        }
        _(s, "_extends");
        const i = _(() => null, "renderError"),
          o = _(
            (r) =>
              n.createElement(
                t.A,
                s(
                  {
                    renderError: i,
                  },
                  r
                )
              ),
            "QuietErrorBoundary"
          ),
          a = t.A;
      },
      8022922400: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => c,
        });
        const t = /\bA[A-Z0-9]{8,}\b/g,
          n = /\bB[A-Z0-9]{8,}\b/g,
          s = /\b(C|G|D)[A-Z0-9]{8,}\b/g,
          i = /\bF[A-Z0-9]{8,}\b/g,
          d = /\b(U|W)[A-Z0-9]{8,}\b/g,
          o = /\b[\d]{10}\.[\d]{6}\b/g,
          a = /\bS[A-Z0-9]{8,}\b/g,
          r = /\bT[A-Z0-9]{8,}\b/g;
        function c(u) {
          return String(u)
            .replace(t, "[APP_ID]")
            .replace(n, "[BOT_ID]")
            .replace(s, "[CHANNEL_ID]")
            .replace(i, "[FILE_ID]")
            .replace(d, "[MEMBER_ID]")
            .replace(o, "[MESSAGE_TS]")
            .replace(a, "[USER_GROUP_ID]")
            .replace(r, "[TEAM_ID]");
        }
        _(c, "normalizeError");
      },
      5141066605: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
        });
        var t = e(735940183),
          n = e(5549390246),
          s = e(4761125736);
        const i = new t.Ay("files");
        function d(o, a) {
          if (!o.is_external) return null;
          if ((0, s._Z)(a, "file_consistency") === "treatment") {
            let c = "File";
            switch (o.external_type) {
              case "gdrive":
                switch (o.filetype) {
                  case "gsheet":
                    c = i.t("Google Sheet");
                    break;
                  case "gdoc":
                    c = i.t("Google Doc");
                    break;
                  case "gpres":
                    c = i.t("Google Slide");
                    break;
                  case "gdraw":
                    c = i.t("Google Drawing");
                    break;
                  default:
                    c = i.t("Google {fileType}", {
                      fileType: o.pretty_type,
                    });
                }
                break;
              case "dropbox":
              case "box":
              case "onedrive":
              case "app":
                c = i.t("{fileType}", {
                  fileType: o.pretty_type,
                });
                break;
              default:
                c = i.t("File");
            }
            return c;
          }
          switch (o.external_type) {
            case "gdrive":
              switch (o.filetype) {
                case "gsheet":
                  return i.t("Spreadsheet from Google Drive");
                case "gdoc":
                  return i.t("Document from Google Drive");
                case "gpres":
                  return i.t("Presentation from Google Drive");
                case "gdraw":
                  return i.t("Drawing from Google Drive");
                default:
                  return i.t("{fileType} from Google Drive", {
                    fileType: o.pretty_type,
                  });
              }
            case "dropbox":
              return i.t("{fileType} from Dropbox", {
                fileType: o.pretty_type,
              });
            case "box":
              return i.t("{fileType} from Box", {
                fileType: o.pretty_type,
              });
            case "onedrive":
              return i.t("{fileType} from OneDrive", {
                fileType: o.pretty_type,
              });
            case "app":
              return i.t("{fileType} from {appName}", {
                fileType: o.pretty_type,
                appName: (0, n.Y)(a, o) || "",
              });
            default:
              return i.t("File");
          }
        }
        _(d, "getExternalFiletypeDescription");
      },
      8642919232: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => a,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(1031947056),
          i = e(8950789382),
          d = e(8677230210);
        const o = (0, s.Ay)(
          "Opens a member profile in a tile",
          (function () {
            var r = (0, t.coroutine)(function* (c, u, l) {
              (0, d.wC)(u(), l) &&
                c(
                  (0, i.s)({
                    viewId: "rimeto_profile",
                    params: {
                      memberId: l,
                    },
                  })
                );
            });
            return function (c, u, l) {
              return r.apply(this, arguments);
            };
          })()
        );
        o.meta = {
          name: "createThunk",
          key: "createThunkopenProfileInWindow",
          description: "Opens a member profile in a tile",
        };
        const a = o;
      },
      6565762531: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => t,
        });
        function t(n) {
          return !!(n && n !== "-");
        }
        _(t, "isValidFieldValue");
      },
      7969928607: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => a,
        });
        var t = e(5824283093),
          n = e(5734673180),
          s = e(647040695),
          i = e(1030162945),
          d = e(6818330210);
        function o(r) {
          let {
            text: c = "",
            inputIsEscaped: u = !1,
            emojiSize: l = i.lw.SMALL,
            showTooltips: m = !0,
            stopAnimations: v = !1,
            emojiDisplayInfo: E = {},
          } = r;
          const T = [];
          let g = 0;
          const I = u ? (0, n.A)(c ?? "") : c ?? "";
          if (
            (I.replace((0, s.A)(), (f, y, M) => {
              if (M > g) {
                const C = I.slice(g, M);
                T.push(
                  t.createElement(
                    t.Fragment,
                    {
                      key: `${M}-${C}`,
                    },
                    C
                  )
                );
              }
              const { name: p = f, url: O = void 0 } = (0, d.H)(f, E);
              return (
                T.push(
                  t.createElement(i.Ay, {
                    text: p,
                    emojiSize: l,
                    key: `${M}-${p}`,
                    showTooltip: m,
                    stopAnimations: v,
                    isEmojiInlineWithText: !0,
                    url: O,
                  })
                ),
                (g = M + f.length),
                ""
              );
            }),
            !T.length)
          )
            return t.createElement(t.Fragment, null, I);
          if (g < I.length) {
            const f = I.substr(g);
            T.push(
              t.createElement(
                t.Fragment,
                {
                  key: `last-${f}`,
                },
                f
              )
            );
          }
          return t.createElement(t.Fragment, null, T);
        }
        _(o, "FormatTextWithEmoji"), (o.displayName = "FormatTextWithEmoji");
        const a = t.memo(o);
      },
      6159136815: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => o,
        });
        var t = e(5824283093),
          n = e(5734673180),
          s = e(7969928607);
        const i = /\ue000([^\ue001]*)\ue001/g;
        function d(a) {
          let {
            text: r = "",
            inputIsEscaped: c = !1,
            showTooltips: u = !0,
            stopAnimations: l = !1,
          } = a;
          const m = [];
          let v = 0;
          const E = c ? (0, n.A)(r ?? "") : r ?? "";
          if (
            (E.replace(i, (T, g, I) => {
              if (I > v) {
                const f = E.slice(v, I);
                m.push(
                  t.createElement(s.A, {
                    key: `${I}-${f}`,
                    text: f,
                    showTooltips: u,
                    inputIsEscaped: c,
                    stopAnimations: l,
                  })
                );
              }
              m.push(
                t.createElement(
                  "span",
                  {
                    className: "c-mrkdwn__highlight",
                    key: `${I}-${g}`,
                  },
                  t.createElement(s.A, {
                    text: g,
                    showTooltips: u,
                    inputIsEscaped: c,
                    stopAnimations: l,
                  })
                )
              ),
                (v = I + T.length);
            }),
            !m.length && r)
          )
            return t.createElement(
              t.Fragment,
              null,
              t.createElement(s.A, {
                text: r,
                showTooltips: u,
                inputIsEscaped: c,
                stopAnimations: l,
              })
            );
          if (r && v < r.length) {
            const T = E.substr(v);
            m.push(
              t.createElement(s.A, {
                key: `last-${T}`,
                text: T,
                showTooltips: u,
                inputIsEscaped: c,
                stopAnimations: l,
              })
            );
          }
          return t.createElement(t.Fragment, null, m);
        }
        _(d, "FormatTextWithHighlightMarkers"),
          (d.displayName = "FormatTextWithHighlightMarkers");
        const o = t.memo(d);
      },
      1743656885: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => n,
        });
        var t = e(8951118047);
        const n = t.A;
      },
      8481467080: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => v,
          U: () => T,
        });
        var t = e(9552526132),
          n = e(2927826522),
          s = e(796111729),
          i = e(3398586081);
        const d = _((g) => {
            const {
              functionTriggerId: I,
              workflowId: f,
              title: y,
              description: M,
              isWorkflowApp: p,
              salesHomeWorkflowAppType: O,
              owningTeamId: C,
              developerTraceId: h,
              botUserId: D,
              appCollaborators: P,
              appId: S,
              shareUrl: b,
            } = (0, n.t)(g);
            return {
              triggerId: I,
              workflowId: f,
              title: y,
              description: M,
              isWorkflowApp: p,
              salesHomeWorkflowAppType: O,
              owningTeamId: C,
              developerTraceId: h,
              botUserId: D,
              appCollaborators: P,
              appId: S,
              shareUrl: b,
            };
          }, "getCommonMetadataFromBlock"),
          o = _(
            (g) =>
              g.url
                ? {
                    ...d(g),
                    triggerType: t.M.Shortcut,
                    url: g.url,
                  }
                : {
                    ...d(g),
                    triggerType: t.M.Shortcut,
                    url: "",
                  },
            "createLinkShortcutFromBlock"
          ),
          a = _(
            (g) => ({
              ...d(g),
              triggerType: t.M.Webhook,
            }),
            "createWebhookShortcutFromBlock"
          ),
          r = _(
            (g) => ({
              ...d(g),
              triggerType: t.M.External,
            }),
            "createExternalShortcutFromBlock"
          ),
          c = _(
            (g) => ({
              ...d(g),
              triggerType: t.M.Service,
              serviceName: g.serviceName,
            }),
            "createServiceShortcutFromBlock"
          ),
          u = _((g) => {
            const { triggerSubtype: I } = g,
              f = {
                eventType: I || "",
              };
            return {
              ...d(g),
              triggerType: t.M.Event,
              event: f,
            };
          }, "createEventShortcutFromBlock"),
          l = _((g) => d(g), "createUnknownShortcutFromBlock"),
          m = _((g) => {
            const I = {
              startTime: "",
            };
            return {
              ...d(g),
              triggerType: t.M.Scheduled,
              schedule: I,
            };
          }, "createScheduledShortcutFromBlock"),
          v = _((g) => {
            switch (g.triggerType) {
              case t.M.Event:
                return u(g);
              case t.M.Scheduled:
                return m(g);
              case t.M.Shortcut:
                return o(g);
              case t.M.Webhook:
                return a(g);
              case t.M.External:
                return r(g);
              case t.M.Service:
                return c(g);
              case void 0:
                return o(g);
              default:
                return l(g);
            }
          }, "createShortcutFromBlock"),
          E = _((g) => {
            try {
              return JSON.stringify(g);
            } catch (I) {
              throw (
                ((0, s.Wo)().error(
                  "stringify failed for workflow/trigger obj shortcut info"
                ),
                I)
              );
            }
          }, "memoizeCacheKeyResolver"),
          T = (0, i.A)(v, E);
      },
      3799600789: (W, A, e) => {
        "use strict";
        e.d(A, {
          V: () => I,
          j: () => T,
        });
        var t = e(3398586081),
          n = e(3126601217),
          s = e(9552526132),
          i = e(2927826522),
          d = e(796111729),
          o = e(3906734293);
        const a = _((f, y, M) => {
            var p, O, C, h;
            return {
              triggerId: (f == null ? void 0 : f.id) || "",
              workflowId:
                (f == null ? void 0 : f.workflow.workflow_id) ||
                (y == null ? void 0 : y.id),
              isWorkflowPublished:
                (f == null || (p = f.workflow_details) === null || p === void 0
                  ? void 0
                  : p.is_published) || (y == null ? void 0 : y.is_published),
              appId:
                (f == null ? void 0 : f.workflow.app_id) ||
                ((O = f == null ? void 0 : f.workflow.app) === null ||
                O === void 0
                  ? void 0
                  : O.id),
              app: f == null ? void 0 : f.workflow.app,
              inputs: f == null ? void 0 : f.inputs,
              owningTeamId: f == null ? void 0 : f.owning_team_id,
              isWorkflowApp:
                (C = f == null ? void 0 : f.workflow.app) === null ||
                C === void 0
                  ? void 0
                  : C.is_workflow_app,
              salesHomeWorkflowAppType:
                (h = f == null ? void 0 : f.workflow.app) === null ||
                h === void 0
                  ? void 0
                  : h.sales_home_workflow_app_type,
              title:
                (f == null ? void 0 : f.name) ||
                (f == null ? void 0 : f.workflow.title) ||
                (y == null ? void 0 : y.title) ||
                (M == null ? void 0 : M.title),
              workflowDetails: f == null ? void 0 : f.workflow_details,
              description:
                (f == null ? void 0 : f.description) ||
                (f == null ? void 0 : f.workflow.description) ||
                (y == null ? void 0 : y.description) ||
                (M == null ? void 0 : M.description),
              appCollaborators:
                (y == null ? void 0 : y.collaborators) ||
                (M == null ? void 0 : M.appCollaborators),
              shareUrl:
                (f == null ? void 0 : f.share_url) ||
                (M == null ? void 0 : M.shareUrl),
            };
          }, "getCommonMetadataFromTriggerAndWorkflow"),
          r = _(
            (f, y, M) => ({
              ...a(f, y, M),
              triggerType: s.M.Shortcut,
              url: f.shortcut_url,
            }),
            "createLinkShortcut"
          ),
          c = _(
            (f, y, M) => ({
              ...a(f, y, M),
              triggerType: s.M.Webhook,
            }),
            "createWebhookShortcut"
          ),
          u = _(
            (f, y, M) => ({
              ...a(f, y, M),
              triggerType: s.M.External,
              subtype: f.subtype,
            }),
            "createExternalShortcut"
          ),
          l = _((f, y, M) => {
            const {
                eventType: p,
                channelIds: O,
                teamIds: C,
                filter: h,
              } = (0, i.t)(f),
              D = {
                eventType: p,
                channelIds: O,
                teamIds: C,
                filter: h,
              };
            return {
              ...a(f, y, M),
              triggerType: s.M.Event,
              event: D,
            };
          }, "createEventShortcut"),
          m = _((f, y, M) => {
            const p = (0, i.t)(f.schedule);
            return {
              ...a(f, y, M),
              triggerType: s.M.Scheduled,
              schedule: p,
            };
          }, "createScheduledShortcut"),
          v = _((f, y, M) => {
            var p, O, C;
            return {
              ...a(f, y, M),
              triggerType: s.M.Service,
              serviceName:
                (C =
                  (O =
                    f == null || (p = f.service_config) === null || p === void 0
                      ? void 0
                      : p.function.app) === null || O === void 0
                    ? void 0
                    : O.name) !== null && C !== void 0
                  ? C
                  : "",
            };
          }, "createServiceShortcut"),
          E = _((f, y, M) => a(f, y, M), "createUnknownShortcut"),
          T = _((f) => {
            let { passedShortcutInfo: y, trigger: M, workflow: p } = f;
            return (0, o.G)(M)
              ? (0, n.BI)(M)
                ? r(M, p, y)
                : (0, n.QW)(M)
                ? l(M, p, y)
                : (0, n.uS)(M)
                ? m(M, p, y)
                : (0, n.A4)(M)
                ? u(M, p, y)
                : (0, n.cS)(M)
                ? c(M, p, y)
                : (0, n.O4)(M)
                ? v(M, p, y)
                : E(M, p, y)
              : E(void 0, p, y);
          }, "createShortcutFromTriggerAndWorkflow"),
          g = _((f) => {
            try {
              return JSON.stringify(f);
            } catch (y) {
              throw (
                ((0, d.Wo)().error(
                  "stringify failed for workflow/trigger obj shortcut info"
                ),
                y)
              );
            }
          }, "memoizeCacheKeyResolver"),
          I = (0, t.A)(T, g);
      },
      8808892924: (W, A, e) => {
        "use strict";
        e.d(A, {
          i: () => P,
        });
        var t = e(5824283093),
          n = e(8212623464),
          s = e(5255740490),
          i = e(7715417323),
          d = e(3391133100),
          o = e(2562405183),
          a = e(8847766420),
          r = e(3288846409),
          c = e(6533394955),
          u = e(6470070112),
          l = e(4775127335),
          m = e(1563996154),
          v = e(5286203919),
          E = e(1766818988),
          T = e(9548972574),
          g = e(8683010724),
          I = e(543174729);
        const f = t.memo((S) => {
          let { id: b } = S;
          return t.createElement(
            "svg",
            {
              className: "sr-only",
            },
            t.createElement(
              "clipPath",
              {
                id: b,
                clipPathUnits: "objectBoundingBox",
              },
              t.createElement("path", {
                d: "M0.03,1 h0.742 a0.258,0.2,0,0,0,0.258,-0.2 V0.2 a0.258,0.2,0,0,0,-0.258,-0.2 H0.03 a0.385,0.299,0,0,1,0.098,0.2 v0.6 A0.385,0.299,0,0,1,0.03,1",
              })
            )
          );
        });
        var y = e(1407713935),
          M = e(9101533895),
          p = e(796111729);
        function O() {
          return (
            (O =
              Object.assign ||
              function (S) {
                for (var b = 1; b < arguments.length; b++) {
                  var K = arguments[b];
                  for (var x in K)
                    Object.prototype.hasOwnProperty.call(K, x) && (S[x] = K[x]);
                }
                return S;
              }),
            O.apply(this, arguments)
          );
        }
        _(O, "_extends");
        const C = 2;
        function h(S) {
          let {
            channelId: b,
            withTooltip: K,
            className: x,
            excludeIcon: B,
            excludeMemberOverflowCount: U,
            maxMembers: R = C,
            avatarSize: G = l.RG.verySmall,
            includeChannelNameInTooltip: H = !1,
            excludeSelf: F = !1,
          } = S;
          const V = (0, t.useMemo)(() => `huddles-mask-${(0, d.r9)()}`, []),
            X = (0, t.useMemo)(
              () => ({
                "--huddles-mask": `url(#${V})`,
                "--huddles-avatar-size": `${G}px`,
              }),
              [V, G]
            ),
            q = (0, o.d4)((L) => (0, u.pt)(L) || (0, E.s)(L)),
            oe = (0, o.d4)((L) => (0, M.OL)(L, b)),
            z = (0, r.cw)(v.hc),
            Ae = (0, r.cw)(v.vO),
            de = z === b && (0, u.pZ)(Ae),
            ve = (0, o.Z2)((L) => (0, T.A7)(L, b, F)),
            Se = ve.length,
            Ee = Se > R,
            be = Ee ? Se - 2 : 0,
            Ce = Ee ? ve.slice(0, R) : ve,
            Z = (0, t.useMemo)(() => {
              const L = H && !(0, y.PC)(oe),
                w = t.createElement(I.A, {
                  channelId: b,
                  includeChannelName: L,
                });
              return (
                w ||
                  (0, p.Wo)().info(
                    "HUDDLE-FACEPILE",
                    `channelId: ${b}, includeChannelName: ${L}`
                  ),
                w
              );
            }, [b, H, oe]);
          if (!q || !Se) return null;
          const $ = t.createElement(
              "div",
              {
                className: (0, s.A)("p-huddle_avatar_stack", x),
                "data-qa": "huddle_avatar_stack__avatars_container",
                style: X,
              },
              t.createElement(f, {
                id: V,
              }),
              !B &&
                t.createElement(
                  "div",
                  {
                    className: "p-huddle_avatar_stack__icon_container",
                  },
                  t.createElement(g.A, {
                    name: "headphones",
                    size: "18",
                  })
                ),
              Ce.map((L, w) =>
                t.createElement(l.Ay, {
                  key: L,
                  "data-qa": "huddle_avatar_stack__member",
                  className: (0, s.A)("p-huddle_avatar_stack__avatar", {
                    "p-huddle_avatar_stack__avatar--first": w === 0,
                  }),
                  userId: L,
                  size: G,
                  renderCustomBadge: i.A,
                  isInteractive: !1,
                })
              ),
              !U &&
                Ee &&
                t.createElement(
                  "div",
                  {
                    className: "p-huddle_avatar_stack__plus-member-count",
                    "data-qa": "huddle_avatar_stack__plus_member_count",
                  },
                  `+${be}`
                )
            ),
            N =
              K && Z
                ? t.createElement(
                    m.Ay,
                    {
                      tip: Z,
                    },
                    $
                  )
                : $;
          return de ? null : N;
        }
        _(h, "HuddleAvatarStackContent"),
          (h.displayName = "HuddleAvatarStackContent");
        const D = t.memo(h),
          P = t.memo((S) => {
            const { channelId: b } = S,
              K = (0, o.d4)((R) => (0, T.LY)(R, b)),
              x = (0, r.cw)(v.l4),
              B = (0, r.cw)(v.hc),
              U = (0, o.d4)(a.ZT);
            if (!K) return null;
            if (B === b) {
              const R = (0, c.getStoreInstanceByTeamId)(x || U);
              return t.createElement(
                n.Kq,
                {
                  store: R,
                },
                t.createElement(D, O({}, S))
              );
            }
            return t.createElement(D, O({}, S));
          });
      },
      3496486794: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => F,
          g: () => G,
        });
        var t = e(5824283093),
          n = e(735940183),
          s = e(9679390338),
          i = e.n(s),
          d = e(4553218033),
          o = e.n(d),
          a = e(5475210953),
          r = e.n(a),
          c = e(7485089530),
          u = e.n(c),
          l = e(3342291988),
          m = e.n(l),
          v = e(9631995895),
          E = e.n(v),
          T = e(5908540923),
          g = e.n(T),
          I = e(553949882),
          f = e.n(I),
          y = e(7000154057),
          M = e.n(y),
          p = e(1672115571),
          O = e.n(p),
          C = e(7234375712),
          h = e.n(C),
          D = e(4136357865),
          P = e.n(D),
          S = e(8514307482),
          b = e.n(S),
          K = e(5738074488),
          x = e.n(K),
          B = e(3607863955),
          U = e.n(B);
        const R = new n.Ay("huddles"),
          G = [
            {
              key: "NONE",
              preview: g(),
            },
            {
              key: "BLUR",
              preview: g(),
            },
            {
              key: "LIVING_ROOM",
              url: x(),
              preview: U(),
            },
            {
              key: "REMOTE_WORK",
              url: P(),
              preview: b(),
            },
            {
              key: "TOKYO_SIGHT",
              url: O(),
              preview: h(),
            },
            {
              key: "GYM",
              url: f(),
              preview: M(),
            },
            {
              key: "HOME",
              url: m(),
              preview: E(),
            },
            {
              key: "OFFICE",
              url: r(),
              preview: u(),
            },
            {
              key: "BEACH",
              url: i(),
              preview: o(),
            },
          ],
          F = _(
            () =>
              (0, t.useMemo)(
                () =>
                  G.map((X) => {
                    let q, oe;
                    switch (X.key) {
                      case "NONE":
                        q = R.t("No Background", {
                          fallbackHash:
                            "e47fc484f6e2f4bb4d93eff83f6dd16ed8da67a6",
                          fallbackHashNs: "canvas",
                        });
                        break;
                      case "BLUR":
                        q = R.t("Blur", {
                          fallbackHash:
                            "900aa998d3550d438fc20a414d3938fc3a1630ab",
                          fallbackHashNs: "canvas",
                        });
                        break;
                      case "LIVING_ROOM":
                        (q = R.t("Living Room", {
                          fallbackHash:
                            "c7b60f3edf3318e80575d5e28c1ce24aa99a9025",
                          fallbackHashNs: "canvas",
                        })),
                          (oe = R.t("Art by Haley Tippmann", {
                            fallbackHash:
                              "e81e1f67d7c01d9dd464871bece52a2c87443190",
                            fallbackHashNs: "canvas",
                          }));
                        break;
                      case "REMOTE_WORK":
                        (q = R.t("Remote Work", {
                          fallbackHash:
                            "42a38f6c51f22fed5086c12e2e747c90b17a2201",
                          fallbackHashNs: "canvas",
                        })),
                          (oe = R.t("Art by Hudson Christie", {
                            fallbackHash:
                              "4f5fdc61766b987aced4c5fc5854a0401f8e44ea",
                            fallbackHashNs: "canvas",
                          }));
                        break;
                      case "TOKYO_SIGHT":
                        (q = R.t("Tokyo Sight", {
                          fallbackHash:
                            "eccff2285de126d6179c36b1fbc60c06b039a6e0",
                          fallbackHashNs: "canvas",
                        })),
                          (oe = R.t("Art by Luis Mendo", {
                            fallbackHash:
                              "4c1b393549c87100c23c7fe3e258fb7380736dfa",
                            fallbackHashNs: "canvas",
                          }));
                        break;
                      case "GYM":
                        (q = R.t("Gym", {
                          fallbackHash:
                            "bc4359231d615dc65e372bac1bb5e0f2bf37639f",
                          fallbackHashNs: "canvas",
                        })),
                          (oe = R.t("Art by Hudson Christie", {
                            fallbackHash:
                              "4f5fdc61766b987aced4c5fc5854a0401f8e44ea",
                            fallbackHashNs: "canvas",
                          }));
                        break;
                      case "HOME":
                        q = R.t("Home", {
                          fallbackHash:
                            "70f8bb9a8a5393ef080507a89e4b98d139000d65",
                          fallbackHashNs: "canvas",
                        });
                        break;
                      case "OFFICE":
                        q = R.t("Office", {
                          fallbackHash:
                            "6c3a72eaf6235dfa967f2bba4dfc3e431c3e1180",
                          fallbackHashNs: "canvas",
                        });
                        break;
                      case "BEACH":
                        q = R.t("Beach", {
                          fallbackHash:
                            "911fbb65335023a0800e5bf4a2dcc3ff13b2f9e3",
                          fallbackHashNs: "canvas",
                        });
                        break;
                      default:
                        (q = "NO_NAME"), (oe = "NO_DESCRIPTION");
                    }
                    return {
                      ...X,
                      name: q,
                      description: oe,
                    };
                  }),
                []
              ),
            "useGetVideoBackgrounds"
          );
      },
      8088586193: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => u,
        });
        var t = e(5824283093),
          n = e(6533394955),
          s = e(4250409994),
          i = e(8736071954),
          d = e(2457673737),
          o = e(6664301844),
          a = e(6673728906),
          r = e(348699080);
        const u = _((l) => {
          let {
            videoRef: m,
            preferredCameraId: v,
            startOnMount: E = !0,
            isVideoElementReady: T = !0,
          } = l;
          const g = (0, t.useRef)(null),
            [I, f] = (0, t.useState)(!1),
            [y, M] = (0, t.useState)(void 0),
            p = (0, t.useCallback)(() => {
              const P = g.current;
              !P ||
                !m.current ||
                (P.getTracks().forEach((S) => S.stop()),
                (g.current = null),
                M(void 0),
                o.xc.disconnectVideoStreamFromVideoElement(m.current, !1),
                f(!1));
            }, [m]),
            O = (0, t.useCallback)(
              function () {
                let P =
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : !1;
                const S = m.current;
                !T ||
                  g.current !== null ||
                  !S ||
                  !v ||
                  (I && !P) ||
                  navigator.mediaDevices
                    .getUserMedia({
                      video: {
                        deviceId: v,
                        width: d.hX,
                        height: d.Qs,
                        frameRate: d.LD,
                      },
                      audio: !1,
                    })
                    .then((b) => {
                      f(!0),
                        M(v),
                        (g.current = b),
                        o.xc.connectVideoStreamToVideoElement(b, S, !0);
                    });
              },
              [v, m, I, T]
            ),
            C = (0, t.useCallback)((P) => {
              (0, a.cT)(P, i.lW.Camera),
                (0, n.dispatchForClientStore)(
                  (0, s.WM)({
                    setVideoEnabled: !0,
                  })
                );
            }, []);
          (0, t.useEffect)(() => {
            y !== v && v !== void 0 && y !== void 0 && T && (p(), O(!0));
          }, [v, y, O, p, T]),
            (0, r.A)(
              () => (
                E && O(),
                () => {
                  p();
                }
              ),
              []
            ),
            (0, t.useEffect)(() => {
              T && !I && !E && O();
            }, [T, I, O, E]);
          const h = (0, t.useCallback)(() => {
              const P = m.current;
              P &&
                ((0, n.dispatchForClientStore)(
                  (0, s.yi)({
                    videoElement: P,
                  })
                ),
                p());
            }, [p, m]),
            D = (0, t.useCallback)(() => {
              const P = m.current;
              T && (!P || !v || O());
            }, [T, v, O, m]);
          return {
            turnOnCamera: C,
            turnOffCameraPreview: h,
            turnOnCameraPreview: D,
            previewCameraIsOn: I,
          };
        }, "usePreviewCamera");
      },
      5203103513: (W, A, e) => {
        "use strict";
        e.d(A, {
          Mz: () => s,
          NY: () => i,
          VW: () => n,
          _q: () => t,
        });
        const t = "huddles_play_music_when_last",
          n = "huddles_play_music_timeout",
          s = "huddles_music_player_song_key",
          i = "calendar_huddles_default_access_policy";
      },
      3622858354: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
        });
        var t = e(5824283093),
          n = e(7969928607),
          s = e(1030162945);
        const i = _((o) => {
          let { text: a, emojiSize: r = s.lw.SMALL } = o;
          return t.createElement(
            t.Fragment,
            null,
            t.createElement(n.A, {
              text: a,
              emojiSize: r,
            })
          );
        }, "FormattedHuddleTopic");
        i.displayName = "FormattedHuddleTopic";
        const d = i;
      },
      7723800688: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => l,
          Hi: () => c,
          uV: () => u,
        });
        var t = e(5824283093),
          n = e(6122756707),
          s = e(2562405183),
          i = e(3288846409),
          d = e(6251210828),
          o = e(8239363237),
          a = e(5286203919),
          r = e(6470070112),
          c;
        (function (m) {
          (m.CANVAS_OPEN = "canvas_open"),
            (m.CANVAS_JOIN = "canvas_join"),
            (m.CANVAS_LEAVE = "canvas_leave"),
            (m.CANVAS_TOOLBAR = "canvas_toolbar"),
            (m.EMOJI_PICKER_OPEN = "emoji_picker_open"),
            (m.EMOJI_SENT = "emoji_sent"),
            (m.LINK_OPEN = "link_open"),
            (m.FOCUS_OPEN = "focus_open"),
            (m.FOCUS_CLOSE = "focus_close"),
            (m.MINI_PLAYER_THREAD_BUTTON = "mini_player_thread_button"),
            (m.MINI_PLAYER_OPEN_WINDOW_BUTTON =
              "mini_player_open_window_button"),
            (m.MINI_PLAYER_VIEW_START = "mini_player_view_start"),
            (m.MINI_PLAYER_VIEW_END = "mini_player_view_end"),
            (m.SCREENSHARE_START = "screenshare_start"),
            (m.SCREENSHARE_END = "screenshare_end"),
            (m.THREAD_FLEXPANE_VIEW_START = "thread_flexpane_view_start"),
            (m.THREAD_FLEXPANE_VIEW_END = "thread_flexpane_view_end"),
            (m.THREAD_WINDOW_VIEW_START = "thread_window_view_start"),
            (m.THREAD_WINDOW_VIEW_END = "thread_window_view_end"),
            (m.THREAD_OPEN = "thread_open"),
            (m.THREAD_CLOSE = "thread_close"),
            (m.SELF_VIDEO = "self_video"),
            (m.WINDOW_COMPACT_VIEW_START = "window_compact_view_start"),
            (m.WINDOW_COMPACT_VIEW_END = "window_compact_view_end"),
            (m.WINDOW_FULL_VIEW_START = "window_full_view_start"),
            (m.WINDOW_FULL_VIEW_END = "window_full_view_end"),
            (m.WINDOW_RESIZE_BUTTON = "window_resize_button"),
            (m.BACKGROUND_CHANGED = "background_changed"),
            (m.JUKEBOX_SONG_SELECTED = "huddles_jukebox_song_selected"),
            (m.JUKEBOX_STOP_MUSIC = "huddles_jukebox_stop_music"),
            (m.CAPTIONS_START = "huddles_captions_start"),
            (m.CAPTIONS_STOP = "huddles_captions_stop"),
            (m.INVITATION_SENT = "invitation_sent"),
            (m.MUSIC_PLAYER_STARTED = "huddles_music_player_start_music"),
            (m.MUSIC_PLAYER_SONG_SELECTED =
              "huddles_music_player_song_selected"),
            (m.MUSIC_PLAYER_STOP = "huddles_music_player_stop_music"),
            (m.NOTES_OPEN = "notes_open"),
            (m.NOTES_CLOSE = "notes_close"),
            (m.CHANNEL_SPACE_OPEN = "channel_space_open"),
            (m.CHANNEL_SPACE_CLOSE = "channel_space_close"),
            (m.CHANNEL_SPACE_AUTO_OPEN = "channel_space_auto_open");
        })(c || (c = {}));
        var u;
        (function (m) {
          (m.HUDDLE_MINI_PLAYER_BADGE_ICON = "huddle_mini_player_badge_icon"),
            (m.HUDDLE_MINI_PLAYER_SCREENSHARE =
              "huddle_mini_player_screenshare"),
            (m.HUDDLE_MINI_PLAYER_PEER_TILES = "huddle_mini_player_peer_tiles"),
            (m.HUDDLE_MINI_PLAYER_OVERFLOW_BUTTON =
              "huddle_mini_player_overflow_button"),
            (m.HUDDLE_MINI_PLAYER_OPEN_WINDOW_BUTTON =
              "huddle_mini_player_open_window_button"),
            (m.HUDDLE_MINI_PLAYER_THREAD_BUTTON =
              "huddle_mini_player_thread_button"),
            (m.CANVAS_WINDOW = "canvas_window"),
            (m.LEAVE_CALL = "leave_call"),
            (m.CLOSE_MODAL = "close_modal"),
            (m.EMOJI_PICKER = "emoji_picker"),
            (m.JUKEBOX_MENU = "jukebox_menu"),
            (m.JUKEBOX_MUSIC_BANNER = "jukebox_menu_banner"),
            (m.REACTION_BUBBLE = "reaction_bubble"),
            (m.CHANGE_BACKGROUND_DIALOG = "change_background_dialog"),
            (m.CONNECT_WITH_HUDDLES_CANVAS_EDUCATION =
              "connect_with_huddles_canvas_education"),
            (m.HUDDLE_MINI_PLAYER_MUSIC_PLAYER = "huddle_music_player"),
            (m.HUDDLE_WINDOW_MUSIC_PLAYER = "huddle_window_music_player");
        })(u || (u = {}));
        function l() {
          const m = (0, i.cw)(a.E9),
            v = (0, s.Z2)((y) =>
              (0, r.$t)(y, {
                huddleId: m,
              })
            ),
            E = (0, i.cw)(r.kn, n.bN),
            T = (0, i.cw)(r.UE, n.bN),
            g = (0, s.d4)((y) =>
              (0, d.Ec)(y, {
                huddleId: m,
              })
            ),
            I = (0, s.d4)(o.Tk);
          return (0, t.useMemo)(
            () => ({
              canvasThreadChannelId: v.canvas_thread_channel_id,
              canvasThreadId: v.canvas_thread_id,
              canvasHuddleSessionId: E.canvas_huddle_session_id,
              callsRoomId: T.room_id,
              callsChannelId: T.channel_id,
              uiPage: g ? g.toString() : null,
              fileId: I,
            }),
            [
              v.canvas_thread_channel_id,
              v.canvas_thread_id,
              E.canvas_huddle_session_id,
              T.room_id,
              T.channel_id,
              g,
              I,
            ]
          );
        }
        _(l, "useHuddleClogContext");
      },
      4233000497: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
          H: () => i,
        });
        var t = e(5824283093),
          n = e(2562405183),
          s = e(6470070112),
          i;
        (function (o) {
          (o.HUDDLES_SCHEDULED_ADD = "huddles_scheduled_add"),
            (o.HUDDLES_SCHEDULED_NUX = "huddles_scheduled_nux"),
            (o.HUDDLES_SCHEDULED_CANCEL = "huddles_scheduled_cancel");
        })(i || (i = {}));
        function d(o) {
          const a = (0, n.Z2)((r) => (o ? (0, s.w1)(r, o) : {}));
          return (0, t.useMemo)(
            () => ({
              callsChannelId: a.channel_id,
              callsChannelType: a.channel_type,
              callsNumParticipants: a.num_participants,
              callsRoomId: a.room_id,
            }),
            [a.channel_id, a.channel_type, a.num_participants, a.room_id]
          );
        }
        _(d, "useHuddlesClogContext");
      },
      5169680368: (W, A, e) => {
        "use strict";
        e.d(A, {
          k: () => a,
        });
        var t = e(2562405183),
          n = e(387328355),
          s = e(735940183),
          i = e(9365970888),
          d = e(8736071954);
        const o = new s.Ay("huddles"),
          a = _(() => {
            var r;
            const c = (0, t.d4)((E) => !!(0, n.WQ)(E, "isMicrophoneEnabled")),
              u = (0, t.Z2)((E) => (0, i.ql)(E, d.lW.Microphone)),
              l = c ? o.t("Mute mic") : o.t("Unmute mic"),
              m = o.t("Mute microphone"),
              v =
                (u == null || (r = u.label) === null || r === void 0
                  ? void 0
                  : r.replace(/ *?\([^)]*?\) *?/g, "")) || void 0;
            return {
              microphoneLabel: l,
              isMicrophoneEnabled: c,
              deviceLabel: v,
              ariaLabel: m,
            };
          }, "useMicrophoneOnOff");
      },
      1638377365: (W, A, e) => {
        "use strict";
        e.d(A, {
          z: () => r,
        });
        var t = e(2562405183),
          n = e(387328355),
          s = e(735940183),
          i = e(9365970888),
          d = e(8736071954),
          o = e(416787925);
        const a = new s.Ay("huddles"),
          r = _(() => {
            const c = (0, t.d4)((I) => !!(0, n.WQ)(I, "isHidingSelf")),
              u = !!(0, t.d4)((I) => (0, n.WQ)(I, "isCameraEnabled")) || !1,
              l = (0, t.Z2)((I) => (0, i.ql)(I, d.lW.Camera));
            let m;
            l != null && l.label && (m = (0, o.On)(l.label));
            const v = a.t("Turn on video"),
              E = a.t("Turn off video"),
              T = u ? E : v,
              g = a.t("Enable video", {
                fallbackHash: "3007beee8017f0f6378579cbb4d3dc70a5745024",
                fallbackHashNs: "call_buttons",
              });
            return {
              videoLabel: T,
              isCameraEnabled: u,
              isHidingSelf: c,
              deviceLabel: m,
              ariaLabel: g,
            };
          }, "useVideoOnOff");
      },
      4385664584: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
        });
        var t = e(5824283093),
          n = e(8212623464),
          s = e(5950652755);
        const i = _((o) => {
          let { store: a, children: r } = o;
          const c = (0, t.useMemo)(
            () => ({
              ...a,
              subscribe: (u) => a.subscribeImmediate((0, s.A)(u, 16)),
            }),
            [a]
          );
          return t.createElement(
            n.Kq,
            {
              store: c,
            },
            " ",
            r,
            " "
          );
        }, "BackgroundableProvider");
        i.displayName = "BackgroundableProvider";
        const d = i;
      },
      7280065019: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => o,
        });
        var t = e(5824283093),
          n = e(5255740490);
        const s = _((a) => {
          let { className: r, wasCameraEverEnabled: c } = a;
          return t.createElement(
            "div",
            {
              className: (0, n.A)(
                "p-huddle_camera_icon",
                "p-huddle_camera_icon__container",
                r
              ),
              "data-qa": "huddle_video_icon_camera_off",
            },
            t.createElement(
              "svg",
              {
                width: "20",
                height: "20",
                viewBox: "0 0 20 20",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
              },
              t.createElement("path", {
                d: "M14.6694 6.44613L13.0988 8.21302C13.1635 8.32628 13.2578 8.42265 13.3746 8.4902C13.6064 8.62424 13.8922 8.62449 14.1242 8.49088L17.5 6.54725V13.4528L14.1242 11.5091C13.8922 11.3755 13.6064 11.3758 13.3746 11.5098C13.1428 11.6438 13 11.8913 13 12.1591V14.75C13 15.1642 12.6642 15.5 12.25 15.5H6.62151L5.28818 17H12.25C13.4926 17 14.5 15.9926 14.5 14.75V13.4563L17.1263 14.9684C17.9596 15.4482 19 14.8468 19 13.8852V6.11483C19 5.15324 17.9596 4.55176 17.1263 5.03155L14.6694 6.44613ZM1.5 14.4883V5.25C1.5 4.00736 2.50736 3 3.75 3H11.7118L10.3785 4.5H3.75C3.33579 4.5 3 4.83579 3 5.25V12.8008L1.5 14.4883Z",
                fill: "currentColor",
              }),
              t.createElement("path", {
                className: (0, n.A)({
                  "p-huddle_camera_icon--slash_animated": c,
                }),
                d: "M2 17.25L15.5 2.25",
                stroke: "currentColor",
                strokeWidth: "1.5",
                strokeLinecap: "round",
              })
            )
          );
        }, "renderCameraOff");
        s.displayName = "renderCameraOff";
        const i = _((a) => {
          let { className: r } = a;
          return t.createElement(
            "div",
            {
              className: (0, n.A)(
                "p-huddle_camera_icon",
                "p-huddle_camera_icon__container",
                r
              ),
              "data-qa": "huddle_video_icon_camera_on",
            },
            t.createElement(
              "svg",
              {
                width: "20",
                height: "20",
                viewBox: "0 0 20 20",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
              },
              t.createElement("path", {
                d: "M3.75 3.75C2.92157 3.75 2.25 4.42157 2.25 5.25V14.75C2.25 15.5784 2.92157 16.25 3.75 16.25H12.25C13.0784 16.25 13.75 15.5784 13.75 14.75V12.1591L17.5005 14.3185C17.8339 14.5104 18.25 14.2698 18.25 13.8852V6.11483C18.25 5.7302 17.8338 5.4896 17.5005 5.68152L13.75 7.84091V5.25C13.75 4.42157 13.0784 3.75 12.25 3.75H3.75Z",
                stroke: "currentColor",
                strokeWidth: "1.5",
                strokeLinejoin: "round",
              }),
              t.createElement("circle", {
                className: "p-huddle_camera_icon--dot",
                cx: "8",
                cy: "10",
                r: "2.5",
                fill: "currentColor",
              })
            )
          );
        }, "renderCameraOn");
        i.displayName = "renderCameraOn";
        const d = _((a) => {
            let { isCameraEnabled: r, className: c } = a;
            const [u, l] = (0, t.useState)(r);
            return (
              (0, t.useEffect)(() => {
                r && l(!0);
              }, [r]),
              r
                ? i({
                    className: c,
                  })
                : s({
                    className: c,
                    wasCameraEverEnabled: u,
                  })
            );
          }, "HuddleCameraIcon"),
          o = t.memo(d);
      },
      543174729: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => p,
          z: () => M,
        });
        var t = e(5824283093),
          n = e(2562405183),
          s = e(4394722864),
          i = e(9548972574),
          d = e(1766818988),
          o = e(4742719639),
          a = e(5795074931),
          r = e(4775127335),
          c = e(3622858354),
          u = e(6470070112),
          l = e(3534324375),
          m = e(8701485242),
          v = e(735940183),
          E = e(9101533895),
          T = e(9884588328),
          g = e(796111729);
        const I = new v.Ay("huddles"),
          f = 5,
          y = 8,
          M = _((O) => {
            let { channelId: C } = O;
            const h = (0, n.Z2)((b) => (0, i.A7)(b, C, !1)),
              D = h.length,
              P = D > f,
              S = P ? h.slice(0, f) : h;
            return D === 0
              ? null
              : t.createElement(
                  "div",
                  {
                    className: "p-huddle_channel_tooltip__avatar_stack",
                  },
                  S.map((b, K) => {
                    const x = K === S.length - 1;
                    return t.createElement(
                      "div",
                      {
                        key: b,
                        className: "p-huddle_channel_tooltip__avatar_container",
                        style: {
                          width: x ? "auto" : r.RG.medium - y,
                        },
                      },
                      t.createElement(r.Ay, {
                        className: "p-huddle_channel_tooltip__avatar",
                        userId: b,
                        size: r.RG.medium,
                        renderCustomBadge: s.Q,
                        isInteractive: !1,
                        additionalOverlay: P && x ? D - S.length + 1 : void 0,
                      })
                    );
                  })
                );
          }, "HuddleTooltipAvatarStack");
        M.displayName = "HuddleTooltipAvatarStack";
        function p(O) {
          let { channelId: C, includeChannelName: h = !1 } = O;
          const D = (0, n.d4)((X) => (0, E.OL)(X, C)),
            P = (0, n.d4)((X) => {
              const q = (0, u.Bn)(X, D),
                oe = (0, d.s)(X),
                z = q || oe;
              return (
                z ||
                  (0, g.Wo)().info(
                    "HUDDLE-FACEPILE",
                    `isHuddlesEnabled: ${z}, doesChannelSupportHuddles: ${q}, isHuddlesEnabledForSponsoredTeam: ${oe}`
                  ),
                z
              );
            }),
            S = (0, n.d4)(a.WR),
            b = (0, n.Z2)((X) => (0, i.ft)(X, C)),
            K = (0, n.d4)(u.df),
            x = (0, T.Mn)(D),
            B = b.length,
            R = B > f ? b.slice(0, f) : b,
            G = (0, n.Z2)((X) =>
              R.map((q) => ({
                id: q.id,
                name:
                  q.id === S
                    ? I.t("you", {
                        fallbackHash:
                          "8af56de68279cb6f5ed022f31af18b9fcdcc2e92",
                        fallbackHashNs: "a11y",
                      })
                    : (0, l.sE)(X, q),
              }))
                .sort((q, oe) =>
                  q.id === S ? 1 : oe.id === S ? -1 : (0, m.Ay)(q.name, oe.name)
                )
                .map((q) => {
                  let { name: oe } = q;
                  return oe;
                })
            ),
            H = (0, n.d4)((X) => (0, o.o)(X, C)),
            F = (0, t.useMemo)(
              () =>
                h
                  ? G.length === 1
                    ? b[0].id === S
                      ? I.rt("Just you in the huddle #{channelName}", {
                          fallbackHash:
                            "9c06151657f5f165820e8137ffe359a9f128d6a4",
                          channelName: x,
                        })
                      : I.rt("{name} is in the huddle #{channelName}", {
                          name: G[0],
                          fallbackHash:
                            "296abf823386caa202e6d84323121c5454a50ff0",
                          channelName: x,
                        })
                    : I.rt(
                        "{memberCount} people in the huddle #{channelName}",
                        {
                          memberCount: B,
                          fallbackHash:
                            "d8a4c5ef1bc88840241821fced733296db51cc36",
                          channelName: x,
                        }
                      )
                  : G.length === 1
                  ? b[0].id === S
                    ? I.rt("Just you in the huddle")
                    : I.rt("{name} is in the huddle", {
                        name: G[0],
                      })
                  : I.rt("{memberCount} people in the huddle", {
                      memberCount: B,
                    }),
              [h, G, B, x, b, S]
            );
          let V =
            H != null && H.trim()
              ? t.createElement(c.A, {
                  text: H,
                })
              : null;
          return (
            b.length >= K &&
              (V = I.t("Only {maxParticipants} people can join a huddle", {
                maxParticipants: K,
              })),
            P
              ? t.createElement(
                  "div",
                  {
                    className: "p-huddle_channel_tooltip",
                  },
                  t.createElement(M, {
                    channelId: C,
                  }),
                  t.createElement(
                    "div",
                    {
                      className: "margin_bottom_25",
                      "data-qa": "tooltip_action_text",
                    },
                    V
                  ),
                  t.createElement(
                    "div",
                    {
                      className: "c-tooltip__subtitle",
                      "data-qa": "tooltip_member_text",
                    },
                    F
                  )
                )
              : null
          );
        }
        _(p, "HuddleChannelTooltip");
      },
      9477894139: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => c,
          g: () => r,
        });
        var t = e(5824283093),
          n = e(6122756707),
          s = e(5253428843),
          i = e(9712681361),
          d = e(3837503631),
          o = e(2825968873);
        const a = (0, o.tZ)("HUDDLE-ERROR");
        var r;
        (function (u) {
          (u.Huddles = "huddles"),
            (u.Sidebar = "huddles_pro_max-sidebar"),
            (u.Flexpane = "huddles_pro_max-flexpane"),
            (u.CompactWindow = "huddles_pro_max-compact_window"),
            (u.LargeWindow = "huddles_pro_max-large_window"),
            (u.WindowFooter = "huddles_pro_max-window_footer"),
            (u.AlertBanner = "huddles_pro_max-alert_banner"),
            (u.InviteWindow = "huddles_invite_window"),
            (u.ControlStripButton = "huddles_control_strip_button"),
            (u.ChannelHeader = "huddles_channel_header"),
            (u.Composer = "huddles_composer"),
            (u.HuddleSpecialReactions = "huddle_special_reactions");
        })(r || (r = {}));
        function c(u) {
          let {
            children: l,
            onError: m,
            isQuiet: v = !0,
            shouldStopHuddle: E = !1,
            subtype: T = r.Huddles,
          } = u;
          const g = (0, n.wA)(),
            I = (0, t.useCallback)(() => {
              E &&
                g(
                  (0, s.A)({
                    terminalState: i.M6.ClientUIError,
                  })
                );
            }, [g, E]),
            f = (0, t.useCallback)(
              (M) => {
                a.error(`${T} ${M}`), m ? m() : I();
              },
              [I, m, T]
            ),
            y = v ? d.H : d.A;
          return t.createElement(
            y,
            {
              subtype: T,
              onError: f,
            },
            l
          );
        }
        _(c, "HuddleErrorBoundary");
      },
      4695727674: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => X,
        });
        var t = e(5824283093),
          n = e(6122756707),
          s = e(462591818),
          i = e(2562405183),
          d = e(825587348),
          o = e(8739505998),
          a = e(6470070112),
          r = e(9712681361),
          c = e(735940183),
          u = e(5363983309),
          l = e(9101533895),
          m = e(9884588328),
          v = e(5881236351),
          E = e(5286203919),
          T = e(3037015781),
          g = e(2350349607),
          I = e(3288846409),
          f = e(5332875232),
          y = e(3677514771),
          M = e(6839188756),
          p = e(6323355797),
          O = e(7914553163),
          C = e(2279207117),
          h = e(3245843483),
          D = e(8193414630),
          P = e(4096483543),
          S = e(6533394955),
          b = e(3810478625);
        function K(q, oe, z) {
          const Ae = (0, S.getStoreInstanceByTeamId)(z);
          if (!Ae) return null;
          const ae = (0, P.A)(),
            de = (0, b.g)(Ae.getState());
          if (!q || q === O.MX.TrialFetching) return null;
          const ve = (0, C.FK)(q, de);
          switch (q) {
            case O.MX.TrialIneligible:
              return {
                text: ve,
                onClick: () => {
                  (0, h.Pxz)((0, p.m6)(Ae.getState()));
                },
              };
            case O.MX.TrialEligible:
              return {
                text: ve,
                onClick: (0, C.w9)(Ae.dispatch, oe, q),
              };
            case O.MX.TrialIneligibleUserCannotUpgrade:
              return {
                text: ve,
                onClick: () => {
                  (0, h.Pxz)((0, C.aD)(q));
                },
              };
            case O.MX.TrialTeam:
              return {
                text: ve,
                onClick: () => {
                  if (ae) {
                    (0, C.uY)(Ae.dispatch)();
                    return;
                  }
                  (0, h.Pxz)((0, C.aD)(q));
                },
              };
            case O.MX.TrialExpiry:
              return {
                text: ve,
                onClick: () => {
                  (0, h.Pxz)(
                    (0, p.m6)(Ae.getState(), {
                      action: p.um.CHECKOUT,
                    })
                  );
                },
              };
            default:
              (0, D.Kh)(q);
          }
        }
        _(K, "freemiumPrimaryCtaAttributes");
        var x = e(8847766420);
        const B = new c.Ay("huddles");
        function U(q) {
          let { closeModal: oe } = q;
          const z = p.zG.Vhq,
            Ae = (0, O.Ay)({
              promoSubtype: z,
            }),
            ae = (0, i.d4)(x.ZT) || "",
            de = (0, t.useMemo)(() => K(Ae, z, ae), [Ae, z, ae]),
            ve = (0, t.useCallback)(() => {
              de == null || de.onClick(), oe == null || oe();
            }, [de, oe]);
          return !de ||
            (Ae !== O.MX.TrialEligible &&
              Ae !== O.MX.TrialIneligible &&
              Ae !== O.MX.TrialIneligibleUserCannotUpgrade)
            ? null
            : t.createElement(
                d.A,
                {
                  overlayClassName: "p-huddle_error_modal__overlay",
                  onClose: oe,
                  onCancel: oe,
                  onSubmit: ve,
                  showCancelButton: !0,
                  cancelButtonText: B.t("Dismiss"),
                  showSubmitButton: !0,
                  title: B.t("Your huddle has ended"),
                  submitButtonText: de.text,
                },
                B.t(
                  "On the free version of Slack, your huddles are limited to {min} minutes. You may restart the huddle if you\u2019d like.",
                  {
                    min: 30,
                  }
                )
              );
        }
        _(U, "HuddleTimeLimitReachedModal"),
          (U.displayName = "HuddleTimeLimitReachedModal");
        const R = new c.Ay("huddles");
        function G(q) {
          let { errorCode: oe, isJoinError: z, closeModal: Ae } = q;
          var ae;
          const de = (0, n.wA)(),
            ve =
              (ae = (0, I.cw)(E.Qn)) === null || ae === void 0
                ? void 0
                : ae.channelId,
            Se = (0, i.d4)(f.TM),
            Ee = (0, i.d4)((Me) => (0, l.OL)(Me, ve)),
            be = (0, i.d4)((Me) =>
              (0, T.uz)(Ee)
                ? (0, m.SB)(Me, Ee, {
                    publicChannelIncludeHashSign: !1,
                    imIncludeAtSign: !1,
                  })
                : void 0
            ),
            Ce = (0, i.d4)(a.df),
            Z = R.rt(
              "This huddle already has {maxAmount} people, which is the maximum allowed.",
              {
                maxAmount: Ce,
              }
            ),
            $ = (0, t.useCallback)(() => {
              de((0, v.RX)());
            }, [de]),
            N = (0, t.useCallback)(() => {
              de((0, v.e$)());
            }, [de]),
            L = (0, g.V)(Ee),
            w = (0, i.d4)(y.H7),
            k = _(
              (Me) =>
                t.createElement(
                  o.A,
                  {
                    target: "_blank",
                    href: `${(0, M.Zl)(w)}help/requests/new`,
                  },
                  Me
                ),
              "renderContactUsLink"
            );
          if (!(0, i.d4)(a.pl) && !Se) return null;
          if (oe === r.M6.FreemiumMaxParticipants) return $(), null;
          const ee = (() => {
              switch (oe) {
                case r.M6.MaxParticipants:
                  return Z;
                case r.M6.AudioJoinedFromAnotherDevice:
                  return R.rt(
                    "To keep things nice and neat, you\u2019re no longer in the huddle here."
                  );
                case r.M6.ChimeMeetingEnded:
                  return z
                    ? R.rt("The Huddle has ended.")
                    : L
                    ? R.rt(
                        "We ended the huddle since you were the only one there for a bit."
                      )
                    : R.rt(
                        "We ended your huddle since you were the only one there for a bit."
                      );
                case r.M6.PermissionDenied:
                  return Se
                    ? R.rt(
                        "You are unable to join the Huddle as you do not have permission to join Huddles."
                      )
                    : null;
                case s.uZ.CallEnded:
                  return R.rt("The Huddle has ended.");
                case r.M6.DeviceLocked:
                  return R.rt(
                    "When your computer locks, you automatically leave any huddle you\u2019re in. You can change this in <a>Preferences</a>.",
                    null,
                    (Me) => {
                      let { text: ke, tag: ge } = Me;
                      return ge === "a"
                        ? t.createElement(
                            o.A,
                            {
                              onClick: N,
                            },
                            ke
                          )
                        : null;
                    }
                  );
                case r.M6.FailedStartingRecording:
                case r.M6.FailedResumingRecording:
                  return R.rt(
                    "We\u2019re not sure what went wrong, but try giving it another go in a few minutes."
                  );
                case r.M6.FailedStartingRecordingUser:
                case r.M6.FailedResumingRecordingUser:
                  return R.rt(
                    "It looks like not everyone on this huddle has access to this feature just yet."
                  );
                case r.M6.FailedPausingRecording:
                  return R.rt(
                    "We\u2019re not sure what went wrong, but please give it another go. If this continues to be an issue, you can try deleting the notes, or <a>contact us</a> for support.",
                    null,
                    (Me) => {
                      let { text: ke, tag: ge } = Me;
                      return ge === "a" ? k(ke) : null;
                    }
                  );
                case r.M6.FailedDeletingRecording:
                  return R.rt(
                    "We\u2019re not sure what went wrong, but please give it another go. If this continues to be an issue, you can try ending the huddle and deleting the canvas once it\u2019s ready, or <a>contact us</a> for support.",
                    null,
                    (Me) => {
                      let { text: ke, tag: ge } = Me;
                      return ge === "a" ? k(ke) : null;
                    }
                  );
                default:
                  return R.rt(
                    "You\u2019ll have to go back and give it another try."
                  );
              }
            })(),
            ne = (() =>
              z
                ? R.t("Can\u2019t join the huddle")
                : oe === r.M6.AudioJoinedFromAnotherDevice
                ? R.t("You\u2019ve joined the huddle on a different device")
                : oe === r.M6.ChimeMeetingEnded && !z
                ? L
                  ? R.t(
                      "You\u2019re no longer in a huddle in #{channelDisplayName}",
                      {
                        channelDisplayName: be,
                      }
                    )
                  : R.t("You\u2019re no longer in a huddle")
                : oe === r.M6.DeviceLocked
                ? R.t("You\u2019re no longer in a huddle")
                : oe === r.M6.FailedStartingRecording ||
                  oe === r.M6.FailedStartingRecordingUser
                ? R.rt("Couldn\u2019t start Slack AI notes")
                : oe === r.M6.FailedResumingRecording ||
                  oe === r.M6.FailedResumingRecordingUser
                ? R.rt("Couldn\u2019t resume Slack AI notes")
                : oe === r.M6.FailedPausingRecording
                ? R.rt("Couldn\u2019t stop Slack AI notes")
                : oe === r.M6.FailedDeletingRecording
                ? R.rt("Couldn\u2019t delete Slack AI notes")
                : R.t("Something went wrong with your huddle"))(),
            pe = (() =>
              oe === r.M6.AudioInputStreamEnded ||
              oe === r.M6.MaxParticipants ||
              (oe === r.M6.ChimeMeetingEnded && !z)
                ? R.t("Got It")
                : R.t("OK"))();
          return t.createElement(
            d.A,
            {
              overlayClassName: "p-huddle_error_modal__overlay",
              onClose: Ae,
              onSubmit: Ae,
              showCancelButton: !1,
              showSubmitButton: !0,
              title: ne,
              submitButtonText: pe,
            },
            ee
          );
        }
        _(G, "HuddleErrorModal"), (G.displayName = "HuddleErrorModal");
        const H = {
            HuddleErrorModal: G,
          },
          F = "huddle_error_modal";
        function V(q) {
          switch (q.errorCode) {
            case r.M6.ChimeMeetingEndedFromTimeLimit:
              return U(q);
            default:
              return G(q);
          }
        }
        _(V, "HuddleErrorModalManager");
        const X = (0, u.A)(V, {
          modalName: F,
          allowMultiple: !1,
          isStackable: !0,
        });
      },
      5933621899: (W, A, e) => {
        "use strict";
        e.d(A, {
          Wx: () => H,
          YM: () => x,
        });
        var t = e(2003990933),
          n = e(5824283093),
          s = e(6122756707),
          i = e(735940183),
          d = e(2562405183),
          o = e(825587348),
          a = e(5363983309),
          r = e(1407713935),
          c = e(9101533895),
          u = e(5531259478),
          l = e(8286248123),
          m = e(1779488764),
          v = e.n(m),
          E = e(7268021173),
          T = e(3677514771),
          g = e(6839188756),
          I = e(8871937520),
          f = e(1224315998),
          y = e(4481313819),
          M = e(7003004874),
          p = e(6259241484),
          O = e(4902318931),
          C = e(2938177083),
          h = e(1273480023),
          D = e(3810478625);
        function P() {
          return (
            (P =
              Object.assign ||
              function (F) {
                for (var V = 1; V < arguments.length; V++) {
                  var X = arguments[V];
                  for (var q in X)
                    Object.prototype.hasOwnProperty.call(X, q) && (F[q] = X[q]);
                }
                return F;
              }),
            P.apply(this, arguments)
          );
        }
        _(P, "_extends");
        const S = new i.Ay("huddles"),
          b = {
            elementName: "cancel",
            onClick: {
              enableClogAction: !0,
            },
          },
          K = {
            elementName: "start-huddle",
            onClick: {
              enableClogAction: !0,
            },
          },
          x = _((F) => {
            let {
              channelId: V,
              channelType: X,
              channelMembersCount: q,
              isTeamOnTrial: oe,
              isFreeTeam: z,
              trialExpirationTS: Ae,
              handleOnSubmit: ae,
              closeModal: de,
              UNSAFE_parentSelector: ve,
              isCurrentTeamSponsoredInSlackConnectChannel: Se = !1,
            } = F;
            const Ee = (0, d.d4)(D.g),
              be = S.t("Continue this conversation in a huddle", {
                fallbackHash: "e5dda045c4edc7e85d1a347f7051533c494e1904",
              }),
              Ce = n.createElement(u.A, {
                channelId: V,
              });
            let Z, $;
            switch (
              (oe && !Se
                ? ($ = f.UiComponentVariant.TRIAL_TEAM)
                : z && !Se
                ? ($ = f.UiComponentVariant.FREE_TEAM)
                : ($ = f.UiComponentVariant.PAID_TEAM),
              X)
            ) {
              case r.Cu.mpim: {
                const N = _(
                  () =>
                    S.rt(
                      "Use this message as a jumping off point for a huddle. All <strong>{channelMembersCount}</strong> members of this conversation will be able to join.",
                      {
                        channelMembersCount: q,
                      }
                    ),
                  "genericCopy"
                );
                Ee
                  ? (Z = N())
                  : oe
                  ? (Z = S.rt(
                      "Use this message as a jumping off point for a huddle with anyone in this conversation. Huddles with more than 2 people are a paid feature, available with your free trial through {trialEndDate}.",
                      {
                        trialEndDate: (0, I.Pd)(Ae),
                        fallbackHash:
                          "2955534d96227983f0f85447fb8f3f044131c94f",
                      }
                    ))
                  : z
                  ? (Z = S.rt(
                      "Use this message as a jumping off point for a huddle. On the free version of Slack, one other person from the conversation will be able to join."
                    ))
                  : (Z = N());
                break;
              }
              case r.Cu.im:
                Z = S.t(
                  "Use this message as a jumping off point for a huddle.",
                  {
                    fallbackHash: "563c2f46cf094d773cfedd52e582a385faea3753",
                  }
                );
                break;
              default: {
                const N = _(
                  () =>
                    S.rt(
                      "Use this message as a jumping off point for a huddle. All <strong>{channelMembersCount}</strong> members of <strong>{channelName}</strong> will be able to join.",
                      {
                        channelMembersCount: q,
                        channelName: Ce,
                      }
                    ),
                  "genericCopy"
                );
                Ee || Se
                  ? (Z = N())
                  : oe
                  ? (Z = S.rt(
                      "Use this message as a jumping off point for a huddle with anyone in <strong>{channelName}</strong>. Huddles with more than 2 people are a paid feature, available with your free trial through {trialEndDate}.",
                      {
                        channelName: Ce,
                        trialEndDate: (0, I.Pd)(Ae),
                      }
                    ))
                  : z
                  ? (Z = S.rt(
                      "Use this message as a jumping off point for a huddle. On the free version of Slack, one other person from <strong>{channelName}</strong> will be able to join.",
                      {
                        channelName: Ce,
                      }
                    ))
                  : (Z = N());
              }
            }
            return n.createElement(
              y.A,
              {
                uiComponentName: f.UiComponentName.HUDDLES_IN_THREAD_SPEEDBUMP,
                eventId: f.EventId.CANVAS_EVENT,
                uiComponentVariant: $,
              },
              n.createElement(
                o.A,
                {
                  onClose: de,
                  "data-qa": "huddle_in_thread_speed_bump_modal",
                  submitButtonText: S.t("Start Huddle", {
                    fallbackHash: "d9a37dbb2c259a1534d34ec9a94d2e9013f7b445",
                  }),
                  title: be,
                  onSubmit: ae,
                  submitAutoClogProps: K,
                  onCancel: de,
                  cancelAutoClogProps: b,
                  headerImageSrc: v(),
                  className: "p-huddle_in_thread_speed_bump_modal",
                  headerImageAlt: S.t(
                    "Brainstorm, make decisions or have a lightweight catch-up with whoever\u2019s online."
                  ),
                  UNSAFE_parentSelector: ve,
                },
                n.createElement(
                  "p",
                  {
                    className: "p-huddle_in_thread_speed_bump_modal__body_text",
                    id: "huddle-in-thread-speed-bump-modal-body-text",
                  },
                  Z
                )
              )
            );
          }, "BaseHuddleInThreadSpeedBumpModalBase");
        x.displayName = "BaseHuddleInThreadSpeedBumpModalBase";
        const B = _((F) => {
          let { channelId: V, onConfirm: X, closeModal: q } = F;
          const oe = (0, s.wA)(),
            z = (0, d.d4)((Z) => (0, c.OL)(Z, V)),
            Ae = (0, r.mz)(z),
            ae = (0, d.d4)((Z) => (0, l.q8)(Z, V)),
            de = (0, t.A)(ae, "counts.member_count") || 0,
            ve = (0, g.tc)((0, d.d4)(T.H7)),
            Se = (0, d.d4)(E.iH),
            Ee = (0, d.d4)(E.Sk),
            be = (0, d.d4)((Z) => (0, h.u)(Z, z));
          (0, n.useEffect)(
            () => (
              oe(
                (0, M.A)({
                  notificationName: p.ze.HUDDLE_FROM_THREAD_EDUCATIONAL_MODAL,
                  action: p.hw.IMPRESSION,
                })
              ),
              () => {
                oe(
                  (0, C.A)({
                    spaceName: p.xu.LAUNCH_MODAL,
                    action: p.hw.DISMISS,
                  })
                );
              }
            ),
            [oe]
          );
          const Ce = (0, n.useCallback)(() => {
            X(), q == null || q();
          }, [q, X]);
          return n.createElement(x, {
            channelType: Ae,
            channelMembersCount: de,
            isFreeTeam: ve,
            isTeamOnTrial: Se,
            trialExpirationTS: Ee,
            handleOnSubmit: Ce,
            channelId: V,
            onConfirm: X,
            closeModal: q,
            isCurrentTeamSponsoredInSlackConnectChannel: be,
          });
        }, "HuddleInThreadSpeedBumpModalBase");
        B.displayName = "HuddleInThreadSpeedBumpModalBase";
        const U = {
            spaceName: p.xu.LAUNCH_MODAL,
            notifications: {
              [p.ze.HUDDLE_FROM_THREAD_EDUCATIONAL_MODAL]: {
                component: B,
              },
            },
          },
          R = _((F) => {
            let { channelId: V, onConfirm: X, closeModal: q } = F;
            return n.createElement(
              O.Ay,
              P({}, U, {
                channelId: V,
                onConfirm: X,
                closeModal: q,
              })
            );
          }, "HuddleInThreadSpeedBumpModal");
        R.displayName = "HuddleInThreadSpeedBumpModal";
        var G = null;
        const H = (0, a.A)(R);
      },
      7843142872: (W, A, e) => {
        "use strict";
        e.d(A, {
          D7: () => l,
          Lk: () => E,
          Vp: () => T,
          g6: () => v,
        });
        var t = e(5824283093),
          n = e(1031947056),
          s = e(6533394955),
          i = e(4423055085),
          d = e(6122756707),
          o = e(2562405183),
          a = e(5492559860),
          r = e(9719951405),
          c = e(2832209848);
        let u = 1;
        const l = _((g, I) => {
            let {
              experimentHuddlesDiscoveryCallsGroupTreatment: f = !1,
              component: y = c.G7.HuddleCallNudgesBanner,
            } = I;
            if (
              !f ||
              (!(0, r.kI)(g, y, c.X8.Click) && !(0, r.kI)(g, y, c.X8.Dismiss))
            )
              return !1;
            var M;
            const p =
              (M = (0, r.ky)(g, y, c.X8.Click)) !== null && M !== void 0
                ? M
                : 0;
            var O;
            const C =
              (O = (0, r.ky)(g, y, c.X8.Dismiss)) !== null && O !== void 0
                ? O
                : 0;
            return !(p >= u || C >= u);
          }, "shouldShowHuddleDiscoveryBanner"),
          m = _(function () {
            let {
              experimentHuddlesDiscoveryCallsGroupTreatment: g = !1,
              component: I = UiComponent.HuddleCallNudgesBanner,
            } =
              arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : {
                    experimentHuddlesDiscoveryCallsGroupTreatment: !1,
                    component: UiComponent.HuddleCallNudgesBanner,
                  };
            const f = useDispatch();
            useEffect(() => {
              g &&
                f(
                  loadUserInteractions({
                    interactions: [
                      {
                        component: I,
                        type: InteractionType.Click,
                      },
                      {
                        component: I,
                        type: InteractionType.Dismiss,
                      },
                    ],
                    useCache: !0,
                    cacheFilter: hasLoadedInteraction,
                    reason: "huddle-discovery-calls",
                  })
                );
            }, [f, g, I]);
          }, "useHuddleDiscoveryCallsUserInteractions"),
          v = (0, n.Ay)("Send interaction to dismiss nudge", (g, I, f) => {
            let {
              experimentHuddlesDiscoveryCallsGroupTreatment: y,
              interactionType: M,
            } = f;
            if (!y) return;
            const p = I();
            (0, r.ky)(p, c.G7.HuddleCallNudgesBanner, M) > u ||
              g(
                (0, a.z)({
                  component: c.G7.HuddleCallNudgesBanner,
                  type: M,
                  reason: "huddle-discovery-calls",
                })
              );
          });
        v.meta = {
          name: "createThunk",
          key: "createThunkincrementUserInteractionCount",
          description: "Send interaction to dismiss nudge",
        };
        const E = _((g) => {
            let { component: I, type: f } = g;
            const y = (0, d.wA)();
            return (
              (0, t.useEffect)(() => {
                y(
                  (0, a.b)({
                    interactions: [
                      {
                        component: I,
                        type: f,
                      },
                    ],
                    reason: I,
                  })
                );
              }, [y, I, f]),
              (0, o.d4)((M) => ((0, r.kI)(M, I, f) ? (0, r.PU)(M, I) : null))
            );
          }, "useTrialProBannerInteraction"),
          T = (0, n.Ay)("Record trial pro banner interaction", (g, I, f) => {
            let { component: y, type: M } = f;
            return g(
              (0, a.z)({
                component: y,
                type: M,
                reason: y,
              })
            );
          });
        (T.meta = {
          name: "createThunk",
          key: "createThunkrecordTrialProBannerInteraction",
          description: "Record trial pro banner interaction",
        }),
          (0, i.ul)("huddleInteractionUtils", {
            addOneMoreThanClickCount: (g) => {
              const I = (0, s.getStateByTeamId)(g);
              u = (0, r.ky)(I, c.G7.HuddleCallNudgesBanner, c.X8.Click) + 1;
            },
            addOneMoreThanDismissCount: (g) => {
              const I = (0, s.getStateByTeamId)(g);
              u = (0, r.ky)(I, c.G7.HuddleCallNudgesBanner, c.X8.Dismiss) + 1;
            },
          });
      },
      8330768070: (W, A, e) => {
        "use strict";
        e.d(A, {
          G$: () => P,
          Oe: () => x,
          Y6: () => b,
        });
        var t = e(5824283093),
          n = e(6122756707),
          s = e(3037015781),
          i = e(2562405183),
          d = e(5531259478),
          o = e(6496493732),
          a = e(7138682671),
          r = e(3989454579),
          c = e(4481313819),
          u = e(1407713935),
          l = e(5363983309),
          m = e(5795074931),
          v = e(9101533895),
          E = e(8286248123),
          T = e(9884588328),
          g = e(8798294025),
          I = e(8921478798),
          f = e(1224315998),
          y = e(735940183),
          M = e(387484329),
          p = e(2047021170);
        function O() {
          return (
            (O =
              Object.assign ||
              function (B) {
                for (var U = 1; U < arguments.length; U++) {
                  var R = arguments[U];
                  for (var G in R)
                    Object.prototype.hasOwnProperty.call(R, G) && (B[G] = R[G]);
                }
                return B;
              }),
            O.apply(this, arguments)
          );
        }
        _(O, "_extends");
        const C = new y.Ay("huddles"),
          h = {
            elementName: "huddles_confirmation_dialog_ok",
            eventId: f.EventId.HUDDLES_JOIN_CONFIRM,
            onClick: {
              enableClogAction: !0,
            },
          },
          D = {
            elementName: "huddles_confirmation_dialog_cancel",
            eventId: f.EventId.HUDDLES_JOIN_CANCEL,
            onClick: {
              enableClogAction: !0,
            },
          },
          P = _((B) => {
            let {
              children: U,
              closeModal: R,
              onConfirm: G,
              uiComponentName: H,
              ...F
            } = B;
            const V = (0, t.useCallback)(() => {
              G(), R == null || R();
            }, [R, G]);
            return t.createElement(
              c.A,
              {
                uiComponentName: H,
                eventId: f.EventId.HUDDLES_CONFIRM_DIALOG_SHOWN,
                clogImpression: !0,
              },
              t.createElement(
                o.A,
                O(
                  {
                    overlayClassName: "p-huddle_join_modal__overlay",
                    "data-qa": "huddle_join_modal",
                    onCancel: R,
                    onClose: R,
                    onSubmit: V,
                    submitButtonText: C.t("OK"),
                    submitAutoClogProps: h,
                    cancelAutoClogProps: D,
                  },
                  F
                ),
                U
              )
            );
          }, "HuddleJoinModal");
        P.displayName = "HuddleJoinModal";
        const S = _((B) => {
          let {
            prevChannelId: U,
            nextChannelId: R,
            onConfirm: G,
            closeModal: H,
          } = B;
          const F = (0, i.d4)((Ae) => (0, v.OL)(Ae, U)),
            V = (0, i.Z2)((Ae) => {
              if (!F) return [];
              let ae = [];
              if ((0, u.LI)(F)) ae = [(0, g.e)(F)];
              else if ((0, u.yz)(F)) {
                const de = (0, T.Ug)(F);
                if (de && de.length) {
                  const ve = (0, m.WR)(Ae);
                  ae = de.filter((Se) => Se !== ve);
                }
              }
              return ae.map((de) => (0, I.I)(Ae, de));
            }),
            X = (0, i.d4)((Ae) => (0, v.OL)(Ae, R)),
            q = (0, i.Z2)((Ae) => {
              if (!X) return [];
              let ae = [];
              if ((0, u.LI)(X)) ae = [(0, g.e)(X)];
              else if ((0, u.yz)(X)) {
                const de = (0, T.Ug)(X);
                if (de && de.length) {
                  const ve = (0, m.WR)(Ae);
                  ae = de.filter((Se) => Se !== ve);
                }
              }
              return ae.map((de) => (0, I.I)(Ae, de));
            });
          let oe = C.rt("You\u2019re already in a huddle.");
          V.length
            ? (oe = C.rt(
                "You\u2019re already in a huddle with {listOfPersons}.",
                {
                  listOfPersons: (0, y.jd)(V).join(""),
                }
              ))
            : F &&
              (0, s.uz)(F) &&
              (oe = C.rt("You\u2019re already in a huddle in {channel}.", {
                channel: t.createElement(d.A, {
                  channel: F,
                  channelId: U,
                }),
              }));
          let z = C.rt("Would you like to leave it and join this one instead?");
          return (
            q.length
              ? (z = C.rt(
                  "Would you like to leave it and join a huddle with {listOfPersons} instead?",
                  {
                    listOfPersons: t.createElement(
                      "strong",
                      null,
                      (0, y.jd)(q).join("")
                    ),
                  }
                ))
              : X &&
                (0, s.uz)(X) &&
                (z = C.rt(
                  "Would you like to leave it and join a huddle in {channel} instead?",
                  {
                    channel: t.createElement(
                      "strong",
                      null,
                      t.createElement(d.A, {
                        channel: X,
                        channelId: R,
                      })
                    ),
                  }
                )),
            t.createElement(
              P,
              {
                uiComponentName: f.UiComponentName.HUDDLES_CONFIRMATION_DIALOG,
                title: C.t("Switch to this huddle?"),
                onConfirm: G,
                closeModal: H,
              },
              t.createElement("p", null, oe, " ", z)
            )
          );
        }, "HuddleSwitchModal");
        S.displayName = "HuddleSwitchModal";
        const b = (0, l.A)(S),
          K = _((B) => {
            let { channelId: U, onConfirm: R, closeModal: G } = B;
            const H = (0, i.d4)((ve) => (0, v.OL)(ve, U));
            var F;
            const V = (0, i.d4)((ve) => {
                var Se, Ee;
                return (F =
                  (Se = (0, E.q8)(ve, U)) === null ||
                  Se === void 0 ||
                  (Ee = Se.counts) === null ||
                  Ee === void 0
                    ? void 0
                    : Ee.member_count) !== null && F !== void 0
                  ? F
                  : 0;
              }),
              X = (0, i.d4)((ve) =>
                (0, p.ty)(ve, "huddles_show_shouty_rooster")
              ),
              [q, oe] = (0, t.useState)(X),
              z = (0, n.wA)(),
              Ae =
                H &&
                (0, s.uz)(H) &&
                t.createElement(
                  "strong",
                  null,
                  t.createElement(d.A, {
                    channelId: U,
                    channel: H,
                  })
                ),
              ae =
                V > 1
                  ? C.rt(
                      "You\u2019ll be starting a huddle that all {count} members of {channel} can join.",
                      {
                        count: t.createElement("strong", null, V),
                        channel: Ae,
                      }
                    )
                  : C.rt(
                      "You\u2019ll be starting a huddle that every member of {channel} can join.",
                      {
                        channel: Ae,
                      }
                    ),
              de = (0, t.useCallback)(() => {
                const ve = !q;
                oe(ve),
                  z(
                    (0, M.AZ)({
                      pref: "huddles_show_shouty_rooster",
                      value: ve,
                    })
                  );
              }, [q, z]);
            return t.createElement(
              P,
              {
                uiComponentName:
                  f.UiComponentName.HUDDLES_SHOUTY_ROOSTER_DIALOG,
                title: C.t("Start a huddle in this channel?"),
                onConfirm: R,
                closeModal: G,
              },
              t.createElement("p", null, ae),
              t.createElement(
                a.A,
                {
                  text: C.t("Don\u2019t show this message again."),
                  type: "inline",
                  cursor: "pointer",
                },
                t.createElement(r.A, {
                  name: "ns",
                  checked: !q,
                  onChange: de,
                  "data-qa": "huddle_join_modal_show_checkbox",
                })
              )
            );
          }, "HuddleShoutyRoosterModal");
        K.displayName = "HuddleShoutyRoosterModal";
        const x = (0, l.A)(K);
      },
      3143500799: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => u,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(2047021170),
          i = e(2562405183),
          d = e(3677363342),
          o = e.n(d);
        const a = t.memo((l) => {
            let {
              className: m,
              iconClassName: v,
              allowMuteAnimation: E,
              wasMicEverEnabled: T,
              isMicStrikethroughRed: g,
            } = l;
            return t.createElement(
              "div",
              {
                className: (0, n.A)(
                  "p-huddle_mic_icon p-huddle_mic_icon__container",
                  m
                ),
                "data-qa": "huddle_mic_icon_unmute",
              },
              t.createElement(
                "svg",
                {
                  className: v,
                  xmlns: "http://www.w3.org/2000/svg",
                  width: "20",
                  height: "20",
                  viewBox: "0 0 20 20",
                  fill: "none",
                },
                t.createElement("path", {
                  d: "M5.35086 10.3436C5.12445 9.77312 5 9.15109 5 8.5V8.25C5 7.83579 4.66421 7.5 4.25 7.5C3.83579 7.5 3.5 7.83579 3.5 8.25V8.5C3.5 9.60794 3.7772 10.6511 4.26603 11.564L5.35086 10.3436ZM7.62904 14.554C8.36362 14.8419 9.16335 15 10 15C13.5899 15 16.5 12.0899 16.5 8.5V8.25C16.5 7.83579 16.1642 7.5 15.75 7.5C15.3358 7.5 15 7.83579 15 8.25V8.5C15 11.2614 12.7614 13.5 10 13.5C9.55549 13.5 9.12453 13.442 8.71427 13.3331L7.62904 14.554Z",
                  fill: "currentColor",
                }),
                t.createElement("path", {
                  d: "M10 14.25V17",
                  stroke: "currentColor",
                  strokeWidth: "1.5",
                  strokeLinecap: "round",
                }),
                t.createElement("path", {
                  d: "M12.25 17.25L7.75 17.25",
                  stroke: "currentColor",
                  strokeWidth: "1.5",
                  strokeLinecap: "round",
                }),
                t.createElement("path", {
                  d: "M12.1271 2.72031C11.5376 2.2685 10.8001 2 10 2C8.067 2 6.5 3.567 6.5 5.5V8.5C6.5 8.67302 6.51255 8.84311 6.5368 9.0094L8 7.3633V5.5C8 4.39543 8.89543 3.5 10 3.5C10.4175 3.5 10.8051 3.62793 11.1258 3.84674L12.1271 2.72031ZM9.90052 11.9986C9.93357 11.9995 9.96673 12 10 12C11.933 12 13.5 10.433 13.5 8.5V7.9492L9.90052 11.9986Z",
                  fill: "currentColor",
                }),
                t.createElement("path", {
                  className: (0, n.A)({
                    "p-huddle_mic_icon__microphone--slash_animated": E && T,
                    "p-huddle_mic_icon__microphone--slash": g,
                  }),
                  d: "M4 15.25L15.5 2.25",
                  stroke: "currentColor",
                  strokeWidth: "1.5",
                  strokeLinecap: "round",
                })
              )
            );
          }),
          r = t.memo((l) => {
            let {
              volumeLevel: m = 0,
              className: v,
              iconClassName: E,
              allowUnmutedAnimation: T,
            } = l;
            const [g, I] = (0, t.useState)(0);
            (0, t.useEffect)(() => {
              if (m !== "auto") {
                I(Math.min(1, m || 0));
                return;
              }
              const M = setInterval(() => {
                const p = (Math.floor(Math.random() * 100) + 1) / 100;
                I(p);
              }, 100);
              return () => {
                clearInterval(M);
              };
            }, [m]);
            const f = (0, i.d4)((M) => !(0, s.ty)(M, "a11y_animations")),
              y = (0, t.useMemo)(
                () =>
                  T
                    ? f
                      ? t.createElement(
                          "svg",
                          {
                            width: "20",
                            height: "20",
                            viewBox: "0 0 20 20",
                            fill: "none",
                            xmlns: "http://www.w3.org/2000/svg",
                          },
                          t.createElement("path", {
                            d: "M3 8.9V11M5.8 6.1V13.8M8.6 4V16.6M11.4 7.5V12.4M14.2 5.4V14.5M17 8.9V11",
                            stroke: "#178F65",
                            strokeWidth: "1.4",
                            strokeLinecap: "round",
                            strokeLinejoin: "round",
                          })
                        )
                      : t.createElement("img", {
                          className: "p-huddle_mic_icon__img",
                          src: o(),
                          alt: "",
                        })
                    : t.createElement(
                        "svg",
                        {
                          className: E,
                          xmlns: "http://www.w3.org/2000/svg",
                          width: "20",
                          height: "20",
                          viewBox: "0 0 20 20",
                          fill: "none",
                        },
                        t.createElement("path", {
                          className:
                            "p-huddle_mic_icon__microphone--input_level",
                          style: {
                            transform: `scaleY(${g})`,
                          },
                          d: "M10 11V3",
                          stroke: "currentColor",
                          strokeWidth: "4",
                        }),
                        t.createElement("path", {
                          d: "M7.25 5.5C7.25 3.98122 8.48122 2.75 10 2.75V2.75C11.5188 2.75 12.75 3.98122 12.75 5.5V8.5C12.75 10.0188 11.5188 11.25 10 11.25V11.25C8.48122 11.25 7.25 10.0188 7.25 8.5V5.5Z",
                          stroke: "currentColor",
                          strokeWidth: "1.5",
                        }),
                        t.createElement("path", {
                          d: "M4.25 8.25V8.5C4.25 11.6756 6.82436 14.25 10 14.25V14.25C13.1756 14.25 15.75 11.6756 15.75 8.5V8.25",
                          stroke: "currentColor",
                          strokeWidth: "1.5",
                          strokeLinecap: "round",
                        }),
                        t.createElement("path", {
                          d: "M10 14.25V17",
                          stroke: "currentColor",
                          strokeWidth: "1.5",
                          strokeLinecap: "round",
                        }),
                        t.createElement("path", {
                          d: "M12.25 17.25L7.75 17.25",
                          stroke: "currentColor",
                          strokeWidth: "1.5",
                          strokeLinecap: "round",
                        })
                      ),
                [T, E, g, f]
              );
            return t.createElement(
              "div",
              {
                className: (0, n.A)(
                  "p-huddle_mic_icon p-huddle_mic_icon__container",
                  v
                ),
                "data-qa": "huddle_mic_icon_mute",
              },
              y
            );
          }),
          c = _((l) => {
            let {
              type: m,
              volumeLevel: v,
              className: E,
              iconClassName: T,
              allowMuteAnimation: g = !1,
              isMicStrikethroughRed: I = !1,
              allowUnmutedAnimation: f = !1,
            } = l;
            const [y, M] = (0, t.useState)(m === "unmuted");
            return (
              (0, t.useEffect)(() => {
                m === "unmuted" && M(!0);
              }, [m]),
              m === "unmuted"
                ? t.createElement(r, {
                    className: E,
                    iconClassName: T,
                    volumeLevel: v,
                    allowUnmutedAnimation: f,
                  })
                : t.createElement(a, {
                    className: E,
                    iconClassName: T,
                    allowMuteAnimation: g,
                    wasMicEverEnabled: y,
                    isMicStrikethroughRed: I,
                  })
            );
          }, "HuddleMicIcon");
        c.displayName = "HuddleMicIcon";
        const u = t.memo(c);
      },
      5043394918: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => o,
        });
        var t = e(5824283093),
          n = e(7715417323),
          s = e(1829947126),
          i = e(1337358413),
          d = e(3143500799);
        function o(a) {
          let {
            peerId: r,
            isMicrophoneEnabled: c,
            className: u,
            allowMuteIconAnimation: l = !1,
            isMicStrikethroughRed: m = !1,
          } = a;
          const [v, E] = (0, t.useState)(0);
          return (
            (0, t.useEffect)(() => {
              if (!c) return n.A;
              const T = _((g) => {
                const I = (0, i.Ft)(g);
                E(I);
              }, "onLevelUpdated");
              return (
                s.A.subscribe(r, T),
                () => {
                  s.A.unsubscribe(r, T);
                }
              );
            }, [r, c]),
            t.createElement(d.A, {
              type: c ? "unmuted" : "muted",
              volumeLevel: v,
              className: u || "",
              allowMuteAnimation: l,
              isMicStrikethroughRed: m,
            })
          );
        }
        _(o, "HuddleMicVolumeIndicator");
      },
      438845125: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => i,
        });
        var t = e(5824283093),
          n = e(178327686);
        function s(d) {
          let { slackId: o, displayName: a } = d;
          return !o && !a
            ? null
            : o
            ? t.createElement(n.A, {
                isBold: !1,
                id: o,
              })
            : t.createElement("span", null, a);
        }
        _(s, "HuddleMsgTextUser"), (s.displayName = "HuddleMsgTextUser");
        const i = s;
      },
      1051015021: (W, A, e) => {
        "use strict";
        e.d(A, {
          V: () => T,
        });
        var t = e(5824283093),
          n = e(7433432223),
          s = e(9548972574),
          i = e(2562405183),
          d = e(735940183),
          o = e(5255740490),
          a = e(7914553163),
          r = e(6005700845),
          c = e(6323355797),
          u = e(7949425452),
          l = e(3810478625),
          m = e(7573583373),
          v = e.n(m);
        const E = new d.Ay("huddles");
        function T(g) {
          let { showProBadge: I, className: f } = g;
          const y = (0, i.d4)(s.qr),
            M = (0, i.d4)(l.g),
            p = c.zG.Vhq,
            O = (0, a.Ay)({
              promoSubtype: p,
            }),
            C = (0, t.useMemo)(
              () =>
                t.createElement(r.A, {
                  useLink: !0,
                  variant: O,
                  promoSubtype: c.zG.Vhq,
                  ctaClassName: v().cta,
                }),
              [O]
            );
          return !y ||
            !M ||
            (O !== a.MX.TrialEligible &&
              O !== a.MX.TrialIneligible &&
              O !== a.MX.TrialIneligibleUserCannotUpgrade)
            ? null
            : t.createElement(
                "div",
                {
                  className: (0, o.A)(v().container, f),
                },
                t.createElement(
                  n.A,
                  null,
                  t.createElement(
                    "div",
                    {
                      className: v().alertBanner,
                    },
                    I &&
                      t.createElement(u.Ay, {
                        size: u.vj.Medium,
                        className: v().proBadge,
                      }),
                    t.createElement(
                      "span",
                      null,
                      E.t(
                        "On the free version of Slack, your huddles are limited to {min} minutes.",
                        {
                          min: 30,
                        }
                      ),
                      "\xA0",
                      C
                    )
                  )
                )
              );
        }
        _(T, "HuddleTimeLimitUpgradeAlert"),
          (T.displayName = "HuddleTimeLimitUpgradeAlert");
      },
      4745917661: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
        });
        var t = e(5824283093),
          n = e(735940183);
        const s = new n.Ay("huddles");
        function i(o) {
          let {
            actionLabel: a,
            deviceLabel: r,
            audioOnlyModeEnabledWarning: c,
          } = o;
          if (c) {
            const u = s.t(
              "Audio only mode will be disabled if you turn on your camera",
              {
                fallbackHash: "27892acc411157e52b1022f480b10c11e51b2350",
              }
            );
            return t.createElement(
              "div",
              {
                className: "p-huddle_tooltip_device_content",
              },
              t.createElement(
                "div",
                {
                  className: "p-huddle_tooltip_action_label",
                },
                u
              )
            );
          }
          return t.createElement(
            "div",
            {
              className: "p-huddle_tooltip_device_content",
            },
            t.createElement(
              "div",
              {
                className: "p-huddle_tooltip_action_label",
              },
              a
            ),
            r &&
              t.createElement(
                "div",
                {
                  className: "p-huddle_tooltip_device_label",
                },
                r
              )
          );
        }
        _(i, "HuddlesToolTipDeviceContent"),
          (i.displayName = "HuddlesToolTipDeviceContent");
        const d = i;
      },
      8320929653: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => L,
          e3: () => Ce,
          lc: () => Z,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(5824283093),
          i = e(5255740490),
          d = e(6122756707),
          o = e(2562405183),
          a = e(3288846409),
          r = e(1149563359),
          c = e(3037015781),
          u = e(9012396182),
          l = e(1289024643),
          m = e(5795074931),
          v = e(9101533895),
          E = e(5286203919),
          T = e(8746998952),
          g = e(9712681361),
          I = e(4742719639),
          f = e(5332875232),
          y = e(6251210828),
          M = e(2802517438),
          p = e(4481313819),
          O = e(3622858354),
          C = e(4233000497),
          h = e(6749400491),
          D = e(9373230523),
          P = e(1407713935),
          S = e(8798294025),
          b = e(9884588328),
          K = e(6470070112),
          x = e(8683010724),
          B = e(3708320478),
          U = e(4775127335),
          R = e(2683115972),
          G = e(3165300465),
          H = e(5531259478),
          F = e(2527782504),
          V = e(4275787242),
          X = e(735940183),
          q = e(1224315998),
          oe = e(8869383561),
          z = e(5519146941),
          Ae = e(3193155968),
          ae = e(7429662208);
        function de() {
          return (
            (de =
              Object.assign ||
              function (w) {
                for (var k = 1; k < arguments.length; k++) {
                  var J = arguments[k];
                  for (var ee in J)
                    Object.prototype.hasOwnProperty.call(J, ee) &&
                      (w[ee] = J[ee]);
                }
                return w;
              }),
            de.apply(this, arguments)
          );
        }
        _(de, "_extends");
        const ve = new X.Ay("huddles"),
          Se = {
            elementName: "huddles_invite_decline",
            eventId: q.EventId.CANVAS_EVENT,
            onClick: {
              enableClogAction: !0,
            },
          },
          Ee = {
            elementName: "huddles_invite_joining_soon",
            eventId: q.EventId.CANVAS_EVENT,
            onClick: {
              enableClogAction: !0,
            },
          },
          be = {
            elementName: "huddles_invite_join",
            eventId: q.EventId.CANVAS_EVENT,
            onClick: {
              enableClogAction: !0,
            },
          },
          Ce = _((w) => {
            let {
              topic: k,
              formattedTopic: J,
              channel: ee,
              channelName: ne,
              otherMemberNamesString: pe,
              imMemberName: Me,
              experimentHuddlesLaterGroupOn: ke,
            } = w;
            if (!ke) return s.createElement(s.Fragment, null);
            let ge = k
              ? ve.rt("Join the scheduled huddle about {topic}", {
                  topic: J,
                })
              : ve.rt("Join the scheduled huddle");
            return (
              (0, P.LI)(ee) && Me
                ? (ge = k
                    ? ve.rt(
                        "Join the scheduled huddle with {imMemberName} about {topic}",
                        {
                          topic: J,
                          imMemberName: Me,
                        }
                      )
                    : ve.rt("Join the scheduled huddle with {imMemberName}", {
                        imMemberName: Me,
                      }))
                : (0, P.yz)(ee)
                ? (ge = k
                    ? ve.rt(
                        "Join the scheduled huddle about {topic} with {otherMemberNamesString}",
                        {
                          topic: J,
                          otherMemberNamesString: pe,
                        }
                      )
                    : ve.rt(
                        "Join the scheduled huddle with {otherMemberNamesString}",
                        {
                          otherMemberNamesString: pe,
                        }
                      ))
                : (0, c.uz)(ee) &&
                  !(0, P.LI)(ee) &&
                  (ge = k
                    ? ve.rt(
                        "Join the scheduled huddle in {channelName} about {topic}",
                        {
                          topic: J,
                          channelName: ne,
                        }
                      )
                    : ve.rt("Join the scheduled huddle in {channelName}", {
                        channelName: ne,
                      })),
              ge
            );
          }, "getScheduledHuddleInviteCopy");
        function Z(w) {
          let {
            channelId: k,
            senderUserId: J,
            callId: ee,
            teamId: ne,
            isInviter: pe,
          } = w;
          const Me = (0, d.wA)(),
            { shouldUseNavigate: ke, activeTab: ge } = (0, s.useContext)(z.A),
            fe = (0, o.d4)(f.MJ),
            re = (0, o.d4)(m.WR),
            le = (0, o.d4)((Ht) => (0, D.A)(Ht, J)),
            Re = (0, o.d4)((Ht) => (0, v.OL)(Ht, k)),
            ye = (0, o.d4)((Ht) => {
              if (!Re || !fe || !(0, P.LI)(Re)) return;
              const Kt = (0, S.e)(Re);
              if (Kt) return (0, D.A)(Ht, Kt);
            }),
            Te = (0, o.Z2)((Ht) =>
              (0, P.yz)(Re)
                ? ((0, b.Ug)(Re) || [])
                    .filter((qt) => qt !== J && qt !== re)
                    .map((qt) => (0, D.A)(Ht, qt))
                    .filter((qt) => qt)
                : []
            ),
            De = (0, a.cw)(E.vO),
            Ue = (0, K.eu)(De),
            Ze = (0, o.d4)((Ht) => (0, l.Ck)(Ht, ee, re)) === "joining_soon",
            Q = (0, o.d4)((Ht) => (0, l.H6)(Ht, ee));
          var ie;
          const Ve =
              (ie = Q == null ? void 0 : Q.isScheduled) !== null &&
              ie !== void 0
                ? ie
                : !1,
            xe = (0, o.d4)(M.A),
            je = (0, o.d4)((Ht) => {
              if (ke) {
                var Kt;
                return (Kt = (0, ae.F8)(Ht, {
                  tab: ge,
                  container: Ae.mq.Primary,
                })) === null || Kt === void 0
                  ? void 0
                  : Kt.id;
              }
              return xe;
            }),
            Fe = (0, a.cw)(u.getFocusedWorkspace),
            He = k === je && Fe && ne && Fe === ne,
            Oe = (0, s.useCallback)(() => {
              Me(
                (0, h.A)({
                  callId: ee,
                  channelId: k,
                  inviteResponse: h.J.DECLINE,
                })
              );
            }, [ee, k, Me]),
            [Ye, at] = (0, s.useState)(!1),
            [_t, pt] = (0, s.useState)(!1),
            Qe = (0, s.useCallback)(() => {
              (function () {
                var Kt = (0, t.coroutine)(function* () {
                  pt(!0), at(!1);
                  const qt = Me(
                    (0, h.A)({
                      callId: ee,
                      channelId: k,
                      inviteResponse: h.J.JOINING_SOON,
                    })
                  );
                  if (qt)
                    try {
                      yield qt;
                    } catch {
                      at(!0);
                    } finally {
                      pt(!1);
                    }
                  else pt(!1);
                });
                return _(function () {
                  return Kt.apply(this, arguments);
                }, "respondToInvite");
              })()();
            }, [ee, k, Me]),
            ct = (0, s.useCallback)(() => {
              Me(
                (0, T.A)({
                  channelId: k,
                  callId: ee,
                  entryPoint: g.su.SIDEBAR_HUDDLE_INVITE,
                })
              );
            }, [k, ee, Me]),
            Pt = (0, o.d4)((Ht) => k && (0, I.o)(Ht, k)) || "",
            zt = Pt
              ? s.createElement(
                  "span",
                  {
                    className: "p-huddle_invite__topic",
                  },
                  s.createElement(O.A, {
                    text: Pt,
                  })
                )
              : null,
            an = s.createElement(
              "span",
              {
                className: "p-huddle_invite__sender_name",
              },
              le
            );
          let Qt;
          if (Ve) {
            const Ht = s.createElement(H.A, {
              channelId: k,
              boldIcon: !0,
            });
            Qt = Ce({
              topic: Pt,
              formattedTopic: zt,
              channel: Re,
              channelName: Ht,
              experimentHuddlesLaterGroupOn: !0,
            });
          } else if ((0, P.LI)(Re))
            pe
              ? (Qt = Ce({
                  topic: Pt,
                  formattedTopic: zt,
                  channel: Re,
                  imMemberName: ye,
                  experimentHuddlesLaterGroupOn: fe,
                }))
              : (Qt = ve.rt("Join huddle with {senderName}", {
                  senderName: an,
                }));
          else if ((0, P.yz)(Re)) {
            const Ht = (0, oe.A)(Te, {
              react: !0,
            }).join("");
            if (pe)
              Qt = Ce({
                topic: Pt,
                formattedTopic: zt,
                channel: Re,
                otherMemberNamesString: Ht,
                experimentHuddlesLaterGroupOn: fe,
              });
            else {
              const Kt = (0, oe.A)([le].concat(Te), {
                  react: !0,
                }).join(""),
                qt = s.createElement(
                  "span",
                  {
                    className: "p-huddle_invite__all_member_names",
                  },
                  Kt
                );
              Qt = ve.rt("Join huddle with {allMemberNames}", {
                allMemberNames: qt,
              });
            }
          } else {
            const Ht = s.createElement(H.A, {
              channelId: k,
              boldIcon: !0,
            });
            pe
              ? (Qt = Ce({
                  topic: Pt,
                  formattedTopic: zt,
                  channel: Re,
                  channelName: Ht,
                  experimentHuddlesLaterGroupOn: fe,
                }))
              : He
              ? (Qt = ve.rt(
                  "{senderName} is inviting you to a huddle in this channel",
                  {
                    senderName: an,
                  }
                ))
              : (Qt = ve.rt(
                  "{senderName} is inviting you to a huddle in {channelName}",
                  {
                    senderName: an,
                    channelName: Ht,
                  }
                ));
          }
          return {
            avatarOverflowBadgeCount: (0, P.yz)(Re) ? Te.length + 1 : 0,
            didRespondingToInviteFail: Ye,
            formattedTopic: zt,
            handleDecline: Oe,
            handleJoiningSoon: Qe,
            handleJoin: ct,
            inviteText: Qt,
            isCurrentUserJoiningSoon: Ze,
            isJoiningSoonResponsePending: _t,
            isLoading: Ue,
          };
        }
        _(Z, "useHuddleInviteProps"), (Z.displayName = "useHuddleInviteProps");
        const $ = {
            name: "warning",
          },
          N = _((w) => {
            let { channelId: k, senderUserId: J, callId: ee, teamId: ne } = w;
            const pe = (0, o.d4)(f.MJ),
              Me = (0, o.d4)(m.WR),
              ke = pe && Me === J,
              ge = (0, C.A)(k),
              {
                avatarOverflowBadgeCount: fe,
                didRespondingToInviteFail: re,
                formattedTopic: le,
                handleDecline: Re,
                handleJoiningSoon: ye,
                handleJoin: Te,
                inviteText: De,
                isCurrentUserJoiningSoon: Ue,
                isJoiningSoonResponsePending: Ke,
                isLoading: Ze,
              } = Z({
                channelId: k,
                senderUserId: J,
                callId: ee,
                teamId: ne,
                isInviter: ke,
              }),
              Q = (0, s.useRef)(null),
              ie = (0, s.useCallback)(() => {
                var pt;
                (pt = Q.current) === null || pt === void 0 || pt.focus();
              }, []);
            (0, r.A)(F.Ay.HUDDLE_INVITE_JOIN, ie);
            const Ve = "huddle-invite-text",
              xe = s.createElement(
                R.Ay,
                {
                  type: "outline",
                  className: "p-huddle_invite__button",
                  onClick: Re,
                  "data-qa": "huddle_invite_declined",
                  disabled: Ze,
                  autoClogProps: Se,
                },
                s.createElement(
                  "span",
                  {
                    className: "p-huddle_invite__label",
                  },
                  ve.t("Decline")
                )
              ),
              je = s.createElement(
                G.A,
                {
                  type: "outline",
                  className:
                    "p-huddle_invite__button p-huddle_invite__button--joining_soon",
                  loading: Ke,
                  onClick: ye,
                  disabled: Ze,
                  autoClogProps: Ee,
                  "aria-label": ve.t("Be there soon"),
                },
                s.createElement(
                  "span",
                  {
                    className: "p-huddle_invite__label",
                  },
                  ve.t("Be there soon")
                )
              ),
              [Fe, He] = (0, s.useState)(!1);
            (0, s.useEffect)(() => {
              let pt = 0;
              return (
                Ue &&
                  (He(!0),
                  (pt = window.setTimeout(() => {
                    He(!1);
                  }, 6e3))),
                () => {
                  pt && clearTimeout(pt);
                }
              );
            }, [Ue]);
            const Oe = Fe
                ? s.createElement(
                    "div",
                    {
                      className: "p-huddle_invite__header_notif",
                    },
                    s.createElement(
                      "div",
                      {
                        className: "p-huddle_invite__header_notif_content",
                      },
                      s.createElement(x.A, {
                        name: "clock",
                        size: "20",
                      }),
                      s.createElement(
                        "span",
                        {
                          className: "margin_left_50",
                        },
                        ve.t("Join when you\u2019re ready!")
                      )
                    )
                  )
                : null,
              Ye = s.createElement(
                G.A,
                {
                  ref: Q,
                  type: "primary",
                  className:
                    "p-huddle_invite__button p-huddle_invite__button--accept",
                  loading: Ze,
                  onClick: Te,
                  "data-qa": "huddle_invite_join",
                  autoClogProps: be,
                  "aria-label": ve.t("Join"),
                },
                s.createElement(
                  "span",
                  {
                    className:
                      "p-huddle_invite__label p-huddle_invite__label--join",
                  },
                  ve.t("Join")
                )
              ),
              at = (0, o.d4)(y.jI),
              _t = at
                ? {
                    width: at,
                  }
                : null;
            return s.createElement(
              p.A,
              de(
                {
                  eventId: q.EventId.CANVAS_EVENT,
                  uiComponentName: q.UiComponentName.HUDDLES_INVITE,
                  clogImpression: !0,
                },
                ge
              ),
              s.createElement(
                "div",
                de(
                  {
                    className: (0, i.A)("p-huddle_invite", {
                      "p-huddle_invite--with_header": !!le,
                    }),
                  },
                  _t && {
                    style: _t,
                  }
                ),
                s.createElement(
                  "div",
                  {
                    className: "p-huddle_invite__content",
                  },
                  Oe,
                  le &&
                    s.createElement(
                      "div",
                      {
                        className: "p-huddle_invite__message_header",
                      },
                      le
                    ),
                  s.createElement(
                    "div",
                    {
                      className: "p-huddle_invite__message",
                    },
                    !ke &&
                      s.createElement(
                        "div",
                        {
                          className: (0, i.A)(
                            "p-huddle_invite__avatar_container",
                            {
                              "p-huddle_invite__avatar_container--with_overflow":
                                !!fe,
                            }
                          ),
                        },
                        s.createElement(U.Ay, {
                          key: J,
                          className: "p-huddle_invite__avatar",
                          size: fe ? 14 : 20,
                          userId: J,
                          isInteractive: !1,
                        }),
                        !!fe &&
                          s.createElement(
                            "div",
                            {
                              className:
                                "p-huddle_invite__avatar_overflow_overlay",
                            },
                            fe
                          )
                      ),
                    s.createElement(
                      B.z,
                      null,
                      s.createElement(
                        "div",
                        {
                          className: "p-huddle_invite__text",
                          id: Ve,
                        },
                        De,
                        s.createElement(
                          "span",
                          {
                            className: "offscreen",
                          },
                          ve.rt("Press {key} to join", {
                            key: (0, K.$z)(),
                            fallbackHash:
                              "bd062cb22cea3388535c0f834ebf6df702757691",
                            fallbackHashNs: "keyboard_keys",
                          })
                        )
                      )
                    )
                  ),
                  s.createElement(
                    "div",
                    {
                      className: "p-huddle_invite__buttons",
                      role: "group",
                      "aria-labelledby": Ve,
                    },
                    Ye,
                    !Ue && je,
                    xe
                  )
                ),
                re &&
                  s.createElement(
                    V.A,
                    {
                      svgIconProps: $,
                    },
                    ve.t("Something went wrong responding to the invite.")
                  )
              )
            );
          }, "HuddleInvite");
        N.displayName = "HuddleInvite";
        const L = N;
      },
      6749400491: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => c,
          J: () => a,
        });
        var t = e(1031947056),
          n = e(6533394955),
          s = e(4250409994),
          i = e(1070786785),
          d = e(5319025363),
          o = e(5170073955),
          a;
        (function (u) {
          (u.ACCEPT = "accept"),
            (u.DECLINE = "decline"),
            (u.JOINING_SOON = "joining_soon");
        })(a || (a = {}));
        const r = (0, t.Ay)(
          "Respond to an invitation to a huddle",
          (u, l, m) => {
            let { channelId: v, inviteResponse: E, callId: T } = m;
            u((0, d.z)());
            let g;
            return (
              E !== a.ACCEPT &&
                (g = u(
                  (0, o.Q)({
                    response: E,
                    channelId: v,
                    roomId: T,
                    reason: "respond-to-huddle-invite",
                  })
                )),
              E === a.DECLINE &&
                ((0, n.dispatchForClientStore)((0, s.u8)(v)), u((0, i.V3)(v))),
              g
            );
          }
        );
        r.meta = {
          name: "createThunk",
          key: "createThunkrespondToHuddleInvite",
          description: "Respond to an invitation to a huddle",
        };
        const c = r;
      },
      4983989341: (W, A, e) => {
        "use strict";
        e.d(A, {
          x: () => a,
        });
        var t = e(6422693406),
          n = e(1031947056),
          s = e(1070786785),
          i = e(1452921056),
          d = e(9712681361),
          o = e(7631186994);
        const a = (0, n.Ay)(
          "Creates a new huddle in mpim where all huddle participants are channel members",
          (r, c, u) => {
            let { channelId: l, memberIds: m } = u;
            return r(
              (0, o.r)({
                memberIds: m,
              })
            )
              .then((v) => {
                r((0, s.Ay)(l)),
                  r(
                    (0, i.A)({
                      channelId: v.id,
                      entryPoint: d.su.CREATE_NEW_MPIM,
                    })
                  );
              })
              .catch((v) => t.S.reject(v));
          }
        );
        a.meta = {
          name: "createThunk",
          key: "createThunkcreateNewHuddleInMpimWithUsers",
          description:
            "Creates a new huddle in mpim where all huddle participants are channel members",
        };
      },
      5907086961: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => x,
        });
        var t = e(5824283093),
          n = e(6084388622),
          s = e(6122756707),
          i = e(9003400431),
          d = e(2562405183),
          o = e(2527994834),
          a = e(4761125736),
          r = e(3288846409),
          c = e(1824673572),
          u = e(581167618),
          l = e(980293773),
          m = e(9101533895),
          v = e(5286203919),
          E = e(735940183),
          T = e(4446301238),
          g = e(5531259478),
          I = e(5363983309),
          f = e(7868634217),
          y = e(4061200313),
          M = e(9183417278),
          p = e(1612857492),
          O = e(134846761),
          C = e(8847766420);
        const h = new E.Ay("huddles"),
          D = _((B) => {
            let { numOfExternalMembers: U, members: R } = B;
            const G = (0, d.d4)(C.Kc),
              H = (0, r.cw)(v.hc) || "",
              F = (0, d.d4)((L) => (0, m.OL)(L, H)),
              V = (0, d.d4)(
                (L) => (0, a._Z)(L, "invite_to_channel_permission") === "on"
              ),
              X = (0, d.d4)((L) => (0, M.Q)(L, F)),
              q = (0, d.d4)((L) => (0, p.q)(L, F)),
              oe = U === R.length,
              z = U > 0,
              Ae = !U,
              ae = R.length - U > 0,
              de = !(R.length - U),
              ve = h.rt(
                "They can join the huddle, but since you are not allowed to invite external people to this channel, they won\u2019t be able to see messages or reply to the thread."
              ),
              Se = t.createElement(
                t.Fragment,
                null,
                t.createElement(
                  "p",
                  null,
                  h.t(
                    "Everyone you\u2019ve added can join the huddle but won\u2019t be able to see messages or reply to the thread."
                  )
                ),
                t.createElement(
                  "p",
                  null,
                  h.rt(
                    "You can add people from {org} to {channelName}. New members will be able to see all of the channel\u2019s history, including any files that have been shared in the channel.",
                    {
                      org: t.createElement(O.A, {
                        id: G,
                      }),
                      channelName: t.createElement(g.A, {
                        className: "bold",
                        channel: F,
                      }),
                    }
                  )
                ),
                t.createElement(
                  "p",
                  null,
                  h.t(
                    "You don\u2019t have permission to add external people to this channel."
                  )
                )
              ),
              Ee = t.createElement(
                t.Fragment,
                null,
                t.createElement(
                  "p",
                  null,
                  h.t(
                    "Everyone you\u2019ve added can join the huddle but won\u2019t be able to see messages or reply to the thread."
                  )
                ),
                t.createElement(
                  "p",
                  null,
                  h.rt(
                    "You can add people from {org} to {channelName}. New members will be able to see all of the channel\u2019s history, including any files that have been shared in the channel.",
                    {
                      org: t.createElement(O.A, {
                        id: G,
                      }),
                      channelName: t.createElement(g.A, {
                        className: "bold",
                        channel: F,
                      }),
                    }
                  )
                )
              ),
              be = h.rt(
                "They can join the huddle, but since you are not allowed to invite people from {org} to this channel, they won\u2019t be able to see messages or reply to the thread.",
                {
                  org: t.createElement(O.A, {
                    id: G,
                  }),
                }
              ),
              Ce = t.createElement(
                t.Fragment,
                null,
                t.createElement(
                  "p",
                  null,
                  h.t(
                    "Everyone you\u2019ve added can join the huddle but won\u2019t be able to see messages or reply to the thread."
                  )
                ),
                t.createElement(
                  "p",
                  null,
                  h.rt(
                    "You can add external people (not from {org}) to {channelName}. New members will be able to see all of the channel\u2019s history, including any files that have been shared in the channel.",
                    {
                      org: t.createElement(O.A, {
                        id: G,
                      }),
                      channelName: t.createElement(g.A, {
                        className: "bold",
                        channel: F,
                      }),
                    }
                  )
                ),
                t.createElement(
                  "p",
                  null,
                  h.t(
                    "You don\u2019t have permission to add internal people to this channel."
                  )
                )
              ),
              Z = t.createElement(
                t.Fragment,
                null,
                t.createElement(
                  "p",
                  null,
                  h.t(
                    "Everyone you\u2019ve added can join the huddle but won\u2019t be able to see messages or reply to the thread."
                  )
                ),
                t.createElement(
                  "p",
                  null,
                  h.rt(
                    "You can add external people (not from {org}) to {channelName}. New members will be able to see all of the channel\u2019s history, including any files that have been shared in the channel.",
                    {
                      org: t.createElement(O.A, {
                        id: G,
                      }),
                      channelName: t.createElement(g.A, {
                        className: "bold",
                        channel: F,
                      }),
                    }
                  )
                )
              ),
              $ = h.rt(
                "They can join the huddle, but since you are not allowed to invite people to this channel, they won\u2019t be able to see messages or reply to the thread."
              ),
              N = h.rt(
                "They can join the huddle but won\u2019t be able to see messages or reply to the thread unless they are members of {channelName}. New members will be able to see all of the channel\u2019s history, including any files that have been shared in the channel.",
                {
                  channelName: t.createElement(g.A, {
                    className: "bold",
                    channel: F,
                  }),
                }
              );
            switch (!0) {
              case !V && !q && oe:
                return ve;
              case !V && !q && z:
                return Se;
              case !V && !q && Ae:
                return Ee;
              case !V && q:
                return N;
              case V && X && !q && oe:
                return ve;
              case V && X && !q && z:
                return Se;
              case V && X && !q && Ae:
                return Ee;
              case V && !X && q && Ae:
                return be;
              case V && !X && q && ae:
                return Ce;
              case V && !X && q && de:
                return Z;
              case V && !X && !q:
                return $;
              default:
                return N;
            }
          }, "DisallowedHuddleInviteSubtitle");
        D.displayName = "DisallowedHuddleInviteSubtitle";
        const P = D,
          S = new E.Ay("huddles");
        function b(B) {
          let { members: U } = B;
          const R = (0, s.wA)(),
            [G, H] = (0, t.useState)(null),
            [F, V] = (0, t.useState)([]),
            [X, q] = (0, t.useState)(!1),
            oe = (0, r.cw)(v.hc) || "",
            z = (0, d.d4)((ke) => (0, m.OL)(ke, oe)),
            Ae = (0, t.useCallback)(() => R((0, i.O)()), [R]),
            ae = (0, t.useCallback)(
              () =>
                R(
                  (0, i.O)({
                    closeAll: !0,
                  })
                ),
              [R]
            ),
            de = (0, t.useCallback)(
              (ke) => {
                H(ke),
                  R(
                    (0, T.Cw)({
                      channelId: oe,
                      users: ke,
                    })
                  )
                    .then(() => {
                      F.push(ke), V(F), H(null);
                    })
                    .catch(() => {
                      H(null), q(!0);
                    });
              },
              [oe, R, F]
            ),
            ve = (0, d.d4)(
              (ke) => (0, a._Z)(ke, "invite_to_channel_permission") === "on"
            ),
            Se = (0, d.d4)(
              (ke) =>
                (0, a._Z)(ke, "shared_channel_invite_requested_event_ga") ===
                "on"
            ),
            Ee = (0, d.d4)(
              (ke) =>
                (0, o.Q)(ke, "shared_channel_invite_requested", z.id) && Se
            ),
            be = (0, d.d4)((ke) => (0, f.Z)(ke, U)),
            Ce = (0, t.useMemo)(
              () => ({
                addedToChannel: S.t("Added to channel"),
                notInChannel: S.t("Not in channel"),
                inviteRequestPending: Se
                  ? S.t("Invitation request pending approval")
                  : "",
                added: S.t("Added"),
                pending: Se ? S.t("Pending") : "",
                inviteToChannel: S.t("Invite to channel"),
                cantBeInvitedToChannel: S.t("Can\u2019t be invited to channel"),
              }),
              [Se]
            ),
            Z = (0, d.d4)((ke) => (0, M.Q)(ke, z)),
            $ = (0, d.d4)((ke) => (0, p.q)(ke, z)),
            N = (0, d.Z2)((ke) => U.filter((ge) => (0, y.i)(ke, ge))),
            L = N.length,
            w = !ve && !$,
            k = ve && Z && !$,
            J = L === U.length,
            ee = !L,
            ne = (0, t.useMemo)(
              () =>
                S.rt(
                  "{count, plural, =1 {This person is not a member} other {These people are not members}} of {channelName}",
                  {
                    count: U.length,
                    channelName: t.createElement(g.A, {
                      channel: z,
                    }),
                  }
                ),
              [z, U]
            ),
            pe = (0, t.useCallback)(
              (ke) =>
                ke && Ee
                  ? Ce.inviteRequestPending
                  : ke
                  ? Ce.addedToChannel
                  : Ce.notInChannel,
              [Ee, Ce.addedToChannel, Ce.inviteRequestPending, Ce.notInChannel]
            ),
            Me = (0, t.useCallback)(
              (ke, ge) => {
                let fe;
                switch (
                  (ge && Ee
                    ? (fe = Ce.pending)
                    : (fe = ge ? Ce.added : Ce.inviteToChannel),
                  !0)
                ) {
                  case (w || k) && J:
                    return null;
                  case (w || k) && N.includes(ke):
                    return t.createElement(
                      "span",
                      {
                        className:
                          "p-huddle_invite_add_to_channel__user_list_no_invite_text",
                      },
                      Ce.cantBeInvitedToChannel
                    );
                  case ve && !Z && $ && ee:
                    return null;
                  case ve && !Z && $ && !N.includes(ke):
                    return t.createElement(
                      "span",
                      {
                        className:
                          "p-huddle_invite_add_to_channel__user_list_no_invite_text",
                      },
                      Ce.cantBeInvitedToChannel
                    );
                  case ve && !Z && !$:
                    return null;
                  default:
                    return t.createElement(
                      n.lV,
                      {
                        type: "outline",
                        size: "small",
                        disabled: ge,
                        loading: G === ke,
                        onClick: () => de(ke),
                        "aria-label": fe,
                      },
                      fe
                    );
                }
              },
              [
                Ee,
                Ce.pending,
                Ce.added,
                Ce.inviteToChannel,
                Ce.cantBeInvitedToChannel,
                w,
                k,
                J,
                N,
                ve,
                Z,
                $,
                ee,
                G,
                de,
              ]
            );
          return t.createElement(
            l.dW,
            {
              overlayClassName: "p-huddle_invite_modal_shared_styles__overlay",
              closeModal: Ae,
              contentLabel: ne,
              shouldReturnFocusAfterClose: !0,
            },
            t.createElement(
              l.rQ,
              null,
              t.createElement(l.Rc, {
                title: ne,
              }),
              t.createElement(
                "div",
                {
                  className: "p-huddle_invite_add_to_channel__subtitle",
                },
                t.createElement(P, {
                  numOfExternalMembers: L,
                  members: U,
                })
              )
            ),
            t.createElement(
              l.$m,
              null,
              t.createElement(
                l.qf,
                null,
                X &&
                  t.createElement(
                    u.Ay,
                    {
                      className: "margin_bottom_150",
                      level: u.A_.error,
                      type: u.QE.inline,
                    },
                    S.t("Oops, something went wrong. Please try again.", {
                      fallbackHash: "92c404bc05c04cc6c63491f463f0ec39688f741a",
                      fallbackHashNs: "client",
                    })
                  ),
                be.map((ke) => {
                  const ge = F.includes(ke);
                  return t.createElement(
                    "div",
                    {
                      className: "p-huddle_invite_add_to_channel__user_list",
                      key: ke,
                    },
                    t.createElement(c.Ay, {
                      id: ke,
                      useShortMode: !0,
                      showPresence: !0,
                      showStatus: !0,
                      showSubtext: !0,
                      subtext: t.createElement(
                        "small",
                        {
                          className: "sk_dark_gray",
                        },
                        pe(ge)
                      ),
                    }),
                    Me(ke, ge)
                  );
                })
              )
            ),
            t.createElement(
              l.jl,
              null,
              t.createElement(
                l.ox,
                null,
                t.createElement(
                  n.Ay,
                  {
                    onClick: ae,
                    type: "primary",
                  },
                  (ve && !Z) || !$ ? S.t("OK") : S.t("Done")
                )
              )
            )
          );
        }
        _(b, "HuddleInviteAddToChannel"),
          (b.displayName = "HuddleInviteAddToChannel");
        const K = {
            HuddleInviteAddToChannel: b,
          },
          x = (0, I.A)(b, {
            isStackable: !0,
          });
      },
      5911067953: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => Ye,
        });
        var t = e(9706240641),
          n = e(5824283093),
          s = e(6122756707),
          i = e(235108050),
          d = e(4775127335),
          o = e(6084388622),
          a = e(581167618),
          r = e(178327686),
          c = e(1563996154),
          u = e(2562405183),
          l = e(7937864072),
          m = e(2689960678),
          v = e(980293773),
          E = e(3339229351),
          T = e(5795074931),
          g = e(5332875232),
          I = e(6470070112),
          f = e(7631186994),
          y = e(735940183),
          M = e(3730613858),
          p = e(666760496),
          O = e(1407713935),
          C = e(8746998952),
          h = e(9712681361),
          D = e(4481313819),
          P = e(1224315998),
          S = e(7268021173),
          b = e(3677514771),
          K = e(6839188756),
          x = e(9548972574),
          B = e(716227588),
          U = e(1743656885),
          R = e(6259241484),
          G = e(9953252450),
          H = e(3288846409),
          F = e(9101533895),
          V = e(5286203919),
          X = e(5531259478),
          q = e(3534324375),
          oe = e(8276911661),
          z = e(7576317051),
          Ae = e(2823938397);
        function ae(at) {
          let { memberId: _t } = at;
          const pt = (0, u.d4)((ct) => (0, oe.nv)(ct, _t)),
            Qe = (0, u.d4)((ct) => (0, q.sE)(ct, pt, !1, !1));
          return (0, Ae.mX)(pt)
            ? n.createElement(z.A, {
                type: "unknown",
              })
            : (0, Ae.lv)(pt)
            ? n.createElement(z.A, {
                type: "non-existent",
              })
            : n.createElement("span", null, Qe);
        }
        _(ae, "DeprecatedHuddleName"),
          (ae.displayName = "DeprecatedHuddleName");
        const de = new y.Ay("huddles");
        function ve(at) {
          let { unknownMemberIds: _t } = at;
          const pt = (0, H.cw)(V.hc),
            Qe = (0, u.d4)((zt) => (0, F.OL)(zt, pt)),
            ct = (0, n.useMemo)(() => (pt ? _t : []), [pt, _t]);
          let Pt;
          if (ct.length === 1)
            Pt = de.rt("{name1} is not a member of {channel}.", {
              name1: n.createElement(ae, {
                memberId: ct[0],
              }),
              channel: n.createElement(X.A, {
                channel: Qe,
              }),
            });
          else if (ct.length === 2)
            Pt = de.rt("{name1} and {name2} are not a member of {channel}.", {
              name1: n.createElement(ae, {
                memberId: ct[0],
              }),
              name2: n.createElement(ae, {
                memberId: ct[1],
              }),
              channel: n.createElement(X.A, {
                channel: Qe,
              }),
            });
          else if (ct.length === 3)
            Pt = de.rt(
              "{name1}, {name2}, and {name3} are not a member of {channel}.",
              {
                name1: n.createElement(ae, {
                  memberId: ct[0],
                }),
                name2: n.createElement(ae, {
                  memberId: ct[1],
                }),
                name3: n.createElement(ae, {
                  memberId: ct[2],
                }),
                channel: n.createElement(X.A, {
                  channel: Qe,
                }),
              }
            );
          else if (ct.length > 3) {
            const [zt, an, Qt, ...tn] = ct,
              Ht = tn.map((Kt) =>
                n.createElement(ae, {
                  key: Kt,
                  memberId: Kt,
                })
              );
            Pt = de.rt(
              "{name1}, {name2}, {name3} and {numOthers} more are not a member of {channel}.",
              {
                name1: n.createElement(ae, {
                  memberId: zt,
                }),
                name2: n.createElement(ae, {
                  memberId: an,
                }),
                name3: n.createElement(ae, {
                  memberId: Qt,
                }),
                channel: n.createElement(X.A, {
                  channel: Qe,
                }),
                numOthers: ct.length - 3,
              },
              (Kt) => {
                let { text: qt } = Kt;
                return n.createElement(
                  c.Ay,
                  {
                    tip: (0, y.jd)(Ht, {
                      noEscape: !0,
                    }),
                  },
                  n.createElement("span", null, qt)
                );
              }
            );
          }
          return n.createElement("small", null, Pt);
        }
        _(ve, "HuddleInviteNotAMember"),
          (ve.displayName = "HuddleInviteNotAMember");
        const Se = ve;
        var Ee = e(5907086961),
          be = e(7396657731),
          Ce = e(9236164662),
          Z = e(9645800439),
          $ = e(6011052675),
          N = e(3109955471),
          L = e(5103024697),
          w = e(8061049427),
          k = e(1628523077),
          J = e(3214129289),
          ee = e(9163492386),
          ne = e(6007206761),
          pe = e(8170643398),
          Me = e(4562579337),
          ke = e(8040098042),
          ge = e(181849556);
        const fe = new y.Ay("huddles");
        var re;
        (function (at) {
          (at.CHANNEL = "channel"), (at.PEOPLE = "people");
        })(re || (re = {}));
        const le = _((at) => {
          let {
            isFreeTeam: _t,
            onSuggestedChannelSelected: pt,
            onSuggestedUserSelected: Qe,
            selectedChannelId: ct,
            selectedMemberIds: Pt,
          } = at;
          const zt = (0, u.d4)(T.WR),
            an = (0, u.wz)(ge.b5),
            Qt = (0, u.wz)(ge.mc),
            tn = (0, u.wz)((Ot) => {
              if (!an) return [];
              if (Pt.length) return [];
              const fn = [];
              return (
                an.forEach((ln) => {
                  if (ln.id === ct) return;
                  const it = (0, F.OL)(Ot, ln.id);
                  (0, ne.F)(it) || fn.push(ln);
                }),
                fn
              );
            }),
            Ht = (0, n.useMemo)(() => tn.map((Ot) => Ot.id), [tn]),
            Kt = (0, u.wz)((Ot) => {
              if (!Qt) return [];
              if (ct) return [];
              const fn = [];
              return (
                Qt.forEach((ln) => {
                  if (ln.id === zt || Pt.includes(ln.id)) return;
                  const it = (0, oe.nv)(Ot, ln.id);
                  (0, Me.A)(it) || (0, pe.oy)(it) || fn.push(ln);
                }),
                fn
              );
            }),
            qt = (0, n.useMemo)(() => Kt.map((Ot) => Ot.id), [Kt]),
            Tn = (0, n.useMemo)(() => {
              const ln = qt.length * 60,
                it = 32,
                Tt = Ht.length * it;
              return Math.min(Math.max(ln, Tt), 240);
            }, [Ht, qt]),
            Mt = (0, n.useCallback)(
              (Ot) => {
                if (!Ot.id) return;
                (0, ke.A)(Ot.id) ? pt(Ot.id) : Qe(Ot.id);
              },
              [pt, Qe]
            ),
            Jt = (0, n.useCallback)(
              (Ot) => {
                const fn = tn[Ot];
                if (fn)
                  return n.createElement(
                    "div",
                    {
                      className:
                        "p-huddle_start_suggestion_tabs__menu_item_button__list_entity",
                    },
                    n.createElement(k.A, {
                      channelId: fn.id,
                    })
                  );
              },
              [tn]
            ),
            dn = (0, n.useCallback)(
              () =>
                n.createElement(
                  L.A,
                  {
                    disableHeight: !0,
                  },
                  (Ot) => {
                    let { width: fn } = Ot;
                    return n.createElement(ee.A, {
                      "aria-label": fe.t("Channel"),
                      keys: Ht,
                      rowRenderer: Jt,
                      onItemClick: Mt,
                      width: fn,
                      height: Tn,
                    });
                  }
                ),
              [Mt, Jt, Ht, Tn]
            ),
            rn = (0, n.useCallback)(
              (Ot) => {
                const fn = Kt[Ot];
                if (fn)
                  return n.createElement(
                    "div",
                    {
                      className:
                        "p-huddle_start_suggestion_tabs__menu_item_button__list_entity",
                    },
                    n.createElement(w.A, {
                      id: fn.id,
                    })
                  );
              },
              [Kt]
            ),
            gn = (0, n.useCallback)(
              () =>
                n.createElement(
                  L.A,
                  {
                    disableHeight: !0,
                  },
                  (Ot) => {
                    let { width: fn } = Ot;
                    return n.createElement(ee.A, {
                      "aria-label": fe.t("People"),
                      keys: qt,
                      rowRenderer: rn,
                      onItemClick: Mt,
                      width: fn,
                      height: Tn,
                    });
                  }
                ),
              [Mt, rn, qt, Tn]
            ),
            [Zt, Vt] = (0, n.useState)(re.PEOPLE),
            Sn = (0, n.useCallback)((Ot) => {
              Vt(Ot);
            }, []);
          (0, n.useEffect)(() => {
            Zt === re.PEOPLE && ct
              ? Vt(re.CHANNEL)
              : Zt === re.CHANNEL && Pt.length && Vt(re.PEOPLE);
          }, [Zt, ct, Pt]);
          const ze = (0, n.useMemo)(() => {
            const Ot = [];
            return (
              qt.length &&
                Ot.push({
                  title: fe.t("People"),
                  id: re.PEOPLE,
                  content: gn(),
                }),
              Ht.length &&
                Ot.push({
                  title: fe.t("Channels", {
                    fallbackHash: "879f0b1bef59eeebf78cfd3a22f6f8077810cecf",
                  }),
                  id: re.CHANNEL,
                  content: dn(),
                }),
              Ot
            );
          }, [Ht, qt, dn, gn]);
          return _t
            ? null
            : n.createElement(
                "div",
                {
                  className: "p-huddle_start_suggestion_tabs",
                },
                n.createElement(J.A, {
                  fullHeight: !0,
                  tabs: ze,
                  currentTabId: Zt,
                  onTabChange: Sn,
                  tabMenuClassnames: "p-huddle_start_suggestion_tabs__tab_menu",
                })
              );
        }, "HuddleStartSuggestionTabs");
        le.displayName = "HuddleStartSuggestionTabs";
        const Re = n.memo(le);
        var ye = e(8808892924),
          Te = e(1794107122),
          De = e(5142752606);
        const Ue = new y.Ay("huddles"),
          Ke = n.memo((at) => {
            let { error: _t } = at;
            const pt = (0, u.d4)((zt) => (0, oe.nv)(zt, _t.invitedMemberId)),
              Qe = (0, u.d4)((zt) => (0, q.sE)(zt, pt));
            if (!(0, u.d4)(g.TM)) return null;
            let Pt = Ue.t("{userName} could not be invited to the Huddle.", {
              userName: Qe,
            });
            return (
              _t.inviteRejectionReason === De.g.RecipientHuddlesDisabled &&
                (Pt = Ue.t(
                  "{userName} could not be invited as Huddles is not enabled for them.",
                  {
                    userName: Qe,
                  }
                )),
              n.createElement(
                a.Ay,
                {
                  level: "error",
                },
                Pt
              )
            );
          });
        var Ze = e(3810478625),
          Q = e(5255740490),
          ie = e(1051015021),
          Ve = e(952756744);
        function xe() {
          return (
            (xe =
              Object.assign ||
              function (at) {
                for (var _t = 1; _t < arguments.length; _t++) {
                  var pt = arguments[_t];
                  for (var Qe in pt)
                    Object.prototype.hasOwnProperty.call(pt, Qe) &&
                      (at[Qe] = pt[Qe]);
                }
                return at;
              }),
            xe.apply(this, arguments)
          );
        }
        _(xe, "_extends");
        var je;
        (function (at) {
          (at.COMPOSER = "composer"),
            (at.PUBLIC_CHANNEL = "public_channel"),
            (at.PRIVATE_CHANNEL = "private_channel");
        })(je || (je = {}));
        function Fe(at) {
          let { channel: _t } = at;
          return _t
            ? _t && (0, O.Zp)(_t)
              ? je.PRIVATE_CHANNEL
              : je.PUBLIC_CHANNEL
            : je.COMPOSER;
        }
        _(Fe, "getModalContext");
        const He = new y.Ay("huddles");
        function Oe(at) {
          let {
            closeModal: _t,
            callId: pt,
            channel: Qe,
            channelSuggestion: ct,
            memberSuggestionId: Pt,
            selectedMemberIds: zt = m.Ml,
          } = at;
          const an = (0, s.wA)(),
            Qt = (0, l.A)(),
            tn = Fe({
              channel: Qe,
            }),
            Ht = tn === je.PRIVATE_CHANNEL && !(0, O.PC)(Qe),
            Kt = tn === je.COMPOSER,
            [qt, Tn] = (0, n.useState)(zt),
            [Mt, Jt] = (0, n.useState)(),
            [dn, rn] = (0, n.useState)(!1),
            [gn, Zt] = (0, n.useState)(!1),
            Vt = (0, u.d4)(g.TM),
            [Sn, ze] = (0, n.useState)(void 0),
            Ot = (0, u.d4)(T.WR),
            fn = (0, u.d4)(b.H7),
            ln = (0, K.tc)(fn),
            it = (0, u.d4)(S.iH),
            Tt = (0, u.d4)((We) =>
              (0, Te.$)(We, (Qe == null ? void 0 : Qe.id) || "")
            ),
            Ct = (0, u.d4)(g.Si),
            Rt = (0, u.d4)(x.qr),
            Yt = (0, u.d4)(Ze.g),
            Wn =
              (0, u.d4)((We) => (0, B.Hp)(We, R.xu.HUDDLE_INVITE_MODAL)) ===
              R.ze.SUPPORT_UPGRADE_DECISION_TRIAL_EXPIRING_SOON_HUDDLES_BANNER,
            hn = (0, u.Z2)((We) =>
              (0, x.ft)(We, Qe == null ? void 0 : Qe.id)
                .filter(($e) => $e.id !== Ot)
                .map(($e) => $e.id)
            ),
            Bn = (0, u.d4)(I.pl),
            Rn = (0, u.Z2)((We) =>
              Ht
                ? qt.filter(($e) => {
                    const mt = Qe && (0, M.Sv)(We, Qe.id, $e);
                    return mt && mt.isKnown && !(mt != null && mt.isMember);
                  })
                : []
            );
          (0, n.useEffect)(() => {
            ct &&
              Jt({
                id: ct.id,
                isCurrentSuggestedChannel: !0,
              });
          }, [ct]),
            (0, n.useEffect)(() => {
              Pt && Tn([Pt]);
            }, [Pt]);
          const zn = (0, n.useCallback)((We) => Tn(We), []),
            is = (0, n.useCallback)(
              (We) => {
                if (
                  We === (Mt == null ? void 0 : Mt.id) &&
                  Mt != null &&
                  Mt.isCurrentSuggestedChannel
                ) {
                  Jt({
                    id: We,
                    isCurrentSuggestedChannel: !0,
                  });
                  return;
                }
                Jt({
                  id: We,
                  isCurrentSuggestedChannel: !1,
                });
              },
              [
                Mt == null ? void 0 : Mt.id,
                Mt == null ? void 0 : Mt.isCurrentSuggestedChannel,
              ]
            ),
            ss = (0, n.useCallback)(
              (We) => {
                Tn(qt.concat(We));
              },
              [qt]
            ),
            jn = (0, n.useCallback)(() => {
              Jt({
                id: Qe == null ? void 0 : Qe.id,
                isCurrentSuggestedChannel: !0,
              });
            }, [Qe == null ? void 0 : Qe.id]),
            Yn = (0, n.useCallback)(() => {
              Mt != null &&
                Mt.id &&
                (an(
                  (0, C.A)({
                    channelId: Mt.id,
                    entryPoint: h.su.COMPOSER_HUDDLE_START,
                  })
                ),
                _t());
            }, [Mt, an, _t]),
            Qn = (0, n.useCallback)(
              (0, t.coroutine)(function* () {
                rn(!0),
                  yield an(
                    (0, f.r)({
                      memberIds: qt,
                    })
                  )
                    .then((We) => {
                      an(
                        (0, C.A)({
                          channelId: We.id,
                          entryPoint: h.su.COMPOSER_HUDDLE_START,
                        })
                      ),
                        _t(),
                        rn(!1),
                        Zt(!1);
                    })
                    .catch((We) => {
                      Qt.error(We), rn(!1);
                      const { message: $e } = We;
                      ($e == null
                        ? void 0
                        : $e.indexOf(E.O3.INVALID_USER_COMBINATION)) !== -1 &&
                        Zt(!0);
                    });
              }),
              [qt, an, Qt, _t]
            ),
            es = (0, n.useCallback)(
              (0, t.coroutine)(function* () {
                if (!Qe) return;
                rn(!0);
                let We = qt;
                (Mt == null ? void 0 : Mt.id) === Qe.id &&
                  Mt != null &&
                  Mt.isCurrentSuggestedChannel &&
                  (We = (0, i.A)([...qt, ...Tt])),
                  yield an(
                    (0, p.A)({
                      channelId: Qe.id,
                      userIds: We,
                    })
                  )
                    .then(() => {
                      rn(!1),
                        Rn && Rn.length > 0 && Ht
                          ? an(
                              (0, Ee.A)({
                                members: Rn,
                              })
                            )
                          : _t();
                    })
                    .catch(($e) => {
                      Qt.error($e), rn(!1), Vt && ze($e);
                    });
              }),
              [
                Qe,
                Tt,
                _t,
                an,
                Vt,
                Ht,
                Qt,
                Mt == null ? void 0 : Mt.id,
                Mt == null ? void 0 : Mt.isCurrentSuggestedChannel,
                qt,
                Rn,
              ]
            ),
            Et = (0, n.useMemo)(
              () => (tn === je.COMPOSER ? (Mt != null && Mt.id ? Yn : Qn) : es),
              [es, Qn, tn, Mt, Yn]
            ),
            gt = {
              [je.COMPOSER]: {
                eventId: P.EventId.HUDDLES_COMPOSER_HEADER_CLICKED,
                uiStep: P.UiStep.HUDDLE_COMPOSER_INVITES_SENT,
                elementName: "huddle_composer_dialog",
                entryPoint: "composer",
              },
              [je.PUBLIC_CHANNEL]: {
                eventId: P.EventId.HUDDLES_PUBLIC_CHANNEL_INVITE,
                elementName: "huddle_public_channel_invite",
              },
              [je.PRIVATE_CHANNEL]: {
                eventId: P.EventId.HUDDLES_PRIVATE_CHANNEL_INVITE,
                elementName: "huddle_private_channel_invite",
              },
            },
            Ft = _(
              () =>
                ln && !Ct && !Rt
                  ? n.createElement(be.A, null)
                  : Yt && !Kt
                  ? null
                  : it && !Wn
                  ? n.createElement(G.A, {
                      v2ClassName: (0, Q.A)({
                        "p-huddle_invite_modal_banner": Yt,
                      }),
                    })
                  : null,
              "maybeRenderBanner"
            );
          Ft.displayName = "maybeRenderBanner";
          const nn = gt[tn],
            Dn = (0, n.useMemo)(
              () =>
                Kt
                  ? He.t("Start a Huddle")
                  : qt.length > 1
                  ? He.t("Send Invites")
                  : He.t("Send Invite"),
              [Kt, qt]
            );
          if (!Bn) return null;
          const bt = He.t(
              "You can invite people from outside this private conversation, but they may have restricted access to messages."
            ),
            In = _(
              (We) =>
                n.createElement(
                  U.A,
                  {
                    articleId: 4402059015315,
                    ariaLabel: He.t("Learn more about Huddles"),
                    forceOpenInBrowser: !0,
                  },
                  We
                ),
              "renderLearnMoreLink"
            );
          let xn, Nt, At, te;
          const _e = _((We) => {
            const $e = We.map((mt) =>
              n.createElement(r.A, {
                key: mt,
                isBold: !1,
                id: mt,
              })
            );
            return $e && (0, y.jd)($e);
          }, "listifiedOverflowMembers");
          if (((_e.displayName = "listifiedOverflowMembers"), ln && Ct && !Rt))
            (Nt = He.t("Invite someone to your huddle")),
              (xn = Ht
                ? He.rt(
                    "You\u2019re on the free version of Slack, so only one other person can join you in a huddle. You can invite anyone until someone joins \u2014 they won\u2019t be added to {channelName}. <a>Learn more</a>",
                    {
                      channelName: n.createElement(X.A, {
                        channel: Qe,
                      }),
                      "<a>": (We) => {
                        let { text: $e } = We;
                        return In($e);
                      },
                    }
                  )
                : He.rt(
                    "You\u2019re on the free version of Slack, so only one other person can join you in a huddle. They\u2019ll receive a notification to join. <a>Learn more</a>",
                    {
                      "<a>": (We) => {
                        let { text: $e } = We;
                        return In($e);
                      },
                    }
                  ));
          else if (
            (Kt
              ? ((Nt = He.t("Start a Huddle")),
                (At = Yt
                  ? He.t(
                      "You can invite whomever you\u2019d like to the huddle, they\u2019ll receive a notification in Slack to join."
                    )
                  : He.t("Find a person or channel to huddle with")))
              : ((Nt = He.t("Invite people to your huddle")),
                (At = Ht
                  ? bt
                  : He.t(
                      "You can invite whomever you\u2019d like to the huddle, and they\u2019ll receive a notification to join."
                    ))),
            Qe != null && Qe.id && hn.length)
          ) {
            const We = He.rt(
              "{participants, plural, =0 {{firstParticipant} and <b>you</b> are} =1 {{firstParticipant}, {secondParticipant}, and <b>you</b> are} other {{firstParticipant}, {secondParticipant}, <a>and # others</a> are}} in this huddle.",
              {
                participants: hn.length - 1,
                firstParticipant: n.createElement(r.A, {
                  isBold: !0,
                  id: hn[0],
                }),
                secondParticipant: n.createElement(r.A, {
                  isBold: !0,
                  id: hn[1],
                }),
                "<a>": ($e) => {
                  let { text: mt } = $e;
                  return n.createElement(
                    c.Ay,
                    {
                      zIndex: "above_fs",
                      tip: _e(hn.slice(2)),
                    },
                    n.createElement("span", null, mt)
                  );
                },
              }
            );
            te = n.createElement(
              "div",
              {
                className:
                  "p-huddle_invite_channel_or_start__active_members_container",
              },
              n.createElement(ye.i, {
                channelId: Qe.id,
                className: "p-huddle_invite_channel_or_start__avatar_stack",
                avatarSize: d.RG.tiny,
                excludeIcon: !0,
                excludeMemberOverflowCount: !0,
                maxMembers: 3,
              }),
              n.createElement("div", null, We)
            );
          }
          const Ie = Vt && Sn !== void 0,
            Ne = "huddle-invite-description";
          return n.createElement(
            v.dW,
            {
              overlayClassName: "p-huddle_invite_modal_shared_styles__overlay",
              closeModal: _t,
              contentLabel: Nt,
              describedby: Ne,
              shouldReturnFocusAfterClose: !0,
              dataQa: "huddle_invite_channel_modal",
            },
            n.createElement(
              v.rQ,
              null,
              n.createElement(v.Rc, {
                title: Nt,
                subtitle: At,
              })
            ),
            n.createElement(
              v.$m,
              null,
              n.createElement(
                v.qf,
                null,
                te,
                xn &&
                  n.createElement(
                    "p",
                    {
                      id: Ne,
                    },
                    xn
                  ),
                n.createElement(Z.A, {
                  isFreeTeam: ln && !Rt,
                  experimentHuddlesInviteModalFreemiumImprovementsGroupOn: Ct,
                  channel: Qe,
                  otherMembersInHuddle: hn,
                  onSelectedMembersChange: zn,
                  onSelectedChannelChange: is,
                  selectedMemberIds: qt,
                  selectedChannel: Mt,
                }),
                Ht &&
                  Rn &&
                  Rn.length > 0 &&
                  n.createElement(Se, {
                    unknownMemberIds: Rn,
                  }),
                gn &&
                  n.createElement(
                    a.Ay,
                    {
                      "data-qa": "huddle-invite-invalid-user-combo-alert",
                      level: "error",
                    },
                    He.t(
                      "All external people must already be in at least one channel together to send this invitation."
                    )
                  ),
                Ie &&
                  n.createElement(Ke, {
                    error: Sn,
                  })
              ),
              Ft(),
              n.createElement(Ve.s, null),
              Rt &&
                ln &&
                !Wn &&
                n.createElement(ie.V, {
                  showProBadge: !0,
                  className: "p-huddle_invite_channel_or_start__upgrade_alert",
                }),
              pt &&
                n.createElement(N.A, {
                  activeHuddleCallId: pt,
                  channel: Qe,
                  isFreeTeam: ln && !Rt,
                  onSuggestedUserSelected: ss,
                  otherMembersInHuddle: hn,
                  selectedMemberIds: qt,
                  onChannelSelected: jn,
                  channelSuggestionOptionSelected:
                    Mt == null ? void 0 : Mt.isCurrentSuggestedChannel,
                }),
              !pt &&
                n.createElement(Re, {
                  isFreeTeam: ln && !Rt,
                  onSuggestedChannelSelected: is,
                  onSuggestedUserSelected: ss,
                  selectedChannelId: Mt == null ? void 0 : Mt.id,
                  selectedMemberIds: qt,
                })
            ),
            n.createElement(
              v.jl,
              null,
              n.createElement(
                v.ox,
                {
                  className: "p-huddle_invite_channel_or_start_footer_actions",
                },
                n.createElement($.A, {
                  channelId: Qe == null ? void 0 : Qe.id,
                }),
                n.createElement(
                  v.s_,
                  {
                    type: "outline",
                    className:
                      "p-huddle_invite_channel_or_start_footer_actions_close",
                    "aria-label": He.t("Cancel"),
                  },
                  He.t("Cancel")
                ),
                n.createElement(
                  D.A,
                  xe({}, nn, {
                    clogImpression: !0,
                  }),
                  n.createElement(
                    o.lV,
                    {
                      "data-qa": "send_invite_button",
                      loading: dn,
                      onClick: Et,
                      type: "primary",
                      disabled: !qt.length && !(Mt != null && Mt.id),
                      "aria-label": Dn,
                    },
                    Dn
                  )
                )
              )
            ),
            Ct &&
              ln &&
              !Rt &&
              n.createElement(Ce.A, {
                selectedMemberIds: qt,
              })
          );
        }
        _(Oe, "HuddleInviteChannelOrStart"),
          (Oe.displayName = "HuddleInviteChannelOrStart");
        const Ye = Oe;
      },
      6011052675: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => r,
        });
        var t = e(5824283093),
          n = e(6122756707),
          s = e(735940183),
          i = e(6084388622),
          d = e(5904726069);
        const o = new s.Ay("huddles"),
          a = _((c) => {
            let { channelId: u } = c;
            const l = (0, n.wA)(),
              m = (0, t.useCallback)(() => {
                l(
                  (0, d.r)({
                    channelId: u,
                  })
                );
              }, [l, u]);
            return u
              ? t.createElement(
                  i.Ay,
                  {
                    onClick: m,
                    type: "outline",
                    className: "p-huddle_invite_link_button__copy_link",
                  },
                  o.t("Copy Huddle Link")
                )
              : null;
          }, "HuddleInviteLinkButton");
        a.displayName = "HuddleInviteLinkButton";
        const r = a;
      },
      9236164662: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => D,
        });
        var t = e(4481313819),
          n = e(1224315998),
          s = e(2689960678),
          i = e(735940183),
          d = e(5824283093),
          o = e(2562405183),
          a = e(8739505998),
          r = e(6323355797),
          c = e(6122756707),
          u = e(1267040415),
          l = e(236241007),
          m = e(5641442783),
          v = e(3994181705),
          E = e(5332875232),
          T = e(5881236351),
          g = e(7268021173),
          I = e(1384076438),
          f = e(2607644860),
          y = e(8112788848),
          M = e(8214116048);
        const p = new i.Ay("trials_highlight_paid_features"),
          O = {
            onClick: {
              enableClogAction: !0,
            },
            elementName: "start_trial",
          },
          C = {
            elementName: "upgrade_link",
            onClick: {
              enableClogAction: !0,
            },
          },
          h = _((P) => {
            let { selectedMemberIds: S = s.Ml } = P;
            const b = (0, c.wA)(),
              K = r.ZO.PaidFeatureTrial,
              x = r.zG.Vhq,
              B = (0, o.d4)((V) => (0, g.hq)(V, K, x)),
              U = (0, o.d4)((V) => (0, g.bp)(V, K, x)),
              R = (0, o.d4)(E.Si),
              G = (0, d.useCallback)(() => {
                b((0, T.Ov)(S));
              }, [b, S]),
              H = (0, d.useCallback)(() => {
                b(
                  (0, l.A)({
                    uiComponentVariant:
                      n.UiComponentVariant.HUDDLES_INVITE_MODAL_FOOTER,
                    onSpeedbumpContinue: G,
                  })
                );
              }, [b, G]);
            if (
              ((0, d.useEffect)(() => {
                b(
                  (0, I.A)({
                    campaignType: K,
                    campaignSubType: x,
                    reason: "huddle_invite_modal",
                    context: f.y.huddleInviteModal,
                  })
                );
              }, [b, K, x]),
              !R || U)
            )
              return null;
            const F = B
              ? p.rt(
                  "To use huddles with more people, <a>start a free trial.</a>",
                  {
                    "<a>": (V) => {
                      let { text: X } = V;
                      return d.createElement(
                        a.A,
                        {
                          "data-qa": "huddle_invite_modal_footer_banner_cta",
                          onClick: H,
                          autoClogProps: O,
                        },
                        X
                      );
                    },
                  }
                )
              : p.rt(
                  "To use huddles with more people, <a>see upgrade options.</a>",
                  {
                    "<a>": (V) => {
                      let { text: X } = V;
                      return d.createElement(
                        u.A,
                        {
                          "data-qa": "huddle_invite_modal_footer_banner_cta",
                          autoClogProps: C,
                          useLink: !0,
                        },
                        X
                      );
                    },
                  }
                );
            return d.createElement(
              t.A,
              {
                eventId: n.EventId.UPGRDEXP_HIGHLIGHT_PAID_FEATURES,
                uiComponentName:
                  n.UiComponentName.HUDDLE_INVITE_MODAL_FREE_BANNER,
                clogImpression: !0,
              },
              d.createElement(
                "div",
                {
                  className: "p-huddle_invite_modal_footer_banner",
                },
                d.createElement(m.A, {
                  variant: v.G.HuddlesFreemiumDeprecated,
                  promoType: K,
                  promoSubtype: x,
                  uiComponentVariant:
                    n.UiComponentVariant.HUDDLES_INVITE_MODAL_FOOTER,
                  toolTipZIndex: y.m.AboveFullScreen,
                  toolTipPosition: M.yX.Bottom,
                }),
                d.createElement(
                  "span",
                  {
                    className: "margin_left_50",
                  },
                  F
                )
              )
            );
          }, "HuddleInviteModalFooterBanner");
        h.displayName = "HuddleInviteModalFooterBanner";
        const D = h;
      },
      7396657731: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => l,
        });
        var t = e(5824283093),
          n = e(735940183),
          s = e(1224315998),
          i = e(4481313819),
          d = e(1743656885),
          o = e(3328083357),
          a = e(5712872315);
        const r = new n.Ay("trials_highlight_paid_features"),
          c = _((m) => {
            let { text: v } = m;
            return t.createElement(
              d.A,
              {
                articleId: 4402059015315,
                ariaLabel: r.t("Learn more about Huddles"),
              },
              v
            );
          }, "AlertBannerHelpLink"),
          l = _(
            () =>
              t.createElement(
                i.A,
                {
                  eventId: s.EventId.UPGRDEXP_HIGHLIGHT_PAID_FEATURES,
                  uiComponentName:
                    s.UiComponentName.HUDDLE_INVITE_MODAL_FREE_BANNER,
                  clogImpression: !0,
                },
                t.createElement(
                  "div",
                  {
                    className: "p-huddle_invite_modal_banner",
                  },
                  t.createElement(
                    o.A,
                    {
                      theme: a.B.NONE,
                      "data-qa": "huddle_invite_modal_free_banner",
                    },
                    r.rt(
                      "You\u2019re on the free version of Slack, so only one other person can join you in a huddle. <a>Learn more</a>",
                      {
                        "<a>": c,
                      }
                    )
                  )
                )
              ),
            "HuddleInviteModalFreeBanner"
          );
      },
      9645800439: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => C,
        });
        var t = e(5824283093),
          n = e(2562405183),
          s = e(735940183),
          i = e(1628523077),
          d = e(8975305315),
          o = e(1407713935),
          a = e(3730613858),
          r = e(1289024643),
          c = e(8040098042),
          u = e(4327331459);
        const l = new s.Ay("huddles");
        var m;
        (function (h) {
          (h.CHANNEL = "channel"), (h.MEMBER = "member");
        })(m || (m = {}));
        function v(h) {
          let { id: D, entity: P, channel: S, huddleId: b } = h,
            K;
          (0, c.A)(D) ? (K = m.CHANNEL) : (0, u.A)(D) && (K = m.MEMBER);
          const x = (0, n.d4)((V) => S && (0, a.Sv)(V, S.id, D)),
            B = x && x.isKnown && (x == null ? void 0 : x.isMember),
            U = S && (0, o.JM)(S),
            R = (0, n.d4)((V) => (0, r.Ck)(V, b, D)),
            G = !!R && R === "joining_soon";
          let H = null;
          if (
            (R
              ? (H = G ? l.t("Joining soon") : l.t("Invited"))
              : S && U && !B
              ? (H = l.t("Not in conversation"))
              : S && !U && !B && (H = l.t("Not in channel")),
            !K)
          )
            return null;
          let F;
          return (
            K === m.CHANNEL
              ? (F = t.createElement(i.A, {
                  channelId: D,
                  channel: P,
                }))
              : K === m.MEMBER &&
                (F = t.createElement(d.A, {
                  id: D,
                  member: P,
                  showPresence: !0,
                  secondaryContent: H,
                })),
            t.createElement(
              "div",
              {
                className: "display_flex",
              },
              F
            )
          );
        }
        _(v, "HuddleInviteMultiSelectRenderOption"),
          (v.displayName = "HuddleInviteMultiSelectRenderOption");
        const E = (0, t.memo)(v);
        var T = e(7090824688),
          g = e(630868093),
          I = e(3288846409),
          f = e(5286203919),
          y = e(2689960678);
        function M() {
          return (
            (M =
              Object.assign ||
              function (h) {
                for (var D = 1; D < arguments.length; D++) {
                  var P = arguments[D];
                  for (var S in P)
                    Object.prototype.hasOwnProperty.call(P, S) && (h[S] = P[S]);
                }
                return h;
              }),
            M.apply(this, arguments)
          );
        }
        _(M, "_extends");
        const p = new s.Ay("huddles"),
          O = _((h) => {
            let {
              isFreeTeam: D,
              experimentHuddlesInviteModalFreemiumImprovementsGroupOn: P,
              channel: S,
              otherMembersInHuddle: b,
              onSelectedMembersChange: K,
              onSelectedChannelChange: x,
              selectedMemberIds: B = y.Ml,
              selectedChannel: U,
            } = h;
            const R = (0, I.cw)(f.E9),
              G = (0, t.useMemo)(
                () => x && !S && !D && !(B != null && B.length),
                [S, D, x, B]
              ),
              H = (0, t.useMemo)(
                () =>
                  U != null && U.id && U.isCurrentSuggestedChannel
                    ? !0
                    : !(U != null && U.id),
                [U]
              ),
              F = (0, t.useMemo)(
                () => ({
                  entities: {
                    ...(G && {
                      channels: {
                        canPost: !0,
                        includeArchived: !1,
                      },
                    }),
                    ...(H && {
                      members: {
                        includeSelf: !1,
                        includeSlackbot: !1,
                        includeBots: !1,
                      },
                      userGroups: !1,
                    }),
                  },
                  sort: {
                    frecency: !0,
                    preferChannelMembers: !0,
                    preferChannelsUserBelongsTo: !0,
                    currentChannel: S,
                  },
                  allowEmptyQuery: !0,
                  filter: (ae) => !b.includes(ae.id),
                }),
                [G, H, S, b]
              ),
              V = (0, t.useCallback)(
                (ae) => {
                  x && (0, c.A)(ae.value) ? x(ae.value) : K([ae.value]);
                },
                [x, K]
              ),
              X = (0, t.useCallback)(
                (ae) => {
                  const de = [];
                  let ve;
                  ae.forEach((Se) => {
                    (0, c.A)(Se.value)
                      ? (!ve || Se.value !== (U == null ? void 0 : U.id)) &&
                        (ve = Se.value)
                      : de.push(Se.value);
                  }),
                    x == null || x(ve),
                    K(de);
                },
                [x, K, U]
              ),
              q = (0, t.useCallback)(
                (ae) => {
                  let { value: de, entity: ve } = ae;
                  return t.createElement(E, {
                    channel: S,
                    id: de,
                    entity: ve,
                    huddleId: R,
                  });
                },
                [S, R]
              ),
              oe = (0, t.useCallback)((ae) => {
                let { value: de } = ae;
                return (0, c.A)(de)
                  ? t.createElement(i.A, {
                      channelId: de,
                    })
                  : t.createElement(d.A, {
                      id: de,
                      showAvatar: !0,
                    });
              }, []),
              z = (0, t.useMemo)(
                () => ({
                  className: "padding_top_50 padding_bottom_50",
                  searcherOptions: F,
                  renderOption: q,
                  selectId: "invite_participants",
                  size: "medium",
                  width: "100%",
                  expandOnFocus: D,
                  focusOnMount: !0,
                }),
                [F, q, D]
              ),
              Ae = (0, t.useMemo)(() => {
                const ae = B.map((de) => ({
                  value: de,
                }));
                return (
                  U != null &&
                    U.id &&
                    ae.push({
                      value: U.id,
                    }),
                  ae
                );
              }, [U, B]);
            return D && P
              ? t.createElement(
                  g.uR,
                  M({}, z, {
                    onOptionSelected: V,
                    placeholderText: p.t("Find someone to invite\u2026"),
                    renderSelectedOption: oe,
                    selectedOption: Ae[0],
                  })
                )
              : t.createElement(
                  T.h7,
                  M({}, z, {
                    onSelectedItemsChange: X,
                    selectedOptions: Ae,
                    placeholderText: p.t("Search by name"),
                  })
                );
          }, "HuddleInviteModalSelect");
        O.displayName = "HuddleInviteModalSelect";
        const C = O;
      },
      605594140: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => ne,
        });
        var t = e(5824283093),
          n = e(2562405183),
          s = e(3288846409),
          i = e(7715417323),
          d = e(2689960678),
          o = e(5363983309),
          a = e(9101533895),
          r = e(5286203919),
          c = e(6470070112),
          u = e(1407713935),
          l = e(5911067953),
          m = e(9706240641),
          v = e(4075246222),
          E = e(6122756707),
          T = e(6084388622),
          g = e(7937864072),
          I = e(3730613858),
          f = e(666760496),
          y = e(1563996154),
          M = e(178327686),
          p = e(980293773),
          O = e(9548972574),
          C = e(5795074931),
          h = e(5332875232),
          D = e(735940183),
          P = e(9884588328),
          S = e(581167618),
          b = e(3534324375),
          K = e(8276911661),
          x = e(8739505998),
          B = e(438845125);
        const U = new D.Ay("huddles");
        function R(pe) {
          let { members: Me, createNewMpim: ke } = pe;
          var ge, fe, re;
          const le = (0, n.Z2)((Te) =>
            Me.map((De) => (0, b.sE)(Te, (0, K.nv)(Te, De.slackId)))
          );
          if (!Me) return null;
          const Re = le && le.slice(3),
            ye = U.rt(
              "{unknownMembers, plural, =1 {<strong>{name1}</strong>} =2 {<strong>{name1}</strong> and <strong>{name2}</strong>} =3 {<strong>{name1}</strong>, <strong>{name2}</strong>, and <strong>{name3}</strong>} other {<strong>{name1}</strong>, <strong>{name2}</strong>, <strong>{name3}</strong> and <strong>{numOthers}</strong> more}} won\u2019t be able to see messages sent in thread because this huddle began in a direct message. You can <a>start a new huddle</a> instead.",
              {
                unknownMembers: Me.length,
                name1: t.createElement(B.A, {
                  slackId:
                    (ge = Me[0]) === null || ge === void 0
                      ? void 0
                      : ge.slackId,
                }),
                name2: t.createElement(B.A, {
                  slackId:
                    (fe = Me[1]) === null || fe === void 0
                      ? void 0
                      : fe.slackId,
                }),
                name3: t.createElement(B.A, {
                  slackId:
                    (re = Me[2]) === null || re === void 0
                      ? void 0
                      : re.slackId,
                }),
                numOthers: t.createElement(
                  y.Ay,
                  {
                    zIndex: "above_fs",
                    position: "top",
                    tip: (0, D.jd)(Re),
                  },
                  t.createElement("span", null, Me.length - 3)
                ),
              },
              (Te) => {
                let { text: De, tag: Ue } = Te;
                return Ue === "a"
                  ? t.createElement(
                      x.A,
                      {
                        onClick: ke,
                      },
                      De
                    )
                  : null;
              }
            );
          return t.createElement(
            S.Ay,
            {
              level: S.A_.info,
              type: S.QE.custom,
            },
            ye
          );
        }
        _(R, "HuddleInviteMpimAlert"),
          (R.displayName = "HuddleInviteMpimAlert");
        const G = R;
        var H = e(7268021173),
          F = e(3677514771),
          V = e(6839188756),
          X = e(4983989341),
          q = e(4481313819),
          oe = e(1224315998),
          z = e(1743656885),
          Ae = e(9953252450),
          ae = e(7396657731),
          de = e(9236164662),
          ve = e(9645800439),
          Se = e(6011052675),
          Ee = e(3109955471),
          be = e(3810478625),
          Ce = e(1051015021),
          Z = e(952756744),
          $ = e(716227588),
          N = e(6259241484);
        const L = new D.Ay("huddles"),
          w = {
            elementName: "learn_more",
            onClick: {
              enableClogAction: !0,
            },
          };
        function k(pe) {
          let {
            closeModal: Me,
            callId: ke,
            channelId: ge,
            selectedMemberIds: fe = d.Ml,
          } = pe;
          const re = (0, E.wA)(),
            le = (0, g.A)(),
            Re = (0, n.d4)(C.WR),
            ye = (0, n.d4)(c.pl),
            Te = (0, n.d4)((Mt) => (0, a.OL)(Mt, ge)),
            De = (0, n.d4)(O.qr),
            Ue = (0, n.d4)(h.Si),
            Ke = (0, n.d4)(be.g),
            Ze = (0, n.Z2)((Mt) =>
              (0, O.ft)(Mt, ge)
                .filter((Jt) => Jt.id !== Re)
                .map((Jt) => Jt.id)
            ),
            ie =
              (0, n.d4)((Mt) => (0, $.Hp)(Mt, N.xu.HUDDLE_INVITE_MODAL)) ===
              N.ze.SUPPORT_UPGRADE_DECISION_TRIAL_EXPIRING_SOON_HUDDLES_BANNER,
            [Ve, xe] = (0, t.useState)(fe),
            [je, Fe] = (0, t.useState)(!1),
            He = (0, n.Z2)((Mt) =>
              !ge || !(Ve != null && Ve.length)
                ? []
                : Ve.filter((dn) => {
                    const rn = (0, I.Sv)(Mt, ge, dn);
                    return rn && rn.isKnown && !(rn != null && rn.isMember)
                      ? dn
                      : !1;
                  })
            ),
            Oe = (0, n.d4)(F.H7),
            Ye = (0, V.tc)(Oe),
            at = (0, n.d4)(H.iH),
            _t = (0, t.useCallback)((Mt) => {
              xe(Mt);
            }, []),
            pt = (0, t.useCallback)(
              (Mt) => {
                xe(Ve.concat(Mt));
              },
              [Ve]
            ),
            Qe = (0, t.useMemo)(() => {
              const Mt = (0, P.Hd)(Te);
              return Array.isArray(Mt) ? Mt : [];
            }, [Te]),
            ct = Qe.filter((Mt) => Mt !== Re),
            Pt = (0, t.useCallback)(
              (0, m.coroutine)(function* () {
                if (!ge) return;
                let Mt = Ve.concat(Ze);
                return (
                  Qe && (Mt = (0, v.A)(Mt, Qe)),
                  re(
                    (0, X.x)({
                      channelId: ge,
                      memberIds: Mt,
                    })
                  )
                    .then(() => {
                      Me();
                    })
                    .catch((Jt) => {
                      le.error(Jt), Fe(!1);
                    })
                );
              }),
              [ge, Ve, Ze, Qe, re, Me, le]
            ),
            zt = (0, t.useCallback)(
              (0, m.coroutine)(function* () {
                if (!ge) return;
                Fe(!0);
                const Mt = Ve.concat(Ze);
                return re(
                  (0, f.A)({
                    channelId: ge,
                    userIds: Mt,
                  })
                )
                  .then(() => {
                    Me();
                  })
                  .catch((Jt) => {
                    le.error(Jt), Fe(!1);
                  });
              }),
              [ge, Me, re, le, Ze, Ve]
            ),
            an = _(
              () =>
                Ye && !Ue && !De
                  ? t.createElement(ae.A, null)
                  : at && !De && !Ke
                  ? t.createElement(Ae.A, null)
                  : null,
              "maybeRenderBanner"
            );
          an.displayName = "maybeRenderBanner";
          let Qt, tn, Ht, Kt;
          const qt = _((Mt) => {
            const Jt = Mt.map((dn) =>
              t.createElement(M.A, {
                key: dn,
                isBold: !1,
                id: dn,
              })
            );
            return Jt && (0, D.jd)(Jt);
          }, "listifiedOverflowMembers");
          (qt.displayName = "listifiedOverflowMembers"),
            Ye && Ue && !De
              ? ((Qt = L.t("Invite someone else to your huddle")),
                (Ht = L.rt(
                  "{participants, plural, =0 {<b>{firstParticipant}</b> is} =1 {<b>{firstParticipant}</b> and <b>{secondParticipant}</b> were} other {<b>{firstParticipant}</b> <a>and # others</a> were}} already invited, but {participants, plural, =0 {hasn\u2019t} =1 {haven\u2019t} other {haven\u2019t}} joined. ",
                  {
                    participants: (ct == null ? void 0 : ct.length) - 1,
                    firstParticipant: t.createElement(M.A, {
                      isBold: !1,
                      id: ct[0],
                    }),
                    secondParticipant: t.createElement(M.A, {
                      isBold: !1,
                      id: ct[1],
                    }),
                    "<a>": (Mt) => {
                      let { text: Jt } = Mt;
                      return t.createElement(
                        y.Ay,
                        {
                          zIndex: "above_fs",
                          tip: qt(ct == null ? void 0 : ct.slice(1)),
                        },
                        t.createElement("span", null, Jt)
                      );
                    },
                    "<b>": (Mt) => {
                      let { text: Jt } = Mt;
                      return t.createElement("b", null, Jt);
                    },
                  }
                )),
                (Kt = L.rt(
                  "You\u2019re on the free version of Slack, so only one other person can join you in a huddle. Invite anyone until someone joins. <a>Learn more</a>",
                  {
                    "<a>": (Mt) => {
                      let { text: Jt } = Mt;
                      return t.createElement(
                        z.A,
                        {
                          articleId: 4402059015315,
                          ariaLabel: L.t("Learn more about Huddles"),
                          forceOpenInBrowser: !0,
                          autoClogProps: w,
                        },
                        Jt
                      );
                    },
                    fallbackHash: "53e44c4bd8bcf67461de7b54ef1ec275b05f4829",
                  }
                )))
              : ((Qt = L.t("Invite people to your huddle")),
                (tn = L.t(
                  "You can invite people from outside this private conversation, but they may have restricted access to messages."
                )));
          const Tn = (0, t.useMemo)(
            () => (Ve.length > 1 ? L.t("Send Invites") : L.t("Send Invite")),
            [Ve]
          );
          return !ye || !ge
            ? null
            : t.createElement(
                p.dW,
                {
                  overlayClassName:
                    "p-huddle_invite_modal_shared_styles__overlay",
                  closeModal: Me,
                  contentLabel: Qt,
                  shouldReturnFocusAfterClose: !0,
                },
                t.createElement(
                  p.rQ,
                  null,
                  t.createElement(p.Rc, {
                    title: Qt,
                    subtitle: tn,
                  })
                ),
                t.createElement(
                  p.$m,
                  null,
                  t.createElement(
                    p.qf,
                    null,
                    (Ht || Kt) && t.createElement("p", null, Ht, Kt),
                    t.createElement(ve.A, {
                      isFreeTeam: Ye && !De,
                      experimentHuddlesInviteModalFreemiumImprovementsGroupOn:
                        Ue,
                      channel: Te,
                      otherMembersInHuddle: Ze,
                      onSelectedMembersChange: _t,
                      selectedMemberIds: Ve,
                    }),
                    (He == null ? void 0 : He.length) > 0 &&
                      t.createElement(G, {
                        members: He.map((Mt) => ({
                          slackId: Mt,
                        })),
                        createNewMpim: Pt,
                      })
                  ),
                  an(),
                  Ke && t.createElement(Z.s, null),
                  De &&
                    Ye &&
                    !ie &&
                    t.createElement(Ce.V, {
                      showProBadge: !0,
                      className:
                        "p-huddle_invite_channel_or_start__upgrade_alert",
                    }),
                  t.createElement(Ee.A, {
                    activeHuddleCallId: ke,
                    channel: Te,
                    isFreeTeam: Ye && !De,
                    onSuggestedUserSelected: pt,
                    otherMembersInHuddle: Ze,
                    selectedMemberIds: Ve,
                  })
                ),
                t.createElement(
                  p.jl,
                  null,
                  t.createElement(Se.A, {
                    channelId: ge,
                  }),
                  t.createElement(
                    p.ox,
                    null,
                    t.createElement(
                      p.s_,
                      {
                        type: "outline",
                        "aria-label": L.t("Cancel"),
                      },
                      L.t("Cancel")
                    ),
                    t.createElement(
                      q.A,
                      {
                        clogImpression: !0,
                        eventId: oe.EventId.HUDDLES_MPIM_INVITE,
                      },
                      t.createElement(
                        T.lV,
                        {
                          loading: je,
                          onClick: zt,
                          type: "primary",
                          disabled: !Ve.length,
                          "aria-label": Tn,
                        },
                        Tn
                      )
                    )
                  )
                ),
                Ue &&
                  Ye &&
                  !De &&
                  t.createElement(de.A, {
                    selectedMemberIds: Ve,
                  })
              );
        }
        _(k, "HuddleInviteMpim"), (k.displayName = "HuddleInviteMpim");
        const J = k;
        function ee(pe) {
          let { closeModal: Me = i.A, selectedMemberIds: ke = d.Ml } = pe;
          const ge = (0, n.d4)(c.pl),
            fe = (0, s.cw)(r.E9),
            re = (0, s.cw)(r.hc),
            le = (0, n.d4)((Re) => (0, a.OL)(Re, re));
          return ge
            ? (0, u.JM)(le)
              ? t.createElement(J, {
                  callId: fe,
                  channelId: re,
                  closeModal: Me,
                  selectedMemberIds: ke,
                })
              : t.createElement(l.A, {
                  callId: fe,
                  channel: le,
                  closeModal: Me,
                  selectedMemberIds: ke,
                })
            : null;
        }
        _(ee, "HuddleInviteOrStartModal"),
          (ee.displayName = "HuddleInviteOrStartModal");
        const ne = (0, o.A)(ee, {
          isStackable: !0,
        });
      },
      3109955471: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => q,
        });
        var t = e(5824283093),
          n = e(2003990933),
          s = e(7156798807),
          i = e(5103024697),
          d = e(2562405183),
          o = e(5795074931),
          a = e(3730613858),
          r = e(8276911661),
          c = e(1289024643),
          u = e(8061049427),
          l = e(3214129289),
          m = e(9163492386),
          v = e(8683010724),
          E = e(9884588328),
          T = e(1407713935),
          g = e(8798294025),
          I = e(4562579337),
          f = e(8170643398),
          y = e(863407566),
          M = e(181849556),
          p = e(735940183),
          O = e(2828836153),
          C = e(3877384923);
        const h = new p.Ay("huddles");
        var D;
        (function (oe) {
          (oe[(oe.Channel = 0)] = "Channel"), (oe[(oe.Here = 1)] = "Here");
        })(D || (D = {}));
        const P = _((oe) => {
          let { variation: z } = oe;
          const Ae = (0, t.useMemo)(() => {
            const ae =
                z === D.Channel
                  ? h.t("@channel", {
                      fallbackHash: "879f0b1bef59eeebf78cfd3a22f6f8077810cecf",
                    })
                  : h.t("@here", {
                      fallbackHash: "879f0b1bef59eeebf78cfd3a22f6f8077810cecf",
                    }),
              de =
                z === D.Channel
                  ? h.t("Invite every member in this channel", {
                      fallbackHash: "356143f00ea36746c3a9c41765b940644ca651cf",
                      fallbackHashNs: "broadcast_keywords",
                    })
                  : h.t("Invite every online member in this channel", {
                      fallbackHash: "d6f32ea27e0fd9186b386de54a63fc72a17a2075",
                      fallbackHashNs: "broadcast_keywords",
                    });
            return t.createElement(
              "div",
              {
                className: "p-huddle_invite_channel_list_entity",
              },
              t.createElement(
                "div",
                {
                  className:
                    "p-huddle_invite_channel_list_entity__icon_container",
                },
                t.createElement(v.A, {
                  name: "mentions",
                  size: "24",
                  variation: "large",
                })
              ),
              t.createElement(
                "div",
                {
                  className:
                    "p-huddle_invite_channel_list_entity_text_container",
                },
                t.createElement(
                  "span",
                  {
                    className:
                      "c-base_entity__text p-huddle_invite_channel_list_entity__title",
                  },
                  ae
                ),
                t.createElement(
                  "span",
                  {
                    className: "c-base_entity__subtext",
                  },
                  de
                )
              )
            );
          }, [z]);
          return t.createElement(
            "div",
            {
              className:
                "p-huddle_invite_suggestion_tabs__menu_item_button__list_entity",
            },
            t.createElement(O.A, {
              size: C.ny.medium,
              padding: C.FK.normal,
              primaryContent: Ae,
            })
          );
        }, "HuddleInviteChannelListEntity");
        P.displayName = "HuddleInviteChannelListEntity";
        const S = P;
        var b = e(8286248123),
          K = e(9548972574),
          x = e(2689960678),
          B = e(9680914051),
          U = e(6470070112);
        const R = new p.Ay("huddles");
        var G;
        (function (oe) {
          (oe.SUGGESTIONS = "suggestions"), (oe.INVITED = "invited");
        })(G || (G = {}));
        function H(oe, z, Ae, ae, de, ve, Se) {
          return !(
            !oe ||
            z ||
            Ae ||
            oe === ae ||
            de.includes(oe) ||
            ve.includes(oe) ||
            Se.includes(oe)
          );
        }
        _(H, "shouldSuggestMember");
        const F = "channelEntityId",
          V = "channelHereEntityId",
          X = _((oe) => {
            let {
              activeHuddleCallId: z,
              channel: Ae,
              isFreeTeam: ae,
              onSuggestedUserSelected: de,
              onChannelSelected: ve,
              onChannelHereSelected: Se,
              otherMembersInHuddle: Ee,
              selectedMemberIds: be,
              channelSuggestionOptionSelected: Ce = !1,
            } = oe;
            const Z = (0, d.d4)(o.WR),
              $ = (0, d.d4)((Oe) => (0, b.q8)(Oe, Ae == null ? void 0 : Ae.id)),
              N = (0, d.d4)(U.df),
              L = (0, n.A)($, "counts.member_count") || void 0,
              w = (0, T.JM)(Ae),
              k = (0, d.d4)(K.Sx),
              J = (0, d.d4)((Oe) => (0, c.k9)(Oe, z)),
              ee = (0, d.d4)((Oe) => (0, c.I1)(Oe, z)),
              pe = k + 1 + J + ee,
              Me = (0, d.Z2)((Oe) => (0, c.Kx)(Oe, z)),
              ke = (0, t.useMemo)(() => (Me ? Object.keys(Me) : []), [Me]),
              ge = ke.length,
              fe = 25,
              re = (0, d.Z2)((Oe) =>
                (0, y.A)(
                  Oe,
                  (Ae == null ? void 0 : Ae.id) || "",
                  fe,
                  fe,
                  !0
                ).map((at) => at.id)
              );
            let le = [];
            if ((0, T.LI)(Ae)) {
              const Oe = (0, g.e)(Ae);
              Oe && le.push(Oe);
            } else if ((0, T.yz)(Ae)) {
              const Oe = (0, E.Ug)(Ae);
              Oe && Oe.length && (le = [...Oe]);
            } else le = re;
            const Re = (0, d.wz)((Oe) => {
                if (Ce || !le || !le.length) return x.Ml;
                const Ye = [];
                return (
                  le.forEach((at) => {
                    const _t = (0, r.nv)(Oe, at);
                    H(at, (0, I.A)(_t), (0, f.oy)(_t), Z, Ee, ke, be) &&
                      Ye.push({
                        id: at,
                        isMemberOfChannel: !0,
                      });
                  }),
                  Ye
                );
              }),
              ye = (0, d.wz)(M.mc),
              Te = (0, d.wz)((Oe) => {
                if (!ye || !ye.length) return x.Ml;
                const Ye = [];
                return (
                  ye.forEach((at) => {
                    const _t = (0, r.nv)(Oe, at.id);
                    if (
                      !H(at.id, (0, I.A)(_t), (0, f.oy)(_t), Z, Ee, ke, be) ||
                      le.includes(at.id)
                    )
                      return;
                    const pt = Ae && (0, a.Sv)(Oe, Ae.id, at.id),
                      Qe = pt && pt.isKnown && pt.isMember;
                    Ye.push({
                      id: at.id,
                      isMemberOfChannel: Qe,
                    });
                  }),
                  Ye
                );
              }),
              De = (0, t.useMemo)(
                () =>
                  !ve || (0, T.PC)(Ae) ? !1 : L <= B.XG && pe + L <= N && !Ce,
                [L, Ce, pe, N, ve, Ae]
              ),
              Ue = (0, t.useMemo)(
                () =>
                  Re.length >= fe
                    ? Re.slice(0, fe)
                    : [...Re, ...Te].slice(0, fe),
                [Re, Te]
              ),
              Ke = (0, t.useMemo)(() => Ue.map((Oe) => Oe.id), [Ue]),
              Ze = (0, t.useMemo)(() => (0, s.A)(Ue, "id"), [Ue]),
              Q = (0, t.useMemo)(
                () => Math.min(60 * Math.max(ge, Ke.length), 240),
                [Ke, ge]
              ),
              ie = (0, t.useCallback)(
                (Oe, Ye) => {
                  if (Ye.key === F)
                    return t.createElement(S, {
                      variation: D.Channel,
                    });
                  if (Ye.key === V)
                    return t.createElement(S, {
                      variation: D.Here,
                    });
                  const at = Ze[Ye.key];
                  if (!at) return;
                  let _t = null;
                  return (
                    at.isMemberOfChannel === !1 &&
                      (w || (0, T.PC)(Ae)
                        ? (_t = R.t("Not in conversation"))
                        : (_t = R.t("Not in channel"))),
                    t.createElement(
                      "div",
                      {
                        className:
                          "p-huddle_invite_suggestion_tabs__menu_item_button__list_entity",
                      },
                      t.createElement(u.A, {
                        id: at.id,
                        secondaryContent: _t,
                      })
                    )
                  );
                },
                [w, Ze, Ae]
              ),
              Ve = (0, t.useCallback)(
                (Oe) => {
                  if (Oe.id) {
                    if (Oe.id === F) {
                      ve && ve();
                      return;
                    }
                    if (Oe.id === V) {
                      Se && Se();
                      return;
                    }
                    de(Oe.id);
                  }
                },
                [Se, ve, de]
              ),
              xe = (0, t.useCallback)(() => {
                let Oe = Ke;
                return (
                  De && (Oe = [F, ...Ke]),
                  t.createElement(
                    i.A,
                    {
                      disableHeight: !0,
                    },
                    (Ye) => {
                      let { width: at } = Ye;
                      return t.createElement(m.A, {
                        "aria-label": R.t("Suggested"),
                        keys: Oe,
                        rowRenderer: ie,
                        onItemClick: Ve,
                        width: at,
                        height: Q,
                      });
                    }
                  )
                );
              }, [De, ie, Ke, Ve, Q]),
              je = (0, t.useCallback)(
                (Oe) => {
                  const Ye = ke[Oe],
                    at = Me == null ? void 0 : Me[Ye];
                  if (!at) return null;
                  const _t = at === "joining_soon",
                    pt = t.createElement(
                      "div",
                      {
                        className:
                          "p-huddle_invite_suggestion_tabs__menu_item__pending_status_container",
                      },
                      t.createElement(v.A, {
                        name: _t ? "clock" : "paper-plane",
                        size: "20",
                      }),
                      t.createElement(
                        "span",
                        null,
                        _t ? R.t("Joining soon") : R.t("Invited")
                      )
                    );
                  return t.createElement(
                    "div",
                    {
                      className:
                        "p-huddle_invite_suggestion_tabs__menu_item__list_entity",
                    },
                    t.createElement(u.A, {
                      id: Ye,
                      secondaryContent: pt,
                    })
                  );
                },
                [ke, Me]
              ),
              Fe = (0, t.useCallback)(
                () =>
                  t.createElement(
                    i.A,
                    {
                      disableHeight: !0,
                    },
                    (Oe) => {
                      let { width: Ye } = Oe;
                      return t.createElement(m.A, {
                        "aria-label": R.t("Invited"),
                        keys: ke,
                        rowRenderer: je,
                        width: Ye,
                        height: Q,
                      });
                    }
                  ),
                [ke, je, Q]
              ),
              He = (0, t.useMemo)(() => {
                const Oe = [];
                return (
                  Ke.length &&
                    Oe.push({
                      title: R.t("Suggested"),
                      id: G.SUGGESTIONS,
                      content: xe(),
                    }),
                  Oe.push({
                    title: R.t("Invited"),
                    id: G.INVITED,
                    titleCount: ge,
                    content: Fe(),
                  }),
                  Oe
                );
              }, [Ke, ge, Fe, xe]);
            return !z || ae
              ? null
              : t.createElement(
                  "div",
                  {
                    className: "p-huddle_invite_suggestion_tabs",
                  },
                  t.createElement(l.A, {
                    fullHeight: !0,
                    tabs: He,
                    tabMenuClassnames:
                      "p-huddle_invite_suggestion_tabs__tab_menu",
                  })
                );
          }, "HuddleInviteSuggestionTabs");
        X.displayName = "HuddleInviteSuggestionTabs";
        const q = t.memo(X);
      },
      1328191530: (W, A, e) => {
        "use strict";
        e.d(A, {
          s: () => w,
          _: () => k,
        });
        var t = e(5824283093),
          n = e(825587348),
          s = e(5363983309),
          i = e(1593595278),
          d = e(8801078943),
          o = e(9948866681),
          a = e(1535211300),
          r = e.n(a);
        const c = t.memo(() =>
          t.createElement(
            "div",
            {
              className: r().container,
            },
            t.createElement(i.A, {
              className: r().device,
              audioMeterLayout: i.Y.Inline,
              selectSize: "medium",
            }),
            t.createElement(o.A, {
              className: r().device,
              selectSize: "medium",
              showTestSpeaker: !0,
            }),
            t.createElement(d.A, {
              className: r().device,
              selectSize: "medium",
            })
          )
        );
        var u = e(5011231008),
          l = e(4745917661),
          m = e(1638377365),
          v = e(2312625946),
          E = e(735940183),
          T = e(7280065019),
          g = e(6084388622),
          I = e(2688127376),
          f = e.n(I);
        const y = new E.Ay("huddles"),
          M = t.memo((J) => {
            let {
              turnOffCameraHandler: ee,
              turnOnCameraHandler: ne,
              cameraIsOn: pe,
            } = J;
            const Me = !0,
              { videoLabel: ke, deviceLabel: ge } = (0, m.z)(),
              fe = (0, t.useCallback)(() => {
                if (pe) {
                  ee == null || ee();
                  return;
                }
                ne == null || ne();
              }, [ee, ne, pe]),
              re = t.createElement(l.A, {
                actionLabel: ke,
                deviceLabel: ge,
                audioOnlyModeEnabledWarning: !1,
              });
            return t.createElement(
              "div",
              {
                className: f().container,
              },
              t.createElement(u.A, {
                className: f().toolbarButton,
              }),
              Me &&
                t.createElement(
                  v.Ay,
                  {
                    tip: re,
                  },
                  t.createElement(
                    g.Nm,
                    {
                      htmlType: "button",
                      onClick: fe,
                      role: "switch",
                      "aria-label": y.t("Video"),
                      "aria-checked": pe,
                      "data-qa": "huddle_camera_huddle_toolbar",
                      className: f().toolbarButton,
                    },
                    t.createElement(T.A, {
                      isCameraEnabled: pe,
                      className: "p-huddle_toolbar__video_button",
                    })
                  )
                )
            );
          });
        var p = e(8419239240),
          O = e(9632269965),
          C = e.n(O);
        const h = t.memo((J) => {
          let { channelId: ee } = J;
          const ne = (0, p.I)({
            channelId: ee,
          });
          return t.createElement(
            "div",
            {
              className: C().container,
            },
            ne
          );
        });
        var D = e(6533394955),
          P = e(2562405183),
          S = e(9365970888),
          b = e(700984029),
          K = e(462591818),
          x = e(6122756707),
          B = e(8088586193),
          U = e(8736071954),
          R = e(4775127335),
          G = e(5795074931),
          H = e(387328355),
          F = e(6251210828),
          V = e(7434063642),
          X = e(9295473340),
          q = e.n(X);
        const oe = 320,
          z = t.memo((J) => {
            let { channelId: ee } = J;
            const ne = (0, x.wA)(),
              pe = (0, t.useRef)(null),
              Me = (0, P.d4)((Qe) =>
                (0, F.gW)(Qe, {
                  channelId: ee,
                })
              ),
              ke = (0, P.d4)((Qe) =>
                (0, F.zK)(Qe, {
                  channelId: ee,
                })
              ),
              ge = (0, P.Z2)(S.oG),
              fe = (0, P.d4)(G.WR),
              re = (0, P.d4)((Qe) => !!(0, H.WQ)(Qe, "isMicrophoneEnabled")),
              le = (0, t.useMemo)(
                () =>
                  ge.camera
                    .filter((Qe) => !!Qe.id)
                    .map((Qe) => ({
                      label: Qe.label,
                      value: Qe.id,
                    })),
                [ge.camera]
              ),
              Re = (0, t.useMemo)(
                () =>
                  ge.microphone
                    .filter((Qe) => !!Qe.id)
                    .map((Qe) => ({
                      label: Qe.label,
                      value: Qe.id,
                    })),
                [ge.microphone]
              ),
              [ye, Te] = (0, t.useState)(!1),
              [De, Ue] = (0, t.useState)(!1),
              [Ke, Ze] = (0, t.useState)(!0),
              [Q, ie] = (0, t.useState)(
                le != null && le.length ? le[0] : void 0
              ),
              [Ve, xe] = (0, t.useState)(
                Re != null && Re.length ? Re[0] : void 0
              ),
              { turnOffCameraPreview: je, previewCameraIsOn: Fe } = (0, B.A)({
                videoRef: pe,
                preferredCameraId: Q == null ? void 0 : Q.value,
                isVideoElementReady: De,
                startOnMount: !1,
              });
            (0, t.useEffect)(
              () => () => {
                je();
              },
              [je]
            );
            const He = (0, t.useCallback)(() => {
                je(), Ke && (Ue(!1), Ze(!1));
              }, [Ke, je]),
              Oe = (0, t.useCallback)(() => {
                Ke || (Ue(!1), Ze(!0));
              }, [Ke]),
              Ye = (0, t.useCallback)(
                (Qe) => {
                  if (
                    (Qe == null ? void 0 : Qe.value) ===
                    (Q == null ? void 0 : Q.value)
                  )
                    return;
                  const ct = Ke;
                  He(), ie(Qe), ct && (Ze(!0), Oe());
                },
                [Q == null ? void 0 : Q.value, Ke, He, Oe]
              );
            (0, t.useEffect)(() => {
              if (le.length > 0) {
                const Qe = le[0];
                (Qe == null ? void 0 : Qe.value) !==
                  (Q == null ? void 0 : Q.value) && Ye(Qe);
              }
            }, [le, Q, Ye]),
              (0, t.useEffect)(() => {
                if (Re.length > 0) {
                  const Qe = Re[0];
                  (Qe == null ? void 0 : Qe.value) !==
                    (Ve == null ? void 0 : Ve.value) && xe(Qe);
                }
              }, [le, Re, Q, Ve == null ? void 0 : Ve.value, Ye]),
              (0, t.useEffect)(() => {
                (0, D.dispatchForClientStore)(
                  (0, b.e$)({
                    mediaResourceType: K.mT.CAMERA,
                  })
                ).then((Qe) => {
                  Qe &&
                    (Qe.status === U.eJ.Denied ||
                      (Qe.status, U.eJ.NotDetermined));
                });
              }, [ne]);
            const at = (0, t.useCallback)(
              (Qe) => {
                Qe != null && Qe.value && ie(Qe);
              },
              [ie]
            );
            (0, t.useEffect)(() => {
              le.length !== 0 && ye && (at(le[0]), Te(!1));
            }, [le, ye, at]);
            const _t = (0, t.useCallback)(
                (Qe) => {
                  pe.current !== Qe &&
                    (!Qe && De && pe !== void 0 && Fe && je(),
                    !(!Qe && !De) && ((pe.current = Qe), Ue(!0)));
                },
                [De, je, Fe]
              ),
              pt = (0, t.useMemo)(
                () =>
                  Fe || Ke
                    ? t.createElement("video", {
                        className: q().videoPreview,
                        ref: _t,
                      })
                    : t.createElement(R.Ay, {
                        size: oe,
                        userId: fe,
                        isInteractive: !1,
                      }),
                [fe, _t, Fe, Ke]
              );
            return (
              (0, t.useEffect)(() => {
                (Fe !== Me || ke !== re) &&
                  ne(
                    (0, V.fP)({
                      channelId: ee,
                      cameraEnabled: Fe,
                      microphoneEnabled: re,
                    })
                  );
              }, [ne, Fe, ee, re, Me, ke]),
              t.createElement(
                "div",
                null,
                t.createElement(h, {
                  channelId: ee,
                }),
                t.createElement(
                  "div",
                  {
                    className: q().videoAndDevicesContainer,
                  },
                  t.createElement(
                    "div",
                    {
                      className: q().videoContainer,
                    },
                    t.createElement(
                      "div",
                      {
                        className: q().videoInnerContainer,
                      },
                      pt
                    ),
                    t.createElement(M, {
                      turnOffCameraHandler: He,
                      turnOnCameraHandler: Oe,
                      cameraIsOn: Fe,
                    })
                  ),
                  t.createElement(c, null)
                )
              )
            );
          });
        var Ae = e(5332875232),
          ae = e(1973246490),
          de = e(2164739987),
          ve = e(9101533895),
          Se = e(9884588328);
        const Ee = new E.Ay("huddles");
        function be(J) {
          let { channelId: ee, isHost: ne } = J;
          const pe = (0, P.d4)((le) => (0, ve.OL)(le, ee)),
            { memberCount: Me } = (0, ae.W)({
              channelId: ee,
            }),
            ke = Me > 0,
            ge = (0, de.f)(pe),
            fe = (0, P.d4)((le) =>
              (0, Se.SB)(le, pe, {
                publicChannelIncludeHashSign: !1,
                imIncludeAtSign: !1,
              })
            );
          return (0, t.useMemo)(
            () =>
              ne
                ? ge && !ke
                  ? Ee.t("Ready to start {displayName}?", {
                      displayName: (0, E.nr)(fe),
                    })
                  : !ge && !ke
                  ? Ee.t("Ready to start the huddle?", {
                      displayName: fe,
                    })
                  : ge
                  ? Ee.t("Ready to join {displayName}?", {
                      displayName: (0, E.nr)(fe),
                    })
                  : Ee.t("Ready to join the huddle?", {
                      displayName: (0, E.nr)(fe),
                    })
                : ge
                ? Ee.t("Ready to join {displayName}?", {
                    displayName: (0, E.nr)(fe),
                  })
                : Ee.t("Ready to join the huddle?", {
                    displayName: (0, E.nr)(fe),
                  }),
            [ne, ge, fe, ke]
          );
        }
        _(be, "useGetHuddleJoinPreviewTitle");
        var Ce = e(4250409994),
          Z = e(1407713935),
          $ = e(2458754542),
          N = e.n($);
        const L = new E.Ay("huddles"),
          w = t.memo((J) => {
            let { channelId: ee, closeModal: ne, handleJoin: pe } = J;
            const Me = (0, P.d4)(G.WR),
              ke = (0, P.d4)((Ue) => (0, ve.OL)(Ue, ee)),
              ge = (0, Z.PC)(ke),
              fe = (0, P.d4)((Ue) =>
                (0, F.Ln)(Ue, {
                  channelId: ee,
                })
              ),
              re = (0, P.d4)(Ae.Rk),
              le = ge || fe;
            let Re = !0;
            le && (Re = (0, Se.Wb)(ke) === Me);
            const ye = be({
                isHost: Re,
                channelId: ee,
              }),
              Te = (0, t.useCallback)(() => {
                ne == null || ne();
              }, [ne]),
              De = (0, t.useCallback)(() => {
                (0, D.dispatchForClientStore)(
                  (0, Ce._o)({
                    channelId: ee,
                  })
                ),
                  pe == null || pe(),
                  ne == null || ne();
              }, [ne, pe, ee]);
            return re
              ? t.createElement(
                  n.A,
                  {
                    onClose: Te,
                    title: ye,
                    onSubmit: De,
                    onCancel: Te,
                    showCancelButton: !0,
                    submitButtonText: L.t("Join huddle"),
                    className: N().modal,
                  },
                  t.createElement(z, {
                    channelId: ee,
                  })
                )
              : null;
          }),
          k = (0, s.A)(w);
      },
      4869203191: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => f,
          Gr: () => I,
          Lv: () => l,
          jc: () => T,
          z2: () => g,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(735940183),
          i = e(2778217221),
          d = e(8664881451),
          o = e(2854284421),
          a = e(2047021170),
          r = e(5203103513),
          c = e(6673728906);
        const u = new s.Ay("huddles"),
          l = "LOUNGE_MUSIC_PLAYER",
          m = [o.N3, o._4, o.j1, o._V, o.PM, o.tn, o.uu, o.jc];
        var v;
        (function (y) {
          (y.WaitingRoom = "waiting"),
            (y.Subway = "subway"),
            (y.Whistle = "whistle"),
            (y.Jazz = "jazz"),
            (y.Focus = "focus"),
            (y.DiscoParty = "disco"),
            (y.Zen = "zen"),
            (y.Nature = "nature");
        })(v || (v = {}));
        const E = v.Jazz,
          T = _(
            (y) => (y ? !!Object.values(v).includes(y) : !1),
            "isValidSongKey"
          ),
          g = _((y) => (0, a.ty)(y, r.Mz) || E, "getSongKeyFromUserPref"),
          I = _(
            () => ({
              [v.WaitingRoom]: {
                key: v.WaitingRoom,
                urlName: "waitingRoom",
                url: o.tn,
                displayName: u.t("Waiting Room"),
              },
              [v.Subway]: {
                key: v.Subway,
                urlName: "subwayMusic",
                url: o.PM,
                displayName: u.t("Subway Music"),
              },
              [v.Whistle]: {
                key: v.Whistle,
                urlName: "whistleTune",
                url: o.jc,
                displayName: u.t("Whistle Tune"),
              },
              [v.Jazz]: {
                key: v.Jazz,
                urlName: "waitingMuzak",
                url: o.uu,
                displayName: u.t("Smooth Jazz"),
              },
              [v.Focus]: {
                key: v.Focus,
                urlName: "focusBeats",
                url: o._4,
                displayName: u.t("Focus Beats"),
              },
              [v.DiscoParty]: {
                key: v.DiscoParty,
                urlName: "discoParty",
                url: o.N3,
                displayName: u.t("Happy Bass"),
              },
              [v.Zen]: {
                key: v.Zen,
                urlName: "momentOfZen",
                url: o.j1,
                displayName: u.t("Sound Bath"),
              },
              [v.Nature]: {
                key: v.Nature,
                urlName: "natureMeditation",
                url: o._V,
                displayName: u.t("Nature Meditation"),
              },
            }),
            "getSongsMetadata"
          );
        let f = _(
          class Mo {
            static getInstance() {
              return Mo.instance || (Mo.instance = new Mo()), Mo.instance;
            }
            constructor() {
              this.getCurrentTrackDisplayName = () => {
                const p = m[this.activeTrackIndex],
                  O = I(),
                  C = Object.values(O).find((h) => h.url === p);
                return C == null ? void 0 : C.displayName;
              };
              var M = this;
              (this.playMusic = (0, t.coroutine)(function* () {
                let {
                  songKey: p,
                  registerOnEndedCallback: O,
                  logger: C,
                  fromFirstTrack: h,
                  loopSong: D,
                } = arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : {
                      registerOnEndedCallback: !1,
                      fromFirstTrack: !0,
                      loopSong: !1,
                    };
                h && (M.activeTrackIndex = 0),
                  O &&
                    m.forEach((x) => {
                      (0, d.TQ)(x, {
                        ended: M.playNextTrack,
                      });
                    });
                let P = m[M.activeTrackIndex];
                const S = (0, d.Dd)(P);
                if (p) {
                  var b;
                  S && (0, d.ds)(P);
                  const B =
                      (b = I()[p]) === null || b === void 0 ? void 0 : b.url,
                    U = B ? m.findIndex((R) => R === B) : -1;
                  U > -1 && ((P = B), (M.activeTrackIndex = U));
                }
                const K = (0, c._o)();
                if (K && S)
                  try {
                    yield S.setSinkId(K),
                      C == null ||
                        C.info(
                          i.o7,
                          `setSinkId success for lounge music on deviceID: ${K}`
                        );
                  } catch {
                    C == null ||
                      C.info(
                        i.o7,
                        `setSinkId failed for lounge music on deviceID: ${K}`
                      );
                  }
                (0, d.ZH)(P, {
                  loop: !!D,
                });
              })),
                (this.stopMusic = (p) => {
                  let { clearOnEndedCallback: O, logger: C, logContext: h } = p;
                  O &&
                    m.forEach((D) => {
                      (0, d.Rj)(D, "ended", this.playNextTrack);
                    }),
                    (0, d.ds)(m[this.activeTrackIndex], {
                      logFailure: !1,
                    }),
                    C.info(i.o7, `stopped lounge music [${h}]`);
                }),
                (this.incrementActiveTrackIndex = () => {
                  this.activeTrackIndex < m.length - 1
                    ? (this.activeTrackIndex += 1)
                    : (this.activeTrackIndex = 0);
                }),
                (this.playNextTrack = () => {
                  (0, d.ds)(m[this.activeTrackIndex]),
                    this.incrementActiveTrackIndex(),
                    (0, d.ZH)(m[this.activeTrackIndex], {
                      loop: !1,
                    });
                }),
                (this.activeTrackIndex = 0);
            }
          },
          "HuddleLoungeMusicManager"
        );
      },
      8419239240: (W, A, e) => {
        "use strict";
        e.d(A, {
          I: () => d,
        });
        var t = e(5824283093),
          n = e(1973246490),
          s = e(735940183);
        const i = new s.Ay("huddles");
        function d(o) {
          let { channelId: a } = o;
          const {
            firstMemberName: r,
            secondMemberName: c,
            memberCount: u,
          } = (0, n.W)({
            channelId: a,
          });
          return (0, t.useMemo)(
            () =>
              u === 0
                ? i.t("No one is in the huddle yet.", {
                    fallbackHash: "84a5772a945fb7be09c48235d3fbb096591da4c6",
                  })
                : u === 1
                ? i.rt("{firstMemberName} is currently in the huddle.", {
                    firstMemberName: r,
                  })
                : u === 2
                ? i.rt(
                    "{firstMemberName} and {secondMemberName} are currently in the huddle.",
                    {
                      firstMemberName: r,
                      secondMemberName: c,
                    }
                  )
                : i.rt(
                    "{firstMemberName}, {secondMemberName}, and {memberCount, plural, =0 {} =1 {1 other} other {# others}} are currently in the huddle.",
                    {
                      fallbackHash: "e851e92374eb17ce86e7497a3ce9a691b8515b61",
                      firstMemberName: r,
                      secondMemberName: c,
                      memberCount: u - 2,
                    }
                  ),
            [r, c, u]
          );
        }
        _(d, "useGetCopyForMembersInHuddle");
      },
      1973246490: (W, A, e) => {
        "use strict";
        e.d(A, {
          W: () => i,
        });
        var t = e(2562405183),
          n = e(9548972574),
          s = e(3534324375);
        function i(d) {
          let { channelId: o } = d;
          const a = (0, t.d4)((l) => (0, n.ft)(l, o)),
            r = a ? a.length : 0,
            c = (0, t.d4)((l) =>
              !a || a.length < 1 ? null : (0, s.sE)(l, a[0])
            ),
            u = (0, t.d4)((l) =>
              !a || a.length < 2 ? null : (0, s.sE)(l, a[1])
            );
          return {
            firstMemberName: c,
            secondMemberName: u,
            memberCount: r,
          };
        }
        _(i, "useGetMembersInHuddle");
      },
      2164739987: (W, A, e) => {
        "use strict";
        e.d(A, {
          f: () => t,
        });
        function t(n) {
          var s, i;
          return !(
            ((s = n.topic) === null || s === void 0 ? void 0 : s.value) ===
              "" ||
            (n == null || (i = n.topic) === null || i === void 0
              ? void 0
              : i.value) === void 0
          );
        }
        _(t, "huddleChannelHasTopic");
      },
      5011231008: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => p,
        });
        var t = e(5824283093),
          n = e(6122756707),
          s = e(5255740490),
          i = e(2562405183),
          d = e(387328355),
          o = e(1224315998),
          a = e(735940183),
          r = e(1563996154),
          c = e(9194155027),
          u = e(440635146),
          l = e(6084388622),
          m = e(1049642794),
          v = e(5043394918),
          E = e(6251210828),
          T = e(4745917661),
          g = e(5169680368),
          I = e(7723800688);
        const f = new a.Ay("huddles"),
          y = [u.tc.CmdOrCtrl, "Shift"],
          M = _((O) => {
            let { className: C } = O;
            const h = (0, n.wA)(),
              D = (0, i.d4)((H) => !!(0, d.WQ)(H, "isMicrophoneEnabled")),
              P = (0, I.Ay)(),
              S = (0, i.d4)((H) =>
                (0, E.U7)(H, {
                  key: I.Hi.CANVAS_OPEN,
                })
              ),
              { microphoneLabel: b, deviceLabel: K } = (0, g.k)(),
              x = (0, t.useCallback)(() => {
                h((0, m.A)(!D));
              }, [h, D]),
              B = (0, t.useMemo)(
                () => ({
                  elementName: I.Hi.CANVAS_TOOLBAR,
                  eventId: D
                    ? o.EventId.HUDDLES_MUTE
                    : o.EventId.HUDDLES_UNMUTE,
                  onClick: {
                    enableClogAction: !0,
                  },
                  interactionId: S,
                  ...P,
                }),
                [P, S, D]
              ),
              U = t.createElement(
                l.Nm,
                {
                  className: (0, s.A)(
                    "c-icon_button",
                    "c-icon_button--size_medium",
                    "p-huddle_toolbar__button",
                    C,
                    {
                      "p-huddle_toolbar__button--toggled_on": D,
                    }
                  ),
                  htmlType: "button",
                  onClick: x,
                  autoClogProps: B,
                  role: "switch",
                  "aria-label": f.t("Microphone"),
                  "aria-checked": D,
                  "data-qa": "huddle_video_modal_footer",
                  tabIndex: -1,
                },
                t.createElement(v.A, {
                  className: "p-huddle_toolbar__mic_volume_indicator",
                  peerId: "self",
                  isMicrophoneEnabled: D,
                  allowMuteIconAnimation: !0,
                })
              ),
              R = t.createElement(T.A, {
                actionLabel: b,
                deviceLabel: K,
              });
            return t.createElement(
              r.Ay,
              {
                tip: t.createElement(c.A, {
                  title: R,
                  mainKey: "Space",
                  modifiers: y,
                }),
              },
              U
            );
          }, "HuddleToolbarMuteButton");
        M.displayName = "HuddleToolbarMuteButton";
        const p = t.memo(M);
      },
      3674485380: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => m,
        });
        var t = e(5824283093),
          n = e(735940183),
          s = e(8736071954),
          i = e(9365970888),
          d = e(5536692738),
          o = e(6673728906),
          a = e(2562405183);
        const r = new n.Ay("huddles"),
          c = 390,
          u = 278,
          l = _((v) => {
            let { deviceType: E, isBlocked: T, widthStyle: g, size: I } = v;
            const f = (0, t.useMemo)(
                () => ({
                  [s.lW.Microphone]: r.t("Microphone devices"),
                  [s.lW.Camera]: r.t("Camera devices"),
                  [s.Q4]: r.t("Audio output devices"),
                }),
                []
              ),
              p = (0, a.d4)(i.oG)[E].map((P) => ({
                label:
                  T || !P.label ? r.t("Permission not yet granted") : P.label,
                value: P.id,
                type: E,
              })),
              O = (0, t.useCallback)(
                (P) => {
                  (0, o.cT)(P.value, E);
                },
                [E]
              );
            if (!f) return null;
            const C = p[0],
              h = f[E];
            let D;
            switch (g) {
              case "inline":
                D = `${c}px`;
                break;
              case "default":
                D = `${u}px`;
                break;
              case "stretch":
                D = "100%";
                break;
              default:
                throw new Error(`unhandled type ${g}`);
            }
            return t.createElement(d.Ay, {
              ariaLabel: h,
              selectId: E,
              options: p,
              selectedOption: C,
              width: D,
              onOptionSelected: O,
              className: "p-huddle_troubleshooting_panel__device-selector",
              size: I,
            });
          }, "DeviceSelector");
        l.displayName = "DeviceSelector";
        const m = l;
      },
      8801078943: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => c,
        });
        var t = e(5824283093),
          n = e(2465464861),
          s = e(3674485380),
          i = e(735940183),
          d = e(2562405183),
          o = e(8736071954);
        const a = new i.Ay("huddles"),
          r = _((u) => {
            let { className: l, selectSize: m = "small" } = u;
            const { isCameraBlocked: v } = (0, d.Z2)(n.FP) || {};
            return t.createElement(
              "div",
              {
                className: l,
              },
              t.createElement(
                "div",
                {
                  className: "audio-section",
                },
                t.createElement(
                  "span",
                  {
                    className: "p-device-label",
                  },
                  a.t("Camera")
                )
              ),
              t.createElement(s.A, {
                deviceType: o.lW.Camera,
                isBlocked: v,
                widthStyle: "stretch",
                size: m,
              })
            );
          }, "Camera");
        r.displayName = "Camera";
        const c = r;
      },
      1593595278: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => E,
          Y: () => m,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(2465464861),
          i = e(3674485380),
          d = e(735940183),
          o = e(2562405183),
          a = e(8736071954),
          r = e(1337358413),
          c = e(5671227444),
          u = e.n(c);
        const l = new d.Ay("huddles");
        var m;
        (function (T) {
          (T[(T.Default = 0)] = "Default"),
            (T[(T.Inline = 1)] = "Inline"),
            (T[(T.Hidden = 2)] = "Hidden");
        })(m || (m = {}));
        const v = _((T) => {
          let {
            className: g,
            audioMeterLayout: I = m.Default,
            selectSize: f = "small",
          } = T;
          const { isMicrophoneBluetooth: y } = (0, o.Z2)(s.h) || {},
            { isMicrophoneBlocked: M } = (0, o.Z2)(s.FP) || {},
            p = I === m.Default || I === m.Inline;
          return t.createElement(
            "div",
            {
              className: g,
            },
            t.createElement(
              "div",
              {
                className: (0, n.A)("audio-section", {
                  [u().inlineAudioMeterContainer]: I === m.Inline,
                }),
              },
              t.createElement(
                "span",
                {
                  className: "p-device-label",
                },
                l.t("Microphone")
              ),
              p &&
                t.createElement(r.Ay, {
                  initNumBubbles: 9,
                  containerClassName: (0, n.A)("p-audio-levels-container", {
                    [u().inlineAudioMeter]: I === m.Inline,
                  }),
                  bubbleClassname: "p-audio-bubble",
                  ariaLabel: l.t("Input Level"),
                })
            ),
            t.createElement(i.A, {
              deviceType: a.lW.Microphone,
              isBlocked: M,
              widthStyle: "stretch",
              size: f,
            }),
            y &&
              t.createElement(
                "div",
                {
                  className: "bluetooth-warning",
                },
                l.t("Bluetooth can degrade audio quality")
              )
          );
        }, "Microphone");
        v.displayName = "Microphone";
        const E = v;
      },
      9948866681: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => E,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(5824283093),
          i = e(2465464861),
          d = e(3674485380),
          o = e(735940183),
          a = e(2562405183),
          r = e(8736071954),
          c = e(2854284421),
          u = e(6673728906),
          l = e(8739505998);
        const m = new o.Ay("huddles"),
          v = _((T) => {
            let {
              className: g,
              selectSize: I = "small",
              showTestSpeaker: f = !1,
            } = T;
            const { isSpeakerBluetooth: y } = (0, a.Z2)(i.h) || {},
              M = (0, s.useRef)(null),
              p = (0, s.useCallback)(
                (0, t.coroutine)(function* () {
                  if (M.current) {
                    const O = (0, u._o)();
                    yield M.current.setSinkId(O), M.current.play();
                  }
                }),
                []
              );
            return (
              (0, s.useEffect)(
                () => (
                  (M.current = new Audio(c.pW)),
                  () => {
                    M.current && (M.current = null);
                  }
                ),
                []
              ),
              s.createElement(
                "div",
                {
                  className: g,
                },
                s.createElement(
                  "div",
                  {
                    className: "audio-section",
                  },
                  s.createElement(
                    "span",
                    {
                      className: "p-device-label",
                    },
                    m.t("Speakers")
                  ),
                  f &&
                    s.createElement(
                      l.A,
                      {
                        onClick: p,
                      },
                      m.t("Test Speaker", {
                        fallbackHash:
                          "d890e6d8efa58744e75a0a5e0017242b538d3aa2",
                        fallbackHashNs: "huddles_audio_video_prefs",
                      })
                    )
                ),
                s.createElement(d.A, {
                  deviceType: r.Q4,
                  widthStyle: "stretch",
                  size: I,
                }),
                y &&
                  s.createElement(
                    "div",
                    {
                      className: "bluetooth-warning",
                    },
                    m.t("Bluetooth can degrade audio quality")
                  )
              )
            );
          }, "Speaker");
        v.displayName = "Speaker";
        const E = v;
      },
      124213367: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => v,
        });
        var t = e(5824283093),
          n = e(9391594207),
          s = e(3297051565),
          i = e.n(s),
          d = e(4979382452),
          o = e(4636370173),
          a = e(2465132699),
          r = e(6308822),
          c = e(9003400431);
        const u = {
            className: i().string,
            closeModal: i().func.isRequired,
          },
          l = {
            className: void 0,
          };
        function m(E) {
          return t.createElement(
            d.A,
            {
              className: E.className,
              closeModal: E.closeModal,
            },
            t.createElement(
              o.A,
              null,
              t.createElement(
                a.A,
                null,
                t.createElement(
                  "div",
                  {
                    className: "c-lazy_modal",
                  },
                  t.createElement(r.A, null)
                )
              )
            )
          );
        }
        _(m, "LoadingModal"),
          (m.displayName = "LoadingModal"),
          (m.propTypes = u),
          (m.defaultProps = l);
        const v = (0, n.N)(null, (E) => ({
          closeModal: function () {
            for (var T = arguments.length, g = new Array(T), I = 0; I < T; I++)
              g[I] = arguments[I];
            return E((0, c.O)(...g));
          },
        }))(m);
      },
      79199995: (W, A, e) => {
        "use strict";
        e.d(A, {
          WJ: () => c,
          eW: () => r,
          fJ: () => v,
          g2: () => m,
          kY: () => u,
          oE: () => a,
        });
        var t = e(4418517660),
          n = e.n(t),
          s = e(583204418),
          i = e(735940183),
          d = e(6471801899);
        const o = new i.Ay("lists");
        var a;
        (function (E) {
          (E.Today = "today"),
            (E.Yesterday = "yesterday"),
            (E.Tomorrow = "tomorrow"),
            (E.ThisWeek = "this_week"),
            (E.NextWeek = "next_week"),
            (E.LastWeek = "last_week"),
            (E.SinceILastViewed = "since_i_last_viewed");
        })(a || (a = {}));
        const r = _(
            (E) =>
              !E.options || E.options.dateFormat === s.cf.Default
                ? d.Wl
                : E.options.dateFormat,
            "getDateFormat"
          ),
          c = _((E) => Object.values(a).includes(E), "isDateFilterOption"),
          u = _((E) => {
            switch (E) {
              case a.Today:
                return o.t("Today");
              case a.Yesterday:
                return o.t("Yesterday");
              case a.Tomorrow:
                return o.t("Tomorrow");
              case a.ThisWeek:
                return o.t("This week");
              case a.NextWeek:
                return o.t("Next week");
              case a.LastWeek:
                return o.t("Last week");
              case a.SinceILastViewed:
                return o.t("Since last time you viewed");
              default:
                return E;
            }
          }, "formatDateForMenu"),
          l = _((E) => {
            const T = n()(E).startOf("isoWeek"),
              g = n()(E).endOf("isoWeek"),
              I = [];
            let f = T;
            for (; f <= g; ) I.push(f), (f = f.clone().add(1, "days"));
            return I;
          }, "getWeekdays"),
          m = _((E) => {
            let T;
            switch (E) {
              case a.Today:
                T = n()().format(d.DX);
                break;
              case a.Yesterday:
                T = n()().subtract(1, "days").format(d.DX);
                break;
              case a.Tomorrow:
                T = n()().add(1, "days").format(d.DX);
                break;
              case a.ThisWeek:
                T = l(n()()).map((g) => g.format(d.DX));
                break;
              case a.NextWeek:
                T = l(n()().add(1, "weeks")).map((g) => g.format(d.DX));
                break;
              case a.LastWeek:
                T = l(n()().subtract(1, "weeks")).map((g) => g.format(d.DX));
                break;
              case a.SinceILastViewed:
                T = n()().format(d.DX);
                break;
              default:
                T = E;
            }
            return T;
          }, "getStaticDateValue"),
          v = n()().format(d.DX);
      },
      3001769570: (W, A, e) => {
        "use strict";
        e.d(A, {
          OQ: () => g,
          PL: () => r,
          R8: () => M,
          UE: () => E,
          Ui: () => T,
          aI: () => v,
          aN: () => I,
          bV: () => m,
          bw: () => l,
          lx: () => f,
          nM: () => y,
          rD: () => u,
        });
        var t = e(1649982175),
          n = e(166097325),
          s = e(7682358855),
          i = e(8191156954),
          d = e(4097827290),
          o = e(735940183);
        const a = new o.Ay("lists"),
          r = _(
            (p, O) =>
              p.indexOf(O) === -1 ? [...p, O] : p.filter((h) => h !== O),
            "toggleValueInFilterValues"
          ),
          c = _((p) => {
            if (!p.length) return p;
            const O = p == null ? void 0 : p.flatMap((h) => h.split("|"));
            return [...new Set(O)];
          }, "parseUserIdsAndRemoveDupes"),
          u = _((p, O) => {
            const C = [];
            return (
              Object.values(p ?? {}).forEach((D) => {
                if (D.fields && D.fields[O]) {
                  const P = D.fields[O];
                  C.push(P.trim());
                }
              }),
              [s._4, ...c(C)]
            );
          }, "getUserIdsInUserColumns"),
          l = _((p, O, C) => {
            const h = p.map((P) => (0, t.A)(P, [C])),
              D = O.map((P) => (0, t.A)(P, [C]));
            return (0, n.A)(h, D);
          }, "isLocalAndServerFilterSortsEqual"),
          m = _((p, O) => {
            var C;
            const h = O.get((C = p.key) !== null && C !== void 0 ? C : "");
            return h
              ? !(0, n.A)(h.operator, p.operator) ||
                  !(0, n.A)(new Set(h.values), new Set(p.values))
              : !0;
          }, "isFilterUnsavedOrModified"),
          v = _((p) => {
            let O = p;
            return (
              Boolean(O.find((h) => h.type === i.$.CreatedTime)) ||
                (O = [
                  ...O,
                  {
                    id: i.$.CreatedTime,
                    name: "Created time",
                    key: i.$.CreatedTime,
                    type: i.$.CreatedTime,
                    isPrimaryColumn: !1,
                  },
                ]),
              O
            );
          }, "appendCreatedTimeDataColumn"),
          E = _((p) => {
            switch (p.type) {
              case i.$.Checkbox:
              case i.$.Completed:
              case i.$.Message:
              case i.$.Link:
              case i.$.TodoCompleted:
                return [d.t.IsEmpty, d.t.IsNotEmpty];
              case i.$.Assignee:
              case i.$.CreatedBy:
              case i.$.LastEditedBy:
              case i.$.Rating:
              case i.$.Select:
              case i.$.User:
              case i.$.Text:
              case i.$.TodoAssignee:
                return [
                  d.t.Contains,
                  d.t.DoesNotContain,
                  d.t.IsEmpty,
                  d.t.IsNotEmpty,
                ];
              case i.$.Currency:
              case i.$.Number:
              case i.$.Date:
              case i.$.TodoDueDate:
                return [
                  d.t.Equal,
                  d.t.NotEqual,
                  d.t.LessThan,
                  d.t.GreaterThan,
                  d.t.IsEmpty,
                  d.t.IsNotEmpty,
                ];
              default:
                return [d.t.Equal, d.t.NotEqual, d.t.IsEmpty, d.t.IsNotEmpty];
            }
          }, "getOperatorsFromColumn"),
          T = _((p) => p.type === i.$.Checkbox, "isCheckboxFilter"),
          g = _(
            (p) => p.type === i.$.Completed || p.type === i.$.TodoCompleted,
            "isCompletedFilter"
          ),
          I = _(
            (p) => p === d.t.IsEmpty || p === d.t.IsNotEmpty,
            "isEmptyOperator"
          ),
          f = _((p) => p === d.t.IsMe || p === d.t.IsNotMe, "isMeOperator"),
          y = _(
            (p) =>
              p.type === i.$.Date ||
              p.type === i.$.DueDate ||
              p.type === i.$.CreatedTime ||
              p.type === i.$.LastEditedTime ||
              p.type === i.$.TodoDueDate,
            "isDateFilter"
          ),
          M = _((p, O) => {
            switch (p) {
              case d.t.IsEmpty:
                return T(O)
                  ? a.t("is not checked")
                  : g(O)
                  ? a.t("Not completed")
                  : a.t("is empty");
              case d.t.IsNotEmpty:
                return T(O)
                  ? a.t("is checked")
                  : g(O)
                  ? a.t("Completed")
                  : a.t("is not empty");
              case d.t.Equal:
                return y(O) ? a.t("is") : a.t("is equal to");
              case d.t.NotEqual:
                return y(O) ? a.t("is not") : a.t("is not equal to");
              case d.t.GreaterThan:
                return y(O) ? a.t("is after") : a.t("is greater than");
              case d.t.LessThan:
                return y(O) ? a.t("is before") : a.t("is less than");
              case d.t.GreaterThanOrEqual:
                return a.t("is greater than or equal to");
              case d.t.LessThanOrEqual:
                return a.t("is less than or equal to");
              case d.t.Contains:
                return a.t("includes");
              case d.t.DoesNotContain:
                return a.t("does not include");
              case d.t.IsMe:
                return a.t("is me");
              case d.t.IsNotMe:
                return a.t("is not me");
              default:
                return "";
            }
          }, "getFilterOperatorLabel");
      },
      9216332371: (W, A, e) => {
        "use strict";
        e.d(A, {
          AO: () => de,
          Hs: () => $,
          Jn: () => p,
          M1: () => Ee,
          Nh: () => ae,
          Po: () => U,
          Q6: () => G,
          RO: () => L,
          Rw: () => N,
          Sb: () => Se,
          c$: () => Ce,
          g2: () => Z,
          iT: () => be,
          kv: () => F,
          u1: () => ve,
          us: () => z,
        });
        var t = e(3783723764),
          n = e(1703559452),
          s = e(2240330919),
          i = e(2101927269),
          d = e(4418517660),
          o = e.n(d),
          a = e(7682358855),
          r = e(79199995),
          c = e(8191156954),
          u = e(4097827290),
          l = e(8393662842),
          m = e(7334104107),
          v = e(4919145213),
          E = e(583204418),
          T = e(5045557812),
          g = e(3342113153),
          I = e(3802883493),
          f = e(8088280230),
          y = e(6471801899),
          M = e(7606781622);
        const p = _((w) => {
            let { record: k, colKey: J } = w;
            var ee, ne, pe, Me, ke;
            if (
              !(k == null || (ee = k.fallback) === null || ee === void 0) &&
              ee[J]
            )
              return k.fallback[J];
            if (
              !(
                k == null ||
                (ne = k.fields) === null ||
                ne === void 0 ||
                (pe = ne.fallback) === null ||
                pe === void 0
              ) &&
              pe[J]
            )
              return k == null ||
                (Me = k.fields) === null ||
                Me === void 0 ||
                (ke = Me.fallback) === null ||
                ke === void 0
                ? void 0
                : ke[J];
            if (k[J]) {
              if ((0, T.A)(k[J])) {
                var ge, fe, re, le, Re;
                return (Re =
                  (le =
                    (re =
                      (ge = k[J]) === null ||
                      ge === void 0 ||
                      (fe = ge[0]) === null ||
                      fe === void 0
                        ? void 0
                        : fe.elements[0]) === null || re === void 0
                      ? void 0
                      : re.elements[0]) === null || le === void 0
                    ? void 0
                    : le.text) !== null && Re !== void 0
                  ? Re
                  : "";
              }
              return k[J].toString();
            }
            return "";
          }, "getStringValue"),
          O = _((w) => {
            const k = o()(w).startOf("isoWeek"),
              J = o()(w).endOf("isoWeek"),
              ee = [];
            let ne = k;
            for (; ne <= J; ) ee.push(ne), (ne = ne.clone().add(1, "days"));
            return ee;
          }, "getWeekdays"),
          C = _((w, k) => {
            const J = "YYYY-MM-DD";
            let ee;
            switch (w) {
              case r.oE.Today:
                ee = o()().format(J);
                break;
              case r.oE.Yesterday:
                ee = o()().subtract(1, "days").format(J);
                break;
              case r.oE.Tomorrow:
                ee = o()().add(1, "days").format(J);
                break;
              case r.oE.ThisWeek:
                ee = O(o()()).map((pe) => pe.format(J));
                break;
              case r.oE.NextWeek:
                ee = O(o()().add(1, "weeks")).map((pe) => pe.format(J));
                break;
              case r.oE.LastWeek:
                ee = O(o()().subtract(1, "weeks")).map((pe) => pe.format(J));
                break;
              case r.oE.SinceILastViewed:
                return (ee = o().unix(k)), ee;
              default:
                ee = o()(w, J).format(J);
            }
            return Array.isArray(ee) ? ee.map((pe) => o()(pe, J)) : o()(ee, J);
          }, "convertDynamicDateToStatic"),
          h = _(
            (w) =>
              w
                .normalize("NFD")
                .replace(/[\u0300-\u036f]/g, "")
                .toLowerCase(),
            "normalizeText"
          ),
          D = _(function (w, k, J) {
            let ee =
              arguments.length > 3 && arguments[3] !== void 0
                ? arguments[3]
                : !1;
            const ne = ee ? k : k == null ? void 0 : k.clone().startOf("day"),
              pe = ee ? J : J == null ? void 0 : J.clone().startOf("day");
            switch (w) {
              case u.t.NotEqual:
                return !(ne != null && ne.isSame(pe));
              case u.t.GreaterThan:
                return ne == null ? void 0 : ne.isBefore(pe);
              case u.t.GreaterThanOrEqual:
                return ne == null ? void 0 : ne.isSameOrBefore(pe);
              case u.t.LessThan:
                return ne == null ? void 0 : ne.isAfter(pe);
              case u.t.LessThanOrEqual:
                return ne == null ? void 0 : ne.isSameOrAfter(pe);
              case u.t.Equal:
              default:
                return ne == null ? void 0 : ne.isSame(pe);
            }
          }, "multiDateOperatorFilterValueCheck"),
          P = _((w, k, J, ee, ne) => {
            if (!k.values[0]) return w;
            let pe = J;
            const Me = k.values[0] === r.oE.SinceILastViewed;
            return (
              Me && (pe = u.t.GreaterThan),
              w.filter((ke) => {
                if (ne != null && ne.has(ke.id)) return !0;
                const ge = ke[k.key];
                let fe = ge ? o()(ge).startOf("day") : void 0;
                return (
                  isNaN(ge) || (fe = o().unix(ge)),
                  k.values.some((re) => {
                    if (!re) return !1;
                    const le = C(re.toString(), ee);
                    return Array.isArray(le)
                      ? pe === u.t.NotEqual
                        ? !le.some((Re) =>
                            Re && fe ? Re.clone().startOf("day").isSame(fe) : !1
                          )
                        : le.some((Re) => (Re && fe ? D(pe, Re, fe) : !1))
                      : le && fe
                      ? D(pe, le, fe, Me)
                      : !1;
                  })
                );
              })
            );
          }, "multiDateFilter"),
          S = _((w, k, J, ee) => {
            const ne = k.values[0] || "";
            return w.filter((pe) => {
              if (ee != null && ee.has(pe.id)) return !0;
              const Me = pe[k.key] || "";
              switch (J) {
                case u.t.DoesNotContain:
                  return !Me.toLowerCase().includes(
                    ne.toString().toLowerCase()
                  );
                case u.t.Contains:
                default:
                  return Me.toLowerCase().includes(ne.toString().toLowerCase());
              }
            });
          }, "textFilter"),
          b = _((w, k, J, ee) => {
            const ne = k.values[0] || "";
            return w.filter((pe) => {
              if (ee != null && ee.has(pe.id)) return !0;
              const Me = p({
                record: pe,
                colKey: k.key,
              });
              switch (J) {
                case u.t.DoesNotContain:
                  return !Me.toLowerCase().includes(
                    ne.toString().toLowerCase()
                  );
                case u.t.Contains:
                default:
                  return Me.toLowerCase().includes(ne.toString().toLowerCase());
              }
            });
          }, "richTextFilter"),
          K = _((w, k, J, ee) => {
            if (!k.values.length) return w;
            var ne;
            const pe = Number(
              (ne = k.values[0]) !== null && ne !== void 0 ? ne : ""
            );
            return w.filter((Me) => {
              if (ee != null && ee.has(Me.id)) return !0;
              const ke = Me[k.key],
                ge = Number(ke ?? "");
              if (ke != null)
                switch (J) {
                  case u.t.NotEqual:
                    return ge !== pe;
                  case u.t.GreaterThan:
                    return ge > pe;
                  case u.t.GreaterThanOrEqual:
                    return ge >= pe;
                  case u.t.LessThan:
                    return ge < pe;
                  case u.t.LessThanOrEqual:
                    return ge <= pe;
                  case u.t.Equal:
                  default:
                    return ge === pe;
                }
            });
          }, "numberFilter"),
          x = _((w, k, J, ee) => {
            const ne = new Set(k.values);
            return ne.size
              ? w.filter((pe) => {
                  if (ee != null && ee.has(pe.id)) return !0;
                  var Me;
                  const ke = String(
                    (Me = pe[k.key]) !== null && Me !== void 0 ? Me : ""
                  );
                  switch (J) {
                    case u.t.Contains:
                      return ne.has(ke);
                    case u.t.DoesNotContain:
                      return !ne.has(ke);
                    case u.t.IsEmpty:
                      return ke === null;
                    case u.t.IsNotEmpty:
                      return ke !== null;
                    default:
                      return !0;
                  }
                })
              : w;
          }, "multiRatingFilter"),
          B = _((w, k, J, ee, ne, pe) => {
            const Me = k.values.map((ge) => (ge === a._4 && pe ? pe : ge)),
              ke = new Set(Me);
            return ke.size
              ? w.filter((ge) => {
                  if (ne != null && ne.has(ge.id)) return !0;
                  const fe = ge[k.key],
                    re = (fe ?? "").split(a.eY).filter(Boolean);
                  let le = !1;
                  for (const Re of re) {
                    if (ke.has(Re)) {
                      le = !0;
                      break;
                    }
                    if (!ee) break;
                  }
                  return J === u.t.Equal
                    ? le
                    : J === u.t.NotEqual
                    ? !le
                    : J === u.t.Contains
                    ? le
                    : J === u.t.DoesNotContain
                    ? !le
                    : !0;
                })
              : w;
          }, "multiOptionFilter");
        function U(w) {
          return w === 0 ? !1 : !w || (Array.isArray(w) && w.length === 0);
        }
        _(U, "isEmptyValue");
        const R = _((w, k, J, ee, ne, pe) => {
            let Me = w;
            return (
              k.forEach((ke) => {
                const ge = J.find((Re) => Re.key === ke.key);
                if (!ge) return;
                const fe = ke.operator;
                if (fe === u.t.IsEmpty) {
                  Me = Me.filter((Re) =>
                    pe != null && pe.has(Re.id) ? !0 : U(Re[ke.key])
                  );
                  return;
                }
                if (fe === u.t.IsNotEmpty) {
                  Me = Me.filter((Re) =>
                    pe != null && pe.has(Re.id) ? !0 : !U(Re[ke.key])
                  );
                  return;
                }
                switch (ge.type) {
                  case c.$.Text:
                    Me = b(Me, ke, fe, pe);
                    break;
                  case c.$.Email:
                  case c.$.Phone:
                    Me = S(Me, ke, fe, pe);
                    break;
                  case c.$.Number:
                  case c.$.Currency:
                    Me = K(Me, ke, fe, pe);
                    break;
                  case c.$.Rating:
                    Me = x(Me, ke, fe, pe);
                    break;
                  case c.$.Date:
                  case c.$.DueDate:
                  case c.$.TodoDueDate:
                  case c.$.CreatedTime:
                  case c.$.LastEditedTime:
                    Me = P(Me, ke, fe, ne, pe);
                    break;
                  case c.$.Checkbox:
                  case c.$.Completed:
                  case c.$.TodoCompleted:
                  case c.$.Link:
                    return;
                  case c.$.Select:
                    var re;
                    Me = B(
                      Me,
                      ke,
                      fe,
                      ((re = ge.options) === null || re === void 0
                        ? void 0
                        : re.format) === E.YP.MultiSelect,
                      pe
                    );
                    break;
                  case c.$.Channel:
                  case c.$.Canvas:
                  case c.$.User:
                  case c.$.Assignee:
                  case c.$.TodoAssignee:
                  case c.$.CreatedBy:
                  case c.$.LastEditedBy:
                    switch (fe) {
                      case u.t.IsMe:
                        Me = Me.filter((Re) => {
                          var ye;
                          return pe != null && pe.has(Re.id)
                            ? !0
                            : (ye = Re[ke.key]) === null || ye === void 0
                            ? void 0
                            : ye.includes(ee);
                        });
                        break;
                      case u.t.IsNotMe:
                        Me = Me.filter((Re) => {
                          var ye;
                          return pe != null && pe.has(Re.id)
                            ? !0
                            : !(
                                !(
                                  (ye = Re[ke.key]) === null || ye === void 0
                                ) && ye.includes(ee)
                              );
                        });
                        break;
                      default:
                        var le;
                        Me = B(
                          Me,
                          ke,
                          fe,
                          ((le = ge.options) === null || le === void 0
                            ? void 0
                            : le.format) === E.hx.MultiEntity,
                          pe,
                          ee
                        );
                    }
                    break;
                  default:
                    Me = S(Me, ke, fe, pe);
                    break;
                }
              }),
              Me
            );
          }, "applyFiltersToRecords"),
          G = new Map([
            [c.$.Text, ""],
            [c.$.Email, ""],
            [c.$.Date, ""],
            [c.$.TodoDueDate, ""],
            [c.$.Checkbox, !1],
            [c.$.Completed, !1],
            [c.$.TodoCompleted, !1],
            [c.$.Number, 0],
            [c.$.Rating, 0],
            [c.$.CreatedTime, 0],
            [c.$.LastEditedTime, 0],
            [c.$.Channel, ""],
            [c.$.User, ""],
            [c.$.TodoAssignee, ""],
            [c.$.CreatedBy, ""],
            [c.$.LastEditedBy, ""],
          ]);
        function H(w) {
          if (!Array.isArray(w) || w.length === 0) return "";
          const k = _((J) => {
            for (const ee of J) {
              if (ee.type === "text" && ee.text) return ee.text;
              if (ee.elements && Array.isArray(ee.elements)) {
                const ne = k(ee.elements);
                if (ne) return ne;
              }
            }
            return "";
          }, "findTextRecursively");
          for (const J of w)
            if (J.elements && Array.isArray(J.elements)) {
              const ee = k(J.elements);
              if (ee) return ee;
            }
          return "";
        }
        _(H, "extractFirstTextElement");
        const F = _((w, k, J, ee) => {
            const ne = k.map((ge) => (ge.ascending ? "asc" : "desc")),
              pe = new Map();
            for (const ge of J)
              if (ge.type === c.$.Select) {
                var Me;
                const fe =
                  ((Me = ge.options) === null || Me === void 0
                    ? void 0
                    : Me.choices) || [];
                for (let re = 0; re < fe.length; re++) {
                  const le = fe[re],
                    Re = `${ge.key}:${le.value}`;
                  pe.set(Re, re);
                }
              }
            const ke = k.map((ge) => (fe) => {
              const re = J.find((Ue) => Ue.key === ge.key),
                le = ge.ascending;
              if (!re) return "";
              const Re = fe[ge.key];
              let ye = Re ?? G.get(re.type || c.$.Text);
              if (
                (ye == null && (ye = le ? Number.MAX_SAFE_INTEGER : -1 / 0),
                re.type === c.$.Select)
              ) {
                var Te;
                const Ue = (
                    ((Te = re.options) === null || Te === void 0
                      ? void 0
                      : Te.choices) || []
                  ).length,
                  Ke = (Re ?? "").split(a.eY).filter(Boolean);
                if (Ue === 0 || Ke.length === 0)
                  ye = le ? Number.MAX_SAFE_INTEGER : -1 / 0;
                else {
                  let Ze = Ue;
                  for (const Q of Ke) {
                    const ie = `${re.key}:${Q}`;
                    var De;
                    const Ve =
                      (De = pe.get(ie)) !== null && De !== void 0 ? De : Ue;
                    Ze = Math.min(Ze, Ve);
                  }
                  Ze < Ue
                    ? (ye = Ze)
                    : (ye = le ? Number.MAX_SAFE_INTEGER : -1 / 0);
                }
              }
              if (
                ((re.type === c.$.User || re.type === c.$.TodoAssignee) &&
                  ee &&
                  (Re == null || Re === ""
                    ? (ye = le ? "zzzzzzzz" : "")
                    : ee[Re]
                    ? (ye = ee[Re].toLowerCase())
                    : (ye = le ? "zzzzzzzz" : "")),
                re.type === c.$.Text &&
                  (Re == null ||
                  Re === "" ||
                  (Array.isArray(Re) && Re.length === 0)
                    ? (ye = le ? "zzzzzzzz" : "")
                    : typeof Re == "string"
                    ? (ye = Re.toLowerCase())
                    : (ye = H(Re).toLowerCase())),
                re.type === c.$.Vote)
              ) {
                const Ue = (Re ?? "").split(a.eY).filter(Boolean);
                Ue.length > 0
                  ? (ye = Ue.length)
                  : le
                  ? (ye = Number.MAX_SAFE_INTEGER)
                  : (ye = -1 / 0);
              }
              if (
                ((re.type === c.$.Number ||
                  re.type === c.$.Currency ||
                  re.type === c.$.Rating) &&
                  (Re == null || Re === ""
                    ? (ye = le ? Number.MAX_SAFE_INTEGER : -1 / 0)
                    : (ye = Number(Re))),
                re.type === c.$.Date ||
                  re.type === c.$.DueDate ||
                  re.type === c.$.TodoDueDate ||
                  re.type === c.$.CreatedTime ||
                  re.type === c.$.LastEditedTime)
              ) {
                const Ue = new Date(Re);
                Re == null || Re === ""
                  ? (ye = le ? Number.MAX_SAFE_INTEGER : -1 / 0)
                  : isNaN(Ue.getTime()) || (ye = Ue.getTime());
              }
              return ye;
            });
            return (0, t.A)(w, ke, ne);
          }, "applySortToRecords"),
          V = new Set([
            c.$.Text,
            c.$.Email,
            c.$.Phone,
            c.$.Number,
            c.$.Rating,
            c.$.Select,
            c.$.User,
            c.$.Channel,
            c.$.Vote,
          ]),
          X = _((w, k, J, ee, ne) => {
            const pe = k.filter((re) => V.has(re.type)),
              Me = new Map();
            for (const re of pe)
              if (re.type === c.$.Select) {
                var ke, ge;
                const le =
                  (ge =
                    (ke = re.options) === null || ke === void 0
                      ? void 0
                      : ke.choices) !== null && ge !== void 0
                    ? ge
                    : [];
                for (const { value: Re, label: ye } of le) {
                  const Te = `${re.key}:${Re}`;
                  Me.set(Te, ye);
                }
              }
            const fe = J.toLowerCase();
            return w.filter((re) =>
              (0, n.A)(pe, (le) => {
                const Re = p({
                  record: re,
                  colKey: le.key,
                });
                if (le.type === c.$.Select) {
                  var ye;
                  let Ze = Re.split(a.eY).filter(Boolean);
                  ((ye = le.options) === null || ye === void 0
                    ? void 0
                    : ye.format) === E.YP.MultiSelect || (Ze = Ze.slice(0, 1));
                  for (const ie of Ze) {
                    const Ve = `${le.key}:${ie}`;
                    var Te;
                    if (
                      ((Te = Me.get(Ve)) !== null && Te !== void 0 ? Te : Re)
                        .toLowerCase()
                        .includes(fe)
                    )
                      return !0;
                  }
                }
                if (le.type === c.$.Channel && ne) {
                  var De;
                  const Ze = (De = ne[Re]) !== null && De !== void 0 ? De : "";
                  return Ze && h(Ze).includes(fe);
                }
                if (le.type === c.$.User && ee) {
                  var Ue;
                  const Ze = (Ue = ee[Re]) !== null && Ue !== void 0 ? Ue : "";
                  return Ze && Ze.toLowerCase().includes(fe);
                }
                if (le.type === c.$.Vote) {
                  const Ze = re[le.key],
                    Q = typeof Ze == "string" ? Ze : void 0;
                  var Ke;
                  return `${
                    (Ke = Q == null ? void 0 : Q.split("|").length) !== null &&
                    Ke !== void 0
                      ? Ke
                      : 0
                  }`.includes(fe);
                }
                return h(Re).includes(fe);
              })
            );
          }, "applySearchStringToRecords"),
          q = _((w) => {
            let { listRecords: k, records: J } = w;
            return J.map((ee) => {
              const ne = k == null ? void 0 : k[ee.id];
              return {
                ...ee,
                highlightAsNew: ne == null ? void 0 : ne.highlightAsNew,
              };
            });
          }, "applyHighlightAsNew"),
          oe = _((w) => {
            let { listRecords: k, records: J } = w;
            return J.map((ee) => {
              const ne = k == null ? void 0 : k[ee.id];
              return {
                ...ee,
                isOpenInFlexpane: ne == null ? void 0 : ne.isOpenInFlexpane,
              };
            });
          }, "applyIsOpenInFlexpane"),
          z = _((w) => {
            let {
                listRecords: k,
                records: J,
                schema: ee,
                filterObj: ne,
                sorts: pe,
                searchString: Me,
                lastReadTimestamp: ke,
                bottomRecordIds: ge,
                userNames: fe,
                channelNames: re,
              } = w,
              le = J;
            if (ne) {
              const { filters: Re, currentUserId: ye } = ne;
              le = R(le, Re, ee, ye, ke, ge);
            }
            return (
              pe && (le = F(le, pe, ee, fe)),
              Me && (le = X(le, ee, Me, fe, re)),
              (le = q({
                listRecords: k,
                records: le,
              })),
              (le = oe({
                listRecords: k,
                records: le,
              })),
              le
            );
          }, "applyModifiersToRecords");
        function Ae(w, k, J) {
          const ee = (0, M.Ld)(w, k, J);
          return ee && !(0, v.A)(ee) && !(0, m.aw)(ee) && !(0, m.aH)(ee);
        }
        _(Ae, "isValidMarkedMessageForListThread");
        function ae(w, k, J) {
          return (0, s.A)((0, i.A)(J, (ee) => Ae(w, k, ee)));
        }
        _(ae, "maxRealTsForListThread");
        function de(w, k, J, ee) {
          const ne = (0, y.Dv)(ee, Object.values(J)),
            pe = ne.get(w == null ? void 0 : w.id),
            Me = ne.get(k == null ? void 0 : k.id);
          let ke = null,
            ge = null;
          if (w && k) {
            if (pe) ke = pe;
            else {
              var fe, re;
              ke =
                !((fe = J[w.id]) === null || fe === void 0) && fe.position
                  ? `${
                      (re = J[w.id]) === null || re === void 0
                        ? void 0
                        : re.position
                    }`
                  : null;
            }
            if (Me) ge = Me;
            else {
              var le, Re;
              ge =
                !((le = J[k.id]) === null || le === void 0) && le.position
                  ? `${
                      (Re = J[k.id]) === null || Re === void 0
                        ? void 0
                        : Re.position
                    }`
                  : null;
            }
          } else if (w)
            if (pe) ke = pe;
            else {
              var ye, Te;
              ke =
                !((ye = J[w.id]) === null || ye === void 0) && ye.position
                  ? `${
                      (Te = J[w.id]) === null || Te === void 0
                        ? void 0
                        : Te.position
                    }`
                  : null;
            }
          else if (k)
            if (Me) ge = Me;
            else {
              var De, Ue;
              ge =
                !((De = J[k.id]) === null || De === void 0) && De.position
                  ? `${
                      (Ue = J[k.id]) === null || Ue === void 0
                        ? void 0
                        : Ue.position
                    }`
                  : null;
            }
          return (0, I.TU)(ke, ge);
        }
        _(de, "calculateFractionalRecordPosition");
        const ve = _((w) => {
            var k;
            const J = (0, f.A)({
              input: w,
            });
            return J &&
              J[0] &&
              J[0].offset === 0 &&
              ((k = J[0].url) === null || k === void 0 ? void 0 : k.length) ===
                (w == null ? void 0 : w.length)
              ? [
                  {
                    type: "rich_text",
                    elements: [
                      {
                        type: "rich_text_section",
                        elements: [
                          {
                            type: "link",
                            url: J[0].url || "",
                          },
                        ],
                      },
                    ],
                  },
                ]
              : [
                  {
                    type: "rich_text",
                    elements: [
                      {
                        type: "rich_text_section",
                        elements: [
                          {
                            type: "text",
                            text: w || "",
                          },
                        ],
                      },
                    ],
                  },
                ];
          }, "convertStringToBlocks"),
          Se = _((w) => {
            if (w instanceof HTMLElement) {
              if (
                w instanceof HTMLInputElement &&
                ["checkbox", "radio"].includes(w.type)
              )
                return !0;
              if (
                ["input", "textarea", "select"].includes(
                  w.tagName.toLowerCase()
                ) ||
                w.isContentEditable
              )
                return !1;
            }
            return !0;
          }, "shouldHandleUndoFrom"),
          Ee = _((w, k) => {
            const J = [];
            var ee;
            const ne = (ee = (0, l.Df)(w)) !== null && ee !== void 0 ? ee : [],
              pe = (0, l.Jq)(w).length || (0, l.Si)(w);
            return (
              k.forEach((Me, ke) => {
                const ge = ne.some(
                  (Te) =>
                    (Te == null ? void 0 : Te.user_id) ===
                    (Me == null ? void 0 : Me.id)
                );
                var fe;
                const re =
                  (fe = Me == null ? void 0 : Me.is_profile_only_user) !==
                    null && fe !== void 0
                    ? fe
                    : !1;
                var le;
                const Re =
                  (le = Me == null ? void 0 : Me.is_self) !== null &&
                  le !== void 0
                    ? le
                    : !1;
                !re && !Re && !ge && !pe && J.push(ke);
              }),
              J
            );
          }, "getRestrictedSelectedTokenIndexes"),
          be = _(
            (w) =>
              [
                "created_time",
                "created_by",
                "last_edited_time",
                "last_edited_by",
              ].includes(w.type),
            "isMetaColumn"
          ),
          Ce = _((w, k) => {
            if (!w) return "";
            const J = p({
              record: w,
              colKey: "name",
            });
            if (!J) return "";
            let ee = (0, g.Kx)(
              J == null
                ? void 0
                : J.toLowerCase()
                    .split(/[ :/-]/)
                    .filter(Boolean)
                    .join("-")
            );
            return (
              (ee = ee.split("-").filter(Boolean).join("-")),
              k && !ee.startsWith(k) && (ee = `${k}${ee}`),
              ee.slice(0, (0, g.zU)())
            );
          }, "generateChannelNameFromRecordName"),
          Z = _(
            (w, k) =>
              ((k == null ? void 0 : k.editors) || []).filter((J) => J !== w),
            "getListRecordChannelInitialInvitedMemberIds"
          ),
          $ = _((w, k) => {
            var J, ee;
            return w
              ? k &&
                (k.type === c.$.MultiSelect ||
                  (k.type === c.$.Select &&
                    (k == null || (J = k.options) === null || J === void 0
                      ? void 0
                      : J.format) === E.YP.MultiSelect) ||
                  ((k.type === c.$.User ||
                    k.type === c.$.Channel ||
                    k.type === c.$.Canvas) &&
                    (k == null || (ee = k.options) === null || ee === void 0
                      ? void 0
                      : ee.format) === E.hx.MultiEntity))
                ? new Set(w.split(a.eY).filter(Boolean))
                : new Set([w])
              : new Set();
          }, "splitMultiValueField"),
          N = _(
            (w) => (w == null ? void 0 : w.includes("/lists/")),
            "isListLink"
          ),
          L = _(
            (w) => ({
              key: w.key,
              operator: w.operator,
              values: w.values,
              columnId: w.columnId,
            }),
            "convertListViewFilterToViewFilter"
          );
      },
      2670882607: (W, A, e) => {
        "use strict";
        e.d(A, {
          e: () => o,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(2562405183),
          i = e(6422693406),
          d = e(2047021170);
        const o = t.memo(
          t.forwardRef((a, r) => {
            let {
              getAnimationImport: c,
              className: u,
              minHeight: l,
              svgClassName: m,
              loadingClassName: v,
              errorClassName: E,
              description: T,
              loop: g = !1,
              autoplay: I = !1,
              renderLoading: f,
              renderError: y,
              preserveAspectRatio: M,
            } = a;
            const p = (0, s.d4)((x) => (0, d.ty)(x, "a11y_animations")),
              [O, C] = (0, t.useState)(!0),
              [h, D] = (0, t.useState)(!1),
              P = (0, t.useRef)(null),
              S = (0, t.useRef)(null),
              b = (0, t.useRef)(null);
            b.current ||
              (b.current = i.S.all([
                e
                  .e("gantry-v2-async-lottie-web")
                  .then(e.t.bind(e, 221124150, 23)),
                c(),
              ])
                .then((x) => {
                  let [B, U] = x;
                  if (!P.current)
                    throw new Error("Lottie animation missing container");
                  return (
                    C(!1),
                    (S.current = B.loadAnimation({
                      container: P.current,
                      renderer: "svg",
                      loop: g,
                      autoplay: !!(p && I),
                      animationData: U,
                      rendererSettings: {
                        className: (0, n.A)("p-lottie__svg", m),
                        description: T,
                        preserveAspectRatio: M,
                      },
                    })),
                    i.S.resolve(S.current)
                  );
                })
                .catch((x) => (D(!0), i.S.reject(x)))),
              (0, t.useEffect)(
                () => () => {
                  b.current && b.current.cancel(),
                    S.current && S.current.destroy();
                },
                [b, S]
              ),
              (0, t.useImperativeHandle)(r, () => b.current, [b]);
            const K = (0, t.useMemo)(
              () => (O && f ? f() : h && y ? y() : null),
              [f, y, O, h]
            );
            return t.createElement(
              "div",
              {
                ref: P,
                style:
                  l !== void 0
                    ? {
                        minHeight: l,
                      }
                    : void 0,
                className: (0, n.A)("p-lottie", u, O && v, h && E),
              },
              K
            );
          })
        );
      },
      5460331959: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => c,
        });
        var t = e(5824283093),
          n = e(7715417323),
          s = e(4978843660),
          i = e(166097325),
          d = e(6696292586),
          o = e(6650208157);
        const a = 4;
        function r(u) {
          let { children: l, fallbackWidth: m = void 0, onResize: v = n.A } = u;
          const [E, T] = (0, t.useState)({
              width: 0,
              height: 0,
            }),
            [g, I] = (0, t.useState)(!1),
            f = (0, t.useRef)([]);
          function y(p) {
            let { width: O } = p;
            if ((f.current.unshift(O), f.current.length < a)) return !1;
            f.current.length > a && (f.current.length = a);
            const C = (0, s.A)(f.current, 2);
            return C.slice(1).every((h) => (0, i.A)(h, C[0]));
          }
          _(y, "looksLikeResizeLoop");
          const M = (0, t.useCallback)(
            (p) => {
              v(p), T(p.bounds), (0, d.A)(m) && !g && I(y(p.bounds));
            },
            [m, v, g]
          );
          return t.createElement(
            o.A,
            {
              bounds: !0,
              onResize: M,
            },
            (p) => {
              let { measureRef: O } = p;
              return l({
                ...E,
                width: g && m ? m : E.width,
                measureRef: O,
              });
            }
          );
        }
        _(r, "Measure"), (r.displayName = "Measure");
        const c = r;
      },
      9446966957: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => a,
        });
        var t = e(5824283093),
          n = e(1641606663),
          s = e(4505564445),
          i = e(7592430824),
          d = e(5244168417);
        const a = _((r) => {
          let {
            value: c,
            max: u,
            tick: l,
            jump: m,
            onChange: v,
            renderContainer: E,
            renderTrack: T,
            renderInner: g,
            onMouseDown: I,
            onMouseUp: f,
            "aria-label": y,
            "aria-valuetext": M,
            vertical: p,
            autoFocus: O,
          } = r;
          const C = (0, t.useRef)(null),
            { embeddedUiData: h } = (0, t.useContext)(i.N),
            { windowRef: D } = (0, t.useContext)(n.Mn),
            P = (0, t.useCallback)(
              (H) => {
                let { pageX: F, pageY: V } = H;
                const X = C.current;
                if (!X) return;
                const q = X.getBoundingClientRect(),
                  oe = p ? q.y : q.x,
                  z = Math.max(0, (p ? V : F) - oe),
                  Ae = p ? q.height : q.width,
                  de = (p ? 1 - Math.min(1, z / Ae) : Math.min(1, z / Ae)) * u;
                v(de);
              },
              [u, v, p]
            ),
            S = (0, t.useCallback)(
              (H) => {
                P(H);
              },
              [P]
            ),
            b = (0, t.useCallback)(
              (H) => {
                var F, V;
                (F = D.deref()) === null ||
                  F === void 0 ||
                  F.document.removeEventListener("mousemove", S),
                  (V = D.deref()) === null ||
                    V === void 0 ||
                    V.document.removeEventListener("mouseup", b),
                  f == null || f(H);
              },
              [S, f, D]
            ),
            K = (0, t.useCallback)(
              (H) => {
                var F, V;
                H.button !== 0 ||
                  H.ctrlKey ||
                  (P(H),
                  H.preventDefault(),
                  (F = D.deref()) === null ||
                    F === void 0 ||
                    F.document.addEventListener("mousemove", S),
                  (V = D.deref()) === null ||
                    V === void 0 ||
                    V.document.addEventListener("mouseup", b),
                  I == null || I(H));
              },
              [S, b, P, I, D]
            ),
            x = (0, t.useCallback)(
              (H) => {
                switch (H.which) {
                  case s.LE:
                  case s.i7:
                    v(c + (l ?? 1));
                    break;
                  case s.UQ:
                  case s.n6:
                    v(c - (l ?? 1));
                    break;
                  case s.w_:
                    v(c + (m ?? u * 0.1));
                    break;
                  case s.dB:
                    v(c - (m ?? u * 0.1));
                    break;
                  case s.yZ:
                    v(0);
                    break;
                  case s.Kp:
                    v(u);
                    break;
                  default:
                    return;
                }
                H.preventDefault();
              },
              [c, u, l, m, v]
            );
          (0, t.useEffect)(() => {
            var H;
            return (
              C == null ||
                (H = C.current) === null ||
                H === void 0 ||
                H.toggleAttribute(
                  d.EmbeddedUIAttributes.NO_DRAG_ON_MOUSE_MOVE,
                  !!h
                ),
              () => {
                var F, V;
                (F = D.deref()) === null ||
                  F === void 0 ||
                  F.document.removeEventListener("mousemove", S),
                  (V = D.deref()) === null ||
                    V === void 0 ||
                    V.document.removeEventListener("mouseup", b);
              }
            );
          }, [h, S, b, D]),
            (0, t.useEffect)(() => {
              O && C.current && C.current.focus();
            }, [O]);
          const B = `${((u > 0 ? c / u : 0) * 100).toFixed(2)}%`,
            U = g({
              style: p
                ? {
                    height: B,
                  }
                : {
                    width: B,
                  },
            }),
            R = T({
              children: U,
              tabIndex: 0,
              role: "slider",
              "aria-label": y,
              "aria-valuemin": 0,
              "aria-valuemax": u,
              "aria-valuenow": Math.floor(c),
              "aria-valuetext": M,
              onKeyDown: x,
              ref: C,
            });
          return E({
            children: R,
            onMouseDown: K,
          });
        }, "CustomizableSlider");
      },
      3118200703: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => u,
        });
        var t = e(5824283093),
          n = e(735940183),
          s = e(2312625946),
          i = e(6105929840),
          d = e(7592430824),
          o = e(1224315998);
        const a = new n.Ay("stories_av"),
          r = {
            eventId: o.EventId.BK_USER_INTERACTION,
            interactionElement: o.InteractionElement.VIDEO,
            onClick: {
              enableClogAction: !0,
              interaction: o.Interaction.EXPAND,
            },
          };
        function c(l) {
          let { onClick: m, size: v, classPrefix: E } = l;
          const { embeddedUiData: T } = (0, t.useContext)(d.N),
            I = !!T
              ? a.t("View full screen", {
                  fallbackHash: "de8414755b5ff3c3e9f07661b8a127f5e5f57865",
                  fallbackHashNs: "file",
                })
              : a.t("Expand", {
                  fallbackHash: "5de840011e47d74fc17266744fc23d99a5f90716",
                });
          return t.createElement(
            s.Ay,
            {
              tip: I,
              position: "top",
            },
            t.createElement(i.A, {
              className: `${E}__controls_overlay_fullscreen`,
              onClick: m,
              "aria-label": I,
              icon: "expand",
              backgroundStyle: "dark",
              size: v,
              autoClogProps: r,
            })
          );
        }
        _(c, "FullscreenButton"), (c.displayName = "FullscreenButton");
        const u = c;
      },
      1942976385: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => g,
        });
        var t = e(5824283093),
          n = e(6122756707),
          s = e(5255740490),
          i = e(2664504268),
          d = e(735940183),
          o = e(2602118042),
          a = e(3391133100),
          r = e(2562405183),
          c = e(2047021170),
          u = e(387484329),
          l = e(5204962244),
          m = e(3207321841),
          v = e(7592430824);
        const E = new d.Ay("stories_av"),
          T = _((I) => {
            let {
              onSpeedChange: f,
              isInlinePlayer: y,
              onMouseEnter: M,
              onMouseLeave: p,
              className: O,
            } = I;
            const C = (0, n.wA)(),
              [h] = (0, t.useState)({}),
              D = (0, r.d4)((R) => (0, c.ty)(R, "media_playback_speed")),
              [P, S] = (0, t.useState)(D || 1),
              { embeddedUiData: b } = (0, t.useContext)(v.N),
              K = (0, l.d)(() => `playback-speed-${(0, a.r9)()}`);
            (0, t.useEffect)(() => {
              D && Object.keys(h).length === 0 && D !== P && S(D);
            }, [h, D, P]);
            const x = (0, t.useCallback)(
                (R) => {
                  const G = R.value,
                    H = P;
                  S(G);
                  const F = (0, i.A)();
                  (h[F] = !0),
                    C(
                      (0, u.AZ)({
                        pref: "media_playback_speed",
                        value: G,
                      })
                    ).finally(() => {
                      delete h[F];
                    }),
                    f == null || f(G, H);
                },
                [C, h, P, f]
              ),
              B = (0, t.useMemo)(
                () => [
                  {
                    label: E.t("Playback speed"),
                    options: m.Cv.map((R) => ({
                      label: E.t("{speed}x", {
                        speed: R,
                        fallbackHash:
                          "399e68d4ef7e131fd1ddd396dfb6bcf815269ef4",
                      }),
                      value: R,
                    })),
                  },
                ],
                []
              ),
              U = (0, t.useMemo)(() => {
                var R;
                if (!((R = B[0]) === null || R === void 0) && R.options) {
                  for (const G of B[0].options) if (G.value === P) return G;
                }
                return null;
              }, [P, B]);
            return t.createElement(o.A, {
              options: B,
              className: (0, s.A)(
                "p-media_controls__control--playback-speed",
                O,
                {
                  "p-video_controls_overlay__controls__speed": y,
                }
              ),
              size: "small",
              minOptionsListWidth: 140,
              selectedOption: U,
              onOptionSelected: x,
              ariaLabel: E.t(
                "Set playback speed: currently {mediaPlaybackSpeed}\xD7",
                {
                  mediaPlaybackSpeed: P,
                }
              ),
              onMouseEnter: M,
              onMouseLeave: p,
              selectId: K,
              preventScroll: !!b,
            });
          }, "MediaPlaybackSpeedControl");
        T.displayName = "MediaPlaybackSpeedControl";
        const g = T;
      },
      8371678613: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => l,
        });
        var t = e(5824283093),
          n = e(2562405183),
          s = e(5602423845),
          i = e(1224315998),
          d = e(735940183),
          o = e(2047021170),
          a = e(1942976385),
          r = e(2312625946);
        const c = new d.Ay("stories_av");
        function u(m) {
          let {
            isInlinePlayer: v,
            videoRef: E,
            sharedClogProps: T = {},
            className: g,
          } = m;
          const I = (0, s.A)(),
            f = (0, n.d4)((M) => (0, o.ty)(M, "media_playback_speed"));
          (0, t.useEffect)(() => {
            var M;
            E == null ||
              (M = E.current) === null ||
              M === void 0 ||
              M.setPlaybackRate(f);
          }, [f, E]);
          const y = (0, t.useCallback)(
            (M, p) => {
              I.track(i.EventId.MEDIA_PLAYER, {
                ...T,
                contexts: {
                  ...T.contexts,
                  ui_context: {
                    ui_step: v ? "embedded" : "fullscreen",
                    action: "click",
                    ui_properties: {
                      element_type: "button",
                      element_name: "playback_speed",
                    },
                  },
                },
                from: `${p ?? 1}x`,
                to: `${M ?? 1}x`,
              });
            },
            [I, T, v]
          );
          return t.createElement(
            r.Ay,
            {
              tip: c.t("Playback speed"),
              position: "top",
              delay: r.n1,
            },
            t.createElement(a.A, {
              onSpeedChange: y,
              isInlinePlayer: v,
              className: g,
            })
          );
        }
        _(u, "PlaybackSpeedButton"), (u.displayName = "PlaybackSpeedButton");
        const l = u;
      },
      3242899446: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => O,
        });
        var t = e(5824283093),
          n = e(6122756707),
          s = e(2562405183),
          i = e(2047021170),
          d = e(387484329),
          o = e(735940183),
          a = e(5946832122),
          r = e(2036354333),
          c = e(1610251172),
          u = e(2312625946),
          l = e(9194155027),
          m = e(5255740490),
          v = e(3749524846),
          E = e(9446966957);
        function T() {
          return (
            (T =
              Object.assign ||
              function (C) {
                for (var h = 1; h < arguments.length; h++) {
                  var D = arguments[h];
                  for (var P in D)
                    Object.prototype.hasOwnProperty.call(D, P) && (C[P] = D[P]);
                }
                return C;
              }),
            T.apply(this, arguments)
          );
        }
        _(T, "_extends");
        const g = new o.Ay("stories_av");
        var I;
        (function (C) {
          (C.Normal = "normal"),
            (C.Popover = "popover"),
            (C.Vertical = "vertical");
        })(I || (I = {}));
        const f = _((C) => {
          let {
            children: h,
            volume: D,
            onChange: P,
            onMouseDown: S,
            onMouseUp: b,
            mode: K = I.Normal,
            setIsVerticalVolumeActive: x,
          } = C;
          const B = (0, t.useContext)(v.A),
            U = (0, t.useCallback)(
              (oe) => {
                P(Math.round(oe) / 100);
              },
              [P]
            ),
            R = (0, t.useCallback)(() => {
              x == null || x(!0);
            }, [x]),
            G = (0, t.useCallback)(() => {
              x == null || x(!1);
            }, [x]),
            H = Math.floor(D * 100),
            F = (0, t.useCallback)(
              (oe) =>
                t.createElement(
                  "div",
                  T(
                    {
                      className: "p-media_volume_slider__slider",
                    },
                    oe
                  )
                ),
              []
            ),
            V = (0, t.useCallback)(
              (oe) =>
                t.createElement(
                  "div",
                  T(
                    {
                      className: "p-media_volume_slider__track",
                    },
                    oe
                  )
                ),
              []
            ),
            X = (0, t.useCallback)(
              (oe) =>
                t.createElement(
                  "div",
                  T(
                    {
                      className: "p-media_volume_slider__fill",
                    },
                    oe
                  )
                ),
              []
            ),
            q = t.createElement(E.A, {
              value: H,
              max: 100,
              onChange: U,
              renderContainer: F,
              renderTrack: V,
              renderInner: X,
              onMouseDown: S,
              onMouseUp: b,
              "aria-label": g.t("Volume"),
              "aria-valuetext": `${H}%`,
              vertical: K === I.Vertical,
            });
          return t.createElement(
            "div",
            {
              className: (0, m.A)("p-media_volume_slider", {
                "p-media_volume_slider--keyboard_focus": B,
                [`p-media_volume_slider--${K}`]: K,
              }),
              onMouseEnter: K === I.Vertical ? R : void 0,
              onMouseLeave: K === I.Vertical ? G : void 0,
              onFocus: K === I.Vertical ? R : void 0,
              onBlur: K === I.Vertical ? G : void 0,
            },
            t.createElement(
              "div",
              {
                className: "p-media_volume_slider__children",
              },
              h
            ),
            t.createElement(
              "div",
              {
                className: "p-media_volume_slider__slider_container",
              },
              q
            )
          );
        }, "MediaVolumeSlider");
        f.displayName = "MediaVolumeSlider";
        const y = f,
          M = new o.Ay("stories_av");
        function p(C) {
          let {
            isInlinePlayer: h,
            useVerticalVolume: D,
            videoRef: P,
            className: S,
            backgroundStyle: b,
            setIsVerticalVolumeActive: K,
          } = C;
          const x = (0, n.wA)(),
            B = (0, s.d4)((be) => (0, i.ty)(be, "media_muted"));
          var U;
          const R =
              (U = (0, s.d4)((be) => (0, i.ty)(be, "media_volume"))) !== null &&
              U !== void 0
                ? U
                : 1,
            [G, H] = (0, t.useState)(R),
            F = (0, t.useRef)(!1);
          (0, t.useEffect)(() => {
            var be;
            P == null ||
              (be = P.current) === null ||
              be === void 0 ||
              be.setMuted(B);
          }, [B, P]),
            (0, t.useEffect)(() => {
              var be;
              P == null ||
                (be = P.current) === null ||
                be === void 0 ||
                be.setVolume(G);
            }, [P, G]);
          const V = (0, t.useCallback)(() => {
              x(
                (0, d.AZ)({
                  pref: "media_muted",
                  value: !B,
                })
              ),
                B && H(R);
            }, [x, B, R]),
            X = (0, t.useCallback)(
              function () {
                let be =
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : G;
                be === 0
                  ? B ||
                    x(
                      (0, d.AZ)({
                        pref: "media_muted",
                        value: !0,
                      })
                    )
                  : (B &&
                      x(
                        (0, d.AZ)({
                          pref: "media_muted",
                          value: !1,
                        })
                      ),
                    !F.current &&
                      be !== R &&
                      x(
                        (0, d.AZ)({
                          pref: "media_volume",
                          value: be,
                        })
                      ));
              },
              [x, G, B, R]
            ),
            q = (0, t.useRef)(X);
          q.current = X;
          const oe = (0, t.useCallback)((be) => {
              H(be), q.current(be);
            }, []),
            z = (0, t.useCallback)(() => {
              F.current = !0;
            }, []),
            Ae = (0, t.useCallback)(() => {
              (F.current = !1), q.current();
            }, []);
          (0, t.useEffect)(() => {
            F.current || H(R);
          }, [R]);
          const ae = B ? M.t("Unmute") : M.t("Mute"),
            de = M.t("Mute");
          let ve = "volume-off-alt";
          B ||
            (G >= 0.6
              ? (ve = "volume-up")
              : G >= 0.3
              ? (ve = "volume-medium")
              : (ve = "volume-down"));
          const Se = (0, t.useMemo)(
            () =>
              t.createElement(l.A, {
                title: ae,
                mainKey: M.t("M"),
              }),
            [ae]
          );
          if (h) {
            const be = t.createElement(
              u.Ay,
              {
                tip: ae,
                position: D ? "bottom" : "top",
                delay: u.n1,
                hideFromScreenReader: !0,
              },
              t.createElement(
                r.A,
                {
                  className:
                    "p-video_controls_overlay__controls__button p-video_controls_overlay__controls__button--mute",
                  "aria-label": de,
                  "aria-pressed": B,
                  onClick: V,
                },
                t.createElement(c.A, {
                  type: ve,
                  size: "inherit",
                })
              )
            );
            return t.createElement(
              y,
              {
                volume: B ? 0 : G,
                onChange: oe,
                onMouseDown: z,
                onMouseUp: Ae,
                setIsVerticalVolumeActive: K,
                mode: D ? I.Vertical : I.Popover,
              },
              be
            );
          }
          const Ee = t.createElement(
            u.Ay,
            {
              tip: Se,
              position: "top",
              delay: u.PK,
              hideFromScreenReader: !0,
            },
            t.createElement(a.A, {
              onClick: V,
              "aria-label": de,
              "aria-pressed": B,
              icon: ve,
              size: "medium",
              className: S,
              backgroundStyle: b || "light",
            })
          );
          return t.createElement(
            y,
            {
              volume: B ? 0 : G,
              onChange: oe,
              onMouseDown: z,
              onMouseUp: Ae,
            },
            Ee
          );
        }
        _(p, "ToggleMute"), (p.displayName = "ToggleMute");
        const O = p;
      },
      4250078557: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => u,
        });
        var t = e(5824283093),
          n = e(735940183),
          s = e(6422693406),
          i = e(7937864072);
        const d = "MEDIA-PLAYER";
        function o(l) {
          const m = (0, i.A)(),
            [v, E] = (0, t.useState)(!0),
            [T, g] = (0, t.useState)(),
            [I, f] = (0, t.useState)();
          return (
            (0, t.useEffect)(() => {
              if ((g(void 0), f(void 0), !l)) {
                E(!1);
                return;
              }
              E(!0);
              let y;
              const M = new s.S((p, O, C) => {
                const h = new XMLHttpRequest();
                let D = !1;
                h.addEventListener("load", () => {
                  m.info(d, "vtt loaded"), E(!1);
                  const P = h.response;
                  (y = URL.createObjectURL(P)),
                    g(y),
                    p(h.response),
                    P.text().then((S) => {
                      D || f(S);
                    });
                }),
                  h.addEventListener("error", () => {
                    m.warn(d, "error fetching vtt"),
                      E(!1),
                      O(
                        new Error(
                          `VTT load request failed with status ${h.status}`
                        )
                      );
                  }),
                  C &&
                    C(() => {
                      h.abort(), (D = !0);
                    }),
                  (h.responseType = "blob"),
                  (h.withCredentials = !0),
                  h.open("GET", l),
                  h.send(),
                  m.info(d, "fetching vtt");
              });
              return () => {
                M.isPending() && M.cancel(), y && URL.revokeObjectURL(y);
              };
            }, [m, l]),
            {
              vttLoading: v,
              vttSrc: T,
              vttText: I,
            }
          );
        }
        _(o, "useVtt");
        const a = o,
          r = new n.Ay("stories_av");
        function c(l) {
          let { vtt: m, enableMediaCaptions: v } = l;
          const { vttSrc: E } = a(m);
          return !m || !E
            ? null
            : t.createElement("track", {
                label: r.t("Captions"),
                kind: "captions",
                src: E,
                default: v,
              });
        }
        _(c, "TextTrack"), (c.displayName = "TextTrack");
        const u = c;
      },
      4916948857: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => i,
        });
        var t = e(5824283093),
          n = e(8800777280);
        function s() {
          const [d, o] = (0, t.useState)(!1),
            a = (0, t.useRef)(),
            r = (0, t.useRef)(!1),
            c = (0, t.useRef)(!1),
            u = (0, t.useCallback)(() => {
              clearTimeout(a.current),
                (a.current = setTimeout(() => {
                  r.current || o(!1);
                }, 1300));
            }, []),
            l = (0, t.useCallback)(() => {
              o(!1), (c.current = !1);
            }, []),
            m = (0, t.useCallback)(() => {
              o(!0), (c.current = !0), u();
            }, [u]),
            v = (0, t.useCallback)(() => {
              c.current && (o(!0), u());
            }, [u]),
            E = (0, t.useCallback)((T) => {
              const g = (0, n.A)(
                T.target,
                (I) => (I == null ? void 0 : I.dataset.preventFade) === "true"
              );
              r.current = g;
            }, []);
          return (
            (0, t.useEffect)(() => () => clearTimeout(a.current), []),
            {
              mouseIsOverElement: d,
              onMouseLeave: l,
              onMouseEnter: m,
              onMouseMove: v,
              onMouseOver: E,
            }
          );
        }
        _(s, "useDetectMouseOverElement");
        const i = s;
      },
      9758574739: (W, A, e) => {
        "use strict";
        e.d(A, {
          e: () => p,
        });
        var t = e(5824283093),
          n = e(2683115972),
          s = e(7138682671),
          i = e(5375115868),
          d = e(4967176632),
          o = e(7811786890),
          a = e(6259241484),
          r = e(6122756707),
          c = e(3603672985),
          u = e(8452232783),
          l = e(2432967967),
          m = e(581167618),
          v = e(8739505998),
          E = e(1224315998),
          T = e(4481313819),
          g = e(3416652175),
          I = e.n(g);
        const f = {
            elementName: "dispatch",
            onClick: {
              enableClogAction: !0,
            },
          },
          y = (0, o.Wz)({
            notificationName: [o.mw],
          }),
          M = {
            picked: "",
            notificationName: "",
          },
          p = _((O) => {
            let {
              initialValues: C = M,
              validate: h = y,
              onCloseModal: D,
              megaphoneSpaceName: P,
              notificationList: S,
            } = O;
            const [b, K] = (0, t.useState)(""),
              [x, B] = (0, t.useState)(!1),
              [U, R] = (0, t.useState)(!1),
              G = (0, r.wA)(),
              [H, F] = (0, t.useState)(""),
              V = (0, t.useCallback)((oe) => F(oe), []),
              X = (0, t.useCallback)(() => {
                if (!b) {
                  B(!0);
                  return;
                }
                let oe = {};
                if (H.length)
                  try {
                    oe = JSON.parse(H);
                  } catch {
                    R(!0);
                    return;
                  }
                D == null || D(),
                  G(
                    (0, c.G0)({
                      spaceName: P,
                      notificationName: b,
                      notificationData: oe,
                    })
                  ),
                  P === a.xu.LAUNCH_MODAL && G((0, l.A)());
              }, [b, H, G, P, D]),
              q = (0, t.useCallback)((oe, z) => {
                K(oe), z("picked", oe), B(!1), R(!1);
              }, []);
            return t.createElement(
              T.A,
              {
                eventId: E.EventId.ANALYTICS_EVENT,
                uiComponentName: E.UiComponentName.MEGAPHONE_DISPATCHER,
                megaphoneSpaceName: P,
                clogImpression: !0,
              },
              t.createElement(
                d.A,
                {
                  initialValues: C,
                  validate: h,
                  onSubmit: X,
                },
                (oe) => {
                  let { isSubmitting: z, values: Ae, setFieldValue: ae } = oe;
                  return t.createElement(
                    t.Fragment,
                    null,
                    t.createElement(
                      "h2",
                      null,
                      "\u{1F4E3} Megaphone Dispatcher"
                    ),
                    "Click the Dispatch button below to instantly render Megaphone Notifications on the UI.",
                    t.createElement(
                      "div",
                      {
                        className: I().spaceNameContainer,
                      },
                      "Space Name",
                      t.createElement(
                        "div",
                        {
                          className: I().spaceName,
                        },
                        P
                      )
                    ),
                    t.createElement(
                      "div",
                      {
                        className: I().notificationName,
                      },
                      "Notification Name"
                    ),
                    t.createElement(
                      "div",
                      {
                        className: I().notificationList,
                      },
                      Object.keys(S)
                        .sort()
                        .map((de, ve) =>
                          t.createElement(
                            s.A,
                            {
                              text: de,
                              htmlFor: `field-radio-${ve}`,
                              type: "inline",
                              cursor: "pointer",
                              key: de,
                            },
                            t.createElement(i.A, {
                              id: `field-radio-${ve}`,
                              name: "picked",
                              value: de,
                              checked: Ae.picked === de,
                              onChange: () => q(de, ae),
                            })
                          )
                        )
                    ),
                    t.createElement(
                      s.A,
                      {
                        text: "Notification Data",
                        optional: !0,
                      },
                      t.createElement(u.A, {
                        name: "notification_data",
                        id: "notification_data",
                        placeholder:
                          'Ex: { "Field Name": "<String Value>", "Field Name": <Numeric Value> }',
                        onChange: V,
                        value: H,
                        className: I().textArea,
                      })
                    ),
                    t.createElement(
                      "div",
                      {
                        className: I().alert,
                      },
                      t.createElement(
                        m.Ay,
                        {
                          type: "boxed",
                          level: "warning",
                          icon: "warning",
                          align: "left",
                        },
                        t.createElement(
                          "span",
                          {
                            className: I().alertText,
                          },
                          t.createElement(
                            "b",
                            null,
                            "Some Megaphone notifications may not be dispatched due to various reasons, such as but not limited to:"
                          ),
                          t.createElement(
                            "li",
                            null,
                            " Missing notification data "
                          ),
                          t.createElement(
                            "li",
                            null,
                            "The notification being part of an experiment "
                          ),
                          "For questions or further assistance, reach out to us at",
                          " ",
                          t.createElement(
                            "b",
                            null,
                            t.createElement(
                              v.A,
                              {
                                href: "https://app.slack.com/client/E12KS1G65/C0765PUTPDL",
                                target: "_blank",
                              },
                              "#proj-megaphone-dispatcher"
                            )
                          ),
                          "."
                        )
                      )
                    ),
                    x &&
                      t.createElement(
                        "div",
                        {
                          className: I().formError,
                        },
                        "Please select a notification."
                      ),
                    U &&
                      t.createElement(
                        "div",
                        {
                          className: I().formError,
                        },
                        "There was an error parsing Notification Data, please try again."
                      ),
                    t.createElement(
                      n.Ay,
                      {
                        autoClogProps: f,
                        onClick: X,
                        disabled: z,
                      },
                      "Dispatch"
                    )
                  );
                }
              )
            );
          }, "DispatcherForm");
        p.displayName = "DispatcherForm";
      },
      4445888975: (W, A, e) => {
        "use strict";
        e.d(A, {
          R: () => a,
          h: () => r,
        });
        var t = e(5824283093),
          n = e(6122756707),
          s = e(2562405183),
          i = e(3603672985),
          d = e(716227588),
          o = e(4724591729);
        const a = _(() => {
            const c = !(0, o.KV)() || (0, o.b3)(),
              u = (0, n.wA)(),
              l = (0, s.d4)(d.y$);
            return (
              (0, t.useEffect)(() => {
                const m = _((v) => {
                  c &&
                    v.ctrlKey &&
                    v.shiftKey &&
                    v.key === "M" &&
                    u((0, i.cv)(!l));
                }, "handleKeydown");
                return (
                  window.addEventListener("keydown", m),
                  () => {
                    window.removeEventListener("keydown", m);
                  }
                );
              }, [c, u, l]),
              {
                shouldShowDispatcherViewer: l,
              }
            );
          }, "useDispatcherToggleShortcut"),
          r = _(function () {
            let c =
              arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : !1;
            const [u, l] = (0, t.useState)(c),
              m = (0, t.useCallback)((v) => {
                l(v);
              }, []);
            return {
              isModalOpen: u,
              toggleModal: m,
            };
          }, "useModal");
      },
      5062503310: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => t,
        });
        const t = {
          content: {
            top: "50%",
            left: "50%",
            right: "auto",
            bottom: "auto",
            transform: "translate(-50%, -50%)",
            border: 0,
            padding: 0,
            background: "transparent",
          },
          overlay: {
            backgroundColor: "rgba(208, 208, 208, 0.4)",
            zIndex: 1e4,
          },
        };
      },
      4902318931: (W, A, e) => {
        "use strict";
        e.d(A, {
          $W: () => U,
          sl: () => G,
          Ay: () => H,
        });
        var t = e(5824283093),
          n = e(6122756707),
          s = e(2562405183),
          i = e(716227588),
          d = e(6259241484),
          o = e(7487228876),
          a = e(7003004874),
          r = e(1655938719),
          c = e(2938177083),
          u = e(101973425),
          l = e(4481313819),
          m = e(2567914105),
          v = e(3603672985),
          E = e(9881565722),
          T = e(4761125736),
          g = e(4798756512),
          I = e(4003148341),
          f = e(4244379358),
          y = e(6258289677),
          M = e(9758574739),
          p = e(2312625946),
          O = e(4445888975),
          C = e(5062503310),
          h = e(397939223),
          D = e.n(h);
        const P = _((F) => {
          let { megaphoneSpaceName: V, notificationList: X } = F;
          const { isModalOpen: q, toggleModal: oe } = (0, O.h)(!1);
          return t.createElement(
            "div",
            {
              className: D().container,
            },
            t.createElement(
              p.Ay,
              {
                tip: V,
                position: "top",
                zIndex: "menu_above_fs",
              },
              t.createElement("span", {
                className: D().dispatcherViewerIcon,
                role: "button",
                tabIndex: 0,
                "aria-label": "Open Viewer Modal",
                onClick: () => oe(!0),
              })
            ),
            t.createElement(
              y.A,
              {
                isOpen: q,
                onRequestClose: () => oe(!1),
                style: C.A,
              },
              t.createElement(
                "div",
                {
                  className: D().dispatcherViewerDetails,
                },
                t.createElement(M.e, {
                  megaphoneSpaceName: V,
                  notificationList: X,
                  onCloseModal: () => oe(!1),
                })
              )
            )
          );
        }, "DispatcherViewer");
        P.displayName = "DispatcherViewer";
        const S = (0, f.A)(P),
          b = _((F) => {
            let { children: V, megaphoneSpaceName: X, notificationList: q } = F;
            const { shouldShowDispatcherViewer: oe } = (0, O.R)();
            return t.createElement(
              t.Fragment,
              null,
              oe &&
                t.createElement(
                  "div",
                  {
                    className: D().dispatcherViewer,
                  },
                  t.createElement(S, {
                    megaphoneSpaceName: X,
                    notificationList: q,
                  })
                ),
              V
            );
          }, "DispatcherToggle");
        b.displayName = "DispatcherToggle";
        const K = (0, f.A)(b),
          x = {
            isInMegaphoneContainerContext: !0,
          },
          B = {
            isInMegaphoneContainerContext: !1,
          },
          U = (0, t.createContext)(B),
          R = _((F) => {
            let {
              fetchDataOnMount: V,
              notifications: X,
              spaceName: q,
              children: oe,
              shouldAlwaysRenderChildren: z,
              shouldPassPropsToChildren: Ae,
              channelScopedId: ae,
              componentClassName: de,
              ...ve
            } = F;
            var Se;
            const Ee = (0, n.wA)(),
              be = (0, I.x)(),
              Ce = (0, s.d4)(m.oY),
              Z = (0, s.d4)(i.up),
              $ = (0, s.d4)(
                (ke) =>
                  (0, T._Z)(ke, "megaphone_coachmark_suppression") === "on"
              ),
              { isInsideModal: N } = (0, E.k)(),
              L = (0, s.d4)((ke) => (0, i.Hp)(ke, q, ae)),
              w = (0, s.d4)((ke) => (0, i.OL)(ke, q, ae)),
              k = (0, t.useCallback)(() => {
                Ee(
                  (0, a.A)({
                    notificationName: L,
                    action: d.hw.IMPRESSION,
                  })
                );
              }, [Ee, L]),
              J = (0, t.useCallback)(
                (ke) => {
                  Ee(
                    (0, c.A)({
                      spaceName: q,
                      action: ke,
                    })
                  );
                },
                [Ee, q]
              ),
              ee = (0, t.useCallback)(() => {
                Ee(
                  (0, r.iR)({
                    event: {
                      type: d.jo.REQUEST_SPACES,
                      spaces: [q],
                    },
                  })
                );
              }, [Ee, q]),
              ne = _(
                () =>
                  z
                    ? Ae && t.isValidElement(oe)
                      ? t.cloneElement(oe, {
                          ...ve,
                        })
                      : t.createElement(
                          K,
                          {
                            megaphoneSpaceName: q,
                            notificationList: X,
                          },
                          oe
                        )
                    : t.createElement(
                        K,
                        {
                          megaphoneSpaceName: q,
                          notificationList: X,
                        },
                        null
                      ),
                "maybeRenderChildren"
              );
            (ne.displayName = "maybeRenderChildren"),
              (0, t.useEffect)(() => {
                q && V && ee();
              }, [V, q, ee]);
            const pe =
                X == null || (Se = X[L]) === null || Se === void 0
                  ? void 0
                  : Se.component,
              Me = $ && pe && !N && Ce && q === d.xu.IN_PRODUCT_COACHMARK;
            if (Me && !Z) {
              Ee((0, v.co)(!0));
              const ke = be.createMetricsTrace({
                  label: "megaphone",
                  samplingOptions: {
                    sampleType: g.tS.SESSION,
                    sampleRate: 0.1,
                  },
                }),
                ge = ke.count({
                  name: "megaphone_coachmark_suppress",
                });
              ge.addTags({
                notification: L,
              }),
                ge.close(),
                be.reportTrace(ke);
            }
            return !q || !L || ($ && q === d.xu.IN_PRODUCT_COACHMARK && Z) || Me
              ? ne()
              : pe
              ? t.createElement(
                  l.A,
                  {
                    megaphoneSpaceName: q,
                    megaphoneNotificationName: L,
                  },
                  t.createElement(
                    U.Provider,
                    {
                      value: x,
                    },
                    t.createElement(
                      K,
                      {
                        megaphoneSpaceName: q,
                        notificationList: X,
                      },
                      null
                    ),
                    t.createElement(
                      t.Suspense,
                      {
                        fallback: null,
                      },
                      t.createElement(
                        pe,
                        {
                          ...w,
                          recordNotificationEventImpression: k,
                          recordAndClearNotificationEvent: J,
                          notificationName: L,
                          className: de,
                          channelScopedId: ae,
                          ...ve,
                        },
                        oe
                      )
                    )
                  )
                )
              : (X ||
                  (0, o.h)({
                    spaceName: q,
                    notificationName: L,
                  }),
                ne());
          }, "MegaphoneContainer");
        R.displayName = "MegaphoneContainer";
        const G = (0, u.Ay)(R),
          H = R;
      },
      3656161791: (W, A, e) => {
        "use strict";
        e.d(A, {
          C: () => t,
        });
        const t = {
          showStrangerProfile: !1,
          hideRestriction: !0,
          maybeShowPresenceIndicator: !1,
          maybeShowTitle: !1,
          maybeShowVerifiedFooter: !0,
          maybeShowEmailField: {
            showLabel: !1,
            showValue: !0,
          },
          showFullProfileLink: !1,
          showOrganizationField: {
            showLabel: !0,
            showValue: !0,
          },
          showProfilePicture: !0,
          showMemberProfileFields: !1,
          showMemberProfileButtons: !1,
        };
      },
      1293324111: (W, A, e) => {
        "use strict";
        e.d(A, {
          V: () => n,
        });
        var t = e(5824283093);
        class n extends t.PureComponent {
          render() {
            return t.createElement(t.Fragment, null, this.props.children);
          }
        }
        _(n, "PassThrough"), (n.displayName = "PassThrough");
      },
      8950789382: (W, A, e) => {
        "use strict";
        e.d(A, {
          s: () => f,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(1031947056),
          i = e(352142497),
          d = e(82287009),
          o = e(8999545852),
          a = e(3193155968),
          r = e(7573598208),
          c = e(3110884894),
          u = e(6514066170),
          l = e(755982243),
          m = e(796111729),
          v = e(485355941),
          E = e(6695353875),
          T = e(9932860381),
          g = e(7176966205),
          I = e(9629572172);
        const f = (0, s.Ay)(
          "Opens a view in a new child window",
          (function () {
            var y = (0, t.coroutine)(function* (M, p, O, C) {
              let { viewId: h, params: D, clogParams: P } = O;
              if (!(0, v.M2)()) return;
              const S = p(),
                { isMainWindow: b } = C(I.U);
              if ((0, E.yZ)(S) && b && (0, T.Xy)(h)) {
                M(
                  (0, g.$)({
                    viewId: h,
                    params: D,
                  })
                );
                return;
              }
              let K = !1;
              if ((0, u.A)(S, h)) {
                let x,
                  B = {
                    [a.mq.Primary]: {
                      id: h,
                      params: D,
                      viewType: (0, r.A)(h),
                    },
                  };
                B = M(
                  (0, o.VO)({
                    viewSet: B,
                    windowId: a.N2,
                  })
                );
                const U = (0, l.w)(h),
                  R = U;
                if (h === "thread" && D != null && D.threadId) {
                  const G = (0, c.Sb)(
                    D == null ? void 0 : D.threadId
                  ).channelId;
                  (K = !0),
                    (B = {
                      [a.mq.Primary]: {
                        id: G || (D == null ? void 0 : D.entityId),
                        params: void 0,
                        viewType: i.D.Channel,
                      },
                      [a.mq.Secondary]: {
                        id: h,
                        params: D,
                        viewType: i.D.Thread,
                      },
                    }),
                    (x = a.mq.Secondary);
                }
                h === "channel_canvas" &&
                  (B = {
                    [a.mq.Primary]: {
                      id: D == null ? void 0 : D.channelId,
                      params: void 0,
                      viewType: i.D.Channel,
                    },
                    [a.mq.Secondary]: {
                      id: "channel_canvas",
                      params: D,
                      viewType: i.D.ChannelCanvas,
                    },
                  }),
                  M(
                    (0, d.Bb)({
                      viewSet: B,
                      shouldNavigateInContext: U,
                      shouldShowSearch: R,
                      ...(x && {
                        containerOrigin: x,
                      }),
                      clogParams: P ?? {
                        uiComponentName: origin,
                        entryPoint: "cmd_click",
                      },
                      forceSingleColumnMode: K,
                    })
                  );
              } else
                (0, m.Ay)({
                  getState: p,
                }).action(
                  "CHILD-WINDOWS",
                  "skipped opening a Conversation View because the ID is not supported:",
                  h
                );
            });
            return function (M, p, O, C) {
              return y.apply(this, arguments);
            };
          })()
        );
        f.meta = {
          name: "createThunk",
          key: "createThunkmaybeOpenInWindow",
          description: "Opens a view in a new child window",
        };
      },
      3652828077: (W, A, e) => {
        "use strict";
        e.d(A, {
          O: () => c,
        });
        var t = e(5824283093),
          n = e(2844658640),
          s = e.n(n),
          i = e(1641606663),
          d = e(2233780559);
        function o() {
          return (
            (o =
              Object.assign ||
              function (u) {
                for (var l = 1; l < arguments.length; l++) {
                  var m = arguments[l];
                  for (var v in m)
                    Object.prototype.hasOwnProperty.call(m, v) && (u[v] = m[v]);
                }
                return u;
              }),
            o.apply(this, arguments)
          );
        }
        _(o, "_extends");
        const a = (0, d.eF)(d.vt.REACT_VIRTUALIZED, (u) => s()(u));
        function r(u) {
          let { refToForward: l, ...m } = u;
          const { windowRef: v } = (0, t.useContext)(i.Mn),
            E = a(v.deref()).List;
          return t.createElement(
            E,
            o(
              {
                ref: l,
              },
              m
            )
          );
        }
        _(r, "PortableReactVirtualizedList"),
          (r.displayName = "PortableReactVirtualizedList");
        const c = t.forwardRef((u, l) =>
          t.createElement(
            r,
            o(
              {
                refToForward: l,
              },
              u
            )
          )
        );
      },
      7439773700: (W, A, e) => {
        "use strict";
        e.d(A, {
          C_: () => u,
          MH: () => m,
          Zj: () => E,
          ik: () => T,
          kh: () => o,
          tl: () => c,
          tw: () => l,
          vu: () => v,
          xu: () => g,
        });
        var t = e(3564619745),
          n = e(735940183),
          s = e(9421999304);
        const i = new n.Ay("prefs"),
          d = _(function () {
            let I =
              arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : (0, s.JK)();
            return t.nW[I];
          }, "getLocaleSpecificDefaults"),
          o = _(function () {
            let I =
              arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : (0, s.JK)();
            return {
              default: !0,
              fontFamily: d(I),
              label: t.qH,
              value: "lato",
            };
          }, "getDefaultFontOption"),
          a = _(() => {
            const I = i.t("{font} (Default)", {
                font: "Lato",
              }),
              f = i.t("{font} (System)", {
                font: t.qL,
              }),
              y = t.qL
                ? {
                    label: f,
                    value: "system-font",
                    fontFamily: t.fd,
                  }
                : void 0,
              M = [
                {
                  ...o(),
                  label: I,
                },
                t.xw,
                t.ew,
                t.Ig,
                t.k7,
                t.zZ,
                t.Z2,
                t.qS,
              ];
            return y ? M.concat([y]) : M;
          }, "getSupportedFontOptions"),
          r = {
            default: !1,
            label: "Custom Font",
            value: "custom-font",
          },
          c = _((I) => {
            let { includeCustomFont: f } = I;
            const y = a();
            return f ? y.concat([r]) : y;
          }, "getAllFontOptions"),
          u = _((I) => {
            let { customFont: f, locale: y } = I;
            const M = y || (0, s.JK)(),
              p = d(M);
            return {
              ...r,
              fontFamily: `${f} , ${p}`,
            };
          }, "getCustomFontOption"),
          l = _(
            (I) =>
              I.slice().sort((f, y) => {
                var M, p;
                return ((M = f == null ? void 0 : f.label) !== null &&
                M !== void 0
                  ? M
                  : "") <
                  ((p = y == null ? void 0 : y.label) !== null && p !== void 0
                    ? p
                    : "")
                  ? -1
                  : 1;
              }),
            "sortFonts"
          ),
          m = _(
            (I) => Object.values(t.xo).some((f) => f.includes(I.toLowerCase())),
            "isSupportedFont"
          ),
          v = _((I) => I.default === !0, "isDefaultFont"),
          E = _(
            (I) =>
              Object.keys(t.xo).find((f) => t.xo[f].includes(I.toLowerCase())),
            "getSupportedFontValue"
          ),
          T = _((I) => {
            let { fontValue: f, includeCustomFont: y } = I;
            var M;
            return (M = c({
              includeCustomFont: y,
            }).find((p) => p.value === f)) !== null && M !== void 0
              ? M
              : void 0;
          }, "getFontOptionForFontValue"),
          g = _((I) => !t.hb.includes(I), "isCustomTypefaceSupportedLocale");
      },
      4173072539: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => a,
        });
        var t = e(5824283093),
          n = e(134846761),
          s = e(6839188756),
          i = e(2312625946),
          d = e(6968387112);
        const o = _((r) => {
          let { invitingTeam: c } = r;
          const u = c.domain && `${(0, s.k7)(c.id, c.domain)}.${(0, d.Xk)()}`,
            l = t.createElement(n.A, {
              id: c.id,
              team: c,
              shouldMaybeOpenOrgCard: !0,
              shouldMaybeShowVerified: !0,
              bold: !0,
              tabIndex: u ? 0 : void 0,
            });
          return u
            ? t.createElement(
                i.Ay,
                {
                  tip: u,
                },
                t.createElement("span", null, l)
              )
            : l;
        }, "InvitingTeamName");
        o.displayName = "InvitingTeamName";
        const a = o;
      },
      3694049677: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
        });
        var t = e(5824283093),
          n = e(9574544148),
          s = e(2312625946);
        const i = _((o) => {
          let { invitingUser: a, showEmailTooltip: r = !0 } = o;
          var c;
          const u =
              a == null || (c = a.profile) === null || c === void 0
                ? void 0
                : c.email,
            l = r && u,
            m = t.createElement(n.A, {
              member: a,
              skipPrefCompliance: !0,
              tabIndex: l ? 0 : void 0,
            });
          return l
            ? t.createElement(
                s.Ay,
                {
                  tip: u,
                },
                m
              )
            : m;
        }, "InvitingUserName");
        i.displayName = "InvitingUserName";
        const d = i;
      },
      2408732225: (W, A, e) => {
        "use strict";
        e.d(A, {
          n: () => c,
        });
        var t = e(5824283093),
          n = e(3656161791),
          s = e(4775127335),
          i = e(698013937),
          d = e(6415587347);
        let o = null;
        const r = _(
          () => (
            o === null &&
              (o =
                document &&
                document.documentElement &&
                document.documentElement.hasAttribute("data-primer")),
            o
          ),
          "isPrimer"
        );
        class c extends t.PureComponent {
          render() {
            var l, m;
            const {
                className: v,
                team: E,
                user: T,
                size: g,
                allowDefaultProfileImage: I,
                fallbackUserIcon: f,
                fallbackUserIcon2x: y,
                isInteractive: M,
                hideUserIcon: p,
              } = this.props,
              O = !!(
                !((l = T.profile) === null || l === void 0) && l.is_custom_image
              ),
              C = !!f || !!y,
              h = !(
                !((m = E.icon) === null || m === void 0) && m.image_default
              ),
              { imageUrl: D, imageUrl2x: P } = this.getProfileImages();
            if ((O || I || C) && !p) {
              const S = T.profile.real_name;
              return t.createElement(s.f1, {
                className: v,
                imageUrl: O || I ? D : f,
                imageUrl2x: O || I ? P : y,
                memberOrBotName: S,
                size: g,
                teamId: E.id,
                team: E,
                isInteractive: M && !r() && !!T.id,
                renderCustomBadge: this.renderTeamBadge,
                showCard: !0,
                userId: T.id,
                profileCardProps: {
                  allowOutsideOfSonic: !0,
                  maybeAllowInteract: !1,
                  ...n.C,
                },
              });
            }
            return h
              ? t.createElement(i.U, {
                  teamName: E.name,
                  icon: E.icon,
                  size: g,
                  className: v,
                })
              : null;
          }
          constructor(l) {
            super(l),
              (this.renderTeamBadge = () => null),
              (this.getProfileImages = () => {
                var g;
                const { team: I, user: f, size: y } = this.props,
                  M = (0, d.Ay)({
                    size: y,
                    teamOrEnterpriseId: I.id,
                    memberId: f.id,
                    avatarHash:
                      (g = f.profile) === null || g === void 0
                        ? void 0
                        : g.avatar_hash,
                  }),
                  p = (M == null ? void 0 : M.imageUrl) || "",
                  O = M != null && M.imageUrl2x ? `${M.imageUrl2x} 2x` : "";
                return {
                  imageUrl: p,
                  imageUrl2x: O,
                };
              });
            const {
              team: m,
              allowTeamInitials: v,
              shouldRenderTeamBadge: E,
              teamIconSize: T,
            } = l;
            E &&
              (this.renderTeamBadge = (0, s.fp)({
                isExternal: !0,
                team: m,
                teamId: m.id,
                allowTeamInitials: v,
                teamIconSize: T,
              }));
          }
        }
        _(c, "UserIcon"),
          (c.displayName = "UserIcon"),
          (c.defaultProps = {
            shouldRenderTeamBadge: !1,
            allowTeamInitials: !1,
            allowDefaultProfileImage: !1,
            className: "p-shared_channel_invite_header__avatar",
            isInteractive: !0,
            hideUserIcon: !1,
          });
      },
      7599421656: (W, A, e) => {
        "use strict";
        e.d(A, {
          B: () => s,
        });
        var t = e(2384831516),
          n = e(4761125736);
        const s = (0, t.Mz)(
          (i) => (0, n._Z)(i, "shortcuts_workspace_picker") === "on"
        );
        s.meta = {
          name: "createSelector",
          key: "createSelectorshouldShowShortcutsSpeedbump",
          description: (i) =>
            (0, n._Z)(i, "shortcuts_workspace_picker") === "on",
        };
      },
      9874616273: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => i,
        });
        var t = e(5824283093),
          n = e(8214116048);
        const s = _((d) => {
          let {
            width: o = 20,
            height: a = 20,
            className: r = "",
            theme: c,
          } = d;
          const u =
            c === n.Sx.Dark
              ? "/img/slack_logo_white_text.svg"
              : "/img/slack_logo.svg";
          return t.createElement(
            "div",
            {
              role: "banner",
            },
            t.createElement("img", {
              className: r,
              src: u,
              alt: "Slack",
              width: o,
              height: a,
            })
          );
        }, "SlackLogo");
        s.displayName = "SlackLogo";
        const i = s;
      },
      6989432693: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => u,
        });
        var t = e(5824283093),
          n = e(2562405183),
          s = e(8276911661),
          i = e(8921478798),
          d = e(8170643398),
          o = e(735940183),
          a = e(7576317051);
        const r = new o.Ay("channel_token"),
          c = _((l) => {
            let { userId: m, isFirst: v, isSelf: E } = l;
            var T;
            const g =
              (T = (0, n.d4)((f) => (0, s.nv)(f, m))) !== null && T !== void 0
                ? T
                : void 0;
            let I = (0, n.d4)((f) => (0, i.I)(f, m));
            return (0, d.t8)(g)
              ? t.createElement(a.A, {
                  type: "unknown",
                  subtler: !0,
                })
              : (0, d.QR)(g)
              ? t.createElement(a.A, {
                  type: "non-existent",
                  subtler: !0,
                })
              : (E && (I = v ? r.t("You") : r.t("you")),
                t.createElement(t.Fragment, null, I));
          }, "TooltipMemberName");
        c.displayName = "TooltipMemberName";
        const u = t.memo(c);
      },
      8011352381: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(1035168942);
        const i = t.forwardRef((o, a) => {
          let {
            children: r,
            lines: c,
            breakWords: u = !0,
            withTooltip: l,
            shouldForceTooltipVisible: m,
            customTooltipText: v,
            tooltipClassName: E,
          } = o;
          const T = {
              "--lines": c,
            },
            g = t.createElement(
              "span",
              {
                className: (0, n.A)("c-truncate", {
                  "c-truncate--break_words": u,
                }),
                style: T,
                ref: a,
              },
              r
            );
          return l
            ? t.createElement(
                s.A,
                {
                  tip: v || r,
                  zIndex: "above_fs",
                  shouldForceVisible: m,
                  tipClassName: E,
                },
                g
              )
            : g;
        });
        i.displayName = "Truncate";
        const d = i;
      },
      924300050: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => Ue,
        });
        var t = e(5824283093),
          n = e(980293773),
          s = e(6820844347),
          i = e.n(s),
          d = e(5006029593),
          o = e.n(d),
          a = e(7749140866),
          r = e.n(a),
          c = e(7626894131),
          u = e.n(c),
          l = e(29804293),
          m = e.n(l),
          v = e(6636363964),
          E = e.n(v),
          T = e(5913806097),
          g = e.n(T),
          I = e(9916635837),
          f = e.n(I),
          y = e(555040584),
          M = e.n(y),
          p = e(8187362417),
          O = e.n(p),
          C = e(2005200212),
          h = e.n(C),
          D = e(2563333228),
          P = e.n(D),
          S = e(5760619139),
          b = e.n(S),
          K = e(668694090),
          x = e.n(K),
          B = e(6754250580),
          U = e.n(B),
          R = e(1714394002),
          G = e.n(R),
          H = e(6435768457),
          F = e.n(H),
          V = e(7417918922),
          X = e.n(V),
          q = e(6869712815),
          oe = e.n(q),
          z = e(8089589194),
          Ae = e.n(z),
          ae = e(5748605292),
          de = e.n(ae),
          ve = e(4071181961),
          Se = e.n(ve),
          Ee = e(8071475775),
          be = e.n(Ee),
          Ce = e(9733499682),
          Z = e.n(Ce),
          $ = e(9753292423),
          N = e.n($),
          L = e(3289703835),
          w = e.n(L),
          k = e(1347747715),
          J = e.n(k),
          ee = e(6050136004),
          ne = e.n(ee),
          pe = e(7949425452),
          Me = e(2683115972),
          ke = e(5220162857),
          ge = e(4302969948),
          fe = e(1388835426),
          re = e(2664504268),
          le = e(9598582073),
          Re = e.n(le);
        function ye() {
          return (
            (ye =
              Object.assign ||
              function (Ke) {
                for (var Ze = 1; Ze < arguments.length; Ze++) {
                  var Q = arguments[Ze];
                  for (var ie in Q)
                    Object.prototype.hasOwnProperty.call(Q, ie) &&
                      (Ke[ie] = Q[ie]);
                }
                return Ke;
              }),
            ye.apply(this, arguments)
          );
        }
        _(ye, "_extends");
        const Te = {
            elementName: "explore_pro_features_btn",
            onClick: {
              enableClogAction: !0,
            },
          },
          De = _((Ke) => {
            let {
              featureList: Ze,
              modalTitle: Q,
              modalSubtitle: ie,
              buttonText: Ve,
              onCTAClick: xe,
              customFooter: je,
              maxWidth: Fe,
              onRequestClose: He,
              UNSAFE_parentSelector: Oe,
              videoTitle: Ye,
              experimentPnpE2eGroupOn: at,
            } = Ke;
            const _t = _(
                () =>
                  t.createElement(ke.Ay, {
                    listItems: Ze,
                  }),
                "renderFeatureList"
              ),
              pt = {
                closeModal: He,
                shouldCloseOnOverlayClick: !0,
                centered: !0,
                maxWidth: Fe,
                UNSAFE_parentSelector: Oe,
              },
              { translation: Qe, enableMediaCaptions: ct } = (0, fe.S)({
                "de-DE": at ? u() : U(),
                "en-GB": at ? m() : G(),
                "en-US": at ? r() : F(),
                "es-ES": at ? g() : X(),
                "es-LA": at ? E() : oe(),
                "fr-FR": at ? f() : Ae(),
                "it-IT": at ? b() : de(),
                "ja-JP": at ? x() : Se(),
                "ko-KR": at ? M() : be(),
                "pt-BR": at ? O() : Z(),
                "zh-CN": at ? h() : N(),
                "zh-TW": at ? P() : w(),
              }),
              Pt = (0, re.A)(),
              zt = (0, re.A)(),
              an = [Pt, zt].join(" "),
              Qt = (0, t.useMemo)(() => {
                let tn = o(),
                  Ht = ne();
                return (
                  at && ((tn = i()), (Ht = J())),
                  {
                    video: tn,
                    videoPoster: Ht,
                  }
                );
              }, [at]);
            return t.createElement(
              n.dW,
              ye(
                {
                  closeButtonTone: "dark",
                  className: Re().modalBackground,
                  labelledby: an,
                },
                pt
              ),
              t.createElement(
                n.$m,
                {
                  className: Re().modalBackground,
                },
                t.createElement(
                  "div",
                  {
                    className: Re().bodyContainer,
                  },
                  t.createElement(
                    "div",
                    {
                      className: Re().listContainer,
                    },
                    t.createElement(pe.Ay, {
                      ariaHidden: !0,
                      className: Re().proBadge,
                      size: pe.vj.Large,
                    }),
                    t.createElement(
                      "h1",
                      {
                        id: Pt,
                        className: Re().title,
                      },
                      Q
                    ),
                    t.createElement(
                      "h2",
                      {
                        id: zt,
                        className: Re().subtitle,
                      },
                      ie
                    ),
                    _t(),
                    je ||
                      t.createElement(
                        Me.Ay,
                        {
                          size: "medium",
                          onClick: xe,
                          className: Re().ctaButton,
                          autoClogProps: Te,
                        },
                        Ve
                      )
                  ),
                  t.createElement(
                    "div",
                    {
                      className: Re().videoContainer,
                    },
                    t.createElement(
                      "div",
                      {
                        className: Re().videoPlayer,
                      },
                      t.createElement(ge.A, {
                        src: Qt.video,
                        vtt: Qe,
                        enableMediaCaptions: ct,
                        videoPoster: Qt.videoPoster,
                        enableControls: !0,
                        autoPlay: !1,
                        title: Ye,
                      })
                    )
                  )
                )
              )
            );
          }, "Modal");
        De.displayName = "Modal";
        const Ue = De;
      },
      5220162857: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => K,
          L_: () => P,
          XC: () => h,
          wj: () => D,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(7260399618),
          i = e.n(s),
          d = e(3555024406),
          o = e.n(d),
          a = e(6362113145),
          r = e.n(a),
          c = e(5612399517),
          u = e.n(c),
          l = e(9754713110),
          m = e.n(l),
          v = e(8644018899),
          E = e.n(v),
          T = e(8720577475),
          g = e.n(T),
          I = e(735940183),
          f = e(8683010724),
          y = e(3801841745),
          M = e(2689960678),
          p = e(6696573656),
          O = e.n(p);
        const C = new I.Ay("trial_expiration_modals"),
          h = {
            history: m(),
            headphones: r(),
            canvas: o(),
            buildings: E(),
            bolt: i(),
            play: i(),
            tools: g(),
            lists: u(),
          },
          D = {
            history: () =>
              e
                .e("gantry-v2-async-lottie-trial-modal-messages.json")
                .then(e.t.bind(e, 4244940908, 23)),
            headphones: () =>
              e
                .e("gantry-v2-async-lottie-trial-modal-huddles.json")
                .then(e.t.bind(e, 3020879619, 23)),
            canvas: () =>
              e
                .e("gantry-v2-async-lottie-trial-modal-canvas.json")
                .then(e.t.bind(e, 5417726912, 23)),
            buildings: () =>
              e
                .e("gantry-v2-async-lottie-trial-modal-slack-connect.json")
                .then(e.t.bind(e, 6342268209, 23)),
            play: () =>
              e
                .e("gantry-v2-async-lottie-trial-modal-apps.json")
                .then(e.t.bind(e, 9702269844, 23)),
            bolt: () =>
              e
                .e("gantry-v2-async-lottie-trial-modal-apps.json")
                .then(e.t.bind(e, 9702269844, 23)),
            tools: () =>
              e
                .e("gantry-v2-async-lottie-trial-modal-templates.json")
                .then(e.t.bind(e, 8131963541, 23)),
            lists: () =>
              e
                .e("gantry-v2-async-lottie-trial-modal-lists.json")
                .then(e.t.bind(e, 1734664547, 23)),
          },
          P = _(function () {
            let { experimentPnpE2eGroupOn: x = !1, newCopyVariant: B = !1 } =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : {},
              U = {
                history: {
                  iconName: "history",
                  title: C.t("Unlimited message and file history"),
                  text: C.t(
                    "Keep and find answers in your team\u2019s archive"
                  ),
                },
                huddles: {
                  iconName: "headphones",
                  title: C.t("Group huddles"),
                  text: C.t("Voice and video conversations with your team"),
                },
                files: {
                  iconName: "canvas",
                  title: C.t("Canvases and lists"),
                  text: C.t("Share and track work in Slack"),
                },
                slackConnect: {
                  iconName: "buildings",
                  title: C.t("Slack Connect channels"),
                  text: C.t("Work with people from other organizations"),
                },
                workflows: {
                  iconName: "bolt",
                  title: C.t("More apps and unlimited workflows"),
                  text: C.t(
                    "Connect tools to Slack and build no-code automations"
                  ),
                },
              };
            return (
              B &&
                (U = {
                  ...U,
                  history: {
                    ...U.history,
                    title: C.t("Unlimited message history", {
                      fallbackHash: "df3b6ffa2b734c91a477ef99c651e8368a8de52a",
                    }),
                    text: C.t(
                      "Search and view all of your team\u2019s public messages and files, which are stored indefinitely on a paid plan.",
                      {
                        fallbackHash:
                          "6b06612199a2ba4edd538aeab59a0729f0157104",
                      }
                    ),
                  },
                  huddles: {
                    ...U.huddles,
                    title: C.t("Huddles without time limits", {
                      fallbackHash: "7201be81e161aeed0ac6d3e86ad24f0a981b9097",
                    }),
                    text: C.t(
                      "Talk things out live with audio and video huddles. Share your screen, annotate and enable live captions.",
                      {
                        fallbackHash:
                          "9630412b89af32fa5fa77827dafce24e4ff1c61b",
                      }
                    ),
                  },
                  tools: {
                    iconName: "tools",
                    title: C.t("Premium productivity tools and templates", {
                      fallbackHash: "b65871634e6d8a24479ff1ef8f00bc312fdb516a",
                      fallbackHashNs: "solution_gallery",
                    }),
                    text: C.t(
                      "Share, track and manage work with canvases, lists, workflows and more.",
                      {
                        fallbackHash:
                          "46c05e3ac87ab9122d103b976d20f8b16c468e2a",
                        fallbackHashNs: "solution_gallery",
                      }
                    ),
                  },
                  slackConnect: {
                    ...U.slackConnect,
                    title: C.t("Work with people at other organizations", {
                      fallbackHash: "213e16e29cb2be31a8927a8749fbc5c0e997cefe",
                    }),
                    text: C.t(
                      "Make collaborating with outside partners and clients as fast and simple as working with in-house teams.",
                      {
                        fallbackHash:
                          "213e16e29cb2be31a8927a8749fbc5c0e997cefe",
                      }
                    ),
                  },
                  workflows: {
                    ...U.workflows,
                    iconName: "play",
                    title: C.t("More connected apps", {
                      fallbackHash: "d8abd1625ab6793a75a91c4f759f6deb8aa56399",
                      fallbackHashNs: "reverse-trial",
                    }),
                    text: C.t(
                      "Schedule meetings, file tickets, track tasks, and more, by bringing tools your team already uses into Slack.",
                      {
                        fallbackHash:
                          "1a8374bae29b9a54d537703c4906950192fbb822",
                        fallbackHashNs: "reverse-trial",
                      }
                    ),
                  },
                }),
              x &&
                (U = {
                  ...U,
                  huddles: {
                    ...U.huddles,
                    title: C.t("Huddles without time limits"),
                    text: C.t("Voice and video conversations over 30 minutes"),
                  },
                  slackConnect: {
                    ...U.slackConnect,
                    title: C.t("Slack Connect"),
                  },
                  workflows: {
                    ...U.workflows,
                    text: C.t("Build no-code workflows and add up to 10 apps"),
                  },
                }),
              [
                U.history,
                U.huddles,
                ...(U.tools ? [U.tools] : M.Ml),
                ...(B ? M.Ml : [U.files]),
                U.slackConnect,
                U.workflows,
              ]
            );
          }, "getFeatureList"),
          S = _((x) => {
            let { iconClassName: B, iconName: U, title: R, text: G } = x;
            return t.createElement(
              y.A,
              {
                alignItems: "flex-start",
              },
              t.createElement(
                "div",
                {
                  className: (0, n.A)(O().icon, B),
                },
                t.createElement(f.A, {
                  name: U,
                  size: "20",
                  "aria-describedby": U,
                  role: "img",
                  "data-qa": `icon-${U}`,
                })
              ),
              t.createElement(
                y.A,
                {
                  flexDirection: "column",
                },
                t.createElement(
                  "div",
                  {
                    className: O().title,
                  },
                  R
                ),
                t.createElement(
                  "div",
                  {
                    className: O().text,
                  },
                  G
                )
              )
            );
          }, "FeaturesListItem");
        S.displayName = "FeaturesListItem";
        const K = _((x) => {
          let { className: B, iconClassName: U, listItems: R } = x;
          return t.createElement(
            y.A,
            {
              gap: 12,
              flexDirection: "column",
              className: (0, n.A)(O().featuresListContainer, B),
            },
            R.map((G) =>
              t.createElement(S, {
                key: G.title,
                iconClassName: U,
                iconName: G.iconName,
                title: G.title,
                text: G.text,
              })
            )
          );
        }, "FeaturesList");
      },
      8108449081: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => S,
        });
        var t = e(5824283093),
          n = e(2562405183),
          s = e(6122756707),
          i = e(735940183),
          d = e(4481313819),
          o = e(924300050),
          a = e(4963725897),
          r = e(6518038516),
          c = e(9003400431),
          u = e(1224315998),
          l = e(5220162857),
          m = e(6259241484),
          v = e(6323355797),
          E = e(3810478625),
          T = e(2683115972),
          g = e(8739505998),
          I = e(3677514771),
          f = e(7914553163),
          y = e(2612353366),
          M = e(8871937520);
        const p = new i.Ay("trials"),
          O = {
            elementName: "trial_start",
            isPrimaryCTA: !0,
            onClick: {
              enableClogAction: !0,
            },
          },
          C = {
            elementName: "view_all_pro_features_cta",
            onClick: {
              enableClogAction: !0,
            },
          },
          h = {
            elementName: "upgrade_to_pro_cta",
            onClick: {
              enableClogAction: !0,
            },
          },
          D = v.ew.PAID_FEATURE_TRIAL,
          P = _((b) => {
            let {
              promoType: K,
              uiStep: x,
              freemiumVariant: B,
              trialExpirationDate: U,
            } = b;
            const R = (0, s.wA)(),
              G = (0, n.d4)(E.g),
              H = (0, n.d4)(I.H7),
              F = (0, f.Ay)({
                promoType: K,
              }),
              V = B || F,
              X = (0, t.useCallback)(() => {
                R((0, c.O)());
              }, [R]),
              q = (0, t.useMemo)(() => [m.xu.SIDEBAR_MENU_HEADER], []),
              oe = (0, t.useCallback)(() => {
                R((0, c.O)());
              }, [R]),
              z = (0, t.useCallback)(() => {
                R((0, c.O)()), R((0, y.A)());
              }, [R]),
              Ae = _(() => {
                if (G) {
                  if (V === f.MX.TrialEligible)
                    return t.createElement(
                      a.A,
                      {
                        autoClogProps: O,
                        reason: "all_features_modal",
                        onRequestComplete: oe,
                        promoType: K,
                        megaphoneSpacesToRefresh: q,
                      },
                      p.t("Start Pro Trial")
                    );
                  const ve = "all_features_modal";
                  if (V === f.MX.TrialIneligible) {
                    const Se = G ? p.t("Upgrade to Pro") : "",
                      Ee = G ? p.t("View All Paid Features") : "";
                    return t.createElement(
                      t.Fragment,
                      null,
                      t.createElement(
                        T.z9,
                        {
                          size: "medium",
                          autoClogProps: h,
                          href: (0, v.Qn)({
                            team: H,
                            entryPoint: ve,
                          }),
                          title: Se,
                        },
                        Se
                      ),
                      t.createElement(
                        g.A,
                        {
                          autoClogProps: C,
                          href: (0, v.hZ)({
                            entryPoint: ve,
                          }),
                          title: Ee,
                        },
                        Ee
                      )
                    );
                  }
                  if (V === f.MX.TrialIneligibleUserCannotUpgrade) {
                    const Se = G ? p.t("View All Paid Features") : "";
                    return t.createElement(
                      T.z9,
                      {
                        size: "medium",
                        autoClogProps: C,
                        href: (0, v.hZ)({
                          entryPoint: ve,
                        }),
                        title: Se,
                      },
                      Se
                    );
                  }
                  if (U) {
                    const Se = G ? p.t("Explore All Paid Features") : "";
                    return t.createElement(
                      T.Ay,
                      {
                        size: "medium",
                        autoClogProps: C,
                        onClick: z,
                        title: Se,
                      },
                      Se
                    );
                  }
                  return null;
                }
                return t.createElement(
                  t.Fragment,
                  null,
                  t.createElement(
                    a.A,
                    {
                      autoClogProps: O,
                      reason: "all_features_modal",
                      onRequestComplete: oe,
                      promoType: K,
                      megaphoneSpacesToRefresh: q,
                    },
                    p.t("Start Pro Trial")
                  ),
                  t.createElement(r.A, {
                    buttonType: "outline",
                    entryPoint: "global_trial_entrypoint",
                    openInNewTab: !0,
                    planLevel: v.i6.standard.name,
                  })
                );
              }, "getCustomFooterButtons");
            Ae.displayName = "getCustomFooterButtons";
            const ae = _(
                () =>
                  t.createElement(
                    "div",
                    {
                      className:
                        "p-free_teams_showcase_all_features_modal__ctas",
                    },
                    Ae()
                  ),
                "getCustomFooter"
              ),
              de =
                G && U
                  ? p.rt(
                      "Explore all the premium features of our most popular plan, Slack Pro, through {expirationDate}.",
                      {
                        expirationDate: (0, M.Pd)(U),
                      }
                    )
                  : p.rt(
                      "Explore the premium features of our most popular plan with a free {trialDuration}-day trial. No credit card required.",
                      {
                        trialDuration: D,
                      }
                    );
            return t.createElement(
              d.A,
              {
                eventId: u.EventId.UPGRDEXP_TRIAL,
                uiComponentName:
                  u.UiComponentName.FREE_TEAMS_SHOWCASE_ALL_FEATURES_MODAL,
                uiStep: x,
              },
              t.createElement(o.A, {
                featureList: (0, l.L_)({
                  experimentPnpE2eGroupOn: G,
                }),
                experimentPnpE2eGroupOn: G,
                modalTitle: p.t("Do even more with Slack Pro"),
                modalSubtitle: de,
                customFooter: ae(),
                onRequestClose: X,
                maxWidth: 832,
                videoTitle: p.t(
                  "Comparison of free vs. paid Slack Video for users on free teams",
                  {
                    fallbackHash: "9398938f8b7049969c93c2f18f103f217bd68228",
                  }
                ),
              })
            );
          }, "FreeTeamsAllFeaturesModal");
        P.displayName = "FreeTeamsAllFeaturesModal";
        const S = P;
      },
      1267040415: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => f,
        });
        var t = e(5824283093),
          n = e(735940183),
          s = e(9391594207),
          i = e(1224315998),
          d = e(6323355797),
          o = e(2562405183),
          a = e(3677514771),
          r = e(7268021173),
          c = e(4481313819),
          u = e(2683115972),
          l = e(8739505998),
          m = e(2312625946);
        function v() {
          return (
            (v =
              Object.assign ||
              function (y) {
                for (var M = 1; M < arguments.length; M++) {
                  var p = arguments[M];
                  for (var O in p)
                    Object.prototype.hasOwnProperty.call(p, O) && (y[O] = p[O]);
                }
                return y;
              }),
            v.apply(this, arguments)
          );
        }
        _(v, "_extends");
        const E = new n.Ay("plan_change"),
          T = _((y) => {
            let {
              children: M,
              planLevel: p,
              entryPoint: O,
              feature: C,
              hash: h,
              action: D,
              useLink: P,
              refToForward: S,
              productId: b,
              productLevel: K,
              team: x,
              isTeamInTrial: B,
              tooltipProps: U,
              ...R
            } = y;
            const G = (0, o.d4)((V) =>
                (0, d.m6)(V, {
                  entryPoint: O,
                  productId: b,
                  productLevel: K,
                  action: D,
                  feature: C,
                  hash: h,
                  planLevel: p,
                })
              ),
              H = P ? l.A : u.z9,
              F = t.createElement(
                H,
                v(
                  {
                    ref: S,
                  },
                  R,
                  {
                    href: G,
                  }
                ),
                M
              );
            return t.createElement(
              c.A,
              {
                eventId: i.EventId.UPGRDEXP_UPSELL_PROMPTS,
                clogImpression: !0,
              },
              U
                ? t.createElement(
                    m.Ay,
                    v(
                      {
                        tip: E.t("Upgrade"),
                      },
                      U
                    ),
                    F
                  )
                : F
            );
          }, "PlansPageCTABase");
        T.displayName = "PlansPageCTABase";
        const g = _(
            (y) => ({
              team: (0, a.H7)(y),
              isTeamInTrial: (0, r.iH)(y),
            }),
            "mapStateToProps"
          ),
          I = (0, s.N)(g)(T),
          f = t.forwardRef((y, M) =>
            t.createElement(
              I,
              v({}, y, {
                refToForward: M,
              })
            )
          );
      },
      4177200783: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => y,
        });
        var t = e(5824283093),
          n = e(6122756707),
          s = e(2562405183),
          i = e(735940183),
          d = e(1224315998),
          o = e(4761125736),
          a = e(9003400431),
          r = e(4481313819),
          c = e(8719380546),
          u = e(5712872315),
          l = e(1743656885);
        const m = new i.Ay("msg_input"),
          v = {
            elementName: "learn_more",
            onClick: {
              enableClogAction: !0,
            },
          },
          E = _((M) => {
            let { isScheduledMessage: p } = M;
            const O = (0, n.wA)(),
              C = (0, t.useCallback)(() => {
                O((0, a.O)());
              }, [O]);
            if (!(0, s.d4)((S) => (0, o._Z)(S, "upgrd_5684") === "on"))
              return null;
            const D = p
                ? m.t("Message not scheduled")
                : m.t("Message not sent"),
              P = m.rt(
                "Your team isn\u2019t able to send messages right now. Review any apps or webhooks that may be sending a high-volume of messages. <learnMoreLink>Learn more</learnMoreLink> about message limits.",
                {
                  fallbackHash: "a15c5b3859af53dcefc79016b421009c7adc9bf6",
                  "<learnMoreLink>": (S) => {
                    let { text: b } = S;
                    return t.createElement(
                      l.A,
                      {
                        "data-qa": "Message-limit-error-modal-learn-more-link",
                        articleId: 115002422943,
                        hash: "message-and-file-visibility-limit",
                        autoClogProps: v,
                        forceOpenInBrowser: !0,
                      },
                      b
                    );
                  },
                }
              );
            return t.createElement(
              r.A,
              {
                eventId: d.EventId.UPGRDEXP_HIGHLIGHT_PAID_FEATURES,
                clogImpression: !0,
                uiComponentName: d.UiComponentName.MESSAGE_LIMIT_ERROR_MODAL,
              },
              t.createElement(c.A, {
                "data-qa": "message-limit-error-modal",
                title: D,
                titleIcon: "warning",
                bodyContent: P,
                onRequestClose: C,
                theme: u.B.ERROR,
              })
            );
          }, "MessageLimitErrorModal");
        E.displayName = "MessageLimitErrorModal";
        const T = E;
        var g = e(1031947056),
          I = e(2375333597);
        const f = (0, g.Ay)(
          "Open modal when a message send fails due to team having hit the message limit",
          function (M, p) {
            let O =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : {};
            return M(
              (0, I.q)({
                element: t.createElement(T, O),
              })
            );
          }
        );
        f.meta = {
          name: "createThunk",
          key: "createThunkopenMessageLimitErrorModal",
          description:
            "Open modal when a message send fails due to team having hit the message limit",
        };
        const y = f;
      },
      6518038516: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => P,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(5824283093),
          i = e(9391594207),
          d = e(5255740490),
          o = e(735940183),
          a = e(2786906754),
          r = e(9790474759),
          c = e(9022734571),
          u = e(6839188756),
          l = e(6323355797),
          m = e(3554387543),
          v = e(3677514771),
          E = e(3559164431),
          T = e(8368515877),
          g = e(2222994823),
          I = e(6084388622),
          f = e(8739505998),
          y = e(8683010724),
          M = e(4761125736);
        function p() {
          return (
            (p =
              Object.assign ||
              function (S) {
                for (var b = 1; b < arguments.length; b++) {
                  var K = arguments[b];
                  for (var x in K)
                    Object.prototype.hasOwnProperty.call(K, x) && (S[x] = K[x]);
                }
                return S;
              }),
            p.apply(this, arguments)
          );
        }
        _(p, "_extends");
        const O = new o.Ay("page_pricing");
        let C = _(
          class extends s.Component {
            getElementName() {
              const {
                isSmallFeaturesColumnButton: b,
                planLevel: K,
                activePlanLevel: x,
                isTeamOnTrial: B,
                isInvoiceCustomer: U,
                includeFreePlan: R,
              } = this.props;
              let G;
              return (
                K === l.i6.enterprise.name
                  ? (G = `${K}_plan_contact_us`)
                  : U
                  ? (G = `${K}_plan_contact_accounts`)
                  : !K && R
                  ? (G = "free_plan_upgrade")
                  : b && x === K && !B
                  ? (G = `${K}_get_slack_ai`)
                  : (G = `${K}_plan_upgrade`),
                G
              );
            }
            getHref(b) {
              let K =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : {};
              const x =
                b +
                (0, c.iU)({
                  ...this.parsedUrlQueryParams,
                  ...K,
                });
              return (0, u.Zl)(this.props.team, x);
            }
            navigateToCheckoutFlow(b) {
              var K = this;
              return (0, t.coroutine)(function* () {
                const {
                  isSlackAIOptedInByDefault: x,
                  isTeamOnTrial: B,
                  activePlanLevel: U,
                } = K.props;
                K.setState(() => ({
                  isCTALoading: !0,
                }));
                try {
                  yield K.props.fetchConfigurationData({
                    productId: b,
                  });
                } catch (H) {
                  var R;
                  (H == null || (R = H.data) === null || R === void 0
                    ? void 0
                    : R.error) === "invalid_request"
                    ? (0, r.A)(
                        `/account/request?entry_point=${K.props.entryPoint}`
                      )
                    : (0, r.A)("/admin/billing");
                  return;
                }
                if (K.props.redirectUrl && (0, g.I)(K.props.redirectUrl)) {
                  K.props.redirectUrl && (0, r.A)(K.props.redirectUrl);
                  return;
                }
                const G = (0, l.Qn)({
                  team: K.props.team,
                  entryPoint: K.props.entryPoint,
                  productId: b,
                  addonTypes: x && !B && U === "" ? [l.wi.SlackAI] : void 0,
                });
                (0, r.A)(G);
              })();
            }
            handleClick() {
              const {
                team: b,
                planLevel: K,
                activePlanLevel: x,
                isSmallFeaturesColumnButton: B,
                productId: U,
                slackAIAddonId: R,
                isTeamOnTrial: G,
                isSlackAIOptedInByDefault: H,
              } = this.props;
              if (B && x === K && !G) {
                const V = (0, l.Qn)({
                  team: b,
                  entryPoint: "plans_page",
                  addon: R,
                  addonTypes: H ? [l.wi.SlackAI] : void 0,
                });
                (0, r.A)(V);
              } else U && this.navigateToCheckoutFlow(U);
            }
            renderPlanCTA() {
              const {
                activePlanLevel: b,
                planLevel: K,
                productId: x,
                activeProductId: B,
                "data-qa": U,
                isInvoiceCustomer: R,
                clogStepId: G,
                useLink: H,
                buttonType: F,
                openInNewTab: V,
                entryPoint: X,
                isSmallFeaturesColumnButton: q,
                isTeamOnTrial: oe,
                discountPromoType: z,
                discountPromoSubtype: Ae,
                discountPercent: ae,
                experimentPnpDiscountsGroupOn: de,
                className: ve,
              } = this.props;
              let Se = "outline",
                Ee = "",
                be;
              const Ce = V ? "_blank" : "_self";
              if (K === l.i6.enterprise.name)
                (Ee = O.t("Contact Sales")),
                  (be = this.getHref("/contact-sales", {
                    from_plans: 1,
                    campaign: "7013y000002UvizAAC",
                  })),
                  (Se = "primary");
              else if (R)
                (Ee = O.t("Contact Accounts")),
                  (be = this.getHref("/help/requests/new"));
              else {
                if (K === l.i6.free.name) return null;
                if (((Se = "primary"), q))
                  b === K && !oe
                    ? (Ee = O.t("Get Slack AI"))
                    : z === l.k2.PricingAndPackagingPromo
                    ? (Ee = (0, l.$K)({
                        discountPromoSubtype: Ae,
                        activePlanLevel: b,
                        discountPercent: ae,
                        planLevel: K,
                        experimentPnpDiscountsGroupOn: de,
                      }))
                    : (Ee = O.t("Upgrade"));
                else {
                  Ee = O.t("Upgrade Now");
                  const N = B ? 2 : 1;
                  be = this.getHref(`/${l.nc}`, {
                    s: N,
                    entry_point: X,
                  });
                }
              }
              const Z = {
                className: (0, d.A)("p-upgrade_cta plan_page", ve),
                type: F || Se,
                "data-qa": U,
                autoClogProps: {
                  elementName: this.getElementName(),
                  isPrimaryCTA: F === "primary",
                  onClick: {
                    enableClogAction: !0,
                  },
                  clogStepId: G,
                  productId: x,
                },
              };
              let $ = s.createElement(
                I.z9,
                p(
                  {
                    href: be,
                    target: Ce,
                  },
                  Z
                ),
                Ee
              );
              return (
                K !== l.i6.enterprise.name && !R && x && !H
                  ? ($ = s.createElement(
                      I.lV,
                      p(
                        {
                          onClick: this.handleClick,
                          loading: this.state.isCTALoading,
                        },
                        Z
                      ),
                      Ee
                    ))
                  : H &&
                    ($ = s.createElement(
                      f.A,
                      p(
                        {
                          href: be,
                          target: Ce,
                        },
                        Z,
                        {
                          className: "p-upgrade_cta--link",
                        }
                      ),
                      Ee,
                      s.createElement(
                        "span",
                        {
                          className: "margin_left_25",
                        },
                        s.createElement(y.A, {
                          name: "arrow-right",
                        })
                      )
                    )),
                $
              );
            }
            render() {
              return this.renderPlanCTA();
            }
            constructor(b) {
              super(b),
                (this.state = {
                  isCTALoading: !1,
                }),
                (this.handleClick = this.handleClick.bind(this)),
                (this.parsedUrlQueryParams =
                  (0, a.qN)(window.location.href) || {});
            }
          },
          "UpgradeCta"
        );
        (C.displayName = "UpgradeCta"),
          (C.defaultProps = {
            "data-qa": "plans_page_upgrade_cta",
            clogStepId: "",
            entryPoint: "plans_page",
          });
        const h = _((S, b) => {
            const K = (0, m.EV)(S),
              x = (0, v.H7)(S),
              B = (0, m.$f)(S);
            return {
              team: x,
              productId: (0, m.UO)(S, b.planLevel, K),
              slackAIAddonId: (0, m.Zg)(S, B, K),
              activeProductId: (0, m.xU)(S),
              activePlanLevel: B,
              isTeamOnTrial: (0, m.yQ)(S),
              isInvoiceCustomer: (0, m.Nd)(S),
              redirectUrl: (0, E.oy)(S),
              nextPlanLevel: (0, m.Jf)(S),
              isSlackAIOptedInByDefault: (0, m.qK)(S),
              discountPercent: (0, m.WG)(S),
              discountPromoType: (0, m.ZQ)(S),
              discountPromoSubtype: (0, m.$3)(S),
              experimentPnpDiscountsGroupOn:
                (0, M._Z)(S, "pnp_discounts") === "on",
            };
          }, "mapStateToProps"),
          D = _(
            (S) => ({
              fetchConfigurationData: (b) => S((0, T.l)(b)),
            }),
            "mapDispatchToProps"
          ),
          P = (0, i.N)(h, D)(C);
      },
      8576613356: (W, A, e) => {
        "use strict";
        e.d(A, {
          C: () => p,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(73855031),
          i = e(6518038516),
          d = e(2670882607);
        const o = (0, t.memo)((O) => {
          let { onLoad: C } = O;
          return (
            (0, t.useEffect)(
              () => () => {
                C();
              },
              [C]
            ),
            null
          );
        });
        var a = e(2562405183),
          r = e(2047021170),
          c = e(5577296129),
          u = e.n(c);
        const l = (0, t.memo)((O) => {
          let {
            alt: C,
            className: h,
            getAnimationImport: D,
            index: P,
            onLoad: S,
            src: b,
            autoplay: K = !0,
            loop: x = !0,
          } = O;
          const B = (0, t.useCallback)(() => S(P), [P, S]),
            U = (0, t.useCallback)(
              () =>
                t.createElement(o, {
                  onLoad: B,
                }),
              [B]
            );
          return (0, a.d4)((G) => (0, r.ty)(G, "a11y_animations")) && D
            ? t.createElement(d.e, {
                autoplay: K,
                className: (0, n.A)(u().featureImage, h),
                description: C,
                getAnimationImport: D,
                loop: x,
                renderLoading: U,
              })
            : t.createElement("img", {
                alt: C,
                className: (0, n.A)(u().featureImage, h),
                key: b,
                onLoad: B,
                src: b,
                "aria-hidden": "true",
                "data-qa": "feature_image_static",
              });
        });
        var m = e(5641442783),
          v = e(6308822),
          E = e(6044196829),
          T = e(980293773),
          g = e(1224315998),
          I = e(6323355797),
          f = e(8985946788),
          y = e.n(f);
        const M = {
            subtitle: "accordion-feature-list-modal-subtitle",
            imageContainer: "accordion-feature-list-modal-image-container",
            textContent: "accordion-feature-list-modal-text-content",
          },
          p = _((O) => {
            let {
              accordionClassNames: C = {},
              className: h = "",
              customFooter: D,
              autoClogProps: P,
              closeModal: S,
              entryPoint: b,
              featureListItems: K,
              featureImageClassName: x = "",
              hideProBadge: B,
              imageContainerBackground: U = "horchata",
              linkButtonText: R,
              linkButtonAutoClogProps: G,
              listContainerClassName: H = "",
              onClickLink: F,
              subtitle: V,
              subtitleClassName: X = "",
              title: q,
              UNSAFE_parentSelector: oe,
            } = O;
            const [z, Ae] = (0, t.useState)(0),
              ae = (0, t.useCallback)((Ee) => {
                Ae(Ee);
              }, []),
              de = (0, t.useMemo)(
                () =>
                  K.map((Ee, be) => ({
                    ...Ee,
                    onExpand: () => {
                      var Ce;
                      ae(be),
                        (Ce = Ee.onExpand) === null ||
                          Ce === void 0 ||
                          Ce.call(Ee);
                    },
                  })),
                [K, ae]
              ),
              ve = (0, t.useRef)(new Array(de.length).fill(!0)),
              Se = (0, t.useCallback)((Ee) => {
                ve.current = [
                  ...ve.current.slice(0, Ee),
                  !1,
                  ...ve.current.slice(Ee + 1),
                ];
              }, []);
            return t.createElement(
              T.dW,
              {
                autoClogProps: P,
                centered: !0,
                className: (0, n.A)(y().accordionFeatureListModal, h),
                closeModal: S,
                maxWidth: 900,
                UNSAFE_parentSelector: oe,
              },
              t.createElement(
                "div",
                {
                  className: (0, n.A)(y().bodyContainer, {
                    [y().horchataBg]: U === "horchata",
                    [y().aubergineBg]: U === "aubergine",
                  }),
                },
                t.createElement(
                  "div",
                  {
                    className: (0, n.A)(y().listContainer, H),
                    "data-qa": M.textContent,
                  },
                  t.createElement(
                    "div",
                    {
                      className: y().header,
                    },
                    !B &&
                      t.createElement(
                        "div",
                        {
                          className:
                            "display_flex full_width justify_content_center margin_bottom_50",
                        },
                        t.createElement(m.A, {
                          uiComponentVariant:
                            g.UiComponentVariant
                              .SOLUTIONS_GALLERY_UPGRADE_MODAL,
                        })
                      ),
                    t.createElement(
                      "h1",
                      {
                        className: y().title,
                      },
                      q
                    ),
                    t.createElement(
                      "h2",
                      {
                        className: (0, n.A)(y().subtitle, X),
                        "data-qa": M.subtitle,
                      },
                      V
                    )
                  ),
                  t.createElement(
                    "div",
                    {
                      className: (0, n.A)(
                        y().accordionListContainer,
                        C == null ? void 0 : C.listContainerClassName
                      ),
                    },
                    t.createElement(s.n, {
                      accordionItems: de,
                      className: C == null ? void 0 : C.className,
                      showImageCaret: !0,
                      showItemBorder: !1,
                      itemClassName: y().accordionItem,
                      itemHeaderClassName: (0, n.A)(
                        y().accordionItemHeader,
                        C == null ? void 0 : C.itemHeaderClassName
                      ),
                      itemHeaderButtonClassName: (0, n.A)(
                        y().accordionItemHeaderButton,
                        C == null ? void 0 : C.itemHeaderButtonClassName
                      ),
                      itemDescriptionClassName: (0, n.A)(
                        y().accordionItemDescription,
                        C == null ? void 0 : C.itemDescriptionClassName
                      ),
                      expandedIconClassName: (0, n.A)(
                        y().accordionExpandedIcon,
                        C == null ? void 0 : C.expandedIconClassName
                      ),
                      collapsedIconClassName: (0, n.A)(
                        y().accordionCollapsedIcon,
                        C == null ? void 0 : C.collapsedIconClassName
                      ),
                      imageCaretClassName: (0, n.A)({
                        [y().horchataCaret]: U === "horchata",
                        [y().aubergineCaret]: U === "aubergine",
                      }),
                    })
                  ),
                  D ??
                    t.createElement(
                      "div",
                      {
                        className: y().footer,
                      },
                      t.createElement(i.A, {
                        "button-type": "primary",
                        className: y().upgradeCta,
                        entryPoint: b,
                        openInNewTab: !0,
                        planLevel: I.i6.standard.name,
                      }),
                      R &&
                        t.createElement(
                          E.A,
                          {
                            className: "margin_top_100",
                            onClick: F,
                            autoClogProps: G,
                          },
                          t.createElement("span", null, R)
                        )
                    )
                ),
                t.createElement(
                  "div",
                  {
                    className: (0, n.A)(y().imageContainer),
                    "data-qa": M.imageContainer,
                  },
                  ve.current[z] &&
                    t.createElement(v.A, {
                      className: y().spinner,
                      size: "large",
                    }),
                  de.map((Ee, be) => {
                    let {
                      getAnimationImport: Ce,
                      imageAlt: Z,
                      imageSrc: $,
                    } = Ee;
                    return t.createElement(l, {
                      key: `${$}-${z}`,
                      getAnimationImport: Ce,
                      index: be,
                      src: $,
                      alt: Z,
                      autoplay: z === be,
                      loop: !1,
                      className: (0, n.A)(
                        y().featureImage,
                        {
                          flex: z === be,
                          align_items_center: z === be,
                          display_none: z !== be,
                        },
                        x
                      ),
                      onLoad: Se,
                    });
                  })
                )
              )
            );
          }, "AccordionFeatureListModal");
        p.displayName = "AccordionFeatureListModal";
      },
      2279207117: (W, A, e) => {
        "use strict";
        e.d(A, {
          FK: () => l,
          aD: () => u,
          uY: () => v,
          w9: () => m,
        });
        var t = e(6001125587),
          n = e(7914553163),
          s = e(5267010247),
          i = e(8822892075),
          d = e(7940058138),
          o = e(8193414630),
          a = e(6968387112),
          r = e(735940183);
        const c = new r.Ay("trials_highlight_paid_features");
        function u(E) {
          switch (E) {
            case n.MX.TrialTeam:
              return `https://${(0,
              a.Xk)()}/help/articles/115003205446-Slack-plans-and-features`;
            case n.MX.TrialIneligibleUserCannotUpgrade:
              return `https://${(0, a.Xk)()}/help/articles/115002422943`;
            default:
              (0, o.Kh)(E);
          }
        }
        _(u, "getHref");
        function l(E) {
          let T =
            arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
          switch (E) {
            case void 0:
            case null:
            case n.MX.TrialFetching:
              return "";
            case n.MX.TrialIneligible:
              return T ? c.t("Upgrade Now") : c.t("See Upgrade Options");
            case n.MX.TrialEligible:
              return T ? c.t("Try Slack Pro") : c.t("Start Free Trial");
            case n.MX.TrialIneligibleUserCannotUpgrade:
            case n.MX.TrialTeam:
              return T ? c.t("Compare Plans") : c.t("Learn More");
            case n.MX.TrialExpiry:
              return c.t("Upgrade Now");
            default:
              (0, o.Kh)(E);
          }
        }
        _(l, "getDefaultCopy");
        function m(E, T, g, I) {
          return () => {
            E(
              (0, t.A)({
                uiComponentVariant: I,
                promoSubtype: T,
                freemiumVariant: g,
              })
            );
          };
        }
        _(m, "getTrialEligibleHandler");
        function v(E) {
          return () => E((0, s.o)((0, i.ZF)(d.c.PaidBenefits)));
        }
        _(v, "getTrialTeamHandler");
      },
      6005700845: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => y,
        });
        var t = e(5824283093),
          n = e(6122756707),
          s = e(1267040415),
          i = e(2279207117),
          d = e(7914553163),
          o = e(6084388622),
          a = e(8739505998),
          r = e(8193414630),
          c = e(4096483543),
          u = e(6323355797),
          l = e(2562405183),
          m = e(3810478625);
        const v = {
            elementName: "start_trial",
            isPrimaryCTA: !0,
            onClick: {
              enableClogAction: !0,
            },
          },
          E = {
            elementName: "learn_more_usage_limits",
            isPrimaryCTA: !0,
            onClick: {
              enableClogAction: !0,
            },
          },
          T = {
            elementName: "learn_more_plans_and_features",
            isPrimaryCTA: !0,
            onClick: {
              enableClogAction: !0,
            },
          },
          g = {
            isPrimaryCTA: !0,
            elementName: "upgrade_link",
            onClick: {
              enableClogAction: !0,
            },
          },
          I = {
            isPrimaryCTA: !0,
            elementName: "upgrade_now",
            onClick: {
              enableClogAction: !0,
            },
          },
          f = _((M) => {
            let {
              variant: p,
              children: O,
              promoSubtype: C,
              modalVariant: h,
              useLink: D = !1,
              ctaClassName: P,
            } = M;
            const S = (0, n.wA)(),
              b = (0, l.d4)(m.g),
              K = (0, c.A)();
            if (!p || p === d.MX.TrialFetching) return null;
            const x = D ? a.A : o.z9,
              B = (0, i.FK)(p, b);
            switch (p) {
              case d.MX.TrialIneligible:
                return t.createElement(
                  s.A,
                  {
                    useLink: D,
                    autoClogProps: g,
                    className: P,
                  },
                  O ?? B
                );
              case d.MX.TrialEligible:
                return t.createElement(
                  x,
                  {
                    onClick: (0, i.w9)(S, C, p, h),
                    autoClogProps: v,
                    className: P,
                  },
                  O ?? B
                );
              case d.MX.TrialIneligibleUserCannotUpgrade:
                return t.createElement(
                  x,
                  {
                    href: (0, i.aD)(p),
                    autoClogProps: E,
                    className: P,
                  },
                  O ?? B
                );
              case d.MX.TrialTeam:
                return t.createElement(
                  x,
                  {
                    href: K ? void 0 : (0, i.aD)(p),
                    autoClogProps: T,
                    onClick: K ? (0, i.uY)(S) : void 0,
                    className: P,
                  },
                  O ?? B
                );
              case d.MX.TrialExpiry:
                return t.createElement(
                  s.A,
                  {
                    useLink: D,
                    action: u.um.CHECKOUT,
                    autoClogProps: I,
                  },
                  O ?? B
                );
              default:
                (0, r.Kh)(p);
            }
          }, "FreemiumPrimaryCTA");
        f.displayName = "FreemiumPrimaryCTA";
        const y = f;
      },
      6001125587: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => K,
        });
        var t = e(9706240641),
          n = e(5824283093),
          s = e(6422693406),
          i = e(8108449081),
          d = e(1152226587),
          o = e(8300630630),
          a = e(1267040415),
          r = e(5791262841),
          c = e(9240394198),
          u = e(266169032),
          l = e(1224315998),
          m = e(735940183),
          v = e(6323355797),
          E = e(2562405183),
          T = e(4761125736);
        const g = new m.Ay("trials_highlight_paid_features"),
          I = v.ew.PAID_FEATURE_TRIAL,
          f = _((x) => {
            let {
              isEligibleForTrial: B,
              promoType: U,
              promoSubtype: R,
              uiComponentVariant: G,
              uiPage: H,
            } = x;
            const F = (0, E.d4)((Se) => (0, T._Z)(Se, "wfb_freemium") === "on"),
              V = (0, n.useMemo)(
                () =>
                  F
                    ? [
                        g.t("Automate repetitive, simple tasks"),
                        g.t("Create code-free solutions"),
                        g.t("Customize and share with your team"),
                      ]
                    : [],
                [F]
              ),
              X = (0, n.useMemo)(
                () =>
                  F
                    ? [
                        g.t("Bring tools you already use into Slack"),
                        g.t("Use apps just for you or with your whole team"),
                        g.t("Streamline your work right from Slack"),
                      ]
                    : [],
                [F]
              );
            if (!F) return null;
            const q = _((Se) => {
                let { text: Ee } = Se;
                return n.createElement(
                  a.A,
                  {
                    "data-qa":
                      "workflow_builder_freemium_trial_offer_modal-plans_page_link",
                    useLink: !0,
                  },
                  Ee
                );
              }, "renderPlansPageLink"),
              oe =
                G ===
                l.UiComponentVariant.UNLIMITED_WORKFLOWS_TRIAL_OFFER_MODAL;
            let z, Ae, ae, de, ve;
            return (
              oe
                ? ((z = g.t("Save time with unlimited workflows")),
                  (ae = g.t("With workflows, you can:")),
                  (Ae = B
                    ? g.rt(
                        " You can also install unlimited apps, and get access to other <plansPageLink>premium collaboration tools</plansPageLink> with a free, {trialLength}-day trial of Slack Pro.",
                        {
                          trialLength: I,
                          "<plansPageLink>": q,
                        }
                      )
                    : g.rt(
                        "You can also install unlimited apps, and get access to other <plansPageLink>premium collaboration tools</plansPageLink> when you upgrade to a paid plan.",
                        {
                          "<plansPageLink>": q,
                        }
                      )),
                  (de = V),
                  (ve =
                    "/marketing/img/feature/workflow-builder/hero-wfb-lp.jpg"))
                : ((z = g.t("Bring all your tools into Slack")),
                  (ae = g.t("With apps, you can:")),
                  (Ae = B
                    ? g.rt(
                        " You can also publish unlimited workflows, and get access to other <plansPageLink>premium collaboration tools</plansPageLink> with a free, {trialLength}-day trial of Slack Pro.",
                        {
                          trialLength: I,
                          "<plansPageLink>": q,
                        }
                      )
                    : g.rt(
                        "You can also install unlimited workflows, and get access to other <plansPageLink>premium collaboration tools</plansPageLink> when you upgrade to a paid plan.",
                        {
                          "<plansPageLink>": q,
                        }
                      )),
                  (de = X),
                  (ve =
                    "/marketing/img/feature/workflow-builder/hero-wfb-apps.png")),
              n.createElement(r.A, {
                "data-qa": "workflow_builder_freemium_trial_offer_modal",
                imgSrc: ve,
                modalBannerBackgroundColor: "#4a144a",
                modalCloseButtonTheme: c.N.LIGHT,
                modalTitle: z,
                modalSubtitle: Ae,
                modalChecklistHeading: ae,
                modalChecklistItems: de,
                onSpeedbumpContinueLabel:
                  H === l.UiPage.WORKFLOW_BUILDER_FREEMIUM_TRIAL_PUBLISH
                    ? g.t("Publish Workflow")
                    : g.t("Continue"),
                promoType: U,
                promoSubtype: R,
                startTrialContext: u.M.workflowBuilderFreemiumTrialOfferModal,
                uiComponentVariant: G,
                isEligibleForTrial: B,
              })
            );
          }, "WorkflowBuilderFreemiumTrialOfferModal");
        f.displayName = "WorkflowBuilderFreemiumTrialOfferModal";
        const y = f;
        var M = e(1031947056),
          p = e(2375333597),
          O = e(3810478625),
          C = e(7268021173),
          h = e(962959561),
          D = e(3825145648),
          P = e(398781533);
        function S() {
          return (
            (S =
              Object.assign ||
              function (x) {
                for (var B = 1; B < arguments.length; B++) {
                  var U = arguments[B];
                  for (var R in U)
                    Object.prototype.hasOwnProperty.call(U, R) && (x[R] = U[R]);
                }
                return x;
              }),
            S.apply(this, arguments)
          );
        }
        _(S, "_extends");
        const b = (0, M.Ay)(
          "Open freemium trial offer modal",
          (function () {
            var x = (0, t.coroutine)(function* (B, U, R) {
              let G = v.ZO.GlobalEntrypointTrial;
              const { promoSubtype: H } = R,
                F = (0, O.g)(U());
              let V = null;
              switch (H) {
                case v.zG.WorkflowBuilder:
                  (G = v.ZO.PaidFeatureTrial), (V = y);
                  break;
                case v.zG.Vhq:
                  (G = F ? v.ZO.GlobalEntrypointTrial : v.ZO.PaidFeatureTrial),
                    (V = F ? i.A : d.A);
                  break;
                default:
                  return s.S.resolve();
              }
              B(
                (0, P.Q)({
                  skipCampaignEligibiltyCheck: !0,
                  campaignType: G,
                  campaignSubType: H,
                  reason: "freemium_all_features_modal",
                })
              ),
                yield B(
                  (0, o.A)({
                    campaignType: G,
                    campaignSubType: H,
                    reason: H,
                  })
                );
              const X = (0, C.hq)(U(), G, H);
              return (0, h.L9)(U(), !1, !0)
                ? B(
                    (0, D.r)({
                      promoType: G,
                      promoSubtype: H,
                      entryPoint: "freemium_all_auto_charge_trial_entry_point",
                    })
                  )
                : B(
                    (0, p.q)({
                      element: n.createElement(
                        V,
                        S({}, R, {
                          promoType: G,
                          promoSubtype: H,
                          isEligibleForTrial: X,
                        })
                      ),
                    })
                  );
            });
            return function (B, U, R) {
              return x.apply(this, arguments);
            };
          })()
        );
        b.meta = {
          name: "createThunk",
          key: "createThunkopenFreemiumTrialOfferModal",
          description: "Open freemium trial offer modal",
        };
        const K = b;
      },
      7914553163: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => T,
          MX: () => l,
        });
        var t = e(5824283093),
          n = e(6122756707),
          s = e(6839188756),
          i = e(677609895),
          d = e(6323355797),
          o = e(2562405183),
          a = e(8871937520),
          r = e(7268021173),
          c = e(1384076438),
          u = e(3677514771);
        const l = {
            TrialFetching: "trial_fetching",
            TrialTeam: "trial_team",
            TrialExpiry: "trial_expiry",
            TrialEligible: "trial_eligible",
            TrialIneligible: "trial_ineligible",
            TrialIneligibleUserCannotUpgrade:
              "trial_ineligible_user_cannot_upgrade",
          },
          m = _(
            (g) =>
              g === l.TrialFetching ||
              g === l.TrialEligible ||
              g === l.TrialIneligible ||
              g === l.TrialIneligibleUserCannotUpgrade,
            "isFreeVariant"
          ),
          v = _(
            (g) => g === l.TrialTeam || g === l.TrialExpiry,
            "isTrialVariant"
          ),
          T = _((g) => {
            let {
              promoType: I = d.ZO.PaidFeatureTrial,
              promoSubtype: f,
              context: y,
              reason: M,
              isEligibleForTrial: p,
              trialEndDate: O,
              isEnabled: C = !0,
            } = g;
            const h = (0, n.wA)(),
              D = (0, o.d4)((R) => (0, s.tc)((0, u.H7)(R))),
              P = (0, o.d4)(r.iH),
              S = (0, o.d4)(i.X),
              b = (0, o.d4)((R) => (0, r.hq)(R, I, f)),
              [K, x] = (0, t.useState)(D);
            if (
              ((0, t.useEffect)(() => {
                C &&
                  D &&
                  h(
                    (0, c.A)({
                      campaignType: I,
                      campaignSubType: f,
                      context: y,
                      reason: M,
                    })
                  ).then(() => {
                    x(!1);
                  });
              }, [h, D, I, f, y, M, b, C]),
              !C || !(D || P))
            )
              return null;
            const B = p != null;
            if (K && !B) return l.TrialFetching;
            if (P) {
              const G = (0, a.qe)(O);
              return O !== void 0 && G <= 7 ? l.TrialExpiry : l.TrialTeam;
            }
            const U = B && K ? p : b;
            return !U && !S
              ? l.TrialIneligibleUserCannotUpgrade
              : U
              ? l.TrialEligible
              : l.TrialIneligible;
          }, "useFreemium");
      },
      952756744: (W, A, e) => {
        "use strict";
        e.d(A, {
          s: () => d,
        });
        var t = e(5824283093),
          n = e(4902318931),
          s = e(6259241484);
        const i = {
            [s.ze.SUPPORT_UPGRADE_DECISION_TRIAL_EXPIRING_SOON_HUDDLES_BANNER]:
              {
                component: t.lazy(() =>
                  Promise.resolve().then(e.bind(e, 8240993983))
                ),
              },
          },
          d = _(
            () =>
              t.createElement(n.Ay, {
                spaceName: s.xu.HUDDLE_INVITE_MODAL,
                notifications: i,
              }),
            "HuddleInviteModalTrialBannerV2MegaphoneWrapper"
          );
        d.displayName = "HuddleInviteModalTrialBannerV2MegaphoneWrapper";
      },
      8240993983: (W, A, e) => {
        "use strict";
        e.r(A),
          e.d(A, {
            HuddleInviteModalTrialBannerV2: () => f,
            default: () => y,
          });
        var t = e(5824283093),
          n = e(4481313819),
          s = e(1267040415),
          i = e(7949425452),
          d = e(5641442783),
          o = e(7433432223),
          a = e(6084388622),
          r = e(8112788848),
          c = e(1224315998),
          u = e(735940183),
          l = e(6323355797),
          m = e(2562405183),
          v = e(8871937520),
          E = e(3810478625);
        const T = new u.Ay("guided_trials"),
          g = {
            elementName: "upgrade_now_cta",
            onClick: {
              enableClogAction: !0,
            },
          },
          I = {
            elementName: "see_upgrade_options_cta",
            onClick: {
              enableClogAction: !0,
            },
          },
          f = _((M) => {
            let { trialEndDate: p, canUserPurchase: O } = M;
            const C = (0, m.d4)(E.g),
              h = (0, m.d4)((P) =>
                (0, l.m6)(P, {
                  action: l.um.CHECKOUT,
                  productLevel: l.i6.standard.id,
                  entryPoint: "guided_trials_peek_upgrade_cta",
                })
              ),
              D = _(
                () =>
                  O
                    ? t.createElement(
                        a.z9,
                        {
                          autoClogProps: g,
                          href: h,
                          className: "p-huddle_invite_modal__cta_upgrade",
                          size: "small",
                          "data-qa": "huddle-invite-modal-upgrade-cta",
                        },
                        C ? T.t("Upgrade to Pro") : T.t("Upgrade Now")
                      )
                    : t.createElement(
                        s.A,
                        {
                          feature: l.c4.SLACK_HUDDLES,
                          autoClogProps: I,
                          size: "small",
                          type: C ? "primary" : "outline",
                        },
                        C ? T.t("Compare plans") : T.t("See Upgrade Options")
                      ),
                "getCTA"
              );
            return (
              (D.displayName = "getCTA"),
              t.createElement(
                n.A,
                {
                  eventId: c.EventId.UPGRDEXP_TRIAL,
                  uiComponentName:
                    c.UiComponentName.HUDDLE_INVITE_MODAL_TRIAL_BANNER,
                  clogImpression: !0,
                },
                t.createElement(
                  o.A,
                  {
                    className:
                      "p-huddle_invite_modal_trial_banner_v2__container",
                    "data-qa": "huddle_invite_modal_trial_banner",
                    primaryCTA: D(),
                    withMargins: !0,
                  },
                  t.createElement(
                    "div",
                    null,
                    C
                      ? T.rt(
                          "<strong>Huddles will soon have time limits</strong>"
                        )
                      : T.rt(
                          "<strong>Group huddles aren\u2019t available for much longer</strong>"
                        ),
                    t.createElement(d.A, {
                      className:
                        "p-huddle_invite_modal_trial_banner_v2__pro_tooltip",
                      uiComponentVariant:
                        c.UiComponentVariant.HUDDLES_INVITE_MODAL_FOOTER,
                      toolTipZIndex: r.m.MenuAboveFullScreen,
                      badgeSize: i.vj.Small,
                    })
                  ),
                  C
                    ? T.rt(
                        "Upgrade to continue using huddles longer than 30 minutes."
                      )
                    : T.rt(
                        "If you choose not to upgrade by {trialEndDate}, your team won\u2019t be able to huddle with more than one other person.",
                        {
                          trialEndDate: (0, v.Pd)(p),
                          fallbackHash:
                            "e680e704766e6c0c74ca66a78c581927a4b36bdf",
                        }
                      )
                )
              )
            );
          }, "HuddleInviteModalTrialBannerV2");
        f.displayName = "HuddleInviteModalTrialBannerV2";
        const y = f;
      },
      9953252450: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => M,
          x: () => f,
        });
        var t = e(5824283093),
          n = e(6122756707),
          s = e(4481313819),
          i = e(2612353366),
          d = e(2481088989),
          o = e(7433432223),
          a = e(3328083357),
          r = e(8739505998),
          c = e(1224315998),
          u = e(735940183),
          l = e(2562405183),
          m = e(8871937520),
          v = e(9003400431),
          E = e(3810478625),
          T = e(7268021173);
        const g = new u.Ay("trials_highlight_paid_features"),
          I = {
            elementName: "view_all_pro_features",
            onClick: {
              enableClogAction: !0,
            },
          },
          f = _((p) => {
            let {
              trialEndTs: O,
              experimentPnpE2eGroupOn: C,
              viewAllProFeaturesLink: h,
              v2ClassName: D,
            } = p;
            return C
              ? t.createElement(
                  s.A,
                  {
                    eventId: c.EventId.UPGRDEXP_TRIAL,
                    uiComponentName:
                      c.UiComponentName.HUDDLE_INVITE_MODAL_TRIAL_BANNER,
                    clogImpression: !0,
                  },
                  t.createElement(
                    "div",
                    {
                      className: D,
                    },
                    t.createElement(
                      o.A,
                      {
                        className: "padding_left_125",
                      },
                      (0, d.A)(
                        g.rt(
                          "Huddles without limits is a paid feature, available with your free trial through <strong>{trialExpirationDate}. <viewAllProFeaturesLink>View all Pro features</viewAllProFeaturesLink></strong>",
                          {
                            trialExpirationDate: (0, m.Pd)(O),
                            "<viewAllProFeaturesLink>": h,
                          }
                        ),
                        {
                          position: d.D.LEFT_ALIGNED,
                        }
                      )
                    )
                  )
                )
              : t.createElement(
                  s.A,
                  {
                    eventId: c.EventId.UPGRDEXP_TRIAL,
                    uiComponentName:
                      c.UiComponentName.HUDDLE_INVITE_MODAL_TRIAL_BANNER,
                    clogImpression: !0,
                  },
                  t.createElement(
                    "div",
                    {
                      className: "p-huddle_invite_modal_banner",
                    },
                    t.createElement(
                      a.A,
                      {
                        iconType: "clock-o",
                        "data-qa": "huddle_invite_modal_trial_banner",
                      },
                      g.rt(
                        "<strong>Huddles with more than two people is a paid feature,</strong> available with your free trial through {trialExpirationDate}.",
                        {
                          trialExpirationDate: (0, m.Pd)(O),
                        }
                      )
                    )
                  )
                );
          }, "HuddleInviteModalTrialBanner");
        f.displayName = "HuddleInviteModalTrialBanner";
        const y = _((p) => {
          let { v2ClassName: O } = p;
          const C = (0, n.wA)(),
            h = (0, l.d4)(E.g),
            D = (0, l.d4)(T.Sk),
            P = (0, t.useCallback)(() => {
              C((0, v.O)()), C((0, i.A)());
            }, [C]),
            S = (0, t.useCallback)(
              (b) => {
                let { text: K } = b;
                return t.createElement(
                  r.A,
                  {
                    onClick: P,
                    autoClogProps: I,
                  },
                  K
                );
              },
              [P]
            );
          return t.createElement(f, {
            trialEndTs: D,
            experimentPnpE2eGroupOn: h,
            viewAllProFeaturesLink: S,
            v2ClassName: O,
          });
        }, "ConnectedHuddleInviteModalTrialBanner");
        y.displayName = "ConnectedHuddleInviteModalTrialBanner";
        const M = y;
      },
      1152226587: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => l,
        });
        var t = e(5824283093),
          n = e(2670882607),
          s = e(1267040415),
          i = e(5791262841),
          d = e(266169032),
          o = e(735940183),
          a = e(6323355797);
        const r = new o.Ay("huddles"),
          c = a.ew.PAID_FEATURE_TRIAL,
          u = _((m) => {
            let {
              startTrialContext: v = d.M.huddlesTrialEntryPointModal,
              uiComponentVariant: E,
              onSpeedbumpContinue: T,
              promoType: g,
              promoSubtype: I,
              isEligibleForTrial: f,
            } = m;
            const y = _((P) => {
                let { text: S } = P;
                return t.createElement(
                  s.A,
                  {
                    "data-qa": "huddles_trial_entry_point-plans_page_link",
                    useLink: !0,
                  },
                  S
                );
              }, "renderPlansPageLink"),
              M = r.t("Try huddles with more people"),
              p = f
                ? r.rt(
                    "Get access to huddles with more than two people, and other <plansPageLink>premium collaboration tools</plansPageLink> with a free, {trialLength}-day trial of Slack Pro.",
                    {
                      trialLength: c,
                      "<plansPageLink>": y,
                    }
                  )
                : r.rt(
                    "Get access to huddles with more than two people, and other <plansPageLink>premium collaboration tools</plansPageLink> when you upgrade to a paid plan.",
                    {
                      "<plansPageLink>": y,
                    }
                  ),
              O = r.t("With more people, you can:"),
              C = (0, t.useCallback)(
                () => [
                  r.t("Host a team brainstorm from anywhere"),
                  r.t("Get the group\u2019s feedback with a live screenshare"),
                  r.t("Touch base on the go, without all the typing"),
                ],
                []
              ),
              h = (0, t.useCallback)(
                () =>
                  e
                    .e("gantry-v2-async-lottie-huddles-trial")
                    .then(e.t.bind(e, 7378585700, 23)),
                []
              ),
              D = (0, t.useMemo)(
                () =>
                  t.createElement(n.e, {
                    getAnimationImport: h,
                    autoplay: !0,
                    loop: !0,
                  }),
                [h]
              );
            return t.createElement(i.A, {
              modalTitle: M,
              modalSubtitle: p,
              modalLottieAnimation: D,
              modalBannerBackgroundColor: "#fdd37f",
              modalChecklistHeading: O,
              modalChecklistItems: C(),
              promoType: g,
              promoSubtype: I,
              startTrialContext: v,
              uiComponentVariant: E,
              onSpeedbumpContinue: T,
              isEligibleForTrial: f,
            });
          }, "HuddleTrialEntryPointModal");
        u.displayName = "HuddleTrialEntryPointModal";
        const l = u;
      },
      236241007: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => T,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(5824283093),
          i = e(1152226587),
          d = e(8300630630),
          o = e(6323355797),
          a = e(1031947056),
          r = e(2375333597),
          c = e(7268021173),
          u = e(962959561),
          l = e(3825145648),
          m = e(398781533);
        function v() {
          return (
            (v =
              Object.assign ||
              function (g) {
                for (var I = 1; I < arguments.length; I++) {
                  var f = arguments[I];
                  for (var y in f)
                    Object.prototype.hasOwnProperty.call(f, y) && (g[y] = f[y]);
                }
                return g;
              }),
            v.apply(this, arguments)
          );
        }
        _(v, "_extends");
        const E = (0, a.Ay)(
          "Open huddles trial entry point modal",
          (function () {
            var g = (0, t.coroutine)(function* (I, f, y) {
              const M = o.ZO.PaidFeatureTrial,
                p = o.zG.Vhq;
              I(
                (0, m.Q)({
                  skipCampaignEligibiltyCheck: !0,
                  campaignType: M,
                  campaignSubType: p,
                  reason: "huddle_trial_entry_point_modal",
                })
              ),
                yield I(
                  (0, d.A)({
                    campaignType: M,
                    campaignSubType: p,
                    reason: "huddle_trial_entry_point_modal",
                  })
                );
              const O = (0, c.hq)(f(), M, p);
              return (0, u.L9)(f(), !1, !0)
                ? I(
                    (0, l.r)({
                      promoType: M,
                      promoSubtype: p,
                      entryPoint: "slack_connect_auto_charge_trial_entry_point",
                    })
                  )
                : I(
                    (0, r.q)({
                      element: s.createElement(
                        i.A,
                        v({}, y, {
                          promoType: M,
                          promoSubtype: p,
                          isEligibleForTrial: O,
                        })
                      ),
                    })
                  );
            });
            return function (I, f, y) {
              return g.apply(this, arguments);
            };
          })()
        );
        E.meta = {
          name: "createThunk",
          key: "createThunkopenHuddlesTrialEntryPointModal",
          description: "Open huddles trial entry point modal",
        };
        const T = E;
      },
      2612353366: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => o,
        });
        var t = e(5267010247),
          n = e(8822892075),
          s = e(7940058138),
          i = e(1031947056);
        const d = (0, i.Ay)("Navigates to paid benefits page", (a) => {
          a((0, t.o)((0, n.ZF)(s.c.PaidBenefits)));
        });
        d.meta = {
          name: "createThunk",
          key: "createThunkopenPaidBenefitsPage",
          description: "Navigates to paid benefits page",
        };
        const o = d;
      },
      8300630630: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => c,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(5824283093),
          i = e(124213367),
          d = e(1031947056),
          o = e(2375333597),
          a = e(1384076438);
        const r = (0, d.Ay)(
          "Display loading modal and fetch data for trial entry point modal",
          (function () {
            var u = (0, t.coroutine)(function* (l, m, v) {
              return (
                l(
                  (0, o.q)({
                    element: s.createElement(i.A, {
                      className: "p-trial_entry_point_modal__loading_modal",
                    }),
                  })
                ),
                l((0, a.A)(v))
              );
            });
            return function (l, m, v) {
              return u.apply(this, arguments);
            };
          })()
        );
        r.meta = {
          name: "createThunk",
          key: "createThunkopenTrialLoadingModal",
          description:
            "Display loading modal and fetch data for trial entry point modal",
        };
        const c = r;
      },
      7949425452: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => v,
          Vu: () => c,
          vj: () => u,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(9113979368),
          i = e(4481313819),
          d = e(1224315998),
          o = e(735940183);
        function a() {
          return (
            (a =
              Object.assign ||
              function (E) {
                for (var T = 1; T < arguments.length; T++) {
                  var g = arguments[T];
                  for (var I in g)
                    Object.prototype.hasOwnProperty.call(g, I) && (E[I] = g[I]);
                }
                return E;
              }),
            a.apply(this, arguments)
          );
        }
        _(a, "_extends");
        const r = new o.Ay("trials"),
          c = {
            Purple: "purple",
            White: "white",
          },
          u = {
            Small: "small",
            Medium: "medium",
            Large: "large",
          },
          l = {
            eventId: d.EventId.UPGRDEXP_TRIAL,
            uiComponentName: d.UiComponentName.TRIAL_PRO_BADGE,
            clogImpression: !0,
          },
          m = _((E) => {
            let {
              ariaHidden: T = !1,
              className: g,
              autoClogProps: I,
              badgeTheme: f = c.Purple,
              size: y = u.Medium,
            } = E;
            const M = T
                ? {
                    "aria-hidden": !0,
                  }
                : {
                    "aria-label": r.t("Pro feature", {
                      fallbackHash: "f3b218b5b69cf46f83217a4c553335005e49633f",
                    }),
                    role: "img",
                  },
              p = t.createElement(
                "div",
                a(
                  {
                    className: (0, n.A)(
                      "p-pro_badge",
                      `p-pro_badge--${f}`,
                      `p-pro_badge--${y}`,
                      g
                    ),
                    "data-qa": "pro_badge",
                  },
                  M
                ),
                r.t("PRO")
              );
            return (0, s.A)(I) ? p : t.createElement(i.A, a({}, l, I), p);
          }, "ProBadge");
        m.displayName = "ProBadge";
        const v = m;
      },
      5641442783: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => E,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(7949425452),
          i = e(9371668729),
          d = e(6839188756),
          o = e(735940183),
          a = e(6323355797),
          r = e(2562405183),
          c = e(7268021173),
          u = e(3677514771);
        function l() {
          return (
            (l =
              Object.assign ||
              function (T) {
                for (var g = 1; g < arguments.length; g++) {
                  var I = arguments[g];
                  for (var f in I)
                    Object.prototype.hasOwnProperty.call(I, f) && (T[f] = I[f]);
                }
                return T;
              }),
            l.apply(this, arguments)
          );
        }
        _(l, "_extends");
        const m = new o.Ay("trials"),
          v = _((T) => {
            let {
              badgeTheme: g = s.Vu.Purple,
              badgeSize: I = s.vj.Medium,
              className: f,
              hideTooltip: y,
              uiComponentVariant: M,
              ...p
            } = T;
            const O = (0, r.d4)((P) => (0, d.tc)((0, u.H7)(P))),
              C = (0, r.d4)((P) => (0, c.tu)(P) === a.i6.standard.id),
              h = (0, t.useMemo)(
                () => ({
                  uiComponentVariant: M,
                }),
                [M]
              );
            if (!(O || C)) return null;
            const D = m.t("PRO");
            return y
              ? t.createElement(s.Ay, {
                  autoClogProps: h,
                  badgeTheme: g,
                  className: f,
                  size: I,
                })
              : t.createElement(
                  i.A,
                  l(
                    {
                      ariaLabel: D,
                      uiComponentVariant: M,
                    },
                    p
                  ),
                  t.createElement(
                    "span",
                    {
                      className: (0, n.A)("p-trial_pro_badge", f),
                      "data-qa": "trial_pro_badge",
                    },
                    t.createElement(s.Ay, {
                      autoClogProps: h,
                      badgeTheme: g,
                      size: I,
                    })
                  )
                );
          }, "TrialProBadge");
        v.displayName = "TrialProBadge";
        const E = v;
      },
      3994181705: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => v,
          G: () => u,
        });
        var t = e(5824283093),
          n = e(6122756707),
          s = e(735940183),
          i = e(6323355797),
          d = e(2562405183),
          o = e(3810478625),
          a = e(7268021173),
          r = e(1384076438);
        const c = new s.Ay("trials");
        var u;
        (function (E) {
          E.HuddlesFreemiumDeprecated = "huddles_freemium";
        })(u || (u = {}));
        const l = i.ew.PAID_FEATURE_TRIAL,
          v = _((E) => {
            let {
              isFreemium: T,
              tooltipText: g,
              promoType: I,
              promoSubtype: f,
              variant: y,
            } = E;
            const M = (0, n.wA)(),
              p = (0, d.d4)(o.g),
              O = (0, d.d4)(a.iH);
            (0, t.useEffect)(() => {
              I &&
                M(
                  (0, r.A)({
                    campaignType: I,
                    campaignSubType: f,
                    reason: "trial_tooltip",
                  })
                );
            }, [M, I, f]);
            const C = (0, d.d4)((b) => (I ? (0, a.bp)(b, I, f) : !1)),
              h = (0, d.d4)((b) => (I ? (0, a.hq)(b, I, f) : !1)),
              D = _(() => {
                if (O)
                  switch (y) {
                    case u.HuddlesFreemiumDeprecated:
                      return p
                        ? void 0
                        : c.t(
                            "Huddles with more than two people are a paid feature, available with your free trial"
                          );
                    default:
                      return c.t(
                        "This is a paid feature, available with your free trial"
                      );
                  }
                if (h)
                  switch (y) {
                    case u.HuddlesFreemiumDeprecated:
                      return p
                        ? void 0
                        : c.t(
                            "Huddles with more than two people are a paid feature, available with a free, {trialLength}-day trial",
                            {
                              trialLength: l,
                            }
                          );
                    default:
                      return c.t(
                        "This is a paid feature, available with a free, {trialLength}-day trial",
                        {
                          trialLength: l,
                        }
                      );
                  }
                switch (y) {
                  case u.HuddlesFreemiumDeprecated:
                    return p
                      ? void 0
                      : c.t(
                          "Huddles with more than two people are a paid feature, available with an upgrade"
                        );
                  default:
                    return c.t(
                      "This is a paid feature, available with an upgrade"
                    );
                }
              }, "getTooltipText"),
              P = _(
                () =>
                  O
                    ? c.t("This feature is unlimited with your free trial")
                    : h
                    ? c.t(
                        "This feature is unlimited with a free trial, {trialLength}-day trial",
                        {
                          trialLength: l,
                        }
                      )
                    : c.t("This feature is unlimited with an upgrade"),
                "getFreemiumTooltipText"
              );
            if (C) return {};
            const S = T ? P() : D();
            return g
              ? {
                  tooltipTitle: g,
                  tooltipBody: S,
                }
              : {
                  tooltipTitle: S,
                };
          }, "useTrialProBadgeTooltipText");
      },
      2481088989: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => o,
          D: () => i,
        });
        var t = e(5824283093),
          n = e(7949425452),
          s = e(5641442783);
        const i = {
          RIGHT_ALIGNED: "right_aligned",
          LEFT_ALIGNED: "left_aligned",
        };
        function d(a) {
          let {
            position: r = i.RIGHT_ALIGNED,
            isTrialVariant: c,
            uiComponentVariant: u,
            size: l,
          } = arguments.length > 1 && arguments[1] !== void 0
            ? arguments[1]
            : {
                position: i.RIGHT_ALIGNED,
                isTrialVariant: !1,
                uiComponentVariant: void 0,
                size: n.vj.Medium,
              };
          const m = t.createElement(
              "span",
              {
                className: `p-with_pro_badge__text--${r}`,
              },
              a
            ),
            v = c
              ? t.createElement(s.A, {
                  className: "p-with_pro_badge__badge",
                  uiComponentVariant: u,
                  badgeSize: l,
                })
              : t.createElement(n.Ay, {
                  className: "p-with_pro_badge__badge",
                  size: l,
                });
          let E;
          return (
            r === i.RIGHT_ALIGNED
              ? (E = t.createElement(t.Fragment, null, m, v))
              : (E = t.createElement(t.Fragment, null, v, m)),
            t.createElement(
              "div",
              {
                className: "p-with_pro_badge",
              },
              E
            )
          );
        }
        _(d, "WithProBadge"), (d.displayName = "WithProBadge");
        const o = d;
      },
      5791262841: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => x,
        });
        var t = e(9706240641),
          n = e(5824283093),
          s = e(6122756707),
          i = e(4481313819),
          d = e(1267040415),
          o = e(2934784510),
          a = e(4963725897),
          r = e(267465465),
          c = e(280819219),
          u = e(8719380546),
          l = e(8683010724);
        const v = _((B) => {
          let { checklistItems: U, checklistHeading: R } = B;
          return n.createElement(
            "div",
            {
              className: "p-modal_content_checklist__checklist",
            },
            n.createElement(
              "div",
              {
                className: "p-modal_content_checklist__heading",
              },
              R
            ),
            U.map((G) =>
              n.createElement(
                "div",
                {
                  key: G,
                  className: "p-modal_content_checklist__checklist_item",
                },
                n.createElement(
                  "div",
                  {
                    className: "p-modal_content_checklist__checklist_check",
                  },
                  n.createElement(l.A, {
                    name: "check",
                    size: "16",
                    variation: "filled",
                  })
                ),
                n.createElement("div", null, G)
              )
            )
          );
        }, "ModalContentChecklist");
        var E = e(5267010247),
          T = e(8822892075),
          g = e(7940058138),
          I = e(980293773),
          f = e(1224315998),
          y = e(2689960678),
          M = e(735940183),
          p = e(2562405183),
          O = e(6259241484),
          C = e(8871937520),
          h = e(9003400431),
          D = e(5512605238);
        const P = new M.Ay("trials"),
          S = {
            elementName: "start_trial",
            isPrimaryCTA: !0,
            onClick: {
              enableClogAction: !0,
            },
          },
          b = {
            elementName: "upgrade_link",
            isPrimaryCTA: !0,
            onClick: {
              enableClogAction: !0,
            },
          },
          K = _((B) => {
            let {
              modalClassName: U,
              modalCloseButtonTheme: R,
              modalSubtitle: G,
              modalTitle: H,
              modalType: F = r.H.VERTICAL_BANNER,
              modalVideoClassName: V,
              modalVideoFileName: X,
              modalLottieAnimation: q,
              modalVideoPosterExtension: oe = "",
              modalBannerBackgroundColor: z = "",
              modalChecklistHeading: Ae = "",
              modalChecklistItems: ae = y.Ml,
              promoType: de,
              promoSubtype: ve,
              imgSrc: Se,
              isEligibleForTrial: Ee,
              startTrialContext: be,
              uiPage: Ce,
              uiComponentVariant: Z,
              uiStep: $,
              onSpeedbumpContinue: N,
              onSpeedbumpContinueLabel: L,
              onTrialStart: w,
              skipSpeedbump: k,
              "data-qa": J,
              omitSecondaryCTA: ee = !1,
            } = B;
            const ne = (0, s.wA)(),
              pe = (0, p.d4)(D.F),
              [Me, ke] = (0, n.useState)(!1),
              ge = (0, n.useRef)(""),
              fe = (0, n.useCallback)(() => {
                ne((0, h.O)());
              }, [ne]),
              re = (0, n.useCallback)(
                (0, t.coroutine)(function* () {
                  let { trialExpirationDate: xe } =
                    arguments.length > 0 && arguments[0] !== void 0
                      ? arguments[0]
                      : {};
                  xe &&
                    ((ge.current = xe), w == null || w(), k ? fe() : ke(!0));
                }),
                [fe, w, k]
              ),
              le = (0, n.useCallback)(() => {
                fe(), ne((0, E.o)((0, T.ZF)(g.c.PaidBenefits)));
              }, [ne, fe]),
              Re = (0, n.useCallback)(() => {
                fe(), N == null || N();
              }, [fe, N]),
              ye = n.createElement(v, {
                checklistHeading: Ae,
                checklistItems: ae,
              }),
              Te = (0, n.useMemo)(() => [O.xu.SIDEBAR_MENU_HEADER], []),
              De = n.createElement(
                a.A,
                {
                  "data-qa": "trial_entry_point_modal_start_trial_button",
                  autoClogProps: S,
                  reason: "start_trial_from_trial_entry_point_modal",
                  context: be,
                  promoType: de,
                  promoSubtype: ve,
                  onRequestComplete: re,
                  megaphoneSpacesToRefresh: Te,
                },
                P.t("Start Free Trial")
              ),
              Ue = n.createElement(
                d.A,
                {
                  "data-qa": "trial_entry_point_modal_plans_page_button",
                  type: "primary",
                  autoClogProps: b,
                  onClick: fe,
                },
                P.t("See Upgrade Options")
              ),
              Ke = Ee ? De : Ue,
              Ze = r.H.HORIZONTAL_BANNER ? "800px" : "586px",
              Q = _(() => {
                if (!ge.current) return null;
                const xe = n.createElement(
                    "div",
                    {
                      className: "display_flex",
                    },
                    n.createElement(c.A, {
                      className: "p-trial_entry_point_modal__speedbump_icon",
                      type: "sparkles-filled",
                    }),
                    P.t("Ta-da! Your team\u2019s on a free trial")
                  ),
                  je = n.createElement(
                    "div",
                    {
                      className:
                        "p-trial_entry_point_modal__speedbump_description",
                    },
                    P.rt(
                      "You\u2019re on the most popular premium plan, Slack Pro \u2014 with features designed to help teams work better, together \u2014 through {trialExpirationDate}, absolutely free.",
                      {
                        trialExpirationDate: (0, C.Pd)(ge.current),
                      }
                    )
                  ),
                  He = _(
                    () => L || (N ? P.t("Continue") : P.t("Find Out More")),
                    "getContinueButtonLabel"
                  )();
                let Oe = P.t("Dismiss"),
                  Ye = le,
                  at = fe,
                  _t = "speedbump_learn_more",
                  pt = "speedbump_dismiss";
                return (
                  N &&
                    ((Oe = P.t("Learn More")),
                    (Ye = Re),
                    (at = le),
                    (_t = "speedbump_continue"),
                    (pt = "speedbump_learn_more")),
                  n.createElement(I.ty, {
                    className: "p-trial_entry_point_modal__speedbump",
                    "data-qa": "trial_entry_point_modal_speedbump",
                    heading: xe,
                    description: je,
                    continueButtonLabel: He,
                    cancelButtonLabel: Oe,
                    onCancel: ee ? void 0 : at,
                    onContinue: Ye,
                    continueButtonType: "primary",
                    autoFocusContinueButton: !0,
                    autoClogProps: {
                      continueButton: {
                        elementName: _t,
                        onClick: {
                          enableClogAction: !0,
                        },
                      },
                      cancelButton: {
                        elementName: pt,
                        onClick: {
                          enableClogAction: !0,
                        },
                      },
                    },
                  })
                );
              }, "renderSpeedbump");
            Q.displayName = "renderSpeedbump";
            const ie = n.createElement(
                "div",
                {
                  className: "p-trial_entry_point_modal__footer_text",
                  "data-qa": "trial_entry_point_modal_footer_text",
                },
                P.t("No credit card required.")
              ),
              Ve = n.createElement(
                "div",
                {
                  className: "p-trial_entry_point_modal__footer",
                },
                Ke,
                Ee && ie,
                Ee &&
                  n.createElement(o.A, {
                    shouldShow: pe,
                  }),
                Me && Q()
              );
            return n.createElement(
              i.A,
              {
                eventId: f.EventId.UPGRDEXP_TRIAL,
                clogImpression: !0,
                uiComponentName: f.UiComponentName.TRIAL_ENTRY_POINT_MODAL,
                uiComponentVariant: Z,
                uiStep: $,
                uiPage: Ce,
              },
              n.createElement(u.A, {
                bannerBackgroundColor: z,
                "data-qa": J,
                imgSrc: Se,
                title: H,
                subtitle: G,
                bodyContent: ye,
                footerContent: Ve,
                onRequestClose: fe,
                maxWidth: Ze,
                className: U,
                closeButtonTheme: R,
                type: F,
                videoFilename: X,
                videoPosterExtension: oe,
                videoClassName: V,
                lottieAnimation: q,
              })
            );
          }, "TrialEntryPointModal");
        K.displayName = "TrialEntryPointModal";
        const x = K;
      },
      2934784510: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => r,
        });
        var t = e(5824283093),
          n = e(6122756707),
          s = e(2670882607),
          i = e(2562405183),
          d = e(2047021170),
          o = e(1939990292);
        const r = t.memo((c) => {
          let { shouldShow: u = !1 } = c;
          const l = (0, n.wA)(),
            [m, v] = (0, t.useState)(),
            [E, T] = (0, t.useState)(!1),
            g = (0, t.useCallback)(
              (y) => {
                y && y.then((M) => v(M));
              },
              [v]
            ),
            I = (0, i.d4)((y) => !(0, d.ty)(y, "a11y_animations")),
            f = (0, t.useCallback)(
              () =>
                e
                  .e("trial-celebration-confetti.json")
                  .then(e.t.bind(e, 4831955131, 23)),
              []
            );
          return !u || I || E
            ? null
            : (m &&
                m._cbs &&
                m.addEventListener("complete", () => {
                  l((0, o.DJ)(!1)), T(!0);
                }),
              t.createElement(s.e, {
                autoplay: !0,
                className: "p-trial_start_confetti",
                getAnimationImport: f,
                ref: g,
              }));
        });
      },
      4963725897: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => K,
        });
        var t = e(5824283093),
          n = e(6122756707),
          s = e(7715417323),
          i = e(4481313819),
          d = e(4585652590),
          o = e(6084388622),
          a = e(8739505998),
          r = e(5733135148),
          c = e(1224315998),
          u = e(735940183),
          l = e(2562405183),
          m = e(1655938719),
          v = e(1939990292),
          E = e(398781533),
          T = e(9706240641),
          g = e(1031947056),
          I = e(962959561),
          f = e(1384076438),
          y = e(677609895),
          M = e(6323355797),
          p = e(3677514771);
        const O = (0, g.Ay)(
          "Open trial checkout or plans page if user can purchase",
          (function () {
            var x = (0, T.coroutine)(function* (B, U, R) {
              let { campaignType: G, campaignSubType: H } = R;
              const F = (0, p.H7)(U()),
                V = (0, M.tc)(F, G, H),
                X = (0, M.hZ)({
                  entryPoint: G,
                  team: F,
                }),
                { isEligible: q } = yield B(
                  (0, f.A)({
                    campaignType: G,
                    campaignSubType: H,
                    reason: "auto_charge_trial_start_cta",
                  })
                );
              q && (0, I.L9)(U()) && (0, y.X)(U())
                ? window.open(V, "_blank")
                : window.open(X, "_blank");
            });
            return function (B, U, R) {
              return x.apply(this, arguments);
            };
          })()
        );
        O.meta = {
          name: "createThunk",
          key: "createThunkpaidFeatureTrialAutoChargeOpenTrialCheckout",
          description: "Open trial checkout or plans page if user can purchase",
        };
        var C = e(5773584938);
        function h() {
          return (
            (h =
              Object.assign ||
              function (x) {
                for (var B = 1; B < arguments.length; B++) {
                  var U = arguments[B];
                  for (var R in U)
                    Object.prototype.hasOwnProperty.call(U, R) && (x[R] = U[R]);
                }
                return x;
              }),
            h.apply(this, arguments)
          );
        }
        _(h, "_extends");
        const D = new u.Ay("trials"),
          P = {
            name: "warning",
          },
          S = _((x) => {
            let {
              children: B,
              reason: U,
              context: R,
              megaphoneSpacesToRefresh: G,
              promoType: H,
              promoSubtype: F,
              onClick: V,
              onRequestComplete: X = s.A,
              onRequestError: q = s.A,
              useLink: oe,
              refToForward: z,
              ...Ae
            } = x;
            const ae = (0, n.wA)(),
              de = (0, l.d4)(C.Ii),
              [ve, Se] = (0, t.useState)(!1),
              [Ee, be] = (0, t.useState)(!1),
              Ce = (0, t.useCallback)(() => {
                Se(!0), be(!1), q();
              }, [q]),
              Z = (0, t.useCallback)(() => {
                Ee ||
                  (be(!0),
                  Se(!1),
                  ae(
                    (0, d.a)({
                      reason: U,
                      campaignType: H,
                      campaignSubType: F,
                      context: R,
                    })
                  )
                    .then((L) => {
                      let { trial_expiration_date: w } = L;
                      ae((0, v.DJ)(!0)),
                        X({
                          trialExpirationDate: w,
                        }),
                        ae(
                          (0, m.yJ)({
                            additionalSpaces: G,
                            megaphoneReason: "trial_start_request_complete",
                          })
                        ),
                        w || Ce();
                    })
                    .catch(Ce));
              }, [Ee, ae, U, H, F, R, Ce, X, G]),
              $ = (0, t.useCallback)(() => {
                ae(
                  (0, E.Q)({
                    campaignType: H,
                    campaignSubType: F,
                    reason: "auto_charge_trial_check",
                  })
                ),
                  de
                    ? ae(
                        O({
                          campaignType: H,
                          campaignSubType: F,
                        })
                      )
                    : Z(),
                  V == null || V();
              }, [V, Z, ae, H, F, de]),
              N = oe
                ? t.createElement(
                    a.A,
                    h(
                      {
                        ref: z,
                      },
                      Ae,
                      {
                        onClick: $,
                      }
                    ),
                    B
                  )
                : t.createElement(
                    o.lV,
                    h(
                      {
                        ref: z,
                      },
                      Ae,
                      {
                        onClick: $,
                        loading: Ee,
                      }
                    ),
                    B
                  );
            return t.createElement(
              i.A,
              {
                eventId: c.EventId.UPGRDEXP_TRIAL_START,
                clogImpression: !0,
              },
              N,
              ve &&
                t.createElement(
                  r.Ay,
                  {
                    svgIconProps: P,
                    svgIconClassName: "align_self_start",
                    shouldAutoFade: !1,
                  },
                  D.t("Something went wrong. Try again later.", {
                    fallbackHash: "248cbe7878bb83237a17ae6abe635e6251a6517a",
                    fallbackHashNs: "channel_modal",
                  })
                )
            );
          }, "TrialStartCTABase");
        S.displayName = "TrialStartCTABase";
        const K = t.forwardRef((x, B) =>
          t.createElement(
            S,
            h({}, x, {
              refToForward: B,
            })
          )
        );
      },
      1388835426: (W, A, e) => {
        "use strict";
        e.d(A, {
          S: () => n,
        });
        var t = e(735940183);
        const n = _((s) => {
          switch ((0, t.Yp)()) {
            case "de-DE":
              return {
                translation: s["de-DE"],
                enableMediaCaptions: !0,
              };
            case "en-GB":
              return {
                translation: s["en-GB"],
                enableMediaCaptions: !1,
              };
            case "en-US":
              return {
                translation: s["en-US"],
                enableMediaCaptions: !1,
              };
            case "es-ES":
              return {
                translation: s["es-ES"],
                enableMediaCaptions: !0,
              };
            case "es-LA":
              return {
                translation: s["es-LA"],
                enableMediaCaptions: !0,
              };
            case "fr-FR":
              return {
                translation: s["fr-FR"],
                enableMediaCaptions: !0,
              };
            case "it-IT":
              return {
                translation: s["it-IT"],
                enableMediaCaptions: !0,
              };
            case "ja-JP":
              return {
                translation: s["ja-JP"],
                enableMediaCaptions: !0,
              };
            case "ko-KR":
              return {
                translation: s["ko-KR"],
                enableMediaCaptions: !0,
              };
            case "pt-BR":
              return {
                translation: s["pt-BR"],
                enableMediaCaptions: !0,
              };
            case "zh-CN":
              return {
                translation: s["zh-CN"],
                enableMediaCaptions: !0,
              };
            case "zh-TW":
              return {
                translation: s["zh-TW"],
                enableMediaCaptions: !0,
              };
            default:
              return {
                translation: s["en-US"],
                enableMediaCaptions: !0,
              };
          }
        }, "useVideoTranslation");
      },
      5712872315: (W, A, e) => {
        "use strict";
        e.d(A, {
          B: () => n,
          D: () => t,
        });
        var t;
        (function (s) {
          (s.SMALL = "small"), (s.MEDIUM = "medium"), (s.LARGE = "large");
        })(t || (t = {}));
        var n;
        (function (s) {
          (s.NONE = "none"),
            (s.PURPLE = "purple"),
            (s.LIGHT_PURPLE = "light_purple"),
            (s.BLUE = "blue"),
            (s.ERROR = "error"),
            (s.HORCHATA = "horchata"),
            (s.SUNFLOWER = "sunflower");
        })(n || (n = {}));
      },
      3328083357: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => m,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(5712872315),
          i = e(280819219),
          d = e(581167618),
          o = e(6105929840),
          a = e(1224315998),
          r = e(735940183);
        const c = new r.Ay("upgrades_kit"),
          u = {
            action: a.UiAction.CLOSE,
            onClick: {
              enableClogAction: !0,
            },
            elementName: "close",
            elementType: a.ElementType.X,
          },
          l = _((v) => {
            let {
              className: E,
              iconType: T,
              customIcon: g,
              image: I,
              heading: f,
              children: y,
              onDismiss: M,
              useRoundedCorners: p = !0,
              showBorder: O = !0,
              size: C = s.D.MEDIUM,
              theme: h = s.B.PURPLE,
              "data-qa": D = "",
              primaryCTA: P,
              secondaryCTA: S,
            } = v;
            const b = _(() => {
              let R;
              const G = "p-upgrades_alert_banner__icon";
              return (
                g
                  ? (R = t.createElement(
                      "div",
                      {
                        className: G,
                      },
                      g
                    ))
                  : I
                  ? (R = t.createElement(
                      "div",
                      {
                        className: (0, n.A)(
                          G,
                          "p-upgrades_alert_banner__icon--image"
                        ),
                      },
                      I
                    ))
                  : T &&
                    (R = t.createElement(i.A, {
                      className: G,
                      size: C,
                      theme: h,
                      type: T,
                    })),
                R
              );
            }, "renderIcon");
            b.displayName = "renderIcon";
            const K = _(
              () =>
                t.createElement(o.A, {
                  className: "p-upgrades_alert_banner__close_icon",
                  "data-qa": "alert_banner_close_button",
                  icon: "times",
                  size: "small",
                  "aria-label": c.t("Dismiss"),
                  onClick: M,
                  autoClogProps: u,
                }),
              "renderCloseIcon"
            );
            K.displayName = "renderCloseIcon";
            const x = _(
              () =>
                !P && !S
                  ? null
                  : t.createElement(
                      "div",
                      {
                        className: "p-upgrades_alert_banner__button_container",
                      },
                      P,
                      S
                    ),
              "renderButtons"
            );
            x.displayName = "renderButtons";
            const B = b(),
              U = (0, n.A)(
                "p-upgrades_alert_banner",
                `p-upgrades_alert_banner--${C}`,
                `p-upgrades_alert_banner--${h}`,
                E,
                {
                  "p-upgrades_alert_banner--with_close_icon": !!M,
                  "p-upgrades_alert_banner--rounded_corners": p,
                  "p-upgrades_alert_banner--no_border": !O,
                  "p-upgrades_alert_banner--with_image": !!I,
                }
              );
            return t.createElement(
              "div",
              {
                className: "full_width",
              },
              t.createElement(
                d.Ay,
                {
                  className: U,
                  "data-qa": D,
                  customIcon: B,
                  heading: f,
                  type: B ? d.QE.boxed : d.QE.custom,
                },
                t.createElement(
                  "div",
                  {
                    className: "p-upgrades_alert_banner__body",
                  },
                  y
                ),
                x(),
                M && K()
              )
            );
          }, "AlertBanner");
        l.displayName = "AlertBanner";
        const m = l;
      },
      7433432223: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => f,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(5712872315),
          i = e(6755588906),
          d = e(581167618),
          o = e(6084388622),
          a = e(6308822),
          r = e(6105929840),
          c = e(8683010724),
          u = e(1224315998),
          l = e(735940183);
        function m() {
          return (
            (m =
              Object.assign ||
              function (y) {
                for (var M = 1; M < arguments.length; M++) {
                  var p = arguments[M];
                  for (var O in p)
                    Object.prototype.hasOwnProperty.call(p, O) && (y[O] = p[O]);
                }
                return y;
              }),
            m.apply(this, arguments)
          );
        }
        _(m, "_extends");
        const v = new l.Ay("upgrades_kit"),
          E = 425,
          T = {
            action: u.UiAction.CLOSE,
            onClick: {
              enableClogAction: !0,
            },
            elementName: "close",
            elementType: u.ElementType.X,
          },
          g = _((y) => {
            let {
              className: M,
              image: p,
              heading: O,
              isLoading: C,
              children: h,
              onDismiss: D,
              useRoundedCorners: P = !0,
              showBorder: S = !0,
              size: b = s.D.MEDIUM,
              theme: K = s.B.HORCHATA,
              primaryCTA: x,
              secondaryCTA: B,
              withMargins: U,
              iconProps: R,
              "data-qa": G,
              columnWidth: H = 0,
            } = y;
            const F = _(
                () =>
                  t.createElement(r.A, {
                    className: "p-upgrades_alert_banner_v2__close_icon",
                    icon: "times",
                    size: "small",
                    "aria-label": v.t("Dismiss"),
                    onClick: D,
                    autoClogProps: T,
                  }),
                "renderCloseIcon"
              ),
              V = _(() => {
                const z = t.createElement(
                  "div",
                  null,
                  t.createElement(
                    "div",
                    {
                      className: "p-upgrades_alert_banner_v2__heading",
                    },
                    O
                  ),
                  t.createElement(
                    "div",
                    {
                      className: "p-upgrades_alert_banner_v2__body",
                    },
                    h
                  )
                );
                if (R) {
                  const Ae = {
                    inline: !0,
                    size: "20",
                    ...R,
                  };
                  return t.createElement(
                    "div",
                    {
                      className: "display_flex",
                    },
                    t.createElement(
                      "span",
                      {
                        className: `margin_right_50 p-upgrades_alert_banner_v2__icon--${K}`,
                      },
                      t.createElement(c.A, m({}, Ae))
                    ),
                    t.createElement(
                      "div",
                      {
                        className: "display_flex flex_direction_column",
                      },
                      z
                    )
                  );
                }
                return z;
              }, "renderContent");
            V.displayName = "renderContent";
            const X = _(
              () =>
                !x && !B
                  ? null
                  : t.createElement(
                      "div",
                      {
                        className:
                          "p-upgrades_alert_banner_v2__button_container",
                      },
                      C
                        ? t.createElement(o.lV, {
                            loading: !0,
                          })
                        : t.createElement(t.Fragment, null, x, B)
                    ),
              "renderButtons"
            );
            X.displayName = "renderButtons";
            const q = H < E,
              oe = (0, n.A)(
                "p-upgrades_alert_banner_v2",
                `p-upgrades_alert_banner_v2--${b}`,
                `p-upgrades_alert_banner_v2--${K}`,
                M,
                {
                  "p-upgrades_alert_banner_v2--with_close_icon": !!D,
                  "p-upgrades_alert_banner_v2--rounded_corners": P,
                  "p-upgrades_alert_banner_v2--no_border": !S,
                  "p-upgrades_alert_banner_v2--with_image": !!p,
                  "p-upgrades_alert_banner_v2--with_margins": U,
                  "p-upgrades_alert_banner_v2--narrow": q,
                }
              );
            return t.createElement(
              "div",
              {
                className: "full_width",
              },
              t.createElement(
                d.Ay,
                {
                  className: oe,
                  type: d.QE.inline,
                  "data-qa": G,
                },
                t.createElement(
                  "div",
                  {
                    className: "p-upgrades_alert_banner_v2__content",
                  },
                  C
                    ? t.createElement(a.A, {
                        color: "white",
                        inline: !0,
                      })
                    : V(),
                  X(),
                  D && F()
                )
              )
            );
          }, "AlertBanner");
        g.displayName = "AlertBanner";
        const f = (0, i.t)(g);
      },
      267465465: (W, A, e) => {
        "use strict";
        e.d(A, {
          H: () => t,
        });
        var t;
        (function (n) {
          (n.MULTI_PANE = "multi_pane"),
            (n.SINGLE_PANE = "single_pane"),
            (n.VERTICAL_BANNER = "vertical_banner"),
            (n.HORIZONTAL_BANNER = "horizontal_banner");
        })(t || (t = {}));
      },
      280819219: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => c,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(5712872315);
        const d = t.memo((u) => {
          let { animationDelay: l, size: m = "large" } = u;
          const v = 48,
            E = v - (m === "large" ? 48 : 36),
            T = v * 2,
            g = "#1D9BD1",
            I = "#F2C744",
            f = "#007A5A",
            y = "#E01E5A",
            M = {
              animationDelay: `${l || 0}s`,
            },
            p = _(
              (D, P) =>
                t.createElement("path", {
                  d: "M2 10.3L6 10.39C8.2 10.4 10 8.6 10 6.3C10 4 8.2 2.1 6 2C3.79 2 2 3.85 2 6.15L2 10.3Z",
                  fill: P,
                  className: D,
                  style: M,
                }),
              "renderDrop"
            ),
            O = _(
              (D, P) =>
                t.createElement("circle", {
                  r: "4",
                  fill: P,
                  className: D,
                  style: M,
                }),
              "renderCircle"
            ),
            C = _(
              (D, P) =>
                t.createElement("path", {
                  d: "M6.47 1.27C6.3 0.83 5.69 0.83 5.53 1.27L4.46 4.16C4.4 4.3 4.3 4.41 4.16 4.46L1.27 5.53C0.83 5.69 0.831 6.3 1.27 6.47L4.16 7.5C4.3 7.59 4.41 7.7 4.46 7.84L5.53 10.73C5.69 11.17 6.31 11.17 6.47 10.73L7.54 7.84C7.59 7.7 7.7 7.59 7.84 7.54L10.73 6.47C11.17 6.31 11.17 5.69 10.73 5.53L7.84 4.46C7.7 4.41 7.59 4.3 7.54 4.16L6.47 1.27Z",
                  fill: P,
                  className: D,
                  style: M,
                }),
              "renderStar"
            ),
            h = _(
              (D, P) =>
                t.createElement("path", {
                  d: "M1 5.5C1 4.12 2.12 3 3.5 3H8.5C9.88 3 11 4.12 11 5.5V5.5C11 6.88 9.88 8 8.5 8H3.5C2.12 8 1 6.88 1 5.5V5.5Z",
                  fill: P,
                  className: D,
                  style: M,
                }),
              "renderSprinkle"
            );
          return t.createElement(
            "svg",
            {
              className: (0, n.A)(
                "position_absolute",
                `p-upgrades_icon_celebration_animation--${m}`
              ),
              style: {
                top: `-${v / 2 + E / 2}px`,
                left: `-${v / 2 + E / 2}px`,
              },
              width: T,
              height: T,
              viewBox: `0 0 ${T} ${T}`,
              fill: "none",
              xmlns: "http://www.w3.org/2000/svg",
            },
            p("p-upgrades_icon_celebration_animation__drop_top_right", g),
            O("p-upgrades_icon_celebration_animation__circle_top_right", I),
            O("p-upgrades_icon_celebration_animation__circle_right", f),
            C("p-upgrades_icon_celebration_animation__star_bottom_right", I),
            O("p-upgrades_icon_celebration_animation__circle_bottom_right", I),
            h("p-upgrades_icon_celebration_animation__sprinkle_bottom_left", y),
            p("p-upgrades_icon_celebration_animation__drop_left", I),
            O("p-upgrades_icon_celebration_animation__circle_top_left", g),
            C("p-upgrades_icon_celebration_animation__star_top_left", f),
            h("p-upgrades_icon_celebration_animation__sprinkle_top_left", y)
          );
        });
        var o = e(1610251172);
        function a() {
          return (
            (a =
              Object.assign ||
              function (u) {
                for (var l = 1; l < arguments.length; l++) {
                  var m = arguments[l];
                  for (var v in m)
                    Object.prototype.hasOwnProperty.call(m, v) && (u[v] = m[v]);
                }
                return u;
              }),
            a.apply(this, arguments)
          );
        }
        _(a, "_extends");
        const r = _((u) => {
          let {
            className: l,
            animationProps: m,
            hasBorder: v,
            type: E,
            size: T = s.D.MEDIUM,
            theme: g = s.B.PURPLE,
            showAnimation: I,
          } = u;
          const f = (0, n.A)(
              `p-upgrades_icon--${T}`,
              `p-upgrades_icon--${g}`,
              l
            ),
            y = t.createElement(o.A, {
              className: f,
              size: "inherit",
              type: E,
            });
          if (!v) return y;
          const M = (0, n.A)(
            "p-upgrades_icon_container",
            `p-upgrades_icon_container--${T}`,
            `p-upgrades_icon_container--${g}`,
            {
              "p-upgrades_icon_container--with_animation": I,
            }
          );
          return t.createElement(
            "div",
            {
              className: M,
            },
            y,
            I &&
              t.createElement(
                d,
                a(
                  {
                    size: T,
                  },
                  m
                )
              )
          );
        }, "UpgradesIcon");
        r.displayName = "UpgradesIcon";
        const c = r;
      },
      5207331754: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(980293773);
        const d = _((o) => {
          let { children: a, className: r } = o;
          return t.createElement(
            s.qf,
            {
              className: (0, n.A)("p-upgrades_modal__content_section", r),
            },
            a
          );
        }, "ModalBody");
      },
      9240394198: (W, A, e) => {
        "use strict";
        e.d(A, {
          N: () => f,
          A: () => M,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(267465465),
          i = e(7949425452),
          d = e(5207331754),
          o = e(6000244203),
          a = e(3357053101),
          r = e(1935364562),
          c = e(3801841745),
          u = e(581167618),
          l = e(980293773);
        const v = _((p) => {
            let {
              banner: O,
              bodyContent: C,
              footerContent: h,
              showProBadge: D = !0,
              subtitle: P,
              title: S,
              error: b,
            } = p;
            return t.createElement(
              t.Fragment,
              null,
              t.createElement(
                "div",
                {
                  className:
                    "p-upgrades_modal_with_banner_horizontal__left_panel",
                },
                t.createElement(
                  c.A,
                  {
                    flexDirection: "column",
                    gap: 20,
                  },
                  b &&
                    t.createElement(
                      u.Ay,
                      {
                        icon: "warning",
                        level: "error",
                        className:
                          "p-upgrades_modal_with_banner_horizontal__error_alert",
                      },
                      b
                    ),
                  t.createElement(
                    a.A,
                    {
                      headerClassName:
                        "p-upgrades_modal_with_banner_horizontal__header",
                      titleClassName: "padding_top_0",
                      title: S,
                    },
                    D &&
                      t.createElement(i.Ay, {
                        className:
                          "p-upgrades_modal_with_banner_horizontal__pro_badge",
                      })
                  )
                ),
                t.createElement(
                  l.$m,
                  null,
                  P &&
                    t.createElement(r.A, {
                      className:
                        "p-upgrades_modal_with_banner_horizontal__subtitle",
                      subtitle: P,
                    }),
                  t.createElement(
                    d.A,
                    {
                      className:
                        "p-upgrades_modal_with_banner_horizontal__body",
                    },
                    C
                  )
                ),
                t.createElement(
                  o.A,
                  {
                    className:
                      "p-upgrades_modal_with_banner_horizontal__footer",
                  },
                  h
                )
              ),
              O
            );
          }, "ModalContentHorizontalBanner"),
          E = _((p) => {
            let {
              banner: O,
              bodyContent: C,
              footerContent: h,
              showProBadge: D = !0,
              subtitle: P,
              title: S,
            } = p;
            const b = t.createElement(
              t.Fragment,
              null,
              S,
              D &&
                t.createElement(i.Ay, {
                  className: "p-upgrades_modal_with_banner_vertical__pro_badge",
                })
            );
            return t.createElement(
              t.Fragment,
              null,
              t.createElement(
                a.A,
                {
                  titleClassName:
                    "p-upgrades_modal_with_banner_vertical__title",
                  title: b,
                },
                O
              ),
              t.createElement(
                l.$m,
                null,
                P &&
                  t.createElement(r.A, {
                    className:
                      "p-upgrades_modal_with_banner_vertical__subtitle",
                    subtitle: P,
                  }),
                t.createElement(
                  d.A,
                  {
                    className: "p-upgrades_modal_with_banner_vertical__body",
                  },
                  C
                )
              ),
              t.createElement(o.A, null, h)
            );
          }, "ModalContentVerticalBanner");
        E.displayName = "ModalContentVerticalBanner";
        const T = E;
        var g = e(9421999304);
        function I() {
          return (
            (I =
              Object.assign ||
              function (p) {
                for (var O = 1; O < arguments.length; O++) {
                  var C = arguments[O];
                  for (var h in C)
                    Object.prototype.hasOwnProperty.call(C, h) && (p[h] = C[h]);
                }
                return p;
              }),
            I.apply(this, arguments)
          );
        }
        _(I, "_extends");
        var f;
        (function (p) {
          (p.LIGHT = "light"),
            (p.DARK = "dark"),
            (p.GOLD = "gold"),
            (p.GRAY = "gray");
        })(f || (f = {}));
        const y = _((p) => {
          let {
            bannerBackgroundColor: O,
            bodyContent: C,
            centered: h,
            className: D,
            closeButtonTheme: P = f.DARK,
            closeModal: S,
            dataQa: b,
            footerContent: K,
            hero: x,
            imgSrc: B,
            imgSrcSet: U,
            maxWidth: R,
            shouldCloseOnOverlayClick: G,
            showProBadge: H = !0,
            subtitle: F,
            title: V,
            error: X,
            type: q,
            videoFilename: oe,
            videoPosterExtension: z = "png",
            videoClassName: Ae,
            lottieAnimation: ae,
            ...de
          } = p;
          const ve = (0, g.JK)(),
            Se = `${oe}${ve === "en-US" ? "" : `.${ve}`}`,
            Ee = `p-upgrades_modal_with_banner__banner--${q}`,
            be = _(
              () =>
                x
                  ? t.createElement(
                      "div",
                      {
                        className: Ee,
                      },
                      x
                    )
                  : U
                  ? t.createElement("img", {
                      className: Ee,
                      alt: "",
                      srcSet: U,
                    })
                  : B
                  ? t.createElement("img", {
                      className: Ee,
                      alt: "",
                      src: B,
                    })
                  : oe
                  ? t.createElement(
                      "video",
                      {
                        playsInline: !0,
                        autoPlay: !0,
                        muted: !0,
                        className: (0, n.A)(Ee, Ae),
                        poster: `${Se}.${z}`,
                      },
                      t.createElement("source", {
                        type: "video/mp4",
                        src: `${Se}.mp4`,
                      }),
                      t.createElement("source", {
                        type: "video/webm",
                        src: `${Se}.webm`,
                      })
                    )
                  : ae
                  ? t.createElement(
                      "div",
                      {
                        className: "p-upgrades_modal__lottie_container",
                      },
                      ae
                    )
                  : null,
              "getModalBanner"
            );
          be.displayName = "getModalBanner";
          const Ce = t.createElement(
            "div",
            {
              style: {
                backgroundColor: O,
              },
              className: `p-upgrades_modal_with_banner__banner_container--${q}`,
            },
            be()
          );
          return t.createElement(
            l.dW,
            I(
              {
                className: (0, n.A)(
                  "p-upgrades_modal_with_banner",
                  `p-upgrades_modal_with_banner__base_modal--${q}`,
                  `p-upgrades_modal_with_banner--close_button_${P}`,
                  "p-upgrades_modal_with_banner--close_button",
                  D
                ),
                centered: h,
                closeModal: S,
                dataQa: b,
                maxWidth: R,
                shouldCloseOnOverlayClick: G,
              },
              de
            ),
            q === s.H.VERTICAL_BANNER
              ? t.createElement(T, {
                  banner: Ce,
                  bodyContent: C,
                  footerContent: K,
                  showProBadge: H,
                  subtitle: F,
                  title: V,
                })
              : t.createElement(v, {
                  banner: Ce,
                  bodyContent: C,
                  footerContent: K,
                  showProBadge: H,
                  subtitle: F,
                  title: V,
                  error: X,
                })
          );
        }, "ModalContentWithBanner");
        y.displayName = "ModalContentWithBanner";
        const M = y;
      },
      6000244203: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(980293773);
        const d = _((o) => {
          let { children: a, className: r } = o;
          return t.createElement(
            s.jl,
            {
              className: "p-upgrades_modal__footer",
            },
            t.createElement(
              s.ox,
              {
                className: (0, n.A)("p-upgrades_modal__footer_actions", r),
              },
              a
            )
          );
        }, "ModalFooter");
      },
      3357053101: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(980293773);
        const d = _((o) => {
          let {
            headerClassName: a,
            titleClassName: r,
            children: c,
            title: u,
          } = o;
          return t.createElement(
            s.rQ,
            {
              className: (0, n.A)("p-upgrades_modal__header", a),
            },
            c,
            t.createElement(s.Rc, {
              className: (0, n.A)("p-upgrades_modal__title", r),
              title: u,
            })
          );
        }, "ModalHeader");
      },
      1935364562: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => i,
        });
        var t = e(5824283093),
          n = e(5255740490);
        const i = _((d) => {
          let { className: o, subtitle: a } = d;
          return t.createElement(
            "div",
            {
              className: (0, n.A)("p-upgrades_modal__subtitle", o),
            },
            a
          );
        }, "ModalSubtitle");
      },
      8719380546: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => I,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(267465465),
          i = e(5712872315),
          d = e(280819219),
          o = e(5207331754),
          a = e(6000244203),
          r = e(3357053101),
          c = e(1935364562),
          u = e(980293773);
        const m = _((f) => {
          let {
            subtitle: y,
            bodyContent: M,
            footerContent: p,
            title: O,
            titleImage: C,
            titleVideo: h,
            titleVideoClassName: D,
            titleIcon: P,
            showTitleIconAnimation: S,
            headerClassName: b,
            footerActionsClassName: K,
            theme: x,
          } = f;
          return t.createElement(
            t.Fragment,
            null,
            t.createElement(
              r.A,
              {
                headerClassName: (0, n.A)(b, {
                  "p-upgrades_modal__header--with_animation": S,
                }),
                title: O,
              },
              C,
              h &&
                t.createElement(
                  "div",
                  {
                    className: (0, n.A)(D),
                  },
                  h
                ),
              P &&
                t.createElement(
                  "div",
                  {
                    className: "p-upgrades_modal__icon",
                  },
                  t.createElement(d.A, {
                    hasBorder: !0,
                    size: i.D.LARGE,
                    type: P,
                    showAnimation: !!S,
                    theme: x,
                  })
                )
            ),
            y &&
              t.createElement(c.A, {
                subtitle: y,
              }),
            M && t.createElement(u.$m, null, t.createElement(o.A, null, M)),
            t.createElement(
              a.A,
              {
                className: K,
              },
              p
            )
          );
        }, "ModalContent");
        var v = e(9240394198),
          E = e(4376397139);
        function T() {
          return (
            (T =
              Object.assign ||
              function (f) {
                for (var y = 1; y < arguments.length; y++) {
                  var M = arguments[y];
                  for (var p in M)
                    Object.prototype.hasOwnProperty.call(M, p) && (f[p] = M[p]);
                }
                return f;
              }),
            T.apply(this, arguments)
          );
        }
        _(T, "_extends");
        const g = _((f) => {
          const {
              className: y,
              maxWidth: M,
              onRequestClose: p,
              type: O,
              "data-qa": C,
              UNSAFE_parentSelector: h,
            } = f,
            P = {
              className: (0, n.A)("p-upgrades_modal__container", y),
              closeModal: p,
              shouldCloseOnOverlayClick: !0,
              centered: !0,
              maxWidth: M,
              dataQa: C,
              UNSAFE_parentSelector: h,
            };
          return O === s.H.MULTI_PANE
            ? t.createElement(E.A, T({}, f, P))
            : O === s.H.VERTICAL_BANNER || O === s.H.HORIZONTAL_BANNER
            ? t.createElement(v.A, T({}, f, P))
            : t.createElement(u.dW, T({}, P), t.createElement(m, T({}, f)));
        }, "Modal");
        g.displayName = "Modal";
        const I = g;
      },
      9371668729: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => m,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(4481313819),
          i = e(7949425452),
          d = e(3994181705),
          o = e(2312625946),
          a = e(1224315998),
          r = e(2562405183),
          c = e(7268021173);
        function u() {
          return (
            (u =
              Object.assign ||
              function (v) {
                for (var E = 1; E < arguments.length; E++) {
                  var T = arguments[E];
                  for (var g in T)
                    Object.prototype.hasOwnProperty.call(T, g) && (v[g] = T[g]);
                }
                return v;
              }),
            u.apply(this, arguments)
          );
        }
        _(u, "_extends");
        const l = _((v) => {
          let {
            ariaLabel: E,
            tooltipText: T,
            children: g,
            onClick: I,
            isFreemium: f,
            promoType: y,
            promoSubtype: M,
            showProBadge: p,
            tooltipClassName: O,
            uiComponentVariant: C,
            variant: h,
            toolTipZIndex: D,
            toolTipPosition: P,
            ...S
          } = v;
          const { tooltipTitle: b, tooltipBody: K } = (0, d.A)({
              isFreemium: f,
              tooltipText: T,
              promoType: y,
              promoSubtype: M,
              variant: h,
            }),
            x = (0, r.d4)((R) => (0, c.bp)(R, y, M)),
            B = K ? `${b} - ${K}` : b;
          if (x) return g;
          const U = t.createElement(
            s.A,
            {
              clogImpression: !0,
              eventId: a.EventId.UPGRDEXP_TRIAL,
              uiComponentName: a.UiComponentName.TRIAL_FEATURE_TOOLTIP,
              uiComponentVariant: C,
            },
            t.createElement(
              "div",
              {
                className: "p-trial_feature_tooltip",
              },
              t.createElement(
                "span",
                {
                  className: "p-trial_feature_tooltip__title",
                },
                p &&
                  t.createElement(i.Ay, {
                    badgeTheme: i.Vu.White,
                    className: "p-trial_feature_tooltip__pro_badge",
                  }),
                t.createElement(
                  "div",
                  {
                    className: "p-trial_feature_tooltip__title_text",
                  },
                  b
                )
              ),
              t.createElement(
                "div",
                {
                  className: "p-trial_feature_tooltip__body",
                },
                K
              )
            )
          );
          return t.createElement(
            o.Ay,
            u(
              {
                tipClassName: (0, n.A)("p-trial_feature_tooltip__container", O),
                tip: U,
                onClick: I,
                zIndex: D,
                position: P,
                "aria-label": E ? `${E}: ${B}` : `${B}`,
              },
              S
            ),
            g
          );
        }, "TrialFeatureTooltip");
        l.displayName = "TrialFeatureTooltip";
        const m = l;
      },
      4387298515: (W, A, e) => {
        "use strict";
        e.d(A, {
          $m: () => d,
          AH: () => I,
          Ac: () => a,
          D0: () => v,
          Mh: () => T,
          VR: () => l,
          th: () => c,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(6045824189);
        const i = (0, s.Nh)(["callsScreenshare", "createBorderWindow"]),
          d = (function () {
            var f = (0, t.coroutine)(function* (y, M) {
              i.isAvailable() && i(y, M);
            });
            return _(function (M, p) {
              return f.apply(this, arguments);
            }, "createBorderWindow");
          })(),
          o = (0, s.Nh)(["callsScreenshare", "showBorder"]),
          a = (function () {
            var f = (0, t.coroutine)(function* () {
              o.isAvailable() && o();
            });
            return _(function () {
              return f.apply(this, arguments);
            }, "showBorder");
          })(),
          r = (0, s.Nh)(["callsScreenshare", "hideBorder"]),
          c = (function () {
            var f = (0, t.coroutine)(function* () {
              r.isAvailable() && r();
            });
            return _(function () {
              return f.apply(this, arguments);
            }, "hideBorder");
          })(),
          u = (0, s.Nh)(["callsScreenshare", "setWindowOrScreenId"]),
          l = (function () {
            var f = (0, t.coroutine)(function* (y) {
              u.isAvailable() && u(y);
            });
            return _(function (M) {
              return f.apply(this, arguments);
            }, "setWindowOrScreenId");
          })(),
          m = (0, s.Nh)(["callsScreenshare", "setWindowBorderWidth"]),
          v = (function () {
            var f = (0, t.coroutine)(function* (y) {
              m.isAvailable() && m(y);
            });
            return _(function (M) {
              return f.apply(this, arguments);
            }, "setWindowBorderWidth");
          })(),
          E = (0, s.Nh)(["callsScreenshare", "setWindowBorderColor"]),
          T = (function () {
            var f = (0, t.coroutine)(function* (y, M, p, O) {
              E.isAvailable() && E(y, M, p, O);
            });
            return _(function (M, p, O, C) {
              return f.apply(this, arguments);
            }, "setWindowBorderColor");
          })(),
          g = (0, s.Nh)(["callsScreenshare", "getWindowPositionAndDimensions"]),
          I = (function () {
            var f = (0, t.coroutine)(function* () {
              if (g.isAvailable()) return g();
            });
            return _(function () {
              return f.apply(this, arguments);
            }, "getWindowPositionAndDimensions");
          })();
      },
      1583163054: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ce: () => l,
          Pe: () => c,
          fI: () => m,
          zS: () => d,
        });
        var t = e(3245843483),
          n = e(571104883),
          s = e(735940183);
        const i = new s.Ay("prefs"),
          d = (0, t.g9M)() && t.MD7.isAvailable() ? (0, t.MD7)() : "nightly",
          o = {
            PROD: "prod",
            BETA: "beta",
            DOGFOOD: d,
          },
          a = [o.PROD, o.BETA],
          r = [o.PROD, o.BETA, o.DOGFOOD];
        function c(v) {
          return (v ? r : a).map((T) => ({
            value: T,
            label: u(T),
          }));
        }
        _(c, "getReleaseChannelOptions");
        function u(v) {
          switch (v) {
            case o.PROD:
              return i.t("Production");
            case o.BETA:
              return i.t("Beta");
            case o.DOGFOOD:
              return i.t("Dogfood", {
                fallbackHash: "c9e429b1798d0142b8b31e82c1f9da5d8e0c9420",
              });
            default:
              return i.t("Unknown");
          }
        }
        _(u, "getReleaseChannelDisplayName");
        function l() {
          return (0, t.g9M)() && !(0, t.Z9F)() && !(0, n.j9)();
        }
        _(l, "canSeeReleaseChannel");
        function m() {
          return (
            l() &&
            ["MSI", "SlackSonic", "SlackPilot"].every(
              (v) => !navigator.userAgent.includes(v)
            )
          );
        }
        _(m, "canModifyReleaseChannel");
      },
      4923013394: (W, A, e) => {
        "use strict";
        e.d(A, {
          Jd: () => u,
          X6: () => l,
          bO: () => o,
          c6: () => r,
          fD: () => T,
          lJ: () => E,
          ve: () => a,
          zb: () => c,
        });
        var t = e(3398586081),
          n = e(571104883),
          s = e(3259512346),
          i = e(3245843483);
        const d = "sunroof_init",
          o = "fullscreen-ui",
          a = (0, t.A)(() => !1),
          r = (0, t.A)(() => (0, s.s)("25.1.1")),
          c = (0, t.A)(() => ((0, i.Z9F)() ? (0, n.dY)("38.0.0") : !0)),
          u = (0, t.A)(() => {
            if (!(0, n.y3)()) return !1;
            const { titleBarStyle: g } = (0, i.oQe)("environment") || {},
              { debugFeatures: I } = (0, i.oQe)("settings") || {};
            return (
              g === "custom-extension" ||
              (I == null ? void 0 : I.includes("window-chrome"))
            );
          }),
          l = (0, t.A)(() => (0, n.WB)() && (0, n.dY)("4.33.90")),
          m = _(() => {
            if (!l()) return !1;
            const { useHwAcceleration: g, windowVibrancy: I } =
              (0, i.oQe)("settings") || {};
            return g && I;
          }, "shouldEnableWindowSunroof"),
          v = (0, t.A)(() => !(0, n.dY)("4.35.97")),
          E = _(
            () =>
              m()
                ? (0, n.cX)()
                  ? {
                      transparent: v(),
                      vibrancy: o,
                      backgroundColor: null,
                    }
                  : {}
                : {},
            "maybeGetSunroofWindowOptions"
          );
        function T(g) {
          const { windowVibrancy: I } = (0, i.oQe)("settings") || {};
          if (typeof I > "u") return;
          if (I && (!g.experimentDesktopIa4SunroofEnabled || !m())) {
            (0, i.cGU)({
              name: "windowVibrancy",
              value: !1,
            });
            try {
              localStorage.removeItem(d);
            } catch {}
            return;
          }
          const f = !!localStorage.getItem(d);
          if (g.experimentDesktopIa4SunroofEnabled && !f && !I && l()) {
            (0, i.cGU)({
              name: "windowVibrancy",
              value: !0,
            });
            try {
              localStorage.setItem(d, "1");
            } catch {}
          }
        }
        _(T, "maybeToggleSunroof");
      },
      5531259478: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => O,
          k: () => I,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(1407713935),
          i = e(4559887502),
          d = e(6007206761),
          o = e(4771555369),
          a = e(4326715787),
          r = e(742959983),
          c = e(2671211451),
          u = e(3877384923),
          l = e(9285382326),
          m = e(796111729),
          v = e(4757466470),
          E = e(9391594207),
          T = e(9101533895);
        function g() {
          return (
            (g =
              Object.assign ||
              function (C) {
                for (var h = 1; h < arguments.length; h++) {
                  var D = arguments[h];
                  for (var P in D)
                    Object.prototype.hasOwnProperty.call(D, P) && (C[P] = D[P]);
                }
                return C;
              }),
            g.apply(this, arguments)
          );
        }
        _(g, "_extends");
        function I(C) {
          return !(0, s.LI)(C) && !(0, s.yz)(C);
        }
        _(I, "shouldUseInlineChannelEntity");
        const f = "INLINE-CHANNEL-ENTITY";
        function y(C) {
          let {
            className: h,
            channel: D,
            bestFormerName: P,
            displayFormerNames: S = u.P.false,
            logger: b,
            boldIcon: K = !1,
            showTeam: x = !0,
            truncate: B = !1,
            truncateWidth: U,
            overrideHiddenName: R,
            overrideHiddenIcon: G,
            withTruncationTooltip: H,
            channelNameClassName: F,
            omitNonExistentTooltip: V,
            channelHasNonUniqueName: X = !1,
            showDisambiguatingTeamName: q = !1,
          } = C;
          const oe = (0, s.t8)(D),
            z = (0, s.QR)(D || null),
            Ae = (0, t.useCallback)(
              (Ce) => {
                let { className: Z, ...$ } = Ce;
                return (
                  (!z || G) &&
                  t.createElement(
                    r.A,
                    g({}, $, {
                      bold: K,
                      className: Z,
                      channel: D,
                      overrideHiddenIcon: G,
                    })
                  )
                );
              },
              [D, K, z, G]
            );
          if (!I(D || null))
            return (
              b == null ||
                b.warn(
                  f,
                  "InlineChannelEntity should not display IMs or MPIMs"
                ),
              null
            );
          const ae = (0, n.A)(h, "c-inline_channel_entity"),
            de = (0, d.F)(D) ? u.pI.dim : void 0,
            ve =
              D && R
                ? {
                    ...D,
                    name: R,
                  }
                : D || void 0,
            Se = (0, n.A)(F, "c-inline_channel_entity__content"),
            Ee = X && q,
            be =
              (oe || z) && !R
                ? t.createElement(l.A, {
                    "data-qa": "inline_channel_entity__missing",
                    type: oe ? "unknown" : "non-existent",
                    size: "small",
                    width: U,
                    omitNonExistentTooltip: V,
                  })
                : t.createElement(
                    "span",
                    {
                      className: Se,
                    },
                    t.createElement(o.A, {
                      bold: K,
                      channel: ve,
                      bestFormerName: P,
                      displayFormerNames: S,
                      showTeam: x,
                      showTeamForLocalChannel: Ee,
                      width: U,
                      "data-qa": "inline_channel_entity__name",
                      overrideHiddenName: R,
                    })
                  );
          return t.createElement(c.A, {
            avatar: Ae,
            className: ae,
            "data-qa": "inline_channel_entity",
            "data-channel-id": D && D.id,
            style: de,
            truncate: B,
            truncateWidth: U,
            withTruncationTooltip: H,
            primaryContent: be,
            secondaryContent:
              U &&
              t.createElement(
                t.Fragment,
                null,
                x &&
                  t.createElement(a.A, {
                    className: "c-inline_channel_entity__team",
                    iconSize: 14,
                    channel: ve,
                    "data-qa": "inline_channel_entity__team",
                  })
              ),
          });
        }
        _(y, "InlineChannelEntity"), (y.displayName = "InlineChannelEntity");
        function M(C) {
          return Object.prototype.hasOwnProperty.call(C, "channel");
        }
        _(M, "propsContainsChannel");
        function p(C, h) {
          const D = M(h) ? h.channel : (0, T.OL)(C, h.channelId);
          let P;
          return (
            h.showDisambiguatingTeamName && (P = (0, i.i)((0, T.MS)(C), D)),
            {
              channel: D,
              channelHasNonUniqueName: P,
              logger: (0, m.Ay)({
                state: C,
              }),
            }
          );
        }
        _(p, "mapStateToProps");
        const O = (0, E.N)(p, null, null, {
          areStatePropsEqual: v.kt,
        })(y);
      },
      3631789182: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => h,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(6696292586),
          i = e(9884588328),
          d = e(1407713935),
          o = e(4559887502),
          a = e(6007206761),
          r = e(4530035759),
          c = e(4771555369),
          u = e(5273017660),
          l = e(3877384923),
          m = e(9285382326),
          v = e(796111729),
          E = e(735940183),
          T = e(9391594207),
          g = e(9101533895),
          I = e(8286248123);
        function f() {
          return (
            (f =
              Object.assign ||
              function (D) {
                for (var P = 1; P < arguments.length; P++) {
                  var S = arguments[P];
                  for (var b in S)
                    Object.prototype.hasOwnProperty.call(S, b) && (D[b] = S[b]);
                }
                return D;
              }),
            f.apply(this, arguments)
          );
        }
        _(f, "_extends");
        const y = new E.Ay("channel_entity"),
          M = "SMALL-CHANNEL-ENTITY";
        function p(D) {
          let {
            className: P,
            channel: S,
            bestFormerName: b,
            inlineNameSuffix: K,
            invert: x = !1,
            logger: B,
            displayFormerNames: U = l.P.false,
            showTeamForLocalChannel: R,
            showDraftIcon: G = !1,
            showFilledIcon: H = !1,
            showTeam: F,
            memberCount: V,
            onlyBoldIfUnread: X = !1,
            showTruncatedChannelNameTooltip: q = !1,
            "data-qa": oe = "small_channel_entity",
            channelHasNonUniqueName: z = !1,
            showDisambiguatingTeamName: Ae = !1,
          } = D;
          const ae = (0, t.useCallback)(
            (w) =>
              t.createElement(
                r.A,
                f({}, w, {
                  className: "c-small_channel_entity__icon",
                  channel: S,
                  size: l.RG.small,
                  showDraftIcon: G,
                  showFilledIcon: H,
                })
              ),
            [S, G, H]
          );
          if ((0, d.LI)(S) || (0, d.yz)(S))
            return (
              B == null ||
                B.warn(M, "SmallChannelEntity should not display IMs or MPIMs"),
              null
            );
          const de = (0, n.A)(P, "c-small_channel_entity"),
            ve = !X || (0, i.KJ)(S),
            Se = (0, d.t8)(S),
            Ee = (0, d.QR)(S);
          let be = (0, a.F)(S) ? l.pI.dim : void 0;
          x && (be = l.pI.highlightDark);
          let Ce = null;
          if ((0, s.A)(V)) {
            const w = y.t(
              "{userCount, plural, =1 {# member} other {# members}}",
              {
                userCount: V,
                fallbackHash: "c8e3bc8a761a13ce8f87cea7ebb3009bccee1a21",
                fallbackHashNs: "user_group_entity",
              }
            );
            Ce = t.createElement(
              "span",
              {
                className: "c-small_channel_entity__inline_name_suffix normal",
                "aria-label": w,
              },
              "(",
              V,
              ")"
            );
          }
          const Z = z && Ae,
            $ = t.createElement(c.A, {
              channel: S,
              bestFormerName: b,
              inlineNameSuffix: K,
              displayFormerNames: U,
              showTeamForLocalChannel: R || Z,
              showTeam: F,
              bold: !!ve,
            }),
            N = q
              ? t.createElement(
                  u.CG,
                  {
                    withTruncationTooltip: !0,
                  },
                  $
                )
              : $,
            L = (0, n.A)(
              "c-small_channel_entity__content",
              "c-small_channel_entity__content--xws",
              {
                "c-small_channel_entity__content--show-truncated-tooltip": q,
              }
            );
          return t.createElement(u.Ay, {
            avatar: ae,
            className: de,
            "data-qa": oe,
            size: "small",
            style: be,
            text: t.createElement(
              u.CG,
              null,
              Se || Ee
                ? t.createElement(m.A, {
                    type: Se ? "unknown" : "non-existent",
                    invert: x,
                    size: "small",
                  })
                : t.createElement(
                    "span",
                    {
                      className: L,
                    },
                    N,
                    K &&
                      t.createElement(
                        "span",
                        {
                          className:
                            "c-small_channel_entity__inline_name_suffix",
                        },
                        K
                      ),
                    Ce
                  )
            ),
          });
        }
        _(p, "SmallChannelEntity"), (p.displayName = "SmallChannelEntity");
        function O(D) {
          return Object.prototype.hasOwnProperty.call(D, "channel");
        }
        _(O, "propsContainsChannel");
        function C(D, P) {
          let S;
          if (P.showMemberCounts) {
            var b;
            const B = (0, I.q8)(D, O(P) ? (0, i.FB)(P.channel) : P.channelId);
            S = B
              ? B == null || (b = B.counts) === null || b === void 0
                ? void 0
                : b.member_count
              : null;
          }
          const K = O(P) ? P.channel : (0, g.OL)(D, P.channelId);
          let x;
          return (
            P.showDisambiguatingTeamName && (x = (0, o.i)((0, g.MS)(D), K)),
            {
              memberCount: S,
              channel: K,
              logger: (0, v.Ay)({
                state: D,
                label: M,
              }),
              channelHasNonUniqueName: x,
            }
          );
        }
        _(C, "mapStateToProps");
        const h = (0, T.N)(C)(p);
      },
      1628523077: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => v,
        });
        var t = e(5824283093),
          n = e(3631789182),
          s = e(2828836153),
          i = e(3877384923),
          d = e(9163962844),
          o = e(9391594207),
          a = e(9101533895);
        function r() {
          return (
            (r =
              Object.assign ||
              function (E) {
                for (var T = 1; T < arguments.length; T++) {
                  var g = arguments[T];
                  for (var I in g)
                    Object.prototype.hasOwnProperty.call(g, I) && (E[I] = g[I]);
                }
                return E;
              }),
            r.apply(this, arguments)
          );
        }
        _(r, "_extends");
        function c(E, T, g) {
          if (E) return T || g ? i.pI.highlightDim : i.pI.highlightDark;
          if (T || g) return i.pI.dim;
        }
        _(c, "getBaseStyle");
        function u(E) {
          let {
              className: T,
              secondaryContent: g,
              isActive: I = !1,
              isDeactivated: f = !1,
              isDisabled: y = !1,
              showUnreadBadge: M = !1,
              badgeCount: p = 0,
              onlyBoldIfUnread: O = !1,
              ...C
            } = E,
            h = g;
          M &&
            (h = t.createElement(
              "div",
              {
                className: "c-small_channel_entity__secondary-content-badge",
              },
              g,
              t.createElement(d.A, {
                count: p,
                className: "c-channel_entity__mentions",
                style: I ? "white" : "red",
              })
            ));
          const D = c(I, y, f);
          return t.createElement(s.A, {
            className: T,
            primaryContent: t.createElement(
              n.A,
              r(
                {
                  invert: D === i.pI.highlightDark,
                  onlyBoldIfUnread: O,
                },
                C
              )
            ),
            secondaryContent: h,
            size: "small",
            style: D,
          });
        }
        _(u, "SmallChannelListEntity"),
          (u.displayName = "SmallChannelListEntity");
        function l(E) {
          return Object.prototype.hasOwnProperty.call(E, "channel");
        }
        _(l, "propsContainsChannel");
        function m(E, T) {
          const g = l(T) ? T.channel : (0, a.OL)(E, T.channelId),
            I = T.showUnreadBadge ? T.badgeCount || (0, a.TJ)(E, g) : 0;
          return {
            channel: g,
            badgeCount: I,
          };
        }
        _(m, "mapStateToProps");
        const v = (0, o.N)(m)(u);
      },
      4530035759: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => u,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(1407713935),
          i = e(3501074245),
          d = e(3877384923),
          o = e(8683010724),
          a = e(2562405183);
        function r() {
          return (
            (r =
              Object.assign ||
              function (l) {
                for (var m = 1; m < arguments.length; m++) {
                  var v = arguments[m];
                  for (var E in v)
                    Object.prototype.hasOwnProperty.call(v, E) && (l[E] = v[E]);
                }
                return l;
              }),
            r.apply(this, arguments)
          );
        }
        _(r, "_extends");
        function c(l) {
          let {
            size: m = d.RG.medium,
            className: v,
            channel: E,
            showDraftIcon: T = !1,
            showFilledIcon: g = !1,
          } = l;
          const I = (0, s.t8)(E),
            f = (0, a.d4)((y) =>
              (0, i.Ay)(y, E, {
                filled: g,
                showDraftIcon: T,
              })
            );
          return (
            m !== d.RG.small && (f.inline = !0),
            t.createElement(
              "span",
              {
                className: (0, n.A)(
                  "c-channel_icon",
                  {
                    "c-channel_icon--unknown": I,
                    "c-channel_icon--with-background": m !== d.RG.small,
                  },
                  v
                ),
                "data-channel-type-icon":
                  (f == null ? void 0 : f.name) || "unknown",
              },
              !I &&
                t.createElement(
                  o.A,
                  r(
                    {},
                    m === d.RG.small
                      ? {
                          size: "18",
                        }
                      : {},
                    f
                  )
                )
            )
          );
        }
        _(c, "ChannelIcon"), (c.displayName = "ChannelIcon");
        const u = c;
      },
      4771555369: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => P,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(9113979368),
          i = e(6159136815),
          d = e(9884588328),
          o = e(6007206761),
          a = e(395285811),
          r = e(4630136761),
          c = e(8393662842),
          u = e(3634593162),
          l = e(6839188756),
          m = e(4326715787),
          v = e(742959983),
          E = e(3877384923),
          T = e(82287009),
          g = e(1596328926),
          I = e(735940183),
          f = e(9391594207),
          y = e(937317117),
          M = e(3677514771);
        function p() {
          return (
            (p =
              Object.assign ||
              function (S) {
                for (var b = 1; b < arguments.length; b++) {
                  var K = arguments[b];
                  for (var x in K)
                    Object.prototype.hasOwnProperty.call(K, x) && (S[x] = K[x]);
                }
                return S;
              }),
            p.apply(this, arguments)
          );
        }
        _(p, "_extends");
        const O = new I.Ay("search"),
          C = new I.Ay("inline_channel");
        function h(S) {
          const {
              bestFormerName: b,
              bold: K = !0,
              channel: x,
              channelName: B,
              overrideHiddenName: U,
              width: R,
              displayFormerNames: G = E.P.true,
              isChannelFrozenAndInGracePeriod: H,
              showTeam: F = !0,
              showTeamForLocalChannel: V = !1,
              showTeamName: X,
              titleBlocks: q,
            } = S,
            oe = (0, o.F)(x) && !H;
          let z = `${U ?? B}${oe ? ` ${O.t("(archived)")}` : ""}`,
            Ae;
          if (G)
            if (b) {
              const de = t.createElement(v.A, {
                  bold: K,
                  className: "c-channel_name__former_channel_icon",
                  channel: x,
                }),
                ve = t.createElement(
                  "span",
                  {
                    className: "c-channel_name__former_name_text",
                  },
                  t.createElement(i.A, {
                    text: b,
                    showTooltips: !1,
                  })
                );
              Ae =
                b &&
                t.createElement(
                  "span",
                  {
                    className: "c-channel_name__suffix",
                  },
                  C.rt(" (formerly {icon}{name})", {
                    icon: de,
                    name: ve,
                    note: 'Shown when a user is typing the old name of a channel, e.g. "#dogs (formerly #cats)" or "#dogs (archived) (formerly #cats)"',
                    fallbackHash: "b574996f0134b62e0fae6797e7d969b04de6b482",
                  })
                );
            } else {
              let de;
              const ve = (0, d.Hx)(x);
              if (ve && !(0, s.A)(ve)) {
                const Se = ve.map((be) => `#${be}`);
                de = (0, I.jd)(Se, {
                  noConj: !0,
                }).join("");
              }
              de &&
                (z += ` ${C.t("(formerly {names})", {
                  names: de,
                  note: 'Shown when a user is typing the old name of a channel, e.g. "#dogs (formerly #cats)" or "#dogs (archived) (formerly #cats)"',
                })}`);
            }
          const ae = (0, n.A)("c-channel_entity__name", {
            "c-channel_entity__name--bold": K,
          });
          return t.createElement(
            t.Fragment,
            null,
            t.createElement(
              "span",
              p(
                {
                  className: ae,
                },
                (0, g.A)(S)
              ),
              q ??
                t.createElement(
                  t.Fragment,
                  null,
                  t.createElement(i.A, {
                    text: z,
                    showTooltips: !1,
                  }),
                  G && Ae
                )
            ),
            !R &&
              t.createElement(
                t.Fragment,
                null,
                F &&
                  t.createElement(m.A, {
                    className: "c-channel_entity__team",
                    iconSize: E.RG.inline,
                    channel: x,
                    "data-qa": "channel_entity__team",
                    shouldRender: V,
                    showTeamName: X,
                  })
              )
          );
        }
        _(h, "ChannelName"), (h.displayName = "ChannelName");
        function D(S, b) {
          let { channel: K, includeChannelPrefix: x } = b;
          const B = (0, M.H7)(S) || (0, M.lp)(S),
            U = (0, l.ZT)(B),
            R = K && (0, a.jT)(K) && (0, u.l)(K.id),
            G = R ? (0, y.Lp)(S, R) : void 0,
            H =
              G && (0, c.U9)(G)
                ? (0, T.GU)({
                    id: R,
                    fileId: R,
                    size: "caption",
                    truncate: !1,
                  })
                : null;
          var F;
          return {
            channelName:
              (F = (0, d.SB)(S, K, {
                publicChannelIncludeHashSign: !!x,
                imIncludeAtSign: !1,
              })) !== null && F !== void 0
                ? F
                : void 0,
            titleBlocks: H,
            isChannelFrozenAndInGracePeriod: (0, r.sP)(U, K),
          };
        }
        _(D, "mapStateToProps");
        const P = (0, f.N)(D)(h);
      },
      4326715787: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => l,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(9884588328),
          i = e(5373179915),
          d = e(6839188756),
          o = e(9391594207),
          a = e(9101533895),
          r = e(3677514771);
        let c = _(
          class extends t.Component {
            render() {
              const { shouldRender: v, team: E, className: T } = this.props;
              return !v || !E
                ? null
                : t.createElement(
                    "div",
                    {
                      className: (0, n.A)(
                        "c-channel_team",
                        "c-channel_team--xws",
                        T
                      ),
                      "data-qa": "channel_team",
                    },
                    t.createElement(
                      "span",
                      {
                        className: "c-channel_team__name",
                      },
                      (0, d.F1)(E)
                    )
                  );
            }
          },
          "ChannelTeam"
        );
        c.displayName = "ChannelTeam";
        const u = _((m, v) => {
            let { channel: E, channelId: T, shouldRender: g } = v;
            const I = E || (0, a.OL)(m, T),
              f = (0, i.R)(m, I);
            let y;
            if ((0, s.lo)(I)) y = (0, r._J)(m, (0, s.bK)(m, I));
            else if (g || f) {
              const M = (0, s.ne)(m, I);
              y = (M ? (0, r._J)(m, M) : void 0) || (0, r.H7)(m);
            }
            return {
              shouldRender: g || f || !!(0, s.lo)(I),
              team: y ?? void 0,
            };
          }, "mapStateToProps"),
          l = (0, o.N)(u)(c);
      },
      742959983: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => c,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(1407713935),
          i = e(3501074245),
          d = e(8683010724),
          o = e(2562405183);
        function a() {
          return (
            (a =
              Object.assign ||
              function (u) {
                for (var l = 1; l < arguments.length; l++) {
                  var m = arguments[l];
                  for (var v in m)
                    Object.prototype.hasOwnProperty.call(m, v) && (u[v] = m[v]);
                }
                return u;
              }),
            a.apply(this, arguments)
          );
        }
        _(a, "_extends");
        const r = _((u) => {
          let {
            className: l,
            filled: m,
            bold: v,
            channel: E,
            disableArchived: T,
            overrideHiddenIcon: g,
          } = u;
          const I = (0, o.d4)(
              (y) =>
                g ||
                (0, i.Ay)(y, E, {
                  filled: m || (0, s.Zp)(E),
                  bold: v,
                  disableArchived: T,
                })
            ),
            f = (0, n.A)(l, {
              "c-inline_channel_icon c-inline_channel_icon--space": !0,
            });
          return t.createElement(
            "span",
            {
              className: f,
              "data-inline-channel-type-icon": I.name,
            },
            t.createElement(
              d.A,
              a(
                {
                  inline: !0,
                },
                I
              )
            )
          );
        }, "InlineChannelIcon");
        r.displayName = "InlineChannelIcon";
        const c = t.memo(r);
      },
      3501074245: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => h,
          PR: () => O,
          pH: () => M,
        });
        var t = e(5892132962),
          n = e(9884588328),
          s = e(1407713935),
          i = e(6007206761),
          d = e(395285811),
          o = e(4630136761),
          a = e(8393662842),
          r = e(3634593162),
          c = e(6839188756),
          u = e(9101533895),
          l = e(937317117),
          m = e(3677514771);
        const v = {
            name: "archive",
          },
          E = {
            name: "archive",
            variation: "filled",
          },
          T = {
            name: "edit",
          },
          g = {
            name: "edit",
            variation: "filled",
          },
          I = {
            name: "file",
          },
          f = {
            name: "lists",
          },
          y = {
            name: "lock",
          },
          M = {
            name: "lock",
            variation: "filled",
          },
          p = {
            name: "channel",
          },
          O = {
            name: "channel",
            variation: "filled",
          },
          C = {
            name: "canvas",
          };
        function h(D, P) {
          let {
            filled: S,
            bold: b,
            disableArchived: K,
            showDraftIcon: x,
          } = arguments.length > 2 && arguments[2] !== void 0
            ? arguments[2]
            : {
                filled: !1,
                bold: !1,
                disableArchived: !1,
                showDraftIcon: !1,
              };
          const B = (0, m.H7)(D) || (0, m.lp)(D),
            U = (0, c.ZT)(B);
          if (!(0, o.sP)(U, P) && (((0, i.F)(P) && !K) || (0, o.Zz)(P)))
            return S ? E : v;
          if (x && (0, n.yc)(D, P.id)) return S ? g : T;
          if ((0, d.jT)(P)) {
            const G = (0, l.Lp)(D, (0, r.l)(P.id));
            if ((0, a.wL)(G)) return C;
            if ((0, a.aD)(G)) {
              const H = (0, u.Pf)(D, G.id),
                F = (0, u.OL)(D, H);
              return (0, s.Zp)(F) || (0, s.JM)(F) ? (S ? M : y) : C;
            }
            return (0, a.l7)(G) ? f : I;
          }
          const R = (0, t.sc)(P);
          return R || ((0, s.Zp)(P) ? (S ? M : y) : b ? O : p);
        }
        _(h, "getChannelIconType");
      },
      178327686: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => I,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(3750057149),
          i = e(3037015781),
          d = e(8170643398),
          o = e(9262712126),
          a = e(4562579337),
          r = e(1130751645),
          c = e(2671211451),
          u = e(3877384923),
          l = e(9391594207),
          m = e(5761207079),
          v = e(8276911661),
          E = e(3146663623);
        function T(f) {
          const {
              className: y,
              forceRealName: M = !1,
              id: p,
              member: O,
              truncate: C = !1,
              truncateWidth: h,
              withTruncationTooltip: D = !1,
              "data-qa": P = "inline_member_entity",
              isBold: S = !0,
              showAppOrBotBadge: b,
              isUserHidden: K = !1,
            } = f,
            x = (0, n.A)(y, "c-inline_member_entity"),
            B = (0, a.A)(O),
            U = (0, d.v3)(O),
            R = (0, d.oy)(O),
            G = (0, i.lv)(O),
            H = (0, i.mX)(O),
            F = (0, o.wg)(O),
            V = (0, o.Fh)(O);
          let X;
          M || !V ? (X = F) : (X = V);
          const q = R ? u.pI.dim : void 0;
          return t.createElement(c.A, {
            className: x,
            "data-qa": P,
            "data-member-id": p || (O == null ? void 0 : O.id),
            style: q,
            truncate: C,
            truncateWidth: h,
            withTruncationTooltip: D,
            primaryContent: t.createElement(
              "span",
              {
                className: "c-inline_member_entity__content",
              },
              t.createElement(r.A, {
                isBold: S,
                name: X,
                inline: !0,
                "data-qa": "inline_member_entity__name",
                isAppOrBot: B,
                isWorkflowBot: U,
                isDeleted: R,
                isNonExistent: G,
                isUnknown: H,
                showAppOrBotBadge: b,
                isUserHidden: K,
              })
            ),
          });
        }
        _(T, "InlineMemberEntity"), (T.displayName = "InlineMemberEntity");
        function g(f, y) {
          let { forceRealName: M, member: p, id: O } = y;
          const C = p || (0, v.nv)(f, O);
          return {
            member: C ?? void 0,
            forceRealName: (0, s.A)(M) ? M : (0, E.E)(f),
            isUserHidden: C && (0, m.a)(f, C.id),
          };
        }
        _(g, "mapStateToProps");
        const I = (0, l.N)(g)(T);
      },
      1824673572: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => b,
          lP: () => D,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(2486585453),
          i = e(3037015781),
          d = e(9884588328),
          o = e(8170643398),
          a = e(9262712126),
          r = e(3534324375),
          c = e(4562579337),
          u = e(4775127335),
          l = e(1130751645),
          m = e(1464713483),
          v = e(51460783),
          E = e(161084047),
          T = e(3534100833),
          g = e(3877384923),
          I = e(9828955991),
          f = e(8683010724),
          y = e(82287009),
          M = e(9391594207),
          p = e(9101533895),
          O = e(5761207079),
          C = e(8276911661);
        function h() {
          return (
            (h =
              Object.assign ||
              function (K) {
                for (var x = 1; x < arguments.length; x++) {
                  var B = arguments[x];
                  for (var U in B)
                    Object.prototype.hasOwnProperty.call(B, U) && (K[U] = B[U]);
                }
                return K;
              }),
            h.apply(this, arguments)
          );
        }
        _(h, "_extends");
        const D = {
          right: "right",
          bottom: "bottom",
        };
        function P(K) {
          const {
              className: x,
              id: B,
              invert: U = !1,
              member: R,
              memberPrimaryName: G,
              memberSecondaryName: H,
              secondaryContent: F,
              secondaryContentPosition: V = D.bottom,
              subtext: X,
              showSubtext: q = !0,
              showAvatar: oe = !0,
              showDraftIcon: z = !1,
              showPresence: Ae = !0,
              showStatus: ae = !0,
              showTooltip: de = !0,
              showAppOrBotBadge: ve = !0,
              isDeactivated: Se = !1,
              useShortMode: Ee,
              showHoverCard: be = !1,
              forwardedRef: Ce,
              "data-sk": Z = "medium_member_entity",
              "data-qa": $ = "medium_member_entity",
              isUserHidden: N = !1,
              noStatusText: L = !1,
              showBadgeOnTextTruncation: w,
            } = K,
            k = (0, c.A)(R),
            J = (0, o.v3)(R),
            ee = (0, o.oy)(R),
            ne = (0, o.fy)(R),
            pe = (0, o.hh)(R),
            Me = (0, i.lv)(R),
            ke = (0, i.mX)(R),
            ge = t.createElement(l.A, {
              "data-qa": "member-entity__primary-name",
              name: G,
              invert: U && !Se,
              isAppOrBot: k,
              isWorkflowBot: J,
              showAppOrBotBadge: ve,
              isDeleted: ee,
              isSelf: ne,
              isNonExistent: Me,
              isUnknown: ke,
              isUserHidden: N,
              showBadgeOnTextTruncation: w,
            }),
            fe = (0, y.yN)({
              memberId: B,
              children: ge,
            }),
            re =
              !N &&
              t.createElement(
                T.A,
                {
                  className: "c-member__secondary-name",
                  "data-qa": "member-entity__secondary-name",
                },
                H
              ),
            le =
              R &&
              t.createElement(
                E.A,
                {
                  className: "c-member__title",
                  "data-qa": "member-entity__title",
                },
                (0, o.rN)(R)
              ),
            Re =
              !ee &&
              !pe &&
              t.createElement(I.Ay, {
                memberId: B,
                className: "c-member__presence",
                invert: U && !Se,
                "data-qa": "member-entity__presence",
                inline: !1,
              }),
            ye = t.createElement(s.A, {
              memberId: B,
              tooltip: de,
              animated: Ee,
              className:
                "c-member__current-status c-member__current-status--medium",
              "data-qa": "member-entity__status",
              noText: L,
            }),
            Te =
              V === D.bottom && F
                ? t.createElement(
                    v.A,
                    {
                      "data-qa": "member-entity__metadata",
                    },
                    F
                  )
                : null,
            De = t.createElement(
              "span",
              {
                className: "c-member__primary_content",
              },
              be ? fe : ge,
              Ae && Re,
              !Ee && re,
              ae && ye
            ),
            Ue = ee || Se ? g.pI.dim : void 0,
            Ke = (0, n.A)(x, "c-member", "c-member--medium", {
              "c-member--with-presence": Ae,
            }),
            Ze = (0, t.useCallback)(
              (Q) =>
                oe &&
                (z
                  ? t.createElement(
                      "span",
                      {
                        className: "c-member__draft_icon",
                      },
                      t.createElement(f.A, {
                        name: "edit",
                      })
                    )
                  : t.createElement(
                      u.Ay,
                      h({}, Q, {
                        size: g.RG.medium,
                        userId: B,
                        "data-qa": "member-entity__avatar",
                        isInteractive: !1,
                      })
                    )),
              [oe, z, B]
            );
          return t.createElement(m.A, {
            avatar: Ze,
            className: Ke,
            size: "medium",
            style: Ue,
            text: De,
            subtext: q && (X || le),
            metadata: !ee && Te,
            "data-qa": $,
            "data-sk": Z,
            forwardedRef: Ce,
          });
        }
        _(P, "MediumMemberEntity"), (P.displayName = "MediumMemberEntity");
        function S(K, x) {
          let { id: B, isDraftContext: U, member: R, showStatus: G } = x;
          const H = R || (0, C.nv)(K, B);
          let F = !1;
          if (U && B) {
            const X = (0, p.Pu)(K, B);
            F = !!(X && (0, d.yc)(K, X.id));
          }
          const V = B || (H == null ? void 0 : H.id);
          return {
            id: V,
            member: H ?? void 0,
            memberPrimaryName: (0, r.sE)(K, H, !1, !1),
            memberSecondaryName: (0, a.Mu)(K, H),
            showDraftIcon: F,
            showStatus: G && (0, o.aH)(H),
            isUserHidden: !!V && (0, O.a)(K, V),
          };
        }
        _(S, "mapStateToProps");
        const b = (0, M.N)(S)(P);
      },
      8061049427: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => v,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(9438480351),
          i = e(1824673572),
          d = e(2828836153),
          o = e(3877384923),
          a = e(2762351398),
          r = e(9391594207),
          c = e(8276911661);
        function u() {
          return (
            (u =
              Object.assign ||
              function (E) {
                for (var T = 1; T < arguments.length; T++) {
                  var g = arguments[T];
                  for (var I in g)
                    Object.prototype.hasOwnProperty.call(g, I) && (E[I] = g[I]);
                }
                return E;
              }),
            u.apply(this, arguments)
          );
        }
        _(u, "_extends");
        let l = _(
          class extends t.Component {
            render() {
              const {
                  className: T,
                  isActive: g = !1,
                  isDeactivated: I = !1,
                  isDisabled: f = !1,
                  secondaryContent: y,
                  secondaryContentPosition: M = i.lP.right,
                  showUnreadCount: p = !1,
                  showStatus: O,
                  showPresence: C,
                  useShortMode: h = !1,
                  showHoverCard: D,
                  forwardedRef: P,
                  unreadCount: S,
                  ariaLabel: b,
                } = this.props,
                K =
                  p &&
                  S &&
                  t.createElement(a.Ay, {
                    className: "c-member__unread_count",
                    count: S,
                    style: a.rY.red,
                  }),
                x =
                  y &&
                  t.createElement(
                    "span",
                    {
                      className: "c-member__details",
                      "data-qa": "member-entity__secondary-content",
                    },
                    y
                  ),
                B =
                  ((M === i.lP.right && x) || K) &&
                  t.createElement(
                    "span",
                    {
                      className: "c-member__secondary_content",
                    },
                    M === i.lP.right && x,
                    K
                  ),
                U = (0, n.A)(T, "c-medium_member_list_entity");
              let R;
              return (
                g
                  ? f || I
                    ? (R = o.pI.highlightDim)
                    : (R = o.pI.highlightLight)
                  : (f || I) && (R = o.pI.dim),
                t.createElement(d.A, {
                  "data-qa": "medium_member_list_entity",
                  className: U,
                  style: R,
                  primaryContent: t.createElement(
                    i.Ay,
                    u({}, this.props, {
                      secondaryContent: M === i.lP.right ? null : y,
                      showStatus: O,
                      showPresence: C,
                      showHoverCard: D,
                      useShortMode: h,
                      forwardedRef: P,
                    })
                  ),
                  secondaryContent: B,
                  size: "medium",
                  ariaLabel: b,
                })
              );
            }
          },
          "MediumMemberListEntity"
        );
        l.displayName = "MediumMemberListEntity";
        function m(E, T) {
          let { id: g } = T;
          const I = (0, c.nv)(E, g);
          return {
            member: I ?? void 0,
            unreadCount: (0, s.A)(E, I),
          };
        }
        _(m, "mapStateToProps");
        const v = (0, r.N)(m, null, null, {
          forwardRef: !0,
        })(l);
      },
      923114964: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => F,
          Cg: () => U,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(3750057149),
          i = e(7278430876),
          d = e(3037015781),
          o = e(9884588328),
          a = e(8170643398),
          r = e(9438480351),
          c = e(9262712126),
          u = e(4562579337),
          l = e(5096647761),
          m = e(6536982570),
          v = e(4775127335),
          E = e(1130751645),
          T = e(5273017660),
          g = e(3534100833),
          I = e(3877384923),
          f = e(2762351398),
          y = e(8028620372),
          M = e(9828955991),
          p = e(8683010724),
          O = e(5484624422),
          C = e(735940183),
          h = e(9391594207),
          D = e(9101533895),
          P = e(4761125736),
          S = e(5761207079),
          b = e(8276911661),
          K = e(3146663623);
        function x() {
          return (
            (x =
              Object.assign ||
              function (V) {
                for (var X = 1; X < arguments.length; X++) {
                  var q = arguments[X];
                  for (var oe in q)
                    Object.prototype.hasOwnProperty.call(q, oe) &&
                      (V[oe] = q[oe]);
                }
                return V;
              }),
            x.apply(this, arguments)
          );
        }
        _(x, "_extends");
        const B = 20,
          U = 16,
          R = new C.Ay("members");
        function G(V) {
          const {
              className: X,
              id: q,
              invert: oe = !1,
              member: z,
              teamId: Ae,
              showAvatar: ae = !0,
              showDraftIcon: de = !1,
              showPresence: ve = !0,
              showBadge: Se = !0,
              showStatus: Ee = !0,
              showTooltip: be = !0,
              showUnreadCount: Ce = !1,
              showDeactivated: Z = !0,
              showAppOrBotBadge: $ = !0,
              isDeactivated: N = !1,
              unreadCount: L,
              useShortMode: w = !1,
              forceRealName: k = !1,
              tokenSize: J,
              truncateStatus: ee = !1,
              withTruncationTooltip: ne,
              "data-sk": pe = "small_member_entity",
              "data-qa": Me = "small_member_entity",
              isBold: ke,
              experimentSidebarPrefsApplyToMenusGroupOn: ge = !1,
              isUserHidden: fe = !1,
              hasNoAccess: re = !1,
              forceAvatarPresenceIndicator: le = !1,
            } = V,
            Re = (0, u.A)(z),
            ye = (0, a.v3)(z),
            Te = (0, a.oy)(z),
            De = (0, l.g)(z),
            Ue = (0, a.fy)(z),
            Ke = (0, a.hh)(z),
            Ze = (0, d.lv)(z),
            Q = (0, d.mX)(z),
            ie = Ze || Q,
            Ve = oe && !N,
            xe = Z && Te,
            je = (0, c.wg)(z),
            Fe = (0, c.Fh)(z);
          let He, Oe;
          fe
            ? ((He = R.t("Name hidden")), (Oe = R.t("Name hidden")))
            : k || !Fe
            ? ((He = je), (Oe = Fe))
            : ((He = Fe), (Oe = je));
          const Ye = t.createElement(E.A, {
              "data-qa": "member-entity__primary-name",
              className: "c-member__member-name",
              name: He,
              invert: Ve,
              isAppOrBot: Re,
              isWorkflowBot: ye,
              isDeleted: xe,
              isSelf: Ue,
              isNonExistent: Ze,
              isUnknown: Q,
              withTruncationTooltip: ne,
              isBold: ke,
              showAppOrBotBadge: $,
            }),
            at =
              !fe &&
              !Ke &&
              t.createElement(
                g.A,
                {
                  className: "c-member__secondary-name",
                  "data-qa": "member-entity__secondary-name",
                },
                Oe
              ),
            _t = (0, t.useMemo)(
              () =>
                !fe &&
                !Te &&
                !Ke &&
                t.createElement(M.Ay, {
                  memberId: q || (z == null ? void 0 : z.id),
                  className: "c-member__presence",
                  invert: Ve,
                  inline: !1,
                }),
              [fe, Te, Ke, q, Ve, z]
            ),
            pt = (0, t.useCallback)(
              (Ht) =>
                ae
                  ? fe
                    ? t.createElement(
                        "span",
                        {
                          className:
                            "c-search_autocomplete__hidden_member_icon ",
                        },
                        t.createElement(p.A, {
                          size: "20",
                          name: "user-hide",
                        })
                      )
                    : ie
                    ? t.createElement(
                        y.A,
                        x({}, Ht, {
                          "data-qa": "member-entity__missing",
                          isNonExistent: Ze,
                          size: B,
                        })
                      )
                    : de
                    ? t.createElement(
                        "span",
                        {
                          className: "c-member__draft_icon",
                        },
                        t.createElement(p.A, {
                          name: "edit",
                        })
                      )
                    : t.createElement(
                        v.Ay,
                        x({}, Ht, {
                          "data-qa": "member-entity__avatar",
                          size: I.RG.small,
                          userId: q,
                          user: z,
                          showBadge: Se,
                          tabIndex: -1,
                          isInteractive: !1,
                          tokenSize: J,
                          hasNoAccess: re,
                          showPresence: le,
                        })
                      )
                  : ve && ge
                  ? _t
                  : null,
              [ae, q, Ze, ie, z, J, de, fe, _t, ve, Se, ge, re, le]
            ),
            Qe =
              De &&
              t.createElement(
                O.A,
                x({}, V, {
                  "data-qa": "member-entity__team-icon",
                  id: Ae,
                  size: U,
                  className: "c-member__team_icon",
                })
              ),
            ct = t.createElement(i.A, {
              memberId: q || "",
              tooltip: be,
              animated: w,
              className: (0, n.A)(
                "c-member__current-status",
                "c-member__current-status--small",
                {
                  overflow_ellipsis: ee,
                }
              ),
              "data-qa": "member-entity__status",
            }),
            Pt =
              Ce &&
              !!L &&
              t.createElement(f.Ay, {
                className: "c-member__unread_count",
                count: L,
                style: Ve ? "white" : "red",
                "data-qa": "member-entity__mention-badge",
              }),
            zt = t.createElement(
              "span",
              {
                className: "c-member__primary_content",
              },
              Ye,
              ve && !ie && ae && _t,
              !w && at,
              Ee && ct
            ),
            an =
              (Qe || Pt) &&
              t.createElement(
                "span",
                {
                  className: "c-member__secondary_content",
                },
                Qe,
                Pt
              ),
            Qt = Te && !oe ? I.pI.dim : void 0,
            tn = (0, n.A)(X, "c-member", "c-member--small", {
              "c-member--with-presence": ve,
              "c-member--deleted": Te,
              "c-base_entity--dim": fe,
            });
          return t.createElement(T.Ay, {
            avatar: pt,
            className: tn,
            text: zt,
            size: "small",
            style: Qt,
            subtext: an,
            "data-qa": Me,
            "data-sk": pe,
          });
        }
        _(G, "SmallMemberEntity"), (G.displayName = "SmallMemberEntity");
        function H(V, X) {
          let {
            forceRealName: q,
            member: oe,
            id: z,
            isDraftContext: Ae,
            showStatus: ae,
            onlyBoldIfUnread: de,
            useShortMode: ve,
            neverBold: Se,
          } = X;
          const Ee = oe || (0, b.nv)(V, z);
          let be;
          const Ce = z || (Ee == null ? void 0 : Ee.id);
          Ce && (Ae || de) && (be = (0, D.Pu)(V, Ce));
          const Z = (0, S.a)(V, Ce);
          let $ = !0;
          Z ? ($ = !!ve) : de ? ($ = !!(be && (0, o.KJ)(be))) : Se && ($ = !1);
          let N;
          return (
            Ae && (N = !!(be && (0, o.yc)(V, be.id))),
            {
              id: z || (Ee == null ? void 0 : Ee.id),
              member: Ee ?? void 0,
              teamId: (0, m.Ux)(V, Ee),
              forceRealName: (0, s.A)(q) ? q : (0, K.E)(V),
              unreadCount: (0, r.A)(V, Ee),
              showDraftIcon: N,
              showStatus: ae && (0, a.aH)(Ee),
              isBold: $,
              experimentSidebarPrefsApplyToMenusGroupOn:
                (0, P._Z)(V, "sidebar_prefs_apply_to_menus") === "on",
              isUserHidden: Z,
            }
          );
        }
        _(H, "mapStateToProps");
        const F = (0, h.N)(H)(G);
      },
      8975305315: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => r,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(923114964),
          i = e(2828836153),
          d = e(3877384923);
        function o() {
          return (
            (o =
              Object.assign ||
              function (c) {
                for (var u = 1; u < arguments.length; u++) {
                  var l = arguments[u];
                  for (var m in l)
                    Object.prototype.hasOwnProperty.call(l, m) && (c[m] = l[m]);
                }
                return c;
              }),
            o.apply(this, arguments)
          );
        }
        _(o, "_extends");
        let a = _(
          class extends t.Component {
            render() {
              const {
                className: u,
                id: l,
                isActive: m = !1,
                isDeactivated: v = !1,
                isDisabled: E = !1,
                isDraftContext: T,
                showAvatar: g,
                showBadge: I,
                showPresence: f,
                showAppOrBotBadge: y,
                showStatus: M,
                showTooltip: p,
                withTruncationTooltip: O,
                showUnreadCount: C,
                useShortMode: h,
                secondaryContent: D,
                onlyBoldIfUnread: P = !1,
                forceRealName: S,
                hasNoAccess: b,
                forceAvatarPresenceIndicator: K,
                removePadding: x,
              } = this.props;
              let B;
              return (
                m
                  ? E || v
                    ? (B = d.pI.highlightDim)
                    : (B = d.pI.highlightDark)
                  : (E || v) && (B = d.pI.dim),
                t.createElement(i.A, {
                  className: (0, n.A)(u, "c-small_member_list_entity"),
                  primaryContent: t.createElement(
                    s.Ay,
                    o(
                      {
                        id: l,
                        invert: B === d.pI.highlightDark,
                        isDeactivated: v,
                        truncateStatus: !!D,
                        showAvatar: g,
                        showPresence: f,
                        showBadge: I,
                        showAppOrBotBadge: y,
                        useShortMode: h,
                        showStatus: M,
                        showTooltip: p,
                        withTruncationTooltip: O,
                        showUnreadCount: C,
                        isDraftContext: T,
                        onlyBoldIfUnread: P,
                        forceRealName: S,
                        hasNoAccess: b,
                        forceAvatarPresenceIndicator: K,
                      },
                      this.props
                    )
                  ),
                  secondaryContent: D,
                  size: "small",
                  style: B,
                  padding: x ? d.FK.none : d.FK.normal,
                })
              );
            }
          },
          "SmallMemberListEntity"
        );
        a.displayName = "SmallMemberListEntity";
        const r = a;
      },
      1130751645: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => v,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(9509635375),
          i = e(5273017660),
          d = e(3229001818),
          o = e(1596328926),
          a = e(5734745215),
          r = e(2562405183),
          c = e(4761125736);
        function u() {
          return (
            (u =
              Object.assign ||
              function (E) {
                for (var T = 1; T < arguments.length; T++) {
                  var g = arguments[T];
                  for (var I in g)
                    Object.prototype.hasOwnProperty.call(g, I) && (E[I] = g[I]);
                }
                return E;
              }),
            u.apply(this, arguments)
          );
        }
        _(u, "_extends");
        const l = new a.Ay("inline_member");
        function m(E) {
          const {
              className: T,
              multiline: g = !1,
              inline: I = !1,
              invert: f = !1,
              name: y,
              isSelf: M = !1,
              isAppOrBot: p = !1,
              isWorkflowBot: O = !1,
              showAppOrBotBadge: C = !0,
              isDeleted: h = !1,
              isUnknown: D = !1,
              isNonExistent: P = !1,
              withTruncationTooltip: S = !1,
              isBold: b = !0,
              isUserHidden: K = !1,
              isChannelFiles: x = !1,
              isCreator: B = !1,
              showMemberNameIfHidden: U = !1,
              showBadgeOnTextTruncation: R,
            } = E,
            G = (0, r.d4)(
              (q) => (0, c._Z)(q, "member_name_channel_files_view_two") === "on"
            );
          let H;
          if (D || P)
            H = t.createElement(d.A, {
              type: P ? "non-existent" : "unknown",
              "data-qa": "member_name__missing",
            });
          else if (K && !U) H = l.t("Name hidden");
          else if (x) {
            const q = G
              ? l.rt("Created by {name}", {
                  name: y,
                })
              : `Created by ${y}`;
            H = B
              ? q
              : l.rt("Shared by {name}", {
                  name: y,
                });
          } else H = y;
          const F = (0, n.A)(T, "c-member_name", {
              "c-member_name--deactivated": h,
              "c-member_name--inverted": f,
            }),
            V = b ? "strong" : "span",
            X = (p || O) && C;
          return t.createElement(
            i.CG,
            u(
              {
                className: F,
                multiline: g,
                inline: I,
                withTruncationTooltip: S,
              },
              (0, o.A)(E)
            ),
            t.createElement(
              V,
              {
                className: (0, n.A)({
                  "c-member_name__container": X && R,
                }),
                "data-qa": "member_name",
              },
              X && R
                ? t.createElement(
                    "span",
                    {
                      className: "c-member_name__text",
                    },
                    H
                  )
                : H,
              M &&
                t.createElement(
                  "span",
                  {
                    className: "c-member_name__indicator",
                    "data-qa": "member_name__you",
                  },
                  l.t("(you)")
                ),
              h &&
                t.createElement(
                  "span",
                  {
                    className: "c-member_name__indicator",
                    "data-qa": "member_name__deactivated",
                  },
                  l.t("(deactivated)")
                ),
              X &&
                t.createElement(s.A, {
                  className: "c-member_name__indicator",
                  "data-qa": "member_name__app",
                  inverse: f,
                  isWorkflow: O,
                })
            )
          );
        }
        _(m, "MemberName"), (m.displayName = "MemberName");
        const v = m;
      },
      4236440541: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => ve,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(3297051565),
          i = e.n(s),
          d = e(2562405183),
          o = e(5795074931),
          a = e(6989432693),
          r = e(735940183);
        const c = new r.Ay("channel_token"),
          u = 10,
          l = _((Se) => {
            let { memberIds: Ee } = Se;
            var be;
            const Ce =
              (be = (0, d.d4)(o.WR)) !== null && be !== void 0 ? be : void 0;
            let Z = Ee.map(($, N) =>
              t.createElement(a.A, {
                key: $,
                userId: $,
                isFirst: N === 0,
                isSelf: Ce === $,
              })
            );
            return (
              Ee.length > u + 1 &&
                (Z = Z.slice(0, u).concat(
                  c.rt("{count} others", {
                    count: Ee.length - u,
                  })
                )),
              t.createElement(t.Fragment, null, (0, r.jd)(Z))
            );
          }, "TooltipMemberNames");
        l.displayName = "TooltipMemberNames";
        const m = l;
        var v = e(3037015781),
          E = e(9884588328),
          T = e(4775127335),
          g = e(4729110965),
          I = e(8170643398),
          f = e(3534324375),
          y = e(4562579337),
          M = e(1130751645),
          p = e(3877384923),
          O = e(8028620372),
          C = e(9391594207),
          h = e(8276911661);
        const D = 20,
          P = {
            id: i().string.isRequired,
            invert: i().bool,
            isDeactivated: i().bool,
            isHidden: i().bool,
            member: i().object,
            memberPrimaryName: i().string,
          },
          S = {
            member: void 0,
            memberPrimaryName: void 0,
            invert: !1,
            isDeactivated: !1,
            isHidden: !1,
          },
          b = t.forwardRef((Se, Ee) => {
            const {
                id: be,
                invert: Ce,
                member: Z,
                memberPrimaryName: $,
                isDeactivated: N,
                isHidden: L,
              } = Se,
              w = (0, y.A)(Z),
              k = (0, I.v3)(Z),
              J = (0, I.oy)(Z),
              ee = (0, v.lv)(Z),
              ne = (0, v.mX)(Z),
              pe = ee || ne,
              Me = Ce && !N,
              ke = t.createElement(M.A, {
                "data-qa": "mpim-entity__name",
                name: $,
                invert: Me,
                isAppOrBot: w,
                isWorkflowBot: k,
                isDeleted: J,
                isNonExistent: ee,
                isUnknown: ne,
              });
            let ge;
            pe
              ? (ge = t.createElement(O.A, {
                  isNonExistent: ee,
                  size: D,
                }))
              : (ge = t.createElement(T.Ay, {
                  className: "c-small_mpim_entity__member_avatar",
                  "data-qa": "mpim-entity__avatar",
                  size: p.RG.small,
                  userId: be,
                  tabIndex: -1,
                  isInteractive: !1,
                }));
            const fe = (0, n.A)("c-small_mpim_entity__member", {
              "c-small_mpim_entity__member--deleted": J,
              "c-small_mpim_entity__member--hidden": L,
            });
            return t.createElement(
              "div",
              {
                className: fe,
                "data-id": be,
                ref: Ee,
              },
              ge,
              ke
            );
          });
        (b.propTypes = P), (b.defaultProps = S);
        function K(Se, Ee) {
          let { id: be } = Ee;
          const Ce = (0, h.nv)(Se, be);
          return {
            member: Ce,
            memberPrimaryName: (0, f.sE)(Se, Ce, !1, !1),
          };
        }
        _(K, "mapStateToProps");
        const x = (0, C.N)(K, null, null, {
          forwardRef: !0,
        })(b);
        var B = e(5273017660),
          U = e(2762351398),
          R = e(2312625946),
          G = e(8170659516),
          H = e(3852424459),
          F = e(9101533895),
          V = e(3328068409),
          X = e(4761125736);
        function q() {
          return (
            (q =
              Object.assign ||
              function (Se) {
                for (var Ee = 1; Ee < arguments.length; Ee++) {
                  var be = arguments[Ee];
                  for (var Ce in be)
                    Object.prototype.hasOwnProperty.call(be, Ce) &&
                      (Se[Ce] = be[Ce]);
                }
                return Se;
              }),
            q.apply(this, arguments)
          );
        }
        _(q, "_extends");
        const oe = p.RG.small,
          z = {
            className: i().string,
            "data-qa": i().string,
            "data-sk": i().string,
            mpim: i().object,
            id: i().string,
            invert: i().bool,
            isDeactivated: i().bool,
            memberIds: i().array,
            isActive: i().bool,
            clientTheme: i().oneOf(["light", "dark"]),
            matchData: i().array,
            onlyBoldIfUnread: i().bool,
            showUnreadBadge: i().bool,
            unreadCount: i().number,
            shortenTooltipContents: i().bool,
            showAvatar: i().bool,
            experimentSidebarPrefsApplyToMenusGroupOn: i().bool,
          },
          Ae = {
            className: void 0,
            "data-qa": void 0,
            "data-sk": "small_mpim_entity",
            mpim: void 0,
            id: void 0,
            invert: !1,
            isDeactivated: !1,
            memberIds: [],
            isActive: !1,
            clientTheme: "light",
            matchData: [],
            onlyBoldIfUnread: !1,
            showUnreadBadge: !1,
            unreadCount: 0,
            shortenTooltipContents: !1,
            showAvatar: !0,
            experimentSidebarPrefsApplyToMenusGroupOn: !1,
          };
        function ae(Se) {
          let {
            className: Ee,
            "data-qa": be,
            "data-sk": Ce,
            id: Z,
            invert: $,
            isDeactivated: N,
            mpim: L,
            memberIds: w,
            isActive: k,
            clientTheme: J,
            matchData: ee,
            onlyBoldIfUnread: ne,
            showUnreadBadge: pe,
            unreadCount: Me,
            shortenTooltipContents: ke,
            showAvatar: ge,
            experimentSidebarPrefsApplyToMenusGroupOn: fe,
          } = Se;
          const re = (0, v.lv)(L),
            le = (0, v.mX)(L),
            Re = (0, E.N4)(L),
            ye = Z || (L == null ? void 0 : L.id),
            Te = $ && !N,
            De =
              pe &&
              !!Me &&
              t.createElement(U.Ay, {
                className: "c-member__unread_count",
                count: Me,
                style: Te ? "white" : "red",
                "data-qa": "member-entity__mention-badge",
              }),
            Ue =
              De &&
              t.createElement(
                "span",
                {
                  className: "c-member__secondary_content",
                },
                De
              ),
            Ke = (0, t.useCallback)(
              (Ve) => {
                if (re || le)
                  return t.createElement(
                    O.A,
                    q({}, Ve, {
                      isNonExistent: re,
                      size: oe,
                      invert: Te,
                    })
                  );
                const xe = w == null ? void 0 : w[0];
                return t.createElement(
                  "span",
                  {
                    className: (0, n.A)(
                      "c-small_mpim_entity__mpim_avatars",
                      "c-small_mpim_entity__count",
                      Ee,
                      {
                        "c-small_mpim_entity__mpim_avatars--inverted": Te,
                        [`c-small_mpim_entity__mpim_avatars--${J}`]:
                          J !== "light",
                      }
                    ),
                  },
                  ge &&
                    t.createElement(T.Ay, {
                      userId: xe,
                      className: "c-small_mpim_entity__mpim_avatars_mpim1",
                      size: 14,
                      isInteractive: !1,
                      "data-qa": "small-mpim-entity-mpim-avatar",
                    }),
                  t.createElement(
                    "div",
                    {
                      className: (0, n.A)("c-small_mpim_entity__mpim_counter", {
                        "c-small_mpim_entity__mpim_counter--count-only":
                          !ge && fe,
                      }),
                      "data-qa": "small-mpim-entity-mpim-counter",
                    },
                    t.createElement(
                      "div",
                      {
                        "aria-hidden": !0,
                        className: "c-small_mpim_entity__mpim_counter_inner",
                      },
                      Re
                    )
                  )
                );
              },
              [Ee, J, re, le, Re, Te, w, ge, fe]
            ),
            Ze = (0, t.useCallback)(() => {
              let Ve;
              return (
                ke
                  ? (Ve = t.createElement(m, {
                      memberIds: w,
                    }))
                  : (Ve = w.map((xe) =>
                      t.createElement(x, {
                        id: xe,
                        key: xe,
                      })
                    )),
                t.createElement(t.Fragment, null, Ve)
              );
            }, [w, ke]);
          let Q = N ? p.pI.dim : null;
          Te && (Q = p.pI.highlightDark);
          const ie = t.createElement(B.Ay, {
            "data-id": ye,
            "data-qa": be,
            "data-sk": Ce,
            avatar: Ke,
            className: Ee,
            size: "small",
            style: Q,
            subtext: Ue,
            text: t.createElement(g.A, {
              "data-qa": "name",
              id: ye,
              mpim: L,
              invert: Te,
              matchData: ee,
              onlyBoldIfUnread: ne,
            }),
          });
          return t.createElement(
            R.Ay,
            {
              tip: Ze(),
              tipClassName: ke ? "" : "c-small_mpim_entity__tooltip",
              position: "top-right",
              shouldForceVisible: k,
              shouldOnlyShowWhenTruncated: k,
              zIndex: "above_fs",
            },
            t.createElement("div", null, ie)
          );
        }
        _(ae, "SmallMpimEntity"),
          (ae.displayName = "SmallMpimEntity"),
          (ae.propTypes = z),
          (ae.defaultProps = Ae);
        function de(Se, Ee) {
          let { id: be, mpim: Ce, matchData: Z } = Ee;
          const $ = Ce || (0, F.OL)(Se, be),
            N = (0, H.B)(Se, be),
            L = (0, X._Z)(Se, "sidebar_prefs_apply_to_menus") === "on",
            w = (0, G.A)({
              state: Se,
              mpim: $,
              matchData: Z,
            }),
            k = (0, V.to)(Se),
            J = (0, E.kR)($, N);
          return {
            mpim: $,
            experimentSidebarPrefsApplyToMenusGroupOn: L,
            memberIds: w,
            clientTheme: k,
            unreadCount: J,
          };
        }
        _(de, "small_mpim_entity_mapStateToProps");
        const ve = (0, C.N)(de)(ae);
      },
      4729110965: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => y,
        });
        var t = e(5824283093),
          n = e(9867500491),
          s = e(1703559452),
          i = e(3297051565),
          d = e.n(i),
          o = e(3037015781),
          a = e(9884588328),
          r = e(5273017660),
          c = e(7026348746),
          u = e(8170659516),
          l = e(9391594207),
          m = e(9101533895),
          v = e(8276911661);
        const E = 4,
          T = {
            className: d().string,
            mpim: d().object,
            multiline: d().bool,
            name: d().string,
            isAnyMemberUnknown: d().bool,
            invert: d().bool,
            inline: d().bool,
            onlyBoldIfUnread: d().bool,
          },
          g = {
            className: void 0,
            mpim: void 0,
            multiline: !1,
            name: void 0,
            isAnyMemberUnknown: !1,
            invert: !1,
            inline: void 0,
            onlyBoldIfUnread: !1,
          };
        function I(M) {
          let {
            className: p,
            mpim: O,
            multiline: C,
            name: h,
            invert: D,
            isAnyMemberUnknown: P,
            inline: S,
            onlyBoldIfUnread: b,
          } = M;
          const K = (0, o.lv)(O),
            x = (0, o.mX)(O),
            B = (0, a.N4)(O),
            U = !b || (0, a.KJ)(O);
          let R;
          return (
            x || K || P
              ? (R = (0, n.A)(B || E).map((G) =>
                  t.createElement(c.A, {
                    key: G,
                    className: "c-mpim_entity__missing_text",
                    isNonExistent: K,
                    size: "random",
                    invert: D,
                  })
                ))
              : (R = U
                  ? t.createElement(
                      "strong",
                      {
                        "data-qa": "mpim_name",
                      },
                      h
                    )
                  : t.createElement(
                      "span",
                      {
                        "data-qa": "mpim_name",
                      },
                      h
                    )),
            t.createElement(
              r.CG,
              {
                className: p,
                multiline: C,
                breakWords: !1,
                inline: S,
              },
              R
            )
          );
        }
        _(I, "MpimName"),
          (I.displayName = "MpimName"),
          (I.propTypes = T),
          (I.defaultProps = g);
        const f = _((M, p) => {
            let { id: O, mpim: C, matchData: h } = p;
            const D = C || (0, m.OL)(M, O),
              P = (0, u.A)({
                state: M,
                mpim: D,
                matchData: h,
              }),
              S = P && P.map((x) => (0, v.nv)(M, x)),
              b = (0, s.A)(S, o.GU),
              K = (0, a.Xx)(M, D, P);
            return {
              mpim: D,
              name: K,
              isAnyMemberUnknown: b,
            };
          }, "mapStateToProps"),
          y = (0, l.N)(f)(I);
      },
      2907956722: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => f,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(6839188756),
          i = e(2023092677),
          d = e(5273017660),
          o = e(3877384923),
          a = e(4816967449),
          r = e(8683010724),
          c = e(735940183),
          u = e(9391594207),
          l = e(8847766420),
          m = e(3677514771),
          v = e(1835177371);
        function E() {
          return (
            (E =
              Object.assign ||
              function (y) {
                for (var M = 1; M < arguments.length; M++) {
                  var p = arguments[M];
                  for (var O in p)
                    Object.prototype.hasOwnProperty.call(p, O) && (y[O] = p[O]);
                }
                return y;
              }),
            E.apply(this, arguments)
          );
        }
        _(E, "_extends");
        const T = new c.Ay("user_group_entity");
        function g(y) {
          let {
            className: M,
            invert: p,
            showDescription: O = !0,
            userGroup: C,
            userGroupTeamName: h,
            isDeactivated: D,
          } = y;
          const P = D || !(0, i.V1)(C),
            S = (0, t.useCallback)(
              (G) =>
                t.createElement(
                  "span",
                  {
                    className: "margin_right_50",
                  },
                  t.createElement(
                    r.A,
                    E({}, G, {
                      name: "user-groups",
                      size: "18",
                    })
                  )
                ),
              []
            );
          if ((0, i.t8)(C) || (0, i.QR)(C)) {
            const G = (0, n.A)("c-small_user_group__missing_icon", {
              "c-small_user_group__missing_icon--inverted": p,
            });
            return t.createElement(
              "div",
              {
                className: "c-small_user_group__missing",
              },
              t.createElement(
                "div",
                {
                  className: G,
                },
                t.createElement(r.A, {
                  name: "user-groups",
                  size: "18",
                })
              ),
              t.createElement(a.A, {
                type: (0, i.t8)(C) ? "unknown" : "non-existent",
                invert: p,
              })
            );
          }
          const b = (0, i.ue)(C),
            K = t.createElement(
              "span",
              {
                className: "c-user_group__name c-small_user_group__name",
              },
              b
            ),
            x = (0, i.Br)(C),
            B =
              h &&
              t.createElement(
                t.Fragment,
                null,
                "\xA0\xA0",
                t.createElement(
                  "span",
                  {
                    className: "c-small_user_group__team",
                  },
                  h
                )
              ),
            U = t.createElement(
              t.Fragment,
              null,
              t.createElement(
                "span",
                {
                  className: "c-small_user_group__count",
                },
                "(",
                T.t("{userCount, plural, =1 {# member} other {# members}}", {
                  userCount: x,
                }),
                ")"
              ),
              B
            );
          let R;
          return (
            P ? (R = o.pI.dim) : p && (R = o.pI.highlightDark),
            t.createElement(d.Ay, {
              avatar: S,
              className: M,
              size: "small",
              style: R,
              text: t.createElement(d.CG, null, K, O && U),
              "data-usergroup-id": C.id,
            })
          );
        }
        _(g, "SmallUserGroupEntity"), (g.displayName = "SmallUserGroupEntity");
        const I = _((y, M) => {
            let { id: p, userGroup: O } = M;
            const C = O || (0, v.lJ)(y, p),
              h = (0, l.ZT)(y),
              D = (0, i.$Q)(C),
              P = D !== h && (0, s.F1)((0, m._J)(y, D));
            return {
              userGroup: C,
              userGroupTeamName: P,
            };
          }, "mapStateToProps"),
          f = (0, u.N)(I)(g);
      },
      4979734995: (W, A, e) => {
        "use strict";
        e.d(A, {
          d: () => o,
          j: () => d,
        });
        var t = e(6422693406),
          n = e(4724591729),
          s = e(796111729),
          i = e(4096483543);
        function d(a, r, c) {
          const u = "noversion",
            l = Date.now() / 1e3,
            m = `/api/${a}?_x_id=${u}-${l}`,
            v = new XMLHttpRequest();
          v.onreadystatechange = () => {
            if (v.readyState === 4) {
              v.onreadystatechange = null;
              let I;
              if (v.status === 200 || v.status === 429)
                try {
                  I = JSON.parse(v.responseText);
                } catch {
                  (0, s.Wo)().warn(
                    "API",
                    "Unable to do anything with api response"
                  );
                }
              (I = I || {
                ok: !1,
              }),
                c
                  ? c(I.ok, I, r)
                  : (0, n.Cu)() &&
                    ((0, s.Wo)().warn(
                      "API",
                      "No callback provided. Printing response"
                    ),
                    (0, s.Wo)().warn("API", I.ok, I, r));
            }
          };
          const E = !0;
          v.open("POST", m, E);
          const T = new FormData();
          let g = !1;
          r
            ? Object.keys(r).forEach((I) => {
                I[0] !== "_" && (T.append(I, r[I]), (g = !0));
              })
            : (0, n.Cu)() &&
              (0, s.Wo)().warn("API", "No args provided. Bold, very bold."),
            g ? v.send(T) : v.send();
        }
        _(d, "callSlackApiUnauthed");
        const o = _(
          (a, r) =>
            new t.S((c) => {
              d(a, r, (u, l) => {
                c(l);
              });
            }),
          "callSlackApiUnauthedAsync"
        );
        (0, i.A)() ||
          (window.callSlackAPIUnauthed = (a, r, c) => {
            (0, s.Wo)().warn(
              "API",
              "Don't use me directly! Please import callSlackApiUnauthed from api-unauthed.ts"
            ),
              d(a, r, c);
          });
      },
      4540171876: (W, A, e) => {
        "use strict";
        e.d(A, {
          Db: () => c,
          O3: () => u,
          OB: () => l,
          TE: () => v,
          xB: () => m,
        });
        var t = e(2101927269),
          n = e(4525554634),
          s = e(2384831516),
          i = e(1269227002),
          d = e(6422693406),
          o = e(796111729),
          a = e(462591818),
          r = e(8935621861);
        const c = (0, s.C6)("Get call info from callId", (E, T, g) => {
          let { callIds: I, reason: f } = g;
          const y = (0, o.Ay)({
            getState: T,
          });
          return (
            I.length > 3 &&
              y.warn(
                `fetchCallByIds being called for unexpectedly many calls at once: ${I.length}`
              ),
            d.S.map(I, (M) =>
              E(
                (0, i.apiCall)({
                  method: "screenhero.rooms.info",
                  args: {
                    room: M,
                  },
                  reason: f || "huddles-call-info",
                })
              )
                .then((p) => {
                  let { room: O } = p;
                  return (0, n.Q)(O);
                })
                .catch(
                  (p) => (y.error(p, `Error while fetching call: ${M}`), null)
                )
            ).then(t.A)
          );
        });
        c.meta = {
          name: "createFetcher",
          key: "createFetcherfetchCallsByIds",
          description: "Get call info from callId",
        };
        const u = (0, s.C6)("Join a calls / huddle room", (E, T, g) => {
          let {
            channelId: I,
            roomId: f,
            threadTs: y,
            shouldFetchRegion: M,
            teamId: p,
            traceId: O,
            parentSpanId: C,
            reason: h,
            isMultiDevice: D = !1,
          } = g;
          return (
            M
              ? r.A.getInstance().getNearestChimeMediaRegion(p)
              : d.S.resolve("")
          ).then((P) =>
            E(
              (0, i.apiCall)({
                method: "rooms.join",
                args: {
                  ...(f && {
                    id: f,
                  }),
                  ...(I && {
                    channel_id: I,
                  }),
                  ...(y && {
                    thread_ts: y,
                  }),
                  regions: P,
                  multidevice: D,
                },
                traceId: O,
                parentSpanId: C,
                reason: h || "calls-api/joinRoom",
              })
            ).then((S) => {
              var b;
              return {
                server: (0, a.YY)(S.call),
                roomId: S.call.call_id,
                regions: "",
                inviteResponses: void 0,
                virtualRoomId: f,
                channelId:
                  (b = S.huddle) === null || b === void 0
                    ? void 0
                    : b.channels[0],
                ...(S.canvas &&
                  S.canvas.root_thread_ts && {
                    rootThreadTs: S.canvas.root_thread_ts,
                  }),
                ...(S.canvas &&
                  S.canvas.canvas_file_id && {
                    canvasFileId: S.canvas.canvas_file_id,
                  }),
              };
            })
          );
        });
        u.meta = {
          name: "createFetcher",
          key: "createFetcherjoinRoom",
          description: "Join a calls / huddle room",
        };
        const l = (0, s.C6)("Notify member to join huddle", (E, T, g) => {
          let { reason: I, channelId: f, userId: y } = g;
          return E(
            (0, i.apiCall)({
              method: "rooms.notifyMember",
              args: {
                channel_id: f,
                user_id: y,
              },
              reason: I,
            })
          );
        });
        l.meta = {
          name: "createFetcher",
          key: "createFetchernotifyMember",
          description: "Notify member to join huddle",
        };
        const m = (0, s.C6)(
          "Set a huddle topic / rename the call",
          (E, T, g) => {
            let { roomId: I, name: f } = g;
            return E(
              (0, i.apiCall)({
                method: "screenhero.rooms.rename",
                reason: "huddles-topic",
                args: {
                  room: I,
                  room_name: f,
                },
              })
            );
          }
        );
        m.meta = {
          name: "createFetcher",
          key: "createFetcherrenameCall",
          description: "Set a huddle topic / rename the call",
        };
        const v = (0, s.C6)("Get a link to a huddle", (E, T, g) => {
          let { reason: I, channelId: f } = g;
          return E(
            (0, i.apiCall)({
              method: "rooms.getLink",
              reason: I,
              args: {
                channel_id: f,
              },
            })
          );
        });
        v.meta = {
          name: "createFetcher",
          key: "createFetchergetLink",
          description: "Get a link to a huddle",
        };
      },
      6580433553: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => l,
        });
        var t = e(3297051565),
          n = e.n(t),
          s = e(5257368278),
          i = e(1269227002),
          d = e(6932877194),
          o = e(4423055085),
          a = e(6422693406),
          r = e(1874577777);
        let c = !1;
        const u = (0, s.A)("Sends a message", function (v, E) {
          let {
            message: T,
            traceId: g,
            parentSpanId: I,
          } = arguments.length > 2 && arguments[2] !== void 0
            ? arguments[2]
            : {};
          const f = {
              ...T,
            },
            y = E();
          return (
            T.blocks &&
              typeof T.blocks == "object" &&
              (f.blocks = JSON.stringify(T.blocks)),
            T.unfurl &&
              typeof T.unfurl == "object" &&
              (f.unfurl = JSON.stringify(T.unfurl)),
            c
              ? new a.K((M, p) => {
                  setTimeout(() => {
                    p(
                      new Error({
                        data: {
                          error: "testing",
                        },
                        message: "testing",
                      })
                    );
                  }, 2e3);
                })
              : (0, r.A)(y)
              ? v(
                  (0, d.apiCallPersisted)({
                    method: "chat.postMessage",
                    args: f,
                    reason: "webapp_message_send_offline",
                    EXPEDITED: !0,
                    traceId: g,
                    parentSpanId: I,
                  })
                )
              : v(
                  (0, i.apiCall)({
                    method: "chat.postMessage",
                    args: f,
                    reason: "webapp_message_send",
                    EXPEDITED: !0,
                    traceId: g,
                    parentSpanId: I,
                  })
                )
          );
        });
        (u.meta = {
          name: "createFetcher",
          key: "createFetcherchatPostMessage",
          description: "Sends a message",
        }),
          (u.propTypes = {
            message: n().shape({
              channel: n().string.isRequired,
              client_msg_id: n().string,
            }).isRequired,
            traceId: n().string,
            parentSpanId: n().string,
          });
        const l = u,
          m = _((v) => {
            c = !!v;
          }, "setForceMessageFailure");
        (0, o.ul)("setForceMessageFailure", m);
      },
      9694536345: (W, A, e) => {
        "use strict";
        e.d(A, {
          O: () => l,
        });
        var t = e(8840779375),
          n = e(3297051565),
          s = e.n(n),
          i = e(5257368278),
          d = e(1269227002),
          o = e(796111729),
          a = e(5873468694),
          r = e(5795074931),
          c = e(3683482182),
          u = e(5657872960);
        const l = (0, i.A)("Calls client.counts endpoint", function (m, v) {
          let { reason: E = "client-counts-api/fetchClientCounts" } =
            arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          const T = {
              thread_counts_by_channel: !0,
              org_wide_aware: !0,
              include_file_channels: !0,
            },
            g = (0, c.Cc)(v());
          return (
            g && (T.dry_run_last_fetched = g),
            m(
              (0, d.apiCall)({
                method: "client.counts",
                args: T,
                reason: E,
              })
            ).then((I) => {
              if (!I || !I.ok) return {};
              try {
                const b = ["U0620EL8G", "WFKHTCZ29", "WKLQEGRRB"],
                  K = (0, r.WR)(v());
                if (b.indexOf(K) > -1) {
                  const x = (0, t.A)(I.ims, (U) => ({
                      id: U.id,
                    })),
                    B = (0, t.A)(I.mpims, (U) => ({
                      id: U.id,
                    }));
                  (0, o.Ay)({
                    getState: v,
                  }).error("guest_to_guest_visibility", {
                    type: "client_counts_api_results",
                    im_list: x,
                    mpim_list: B,
                  });
                }
              } catch (b) {
                (0, o.Ay)({
                  getState: v,
                }).error("guest_to_guest_visibility", {
                  type: "client_counts_api_results",
                  error: b,
                });
              }
              const {
                  activity: f = {},
                  channels: y = [],
                  ims: M = [],
                  mpims: p = [],
                  threads: O = {},
                  file_channels: C = {
                    has_unreads: !1,
                    mention_count: 0,
                  },
                  channel_badges: h = {},
                  alerts: D = null,
                  counts_last_fetched: P = null,
                } = I,
                S = {
                  activity: f,
                  channels: y,
                  ims: M.map((b) => ({
                    ...b,
                    is_im: !0,
                  })),
                  mpims: p.map((b) => ({
                    ...b,
                    is_mpim: !0,
                  })),
                  threads: O,
                  alerts: D,
                  fileChannels: C,
                  channelBadges: h,
                  countsLastFetched: P,
                };
              return (
                (0, u.c)(v()) && I.saved && (S.saved = (0, a.XK)(I.saved)), S
              );
            })
          );
        });
        (l.meta = {
          name: "createFetcher",
          key: "createFetcherfetchClientCounts",
          description: "Calls client.counts endpoint",
        }),
          (l.propTypes = {
            reason: s().string,
          });
      },
      1194535350: (W, A, e) => {
        "use strict";
        e.d(A, {
          KO: () => o,
          _J: () => a,
          zx: () => r,
        });
        var t = e(3297051565),
          n = e.n(t),
          s = e(1269227002),
          i = e(5257368278),
          d = e(4318855015);
        const o = (0, i.A)(
          "Fetch all available and installed emoji collections from the API",
          function (c, u) {
            let { reason: l } =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : {};
            return c(
              (0, s.apiCall)({
                method: "emoji.collections.list",
                reason: l,
                args: {
                  installed_only: "0",
                },
              })
            );
          }
        );
        (o.meta = {
          name: "createFetcher",
          key: "createFetcherfetchEmojiCollections",
          description:
            "Fetch all available and installed emoji collections from the API",
        }),
          (o.propTypes = {
            reason: n().string.isRequired,
          });
        const a = (0, i.A)("Add an emoji collection", (c, u, l) => {
          let { collectionId: m, reason: v } = l;
          return c(
            (0, s.apiCall)({
              method: "emoji.addCollection",
              args: {
                collection_id: m,
              },
              reason: v,
            })
          ).catch((E) => {
            if (E.name !== "already_installed") throw E;
          });
        });
        (a.meta = {
          name: "createFetcher",
          key: "createFetcheraddEmojiCollection",
          description: "Add an emoji collection",
        }),
          (a.propTypes = {
            collectionId: n().string.isRequired,
            reason: n().string.isRequired,
          });
        const r = (0, i.A)("Remove an emoji collection", (c, u, l) => {
          let { collectionId: m, reason: v } = l;
          return (
            c(
              (0, d.$x)({
                collectionId: m,
              })
            ),
            c(
              (0, s.apiCall)({
                method: "emoji.removeCollection",
                reason: v,
                args: {
                  collection_id: m,
                },
              })
            )
          );
        });
        (r.meta = {
          name: "createFetcher",
          key: "createFetcherremoveEmojiCollection",
          description: "Remove an emoji collection",
        }),
          (r.propTypes = {
            collectionId: n().string.isRequired,
            reason: n().string.isRequired,
          });
      },
      490494914: (W, A, e) => {
        "use strict";
        e.d(A, {
          Cl: () => c,
          Is: () => u,
          af: () => r,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(5257368278),
          i = e(6892115804),
          d = e(8847766420),
          o = e(2149300053),
          a = e(1026257987);
        const r = (0, s.A)(
          "Queries Flannel for a list of external connected orgs/teams",
          (l, m, v) => {
            let { count: E, filter: T, marker: g } = v;
            return (0, o.P)((0, d.JY)(m()), {
              method: o.J8.EXTERNAL_TEAMS_LIST,
              args: {
                count: E,
                filter: T,
                marker: g,
              },
            }).then((I) => I);
          }
        );
        r.meta = {
          name: "createFetcher",
          key: "createFetcherfetchExternalTeamsList",
          description:
            "Queries Flannel for a list of external connected orgs/teams",
        };
        const c = (0, s.A)(
          "Queries Flannel for channel counts of external connected orgs/teams",
          (l, m, v) => {
            let { teamIds: E, count: T, marker: g } = v;
            return (0, o.P)((0, d.JY)(m()), {
              method: o.J8.EXTERNAL_TEAMS_COUNTS,
              args: {
                team_ids: E,
                count: T,
                marker: g,
              },
            }).then((I) => I);
          }
        );
        c.meta = {
          name: "createFetcher",
          key: "createFetcherfetchExternalTeamsCounts",
          description:
            "Queries Flannel for channel counts of external connected orgs/teams",
        };
        const u = (0, s.A)(
          "Fetches and upserts external teams that match a query",
          (function () {
            var l = (0, t.coroutine)(function* (m, v, E) {
              const T = (0, d.JY)(v());
              return (0, a.Cj)(T, E).then((g) => {
                let { objects: I, next_marker: f } = g;
                return (
                  m(
                    (0, i.OU)({
                      teams: I,
                    })
                  ),
                  {
                    externalTeams: I,
                    nextMarker: f,
                  }
                );
              });
            });
            return function (m, v, E) {
              return l.apply(this, arguments);
            };
          })()
        );
        u.meta = {
          name: "createFetcher",
          key: "createFetcherfetchAndUpsertExternalTeamsWithQuery",
          description: "Fetches and upserts external teams that match a query",
        };
      },
      165535451: (W, A, e) => {
        "use strict";
        e.d(A, {
          iV: () => I,
          ib: () => M,
          oP: () => m,
          oQ: () => y,
          uV: () => f,
        });
        var t = e(2927826522),
          n = e(5873468694),
          s = e(1269227002),
          i = e(5257368278),
          d = e(796111729),
          o = e(6323355797),
          a = e(3246555800),
          r = e(3559164431),
          c = e(3554387543);
        const u = _((O) => {
            let {
                taxName: C,
                isVat: h,
                effectiveTaxPercentage: D = 0,
                salesTaxAmt: P,
                taxPercentage: S,
              } = O,
              b = o.Zt.sales_tax;
            C
              ? (b = o.Zt[C.toString().toLowerCase()] || o.Zt.sales_tax)
              : h && (b = o.Zt.vat);
            const K = D > 0 ? D : null;
            return {
              value: P || 0,
              type: b,
              percentage: K || S || 0,
            };
          }, "formatTaxData"),
          l = _((O) => {
            const C = O.tax;
            return u({
              taxName: C == null ? void 0 : C.tax_name,
              isVat: C == null ? void 0 : C.is_vat,
              effectiveTaxPercentage:
                C == null ? void 0 : C.effective_tax_percentage,
              salesTaxAmt: C == null ? void 0 : C.sales_tax_amt,
              taxPercentage: C == null ? void 0 : C.tax_percentage,
            });
          }, "getTaxData"),
          m = _((O) => u(O), "getAddonTaxData"),
          v = _((O) => {
            var C;
            const h = O.term === "12m" ? o.ck.yearly : o.ck.monthly,
              D = O.term === "12m" ? o.OY.yearly : o.OY.monthly,
              P =
                (C = O.available_addons) === null || C === void 0
                  ? void 0
                  : C.map((S) => ({
                      id: S.addon_id,
                      addonType: S.addon_type,
                      upfrontUnitCostPerM: S.upfront_unit_cost_per_m,
                      upfrontUnitCostPerTerm: S.upfront_unit_cost_per_term,
                    }));
            return {
              id: O.product_id,
              term: h,
              currency: O.currency,
              level: O.level,
              lengthOfTermInMonths: D,
              costPerMonth: O.cost_per_m,
              costPerTerm: O.cost_per_term,
              isInvoice: O.is_inv || !1,
              maxInvoiceSeats: O.max_invoice_seats,
              minInvoiceSeats: O.min_invoice_seats,
              availableAddons: P,
            };
          }, "getPlanDataInstance"),
          E = _(
            (O) =>
              Object.keys(O).reduce(
                (C, h) => {
                  const D = O[h];
                  return (
                    (C.availablePlans[h] = {
                      [o.i6.standard.id]: {
                        [o.uq.CREDIT_CARD]: {
                          [o.ck.monthly]: {
                            default: v(D.std_m),
                          },
                          [o.ck.yearly]: {
                            default: v(D.std_y),
                          },
                        },
                        [o.uq.INVOICE]: {
                          [o.ck.yearly]: {
                            default: v(D.inv_std_y),
                          },
                        },
                      },
                      [o.i6.plus.id]: {
                        [o.uq.CREDIT_CARD]: {
                          [o.ck.monthly]: {
                            default: v(D.plus_m),
                          },
                          [o.ck.yearly]: {
                            default: v(D.plus_y),
                          },
                        },
                        [o.uq.INVOICE]: {
                          [o.ck.yearly]: {
                            default: v(D.inv_plus_y),
                          },
                        },
                      },
                      [o.i6.compliance.id]: {
                        [o.uq.CREDIT_CARD]: {
                          [o.ck.yearly]: {
                            default: v(D.compliance_y),
                          },
                        },
                        [o.uq.INVOICE]: {
                          [o.ck.yearly]: {
                            default: v(D.inv_compliance_y),
                          },
                        },
                      },
                    }),
                    C
                  );
                },
                {
                  availablePlans: {},
                }
              ),
            "parsePlanAPIResponse"
          ),
          T = _((O) => {
            var C, h, D, P, S, b;
            const K = l(O),
              x = {
                currentCredits: O.credits.total_credits,
                creditsRemaining: O.credits.credits_remaining,
                creditsApplied: O.credits.credits_applied,
                proratedRefundCredits: O.prorated_refund,
                totalCreditsRemaining: O.credits.total_credits_remaining || 0,
                totalCreditsApplied: O.credits.total_credits_applied || 0,
              },
              B = O.discount ? (0, t.A)(O.discount) : void 0,
              U = {
                purchase:
                  !((C = O.addons) === null || C === void 0) &&
                  C.purchase &&
                  Object.keys(
                    (h = O.addons) === null || h === void 0
                      ? void 0
                      : h.purchase
                  ).length > 0
                    ? Object.entries(
                        (D = O.addons) === null || D === void 0
                          ? void 0
                          : D.purchase
                      ).reduce((G, H) => {
                        let [F, V] = H;
                        return [
                          ...G,
                          {
                            id: F,
                            addonType: V.addon_type,
                            baseUpfrontUnitCost: V.base_upfront_unit_cost,
                            term: V.term,
                            baseProratedSubtotal: V.base_prorated_subtotal,
                            numUsers: V.num_users,
                          },
                        ];
                      }, [])
                    : [],
                refund:
                  !((P = O.addons) === null || P === void 0) &&
                  P.refund &&
                  Object.keys(
                    (S = O.addons) === null || S === void 0 ? void 0 : S.refund
                  ).length > 0
                    ? Object.entries(
                        (b = O.addons) === null || b === void 0
                          ? void 0
                          : b.refund
                      ).reduce((G, H) => {
                        let [F, V] = H;
                        return [
                          ...G,
                          {
                            id: F,
                            addonType: V.addon_type,
                            term: V.term,
                            amount: V.amount,
                            numUsers: V.num_users,
                          },
                        ];
                      }, [])
                    : [],
              };
            return {
              activePlanCost: {
                id: O.product_id,
                subtotal: O.subtotal,
                undiscountedSubtotal: O.undiscounted_subtotal,
                billableActiveUsers: O.billable_active_users,
                discount: B,
                tax: K,
                credits: x,
                totalRecurring: O.total_recurring,
                totalDueToday: O.total_due_today,
                quotedTermEnd: O.quoted_term_end,
                quotedTermStart: O.quoted_term_start,
                paidSeats: O.paid_seats,
                outstandingInvoiceAmount: O.outstanding_invoice_amount || 0,
                addons: U,
              },
            };
          }, "mapCostToPropsFromAPI"),
          g = _((O) => {
            const C = E(O.plans).availablePlans;
            if (O.additional_addon_info) {
              const h = {
                isSlackAiLanguageUnsupported:
                  O.additional_addon_info.is_slack_ai_language_unsupported,
              };
              return {
                availablePlans: C,
                additionalAddonInfo: h,
              };
            }
            return {
              availablePlans: C,
            };
          }, "parseRetailPlansAPIResponse"),
          I = (0, i.A)("Fetch Available Plans", (O, C, h) =>
            O(
              (0, s.apiCall)({
                reason: "payments-plans-fetch-available-plans",
                method: "retail.plans",
                args: h,
              })
            ).then((D) => g(D))
          );
        I.meta = {
          name: "createFetcher",
          key: "createFetcherfetchAvailablePlans",
          description: "Fetch Available Plans",
        };
        const f = (0, i.A)("Fetch Available Plans", (O, C, h) => {
          let {
            productId: D,
            country: P,
            region: S,
            postalCode: b,
            street: K,
            isBusinessPurchase: x,
            isInvoice: B,
            numInvoiceSeats: U,
            isFinalReview: R,
            isFutureProductSwitch: G,
            vatId: H,
            regionalId: F,
            countryMap: V,
          } = h;
          const X = C(),
            q = (0, a.KV)(V, P, S),
            oe = (0, r.lK)(X),
            z = (0, r.IK)(X),
            Ae = (0, c.L)(X);
          let ae;
          if (z != null && z.length) {
            const ve = [];
            z.forEach((Se) => {
              const Ee = Ae.find((be) => be.addonType === Se);
              Ee != null && Ee.id && ve.push(Ee.id);
            });
            try {
              ae = ve.length ? JSON.stringify(ve) : void 0;
            } catch (Se) {
              (0, d.Wo)().error(
                `Error with JSON.stringify in fetchCost, ${Se}`
              );
            }
          }
          const de = {
            state: S,
            product_id: D,
            addon_ids: ae,
            is_final_review: R,
            checkout_step: oe,
            is_future_switch: G,
            ...(R
              ? {}
              : {
                  country: P,
                  street1: K,
                  zip: b,
                  is_business: q ? !1 : x,
                  is_vat_registered: q ? x : !1,
                  vat_id: H || "",
                  regional_tax_id: F,
                }),
            ...(B
              ? {
                  requested_invoice_seats: U,
                }
              : {}),
          };
          return O(
            (0, s.apiCall)({
              reason: "payments-plans-fetch-cost-data",
              method: "retail.cost",
              args: de,
            })
          ).then((ve) => {
            const Se = ve.plan_cost;
            if (!Se) throw new Error("retail.cost: plan_cost is undefined");
            return T(Se);
          });
        });
        f.meta = {
          name: "createFetcher",
          key: "createFetcherfetchCost",
          description: "Fetch Available Plans",
        };
        const y = (0, i.A)("Fetch Cost Data for Addons Flow", (O, C, h) => {
          let D;
          try {
            D = JSON.stringify([h.addonId]);
          } catch (P) {
            (0, d.Wo)().error(`Error with JSON.stringify in fetchCost, ${P}`);
          }
          return O(
            (0, s.apiCall)({
              reason: "payments-plans-fetch-cost-for-addons",
              method: "retail.cost",
              args: {
                addon_ids: D,
              },
            })
          ).then((P) =>
            _((b) => {
              var K;
              const x = b == null ? void 0 : b.addon_costs;
              if (!x) return null;
              const B =
                ((K = x.addons) === null || K === void 0
                  ? void 0
                  : K[h.addonId]) || null;
              return B
                ? {
                    currency: x.currency,
                    freeUsageLimit: B.free_usage_limit,
                    upfrontUnitCost: B.base_upfront_unit_cost,
                    usageUnitCost: B.base_usage_unit_cost,
                    addonType: B.addon_type,
                    term: B.term,
                    recurringUpfrontSubtotal: B.recurring_upfront_subtotal,
                    dueToday: (0, n.XK)(x.due_today),
                    recurringCosts: (0, n.XK)(x.recurring_costs),
                  }
                : null;
            }, "formatApiResponse")(P)
          );
        });
        y.meta = {
          name: "createFetcher",
          key: "createFetcherfetchCostForAddons",
          description: "Fetch Cost Data for Addons Flow",
        };
        const M = (0, i.A)("Fetch Plans Page Boot Data", (O) =>
          O(
            (0, s.apiCall)({
              reason: "payments-plans-fetch-plans-page-boot-data",
              method: "retail.getAvailablePlans",
              args: {},
            })
          )
        );
        M.meta = {
          name: "createFetcher",
          key: "createFetcherfetchPlansPageBootData",
          description: "Fetch Plans Page Boot Data",
        };
        const p = {
          mapCostToPropsFromAPI: T,
          getTaxData: l,
          getAddonTaxData: m,
        };
      },
      9109082163: (W, A, e) => {
        "use strict";
        e.d(A, {
          Rs: () => u,
          eS: () => c,
          xs: () => r,
        });
        var t = e(3297051565),
          n = e.n(t),
          s = e(8703681551),
          i = e(8571983633),
          d = e(5257368278),
          o = e(1269227002);
        const a = {
            "pins.list": {},
          },
          r = (0, d.A)("Get pinned items for channel", function (m, v) {
            let { channelId: E, reason: T } =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : {};
            const g = a["pins.list"];
            return (
              g[E] ||
                ((g[E] = m(
                  (0, o.apiCall)({
                    method: "pins.list",
                    args: {
                      channel: E,
                    },
                    reason: T,
                  })
                )),
                g[E].finally(() => delete g[E])),
              g[E]
            );
          });
        (r.meta = {
          name: "createFetcher",
          key: "createFetcherpinsList",
          description: "Get pinned items for channel",
        }),
          (r.propTypes = {
            channelId: n().string.isRequired,
            reason: n().string.isRequired,
          });
        const c = (0, d.A)("Pin Message to channel", (m, v, E) => {
          let {
            ts: T,
            fileId: g,
            fileCommentId: I,
            channelId: f,
            reason: y,
          } = E;
          return m(
            (0, o.apiCall)({
              method: "pins.add",
              reason: y,
              args: (0, s.A)(
                {
                  channel: f,
                  timestamp: T,
                  file: g,
                  file_comment: I,
                },
                i.A
              ),
            })
          );
        });
        (c.meta = {
          name: "createFetcher",
          key: "createFetcherpinsAdd",
          description: "Pin Message to channel",
        }),
          (c.propTypes = {
            channelId: n().string.isRequired,
            ts: n().string,
            fileId: n().string,
            fileCommentId: n().string,
            reason: n().string.isRequired,
          });
        const u = (0, d.A)("Unpin Message from channel", (m, v, E) => {
          let {
            ts: T,
            fileId: g,
            fileCommentId: I,
            channelId: f,
            reason: y,
          } = E;
          return m(
            (0, o.apiCall)({
              method: "pins.remove",
              reason: y,
              args: (0, s.A)(
                {
                  channel: f,
                  timestamp: T,
                  file: g,
                  file_comment: I,
                },
                i.A
              ),
            })
          );
        });
        (u.meta = {
          name: "createFetcher",
          key: "createFetcherpinsRemove",
          description: "Unpin Message from channel",
        }),
          (u.propTypes = {
            channelId: n().string.isRequired,
            ts: n().string,
            fileId: n().string,
            fileCommentId: n().string,
            reason: n().string.isRequired,
          });
        const l = {
          resetActiveCalls: () => {
            Object.keys(a).forEach((m) => {
              a[m] = {};
            });
          },
        };
      },
      3309235745: (W, A, e) => {
        "use strict";
        e.d(A, {
          lp: () => Dn,
          SI: () => pn,
          DC: () => j,
          Yb: () => ue,
          aw: () => yn,
          g2: () => qe,
          U7: () => $e,
          eR: () => Ie,
          sr: () => Ne,
          Do: () => Kn,
          EM: () => mn,
          AC: () => In,
          FF: () => Le,
          A$: () => he,
          mi: () => xn,
          mK: () => se,
          bE: () => mt,
          AQ: () => _n,
          Cs: () => we,
          J6: () => Nt,
          LR: () => At,
          cD: () => Y,
          jl: () => $t,
          QH: () => We,
          DF: () => dt,
          UC: () => te,
          fx: () => _e,
          lS: () => ht,
          A1: () => Xt,
          H9: () => Fn,
          ZD: () => Vn,
          $P: () => En,
          G2: () => wn,
          S: () => Jn,
        });
        var t = e(8571983633),
          n = e(7715417323),
          s = e(7174777686),
          i = e(2141441167),
          d = e(897091071),
          o = e(1703559452),
          a = e(9113979368),
          r = e(9746734072),
          c = e(5503876160),
          u = e(4103274853),
          l = e(1566461842),
          m = e(6422693406),
          v = e(2664504268),
          E = e(5513050121),
          T = e(7599421656),
          g = e(6644049054),
          I = e(8956161330),
          f = e(4078437571),
          y = e(1340402138),
          M = e(4446301238),
          p = e(6554371307),
          O = e(8017028002),
          C = e(490494914),
          h = e(5984521287),
          D = e(8419094353),
          P = e(9552526132),
          S = e(8352634987),
          b = e(4423055085),
          K = e(5613323535),
          x = e(735940183),
          B = e(571104883),
          U = e(7148679525),
          R = e(3677514771),
          G = e(3683888369),
          H = e(6839188756),
          F = e(1507833885);
        const V = new x.Ay("modals");
        function X(Je) {
          return [
            {
              id: "downloads",
              name: V.t("Downloads"),
              icon: "download",
              isEnabled: () => (0, B.y3)(),
            },
            {
              id: "invite_to_workspace",
              name: V.t("Invite people to {workspaceName}", {
                workspaceName: (0, H.F1)((0, R.H7)(Je)),
              }),
              icon: "add-user",
              isEnabled: () => (0, U.Lz)(Je),
            },
            {
              id: "create_a_channel",
              name: V.t("Create a Channel"),
              icon: "plus",
              isEnabled: () => (0, F.MM)(Je),
            },
            {
              id: "create_a_canvas",
              name: V.t("Create a canvas", {
                fallbackHash: "6ac4a1edc6d12317e9fc711b1fd00c073b191bdd",
                fallbackHashNs: "classic_nav",
              }),
              icon: "plus",
              isEnabled: () => (0, G.l)(Je),
            },
          ];
        }
        _(X, "getAllModals");
        function q(Je) {
          return X(Je).filter((Bt) => Bt.isEnabled());
        }
        _(q, "getAllEnabledModals");
        var oe = e(7940058138),
          z = e(7520119303),
          Ae = e(8414867410),
          ae = e(9884588328),
          de = e(1407713935),
          ve = e(5274604535),
          Se = e(2298581483),
          Ee = e(7969244833),
          be = e(6007206761),
          Ce = e(6495946979),
          Z = e(4001737397),
          $ = e(1197508738),
          N = e(8393662842),
          L = e(5455782105),
          w = e(8170643398),
          k = e(4562579337),
          J = e(5096647761),
          ee = e(3792998666),
          ne = e(3479134063),
          pe = e(6536982570),
          Me = e(9889493721),
          ke = e(6120301420),
          ge = e(9001455011),
          fe = e(340763958),
          re = e(3212336858),
          le = e(2801540778),
          Re = e(2023092677),
          ye = e(4827886670),
          Te = e(9931116838),
          De = e(3559837422),
          Ue = e(3307632080),
          Ke = e(4919351998),
          Ze = e(411655882),
          Q = e(2229186),
          ie = e(1224315998),
          Ve = e(2689960678),
          xe = e(82287009),
          je = e(9190452268),
          Fe = e(5770715593),
          He = e(6030318713),
          Oe = e(352142497);
        const Ye = new x.Ay("ia4"),
          at = {
            get [Oe.D.BrowseCanvases]() {
              return Ye.t("All canvases", {
                fallbackHash: "50a279de829f2dc398ac2ac7c9367508ea4b5df5",
                fallbackHashNs: "channel_sidebar",
              });
            },
            get [Oe.D.BrowseChannels]() {
              return Ye.t("All channels", {
                fallbackHash: "50a279de829f2dc398ac2ac7c9367508ea4b5df5",
                fallbackHashNs: "channel_sidebar",
              });
            },
            get [Oe.D.BrowsePeople]() {
              return Ye.t("All people", {
                fallbackHash: "7aeeec03f7c076af275e9b7c0e187a40bd193acc",
                fallbackHashNs: "enterprise_dashboard",
              });
            },
            get [Oe.D.BrowseFiles]() {
              return Ye.t("All files", {
                fallbackHash: "f7857dcc71d3ce6a9095d1fbca5acb8cc9319005",
                fallbackHashNs: "search",
              });
            },
            get [Oe.D.ExternalWorkspaceAllowedOrgPane]() {
              return Ye.t("Organization", {
                fallbackHash: "519255ae1f74ffc5ddd29979295c7572f048ad81",
                fallbackHashNs: "member_profile",
              });
            },
            get [Oe.D.RecentFiles]() {
              return Ye.t("Recently Viewed Files", {
                fallbackHash: "6ce6c512ea433a7fc5c8841628e7696cd0ff7f2b",
              });
            },
            get [Oe.D.FilesSharedWithYou]() {
              return Ye.t("Files shared with you", {
                fallbackHash: "72f2b0dfa1e68a34813db5999ff8098f60ef699d",
                fallbackHashNs: "search",
              });
            },
            get [Oe.D.FilesCreatedByYou]() {
              return Ye.t("Files created by you", {
                fallbackHash: "8c292710d9aa5d3b598cf24b70f804cb0341e24e",
                fallbackHashNs: "search",
              });
            },
            get [Oe.D.RecentCanvases]() {
              return Ye.t("Recently Viewed Canvases", {
                fallbackHash: "6ce6c512ea433a7fc5c8841628e7696cd0ff7f2b",
              });
            },
            get [Oe.D.CanvasesSharedWithYou]() {
              return Ye.t("Canvases shared with you", {
                fallbackHash: "6ce6c512ea433a7fc5c8841628e7696cd0ff7f2b",
              });
            },
            get [Oe.D.CanvasesCreatedByYou]() {
              return Ye.t("Canvases created by you", {
                fallbackHash: "6ce6c512ea433a7fc5c8841628e7696cd0ff7f2b",
              });
            },
            [Oe.D.DeletedCanvases]: void 0,
            [Oe.D.DmsList]: void 0,
            [Oe.D.LaterList]: void 0,
            [Oe.D.Channel]: void 0,
            [Oe.D.AppSpace]: void 0,
            [Oe.D.BrowseApps]: void 0,
            get [Oe.D.ExternalOrganizations]() {
              return Ye.t("External organizations", {
                fallbackHash: "e21da9e565b1e32162650ed549e03eaf5b4364e5",
                fallbackHashNs: "slack_connect_hub",
              });
            },
            get [Oe.D.ExternalOrganization]() {
              return Ye.t("External organization", {
                fallbackHash: "e21da9e565b1e32162650ed549e03eaf5b4364e5",
                fallbackHashNs: "slack_connect_hub",
              });
            },
            get [Oe.D.ExternalPeople]() {
              return Ye.t("External people", {
                fallbackHash: "e21da9e565b1e32162650ed549e03eaf5b4364e5",
                fallbackHashNs: "slack_connect_hub",
              });
            },
            get [Oe.D.SlackConnectChannels]() {
              return Ye.t("Slack Connect channels", {
                fallbackHash: "e21da9e565b1e32162650ed549e03eaf5b4364e5",
                fallbackHashNs: "slack_connect_hub",
              });
            },
            get [Oe.D.SlackConnectInvitations]() {
              return Ye.t("Slack Connect invitations", {
                fallbackHash: "e21da9e565b1e32162650ed549e03eaf5b4364e5",
                fallbackHashNs: "slack_connect_hub",
              });
            },
            [Oe.D.BrowseExternalWorkspace]: void 0,
            [Oe.D.PostEvent]: void 0,
            [Oe.D.BrowseShortcuts]: void 0,
            [Oe.D.BrowseWorkflowsManagedByYou]: void 0,
            [Oe.D.BrowseYourWorkflowTemplates]: void 0,
            [Oe.D.BrowseWorkflowTemplates]: void 0,
            [Oe.D.BrowseUserGroups]: void 0,
            [Oe.D.OrgDirectory]: void 0,
            get [Oe.D.RecentPlatform]() {
              return Ye.t("Recently used workflows", {
                fallbackHash: "f97d1ab1f281e78d5e61024eee5be84679fd60ac",
                fallbackHashNs: "search",
              });
            },
            [Oe.D.SlackConnect]: void 0,
            [Oe.D.Page]: void 0,
            [Oe.D.Threads]: void 0,
            [Oe.D.Thread]: void 0,
            [Oe.D.Profile]: void 0,
            [Oe.D.FileDetails]: void 0,
            [Oe.D.Help]: void 0,
            [Oe.D.UserGroup]: void 0,
            [Oe.D.KeyboardShortcuts]: void 0,
            [Oe.D.WhatsNew]: void 0,
            [Oe.D.Feedback]: void 0,
            [Oe.D.List]: void 0,
            [Oe.D.ListRecord]: void 0,
            [Oe.D.ListRecordDetails]: void 0,
            [Oe.D.ListRecordThread]: void 0,
            [Oe.D.ListRecordHistory]: void 0,
            [Oe.D.ListHistory]: void 0,
            [Oe.D.ComposeList]: void 0,
            [Oe.D.Compose]: void 0,
            [Oe.D.QuipCommentThread]: void 0,
            [Oe.D.QuipCommentStream]: void 0,
            [Oe.D.QuipActivityHistory]: void 0,
            [Oe.D.QuipAutomationsOverview]: void 0,
            [Oe.D.Quip]: void 0,
            [Oe.D.Canvas]: void 0,
            [Oe.D.ChannelCanvas]: void 0,
            [Oe.D.CanvasBrowser]: void 0,
            [Oe.D.HuddlePageCanvas]: void 0,
            [Oe.D.PaidBenefits]: void 0,
            [Oe.D.Setup]: void 0,
            [Oe.D.SearchEmpty]: void 0,
            [Oe.D.AboutWorkspace]: void 0,
            [Oe.D.Unknown]: void 0,
            [Oe.D.MorePeopleSidebar]: void 0,
            [Oe.D.MoreCanvasesSidebar]: void 0,
            [Oe.D.MoreSolutionsSidebar]: void 0,
            [Oe.D.AppPopout]: void 0,
            [Oe.D.MorePlatformSidebar]: void 0,
            [Oe.D.Search]: void 0,
            [Oe.D.ChannelList]: void 0,
            [Oe.D.BrowseLists]: void 0,
            [Oe.D.DeletedLists]: void 0,
            [Oe.D.Tasks]: void 0,
            [Oe.D.AssignedTasks]: void 0,
            [Oe.D.Reminders]: void 0,
            [Oe.D.Saved]: void 0,
            [Oe.D.BrowseList]: void 0,
            [Oe.D.ActivityList]: void 0,
            [Oe.D.MoreFilesSidebar]: void 0,
            [Oe.D.MoreListsSidebar]: void 0,
            [Oe.D.MoreTodosSidebar]: void 0,
            [Oe.D.FilesPrototypeSidebar]: void 0,
            [Oe.D.MoreChannelsSidebar]: void 0,
            [Oe.D.MoreHuddlesSidebar]: void 0,
            [Oe.D.MoreExternalConnectionsSidebar]: void 0,
            [Oe.D.HelpBrowser]: void 0,
            [Oe.D.Huddle]: void 0,
            [Oe.D.BrowseHuddles]: void 0,
            [Oe.D.KeyboardShortcutsBrowser]: void 0,
            [Oe.D.WhatsNewBrowser]: void 0,
            [Oe.D.FeedbackBrowser]: void 0,
            [Oe.D.ExternalWorkspaceSidebar]: void 0,
            [Oe.D.ExternalWorkspacePeopleBrowser]: void 0,
            [Oe.D.ExternalWorkspaceChannelBrowser]: void 0,
            [Oe.D.AiSummaryDetails]: void 0,
            [Oe.D.DailyDigest]: void 0,
            [Oe.D.MoreAiSummarySidebar]: void 0,
            [Oe.D.SearchSummary]: void 0,
            [Oe.D.AssistantList]: void 0,
            [Oe.D.BrowseFilesPrototype]: void 0,
            [Oe.D.Today]: void 0,
            [Oe.D.Record]: void 0,
            [Oe.D.WorkObject]: void 0,
            [Oe.D.RecordChannelCreate]: void 0,
            [Oe.D.RecordChannelRelatedList]: void 0,
            [Oe.D.SalesAdministration]: void 0,
            [Oe.D.SalesBulkGrid]: void 0,
            [Oe.D.SalesHome]: void 0,
            [Oe.D.SalesListViewBrowser]: void 0,
            [Oe.D.SalesLogActivity]: void 0,
            [Oe.D.SalesCreateRecord]: void 0,
            [Oe.D.SalesNotifications]: void 0,
            [Oe.D.SalesSidebar]: void 0,
            [Oe.D.AssistantThread]: void 0,
            [Oe.D.Solutions]: void 0,
            [Oe.D.Agents]: void 0,
            [Oe.D.SolutionsFiltered]: void 0,
            [Oe.D.BrowseYourSolutions]: void 0,
            [Oe.D.BrowseYourCompanySolutions]: void 0,
            [Oe.D.ChannelFiles]: void 0,
            [Oe.D.SlackKitPlayground]: void 0,
            [Oe.D.AiApp]: void 0,
            [Oe.D.AboutAiApp]: void 0,
            [Oe.D.BookmarksFolder]: void 0,
            [Oe.D.ActionItems]: void 0,
            [Oe.D.Inbox]: void 0,
            [Oe.D.HuddleTranscriptDetails]: void 0,
            get [Oe.D.WorkflowDetails]() {
              return Ye.t("Workflow details", {
                fallbackHash: "badd385121c5861ac693b59ad8c160fdf7994344",
                fallbackHashNs: "channel_details",
              });
            },
            get [Oe.D.WorkflowEditor]() {
              return Ye.t("Workflow Editor", {
                fallbackHash: "792c81a4cfdcb5b45d688cb03c2fd2e816f86d44",
                fallbackHashNs: "workflow_builder",
              });
            },
            [Oe.D.BBMMain]: void 0,
            [Oe.D.BBMWorkspaceSwitcher]: void 0,
            [Oe.D.SearchInChannel]: void 0,
            [Oe.D.BBMMore]: void 0,
          },
          pt = _((Je) => (Je in at ? at[Je] : ""), "getDisplayNameForViewType");
        var Qe = e(4240442510),
          ct = e(6910192640),
          Pt = e(505908973),
          zt = e(4096483543),
          an = e(5600190572),
          Qt = e(4256321479),
          tn = e(8195161e3),
          Ht = e(1948374838),
          Kt = e(1917953477),
          qt = e(181849556),
          Tn = e(2825917518),
          Mt = e(1072784641),
          Jt = e(6897117289),
          dn = e(8956261571),
          rn = e(4342685672),
          gn = e(1031947056),
          Zt = e(8847766420),
          Vt = e(7260478587),
          Sn = e(4119164726),
          ze = e(6533394955),
          Ot = e(6451390137),
          fn = e(2854654447),
          ln = e(5795074931),
          it = e(9107158149),
          Tt = e(7688940281),
          Ct = e(207659888),
          Rt = e(2235302340),
          Yt = e(9101533895),
          bn = e(6728717861),
          Wn = e(3829348308),
          hn = e(4761125736),
          Bn = e(937317117),
          Rn = e(761034736),
          zn = e(7478895768),
          is = e(8227942655),
          ss = e(4224126550),
          jn = e(8276911661),
          Yn = e(5688490863),
          Qn = e(8149648525),
          es = e(2047021170),
          Et = e(4135820365),
          gt = e(6892115804),
          Ft = e(1835177371),
          nn = e(6508028729);
        const Dn = {
          entities: {
            channels: {
              includePublic: !0,
              includePrivate: !0,
              includeFromAnotherTeam: !1,
              includeMpims: !1,
              includeIms: !1,
              includeArchived: !0,
              onlyIfMember: !1,
              onlyVisibleMpims: !1,
              onlyVisibleIms: !1,
              includeExternallyShared: !0,
              includeOnlyExternallyShared: !0,
              allowedInternalTeams: void 0,
              shouldAllowedInternalTeamsMatchAny: void 0,
              onlyExternallyShared: !1,
              onlyFromTeamId: void 0,
              includeRecordChannels: !0,
            },
            members: {
              includeSelf: !1,
              includeSlackbot: !0,
              includeBots: !0,
              includeWorkflows: !1,
              includeExternal: !0,
              includeAllExternal: !1,
              onlyLocalTeam: !1,
              includeGuests: !0,
              includeProfileOnlyUsers: !1,
              onlyExternalFromTeams: void 0,
              onlyFromExternalTeamId: void 0,
            },
            userGroups: {
              includeDeleted: !1,
              includeFromAnotherTeam: !1,
            },
            channelSections: {
              includeTypes: {
                [Ct.VZ.Standard]: !0,
                [Ct.VH]: !0,
              },
            },
          },
          limit: 24,
          sort: {
            preferExactMatch: !0,
            frecency: !0,
            preferChannelsUserBelongsTo: !0,
            preferMpimsWithActiveMembers: !0,
            model: rn.KV,
          },
          fuzzyLimit: 3,
          fuzzyJumpLimit: 20,
          fuzzyCJK: !0,
          returnMetadata: !1,
        };
        function bt(Je) {
          let { query: Bt, options: Lt } = Je;
          var rt, yt, ot;
          const lt =
              (ot = Lt == null ? void 0 : Lt.entities) !== null && ot !== void 0
                ? ot
                : {},
            Ge = lt == null ? void 0 : lt.members;
          let jt = !1;
          return (
            Ge && Ge !== !0 && (jt = !!(Ge != null && Ge.matchEmailField)),
            {
              source:
                Lt == null || (rt = Lt.sort) === null || rt === void 0
                  ? void 0
                  : rt.source,
              tiered: Lt == null ? void 0 : Lt.tiered,
              is_searcher_sessions: !1,
              entities: Object.keys(lt)
                .filter((on) => !!lt[on])
                .sort()
                .toString(),
              query_length: Bt.length,
              is_member_email_search:
                (Lt == null || (yt = Lt.sort) === null || yt === void 0
                  ? void 0
                  : yt.source) === "use-team-and-people-search" && jt,
            }
          );
        }
        _(bt, "getTraceTags");
        function In(Je, Bt) {
          var Lt, rt;
          const {
            excludeElmChannels: yt,
            includePublic: ot,
            includePrivate: lt,
            includeFromAnotherTeam: Ge,
            allowedInternalTeams: jt,
            shouldAllowedInternalTeamsMatchAny: on,
          } = (rt =
            (Lt = Bt.entities) === null || Lt === void 0
              ? void 0
              : Lt.channels) !== null && rt !== void 0
            ? rt
            : {};
          let cn = [];
          return (
            ot &&
              (cn = [
                ...cn,
                ...(0, Yt.Wr)(Je, {
                  includeFromAnotherTeam: !!Ge,
                }),
              ]),
            lt &&
              (cn = [
                ...cn,
                ...(0, Yt.sE)(Je, {
                  includeFromAnotherTeam: !!Ge,
                }),
              ]),
            yt && (cn = cn.filter((Wt) => !(0, Ue.A)(Je, Wt))),
            jt &&
              (cn = cn.filter((Wt) => {
                if ((0, Z.O)(Wt)) return !!on;
                const en = (0, Se.R)(Je, Wt),
                  Un = on
                    ? en == null
                      ? void 0
                      : en.some((Pn) => jt.includes(Pn))
                    : en == null
                    ? void 0
                    : en.every((Pn) => jt.includes(Pn));
                return (en == null ? void 0 : en.length) && Un;
              })),
            cn
          );
        }
        _(In, "getLocalChannels");
        function xn(Je, Bt) {
          var Lt;
          const rt = (0, Zt.ZT)(Je),
            yt =
              Bt == null || (Lt = Bt.entities) === null || Lt === void 0
                ? void 0
                : Lt.teams;
          var ot;
          const lt = Object.values(
            (ot = nn._ === null || nn._ === void 0 ? void 0 : (0, nn._)()) !==
              null && ot !== void 0
              ? ot
              : {}
          ).filter((Wt) => Wt.id !== rt);
          if (yt != null && yt.onlyNavigable) {
            const Wt = (0, Et._)(Je);
            return Wt.length ? [...lt, ...Wt] : lt;
          }
          var Ge;
          const jt = (Ge = (0, R.iK)(Je)) !== null && Ge !== void 0 ? Ge : {},
            on = lt.map((Wt) => Wt.id),
            cn = Object.values(jt).filter((Wt) => !on.includes(Wt.id));
          return [...lt, ...cn].filter(Xt(Je, yt));
        }
        _(xn, "getLocalTeams");
        const Nt = (0, gn.Ay)(
          "Get channels from flannel by query",
          (Je, Bt, Lt) => {
            let { query: rt, options: yt } = Lt;
            var ot, lt, Ge, jt;
            const {
                includeFromAnotherTeam: on,
                includeExternallyShared: cn,
                includeOnlyExternallyShared: Wt,
                onlyExternallyShared: en,
                onlyFromTeamId: Un,
                onlyFromExternalWorkspaceId: Pn,
                allowedInternalTeams: Cn,
                shouldAllowedInternalTeamsMatchAny: Mn,
                includeRecordChannels: ds,
              } = (jt =
                (ot = yt.entities) === null || ot === void 0
                  ? void 0
                  : ot.channels) !== null && jt !== void 0
                ? jt
                : {},
              un =
                ((lt = yt.entities) === null ||
                lt === void 0 ||
                (Ge = lt.channels) === null ||
                Ge === void 0
                  ? void 0
                  : Ge.remoteLimit) || yt.limit,
              gs = Bt(),
              os = [],
              vs = " AND ",
              us = {
                query: rt,
                count: un || Dn.limit || 24,
                fuzz:
                  (0, hn._Z)(gs, "fuzzy_no_fuzz") === "fuzzy_no_fuzz" ? 0 : 1,
                uax29_tokenizer:
                  (0, hn._Z)(gs, "searcher_flannel_cjk") === "cjk",
              };
            return (
              on && os.push("xws"),
              !(0, t.A)(cn) && !cn && os.push("NOT shared"),
              !(0, t.A)(Wt) && !Wt && os.push("NOT external"),
              !(0, t.A)(en) && en && os.push("shared"),
              os.length && (us.filter = os.join(vs)),
              Un && (us.external_team = Un),
              Pn && (us.external_team = Pn),
              Cn && (us.allowed_internal_teams = Cn),
              Mn && (us.should_allowed_internal_teams_match_any = Mn),
              ds && (us.include_record_channels = !0),
              Je(
                (0, M.hq)({
                  query: us,
                })
              )
                .timeout(2e3)
                .catch(n.A)
            );
          }
        );
        Nt.meta = {
          name: "createThunk",
          key: "createThunkgetRemoteChannels",
          description: "Get channels from flannel by query",
        };
        const At = (0, gn.Ay)(
          "Get emoji from flannel by query",
          (Je, Bt, Lt) => {
            let { query: rt, options: yt } = Lt;
            var ot, lt;
            const Ge =
              ((ot = yt.entities) === null ||
              ot === void 0 ||
              (lt = ot.emoji) === null ||
              lt === void 0
                ? void 0
                : lt.remoteLimit) || yt.limit;
            return Je(
              (0, O.l8)({
                query: {
                  query: rt,
                  count: Ge,
                },
              })
            )
              .timeout(2e3)
              .catch(n.A);
          }
        );
        At.meta = {
          name: "createThunk",
          key: "createThunkgetRemoteEmoji",
          description: "Get emoji from flannel by query",
        };
        const te = (0, gn.Ay)(
          "Get user groups from the search.team endpoint by query",
          (Je, Bt, Lt) => {
            let { query: rt, options: yt } = Lt;
            var ot, lt, Ge, jt, on, cn;
            const Wt =
              ((ot = yt.entities) === null ||
              ot === void 0 ||
              (lt = ot.userGroups) === null ||
              lt === void 0
                ? void 0
                : lt.remoteLimit) || yt.limit;
            return Je(
              (0, D.cn)({
                query: {
                  query: rt,
                  count: Wt,
                  org_wide:
                    (Ge = yt.entities) === null ||
                    Ge === void 0 ||
                    (jt = Ge.userGroups) === null ||
                    jt === void 0
                      ? void 0
                      : jt.includeFromAnotherTeam,
                  channel:
                    (on = yt.entities) === null ||
                    on === void 0 ||
                    (cn = on.userGroups) === null ||
                    cn === void 0
                      ? void 0
                      : cn.channel,
                },
              })
            )
              .timeout(2e3)
              .catch(n.A);
          }
        );
        te.meta = {
          name: "createThunk",
          key: "createThunkgetRemoteUserGroups",
          description: "Get user groups from the search.team endpoint by query",
        };
        const _e = (0, gn.Ay)(
          "Get remote triggers with query",
          (Je, Bt, Lt) => {
            let { query: rt, includeAutomatedTriggers: yt } = Lt;
            return Je(
              (0, zn.tP)({
                query: rt,
                includeAutomatedTriggers: yt,
              })
            );
          }
        );
        _e.meta = {
          name: "createThunk",
          key: "createThunkgetRemoteWorkflowTriggers",
          description: "Get remote triggers with query",
        };
        const Ie = (0, gn.Ay)(
          "Get bulk user groups from the userGroups.searchBulk endpoint by query",
          (Je, Bt, Lt) => {
            let { queries: rt, options: yt } = Lt;
            var ot, lt, Ge, jt, on, cn;
            const Wt =
              ((ot = yt.entities) === null ||
              ot === void 0 ||
              (lt = ot.userGroups) === null ||
              lt === void 0
                ? void 0
                : lt.remoteLimit) || yt.limit;
            return Je(
              (0, D.MZ)({
                query: {
                  queries: rt,
                  count: Wt,
                  org_wide:
                    (Ge = yt.entities) === null ||
                    Ge === void 0 ||
                    (jt = Ge.userGroups) === null ||
                    jt === void 0
                      ? void 0
                      : jt.includeFromAnotherTeam,
                  channel:
                    (on = yt.entities) === null ||
                    on === void 0 ||
                    (cn = on.userGroups) === null ||
                    cn === void 0
                      ? void 0
                      : cn.channel,
                },
              })
            )
              .timeout(2e3)
              .catch(n.A);
          }
        );
        Ie.meta = {
          name: "createThunk",
          key: "createThunkgetBulkRemoteUserGroups",
          description:
            "Get bulk user groups from the userGroups.searchBulk endpoint by query",
        };
        function Ne(Je, Bt) {
          const {
            includeArchived: Lt,
            includeRequired: rt,
            onlyIfMember: yt,
            canPost: ot,
            includeExternallyShared: lt,
            includeOnlyExternallyShared: Ge,
            onlyExternallyShared: jt,
            onlyFromTeamId: on,
            onlyFromExternalWorkspaceId: cn,
          } = Bt ?? {};
          return (Wt) => {
            let en = !0;
            if (
              (Lt || (en = en && !(0, be.F)(Wt)),
              !(0, t.A)(rt) && !rt && (en = en && !(0, de.gx)(Wt)),
              jt && (en = en && (0, fe.ju)(Wt)),
              (!lt || !Ge) && (en = en && !(0, fe.ju)(Wt)),
              yt && (en = en && (0, Ce.bl)(Wt)),
              ot && (en = en && (0, ye.E)(Je, Wt.id)),
              on)
            ) {
              var Un;
              en =
                en &&
                (((Un = (0, ve.A)(Je, Wt)) === null || Un === void 0
                  ? void 0
                  : Un.includes(on)) ||
                  !1);
            }
            return cn && (en = en && (0, ae.ne)(Je, Wt) === cn), en;
          };
        }
        _(Ne, "getChannelFilterFunction");
        const We = (0, gn.Ay)(
          "Get members from flannel by query",
          (Je, Bt, Lt) => {
            let { query: rt, options: yt } = Lt;
            var ot, lt, Ge;
            const {
                includeDeleted: jt,
                matchEmailField: on,
                onlyExternal: cn,
                includeExternal: Wt,
                includeAllExternal: en,
                includeBots: Un,
                onlyFromExternalTeamId: Pn,
                onlyFromExternalWorkspaceId: Cn,
              } = (Ge = yt.entities.members) !== null && Ge !== void 0
                ? Ge
                : {},
              Mn =
                ((ot = yt.entities) === null ||
                ot === void 0 ||
                (lt = ot.members) === null ||
                lt === void 0
                  ? void 0
                  : lt.remoteLimit) || yt.limit,
              ds = Bt(),
              un = [],
              gs = (0, H.r7)((0, R.H7)(ds)) || !!(0, Zt.jV)(ds),
              os = gs ? ["NOT org"] : ["NOT team"],
              vs = gs ? ["org"] : ["team"],
              us = !jt,
              sn = " AND ",
              Zn = {
                query: rt,
                count: Mn || Dn.limit || 24,
                fuzz:
                  (0, hn._Z)(ds, "fuzzy_no_fuzz") === "fuzzy_no_fuzz" ||
                  yt.fuzzyLimit === 0
                    ? 0
                    : 1,
                uax29_tokenizer:
                  (0, hn._Z)(ds, "searcher_flannel_cjk") === "cjk",
              };
            return (
              us && un.push("NOT deactivated"),
              (cn || Pn) && un.push(...os),
              (Pn || Cn) && (Zn.external_team = Pn || Cn),
              Un || un.push("NOT bots"),
              Wt || un.push(...vs),
              Wt && en && (Zn.include_all_external = !0),
              on && (Zn.search_email = !0),
              un.length && (Zn.filter = un.join(sn)),
              Je(
                (0, h.Wr)({
                  query: Zn,
                })
              )
                .timeout(2e3)
                .catch(n.A)
            );
          }
        );
        We.meta = {
          name: "createThunk",
          key: "createThunkgetRemoteMembers",
          description: "Get members from flannel by query",
        };
        const $e = (0, gn.Ay)(
          "Get members from flannel by query",
          (Je, Bt, Lt) => {
            let { queries: rt, options: yt } = Lt;
            var ot, lt, Ge, jt;
            const { includeDeleted: on, matchEmailField: cn } =
                (jt =
                  (ot = yt.entities) === null || ot === void 0
                    ? void 0
                    : ot.members) !== null && jt !== void 0
                  ? jt
                  : {},
              Wt =
                ((lt = yt.entities) === null ||
                lt === void 0 ||
                (Ge = lt.members) === null ||
                Ge === void 0
                  ? void 0
                  : Ge.remoteLimit) ||
                yt.limit ||
                24,
              en = Bt(),
              Un = [],
              Pn = !on,
              Cn = " AND ",
              Mn = {
                queries: rt,
                count: Wt,
                fuzz:
                  (0, hn._Z)(en, "fuzzy_no_fuzz") === "fuzzy_no_fuzz" ? 0 : 1,
                uax29_tokenizer:
                  (0, hn._Z)(en, "searcher_flannel_cjk") === "cjk",
              };
            return (
              Pn && Un.push("NOT deactivated"),
              cn && (Mn.match_email = !0),
              Un.length && (Mn.filter = Un.join(Cn)),
              Je(
                (0, h.W9)({
                  query: Mn,
                })
              )
                .timeout(2e3)
                .catch(n.A)
            );
          }
        );
        $e.meta = {
          name: "createThunk",
          key: "createThunkgetBulkRemoteMembers",
          description: "Get members from flannel by query",
        };
        function mt(Je, Bt) {
          const {
            includeSelf: Lt,
            includeSlackbot: rt,
            includeBots: yt,
            includeWorkflows: ot,
            includeDeleted: lt,
            includeExternal: Ge,
            includeGuests: jt,
            includeProfileOnlyUsers: on,
            onlyLocalTeam: cn,
            onlyExternal: Wt,
            onlyExternalFromTeams: en,
            onlyFromExternalTeamId: Un,
          } = Bt ?? {};
          return (Pn) => {
            let Cn = !0;
            if (
              (Wt && (Cn = Cn && (0, J.g)(Pn) && !(0, k.A)(Pn)),
              Lt || (Cn = Cn && !(0, w.fy)(Pn)),
              rt || (Cn = Cn && !(0, ne.U)(Pn)),
              en)
            )
              return (0, s.A)(en, (0, pe.dQ)(Pn));
            if (Un)
              return Lt && (0, w.fy)(Pn)
                ? !0
                : (0, J.g)(Pn) && (0, pe.dQ)(Pn) === Un;
            if (
              (yt || (Cn = Cn && !(0, k.A)(Pn) && !(0, ne.U)(Pn)),
              ot || (Cn = Cn && !(0, w.v3)(Pn)),
              lt || (Cn = Cn && !(0, w.oy)(Pn)),
              Ge || (Cn = Cn && !(0, J.g)(Pn)),
              jt || (Cn = Cn && !(0, ee.P)(Pn)),
              on || (Cn = Cn && !(0, w.hh)(Pn)),
              on && (0, w.hh)(Pn) && (Cn = Cn && !(0, w.oy)(Pn)),
              cn)
            ) {
              const Mn = (0, Zt.ZT)(Je);
              ((0, w.hh)(Pn) && on) || (Cn = Cn && (0, pe.nO)(Pn, Mn));
            }
            return Cn;
          };
        }
        _(mt, "getMemberFilterFunction");
        function Xt(Je, Bt) {
          var Lt;
          const {
              includeCurrentTeam: rt,
              includeExternal: yt,
              onlyExternal: ot,
              onlyCurrentOrg: lt,
              onlyAvailableToCurrentOrg: Ge,
              onlyMemberOnCurrentOrg: jt,
            } = Bt ?? {},
            on = (0, Zt.Kc)(Je),
            cn = (0, ln.WR)(Je),
            Wt = (0, jn.nv)(Je, cn),
            en =
              (Wt == null || (Lt = Wt.enterprise_user) === null || Lt === void 0
                ? void 0
                : Lt.teams) || [];
          return (Un) =>
            !(
              (!rt && Un.id === (0, Zt.ZT)(Je)) ||
              (ot && !(0, le.z)(Je, Un)) ||
              (!yt && !ot && !Ge && (0, le.z)(Je, Un)) ||
              (lt === !0 && Un.id !== on && (0, H.Ss)(Un) !== on) ||
              (Ge === !0 &&
                Un.id !== on &&
                (0, H.Ss)(Un) !== on &&
                !(0, le.z)(Je, Un)) ||
              (jt === !0 && !en.includes(Un.id))
            );
        }
        _(Xt, "getTeamFilterFunction");
        function _n(Je, Bt) {
          const {
            onlyVisibleMpims: Lt,
            onlyExternallyShared: rt,
            includeExternallyShared: yt,
            onlyFromTeamId: ot,
          } = Bt ?? {};
          return (lt) => {
            let Ge = !0;
            if (
              (Lt && (Ge = Ge && (0, ae.w6)(Je, lt)),
              rt && (Ge = Ge && (0, fe.ju)(lt)),
              yt === !1 && (Ge = Ge && !(0, fe.ju)(lt)),
              ot)
            ) {
              var jt;
              Ge =
                Ge &&
                (((jt = (0, ve.A)(Je, lt)) === null || jt === void 0
                  ? void 0
                  : jt.includes(ot)) ||
                  !1);
            }
            return Ge;
          };
        }
        _(_n, "getMpimFilterFunction");
        function mn(Je, Bt) {
          const {
            onlyExternallyShared: Lt,
            includeExternallyShared: rt,
            onlyFromTeamId: yt,
            onlyVisibleIms: ot,
          } = Bt ?? {};
          return (lt) => {
            let Ge = !0;
            if (
              (ot && (Ge = Ge && (0, ae.PE)(Je, lt)),
              Lt && (Ge = Ge && (0, fe.ju)(lt)),
              rt || (Ge = Ge && !(0, fe.ju)(lt)),
              yt)
            ) {
              var jt;
              Ge =
                Ge &&
                (((jt = (0, ve.A)(Je, lt)) === null || jt === void 0
                  ? void 0
                  : jt.includes(yt)) ||
                  !1);
            }
            return Ge;
          };
        }
        _(mn, "getImFilterFunction");
        function Fn(Je, Bt) {
          const {
            includeDeleted: Lt,
            includeFromAnotherTeam: rt,
            onlyFromExternalWorkspaceId: yt,
          } = Bt ?? {};
          return (ot) => {
            let lt = !0;
            return (
              rt || (lt = lt && !(0, Ft.dk)(Je, ot.id)),
              Lt || (lt = lt && (0, Re.V1)(ot)),
              yt && (lt = lt && (0, Re.$Q)(ot) === yt),
              lt
            );
          };
        }
        _(Fn, "getUserGroupFilterFunction");
        function Kn(Je, Bt) {
          const {
              onlyCanvases: Lt = !1,
              onlyLists: rt = !1,
              onlyWriteable: yt = !1,
              onlyChannelCanvases: ot = !1,
              onlyTemplateCanvases: lt = !1,
              onlySlackNative: Ge = !1,
              includeChannelCanvases: jt = !1,
              excludeTemplateCanvases: on = !1,
            } = Bt ?? {},
            cn = (0, ke.hq)(Je),
            Wt = (0, Zt.Kc)(Je),
            en = (0, R._J)(Je, Wt),
            Un = en && !(0, H.qR)(en);
          return (Pn) => {
            let Cn = !0;
            const Mn = ((0, N.wL)(Pn) && !Un) || (cn && jt && (0, N.aD)(Pn)),
              ds = (0, N.l7)(Pn);
            return Lt && ((Cn = Cn && Mn), (0, N.dE)(Pn) && on)
              ? !1
              : (cn &&
                  (ot || Un) &&
                  (Cn = Cn && !(0, N.wL)(Pn) && (0, N.aD)(Pn)),
                lt && (Cn = Cn && (0, N.dE)(Pn)),
                rt && (Cn = Cn && ds),
                yt && (Cn = Cn && (0, N.mW)(Pn)),
                Ge && (Cn = ds || Mn),
                Cn);
          };
        }
        _(Kn, "getFileFilterFunction");
        const dt = (0, gn.Ay)("Get teams via API by query", (Je, Bt, Lt) => {
          let { query: rt, options: yt } = Lt;
          var ot, lt;
          const {
              onlyExternal: Ge,
              includeExternal: jt,
              remoteLimit: on,
            } = (lt =
              (ot = yt.entities) === null || ot === void 0
                ? void 0
                : ot.teams) !== null && lt !== void 0
              ? lt
              : {},
            cn = Bt();
          if ((0, De.DM)(cn)) return m.S.resolve();
          if (Ge || jt)
            return Je((0, C.Is)(rt))
              .timeout(2e3)
              .catch(n.A);
          const Wt = on || yt.limit || 24;
          return Je(
            (0, gt.vB)({
              query: rt,
              count: Wt,
            })
          )
            .timeout(2e3)
            .catch(n.A);
        });
        dt.meta = {
          name: "createThunk",
          key: "createThunkgetRemoteTeams",
          description: "Get teams via API by query",
        };
        const Y = (0, gn.Ay)("Get files via API by query", (Je, Bt, Lt) => {
          let { query: rt, options: yt } = Lt;
          var ot, lt;
          const {
            onlyCanvases: Ge,
            onlyChannelCanvases: jt,
            onlyTemplateCanvases: on,
            onlyLists: cn,
            excludeTemplateCanvases: Wt,
            bypassCache: en,
          } = (lt =
            (ot = yt.entities) === null || ot === void 0
              ? void 0
              : ot.files) !== null && lt !== void 0
            ? lt
            : {};
          let Un = rt;
          return (
            on
              ? (Un = `type:canvas_template ${rt}`)
              : Ge || jt
              ? (Un = `${
                  Wt ? "type:quip -type:canvas_template" : "type:quip"
                } ${rt}`)
              : cn && (Un = `type:list ${rt}`),
            Je(
              (0, p.yF)({
                query: Un,
                includeShares: !0,
                bypassCache: en,
              })
            )
              .timeout(2e3)
              .catch(n.A)
          );
        });
        Y.meta = {
          name: "createThunk",
          key: "createThunkgetRemoteFiles",
          description: "Get files via API by query",
        };
        function se(Je) {
          const Bt = (0, Ae.A4)(),
            Lt = {},
            rt = [];
          E.cw.forEach((ot) => {
            const lt = (0, Qe.A)({
              tab: ot,
            });
            (0, ct.A)(Je, ot) &&
              lt &&
              !(lt in Lt) &&
              (rt.push({
                id: ot,
                name: lt,
                is_view: !0,
                is_tab_view: !0,
              }),
              (Lt[lt] = lt));
          }),
            E.g5.forEach((ot) => {
              const lt = pt(ot);
              (0, Pt.A)(Je, ot) &&
                lt &&
                !(lt in Lt) &&
                (rt.push({
                  id: ot,
                  name: lt,
                  is_view: !0,
                  is_mva_view: !0,
                }),
                (Lt[lt] = lt));
            }),
            Bt.forEach((ot) => {
              if (
                !(0, Ae.cH)(Je, ot) &&
                !(ot.id === "Pslack-connect" && !(0, g.A)(Je)) &&
                ot.id !== "Pactivity" &&
                !(ot.id === oe.c.Apps && !(0, ge.t)(Je)) &&
                !(ot.id === oe.c.Shortcuts && !(0, Me.Bf)(Je)) &&
                !(ot.id === oe.c.BrowseWorkflowTemplates && !(0, Me.fh)(Je)) &&
                !(
                  ot.id === oe.c.BrowseWorkflowsManagedByYou && !(0, Me.EH)(Je)
                ) &&
                !(
                  ot.id === oe.c.BrowseYourWorkflowTemplates && !(0, Me.M7)(Je)
                ) &&
                ((0, Ae.l1)(Je, ot) ||
                  (ot.id === "Punreads" &&
                    (0, es.ty)(Je, "enable_unread_view")))
              ) {
                const lt = (0, z.yb)(Je, ot);
                lt &&
                  !(lt in Lt) &&
                  (rt.push({
                    ...ot,
                    name: lt,
                    is_view: !0,
                    is_page_view: !0,
                  }),
                  (Lt[lt] = lt));
              }
            });
          const yt = (0, an.lI)("Vall_threads");
          return (
            yt &&
              (0, es.ty)(Je, "enable_threads_view") &&
              !(0, y.R)(Je) &&
              rt.push(yt),
            rt
          );
        }
        _(se, "getLocalViews");
        function he(Je) {
          return q(Je);
        }
        _(he, "getLocalModals");
        function Le(Je) {
          return (0, Ke.xf)(Je)
            ? [
                {
                  id: Je,
                  score: 0,
                  item: {
                    id: Je,
                    value: Je,
                    isEmail: !0,
                  },
                },
              ]
            : [];
        }
        _(Le, "getLocalEmails");
        function qe(Je, Bt) {
          const Lt = !Bt;
          let rt = Ve.Ml;
          if (Bt) {
            const yt = (0, Yt.OL)(Je, Bt);
            rt = (yt && (0, Ee.f)(Je, yt)) || Ve.Ml;
          }
          return (0, Ot.PL)(Je).flatMap((yt) => {
            if (yt.teams && (rt.length || Lt) && !yt.isWorkspaceAgnostic) {
              const ot = Lt
                ? yt.teams
                : yt.teams.filter((lt) => rt.includes(lt));
              if (ot.length > 1)
                return ot.map((lt) => {
                  const Ge = (0, R._J)(Je, lt),
                    jt = (0, H.F1)(Ge);
                  return {
                    ...yt,
                    name: `${yt.name} ${jt}`,
                    applicableTeamId: lt,
                  };
                });
            }
            return [yt];
          });
        }
        _(qe, "getAppActionsWithEntriesPerApplicableTeam");
        function ht(Je, Bt, Lt) {
          const rt = (0, Yt.OL)(Je, Bt),
            yt = rt ? (0, Ee.f)(Je, rt) || [] : [];
          return (0, xe.A_)(Je, Bt, !!Lt, !0).flatMap((ot) => {
            if (
              ot.teams &&
              yt.length &&
              ot.appName !== "Slack" &&
              !ot.isWorkspaceAgnostic
            ) {
              const lt = ot.teams.filter((Ge) => yt.includes(Ge));
              if (lt.length > 1)
                return lt.map((Ge) => ({
                  ...ot,
                  id: (0, re.Bs)(ot),
                  isSlashCommand: !0,
                  applicableTeamId: Ge,
                }));
            }
            return [
              {
                ...ot,
                id: (0, re.Bs)(ot),
                isSlashCommand: !0,
              },
            ];
          });
        }
        _(ht, "getSlashCommandsListWithEntriesPerApplicableTeam");
        function et(Je, Bt) {
          let Lt =
            arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
          Vn(Bt);
          const rt = {},
            {
              members: yt,
              channels: ot,
              teams: lt,
              userGroups: Ge,
              appActions: jt,
              views: on,
              broadcastKeywords: cn,
              emoji: Wt,
              files: en,
              topEngagedFiles: Un,
              lists: Pn,
              channelSections: Cn,
              emails: Mn,
              modals: ds,
              shortcuts: un,
              workflowTriggers: gs,
              helpArticles: os,
              salesListViews: vs,
              canvasAiSuggestions: us,
            } = Bt.entities;
          if (
            (ot &&
              (ot.includePublic || ot.includePrivate) &&
              (rt.channels = In(Je, Bt)),
            ot && ot.includeMpims && (rt.mpims = (0, Yt.FS)(Je)),
            ot && ot.includeIms && (rt.ims = (0, Yt._B)(Je)),
            yt &&
              (rt.members = yt.onlyFromExternalWorkspaceId
                ? Ve.Ml
                : (0, jn.I_)(Je).filter((ts) => (0, it.zP)(Je, ts.id))),
            lt && (rt.teams = xn(Je, Bt)),
            Ge && (rt.userGroups = (0, Ft.jJ)(Je)),
            jt &&
              (rt.appActions = (0, T.B)(Je)
                ? (0, Ot.PL)(Je)
                : qe(Je, jt.channel)),
            en && (rt.files = (0, Bn.Gn)(Je)),
            (0, hn._Z)(Je, "top_engaged_files_autocomplete") === "on" && Un)
          ) {
            const ts = (0, Zt.ZT)(Je);
            if (ts) {
              const as = (0, Qt.E)({
                teamId: ts,
              }).getStaleWhileRevalidate([]);
              rt.topEngagedFiles = as;
            }
          }
          if (
            (Pn && (rt.lists = (0, ss.C0)(Je)),
            on && (rt.views = se(Je)),
            ds && (rt.modals = he(Je)),
            cn)
          ) {
            var Zn;
            if (cn.includeAll) rt.broadcastKeywords = (0, Ze.A)();
            else if (
              !(
                cn == null ||
                (Zn = cn.currentChannel) === null ||
                Zn === void 0
              ) &&
              Zn.id
            ) {
              var cs;
              rt.broadcastKeywords = (0, Q.A)(
                Je,
                cn == null || (cs = cn.currentChannel) === null || cs === void 0
                  ? void 0
                  : cs.id
              );
            } else rt.broadcastKeywords = [];
          }
          if (
            (Wt && (rt.emoji = (0, Wn.Gt)(Je)),
            Cn && (rt.channelSections = (0, i.A)((0, Rt.jV)(Je))),
            ((un != null && un.slashCommands) ||
              (un != null && un.fakeGlobalActions)) &&
              !(un != null && un.isAnnounceOnly) &&
              (rt.slashCommands = (0, xe.A_)(
                Je,
                un.channel,
                !!un.threadTs,
                !0
              ).map((ts) => ({
                ...ts,
                id: (0, re.Bs)(ts),
                isSlashCommand: !0,
              }))),
            un != null &&
              un.slackGlobalActions &&
              (rt.slackGlobalActions = (0, xe.Yk)(Je, un.channel, un.threadTs)),
            un != null &&
              un.quipShortcutCommands &&
              (rt.quipShortcutCommands = (0, Sn.Aw)(Je, !!Lt)),
            un != null &&
              un.channelActions &&
              (rt.channelActions = (0, Tt.fo)(Je, un.channel)),
            un != null &&
              un.fakeGlobalActions &&
              (rt.fakeGlobalActions = (0, xe.JL)(Je, un.channel, un.threadTs)),
            un != null &&
              un.callActions &&
              (rt.callActions = (0, xe.Uw)(
                Je,
                un.channel,
                un.threadTs,
                un.isAnnounceOnly
              )),
            gs)
          ) {
            let ts = (0, xe.NJ)(Je);
            gs.includeAutomated ||
              (ts = ts.filter((as) => as.type === P.M.Shortcut)),
              gs.includeSalesHome || (ts = ts.filter((as) => !(0, is.U)(as))),
              (rt.workflowTriggers = ts);
          }
          Mn && (rt.emails = Le(Lt));
          const Es = (0, Fe.dL)(Je);
          if (
            (os &&
              Es &&
              (rt.helpArticles = (0, Rn.Fb)(Je, "searcher/fetch_all_articles")),
            vs)
          ) {
            const { objectType: ts, salesforceOrgId: as } = vs,
              Is = (0, Yn.Up)(Je),
              fs = ts
                ? (0, Yn.Zs)(Je, as, ts)
                : (0, d.A)(Object.values((0, Yn.m3)(Je, as)));
            rt.salesListViews = fs.map((As) => Is[As]);
          }
          return us && (rt.canvasAiSuggestions = (0, Vt.rW)(Je)), Jn(), rt;
        }
        _(et, "fetchLocal");
        const Ut = (0, gn.Ay)(
          "Search for local entities within Slack based on options",
          (Je, Bt, Lt) => {
            let {
              query: rt,
              options: yt,
              autoTraceId: ot,
              parentSpanId: lt,
            } = Lt;
            var Ge;
            const jt = Bt(),
              on =
                (Ge = K.LI.get({
                  label: K.gC.Searcher,
                  id: ot,
                })) === null || Ge === void 0
                  ? void 0
                  : Ge.createChildSpan({
                      name: "searcher:fetch_remote",
                      additionalSpanOptions: {
                        parentSpanId: lt,
                      },
                    }),
              cn = [],
              Wt = [],
              {
                channels: en,
                files: Un,
                members: Pn,
                teams: Cn,
                userGroups: Mn,
                appActions: ds,
                emoji: un,
                helpArticles: gs,
                workflowTriggers: os,
                salesListViews: vs,
              } = yt.entities;
            if (Pn) {
              const sn = Je(
                We({
                  query: rt,
                  options: yt,
                })
              );
              Pn.runaway ? Wt.push(sn) : cn.push(sn);
            }
            if (en) {
              const sn = Je(
                Nt({
                  query: rt,
                  options: yt,
                })
              );
              en.runaway ? Wt.push(sn) : cn.push(sn);
            }
            if (un) {
              const sn = Je(
                At({
                  query: rt,
                  options: yt,
                })
              );
              un.runaway ? Wt.push(sn) : cn.push(sn);
            }
            if (Un && ((0, He.A)(rt) || rt.length > 3)) {
              const sn = (0, tn.G)(Bt());
              if (!sn.contains(rt) && !sn.isRequestInFlight()) {
                sn.add(rt), sn.setRequestInFlight();
                const Zn = Je(
                  Y({
                    query: rt,
                    options: yt,
                  })
                );
                Un.runaway ? Wt.push(Zn) : cn.push(Zn);
              }
            }
            if (Mn) {
              const sn = Je(
                te({
                  query: rt,
                  options: yt,
                })
              );
              Mn.runaway ? Wt.push(sn) : cn.push(sn);
            }
            if (
              Cn &&
              ((0, L.k)(jt) || Cn.onlyExternal || Cn.includeExternal) &&
              !Cn.onlyLocal
            ) {
              const sn = Je(
                dt({
                  query: rt,
                  options: yt,
                })
              );
              Cn.runaway ? Wt.push(sn) : cn.push(sn);
            }
            if (os) {
              const sn = (0, Ht.X)(jt);
              if (!sn.contains(rt) && !sn.isRequestInFlight()) {
                sn.add(rt), sn.setRequestInFlight();
                const Zn = Je(
                  _e({
                    query: rt,
                    includeAutomatedTriggers: os.includeAutomated,
                  })
                );
                Zn && (os.runaway ? Wt.push(Zn) : cn.push(Zn));
              }
            }
            if ((0, Te.e)(jt) && ds) {
              const sn = Je((0, fn.G)())
                .timeout(2e3)
                .catch(n.A);
              ds.runaway ? Wt.push(sn) : cn.push(sn);
            }
            const us = (0, Fe.dL)(jt);
            if (
              (gs && us && (0, Rn.Fb)(jt, "searcher/fetch_all_articles"),
              (0, f.u)(rt) && vs)
            ) {
              const { objectType: sn, salesforceOrgId: Zn } = vs;
              cn.push(
                Je(
                  (0, Qn.b)({
                    query: rt,
                    objectType: sn,
                    salesforceOrgId: Zn,
                  })
                )
              );
            }
            return m.S.all(cn).then((sn) => {
              const Zn = Bt(),
                cs = et(Zn, yt, rt);
              if (
                ((cs.remoteIds = $t(sn)), Pn && Pn.onlyFromExternalWorkspaceId)
              ) {
                var Es, ts;
                cs.members =
                  (ts =
                    (Es = sn.find((Is) => !!Is.members)) === null ||
                    Es === void 0
                      ? void 0
                      : Es.members) !== null && ts !== void 0
                    ? ts
                    : Ve.Ml;
              }
              const as = (0, o.A)((0, i.A)(cs), "length");
              return Wt.length && !as
                ? m.S.all(Wt).then(() => et(Bt(), yt))
                : (on == null || on.close(), cs);
            });
          }
        );
        Ut.meta = {
          name: "createThunk",
          key: "createThunkfetchRemote",
          description:
            "Search for local entities within Slack based on options",
        };
        function $t(Je) {
          const Bt = {};
          return (
            Je.forEach((Lt) => {
              Lt &&
                (Lt.appActions &&
                  (Bt.appActions = new Set(Lt.appActions.map((rt) => rt.id))),
                Lt.channels &&
                  (Bt.channels = new Set(Lt.channels.map((rt) => rt.id))),
                Lt.emoji && (Bt.emoji = new Set(Lt.emoji.map((rt) => rt.name))),
                Lt.files && (Bt.files = new Set(Lt.files.map((rt) => rt.id))),
                Lt.members &&
                  (Bt.members = new Set(Lt.members.map((rt) => rt.id))),
                Lt.userGroups &&
                  (Bt.userGroups = new Set(Lt.userGroups.map((rt) => rt.id))),
                Lt.teams && (Bt.teams = new Set(Lt.teams.map((rt) => rt.id))));
            }),
            Bt
          );
        }
        _($t, "getRemoteIds");
        const En = (0, gn.Ay)(
          "Search for entities within Slack by query",
          (Je, Bt, Lt) => {
            let { query: rt = "", options: yt = Dn } = Lt;
            var ot;
            if (!rt.length && !yt.allowEmptyQuery) return m.S.resolve([]);
            const lt = Bt(),
              Ge = (0, je.Cy)({
                state: lt,
              }),
              jt = (0, v.A)();
            Ge.mark(`modern-searcher-search-mark-${jt}`);
            const on = (0, Kt.O)(rt, {
              shouldTrimEmoji: !1,
              shouldTrimDocument: !1,
            });
            var cn;
            K.LI.start({
              label: K.gC.Searcher,
              id: jt,
              options: {
                teamId:
                  (cn = (0, Zt.ZT)(lt)) !== null && cn !== void 0 ? cn : null,
                tags: bt({
                  query: on,
                  options: yt,
                }),
              },
            });
            const Wt =
                (ot = K.LI.get({
                  label: K.gC.Searcher,
                  id: jt,
                })) === null || ot === void 0
                  ? void 0
                  : ot.createChildSpan({
                      name: "searcher:search",
                    }),
              en = yn(yt, Dn, rt);
            if ((0, a.A)(en)) return m.S.resolve([]);
            if (
              (0, $.x)(lt) !== bn.M9.ONLINE ||
              (!(yt != null && yt.allowEmptyQueryRemoteSearch) &&
                !on.length &&
                (0, zt.A)() &&
                (0, hn._Z)(lt, "searcher_local_empty_string") === "treatment")
            )
              return m.S.resolve(
                wn(lt, {
                  query: on,
                  options: en,
                  autoTraceId: jt,
                  parentSpanId: Wt == null ? void 0 : Wt.getId(),
                })
              );
            const Un = m.S.delay(0)
              .then(() =>
                Je(
                  Ut({
                    query: on,
                    options: en,
                    autoTraceId: jt,
                    parentSpanId: Wt == null ? void 0 : Wt.getId(),
                  })
                )
              )
              .then((Pn) => {
                const Cn = Bt();
                return ft(Cn, {
                  query: on,
                  data: Pn,
                  options: en,
                  autoTraceId: jt,
                  parentSpanId: Wt == null ? void 0 : Wt.getId(),
                });
              });
            if (en.tiered) {
              const Pn = wn(lt, {
                  query: on,
                  options: en,
                  autoTraceId: jt,
                  parentSpanId: Wt == null ? void 0 : Wt.getId(),
                }),
                Cn = Un.finally(() => {
                  Wt == null || Wt.close(),
                    K.LI.stop({
                      label: K.gC.Searcher,
                      id: jt,
                    });
                }),
                Mn = Object.assign(Pn, {
                  promise: Cn,
                });
              return m.S.resolve(Mn).finally(() => {
                Ge.measureAndClear(
                  `modern-searcher-search-mark-${jt}`,
                  "modern-searcher-search-tiered"
                );
              });
            }
            return Un.finally(() => {
              Ge.measureAndClear(
                `modern-searcher-search-mark-${jt}`,
                "modern-searcher-search"
              ),
                Wt == null || Wt.close(),
                K.LI.stop({
                  label: K.gC.Searcher,
                  id: jt,
                });
            });
          }
        );
        En.meta = {
          name: "createThunk",
          key: "createThunksearch",
          description: "Search for entities within Slack by query",
        };
        function wn(Je, Bt) {
          let {
            query: Lt = "",
            options: rt,
            autoTraceId: yt,
            parentSpanId: ot,
          } = Bt;
          var lt;
          let Ge = yt;
          if (!Ge) {
            Ge = (0, v.A)();
            var jt;
            K.LI.start({
              label: K.gC.Searcher,
              id: Ge,
              options: {
                teamId:
                  (jt = (0, Zt.ZT)(Je)) !== null && jt !== void 0 ? jt : null,
                tags: bt({
                  query: Lt,
                  options: rt,
                }),
              },
            });
          }
          const on =
            (lt = K.LI.get({
              label: K.gC.Searcher,
              id: Ge,
            })) === null || lt === void 0
              ? void 0
              : lt.createChildSpan({
                  name: "searcher:search_local",
                  additionalSpanOptions: {
                    parentSpanId: ot,
                  },
                });
          if (!Lt.length && !rt.allowEmptyQuery) return [];
          const cn = yn(rt, Dn, Lt);
          if ((0, a.A)(cn)) return [];
          const Wt = (0, Kt.O)(Lt, {
              shouldTrimEmoji: !1,
            }),
            en = et(Je, cn),
            Un = ft(Je, {
              query: Wt,
              data: en,
              options: cn,
              autoTraceId: Ge,
              parentSpanId: on == null ? void 0 : on.getId(),
            });
          return on == null || on.close(), Un;
        }
        _(wn, "searchLocal");
        const $n = 15,
          j = _((Je) => {
            let { clogger: Bt, data: Lt } = Je;
            const {
                source: rt,
                query: yt,
                results: ot,
                selectedItemId: lt,
                displayedItemIds: Ge,
                openMethod: jt,
              } = Lt,
              on = Ge ? Ge.length : ot.length,
              cn =
                Ge && lt
                  ? Ge.indexOf(lt)
                  : ot.findIndex((os) => os.item.id === lt);
            if (cn < 0) return;
            const Wt = ot.find((os) => os.item.id === lt);
            if (!Wt) return;
            const en = Wt.type || "other",
              Un = (0, Kt.O)(yt),
              Pn = Wt.source || "local";
            let Cn;
            Wt.type === "mpim"
              ? (Cn = Wt.scoreDetailsByMember)
              : Wt.type === "member" && lt
              ? (Cn = {
                  [lt]: {
                    is_exact_match: Wt.isExactMatch,
                    exact_match_details: Wt.exactMatchDetails,
                    score_details: Wt.scoreDetails,
                  },
                })
              : Wt.type === "emoji" &&
                lt &&
                (Cn = {
                  [lt]: {
                    is_exact_match: Wt.isExactMatch,
                  },
                });
            let Mn = [];
            ot.some((os) => os.featureVector) &&
              (Ge
                ? (Mn = Ge.map((os) => {
                    const vs = ot.find((us) => us.item.id === os);
                    return (vs && vs.featureVector.serialize()) || "";
                  }))
                : (Mn = ot.map((os) => {
                    var vs, us;
                    return os == null ||
                      (vs = os.featureVector) === null ||
                      vs === void 0 ||
                      (us = vs.serialize) === null ||
                      us === void 0
                      ? void 0
                      : us.call(vs);
                  })));
            let un;
            (0, r.A)(yt)
              ? (un = yt.reduce((os, vs) => os + we((0, Kt.O)(vs)), 0))
              : (un = we(Un));
            const gs = {
              source: rt,
              query_length: Un.length ? Un.length : 0,
              query_terms_length: un,
              results_length: on,
              selected_position: cn,
              selected_type: en,
              selected_source: Pn,
              selected_match_details: Cn,
              feature_vector_list: Mn.slice(0, $n),
              open_method: jt,
            };
            Bt.track(ie.EventId.SEARCHER_ACCEPT, gs);
          }, "clogSearcherAccept"),
          ue = _((Je) => {
            let { clogger: Bt, data: Lt } = Je;
            const {
                source: rt,
                query: yt,
                results: ot,
                displayedItemIds: lt,
              } = Lt,
              Ge = lt !== void 0 ? lt.length : ot.length,
              jt = (0, Kt.O)(yt);
            let on;
            (0, r.A)(yt)
              ? (on = yt.reduce((Wt, en) => Wt + we((0, Kt.O)(en)), 0))
              : (on = we(jt));
            const cn = {
              source: rt,
              query_length: jt.length ? jt.length : 0,
              query_terms_length: on,
              results_length: Ge,
            };
            Bt.track(ie.EventId.SEARCHER_REJECT, cn);
          }, "clogSearcherReject");
        function we(Je) {
          return Je ? Je.split(Tn.u).filter((Bt) => Bt.length).length : 0;
        }
        _(we, "getQueryTermsLength");
        function ft(Je, Bt) {
          let {
            query: Lt,
            data: rt,
            options: yt,
            autoTraceId: ot,
            parentSpanId: lt,
          } = Bt;
          var Ge, jt, on, cn, Wt;
          const en =
            (Ge = K.LI.get({
              label: K.gC.Searcher,
              id: ot,
            })) === null || Ge === void 0
              ? void 0
              : Ge.createChildSpan({
                  name: "searcher:process",
                  additionalSpanOptions: {
                    parentSpanId: lt,
                  },
                });
          Vn(yt);
          const Un =
              (0, hn._Z)(Je, "searcher_avoid_exact_member_match") ===
              "treatment",
            Pn = (0, hn._Z)(Je, "top_engaged_files_autocomplete") === "on",
            Cn = (0, hn._Z)(Je, "nerf_email_fuzzy_match") === "treatment",
            Mn = {},
            ds = _((As, Ms) => {
              const Cs = new Map();
              return (
                [...As, ...Ms].forEach((Rs) => {
                  Cs.set(Rs.id, Rs);
                }),
                Array.from(Cs.values())
              );
            }, "mergeAndDeduplicate"),
            un = new Mt.A({
              query: Lt,
              options: {
                ...yt,
                sort: {
                  ...yt.sort,
                  avoidExactMatchForMembers: Un,
                },
                fuzzyEmailSearchForwardOnly: Cn,
              },
            }),
            gs = (0, je.Cy)({
              state: Je,
            });
          gs.mark("modern-searcher-matching-mark");
          const os =
            (jt = K.LI.get({
              label: K.gC.Searcher,
              id: ot,
            })) === null || jt === void 0
              ? void 0
              : jt.createChildSpan({
                  name: "searcher:searcher_match",
                  additionalSpanOptions: {
                    parentSpanId: en == null ? void 0 : en.getId(),
                  },
                });
          rt.channels &&
            (Mn.channels = un.filterChannels(
              Je,
              rt.channels,
              Ne(Je, yt.entities.channels)
            )),
            rt.members &&
              (Mn.members = un.filterMembers(
                Je,
                rt.members,
                mt(Je, yt.entities.members)
              )),
            rt.emails &&
              rt.members &&
              !(
                !(Mn == null || (on = Mn.members) === null || on === void 0) &&
                on.length
              ) &&
              (Mn.emails = rt.emails),
            rt.mpims &&
              (Mn.mpims = un.filterMpims(
                Je,
                rt.mpims,
                _n(Je, yt.entities.channels)
              )),
            rt.ims &&
              (Mn.ims = un.filterIms(Je, rt.ims, mn(Je, yt.entities.channels))),
            rt.userGroups &&
              (Mn.userGroups = un.filterUserGroups(
                Je,
                rt.userGroups,
                Fn(Je, yt.entities.userGroups)
              )),
            rt.teams &&
              (Mn.teams = un.filterTeams(
                Je,
                rt.teams,
                Xt(Je, yt.entities.teams)
              )),
            rt.views && (Mn.views = un.filterViews(Je, rt.views)),
            rt.modals && (Mn.modals = un.filterModals(Je, rt.modals)),
            rt.appActions &&
              (Mn.appActions = un.filterAppActions(Je, rt.appActions)),
            rt.slashCommands &&
              (Mn.slashCommands = un.filterShortcuts(Je, rt.slashCommands, !0)),
            rt.slackGlobalActions &&
              (Mn.slackGlobalActions = un.filterShortcuts(
                Je,
                rt.slackGlobalActions
              )),
            rt.quipShortcutCommands &&
              (Mn.quipShortcutCommands = un.filterShortcuts(
                Je,
                rt.quipShortcutCommands
              )),
            rt.canvasAiSuggestions &&
              (Mn.canvasAiSuggestions = un.filterShortcuts(
                Je,
                rt.canvasAiSuggestions
              )),
            rt.channelActions &&
              (Mn.channelActions = un.filterShortcuts(Je, rt.channelActions)),
            rt.fakeGlobalActions &&
              (Mn.fakeGlobalActions = un.filterShortcuts(
                Je,
                rt.fakeGlobalActions
              )),
            rt.callActions &&
              (Mn.callActions = un.filterShortcuts(Je, rt.callActions)),
            rt.workflowTriggers &&
              (Mn.workflowTriggers = un.filterWorkflowTriggers(
                Je,
                rt.workflowTriggers
              )),
            rt.appActions &&
              !(
                yt == null ||
                (cn = yt.entities) === null ||
                cn === void 0 ||
                (Wt = cn.shortcuts) === null ||
                Wt === void 0
              ) &&
              Wt.apps &&
              (Mn.apps = un.filterApps(
                Je,
                rt.appActions,
                rt.fakeGlobalActions,
                rt.slashCommands
              )),
            rt.broadcastKeywords &&
              (Mn.broadcastKeywords = un.filterBroadcastKeywords(
                Je,
                rt.broadcastKeywords
              )),
            rt.emoji && (Mn.emoji = un.filterEmoji(Je, rt.emoji)),
            rt.channelSections &&
              (Mn.channelSections = un.filterChannelSections(
                Je,
                rt.channelSections,
                (As) => {
                  var Ms, Cs;
                  return !!(
                    !(
                      (Ms = yt.entities.channelSections) === null ||
                      Ms === void 0 ||
                      (Cs = Ms.includeTypes) === null ||
                      Cs === void 0
                    ) && Cs[As.type]
                  );
                }
              )),
            rt.files &&
              (Mn.files = un.filterFiles(
                Je,
                rt.files,
                Kn(Je, yt.entities.files)
              )),
            rt.topEngagedFiles &&
              Pn &&
              (Mn.topEngagedFiles = un.filterFiles(
                Je,
                rt.topEngagedFiles,
                Kn(Je, yt.entities.topEngagedFiles)
              )),
            rt.lists && (Mn.lists = un.filterLists(Je, rt.lists));
          const vs = (0, Fe.dL)(Je);
          rt.helpArticles &&
            vs &&
            (Mn.helpArticles = un.filterHelpArticles(Je, rt.helpArticles)),
            rt.salesListViews &&
              (0, I.hx)(Je) &&
              (Mn.salesListViews = un.filterSalesListViews(
                Je,
                rt.salesListViews
              )),
            gs.measureAndClear(
              "modern-searcher-matching-mark",
              "modern-searcher-matching"
            ),
            os == null || os.close();
          const us = pn(Mn, rt.remoteIds || {});
          let sn;
          Pn && ((sn = us.topEngagedFiles), delete us.topEngagedFiles);
          const Zn = 500,
            cs = 3;
          var Es;
          const ts = Math.min(
            ((Es = yt == null ? void 0 : yt.limit) !== null && Es !== void 0
              ? Es
              : 1) * cs,
            Zn
          );
          let as = (0, d.A)(Object.values(us));
          if (yt.sort && !yt.sort.bypassSorting) {
            var Is;
            let As = !1;
            as.length < ts && (As = !0);
            const Ms = new Jt.A({
                query: Lt,
                options: {
                  modelOnly: As,
                  ...yt.sort,
                },
              }),
              Cs =
                (Is = K.LI.get({
                  label: K.gC.Searcher,
                  id: ot,
                })) === null || Is === void 0
                  ? void 0
                  : Is.createChildSpan({
                      name: "searcher:searcher_sort",
                      additionalSpanOptions: {
                        parentSpanId: en == null ? void 0 : en.getId(),
                      },
                    });
            (as = Ms.sort(Je, us)),
              Cs == null || Cs.close(),
              sn &&
                Pn &&
                (sn = (0, qt.jW)(Je, {
                  query: Lt,
                  list: sn,
                  bonusPoints: Ms.getFrecencyBonusPointsFunction(Je),
                }));
          }
          if (
            (sn && Pn && (as = ds(as, sn)),
            yt.sort && yt.sort.frecency && !yt.sort.bypassSorting)
          ) {
            var fs;
            const As =
              (fs = K.LI.get({
                label: K.gC.Searcher,
                id: ot,
              })) === null || fs === void 0
                ? void 0
                : fs.createChildSpan({
                    name: "searcher:sorter_sort",
                    additionalSpanOptions: {
                      parentSpanId: en == null ? void 0 : en.getId(),
                    },
                  });
            (as = new dn.A({
              query: Lt,
              options: {
                ...yt.sort,
              },
              teamId: (0, Zt.ZT)(Je),
              enterpriseId:
                (0, L.k)(Je) && (0, Zt.jV)(Je) ? (0, Zt.jV)(Je) : void 0,
            }).sort(Je, as.slice(0, ts))),
              As == null || As.close();
          }
          return (
            yt.limit && (as = (0, c.A)(as, yt.limit)),
            yt.returnMetadata || (as = as.map((As) => As.item)),
            Jn(),
            as || []
          );
        }
        _(ft, "processFetchedEntities");
        function pn(Je, Bt) {
          return (0, u.A)(Je, (Lt, rt) => {
            const yt = An(rt),
              ot = Bt[rt];
            let lt = !1;
            return (
              rt === "topEngagedFiles" && (lt = !0),
              Lt.map((Ge) => {
                const jt = ot && ot.has(Ge.item.id) ? "remote" : "local";
                return {
                  ...Ge,
                  type: yt,
                  source: jt,
                  isTopEngagedFile: lt,
                };
              })
            );
          });
        }
        _(pn, "addResultMetadata");
        function An(Je) {
          switch (Je) {
            case "channels":
              return "channel";
            case "members":
              return "member";
            case "mpims":
              return "mpim";
            case "ims":
              return "ims";
            case "userGroups":
              return "userGroup";
            case "teams":
              return "team";
            case "views":
              return "view";
            case "modals":
              return "modal";
            case "appActions":
              return "appAction";
            case "apps":
              return "app";
            case "broadcastKeywords":
              return "broadcastKeyword";
            case "emoji":
              return "emoji";
            case "files":
              return "file";
            case "topEngagedFiles":
              return "file";
            case "slashCommands":
              return "slashCommand";
            case "quipShortcutCommands":
              return "quipShortcutCommand";
            case "slackGlobalActions":
              return "globalAction";
            case "channelActions":
              return "channelAction";
            case "fakeGlobalActions":
              return "appAction";
            case "callActions":
              return "channelAction";
            case "workflowTriggers":
              return "workflowTrigger";
            case "helpArticles":
              return "helpArticles";
            case "salesListViews":
              return "salesListViews";
            case "canvasAiSuggestion":
              return "canvasAiSuggestions";
            default:
              return "other";
          }
        }
        _(An, "getTypeFromGroup");
        function yn(Je, Bt, Lt) {
          const {
              members: rt,
              channels: yt,
              userGroups: ot,
              broadcastKeywords: lt,
              emoji: Ge,
            } = Je.entities,
            { members: jt, channels: on, userGroups: cn } = Bt.entities;
          let Wt = {},
            en = "";
          Lt != null &&
            Lt.length &&
            (en = Array.isArray(Lt) ? "@" : Lt.charAt(0)),
            (en === "@" || en === "\uFF20") && (rt || ot || lt)
              ? (rt && (Wt.members = xt(rt, jt)),
                ot && (Wt.userGroups = xt(ot, cn)),
                lt && (Wt.broadcastKeywords = xt(lt, {})))
              : (en === "#" || en === "\uFF03") && yt
              ? (Wt.channels = xt(yt, on))
              : en === ":" && Ge
              ? (Wt.emoji = xt(Ge, {}))
              : (Wt = Object.keys(Je.entities).reduce((Es, ts) => {
                  const as = Je.entities[ts];
                  return as && (Es[ts] = xt(as, Bt.entities[ts])), Es;
                }, {}));
          var Un;
          const Pn = xt(
            (Un = Je == null ? void 0 : Je.sort) !== null && Un !== void 0
              ? Un
              : {},
            Bt.sort
          );
          var Cn;
          const Mn = (Cn = Je.limit) !== null && Cn !== void 0 ? Cn : Bt.limit;
          var ds;
          const un =
            (ds = Je.fuzzyLimit) !== null && ds !== void 0 ? ds : Bt.fuzzyLimit;
          var gs;
          const os =
              (gs = Je.fuzzyJumpLimit) !== null && gs !== void 0
                ? gs
                : Bt.fuzzyJumpLimit,
            vs = Je.fuzzyCJK || Bt.fuzzyCJK,
            us = Je.tiered,
            sn = Je.filter,
            Zn = Je.allowEmptyQuery,
            cs = Je.returnMetadata || Bt.returnMetadata;
          return (
            Pn && (Pn.model = Pn.model || (0, rn.In)()),
            {
              entities: Wt,
              sort: Pn,
              limit: Mn,
              tiered: us,
              filter: sn,
              allowEmptyQuery: Zn,
              fuzzyLimit: un,
              fuzzyJumpLimit: os,
              fuzzyCJK: vs,
              returnMetadata: cs,
            }
          );
        }
        _(yn, "getAllOptions");
        function xt(Je, Bt) {
          if (!Bt || Je === !1) return Je;
          const Lt = Je === !0 ? {} : Je,
            rt = Bt === !0 ? {} : Bt;
          return (0, l.A)(Lt, rt);
        }
        _(xt, "mergeOptions");
        function Vn(Je) {
          const {
            members: Bt,
            channels: Lt,
            teams: rt,
            userGroups: yt,
            appActions: ot,
            files: lt,
          } = Je.entities;
          (Bt || Lt || rt || yt || ot || lt) && S.Ay.pauseRefetchIndefinitely();
        }
        _(Vn, "pauseConditionalFetching");
        function Jn() {
          S.Ay.unpauseRefetchImmediately();
        }
        _(Jn, "unpauseConditionalFetching"),
          (0, b.ul)("searcher", {
            search: (Je, Bt) =>
              (0, ze.dispatchForTeamId)(
                Je,
                En({
                  options: Bt,
                })
              ),
            searchLocal: (Je, Bt) => {
              const Lt = (0, ze.getStateByTeamId)(Je);
              return wn(Lt, {
                options: Bt,
              });
            },
          });
      },
      3275490582: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
        });
        var t = e(5824283093),
          n = e(5519146941);
        function s() {
          return (
            (s =
              Object.assign ||
              function (o) {
                for (var a = 1; a < arguments.length; a++) {
                  var r = arguments[a];
                  for (var c in r)
                    Object.prototype.hasOwnProperty.call(r, c) && (o[c] = r[c]);
                }
                return o;
              }),
            s.apply(this, arguments)
          );
        }
        _(s, "_extends");
        function i(o) {
          const a = o,
            r = t.forwardRef((c, u) =>
              t.createElement(n.A.Consumer, null, (l) => {
                let {
                  view: m,
                  closeView: v,
                  windowId: E,
                  container: T,
                  isMainWindow: g,
                  isChildWindow: I,
                  shouldUseNavigate: f,
                  activeTab: y,
                  forceTabWhenNavigating: M,
                  getSiblingView: p,
                  getPrimaryView: O,
                  getSecondaryView: C,
                  getViewSet: h,
                } = l;
                return t.createElement(
                  a,
                  s(
                    {
                      ref: u,
                    },
                    c,
                    {
                      view: m,
                      closeView: v,
                      windowId: E,
                      container: T,
                      isMainWindow: g,
                      isChildWindow: I,
                      shouldUseNavigate: f,
                      activeTab: y,
                      forceTabWhenNavigating: M,
                      getSiblingView: p,
                      getPrimaryView: O,
                      getSecondaryView: C,
                      getViewSet: h,
                    }
                  )
                );
              })
            );
          return (
            (r.displayName = `withViewContainerContext(${a.displayName})`), r
          );
        }
        _(i, "withViewContainerContext"),
          (i.displayName = "withViewContainerContext");
        const d = i;
      },
      1149563359: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => s,
        });
        var t = e(5824283093),
          n = e(9053431150);
        function s(i, d) {
          const {
            addFocusTransitionListener: o,
            removeFocusTransitionListener: a,
          } = (0, t.useContext)(n.Ay);
          (0, t.useEffect)(
            () => (
              o(i, d),
              () => {
                a(i, d);
              }
            ),
            [o, d, a, i]
          );
        }
        _(s, "useFocusTransitionListener");
      },
      8362292758: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => s,
        });
        var t = e(6122756707),
          n = e(5534420337);
        function s() {
          const { getState: i } = (0, t.Pj)();
          return (0, n.Ay)({
            getState: i,
          });
        }
        _(s, "useLogger");
      },
      5204962244: (W, A, e) => {
        "use strict";
        e.d(A, {
          d: () => n,
        });
        var t = e(5824283093);
        function n(s) {
          const i = (0, t.useRef)();
          return i.current === void 0 && (i.current = s()), i.current;
        }
        _(n, "useRefCreator");
      },
      3107743571: (W, A, e) => {
        "use strict";
        e.d(A, {
          Z: () => n,
        });
        var t = e(5824283093);
        const n = _(function (s) {
          let i =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : 0,
            d =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : [];
          const o = (0, t.useRef)(),
            a = (0, t.useCallback)(() => {
              const r = o.current;
              r && (window.clearTimeout(r), (o.current = void 0));
            }, []);
          return (
            (0, t.useEffect)(
              () => (a(), (o.current = window.setTimeout(s, i)), a),
              [s, a, i].concat(d)
            ),
            a
          );
        }, "useTimeout");
      },
      4003148341: (W, A, e) => {
        "use strict";
        e.d(A, {
          x: () => s,
        });
        var t = e(6122756707),
          n = e(3855029223);
        function s() {
          const { getState: i } = (0, t.Pj)();
          return (0, n.E)({
            getState: i,
          });
        }
        _(s, "useTracer");
      },
      3320454392: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => t,
        });
        function t(n) {
          const s = _(() => {
            window.Cypress || n();
          }, "unloadHandler");
          window.addEventListener("beforeunload", s);
        }
        _(t, "addUnloadHandler");
      },
      9853754481: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ep: () => d,
          n2: () => a,
          Ay: () => c,
        });
        var t = e(6313685253),
          n = e(7299481592);
        const s = window.AudioContext || window.webkitAudioContext,
          i = window.AnalyserNode,
          d = 6;
        function o(u) {
          let l = 1;
          for (; l * 2 < u; ) l *= 2;
          return l;
        }
        _(o, "getPowerof2LessThan");
        function a(u) {
          let m = 0.01;
          for (const E of u) m = Math.max(m, (E - 128) / 128);
          const v = (Math.log(0.01) - Math.log(m)) / Math.log(0.01);
          return Math.min(Math.max(v, 0), 1);
        }
        _(a, "computeStrength");
        function r(u) {
          return (0, t.A)(
            u,
            (l, m) => {
              const v = m.getSettings().sampleRate;
              return v !== void 0 && l !== void 0 ? Math.max(l, v) : v;
            },
            void 0
          );
        }
        _(r, "getMaxTrackSampleRate");
        let c = _(
          class {
            getLevel() {
              var l;
              return (
                (l = this.analyserNode) === null ||
                  l === void 0 ||
                  l.getByteTimeDomainData(this.data),
                a(this.data) / d
              );
            }
            stop() {
              var l;
              if (this.analyserNode) {
                var m;
                (m = this.audioNode) === null ||
                  m === void 0 ||
                  m.disconnect(this.analyserNode);
              }
              delete this.audioNode,
                (this.audioNode = void 0),
                delete this.analyserNode,
                (this.analyserNode = void 0),
                (l = this.audioCtx) === null || l === void 0 || l.close(),
                delete this.audioCtx,
                (this.audioCtx = void 0);
            }
            constructor(l, m) {
              (0, n.M)(m >= 0, "Level poll interval must be positive"),
                (this.audioCtx = new s());
              const v = l.getAudioTracks();
              (0, n.M)(!!v.length, "Need audio tracks to run analyser");
              const T = ((r(v) || 48e3) * m) / 1e3,
                g = Math.max(32, Math.min(32768, o(T)));
              (this.data = new Uint8Array(g)),
                (this.analyserNode = this.audioCtx.createAnalyser()),
                (this.analyserNode.fftSize = g),
                (this.audioNode = this.audioCtx.createMediaStreamSource(l)),
                this.audioNode.connect(this.analyserNode);
            }
          },
          "AudioAnalyser"
        );
      },
      1829947126: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => s,
        });
        var t = e(6267571562);
        class n {
          createPublisher(d) {
            return (this.publishers[d] = new t.G()), this.publishers[d];
          }
          createAllPublisher() {
            return (this.allPublisher = new t.G()), this.allPublisher;
          }
          publish(d, o) {
            const a = this.publishers[d];
            a && a.publish(o);
          }
          publishAll(d, o) {
            var a;
            const r = {
              peerId: d,
              value: o,
            };
            (a = this.allPublisher) === null || a === void 0 || a.publish(r);
          }
          subscribe(d, o) {
            (this.publishers[d] || this.createPublisher(d)).subscribe(o);
          }
          subscribeAll(d) {
            this.createAllPublisher().subscribe(d);
          }
          unsubscribe(d, o) {
            const a = this.publishers[d];
            a && a.unsubscribe(o);
          }
          constructor() {
            this.publishers = {};
          }
        }
        _(n, "PeerPubSub");
        const s = new n();
      },
      9009528296: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => n,
        });
        var t = e(6267571562);
        const n = new t.G();
      },
      5046160032: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => s,
        });
        var t = e(2016742660);
        const n =
          window.navigator && typeof window.navigator.sendBeacon == "function";
        function s(i) {
          let {
              apiUrl: d,
              method: o,
              token: a,
              args: r = {},
              versionTs: c = "",
              versionUid: u = "",
            } = i,
            l = !1;
          const m = (0, t.DI)();
          let v = `${d}${o}?_x_id=${u.substring(0, 8)}-${Date.now() / 1e3}`;
          m !== null && (v += `&fp=${m}`);
          const E = new FormData();
          if (
            (E.append("token", a),
            Object.keys(r).forEach((T) => E.append(T, r[T])),
            n)
          )
            l = navigator.sendBeacon(v, E);
          else {
            const T = new XMLHttpRequest();
            T.addEventListener("load", () => {
              const { readyState: g, status: I, DONE: f } = T;
              g === f && I === 200 && (l = !0);
            }),
              T.open("POST", v, !0),
              T.setRequestHeader("X-Slack-Version-Ts", c),
              T.send(E);
          }
          return l;
        }
        _(s, "beaconApiCall");
      },
      8935621861: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => v,
        });
        var t = e(9706240641),
          n = e(6273911963),
          s = e(9687310625);
        function i(E) {
          return d.apply(this, arguments);
        }
        _(i, "fetchNearestChimeMediaRegion");
        function d() {
          return (
            (d = (0, t.coroutine)(function* (E) {
              const T = new n.A({
                url: E
                  ? "https://nearest-us-gov-media-region.l.chime.aws/"
                  : "https://nearest-media-region.l.chime.aws",
              });
              try {
                const g = yield new s.Ay().q(T);
                return JSON.parse(g).region;
              } catch {
                return "";
              }
            })),
            d.apply(this, arguments)
          );
        }
        _(d, "_fetchNearestChimeMediaRegion");
        var o = e(6422693406),
          a = e(3390261877),
          r = e(3320454392),
          c = e(504058561),
          u = e(322597465),
          l = e(796111729);
        let m = _(
          class so {
            writeRegions(T, g) {
              const I = g ? so.GOV_REGION_STORAGE_KEY : so.REGION_STORAGE_KEY,
                f = {
                  regions: T,
                  timestamp: Date.now(),
                  version: so.VERSION,
                };
              try {
                localStorage.setItem(I, JSON.stringify(f));
              } catch (y) {
                (0, l.Wo)({
                  label: "REGION-PROVIDER",
                }).error(
                  "Could not write chime media regions to localStorage: ",
                  y.message
                );
              }
            }
            readRegions(T) {
              const g = T ? so.GOV_REGION_STORAGE_KEY : so.REGION_STORAGE_KEY,
                I = localStorage.getItem(g);
              if (!I) return null;
              let f = null;
              try {
                f = JSON.parse(I);
              } catch (y) {
                return (
                  (0, l.Wo)({
                    label: "REGION-PROVIDER",
                  }).error(
                    "Could not parse chime media regions from localStorage: ",
                    y.message
                  ),
                  null
                );
              }
              return f.version !== so.VERSION ||
                (this.ttl && Date.now() - f.timestamp > this.ttl)
                ? null
                : f;
            }
            constructor(T) {
              this.ttl = T;
            }
          },
          "ChimeRegionStorage"
        );
        (m.REGION_STORAGE_KEY = "ChimeRegionStorage-chimeRegionCache"),
          (m.GOV_REGION_STORAGE_KEY = "ChimeRegionStorageGov-chimeRegionCache"),
          (m.VERSION = 1);
        let v = _(
          class Ws {
            static getInstance() {
              return Ws.instance || (Ws.instance = new Ws()), Ws.instance;
            }
            getNearestChimeMediaRegion(T) {
              var g = this;
              return (0, t.coroutine)(function* () {
                return (T ? (0, u.H)(T) : !1)
                  ? g.getNearestChimeGovMediaRegion()
                  : g.getNearestChimeCommercialMediaRegion();
              })();
            }
            getNearestChimeCommercialMediaRegion() {
              var T = this;
              return (0, t.coroutine)(function* () {
                if (!T.commercialRegions) {
                  const g = T.storage.readRegions(!1);
                  g && (T.commercialRegions = g.regions);
                }
                return T.commercialRegions
                  ? T.commercialRegions
                  : T.remoteGetNearestChimeMediaRegion(!1);
              })();
            }
            getNearestChimeGovMediaRegion() {
              var T = this;
              return (0, t.coroutine)(function* () {
                if (!T.govRegions) {
                  const g = T.storage.readRegions(!0);
                  g && (T.govRegions = g.regions);
                }
                return T.govRegions
                  ? T.govRegions
                  : T.remoteGetNearestChimeMediaRegion(!0);
              })();
            }
            remoteGetNearestChimeMediaRegion(T) {
              var g = this;
              return (0, t.coroutine)(function* () {
                const I = yield o.S.resolve(i(T));
                return (
                  T ? (g.govRegions = I) : (g.commercialRegions = I),
                  g.storage.writeRegions(I, T),
                  I
                );
              })();
            }
            init() {
              if (this.initialized) return 0;
              this.initialized = !0;
              const T = (0, c.z$)();
              let g = Ws.INITIAL_LOAD_DELAY;
              const I = this.storage.readRegions(T);
              I &&
                (T
                  ? (this.govRegions = I.regions)
                  : (this.commercialRegions = I.regions),
                (g = Math.max(
                  Ws.INITIAL_LOAD_DELAY,
                  Ws.REFRESH_INTERVAL - (Date.now() - I.timestamp)
                )));
              var f = this;
              const y = setTimeout(
                (0, t.coroutine)(function* () {
                  yield f.remoteGetNearestChimeMediaRegion(T);
                  const M = new a.A(Ws.REFRESH_INTERVAL);
                  M.start(
                    (0, t.coroutine)(function* () {
                      yield f.remoteGetNearestChimeMediaRegion(T);
                    })
                  ),
                    (0, r.A)(() => {
                      M.stop();
                    });
                }),
                g
              );
              return (
                (0, r.A)(() => {
                  clearTimeout(y);
                }),
                g
              );
            }
            getRawRegions() {
              return this.commercialRegions;
            }
            clear() {
              (this.commercialRegions = null),
                (this.govRegions = null),
                (this.initialized = !1);
            }
            constructor() {
              (this.commercialRegions = null),
                (this.govRegions = null),
                (this.initialized = !1),
                (this.storage = new m(Ws.REFRESH_INTERVAL));
            }
          },
          "ChimeRegionProvider"
        );
        (v.REFRESH_INTERVAL = 3 * 24 * 60 * 60 * 1e3),
          (v.INITIAL_LOAD_DELAY = 5 * 1e3);
      },
      3390261877: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => t,
        });
        let t = _(
          class {
            start(s) {
              this.stop(), (this.timer = setInterval(s, this.intervalMs));
            }
            stop() {
              this.timer !== null &&
                (clearInterval(this.timer), (this.timer = null));
            }
            constructor(s) {
              (this.intervalMs = s), (this.timer = null);
            }
          },
          "IntervalScheduler"
        );
      },
      6728003438: (W, A, e) => {
        "use strict";
        e.d(A, {
          F4: () => P,
          GC: () => B,
          lP: () => x,
          no: () => h,
        });
        var t = e(9113979368),
          n = e(6533394955),
          s = e(4423055085),
          i = e(8847766420),
          d = e(3346431019),
          o = e(3855029223),
          a = e(2250002584),
          r = e(796111729),
          c = e(3158767748),
          u = e(8802876335),
          l = e(4798756512);
        const m = "RTM-EVENT-METRICS",
          v = 4;
        let E = !1,
          T;
        const g = 50;
        function I() {
          return E
            ? !0
            : (0, d.A)()
            ? (T === void 0 &&
                ((T = (0, c.A)(g)),
                T &&
                  (0, r.Wo)({
                    label: m,
                  }).info(
                    "Metrics collection enabled for the current interval."
                  )),
              T)
            : !1;
        }
        _(I, "shouldSampleForInterval");
        let f = {},
          y = {},
          M = {},
          p = {},
          O = {},
          C = {};
        function h(F) {
          let {
            teamOrEnterpriseId: V,
            rtmEventType: X,
            rtmEventSubtype: q,
            duration: oe,
            msgs: z,
            fromEvtLog: Ae,
          } = F;
          var ae;
          if (!I()) return;
          const de = (0, i.Kc)(
            (ae = (0, n.getStoreOrSharedStoreInstanceByTeamOrEnterpriseId)(
              V
            )) === null || ae === void 0
              ? void 0
              : ae.getState()
          );
          if (!de) return;
          const ve = X === "message" ? `message/${q}` : X;
          Ae &&
            D({
              bucket: O,
              teamOrEnterpriseId: de,
              eventType: ve,
              value: z.length,
            }),
            D({
              bucket: y,
              teamOrEnterpriseId: de,
              eventType: ve,
              value: 1,
            }),
            D({
              bucket: M,
              teamOrEnterpriseId: de,
              eventType: ve,
              value: z.length,
            }),
            D({
              bucket: p,
              teamOrEnterpriseId: de,
              eventType: ve,
              value: oe,
            });
        }
        _(h, "incrementMetrics");
        function D(F) {
          let { bucket: V, teamOrEnterpriseId: X, eventType: q, value: oe } = F;
          var z;
          const Ae = (z = V[X]) !== null && z !== void 0 ? z : {};
          var ae;
          const de = (ae = Ae[q]) !== null && ae !== void 0 ? ae : 0;
          (Ae[q] = de + oe), (V[X] = Ae);
        }
        _(D, "incrementBucket");
        function P(F, V) {
          if ((0, t.A)(M) && (0, t.A)(f)) {
            U();
            return;
          }
          const X = Object.keys({
              ...M,
              ...f,
            }),
            q = setInterval(() => {
              const oe = (0, r.Wo)({
                  label: m,
                }),
                z = X.pop();
              if (!z) {
                oe.info("Completed metrics aggregation", {
                  traceId: F.getTraceId(),
                }),
                  clearInterval(q);
                return;
              }
              oe.info(`Sending metric report for id: ${z}`),
                K({
                  teamOrEnterpriseId: z,
                  clientMetricsTrace: F,
                  performanceTracingTags: V,
                }),
                b({
                  teamOrEnterpriseId: z,
                  clientMetricsTrace: F,
                  performanceTracingTags: V,
                }),
                R(z);
            }, 1e3);
        }
        _(P, "reportRtmMetrics");
        function S(F, V) {
          const X = (0, n.getStateByTeamId)(F);
          return {
            ...V,
            metric_version: v,
            slow_connection_count: (0, u.d4)(X),
          };
        }
        _(S, "getMetricsTraceMetatags");
        function b(F) {
          let {
            teamOrEnterpriseId: V,
            clientMetricsTrace: X,
            performanceTracingTags: q,
          } = F;
          const oe = f[V];
          if (!oe) return;
          const z = (0, o.E)({
              teamOrEnterpriseId: V,
            }),
            Ae = z.createMetricsTrace({
              label: "rtm_incoming",
              tags: S(V, q),
              traceId: X.getTraceId(),
              parentSpanId: X.getRootSpanId(),
            });
          var ae;
          const de = (ae = C[V]) !== null && ae !== void 0 ? ae : {};
          let ve = 0,
            Se = 0;
          Object.entries(oe).forEach((Ee) => {
            let [be, Ce = 0] = Ee;
            var Z;
            const $ = (Z = de[be]) !== null && Z !== void 0 ? Z : 0;
            (ve += Ce),
              (Se += $),
              Ae.store({
                name: "rtm_incoming:event_count",
                value: Ce,
              }).addTags({
                event_type: be,
                eventlog_count: $,
                socket_count: Ce - $,
              });
          }),
            Ae.store({
              name: "rtm_incoming:total_event_count",
              value: ve,
            }),
            Ae.store({
              name: "rtm_incoming:total_event_count:socket",
              value: ve - Se,
            }),
            Ae.store({
              name: "rtm_incoming:total_event_count:eventlog",
              value: Se,
            }),
            (0, r.Wo)({
              label: m,
            }).info(`${V} total incoming event count: ${ve}`),
            z.reportTrace(Ae);
        }
        _(b, "maybeReportRawEventCount");
        function K(F) {
          let {
            teamOrEnterpriseId: V,
            clientMetricsTrace: X,
            performanceTracingTags: q,
          } = F;
          const oe = M[V];
          if (!oe) return;
          const z = (0, o.E)({
              teamOrEnterpriseId: V,
            }),
            Ae = z.createMetricsTrace({
              label: "rtm_dispatch",
              tags: S(V, q),
              traceId: X.getTraceId(),
              parentSpanId: X.getRootSpanId(),
            });
          var ae;
          const de = (ae = y[V]) !== null && ae !== void 0 ? ae : {};
          var ve;
          const Se = (ve = p[V]) !== null && ve !== void 0 ? ve : {};
          var Ee;
          const be = (Ee = O[V]) !== null && Ee !== void 0 ? Ee : {};
          let Ce = 0,
            Z = 0;
          Object.entries(oe).forEach(($) => {
            let [N, L] = $;
            const w = de[N],
              k = Se[N];
            if (w === void 0 || k === void 0) return;
            var J;
            const ee = (J = be[N]) !== null && J !== void 0 ? J : 0;
            (Ce += L),
              (Z += ee),
              Ae.store({
                name: "rtm_dispatch:duration",
                value: k,
              }).addTags({
                event_type: N,
                total_events: L,
                total_batches: w,
                per_event_duration: k / L,
                eventlog_count: ee,
                socket_count: L - ee,
              });
          }),
            Ae.store({
              name: "rtm_dispatch:total_event_count",
              value: Ce,
            }),
            Ae.store({
              name: "rtm_dispatch:total_event_count:socket",
              value: Ce - Z,
            }),
            Ae.store({
              name: "rtm_dispatch:total_event_count:eventlog",
              value: Z,
            }),
            (0, r.Wo)({
              label: m,
            }).info(`${V} total dispatch event count: ${Ce}`),
            z.reportTrace(Ae);
        }
        _(K, "maybeReportEventMetrics");
        function x(F) {
          let { teamId: V, msgs: X } = F;
          if (!I()) return;
          const q = (0, n.getStateByTeamId)(V);
          var oe;
          const z = (oe = (0, i.Kc)(q)) !== null && oe !== void 0 ? oe : V,
            Ae = X.reduce(
              (ae, de) => (
                !de ||
                  !de.type ||
                  (ae[de.type] ? (ae[de.type] += 1) : (ae[de.type] = 1)),
                ae
              ),
              {}
            );
          Object.entries(Ae).forEach((ae) => {
            let [de, ve] = ae;
            D({
              bucket: f,
              teamOrEnterpriseId: z,
              eventType: de,
              value: ve,
            }),
              D({
                bucket: C,
                teamOrEnterpriseId: z,
                eventType: de,
                value: ve,
              });
          });
        }
        _(x, "countRawEventsVolumeFromEventLog");
        function B(F) {
          let { teamId: V, msg: X } = F;
          if (!I() || !X || !X.type) return;
          const q = (0, n.getStateByTeamId)(V);
          var oe;
          const z = (oe = (0, i.Kc)(q)) !== null && oe !== void 0 ? oe : V;
          D({
            bucket: f,
            teamOrEnterpriseId: z,
            eventType: X.type,
            value: 1,
          });
        }
        _(B, "countRawEventVolume");
        function U() {
          (T = void 0),
            (f = {}),
            (M = {}),
            (y = {}),
            (p = {}),
            (O = {}),
            (C = {}),
            (0, r.Wo)({
              label: m,
            }).info("Metrics collection sampling has been reset.");
        }
        _(U, "resetAllCollections");
        function R(F) {
          (T = void 0),
            delete f[F],
            delete M[F],
            delete y[F],
            delete p[F],
            delete O[F],
            delete C[F],
            (0, r.Wo)({
              label: m,
            }).info(`Metrics collection sampling has been reset for id: ${F}`);
        }
        _(R, "resetCollections");
        const G = _(
          () => ({
            rawEventCountBuckets: f,
            eventCountBuckets: M,
            batchCountBuckets: y,
            durationBuckets: p,
            eventLogEventCountBuckets: O,
            eventLogRawEventCountBuckets: C,
          }),
          "debugGetBuckets"
        );
        (0, s.ul)("rtmEventMetrics", {
          debugGetBuckets: G,
          debugToggleSampling: () => {
            (E = !E),
              U(),
              (0, r.Wo)({
                label: m,
              }).info(`Interval sampling: ${E ? "ON" : "OFF"}`);
          },
          debugReportMetrics: () => {
            const F = (0, a.F)(),
              V = F.createMetricsTrace({
                samplingOptions: {
                  sampleType: l.tS.ALWAYS,
                },
              });
            P(V, {}), F.reportTrace(V);
          },
        }),
          Object.defineProperty(
            {
              resetAllCollections: U,
              debugGetBuckets: G,
              reportRtmMetrics: P,
              intervalSampleCache: T,
            },
            "intervalSampleCache",
            {
              get: () => T,
              set: (F) => {
                T = F;
              },
            }
          );
      },
      3945243579: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => a,
        });
        var t = e(5950652755),
          n = e(796111729);
        let s = !1;
        const i = _((c) => {
          var u;
          if (!c) return;
          let l = "";
          const m = c.srcElement || c.target,
            v = n.Wo && (0, n.Wo)();
          if (m && m.nodeName) {
            if (m.nodeName === "SCRIPT") {
              const g = m.src;
              l = `[${
                c.type || "error"
              }] from script at ${g} (failed to load?)`;
            } else if (m.nodeName === "IMG") {
              const g = m.src || m.currentSrc || "unknown";
              v.warn(`<img> fired error with url = ${g}`);
              return;
            }
          }
          if (
            c.message === "ResizeObserver loop limit exceeded" ||
            c.message ===
              "ResizeObserver loop completed with undelivered notifications"
          ) {
            v.warn("ResizeObserver observation target modified in handler");
            return;
          }
          if (
            c.message === "can't access dead object" ||
            c.message === "rambox is not defined"
          )
            return;
          if (
            (c.error && c.error.stack && (l += ` ${c.error.stack}`), c.filename)
          ) {
            const g = c.filename,
              I = c.lineno,
              f = c.colno;
            (l += ` from ${g}`), I && (l += ` @ line ${I}, col ${f}`);
          }
          let E;
          if (
            (c.error && c.error.stack
              ? (E = l)
              : (E = `${c.message || ""} ${l}`),
            E && E.replace && (E = E.replace(/\s+/g, " ").trim()),
            !E || !E.length)
          )
            if (m) {
              const g = m.nodeName || "unknown";
              if (g === "VIDEO") return;
              E = `error event from node of ${g}, no message provided?`;
            } else E = "error event fired, no relevant message or node found";
          E = `\u{1F41E} ${E}`;
          const T =
            ((u = c.error) === null || u === void 0 ? void 0 : u.subtype) ||
            "js_runtime_error";
          d({
            error: c.error || c,
            msg: E,
            subtype: T,
          });
        }, "globalErrorHandler");
        function d(c) {
          const { error: u, msg: l, subtype: m } = c,
            v = {
              subtype: m,
            };
          (0, n.Wo)().error(u, l, v);
        }
        _(d, "logError");
        const a = _((c) => {
            const u = c || window;
            if (s) return;
            u.bootGlobalErrorHandler &&
              (u.removeEventListener("error", u.bootGlobalErrorHandler, !0),
              u.removeEventListener(
                "unhandledrejection",
                u.bootGlobalUnhandledRejectionHandler
              ),
              delete u.bootGlobalErrorHandler,
              delete u.bootGlobalUnhandledRejectionHandler);
            const l = !0,
              m = (0, t.A)(i, 1e4);
            u.addEventListener("error", m, l),
              u.addEventListener("unhandledrejection", (v) => {
                var E;
                const T =
                  v == null || (E = v.detail) === null || E === void 0
                    ? void 0
                    : E.reason;
                T &&
                  T instanceof Error &&
                  (T.constructor !== Error || T.subtype) &&
                  i({
                    error: T,
                    filename: "promise_rejection",
                  });
              }),
              (s = !0);
          }, "registerGlobalErrorHandler"),
          r = {
            globalErrorHandler: i,
          };
        Object.defineProperty(r, "logError", {
          get: () => d,
          set: (c) => {
            d = c;
          },
        }),
          Object.defineProperty(r, "hasRegisteredGlobalErrorHandler", {
            get: () => s,
            set: (c) => {
              s = c;
            },
          });
      },
      7542104324: (W, A, e) => {
        "use strict";
        e.d(A, {
          dj: () => Qe,
          d1: () => ct,
          uH: () => pt,
          bo: () => zt,
          lI: () => is,
          sw: () => jn,
          mt: () => ss,
          rH: () => Ke,
        });
        var t = e(9706240641),
          n = e(6422693406),
          s = e(3398586081),
          i = e(7715417323),
          d = e(796111729),
          o = e(1031947056),
          a = e(6533394955),
          r = e(8847766420),
          c = e(5795074931),
          u = e(8003339552),
          l = e(1658558415),
          m = e(4423055085),
          v = e(8352634987),
          E = e(4096483543),
          T = e(8233775522),
          g = e(6728003438),
          I = e(3078252698),
          f = e(9101533895),
          y = e(7042557635),
          M = e(4446301238),
          p = e(8040098042),
          O = e(7334104107),
          C = e(1407713935),
          h = e(9884588328);
        function D(Et, gt, Ft) {
          return !Et.text ||
            !(
              O.$2.test(Et.text) ||
              O.Oh.test(Et.text) ||
              O.K0.test(Et.text) ||
              O.y7.test(Et.text)
            ) ||
            !(0, f.hh)(Ft(), Et.channel)
            ? n.K.resolve()
            : gt(
                (0, y.L)({
                  channelId: Et.channel,
                })
              ).catch(i.A);
        }
        _(D, "maybeEnsureMemberCount");
        let P = (function () {
          var Et = (0, t.coroutine)(function* (gt, Ft) {
            const nn = Ft(),
              Dn = _(function () {
                for (
                  var Nt = arguments.length, At = new Array(Nt), te = 0;
                  te < Nt;
                  te++
                )
                  At[te] = arguments[te];
                return (0, a.dispatchForTeamId)((0, r.ZT)(nn), ...At);
              }, "dispatch"),
              bt = gt.subtype
                ? `preprocess-rtm-message/ensureModelObsInMessageArePresent for type: ${gt.type} and subtype: ${gt.subtype}`
                : `preprocess-rtm-message/ensureModelObsInMessageArePresent for type: ${gt.type}`,
              xn =
                (0, I.A)(gt.channel) &&
                (0, p.A)(gt.channel) &&
                !(0, f.hh)(nn, gt.channel)
                  ? Dn(
                      (0, M.pX)({
                        ids: [gt.channel],
                        reason: bt,
                        callSource: M.aI.EnsureModelObsArePresent,
                      })
                    )
                  : n.K.resolve();
            yield n.K.all([xn, D(gt, Dn, Ft)]).catch(i.A);
          });
          return _(function (Ft, nn) {
            return Et.apply(this, arguments);
          }, "ensureModelObsInMessageArePresent");
        })();
        function S(Et, gt) {
          return b.apply(this, arguments);
        }
        _(S, "ensureModelObsInMessageAreOpen");
        function b() {
          return (
            (b = (0, t.coroutine)(function* (Et, gt) {
              if (Et.subtype) return;
              const Ft = !1,
                nn = (0, f.OL)(gt(), Et.channel, Ft);
              nn &&
                (0, C.JM)(nn) &&
                ((0, h.nT)(nn) ||
                  (yield (0, a.dispatchForTeamId)(
                    (0, r.ZT)(gt()),
                    (0, M.jP)({
                      channel: nn.id,
                      reason:
                        "preprocess-rtm-message/ensureModelObsInMessageAreOpen",
                    })
                  )));
            })),
            b.apply(this, arguments)
          );
        }
        _(b, "_ensureModelObsInMessageAreOpen");
        function K(Et, gt) {
          return x.apply(this, arguments);
        }
        _(K, "preprocessRtmMessage");
        function x() {
          return (
            (x = (0, t.coroutine)(function* (Et, gt) {
              if (Et.type === "message")
                try {
                  yield P(Et, gt), yield S(Et, gt);
                } catch {}
            })),
            x.apply(this, arguments)
          );
        }
        _(x, "_preprocessRtmMessage"),
          Object.defineProperty(
            {
              maybeEnsureMemberCount: D,
              ensureModelObsInMessageAreOpen: S,
            },
            "ensureModelObsInMessageArePresent",
            {
              get: () => P,
              set: (Et) => {
                P = Et;
              },
            }
          );
        var U = e(5154341017),
          R = e(6890312250),
          G = e(2240330919),
          H = e(5238395322),
          F = e(9190452268),
          V = e(2250002584),
          X = e(3158767748),
          q = e(4798756512),
          oe = e(2791814261);
        const z = 7;
        let Ae;
        const ae = [],
          de = [];
        let ve, Se;
        (0, m.zv)("rtmMetrics", () => ({
          enqueuedEventCounts: {
            allTeams: ae.concat(ve),
            backgroundTeams: de.concat(Se),
          },
        }));
        const Ee = (0, s.A)(() => (0, X.A)(1) || (0, oe.c)());
        function be() {
          let Et =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
          if (!(0, E.A)() || !Ee()) return;
          const gt = Math.floor(Date.now() / 1e3);
          if (Ae !== gt) {
            let Ft = 0;
            if (Ae) {
              const nn = gt - Ae;
              nn > 60
                ? ((ve = void 0),
                  (Se = void 0),
                  (ae.length = 0),
                  (de.length = 0))
                : nn > 1 && (Ft = gt - Ae);
            }
            if (((Ae = gt), ve !== void 0)) {
              ae.push(ve), de.push(Se);
              for (let Dn = 0; Dn < Ft; Dn++) ae.push(0), de.push(0);
              const nn = 15 * 60;
              if (ae.length >= nn) {
                const Dn = (0, F.rh)(),
                  bt = (0, U.A)((0, R.A)(ae), 1),
                  In = (0, G.A)(ae) || 0,
                  xn = (0, H.A)(ae);
                (0, d.Wo)({
                  label: "RTM-ENQUEUE-STATS",
                }).info(
                  `Enqueue times (all teams): ${xn} total, ${In} per second at peak, ${bt} per second average`
                );
                const At = {
                  is_count: !0,
                  allow_zero: !0,
                };
                Dn.store(`rtm_nq_at${z}_avg`, bt, At),
                  Dn.store(`rtm_nq_at${z}_max`, In, At),
                  Dn.store(`rtm_nq_at${z}_total`, xn, At),
                  (ae.length = 0),
                  (de.length = 0);
              }
            }
            (ve = 0), (Se = 0);
          }
          ve = (ve || 0) + Et;
        }
        _(be, "maybeMeasureEnqueueVelocity");
        let Ce = 0,
          Z = 0,
          $ = Date.now(),
          N = Date.now();
        const L = 5 * 60 * 1e3;
        function w(Et) {
          const gt = Date.now();
          (Ce = Math.max(Ce, Et.length)),
            $ + L < gt &&
              ((0, F.rh)().count("rtm_queue_length_max", Ce),
              (Ce = 0),
              ($ = gt));
        }
        _(w, "maybeMeasureMaxQueueLength");
        function k(Et) {
          const Ft = Et[0]._enqueuedAt,
            nn = Date.now(),
            Dn = Ft && nn - Ft;
          if (((Z = Dn ? Math.max(Z, Dn) : Z), N + L < nn)) {
            const bt = (0, V.F)(),
              In = bt.createMetricsTrace({
                label: "rtm_queue",
              });
            In.store({
              name: "rtm_queue_delay_max",
              value: Z,
            }),
              bt.reportTrace(In),
              (Z = 0),
              (N = nn);
          }
        }
        _(k, "maybeMeasureMaxQueueDelay");
        function J(Et, gt) {
          const Ft = (0, V.F)(),
            nn = Ft.createMetricsTrace({
              label: "rtm_state_modified",
              samplingOptions: {
                sampleType: q.tS.CALL,
                sampleRate: 0.01,
              },
            }),
            Dn = gt ? `${Et}/${gt}` : Et;
          nn.count({
            name: `rtm_state_modified:${Dn}`,
          }),
            Ft.reportTrace(nn);
        }
        _(J, "countRTMStateModified");
        var ee = e(7578217447),
          ne = e(5071086688),
          pe = e(5470425448),
          Me = e(4761125736),
          ke = e(2681892953),
          ge = e(8634352961),
          fe = e(1369898444);
        const re = "RTM",
          le = 100;
        let Re = {};
        const ye = _(function () {
            let Et =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : "",
              gt =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : "";
            return Re[`${Et}${gt ? `_${gt}` : ""}`] || 1;
          }, "getCurrentMaxBatchSize"),
          Te = _(function () {
            let Et =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : "",
              gt =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : "",
              Ft =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : 1;
            Re[`${Et}${gt ? `_${gt}` : ""}`] = Ft;
          }, "setCurrentMaxBatchSize");
        let De = !1;
        const Ue = {},
          Ke = _((Et) => {
            De = Et;
          }, "setIsActiveHuddle"),
          Ze = _((Et) => {
            let { teamOrEnterpriseId: gt, msg: Ft } = Et;
            Ue[gt] || (Ue[gt] = []), Ue[gt].push(Ft);
          }, "queueUntilHuddleEnds"),
          Q = _((Et) => {
            const gt = Ue[Et];
            (Ue[Et] = []), gt.length && is(Et, gt);
          }, "drainHuddleQueue"),
          ie = 16;
        let Ve = {},
          xe = {},
          je = {},
          Fe = {};
        function He(Et) {
          var gt;
          return (gt = xe[Et]) !== null && gt !== void 0 ? gt : Ve[Et];
        }
        _(He, "getHandler");
        function Oe(Et) {
          return Et.__isShared;
        }
        _(Oe, "isSharedHandler");
        function Ye(Et) {
          return Et.teamOrEnterpriseId;
        }
        _(Ye, "getTeamOrEnterpriseId");
        function at(Et) {
          let { messages: gt, teamOrEnterpriseId: Ft } = Et;
          if (gt.msgs.length === 0) return;
          const nn = He(gt.rtmEventType);
          if (nn)
            return {
              handler: nn,
              messages: gt,
              teamOrEnterpriseId: Ft,
            };
        }
        _(at, "getRoutedHandler");
        function _t(Et, gt) {
          if (je[Et]) {
            const nn =
              isJasmine() || isJest()
                ? `addRtmErrorHandler: duplicate call to add a handler for ${Et}; this is probably caused by using inject-loader/import mocking. If so, \`import { test as rtmTest } from '@slack/infra/rtm/rtm'; mockProperty(rtmTest, 'handlers', {});\` to work around it.`
                : `addRtmErrorHandler: a handler is already registered for ${Et}`;
            throw new Error(nn);
          }
          je[Et] = gt;
        }
        _(_t, "addRtmErrorHandler");
        function pt(Et, gt) {
          Pt({
            functionName: "addSharedRtmHandler",
            handlersName: "sharedHandlers",
            rtmEventType: Et,
          });
          const Ft = Object.assign(gt, {
            __isShared: !0,
          });
          xe[Et] = Ft;
        }
        _(pt, "addSharedRtmHandler");
        function Qe(Et, gt) {
          Pt({
            functionName: "addBatchRtmHandler",
            handlersName: "handlers",
            rtmEventType: Et,
          }),
            (Ve[Et] = gt);
        }
        _(Qe, "addBatchRtmHandler");
        function ct(Et, gt) {
          Qe(Et, (Ft, nn, Dn) => {
            for (const bt of Ft) gt(bt, nn, Dn);
          });
        }
        _(ct, "addRtmHandler");
        function Pt(Et) {
          let { functionName: gt, handlersName: Ft, rtmEventType: nn } = Et;
          if (!Ve[nn] && !xe[nn]) return;
          const bt =
            (0, u.A)() || (0, l.A)()
              ? `${gt}: duplicate call to add a handler for ${nn}; this is probably caused by using inject-loader/import mocking. If so, \`import { test as rtmTest } from '@slack/infra/rtm/rtm'; mockProperty(rtmTest, '${Ft}', {});\` to work around it.`
              : `${gt}: a handler is already registered for ${nn}`;
          throw new Error(bt);
        }
        _(Pt, "throwIfHandlerRegistered");
        function zt(Et) {
          return !!Ve[Et];
        }
        _(zt, "doesHandlerExist");
        function an() {
          return Ve;
        }
        _(an, "debugGetHandlers");
        function Qt() {
          return Fe;
        }
        _(Qt, "debugGetPendingMessages");
        const tn = (0, s.A)((Et) => {
          var gt;
          if (!(0, fe.M)()) return !1;
          const Ft =
            (gt = (0, a.getStoreInstanceByTeamId)(Et)) === null || gt === void 0
              ? void 0
              : gt.getState();
          return Ft && (0, Me._Z)(Ft, "profile_rtm") === "on";
        });
        let Ht = null,
          Kt = {},
          qt = null;
        function Tn() {
          (Kt = {}),
            (Ht = new Profiler({
              maxBufferSize: 1e4,
              sampleInterval: 0,
            })),
            Ht.addEventListener(
              "samplebufferfull",
              _(function () {
                const gt = this.sampleInterval,
                  Ft = Kt;
                this.stop().then((nn) => {
                  const Dn = performance.timeOrigin;
                  for (const [bt, In] of Object.entries(Ft)) {
                    if (!In.length) continue;
                    const xn = new Date(Dn + In[0].start),
                      Nt = new Date(Dn + In[In.length - 1].end);
                    (0, ke.lM)("rtm", bt, (0, fe.W)(nn, In), {
                      from: xn,
                      until: Nt,
                      sample_interval: gt,
                    });
                  }
                }),
                  Tn();
              }, "samplebufferfull")
            );
        }
        _(Tn, "startProfiling");
        let Mt = !1;
        function Jt(Et) {
          try {
            if (Mt || !tn(Et)) return;
            Ht || Tn(), (qt = performance.now());
          } catch (gt) {
            (Mt = !0),
              (0, d.Ay)({
                label: re,
                teamOrEnterpriseId: Et,
              }).warn("Unable to begin profiled section", gt);
          }
        }
        _(Jt, "beginProfiledSection");
        function dn(Et) {
          !Ht ||
            qt === null ||
            (Et in Kt || (Kt[Et] = []),
            Kt[Et].push({
              start: qt,
              end: performance.now(),
            }),
            (qt = null));
        }
        _(dn, "endProfiledSection");
        function rn(Et) {
          const {
              rtmEventType: gt,
              rtmEventSubtype: Ft,
              msgs: nn,
              fromEvtLog: Dn,
            } = Et.messages,
            bt = Ye(Et),
            In = (0, d.Ay)({
              label: re,
              teamOrEnterpriseId: bt,
            });
          Jt(bt);
          const xn = performance.now();
          try {
            v.Ay.pauseRefetchIndefinitely();
            const te = Et.handler,
              _e = (0, a.getStoreInstanceByTeamId)(Et.teamOrEnterpriseId),
              Ie = _e == null ? void 0 : _e.getState();
            Oe(te)
              ? te(nn, Et.teamOrEnterpriseId)
              : te(nn, _e.dispatch, _e.getState);
            const Ne = _e == null ? void 0 : _e.getState();
            Ie !== Ne && J(gt, Ft);
          } catch (te) {
            throw (In.error(`Error processing ${gt}: ${te.message}`), te);
          } finally {
            v.Ay.unpauseRefetchImmediately();
          }
          const Nt = performance.now();
          dn(bt);
          const At = Nt - xn;
          try {
            (0, g.no)({
              teamOrEnterpriseId: bt,
              rtmEventType: gt,
              rtmEventSubtype: Ft,
              duration: At,
              msgs: nn,
              fromEvtLog: Dn,
            }),
              ne.A.publish({
                type: pe.lx.RtmMetrics,
                update: At,
              });
          } catch {}
          if (At > ie) {
            let te = `Processed ${nn.length} ${gt}`;
            Ft && (te += `:${Ft}`), (te += " event(s)");
            const _e = [];
            nn.forEach((Ie) => {
              var Ne;
              const We =
                (Ne = Ie) === null || Ne === void 0 ? void 0 : Ne.channel;
              We && _e.push(We);
            }),
              _e.length && (te += ` in channel(s) ${_e.join(",")}`),
              (te += ` over ${At.toFixed(2)}ms`),
              In.info(te);
          }
        }
        _(rn, "dispatchMessages");
        const gn = 50,
          Zt = 100,
          Vt = 0.75,
          Sn = 1.1;
        function ze(Et) {
          return Et > gn;
        }
        _(ze, "shouldDefer");
        function Ot(Et) {
          return fn.apply(this, arguments);
        }
        _(Ot, "preprocessRtmMessagesWithTimeout");
        function fn() {
          return (
            (fn = (0, t.coroutine)(function* (Et) {
              let { msgs: gt, getState: Ft } = Et;
              const nn = {},
                Dn = 3e4,
                bt = n.S.delay(Dn, nn),
                In = n.S.map(gt, (Nt) => K(Nt, Ft).catch(i.A), {
                  concurrency: 1,
                });
              (yield n.S.race([In, bt])) === nn &&
                (0, d.Ay)({
                  getState: Ft,
                }).warn(
                  "Preprocessing messages took too long; continue to process queue"
                );
            })),
            fn.apply(this, arguments)
          );
        }
        _(fn, "_preprocessRtmMessagesWithTimeout");
        function ln(Et) {
          return it.apply(this, arguments);
        }
        _(ln, "routeMessages");
        function it() {
          return (
            (it = (0, t.coroutine)(function* (Et) {
              let { messages: gt, teamOrEnterpriseId: Ft, elapsed: nn } = Et;
              const Dn = at({
                messages: gt,
                teamOrEnterpriseId: Ft,
              });
              return !Dn || Yn(Ft)
                ? nn
                : Tt({
                    routedHandler: Dn,
                    elapsed: nn,
                  });
            })),
            it.apply(this, arguments)
          );
        }
        _(it, "_routeMessages");
        function Tt(Et) {
          return Ct.apply(this, arguments);
        }
        _(Tt, "dispatchMessagesWithPreprocessing");
        function Ct() {
          return (
            (Ct = (0, t.coroutine)(function* (Et) {
              let { routedHandler: gt, elapsed: Ft } = Et;
              const nn = performance.now(),
                Dn = (0, a.getStoreInstanceByTeamId)(gt.teamOrEnterpriseId);
              yield Ot({
                msgs: gt.messages.msgs,
                getState: Dn.getState,
              });
              const bt = performance.now();
              rn(gt);
              let In = Ft;
              return (
                bt - nn > gn && (In = 0), (In += performance.now() - bt), In
              );
            })),
            Ct.apply(this, arguments)
          );
        }
        _(Ct, "_dispatchMessagesWithPreprocessing");
        function Rt(Et) {
          return Yt.apply(this, arguments);
        }
        _(Rt, "handleNextMessageFromQueue");
        function Yt() {
          return (
            (Yt = (0, t.coroutine)(function* (Et) {
              let { queue: gt, teamOrEnterpriseId: Ft, elapsed: nn = 0 } = Et;
              for (
                var Dn;
                gt &&
                gt.length > 0 &&
                !(!((Dn = gt[0]) === null || Dn === void 0) && Dn.type);

              )
                gt.shift();
              if (!gt || !gt.length) return n.S.resolve();
              const bt = (0, d.Ay)({
                teamOrEnterpriseId: Ft,
                label: re,
              });
              try {
                w(gt), k(gt);
              } catch {}
              const In = gt[0].type,
                xn = gt[0].subtype,
                Nt = (0, ee.Wu)(gt[0]);
              let At = ye(In, xn);
              const te = [gt[0]],
                _e = [];
              for (
                let mt = 1;
                mt < gt.length && te.length < At && _e.length < At;
                mt++
              )
                if (gt[mt].type === In && gt[mt].subtype === xn)
                  te.push(gt[mt]);
                else if (ee.Sj.has(gt[mt].type)) _e.push(gt[mt]);
                else break;
              const Ie = te.length;
              Ie > 1 &&
                bt.debug(
                  re,
                  `Batch processing ${Ie} of type ${In}, skipping ${
                    _e.length
                  } interleaved events ${_e.map((mt) => mt.type).join(",")}`
                );
              let Ne = nn;
              try {
                Ne = yield ln({
                  messages: {
                    rtmEventType: In,
                    rtmEventSubtype: xn,
                    msgs: te,
                    fromEvtLog: Nt,
                  },
                  teamOrEnterpriseId: Ft,
                  elapsed: Ne,
                });
              } catch (mt) {
                bt.error(`Error while processing ${Ie} ${In} event(s)`, mt);
              } finally {
                Ie !== te.length &&
                  (bt.error(
                    `Message batch size for type (${In}) changed during handling`
                  ),
                  bt.warn(
                    `Original batch size: ${Ie} Post-handler batch size: ${te.length}`
                  ));
                const mt = Ie + _e.length;
                gt.splice(0, mt, ..._e);
              }
              const We = ze(Ne),
                $e = document.visibilityState === "visible";
              return (
                (At = ye(In, xn)),
                $e &&
                  (We
                    ? At > 1 &&
                      Ne > Zt &&
                      (Te(In, xn, Math.max(1, Math.floor(At * Vt))),
                      bt.debug(
                        re,
                        `Maximum batch size decreased to ${ye(In, xn)}`
                      ))
                    : At < le &&
                      te.length === At &&
                      (Te(In, xn, Math.min(le, Math.ceil(At * Sn))),
                      bt.debug(
                        re,
                        `Maximum batch size increased to ${ye(In, xn)}`
                      ))),
                gt.length
                  ? $e && We
                    ? n.S.delay(gn).then(() => {
                        zn(Ft);
                      })
                    : Rt({
                        queue: gt,
                        teamOrEnterpriseId: Ft,
                        elapsed: Ne,
                      })
                  : n.S.resolve()
              );
            })),
            Yt.apply(this, arguments)
          );
        }
        _(Yt, "_handleNextMessageFromQueue");
        let bn = 0,
          Wn,
          hn = 100;
        function Bn() {
          let Et =
            arguments.length > 0 && arguments[0] !== void 0
              ? arguments[0]
              : (0, d.Wo)();
          if (Wn) return;
          const gt = Date.now() - bn;
          if (gt < hn) {
            const Ft = Math.min(hn - gt, hn),
              nn = (0, E.A)() && !(0, T.ko)((0, a.getStateForClientStore)());
            nn &&
              Et.info(
                re,
                `Setting a timeout of ${Ft} ms to process more rtm events`
              ),
              (Wn = window.setTimeout(() => {
                (Wn = void 0),
                  nn &&
                    Et.info(
                      re,
                      `Waited ${Ft} ms, processing more rtm events now`
                    ),
                  Rn();
              }, Ft));
            return;
          }
          Rn();
        }
        _(Bn, "maybeDrainQueues");
        function Rn() {
          (bn = Date.now()),
            _(() => {
              const gt = Object.keys(Fe);
              for (const Ft of gt) zn(Ft);
            }, "drainQueuesFn")();
        }
        _(Rn, "drainQueues");
        function zn(Et) {
          !Fe[Et] ||
            !Fe[Et].length ||
            Rt({
              queue: Fe[Et],
              teamOrEnterpriseId: Et,
            });
        }
        _(zn, "drainQueue");
        function is(Et, gt) {
          var Ft;
          let nn = 0;
          const Dn = gt.filter((xn) =>
            xn != null && xn.type
              ? De && (0, ge.Zr)(xn)
                ? (Ze({
                    teamOrEnterpriseId: Et,
                    msg: xn,
                  }),
                  !1)
                : ((0, ee.Wu)(xn) || (nn += 1), !0)
              : ((0, d.Ay)({
                  teamOrEnterpriseId: Et,
                  label: re,
                }).warn(
                  "Received attempt to enqueue an invalid message; dropping it",
                  xn
                ),
                !1)
          );
          try {
            be(nn);
          } catch {}
          Fe[Et] = Fe[Et] || [];
          const bt = Fe[Et].length,
            In = Date.now();
          for (const xn of Dn) xn._enqueuedAt = In;
          Fe[Et].push(...Dn),
            !bt && Fe[Et].length > 0 && Bn(),
            !De &&
              !((Ft = Ue[Et]) === null || Ft === void 0) &&
              Ft.length &&
              Q(Et);
        }
        _(is, "enqueueMessages");
        const ss = (0, o.Ay)(
          "Calls the relevant rtm handlers with the given rtm message, skipping the queue and without preprocessing (this is intended for degraded mode usage only)",
          (Et, gt, Ft) => {
            const nn = (0, r.ZT)(gt()),
              Dn = at({
                messages: {
                  rtmEventType: Ft.type,
                  rtmEventSubtype: Ft.subtype,
                  msgs: [Ft],
                  fromEvtLog: (0, ee.Wu)(Ft),
                },
                teamOrEnterpriseId: nn,
              });
            Dn && rn(Dn);
          }
        );
        ss.meta = {
          name: "createThunk",
          key: "createThunkhandleMessageImmediatelyWithoutPreprocessing",
          description:
            "Calls the relevant rtm handlers with the given rtm message, skipping the queue and without preprocessing (this is intended for degraded mode usage only)",
        };
        const jn = (0, o.Ay)(
          "Calls the relevant handler for the given message",
          (Et, gt, Ft) => {
            if (!je[Ft]) {
              if (Ft && Ft.includes && Ft.includes("started_with_org_token")) {
                var nn;
                (0, d.Ay)({
                  getState: gt,
                }).error(
                  new Error(`Unexpected start error: ${Ft}`),
                  JSON.stringify({
                    error: Ft,
                    pathname:
                      window == null ||
                      (nn = window.location) === null ||
                      nn === void 0
                        ? void 0
                        : nn.pathname,
                  }),
                  {
                    subtype: "gs_start_error",
                  }
                );
              } else
                (0, d.Ay)({
                  getState: gt,
                }).error(
                  new Error(`Unexpected start error: ${Ft}`),
                  JSON.stringify({
                    error: Ft,
                  }),
                  {
                    subtype: "gs_start_error",
                  }
                );
              return;
            }
            je[Ft](Ft, Et, gt);
          }
        );
        jn.meta = {
          name: "createThunk",
          key: "createThunkhandleErrorMessage",
          description: "Calls the relevant handler for the given message",
        };
        function Yn(Et) {
          const gt = (0, a.getStateByTeamId)(Et);
          return (0, c.wx)(gt) && !(0, c.$U)(gt);
        }
        _(Yn, "shouldIgnoreRtmStream");
        const Qn = (0, o.Ay)(
          "Fake an RTM event for testing only",
          (Et, gt, Ft) => {
            const nn = (0, r.ZT)(gt()),
              Dn = at({
                messages: {
                  rtmEventType: Ft[0].type,
                  rtmEventSubtype: Ft[0].subtype,
                  msgs: Ft,
                  fromEvtLog: (0, ee.Wu)(Ft[0]),
                },
                teamOrEnterpriseId: nn,
              });
            Dn && rn(Dn);
          }
        );
        Qn.meta = {
          name: "createThunk",
          key: "createThunkhandleMessagesForTest",
          description: "Fake an RTM event for testing only",
        };
        const es = {
          handleNextMessageFromQueue: Rt,
          shouldIgnoreRtmStream: Yn,
          errorHandlers: je,
          handlers: Ve,
          sharedHandlers: xe,
          currentMaxBatchSize: Re,
          drainQueues: Rn,
          drainQueue: zn,
          maybeDrainQueues: Bn,
          queueDrainTimeout: Wn,
          lastQueueDrainTimestamp: bn,
          pendingMessages: Fe,
        };
        Object.defineProperty(es, "handleNextMessageFromQueue", {
          get: () => Rt,
          set: (Et) => {
            Rt = Et;
          },
        }),
          Object.defineProperty(es, "errorHandlers", {
            get: () => je,
            set: (Et) => {
              je = Et;
            },
          }),
          Object.defineProperty(es, "handlers", {
            get: () => Ve,
            set: (Et) => {
              Ve = Et;
            },
          }),
          Object.defineProperty(es, "sharedHandlers", {
            get: () => xe,
            set: (Et) => {
              xe = Et;
            },
          }),
          Object.defineProperty(es, "currentMaxBatchSize", {
            get: () => Re,
            set: (Et) => {
              Re = Et;
            },
          }),
          Object.defineProperty(es, "drainQueues", {
            get: () => Rn,
            set: (Et) => {
              Rn = Et;
            },
          }),
          Object.defineProperty(es, "drainQueue", {
            get: () => zn,
            set: (Et) => {
              zn = Et;
            },
          }),
          Object.defineProperty(es, "maybeDrainQueues", {
            get: () => Bn,
            set: (Et) => {
              Bn = Et;
            },
          }),
          Object.defineProperty(es, "queueDrainTimeout", {
            get: () => Wn,
            set: (Et) => {
              Wn = Et;
            },
          }),
          Object.defineProperty(es, "lastQueueDrainTimestamp", {
            get: () => bn,
            set: (Et) => {
              bn = Et;
            },
          }),
          Object.defineProperty(es, "pendingMessages", {
            get: () => Fe,
            set: (Et) => {
              Fe = Et;
            },
          }),
          (0, m.ul)("rtm", {
            handlers: Ve,
            errorHandlers: je,
            interceptHandler: (Et, gt) => {
              const Ft = Ve[Et];
              Ve[Et] = function () {
                for (
                  var nn = arguments.length, Dn = new Array(nn), bt = 0;
                  bt < nn;
                  bt++
                )
                  Dn[bt] = arguments[bt];
                gt(Ft, ...Dn);
              };
            },
            getPendingMessages: () => Fe,
            globalQueue: {
              drainQueues: Rn,
              drainQueue: zn,
              maybeDrainQueues: Bn,
              getCurrentMaxBatchSize: () => Re,
              setCurrentMaxBatchSize: (Et) => {
                Re = Et;
              },
              setQueueDrainInterval: (Et) => {
                hn = Et;
              },
            },
          });
      },
      5387083734: (W, A, e) => {
        "use strict";
        e.d(A, {
          IE: () => E,
        });
        var t = e(862210999),
          n = e(4518410378),
          s = e(796111729),
          i = e(4473827453),
          d = e.n(i),
          o;
        (function (T) {
          (T.Background = "background"),
            (T.UserVisible = "user-visible"),
            (T.UserBlocking = "user-blocking");
        })(o || (o = {}));
        const a = (0, s.Wo)({
            label: "SCHEDULER",
          }),
          r = "scheduler" in n.J && (0, t.A)(n.J.scheduler.postTask),
          c = 50;
        let u = 0,
          l = null;
        const m = _((T, g) => {
            let { label: I, priority: f, delay: y } = g;
            if (!r) return T();
            u += 1;
            const M = performance.now();
            return n.J.scheduler.postTask(
              () => {
                const p = performance.now(),
                  O = p - M,
                  C = l ? p - l : 0;
                (l = p),
                  O - y > c &&
                    a.debug(
                      `${I} task (${f}) executed with delay of ${Math.round(
                        O
                      )}ms and a configured delay of ${y}ms - time since last task: ${C}ms - Task queue length: ${u}`
                    );
                const D = T();
                return (u -= 1), D;
              },
              {
                priority: f,
                delay: y,
              }
            );
          }, "runWithPriority"),
          v = _(() => {
            if (r) return u;
          }, "getTaskQueueLength"),
          E = _(
            (T, g, I) =>
              m(g, {
                label: T,
                priority: o.Background,
                delay: (I == null ? void 0 : I.delay) || 0,
              }),
            "runWithBackgroundPriority"
          );
      },
      2180140255: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => I,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(1251564078),
          i = e(3202757386),
          d = e(735940183),
          o = e(268083624),
          a = e(1610251172),
          r = e(6084388622),
          c = e(5249175977),
          u = e(9874616273),
          l = e(5057176955),
          m = e(2786906754);
        function v() {
          return (
            (v =
              Object.assign ||
              function (f) {
                for (var y = 1; y < arguments.length; y++) {
                  var M = arguments[y];
                  for (var p in M)
                    Object.prototype.hasOwnProperty.call(M, p) && (f[p] = M[p]);
                }
                return f;
              }),
            v.apply(this, arguments)
          );
        }
        _(v, "_extends");
        const E = new d.Ay("find_team");
        function T(f, y) {
          if ((0, i.A)()) return (0, m.M6)(location.href, "locale", y);
          const M = location.href
            .replace(`${location.protocol}//${location.hostname}`, "")
            .replace(/^\/intl\/[^/]+\//, "/");
          return f === "en-us" ? M : `/intl/${f}${M}`;
        }
        _(T, "getUrlForLocale");
        let g = _(
          class extends t.Component {
            render() {
              const {
                  hideRegionPicker: y,
                  showLogo: M,
                  govSlackTheme: p,
                  joinerRedesignTreatment: O,
                } = this.props,
                C = (0, n.A)(
                  "p-refreshed_page__footer_link p-refreshed_page__footer_link--main",
                  {
                    "p-refreshed_page__footer_link--gov_slack": p,
                  }
                ),
                h = (0, n.A)("full_width", {
                  "p-refreshed_page__full_width_footer": O,
                }),
                D = t.createElement(
                  "footer",
                  {
                    className: "p-refreshed_page__footer",
                  },
                  t.createElement(
                    r.jV,
                    {
                      href: (0, s.v)("/legal"),
                      className: C,
                      autoClogProps: {
                        elementName: "get_started_footer_link_legal",
                        onClick: {
                          enableClogAction: !0,
                        },
                      },
                    },
                    E.rt("Privacy & Terms")
                  ),
                  t.createElement(
                    r.jV,
                    {
                      href: (0, s.v)("/help/requests/new"),
                      className: C,
                      autoClogProps: {
                        elementName: "get_started_footer_link_contact",
                        onClick: {
                          enableClogAction: !0,
                        },
                      },
                    },
                    E.rt("Contact Us")
                  ),
                  !y &&
                    t.createElement(
                      c.Wv,
                      {
                        allowanceX: 0,
                        overlayClassName: "p-refreshed_page__footer_overlay",
                        position: "top",
                        renderPopover: (P) =>
                          t.createElement(
                            c.AM,
                            v(
                              {
                                offsetX: -9,
                                offsetY: -5,
                                modalBodyOpenClassName:
                                  "p-refreshed_page__footer_modal--open",
                                ariaLabel: E.t("Change region"),
                                ariaRole: "dialog",
                                shouldAnchorAtInitialPosition: !0,
                              },
                              P
                            ),
                            t.createElement(
                              "div",
                              {
                                className: "p-refreshed_page__footer_locales",
                              },
                              t.createElement(
                                "div",
                                {
                                  className: "bold margin_bottom_50",
                                },
                                E.rt("Change region")
                              ),
                              t.createElement(
                                "div",
                                {
                                  className: "margin_bottom_100",
                                },
                                E.rt(
                                  "Selecting a different region will change the language and content of Slack.com."
                                )
                              ),
                              t.createElement(
                                "div",
                                {
                                  className: "display_flex",
                                },
                                [
                                  {
                                    title: E.t("Americas"),
                                    locales: [
                                      {
                                        locale: "es-LA",
                                        geocode: "es-la",
                                        name: "Latinoam\xE9rica (Espa\xF1ol)",
                                      },
                                      {
                                        locale: "pt-BR",
                                        geocode: "pt-br",
                                        name: "Brasil (Portugu\xEAs)",
                                      },
                                      {
                                        locale: "en-US",
                                        geocode: "en-us",
                                        name: "United States (English)",
                                      },
                                    ],
                                  },
                                  {
                                    title: E.t("Europe"),
                                    locales: [
                                      {
                                        locale: "de-DE",
                                        geocode: "de-de",
                                        name: "Deutschland (Deutsch)",
                                      },
                                      {
                                        locale: "es-ES",
                                        geocode: "es-es",
                                        name: "Espa\xF1a (Espa\xF1ol)",
                                      },
                                      {
                                        locale: "fr-FR",
                                        geocode: "fr-fr",
                                        name: "France (Fran\xE7ais)",
                                      },
                                      {
                                        locale: "it-IT",
                                        geocode: "it-it",
                                        name: "Italia (italiano)",
                                      },
                                      {
                                        locale: "en-GB",
                                        geocode: "en-gb",
                                        name: "United Kingdom (English)",
                                      },
                                    ],
                                  },
                                  {
                                    title: E.t("Asia Pacific"),
                                    locales: [
                                      {
                                        locale: "zh-CN",
                                        geocode: "zh-cn",
                                        name: "\u7B80\u4F53\u4E2D\u6587",
                                      },
                                      {
                                        locale: "zh-TW",
                                        geocode: "zh-tw",
                                        name: "\u7E41\u9AD4\u4E2D\u6587",
                                      },
                                      {
                                        locale: "en-IN",
                                        geocode: "en-in",
                                        name: "India (English)",
                                      },
                                      {
                                        locale: "ja-JP",
                                        geocode: "ja-jp",
                                        name: "\u65E5\u672C (\u65E5\u672C\u8A9E)",
                                      },
                                      {
                                        locale: "ko-KR",
                                        geocode: "ko-kr",
                                        name: "\uD55C\uAD6D\uC5B4",
                                      },
                                    ],
                                  },
                                ].map((S) => {
                                  let { title: b, locales: K } = S;
                                  return t.createElement(
                                    "div",
                                    {
                                      className:
                                        "margin_right_50 display_flex flex_direction_column",
                                      key: b,
                                    },
                                    t.createElement(
                                      "div",
                                      {
                                        className: "bold margin_bottom_50",
                                      },
                                      b
                                    ),
                                    K.map((x) => {
                                      let {
                                        locale: B,
                                        geocode: U,
                                        name: R,
                                      } = x;
                                      return t.createElement(
                                        r.jV,
                                        {
                                          key: B,
                                          href: T(U, B),
                                          target: "_self",
                                          className:
                                            "p-refreshed_page__footer_link margin_bottom_50",
                                          autoClogProps: {
                                            elementName:
                                              "get_started_footer_link_change_region_locale",
                                            elementValue: B,
                                            onClick: {
                                              enableClogAction: !0,
                                            },
                                          },
                                          onClick: this.onClickLocale({
                                            locale: B,
                                            geocode: U,
                                          }),
                                        },
                                        R
                                      );
                                    })
                                  );
                                })
                              )
                            )
                          ),
                      },
                      t.createElement(
                        "div",
                        null,
                        t.createElement(
                          r.jV,
                          {
                            onClick: this.onClickChangeRegion,
                            href: "#",
                            className: C,
                            autoClogProps: {
                              elementName:
                                "get_started_footer_link_change_region",
                              onClick: {
                                enableClogAction: !0,
                              },
                            },
                          },
                          t.createElement(a.A, {
                            type: "globe",
                            size: "inherit",
                            className: "margin_right_25",
                          }),
                          E.rt("Change region"),
                          t.createElement(a.A, {
                            type: "chevron-medium-down",
                            size: "inherit",
                          })
                        )
                      )
                    )
                );
              return t.createElement(
                "div",
                {
                  className: h,
                },
                t.createElement(
                  "div",
                  {
                    className: (0, n.A)("p-refreshed_page__footer_container", {
                      "p-refreshed_page__footer_container--gov_slack": p,
                    }),
                  },
                  t.createElement(
                    t.Fragment,
                    null,
                    M &&
                      t.createElement(u.A, {
                        width: 80,
                        height: 20,
                        className: "p-app_slack_logo",
                      }),
                    D
                  )
                )
              );
            }
            constructor(y) {
              super(y),
                (this.onClickChangeRegion = (M) => {
                  M.preventDefault();
                }),
                (this.onClickLocale = (M) => {
                  let { locale: p, geocode: O } = M;
                  return () => {
                    const C = (0, l.LL)((0, o.v8)("c") || "") || {};
                    C.geocode = O;
                    const h = (0, l.Zf)(C, {
                      space: "",
                    });
                    (0, o.n0)("i18n_locale", p, 365 * 10, "slack.com"),
                      h && (0, o.n0)("c", h, 365 * 10, "slack.com");
                  };
                }),
                (this.popoverTriggerRef = t.createRef()),
                (this.state = {});
            }
          },
          "RefreshedFooter"
        );
        g.displayName = "RefreshedFooter";
        const I = g;
      },
      2308565927: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => i,
        });
        var t = e(5824283093),
          n = e(5255740490);
        const s = _((d) => {
          let {
            children: o,
            heading: a,
            subHeading: r,
            titleImage: c,
            headingClassName: u,
            subHeadingClassName: l,
            dataQa: m,
            showFullWidthContent: v,
            className: E,
            isSharedWorkspaceInvite: T,
          } = d;
          return t.createElement(
            "div",
            {
              className: (0, n.A)(
                "p-refreshed_page",
                {
                  "p-refreshed_page--workspace": T,
                  full_width: v,
                },
                E
              ),
              "data-qa": m,
            },
            c && c,
            a &&
              t.createElement(
                "h1",
                {
                  className: (0, n.A)("p-refreshed_page__heading", u, {
                    margin_bottom_200: !r,
                    full_width: v,
                    "p-refreshed_page__heading--workspace": T,
                  }),
                },
                a
              ),
            r &&
              t.createElement(
                "div",
                {
                  className: (0, n.A)("p-refreshed_page__sub_heading", l, {
                    full_width: v,
                  }),
                },
                r
              ),
            o
          );
        }, "RefreshedPageContent");
        s.displayName = "RefreshedPageContent";
        const i = s;
      },
      9539184071: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => x,
        });
        var t = e(5824283093),
          n = e(2301861866),
          s = e.n(n),
          i = e(5255740490),
          d = e(6764196364),
          o = e(735940183),
          a = e(8739505998),
          r = e(6176558010),
          c = e(2527471159),
          u = e.n(c),
          l = e(7972463975),
          m = e.n(l),
          v = e(9994038664),
          E = e.n(v),
          T = e(8214116048);
        const g = new o.Ay("refreshed_header"),
          I = {
            elementName: "header_slack_logo",
            onClick: {
              enableClogAction: !0,
            },
          },
          f = {
            elementName: "header_signin",
            onClick: {
              enableClogAction: !0,
            },
          },
          y = {
            elementName: "header_create_account",
            onClick: {
              enableClogAction: !0,
            },
          },
          M = {
            elementName: "header_create_workspace",
            onClick: {
              enableClogAction: !0,
            },
          },
          p = u() && m() ? `${u()}, ${m()} 2x` : void 0,
          C = _((B) => {
            let {
              showSignInLink: U = !1,
              showCreateAccountLink: R = !1,
              showCreateWorkspaceLink: G = !1,
              showHorchataBackground: H = !1,
              confirmedEmailPill: F,
              hideLogo: V = !1,
              isSSBBrowserSignin: X = !1,
              showSfLogo: q = !1,
              isWarningBannerDisplayed: oe = !1,
              govSlackTheme: z = !1,
              isLandingPage: Ae = !1,
              clientTheme: ae,
              joinerRedesignTreatment: de = !1,
            } = B;
            return t.createElement(
              "header",
              {
                className: (0, i.A)("p-refreshed_page__header", {
                  "p-refreshed_page__header--should_wrap": !!F,
                  "p-refreshed_page__header--is_horchata_landing_bg": H,
                  "p-refreshed_page__header--no_logo": !!V,
                  "p-refreshed_page__header--sf_slack_logo": q,
                  "p-refreshed_page__header--display_warning_banner": oe,
                  "p-refreshed_page__header--gov_slack": z,
                  "p-refreshed_page__header--landing": Ae,
                  "p-refreshed_page__full_background": de,
                }),
              },
              t.createElement("div", {
                className: "left-col",
              }),
              t.createElement(
                "div",
                {
                  className: "center-col",
                },
                q &&
                  V &&
                  t.createElement("img", {
                    srcSet: p ?? void 0,
                    src: u(),
                    alt: "",
                  }),
                !V &&
                  t.createElement(
                    a.A,
                    {
                      href: (0, d.A)(),
                      autoClogProps: I,
                      target: "_self",
                    },
                    t.createElement("img", {
                      alt: "Slack",
                      src: z || ae === T.Sx.Dark ? E() : s(),
                      height: "26",
                      title: "Slack",
                    })
                  ),
                F
              ),
              t.createElement(
                "div",
                {
                  className: "right-col",
                },
                U &&
                  t.createElement(
                    "div",
                    {
                      className: "p-refreshed_page__header_sidelink",
                    },
                    g.t("Already have an account?"),
                    t.createElement("br", null),
                    t.createElement(
                      a.A,
                      {
                        href: "/signin",
                        className: "bold",
                        autoClogProps: f,
                        target: "_self",
                      },
                      g.t("Sign in instead")
                    )
                  ),
                R &&
                  t.createElement(
                    "div",
                    {
                      className: "p-refreshed_page__header_sidelink",
                    },
                    g.t("Don\u2019t have an account yet?"),
                    t.createElement("br", null),
                    t.createElement(
                      a.A,
                      {
                        href: `/signup${window.location.search}`,
                        className: "bold",
                        autoClogProps: y,
                        target: "_self",
                      },
                      g.t("Create an account")
                    )
                  ),
                G &&
                  t.createElement(
                    "div",
                    {
                      className: "p-refreshed_page__header_sidelink",
                    },
                    g.t("New to Slack?", {
                      fallbackHash: "2f63cb0ff8e7e3d18574aa36be246a7723cef6fc",
                    }),
                    t.createElement("br", null),
                    t.createElement(
                      a.A,
                      {
                        href: `${X ? "/ssb" : ""}/get-started${
                          window.location.search
                        }#${r.EU.CreateNew}`,
                        className: "bold",
                        autoClogProps: M,
                        target: "_self",
                      },
                      g.t("Create an account")
                    )
                  )
              )
            );
          }, "RefreshedHeader");
        var h = e(2180140255),
          D = e(8178126019),
          P = e(7216810781);
        const S = _((B) => {
          let { inviteDetails: U, children: R } = B;
          return !U || !(0, D.YB)(U)
            ? R
            : t.createElement(
                "div",
                {
                  className:
                    "p-external_workspace_invite_branding_wrapper__container",
                },
                t.createElement(P.z, {
                  invite: U,
                  bottomMargin: !0,
                }),
                t.createElement(
                  "div",
                  {
                    className:
                      "p-external_workspace_invite_branding_wrapper__contents",
                  },
                  R
                )
              );
        }, "ExternalWorkspaceInviteBrandingWrapper");
        S.displayName = "ExternalWorkspaceInviteBrandingWrapper";
        const b = S,
          K = _((B) => {
            let {
              children: U,
              showHorchataBackground: R,
              showSignInLink: G,
              showCreateAccountLink: H,
              showCreateWorkspaceLink: F,
              hideRegionPicker: V,
              clientTheme: X,
              hideFooter: q = !1,
              confirmedEmailPill: oe,
              hideHeader: z = !1,
              isSSBBrowserSignin: Ae = !1,
              showSfLogo: ae = !1,
              isWarningBannerDisplayed: de = !1,
              govSlackTheme: ve = !1,
              isLandingPage: Se = !1,
              joinerRedesignTreatment: Ee = !1,
              inviteDetails: be,
            } = B;
            return t.createElement(
              b,
              {
                inviteDetails: be,
              },
              t.createElement(
                t.Fragment,
                null,
                !z &&
                  t.createElement(C, {
                    showSignInLink: G,
                    showCreateAccountLink: H,
                    showCreateWorkspaceLink: F,
                    showHorchataBackground: R,
                    confirmedEmailPill: oe,
                    isSSBBrowserSignin: Ae,
                    showSfLogo: ae,
                    hideLogo: ae,
                    isWarningBannerDisplayed: de,
                    govSlackTheme: ve,
                    isLandingPage: Se,
                    clientTheme: X,
                    joinerRedesignTreatment: Ee,
                  }),
                ve
                  ? t.createElement(
                      "div",
                      {
                        className:
                          "p-refreshed_page_layout__children--gov_slack",
                      },
                      U
                    )
                  : U,
                !q &&
                  t.createElement(h.A, {
                    hideRegionPicker: V,
                    govSlackTheme: ve,
                    joinerRedesignTreatment: Ee,
                  })
              )
            );
          }, "RefreshedPageLayout");
        K.displayName = "RefreshedPageLayout";
        const x = K;
      },
      6176558010: (W, A, e) => {
        "use strict";
        e.d(A, {
          EU: () => n,
        });
        var t = e(1224315998),
          n;
        (function (a) {
          (a.Start = "/"),
            (a.Find = "/find"),
            (a.Create = "/create"),
            (a.CreateNew = "/createnew"),
            (a.Confirm = "/confirm"),
            (a.Check = "/check"),
            (a.FindAgain = "/find_again"),
            (a.Email = "/email"),
            (a.Error = "/error"),
            (a.ConfirmationCode = "/confirmemail"),
            (a.DomainClaimed = "/domain"),
            (a.Landing = "/landing"),
            (a.ConfirmTrust = "/confirmtrust"),
            (a.IgnoreInvite = "/ignoreinvite"),
            (a.SignIn = "/signin"),
            (a.Workspaces = "/workspaces"),
            (a.SharedInviteLoggedOut = "/sharedinvite"),
            (a.SharedInviteLanding = "/sharedinvitelanding"),
            (a.SelectWorkspaces = "/select"),
            (a.AppleSignIn = "/apple"),
            (a.AddName = "/addname");
        })(n || (n = {}));
        var s;
        (function (a) {
          (a.SharedChannelInviteAlreadyAccepted = "invite_used"),
            (a.SharedChannelInviteInvlidLink = "invalid_link"),
            (a.DirectMessageInviteInactive = "inactive_invite"),
            (a.Generic = "generic");
        })(s || (s = {}));
        const i = {
          [n.Start]: t.UiStep.START_WITH_A_WORKSPACE,
          [n.Create]: t.UiStep.CREATE_NEW_WORKSPACE,
          [n.CreateNew]: t.UiStep.CREATE_NEW_WORKSPACE,
          [n.Find]: t.UiStep.FIND_YOUR_WORKSPACE,
          [n.Check]: t.UiStep.CHECK_YOUR_EMAIL,
          [n.FindAgain]: t.UiStep.FIND_YOUR_WORKSPACE,
          [n.Email]: t.UiStep.ENTER_EMAIL,
          [n.Confirm]: t.UiStep.ENTER_EMAIL,
          [n.Error]: t.UiStep.GET_STARTED_ERROR,
          [n.ConfirmationCode]: t.UiStep.GET_STARTED_CONFIRM_CODE,
          [n.DomainClaimed]: t.UiStep.GET_STARTED_DOMAIN_CLAIMED,
          [n.Landing]: t.UiStep.GET_STARTED_CREATOR_LANDING,
          [n.SignIn]: t.UiStep.GET_STARTED_SIGN_IN,
          [n.Workspaces]: t.UiStep.GET_STARTED_WORKSPACES,
          [n.SharedInviteLoggedOut]: t.UiStep.SHARED_INVITE_LOGGED_OUT,
          [n.SharedInviteLanding]: t.UiStep.SHARED_INVITE_LANDING,
          [n.SelectWorkspaces]: t.UiStep.GET_STARTED_SELECT_WORKSPACES,
          [n.AppleSignIn]: t.UiStep.GET_STARTED_APPLE_SIGN_IN,
          [n.ConfirmTrust]: t.UiStep.GET_STARTED_CONFIRM_TRUST,
          [n.IgnoreInvite]: t.UiStep.GET_STARTED_IGNORE_INVITE,
          [n.AddName]: t.UiStep.GET_STARTED_ADD_NAME,
        };
        var d;
        (function (a) {
          (a.Invited = "invited"),
            (a.Joined = "joined"),
            (a.Whitelisted = "whitelisted");
        })(d || (d = {}));
        var o;
        (function (a) {
          (a.Email = "email"),
            (a.GoogleIdToken = "google_id_token"),
            (a.Apple = "apple_id_token");
        })(o || (o = {}));
      },
      3700949338: (W, A, e) => {
        "use strict";
        e.d(A, {
          $: () => n,
          A: () => t,
        });
        function t(s) {
          return s >= 48 && s <= 57;
        }
        _(t, "isNumericKey");
        function n(s) {
          const i = String.fromCharCode(s);
          return !!/[a-zA-Z0-9]/.test(i);
        }
        _(n, "isAlphaNumericKey");
      },
      7520119303: (W, A, e) => {
        "use strict";
        e.d(A, {
          K_: () => y,
          XR: () => I,
          yb: () => f,
        });
        var t = e(735940183),
          n = e(7909758472),
          s = e(7940058138),
          i = e(796111729),
          d = e(4465846026),
          o = e(7100005318),
          a = e(760547858);
        const r = new t.Ay("channel_sidebar"),
          c = new t.Ay("app_launcher"),
          u = new t.Ay("setup_page"),
          l = new t.Ay("client"),
          m = new t.Ay("search"),
          v = new t.Ay("solution_guide"),
          E = new t.Ay("tenured_team_solutions"),
          T = {
            [s.c.Composer]: () => r.t("New message"),
            [s.c.Drafts]: () => r.t("Drafts & sent"),
            [s.c.ScheduledMessages]: () =>
              r.t("Scheduled", {
                ns: "channel_sidebar",
              }),
            [s.c.Sent]: () => r.t("Sent"),
            Pthread: () => r.t("Thread"),
            [s.c.Empty]: () => {},
            [s.c.Unreads]: () => r.t("Unreads"),
            [s.c.Apps]: () =>
              c.t("Apps", {
                fallbackHash: "d9a36850b7f3f78365a998cb16cb68b6fd79400d",
                fallbackHashNs: "channel_sidebar",
              }),
            [s.c.Shortcuts]: () =>
              c.t("Workflows", {
                fallbackHash: "d9a36850b7f3f78365a998cb16cb68b6fd79400d",
                fallbackHashNs: "channel_sidebar",
              }),
            [s.c.BrowseWorkflowsManagedByYou]: (M) =>
              (0, d.oF)(M) ? r.t("Workflows managed by you") : "",
            [s.c.BrowseYourWorkflowTemplates]: () =>
              r.t("Your workflow templates"),
            [s.c.BrowseWorkflowTemplates]: () =>
              c.t("Templates", {
                fallbackHash: "f25b700ed9f092123a43acb205a6869342cf9dd6",
                fallbackHashNs: "workflow_builder",
              }),
            [s.c.Activity]: () => r.t("Activity"),
            [s.c.Saved]: () => r.t("Saved items"),
            [s.c.PaidBenefits]: () => r.t("Paid Plan Benefits"),
            [s.c.BrowseChannels]: () => r.t("All channels"),
            [s.c.SetupTeamName]: () => u.t("Setup Team Name"),
            [s.c.SetupProfile]: () => u.t("Profile"),
            [s.c.SetupChannels]: () => u.t("Setup Channels"),
            [s.c.SetupInvites]: () => u.t("Setup Invites"),
            [s.c.SetupCalendarContactImport]: () => "Setup Contact Import",
            [s.c.SetupTada]: () => "Setup Tada",
            [s.c.SetupWelcome]: () => u.t("Setup Welcome"),
            [s.c.SetupPeople]: () => u.t("Setup People"),
            [s.c.SetupStraightToPaidPlans]: () => u.t("Setup Plans"),
            [s.c.JoinerLaunchpad]: () => r.t("Get started"),
            [s.c.ResurrectedUserWelcome]: () => r.t("Welcome back"),
            [s.c.SolutionGuide]: (M) =>
              (0, o.qV)(M) ? v.t("Set up your workspace") : "",
            [s.c.TenuredTeamSolutions]: (M) =>
              (0, a.OO)(M) ? E.t("Tips for how you work") : "",
            "Pbrowse-channels-prototype": () => r.t("All channels"),
            [s.c.BrowseFiles]: () => m.t("All files"),
            [s.c.Calendar]: (M) => ((0, n.A)(M) ? r.t("Calendar") : ""),
            [s.c.BrowsePeople]: () => r.t("All people"),
            [s.c.BrowseExternalContacts]: () => r.t("External people"),
            [s.c.BrowseUserGroups]: () => r.t("User groups"),
            [s.c.BrowseExternalWorkspaces]: () =>
              r.t("Spaces", {
                fallbackHash: "9486bd3487a34fb3b120cb47d5b2180f456c9f80",
              }),
            [s.c.AllDms]: () => r.t("Direct messages"),
            [s.c.Search]: () =>
              l.t("Search Results", {
                fallbackHash: "bce06414177f72ab70e6387b6af9f8ceef0d6049",
                fallbackHashNs: "search",
              }),
            [s.c.SlackConnect]: () => r.t("Slack Connect"),
            [s.c.SlackConnectInvitation]: () => r.t("Slack Connect Invitation"),
            [s.c.OfflineOutbox]: () => "Offline outbox",
            [s.c.Huddles]: () => "Huddles",
            [s.c.BrowseHuddles]: () => "Huddles",
            [s.c.Today]: () => "Today",
            [s.c.Later]: () => r.t("Later"),
            [s.c.BrowseOrgChart]: () => m.t("Org chart"),
            "Pasync-modals": () => "Modals",
            [s.c.BrowseCanvases]: () => r.t("Canvases"),
            [s.c.BrowseLists]: () => "Lists",
            [s.c.Todos]: () => "Todos",
            [s.c.Recents]: () => m.t("Recently viewed"),
            [s.c.DailyDigest]: () => r.t("Recap"),
            [s.c.ActionItems]: () => r.t("Action items"),
            [s.c.Inbox]: () => r.t("Activity"),
          },
          g = {
            Pdms: () => r.t("All direct messages"),
          };
        function I(M) {
          return !M || !T[M]
            ? ((0, i.Wo)().error(
                `getLabelFunctionForPage called with invalid pageId: ${M}`
              ),
              null)
            : T[M];
        }
        _(I, "getLabelFunctionForPage");
        const f = _((M, p) => I(p.id)(M), "getPageLabel");
        function y(M) {
          if (M) return g[M];
        }
        _(y, "getAriaLabelFunctionForPage");
      },
      3639008527: (W, A, e) => {
        "use strict";
        e.d(A, {
          Z: () => m,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(5824283093),
          i = e(1031947056),
          d = e(6772985425),
          o = e(9132066222),
          a = e(735940183),
          r = e(4275787242),
          c = e(5060694341);
        const u = new a.Ay("tabbed-channel"),
          l = {
            name: "warning",
          },
          m = (0, i.Ay)(
            "Adds a new tab to a channel",
            (function () {
              var v = (0, t.coroutine)(function* (E, T, g) {
                let { channelId: I, type: f, data: y, label: M, reason: p } = g;
                const O = T(),
                  C = (0, o.U6)(O);
                let h = {
                  ok: !1,
                  tabs: [],
                };
                try {
                  h = yield E(
                    (0, d.y)({
                      type: f,
                      data: y,
                      channelId: I,
                      label: M,
                      reason: p,
                    })
                  );
                } catch (D) {
                  let P;
                  switch (D.name) {
                    case d.d.TooManyTabs:
                      P = C
                        ? u.t("Maximum number of tabs added.")
                        : "Maximum number of tabs added.";
                      break;
                    default:
                      P = C ? u.t("Cannot add tab.") : "Cannot add tab.";
                  }
                  throw (
                    (E(
                      (0, c.M)({
                        element: s.createElement(
                          r.A,
                          {
                            svgIconProps: l,
                          },
                          s.createElement("span", null, P)
                        ),
                      })
                    ),
                    D)
                  );
                }
                return h;
              });
              return function (E, T, g) {
                return v.apply(this, arguments);
              };
            })()
          );
        m.meta = {
          name: "createThunk",
          key: "createThunkaddTabToChannel",
          description: "Adds a new tab to a channel",
        };
      },
      4066669727: (W, A, e) => {
        "use strict";
        e.d(A, {
          KH: () => K,
          MC: () => R,
          PL: () => U,
          SV: () => x,
          a$: () => P,
          gO: () => S,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(7542104324),
          i = e(2141099977),
          d = e(8802876335),
          o = e(796111729),
          a = e(6533394955),
          r = e(1345902898),
          c = e(8778137680),
          u = e(5795074931),
          l = e(7592559649),
          m = e(4949104520),
          v = e(6066600258),
          E = e(9240258658),
          T = e(1031947056),
          g = e(5332875232);
        const I = "AWARENESS-MANAGER",
          f = "AWARENESS-MANAGER-CHIME",
          y = `[${I}] unknown awareness subtype`,
          M = 3e4,
          p = 250,
          O = 5e3,
          C = 15,
          h = (0, T.Ay)(
            "Query for awareness state from other users who are subscribed to the topic",
            (function () {
              var H = (0, t.coroutine)(function* (F, V, X) {
                const q = V();
                if (!(0, d.ON)(q)) return;
                const oe = (0, u.WR)(q),
                  z = {
                    channel: X,
                    type: "awareness",
                    subtype: r.Pz.QUERY,
                    user: oe,
                  };
                try {
                  F((0, i.tN)(z));
                } catch (Ae) {
                  (0, o.Ay)({
                    getState: V,
                  }).warn("Failed to send awareness query: ", Ae);
                }
              });
              return function (F, V, X) {
                return H.apply(this, arguments);
              };
            })()
          );
        h.meta = {
          name: "createThunk",
          key: "createThunkmaybeSendAwarenessQuery",
          description:
            "Query for awareness state from other users who are subscribed to the topic",
        };
        const D = (0, T.Ay)(
          "Send awareness state to other users who are subscribed to the topic",
          (function () {
            var H = (0, t.coroutine)(function* (F, V, X) {
              const q = V();
              if (!(0, d.ON)(q)) return;
              const oe = (0, u.WR)(q),
                z = (0, l.fL)(q, X, oe),
                Ae = {
                  channel: X,
                  type: "awareness",
                  subtype: r.Pz.BROADCAST,
                  user: oe,
                  awareness_state: z,
                };
              try {
                F((0, i.tN)(Ae));
              } catch (ae) {
                (0, o.Ay)({
                  getState: V,
                }).warn("Failed to send awareness query: ", ae);
              }
            });
            return function (F, V, X) {
              return H.apply(this, arguments);
            };
          })()
        );
        D.meta = {
          name: "createThunk",
          key: "createThunkmaybeSendCurrentAwarenessState",
          description:
            "Send awareness state to other users who are subscribed to the topic",
        };
        const P = (0, T.Ay)(
          "Temporarily subscribe to a topic for updates",
          (H, F, V) => {
            const X = F();
            if ((0, d.ON)(X))
              try {
                H(
                  (0, i.tN)({
                    channel_id: V,
                    type: "temp_channel_sub",
                  })
                );
              } catch (q) {
                (0, o.Ay)({
                  getState: F,
                }).warn("Failed to subscribe to awareness topic: ", q);
              }
          }
        );
        P.meta = {
          name: "createThunk",
          key: "createThunksubscribeToAwarenessTopic",
          description: "Temporarily subscribe to a topic for updates",
        };
        const S = (0, T.Ay)(
          "Temporarily unsubscribe from topic updates",
          (H, F, V) => {
            const X = F();
            if ((0, d.ON)(X))
              try {
                H(
                  (0, i.tN)({
                    channel_id: V,
                    type: "temp_channel_unsub",
                  })
                );
              } catch (q) {
                (0, o.Ay)({
                  getState: F,
                }).warn("Failed to unsubscribe from awareness topic: ", q);
              }
          }
        );
        S.meta = {
          name: "createThunk",
          key: "createThunkunsubscribeFromAwarenessTopic",
          description: "Temporarily unsubscribe from topic updates",
        };
        const b = (0, T.Ay)(
          "Alert other users who are subscribed to the topic that a subscriber has left",
          (function () {
            var H = (0, t.coroutine)(function* (F, V, X) {
              const q = V();
              if (!(0, d.ON)(q)) return;
              const oe = (0, u.WR)(q),
                z = {
                  channel: X,
                  type: "awareness",
                  subtype: r.Pz.CLOSE,
                  user: oe,
                };
              try {
                F((0, i.tN)(z));
              } catch (Ae) {
                (0, o.Ay)({
                  getState: V,
                }).warn("Failed to send awareness query: ", Ae);
              }
            });
            return function (F, V, X) {
              return H.apply(this, arguments);
            };
          })()
        );
        b.meta = {
          name: "createThunk",
          key: "createThunkmaybeSendCloseState",
          description:
            "Alert other users who are subscribed to the topic that a subscriber has left",
        };
        class K {
          maybeSendCurrentAwarenessState(F) {
            const V = (0, a.getStoreInstanceByTeamId)(this.teamId);
            return V ? (V.dispatch(D(F)), !0) : !1;
          }
          maybeSendAwarenessQuery(F) {
            const V = (0, a.getStoreInstanceByTeamId)(this.teamId);
            return V ? (V.dispatch(h(F)), !0) : !1;
          }
          maybeSendAwarenessCloseState(F) {
            const V = (0, a.getStoreInstanceByTeamId)(this.teamId);
            return V ? (V.dispatch(b(F)), !0) : !1;
          }
          constructor({ teamId: F }) {
            (this.onShutdownDataChannelSubscriber = () => {}),
              (this.teamId = F);
          }
        }
        _(K, "RtmBroadcaster");
        class x {
          onDisconnectDataChannel() {
            var F;
            (F = this.audioVideoFacade) === null ||
              F === void 0 ||
              F.realtimeUnsubscribeFromReceiveDataMessage(
                this.dataChannelTopic
              ),
              (this.connected = !1);
          }
          onConnectDatachannel(F) {
            (this.audioVideoFacade = F),
              this.audioVideoFacade.realtimeSubscribeToReceiveDataMessage(
                this.dataChannelTopic,
                this.realtimeReceiveDataMessageCallback
              ),
              (this.connected = !0),
              (0, o.Wo)().warn(f, `broadcaster connected ${this.peerId}`),
              this.maybeSendAwarenessQuery(this.topicId);
          }
          onInitializeDataChannelSubscriber() {}
          realtimeReceiveDataMessageCallback(F) {}
          maybeSendCurrentAwarenessState(F) {
            var V;
            if (!this.connected)
              return (
                (0, o.Wo)().info(
                  f,
                  `${this.connected} ${F} Can't send yet, not connected`
                ),
                !1
              );
            const X = (0, a.getStoreInstanceByTeamId)(this.teamId);
            if (!X)
              return (
                (0, o.Wo)().warn(
                  f,
                  `${this.connected} ${F} Can't find teamstore for ${this.teamId}, not sending awareness state`
                ),
                !1
              );
            const q = X.getState(),
              oe = (0, u.WR)(q);
            X.dispatch(
              (0, c.c6)({
                topicId: F,
                userId: oe,
              })
            );
            const z = (0, g.pL)(q),
              ae = (0, l.fL)(q, F, oe, z ? "self" : void 0).map(
                (ve) =>
                  new E.Y.AwarenessPayload({
                    fieldName: ve.field_name,
                    fieldValue: ve.field_value,
                    ...(this.isHuddlesAwarenessTimestampEnabled &&
                      !!ve.field_timestamp_ms && {
                        fieldTimestampMs: ve.field_timestamp_ms,
                      }),
                  })
              ),
              de = new E.Y.AwarenessBroadcast({
                channel: F,
                user: (0, u.WR)(X.getState()),
                awarenessState: ae,
              });
            return (
              (V = this.audioVideoFacade) === null ||
                V === void 0 ||
                V.realtimeSendDataMessage(
                  this.dataChannelTopic,
                  E.Y.encode(
                    new E.Y({
                      awarenessBroadcast: de,
                    })
                  ).finish()
                ),
              !0
            );
          }
          maybeSendAwarenessQuery(F) {
            var V;
            if (!this.connected)
              return (
                (0, o.Wo)().info(
                  f,
                  `${this.connected} ${F} Can't send yet, not connected`
                ),
                !1
              );
            (0, o.Wo)().warn(
              f,
              `${this.connected} ${F} Sending awareness query`
            );
            const X = (0, a.getStoreInstanceByTeamId)(this.teamId);
            if (!X)
              return (
                (0, o.Wo)().warn(
                  f,
                  `${this.connected} ${F} Can't find teamstore for ${this.teamId}, not sending awareness query`
                ),
                !1
              );
            const q = new E.Y.AwarenessQuery({
              channel: F,
              user: (0, u.WR)(X.getState()),
            });
            return (
              (V = this.audioVideoFacade) === null ||
                V === void 0 ||
                V.realtimeSendDataMessage(
                  this.dataChannelTopic,
                  E.Y.encode(
                    new E.Y({
                      awarenessQuery: q,
                    })
                  ).finish()
                ),
              !0
            );
          }
          maybeSendAwarenessCloseState(F) {
            var V;
            if (!this.connected)
              return (
                (0, o.Wo)().info(
                  f,
                  `${this.connected} ${F} Can't send yet, not connected`
                ),
                !1
              );
            (0, o.Wo)().warn(
              f,
              `${this.connected} ${F} Sending awareness query`
            );
            const X = (0, a.getStoreInstanceByTeamId)(this.teamId);
            if (!X)
              return (
                (0, o.Wo)().warn(
                  f,
                  `${this.connected} ${F} Can't find teamstore for ${this.teamId}, not sending awareness query`
                ),
                !1
              );
            const q = new E.Y.AwarenessClose({
              channel: F,
              user: (0, u.WR)(X.getState()),
            });
            return (
              (V = this.audioVideoFacade) === null ||
                V === void 0 ||
                V.realtimeSendDataMessage(
                  this.dataChannelTopic,
                  E.Y.encode(
                    new E.Y({
                      awarenessClose: q,
                    })
                  ).finish()
                ),
              !0
            );
          }
          constructor({
            teamId: F,
            peerId: V,
            topicId: X,
            isHuddlesAwarenessTimestampEnabled: q,
          }) {
            (this.dataChannelTopic = "awareness-sync-channel"),
              (this.isHuddlesAwarenessTimestampEnabled = !1),
              (this.onShutdownDataChannelSubscriber = () => {
                this.maybeSendAwarenessCloseState(this.topicId),
                  (this.connected = !1);
              }),
              (this.teamId = F),
              (this.peerId = V),
              (this.connected = !1),
              (this.topicId = X),
              (this.isHuddlesAwarenessTimestampEnabled = !!q);
          }
        }
        _(x, "ChimeChannelBroadcaster");
        class B {
          maybeTTL() {
            [...new Set(this.topicToTeamMap.values())].forEach((V) => {
              (0, o.Wo)().debug(I, `Running TTL for ${V}`);
              const X = (0, a.getStoreInstanceByTeamId)(V);
              X && X.dispatch((0, c._y)());
            }),
              this.watchedTopics.size === 0 &&
                ((0, o.Wo)().info(
                  I,
                  "Stopping the TTL timer, nothing to watch"
                ),
                clearInterval(this.periodicTTLId),
                (this.periodicTTLId = null));
          }
          broadcastChanges() {
            if (Date.now() - this.lastDirtyBroadcastTime < 500) return;
            const F = (0, m.A)(C, -0.25, 0.25);
            this.dirtyTopics.forEach((V) => {
              (0, v.A)(() => {
                const X = this.dataChannels.get(V);
                X &&
                  X.maybeSendCurrentAwarenessState(V) &&
                  this.dirtyTopics.delete(V);
              }, F);
            }),
              (this.lastDirtyBroadcastTime = Date.now()),
              this.watchedTopics.size === 0 &&
                ((0, o.Wo)().info(
                  I,
                  "Stopping the dirty broadcast timer, nothing to watch"
                ),
                clearInterval(this.dirtyBroadcastTimeoutId),
                (this.dirtyBroadcastTimeoutId = null));
          }
          broadcastPerodicallyToWatchedTopics() {
            this.watchedTopics.forEach((F) => {
              const V = this.dataChannels.get(F);
              V &&
                V.maybeSendCurrentAwarenessState(F) &&
                this.dirtyTopics.delete(F);
            }),
              this.watchedTopics.size === 0 &&
                ((0, o.Wo)().info(
                  I,
                  "Stopping the periodic broadcast timer, nothing to watch"
                ),
                clearInterval(this.perodicBroadcastTimeoutId),
                (this.perodicBroadcastTimeoutId = null));
          }
          query() {
            Date.now() - this.lastQueryTime < 15e3 ||
              (this.watchedTopics.forEach((F) => {
                if (this.topicToTeamMap.get(F)) {
                  const X = this.dataChannels.get(F);
                  X &&
                    X.maybeSendAwarenessQuery(F) &&
                    this.dirtyTopics.delete(F);
                }
              }),
              this.broadcastChanges(),
              (this.lastQueryTime = Date.now()));
          }
          markTopicChanged(F) {
            if (!this.watchedTopics.has(F)) {
              (0, o.Wo)().info(
                I,
                `Ignoring topic change for unwatched topic ${F}`
              );
              return;
            }
            this.dirtyTopics.add(F),
              this.dirtyBroadcastTimeoutId ||
                ((0, o.Wo)().info(I, "Starting the dirty broadcast timer"),
                (this.dirtyBroadcastTimeoutId = setInterval(
                  this.broadcastChanges.bind(this),
                  p
                ))),
              this.perodicBroadcastTimeoutId ||
                ((0, o.Wo)().info(I, "Starting the periodic broadcast timer"),
                (this.perodicBroadcastTimeoutId = setInterval(
                  this.broadcastPerodicallyToWatchedTopics.bind(this),
                  M
                ))),
              this.periodicTTLId ||
                ((0, o.Wo)().info(I, "Starting the TTL timer"),
                (this.periodicTTLId = setInterval(
                  this.maybeTTL.bind(this),
                  O
                )));
          }
          removeTopicId(F) {
            this.dirtyTopics.delete(F), this.watchedTopics.delete(F);
          }
          watch(F, V, X) {
            this.watchedTopics.add(V),
              this.topicToTeamMap.set(V, F),
              this.dataChannels.set(V, X),
              this.markTopicChanged(V),
              this.query();
          }
          unwatch(F) {
            this.broadcastChanges(), this.removeTopicId(F);
          }
          unwatchAll() {
            if (this.watchedTopics.size) {
              const F = [...this.watchedTopics].join(" ");
              (0, o.Wo)().warn(I, `Clearing unexpected remaining topics: ${F}`),
                this.broadcastChanges(),
                this.watchedTopics.clear();
            }
            this.dataChannels.clear();
          }
          constructor() {
            (this.dirtyTopics = new Set()),
              (this.watchedTopics = new Set()),
              (this.topicToTeamMap = new Map()),
              (this.dataChannels = new Map()),
              (this.lastDirtyBroadcastTime = 0),
              (this.lastQueryTime = 0);
          }
        }
        _(B, "AwarenessManager");
        const U = new B();
        class R {
          onConnectDatachannel(F) {
            (this.audioVideoFacade = F),
              this.audioVideoFacade.realtimeSubscribeToReceiveDataMessage(
                this.dataChannelTopic,
                this.realtimeReceiveDataMessageCallback.bind(this)
              ),
              (0, o.Wo)().warn(f, "listener connected");
          }
          onDisconnectDataChannel() {}
          onInitializeDataChannelSubscriber() {}
          onShutdownDataChannelSubscriber() {}
          realtimeReceiveDataMessageCallback(F) {
            let V;
            try {
              V = E.Y.decode(F.data);
            } catch (X) {
              (0, o.Wo)().debug(
                f,
                `Peer Message failed during decode, ignoring peer message.
				| Error: ${X}
				| Data Sender Attendee ID: ${F.senderAttendeeId}
				| Data Sender External Attendee ID: ${F.senderExternalUserId}
				| Topic: ${F.topic}`
              );
              return;
            }
            if (V.awarenessQuery && V.awarenessQuery.channel)
              U.markTopicChanged(V.awarenessQuery.channel);
            else if (V.awarenessBroadcast) {
              const X = (0, a.getStoreInstanceByTeamId)(this.teamId),
                q = (0, g.pL)(X.getState()),
                oe = V.awarenessBroadcast.user,
                z = V.awarenessBroadcast.channel,
                Ae = V.awarenessBroadcast.awarenessState;
              if (oe && z && Ae) {
                const ae = Ae.map((ve) => {
                    var Se, Ee;
                    return {
                      field_name:
                        (Se = ve.fieldName) !== null && Se !== void 0
                          ? Se
                          : "unknown_field",
                      field_value:
                        (Ee = ve.fieldValue) !== null && Ee !== void 0
                          ? Ee
                          : "unknown_value",
                      ...(!!ve.fieldTimestampMs && {
                        field_timestamp_ms: ve.fieldTimestampMs,
                      }),
                    };
                  }),
                  de = {
                    user: oe,
                    channel: z,
                    awarenessEntries: ae,
                    ...(q && {
                      uniqueId: F.senderAttendeeId,
                    }),
                  };
                X && X.dispatch((0, c.zZ)(de));
              }
            } else if (V.awarenessClose) {
              const X = (0, a.getStoreInstanceByTeamId)(this.teamId),
                q = (0, g.pL)(X.getState()),
                oe = V.awarenessClose.user,
                z = V.awarenessClose.channel;
              oe &&
                z &&
                X &&
                X.dispatch(
                  (0, c.DQ)({
                    topicId: z,
                    userId: oe,
                    ...(q && {
                      uniqueId: F.senderAttendeeId,
                    }),
                  })
                );
            }
          }
          constructor({ teamId: F }) {
            (this.dataChannelTopic = "awareness-sync-channel"),
              (this.teamId = F);
          }
        }
        _(R, "ChimeChannelListener");
        const G = _((H, F, V) => {
          const X = V(),
            q = (0, u.WR)(X),
            oe = H.awareness_state;
          switch (H.subtype) {
            case "query":
              q !== H.user && U.markTopicChanged(H.channel);
              break;
            case "broadcast":
              if (oe && q !== H.user) {
                const z = {
                  user: H.user,
                  channel: H.channel,
                  awarenessEntries: oe,
                };
                F((0, c.zZ)(z));
              }
              break;
            case "close":
              q !== H.user &&
                F(
                  (0, c.DQ)({
                    topicId: H.channel,
                    userId: H.user,
                  })
                );
              break;
            default:
              throw new Error(y);
          }
        }, "onAwarenessEvent");
        (0, s.d1)("awareness", G);
      },
      9781145568: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => c,
        });
        var t = e(1031947056),
          n = e(7053828403),
          s = e(395285811),
          i = e(1407713935),
          d = e(9101533895),
          o = e(56548687),
          a = e(1224315998);
        const r = (0, t.Ay)("Clogs a message sent or resent", function (u, l) {
          let {
            channelId: m,
            msgTs: v,
            resent: E = !1,
          } = arguments.length > 2 && arguments[2] !== void 0
            ? arguments[2]
            : {};
          const T = l(),
            g = m ? (0, d.OL)(T, m) : null;
          let I = {
            message_timestamp: v,
            channel_id: m,
            channel_type: m ? m.charAt(0) : null,
            channel_privacy_type: g ? (0, i.K5)(g) : null,
            is_file_channel: g ? (0, s.jT)(g) : null,
          };
          const f = (0, n.ZR)(T);
          f !== null &&
            (I = {
              ...I,
              channel_session_id: f,
            });
          const y = (0, o.e)({
              state: T,
            }),
            M = E ? a.EventId.MSG_RESENT : a.EventId.MSG_SENT;
          y.track(M, I);
        });
        r.meta = {
          name: "createThunk",
          key: "createThunkclogMessageSent",
          description: "Clogs a message sent or resent",
        };
        const c = r;
      },
      5904726069: (W, A, e) => {
        "use strict";
        e.d(A, {
          r: () => l,
        });
        var t = e(5824283093),
          n = e(1031947056),
          s = e(4540171876),
          i = e(9236644324),
          d = e(5258584090),
          o = e(5060694341),
          a = e(4275787242),
          r = e(735940183),
          c = e(5332875232);
        const u = new r.Ay("huddles"),
          l = (0, n.Ay)("Copies Huddle link by Channel Id", (m, v, E, T) => {
            let { channelId: g, suppressToast: I } = E;
            const { windowRef: f } = T(d.S),
              y = (0, c.Eo)(v());
            if (
              g &&
              (m(
                (0, s.TE)({
                  reason: "copy",
                  channelId: g,
                })
              ).then((M) => {
                (0, i.x3)(M.link, f.deref());
              }),
              y && !I)
            ) {
              const M = {
                name: "check",
              };
              m(
                (0, o.M)({
                  element: t.createElement(
                    a.A,
                    {
                      svgIconProps: M,
                      duration: 3e3,
                    },
                    u.rt("Huddle link copied")
                  ),
                })
              );
            }
          });
        l.meta = {
          name: "createThunk",
          key: "createThunkcopyHuddleLinkByChannelId",
          description: "Copies Huddle link by Channel Id",
        };
      },
      3694676182: (W, A, e) => {
        "use strict";
        e.d(A, {
          Q7: () => Z,
          TE: () => Ae.A,
          Uf: () => Me,
        });
        var t = e(6422693406),
          n = e(362134992),
          s = e(7530630315),
          i = e(1031947056),
          d = e(5795074931),
          o = e(157328471),
          a = e(1827030018),
          r = e(9132245692),
          c = e(796111729),
          u = e(9665027958),
          l = e(9706240641),
          m = e(9113979368),
          v = e(8840779375),
          E = e(9746734072),
          T = e(2101927269),
          g = e(9101533895),
          I = e(5467378328),
          f = e(9530687876);
        const y = (0, i.Ay)(f.rd.BULK_UPDATE_CHANNELS, function (ke, ge) {
          let { channels: fe } =
            arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          const re = ge();
          if (!fe || !fe.length || !(0, E.A)(fe)) return;
          const le = (0, T.A)(fe, "id"),
            Re = [],
            ye = !1;
          le.length &&
            (le.forEach((Te) => {
              const De = (0, g.OL)(re, Te.id, ye);
              Re.push({
                ...De,
                ...Te,
              });
            }),
            ke(
              (0, I.U)({
                channels: Re,
                reason: f.rd.BULK_UPDATE_CHANNELS,
              })
            ));
        });
        y.meta = {
          name: "createThunk",
          key: "createThunkbulkUpdateChannels",
          description: f.rd.BULK_UPDATE_CHANNELS,
        };
        var M = e(6613382951),
          p = e(7438375976),
          O = e(4446301238),
          C = e(8455301571),
          h = e(8571983633),
          D = e(4013618389),
          P = e(7486305635),
          S = e(8802876335),
          b = e(3683482182),
          K = e(4459831283);
        const x = (0, i.Ay)(
          "Update the unread counts in response to client.counts",
          (ke, ge, fe) => {
            if (!fe) return;
            const re = ge(),
              le = {},
              Re = {},
              ye = {},
              Te = (0, K.FT)(re);
            fe.forEach((De) => {
              const { id: Ue, unread_cnt: Ke, unread_highlight_cnt: Ze } = De,
                Q =
                  Te && !(0, h.A)(De == null ? void 0 : De.vip_count)
                    ? De == null
                      ? void 0
                      : De.vip_count
                    : void 0;
              le[Ue] = {
                unreadCnt: Ke || 0,
                unreadHighlightCnt: Ze || 0,
                unreadVIPMentionCnt: Te ? Q || 0 : void 0,
              };
              const ie = (0, g.OL)(re, Ue);
              if ((!Ke && !Ze) || !(0, D.F)(re, ie)) return;
              (0, P.d$)(re, ie) && (ye[Ue] = !0);
              const Ve = (0, D.v)(re, ie) ? Ke : Ze,
                { reachedEnd: xe } = (0, C.tp)(re, Ue),
                je = (0, S.UJ)(re);
              xe && je
                ? (Re[Ue] = (0, b.Lh)(re, Ue))
                : (Re[Ue] = {
                    unreadCnt: Ke,
                    unreadHighlightCnt: Ve || Ze,
                    unreadVIPMentionCnt: Te ? Q : void 0,
                  });
            }),
              ke(
                (0, o.SO)({
                  initialUnreads: le,
                  countsPerChannel: Re,
                  channelsToSuppress: ye,
                })
              );
          }
        );
        x.meta = {
          name: "createThunk",
          key: "createThunkinitializeUnreadCountsFromChannels",
          description: "Update the unread counts in response to client.counts",
        };
        var B = e(4368281601),
          U = e(6007206761),
          R = e(9884588328),
          G = e(6495946979),
          H = e(395285811),
          F = e(1407713935),
          V = e(9762304444);
        const X = (0, V.Ay)("TS.ensureFullyBooted", () => {
          throw new Error(
            "Not implemented (and only ever intended for use in non-Sonic Land)"
          );
        });
        var q = e(4096483543),
          oe = e(1949656963),
          z = e(4191588167),
          Ae = e(4660031767),
          ae = e(6695353875);
        const de = "COUNTS",
          ve = (0, i.Ay)(
            "Apply counts to channel objects and update stores",
            (function () {
              var ke = (0, l.coroutine)(function* (ge, fe) {
                let { counts: re = [] } =
                  arguments.length > 2 && arguments[2] !== void 0
                    ? arguments[2]
                    : {};
                (0, q.A)() || (yield X());
                let le = fe();
                const Re = [],
                  ye = {},
                  Te = {},
                  De = [],
                  Ue = (0, S.UJ)(le),
                  Ke = (0, S.yf)(le),
                  Ze = (0, ae.lc)(le),
                  Q = (0, K.FT)(le);
                (0, c.Ay)({
                  state: le,
                }).info(
                  de,
                  `Applying counts to channels. wasLastConnectFast: ${Ke} isConnected: ${Ue}`
                );
                const ie = re
                  .filter((xe) => {
                    let { has_unreads: je, mention_count: Fe } = xe;
                    return je || Fe;
                  })
                  .filter(function () {
                    let { id: xe } =
                      arguments.length > 0 && arguments[0] !== void 0
                        ? arguments[0]
                        : {};
                    return !(0, g.hh)(le, xe);
                  })
                  .map(function () {
                    let { id: xe } =
                      arguments.length > 0 && arguments[0] !== void 0
                        ? arguments[0]
                        : {};
                    return xe;
                  });
                ie.length &&
                  (yield ge(
                    (0, O.pX)({
                      ids: ie,
                      reason: "apply-counts-to-channels/ensure-channels",
                      callSource: O.aI.ApplyCounts,
                    })
                  ),
                  (le = fe()));
                const Ve = (0, C.jg)(le);
                re.forEach((xe) => {
                  const je = (0, g.OL)(le, xe.id, !1);
                  if (!je || (0, F.QR)(je)) {
                    if (!xe.has_unreads && !xe.mention_count) return;
                    (0, c.Ay)({
                      state: le,
                    }).warn(
                      de,
                      {
                        id: xe.id,
                        has_unreads: xe.has_unreads,
                        nonExistent: (0, F.QR)(je),
                      },
                      "applyCountsToChannels_missing_channel"
                    );
                    return;
                  }
                  if ((0, U.F)(je) || ((0, F.rW)(je) && !(0, G.bl)(je))) return;
                  if ((0, H.jT)(je)) {
                    ge(
                      (0, B.k)({
                        channelId: je.id,
                        mentionCount: xe.mention_count,
                        shouldSuppress: (0, P.d$)(le, je),
                      })
                    );
                    return;
                  }
                  const Fe = {},
                    { reachedEnd: He } = (0, C.tp)(le, je.id),
                    Ye = xe.has_unreads ? 1 : 0;
                  let at = 0,
                    _t = 0,
                    pt = 0,
                    Qe = !1;
                  (0, F.LI)(je) ||
                  (0, F.LI)(xe) ||
                  (0, F.yz)(je) ||
                  (0, F.yz)(xe)
                    ? (at = xe.mention_count || Ye)
                    : ((Qe = !0),
                      (at = Ye),
                      (_t = xe.mention_count || 0),
                      (pt = (xe == null ? void 0 : xe.vip_count) || 0)),
                    !at &&
                      _t &&
                      ((0, c.Ay)({
                        state: le,
                      }).warn(
                        de,
                        `Ignoring positive mention_count_display because has_unreads == false for ${je.id}`,
                        {
                          subtype: "ignoring_positive_mention_count_display",
                        }
                      ),
                      (_t = 0)),
                    (Te[je.id] = {
                      unreadCnt: at,
                      unreadHighlightCnt: _t,
                      unreadVIPMentionCnt: Q ? pt : void 0,
                    }),
                    !Ze && He && Ue
                      ? De.push(je.id)
                      : (at !== (0, R.$M)(je) && (Fe.unread_cnt = at),
                        Q && pt !== (0, R.OJ)(je) && (Fe.vip_count = pt),
                        Qe &&
                          _t !== (0, R.BP)(je) &&
                          (Fe.unread_highlight_cnt = _t)),
                    xe.updated &&
                      xe.history_invalid &&
                      ((ye[je.id] = {
                        historyInvalidTs: xe.history_invalid,
                        updatedTs: xe.updated,
                      }),
                      Ve != null &&
                        Ve[je.id] &&
                        ge(
                          (0, z.A)({
                            channelId: je.id,
                            newHistoryInvalidTs: xe.history_invalid,
                            newUpdatedTs: xe.updated,
                          })
                        )),
                    (0, m.A)(Fe) || ((Fe.id = je.id), Re.push(Fe));
                }),
                  (0, m.A)(Re) ||
                    ge(
                      y({
                        channels: Re,
                      })
                    ),
                  (0, m.A)(ye) ||
                    ge(
                      (0, oe.ih)({
                        updates: ye,
                      })
                    ),
                  ge((0, M.M)(re)),
                  ge(
                    (0, p.f)(
                      re.map((xe) => ({
                        channelId: xe.id,
                        ts: xe.last_read,
                      }))
                    )
                  ),
                  ge((0, o.iz)(Te)),
                  ge(
                    x(
                      (0, v.A)(Te, function () {
                        let {
                          unreadCnt: xe,
                          unreadHighlightCnt: je,
                          unreadVIPMentionCnt: Fe,
                        } = arguments.length > 0 && arguments[0] !== void 0
                          ? arguments[0]
                          : {};
                        return {
                          id: arguments.length > 1 ? arguments[1] : void 0,
                          unread_cnt: xe,
                          unread_highlight_cnt: je,
                          vip_count: Q ? Fe : void 0,
                        };
                      })
                    )
                  ),
                  De.forEach((xe) => {
                    ge(
                      (0, Ae.A)({
                        channelId: xe,
                      })
                    );
                    const je = (0, g.OL)(fe(), xe, !1);
                    if (je) {
                      const Fe = {
                        unreadCnt: (0, R.$M)(je),
                        unreadHighlightCnt: (0, R.BP)(je),
                        unreadVIPMentionCnt: (0, R.OJ)(je),
                      };
                      (0, c.Ay)({
                        state: le,
                      }).info(
                        de,
                        `Recounted ${xe}; initial: ${JSON.stringify(
                          Te[xe]
                        )}; after: ${JSON.stringify(Fe)}`
                      );
                    }
                  });
              });
              return function (ge, fe) {
                return ke.apply(this, arguments);
              };
            })()
          );
        ve.meta = {
          name: "createThunk",
          key: "createThunkapplyCountsToChannels",
          description: "Apply counts to channel objects and update stores",
        };
        const Se = ve,
          Ee = "COUNTS",
          be = (0, i.Ay)(
            "Apply counts to channels and threads",
            function (ke, ge) {
              let {
                channels: fe,
                groups: re,
                ims: le,
                mpims: Re,
                threads: ye,
                alerts: Te,
                saved: De,
                fileChannels: Ue,
                channelBadges: Ke,
                countsLastFetched: Ze,
              } = arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : {};
              const Q = ge();
              if (!(0, d.TZ)(Q)) return t.S.resolve();
              ke((0, o.iz)({})), ke((0, r.y)(Te || {})), ke((0, o.t)(Ze));
              const ie = Ce(Ue),
                Ve = (0, n.A)((0, s.A)(fe, re, le, Re, ie));
              return ke(
                Se({
                  counts: Ve,
                })
              ).then(() => {
                const xe = (0, c.Ay)({
                  getState: ge,
                });
                ye &&
                  (xe.info(
                    Ee,
                    `Threads has_unreads:${ye.has_unreads} mention_count:${ye.mention_count}`
                  ),
                  ke(
                    (0, a._)({
                      threadsHasUnreads: ye.has_unreads,
                      threadsUnreadCountByChannel: ye.unread_count_by_channel,
                      threadsMentionCountByChannel: ye.mention_count_by_channel,
                    })
                  )),
                  De && ke((0, u.yO)(De)),
                  Ke && ke((0, o.$m)(Ke)),
                  xe.info(Ee, "Completed counts processing");
              });
            }
          );
        be.meta = {
          name: "createThunk",
          key: "createThunkapplyCountsToChannelsAndThreads",
          description: "Apply counts to channels and threads",
        };
        function Ce(ke) {
          if (!ke || !ke.quip) return [];
          const ge = ke.quip.mention_count_by_channel;
          return Object.keys(ge).map((le) => ({
            id: le,
            mention_count: ge[le],
            has_unreads: !0,
          }));
        }
        _(Ce, "transformFileChannels");
        const Z = be;
        var $ = e(9290914927),
          N = e(6957597272),
          L = e(7606781622),
          w = e(8276911661),
          k = e(6866036454),
          J = e(5899351761),
          ee = e(4726390364);
        const ne = "COUNTS",
          pe = (0, i.Ay)("Update unread counts", function (ke, ge) {
            let { channelId: fe, messageTs: re } =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : {};
            const le = ge(),
              Re = !1,
              ye = (0, g.OL)(le, fe, Re);
            if (
              !ye ||
              !(0, ee.A)(ye, {
                countFileChannels: !0,
              })
            )
              return t.S.resolve(!0);
            const Te = (0, w.cA)(le),
              De = (0, $.gd)(le, Te.id) === "away",
              Ue = Te._presence_last_changed || (0, d.tV)(le, "start_ms"),
              Ke = (0, J.A)({
                state: le,
                messages: [(0, L.Ld)(le, ye.id, re)],
                channel: ye,
                currentUserId: Te.id,
                userIsAway: De,
                userPresenceLastChanged: Ue,
                highlightWords: (0, k.A)(le),
              }),
              Ze = Ke == null ? void 0 : Ke.unreadHighlightCnt;
            return (
              Ze !== ye.unread_highlight_cnt &&
                ((0, c.Ay)({
                  state: le,
                }).info(ne, `Updated unread_highlight_cnt for ${ye.id}: ${Ze}`),
                ke(
                  (0, N.b)({
                    id: ye.id,
                    unread_highlight_cnt: Ze,
                  })
                )),
              t.S.resolve(!1)
            );
          });
        pe.meta = {
          name: "createThunk",
          key: "createThunkupdateUnreadCountsForThreadMentionBroadcasts",
          description: "Update unread counts",
        };
        const Me = pe;
      },
      574001087: (W, A, e) => {
        "use strict";
        e.d(A, {
          o: () => n,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)(
          "Triggers a side-effect that fetches and upserts list records"
        );
        n.meta = {
          name: "createAction",
          key: "createActionfetchAndUpsertRecordsCircular",
          description:
            "Triggers a side-effect that fetches and upserts list records",
        };
        var s = null;
      },
      2522627261: (W, A, e) => {
        "use strict";
        e.d(A, {
          w: () => d,
        });
        var t = e(1031947056),
          n = e(1224315998),
          s = e(56548687),
          i = e(497761763);
        const d = (0, t.Ay)("Clog the opening of a list", (o, a, r) => {
          let { listId: c, source: u, openInNewWindow: l, channelId: m } = r;
          const v = (0, i.A)(c) ? c : "";
          let E = n.UiComponentName.LISTS_MAIN_EMBED;
          l && (E = n.UiComponentName.LISTS_NEW_WINDOW_EMBED),
            (0, s.e)({
              getState: a,
            }).track(n.EventId.SLACK_LISTS, {
              contexts: {
                ui_context: {
                  action: n.UiAction.CLICK,
                  ui_properties: {
                    element_name: u ?? "open_list",
                  },
                  ui_component_name: E,
                  ui_step: n.UiStep.SLACK_LISTS_OPEN,
                },
                core: {
                  file_id: v,
                  channel_id: m,
                },
              },
            });
        });
        d.meta = {
          name: "createThunk",
          key: "createThunkclogOpenList",
          description: "Clog the opening of a list",
        };
      },
      36177209: (W, A, e) => {
        "use strict";
        e.d(A, {
          B: () => t,
        });
        var t;
        (function (n) {
          (n.STARRED_LISTS_SIDEBAR = "starred-lists-sidebar"),
            (n.CHANNEL_TAB = "channel_tab"),
            (n.CANVAS_CREATE_LIST = "canvas_create_list"),
            (n.CANVAS_LIST_UNFURL = "canvas_list_unfurl"),
            (n.CANVAS_LIST_UNFURL_MENU = "canvas_list_unfurl_menu"),
            (n.CANVAS_FROM_QUIP = "canvas_from_quip"),
            (n.LISTS_PEEK_ITEM = "lists_peek_item"),
            (n.LIST_TEMPLATE_PREVIEW = "list_template_preview"),
            (n.LIST_RECORD_DETAIL_CONTENT = "list_record_detail_content"),
            (n.LISTS_MY_ITEMS = "lists_my_items"),
            (n.LISTS_DELETED_PAGE = "lists_deleted_page"),
            (n.LISTS_BROWSE_PAGE_ITEM = "lists_browse_page_item");
        })(t || (t = {}));
      },
      4191588167: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => c,
        });
        var t = e(1031947056),
          n = e(8847766420),
          s = e(4405788578),
          i = e(8455301571),
          d = e(4350638406),
          o = e(796111729),
          a = e(9536404279);
        const r = (0, t.Ay)(
          "Possibly purge or invalidate channel history .",
          (u, l, m) => {
            let { channelId: v, newHistoryInvalidTs: E, newUpdatedTs: T } = m;
            const g = l(),
              I = (0, s.Kq)(g, v),
              f = (0, s.QO)(g, v);
            E !== "0000000000.000000" && (!I || E > I)
              ? ((0, o.Ay)({
                  state: g,
                }).info(
                  "COUNTS",
                  `purging cached history for channel ${v} since counts history_invalid ${E} > cached historyInvalidTs ${I}`
                ),
                u(
                  (0, a.bz)({
                    channelId: v,
                    includeThreads: !0,
                  })
                ))
              : T !== "0000000000.000000" &&
                (!f || T > f) &&
                ((0, o.Ay)({
                  state: g,
                }).info(
                  "COUNTS",
                  `invalidating history for channel ${v} since counts updated ${T} > cached updatedTs ${f}`
                ),
                (0, d.D1)((0, n.ZT)(g), v, (0, i.m3)(g, v)));
          }
        );
        r.meta = {
          name: "createThunk",
          key: "createThunkmaybePurgeChannelHistoryAfterMutations",
          description: "Possibly purge or invalidate channel history .",
        };
        const c = r;
      },
      9609912577: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => v,
        });
        var t = e(5824283093),
          n = e(1031947056),
          s = e(2375333597),
          i = e(3677514771),
          d = e(56548687),
          o = e(1224315998),
          a = e(9364044512),
          r = e(8847766420),
          c = e(3707193570),
          u = e(5795074931),
          l = e(6839188756);
        const m = (0, n.Ay)("Opens the apps browser modal", function (E, T) {
          let {
            initialTab: g,
            emojiNameSuggestion: I,
            elementName: f,
            emojiUrl: y,
            megaphoneEventOnClose: M,
          } = arguments.length > 2 && arguments[2] !== void 0
            ? arguments[2]
            : {};
          const p = T(),
            O = (0, r.JY)(p);
          let C;
          O && (0, c.JV)(O)
            ? (C = (0, i.H2)(p))
            : (0, u.u8)(p) && (C = (0, l.mf)((0, i.H7)(p))),
            (0, d.e)({
              getState: T,
            }).track(o.EventId.ADD_CUSTOM_EMOJI_IN_CLIENT, {
              contexts: {
                ui_context: {
                  step: "add_custom_emoji",
                  action: "click",
                  ui_properties: {
                    element_type: "button",
                    element_name: f,
                  },
                },
              },
            }),
            E(
              (0, s.q)({
                element: t.createElement(a.A, {
                  showEmojiPacks: !y,
                  orgName: C,
                  initialTab: g,
                  emojiNameSuggestion: I,
                  emojiUrl: y,
                  megaphoneEventOnClose: M,
                }),
                isStackable: !0,
              })
            );
        });
        m.meta = {
          name: "createThunk",
          key: "createThunkopenAddCustomEmojiModal",
          description: "Opens the apps browser modal",
        };
        const v = m;
      },
      9786721596: (W, A, e) => {
        "use strict";
        e.d(A, {
          U: () => m,
        });
        var t = e(1031947056),
          n = e(8677230210),
          s = e(613926746),
          i = e(8847766420),
          d = e(3244118357),
          o = e(4910963364),
          a = e(8276911661),
          r = e(5267010247),
          c = e(8822892075),
          u = e(4427921758);
        const l = (0, t.Ay)("Shows message pane for bots", function (v, E) {
          let {
            memberId: T,
            serviceId: g,
            botProfile: I,
          } = arguments.length > 2 && arguments[2] !== void 0
            ? arguments[2]
            : {};
          var f;
          const {
              member: y,
              bot: M,
              memberIsHuman: p,
            } = (0, n.Od)(E(), {
              userId: T,
              botId: g,
              botProfile: I,
            }),
            O = (0, i.ZT)(E()) || "",
            C =
              !p || g
                ? (0, d.AW)({
                    member: y || void 0,
                    bot: M,
                    botProfile: I,
                    currentTeamId: O,
                  })
                : void 0,
            h = (0, o.G2)(E(), {
              serviceId: g,
              homeWorkspaceId: C,
              memberId: T,
            });
          var D;
          const P = (0, a.nv)(
            E(),
            T ||
              ((D =
                h == null || (f = h.app_user) === null || f === void 0
                  ? void 0
                  : f.id) !== null && D !== void 0
                ? D
                : void 0)
          );
          var S;
          return v(
            (0, s.Z)({
              memberId:
                (S = P == null ? void 0 : P.id) !== null && S !== void 0
                  ? S
                  : void 0,
            })
          );
        });
        l.meta = {
          name: "createThunk",
          key: "createThunkopenMessagesForBot",
          description: "Shows message pane for bots",
        };
        const m = (0, t.Ay)(
          "Shows the flexpane profile for humans or messages for bots",
          (v, E, T, g) => {
            let { memberId: I, serviceId: f, botProfile: y } = T;
            const { currentTab: M, channelId: p } = g(u.j);
            return I && (0, n.wC)(E(), I)
              ? v(
                  M
                    ? (0, r.o)(
                        (0, c.sL)(
                          (0, c.Fo)({
                            memberId: I,
                          }),
                          p,
                          M.id
                        )
                      )
                    : (0, r.o)(
                        (0, c.Fo)({
                          memberId: I,
                        })
                      )
                )
              : v(
                  l({
                    memberId: I,
                    serviceId: f,
                    botProfile: y,
                  })
                );
          }
        );
        m.meta = {
          name: "createThunk",
          key: "createThunkopenProfile",
          description:
            "Shows the flexpane profile for humans or messages for bots",
        };
      },
      5241075893: (W, A, e) => {
        "use strict";
        e.d(A, {
          ET: () => g,
          Fd: () => f,
          Wb: () => y,
          xz: () => I,
        });
        var t = e(3297051565),
          n = e.n(t),
          s = e(5950652755),
          i = e(1031947056),
          d = e(2141099977),
          o = e(796111729),
          a = e(8847766420),
          r = e(4423055085),
          c = e(440999534),
          u = e(8802876335);
        const l = "PRESENCE-MANAGER",
          m = {},
          v = _((O, C) => {
            const h = (0, a.ZT)(C()),
              D = Object.keys(m[h]),
              P = {
                type: "presence_sub",
                ids: D,
              },
              S = (0, o.Ay)({
                getState: C,
              });
            S.debug(
              l,
              `Sending a 'presence_sub' event with the following ids: ${D}`
            ),
              O((0, d.tN)(P)).catch((b) => {
                (b && b.message === c.qk) ||
                  S.error(
                    `Received an error while trying to send 'presence_sub' with the following ids: ${D}, error = ${b}`
                  );
              });
          }, "sendMessageEvent");
        let E;
        function T() {
          return (
            E ||
              (E = (0, s.A)(v, 100, {
                leading: !1,
              })),
            E
          );
        }
        _(T, "getThrottledSendMessageEvent");
        const g = (0, i.Ay)(
          "Send a presence_sub event with the list of members we want to subscribe to receive presence_change events for",
          (O, C) => {
            if (!(0, u.ON)(C())) {
              (0, o.Ay)({
                getState: C,
              }).debug(
                l,
                "The presence subscription changed while the WebSocket disconnected; will send the updated subscription once we are connected"
              );
              return;
            }
            T()(O, C);
          }
        );
        g.meta = {
          name: "createThunk",
          key: "createThunksendPresenceSubEvent",
          description:
            "Send a presence_sub event with the list of members we want to subscribe to receive presence_change events for",
        };
        const I = (0, i.Ay)(
          "Adds the member to the presence subscription or increments the associated count",
          function (O, C) {
            let { memberId: h } =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : {};
            if (!h || h === "USLACKBOT") return;
            const D = (0, a.ZT)(C());
            if ((m[D] || (m[D] = {}), m[D][h])) {
              (0, o.Ay)({
                getState: C,
              }).debug(l, `Increasing the count for ${h} by 1`),
                (m[D][h] += 1);
              return;
            }
            (0, o.Ay)({
              getState: C,
            }).debug(l, `Adding ${h} to the presence subscription`),
              (m[D][h] = 1),
              O(g());
          }
        );
        (I.meta = {
          name: "createThunk",
          key: "createThunkaddMemberToPresenceSubscription",
          description:
            "Adds the member to the presence subscription or increments the associated count",
        }),
          (I.propTypes = {
            memberId: n().string.isRequired,
          });
        const f = (0, i.Ay)(
          "Removes the member from the presence subscription or decrements the associated count",
          function (O, C) {
            let { memberId: h } =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : {};
            if (!h) return;
            const D = (0, a.ZT)(C());
            if (!(!m[D] || !m[D][h])) {
              if (m[D][h] > 1) {
                (0, o.Ay)({
                  getState: C,
                }).debug(l, `Decreasing the count for ${h} by 1`),
                  (m[D][h] -= 1);
                return;
              }
              (0, o.Ay)({
                getState: C,
              }).debug(l, `Removing ${h} from the presence subscription`),
                delete m[D][h],
                O(g());
            }
          }
        );
        (f.meta = {
          name: "createThunk",
          key: "createThunkremoveMemberFromPresenceSubscription",
          description:
            "Removes the member from the presence subscription or decrements the associated count",
        }),
          (f.propTypes = {
            memberId: n().string.isRequired,
          });
        const y = _((O) => m[O], "getPresenceSubscriptionByTeamId"),
          M = _((O) => {
            delete m[O];
          }, "deletePresenceSubscriptionByTeamId"),
          p = {
            sendMessageEvent: v,
          };
        (0, r.ul)("presenceManager", {
          getPresenceSubscriptionByTeamId: y,
        });
      },
      5583430912: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ap: () => i,
          Pv: () => n,
          Ui: () => s,
        });
        var t = e(7223729463);
        const n = new t.a();
        function s() {
          return n
            .entries()
            .filter(
              (d) => d.value && !d.value.isRejected() && !d.value.isCancelled()
            ).length;
        }
        _(s, "getActiveCollabClientCount");
        const i = _((d) => {
          const o = n.get(d);
          return o != null && o.isFulfilled() ? o.value() : void 0;
        }, "getInitializedClient");
      },
      2580646391: (W, A, e) => {
        "use strict";
        e.d(A, {
          P: () => t,
        });
        var t;
        (function (n) {
          (n.BOOKMARK_BAR = "bookmark_bar"),
            (n.COMPOSE_BUTTON = "compose_button"),
            (n.SIDEBAR_CANVAS_CMD_CLICK = "sidebar_canvas_cmd_click"),
            (n.SIDEBAR_ADD_BUTTON = "sidebar_add_button"),
            (n.SIDEBAR_CONTEXT_MENU = "sidebar_context_menu"),
            (n.QUIP_FILE_BROWSER_NUX_CREATE_DOC =
              "quip_file_browser_nux_create_doc"),
            (n.SHORTCUT_MENU = "shortcut_menu"),
            (n.QUIP_SHORTCUT_MENU = "quip_shortcut_menu"),
            (n.HEADER_OVERFLOW_MENU = "header_overflow_menu"),
            (n.QUIP_CANVAS_CABINET_CREATE_DOC =
              "quip_canvas_cabinet_create_doc"),
            (n.SHORTCUT = "shortcut"),
            (n.CANVAS_PAGE_EMPTY_STATE_FREEMIUM =
              "canvas_page_empty_state_freemium"),
            (n.TRIAL_OFFER_MODAL = "trial_offer_modal"),
            (n.HUDDLE_ATTACHMENTS_CREATE = "huddle_attachments_create"),
            (n.QUIP_FILE_BROWSER_CREATE_DOC = "quip_file_browser_create_doc"),
            (n.BOOKMARKS_BAR_CREATE = "bookmarks_bar_create"),
            (n.CREATE_CHANNEL_SPACE = "create-channel-space"),
            (n.QUICKSWITCHER = "quickswitcher"),
            (n.FILE_MENU = "file_menu"),
            (n.CREATE_MENU = "create_menu"),
            (n.MORE_CANVASES_SIDEBAR = "more_canvases_sidebar"),
            (n.SLACK_DOCS_SIDEBAR = "slack_docs_sidebar"),
            (n.CALL_ATTACHMENTS_CREATE = "call_attachments_create"),
            (n.INSERT_CANVAS_MODAL_CREATE = "insert_canvas_modal_create"),
            (n.CREATE_HUDDLE_NOTES_DOC = "create_huddles_notes_doc"),
            (n.CREATE_SIDECAR_NOTES = "create_sidecar_notes"),
            (n.QUIP_BOOT_HOOKS = "quip_boot_hooks"),
            (n.INSERT_CANVAS_SHORTCUTS_MENU = "insert_canvas_shortcuts_menu"),
            (n.SHORTCUTS_MENU_V2_ITEM_CLICK = "shortcuts_menu_v2_item_click"),
            (n.INTERNAL_TEST = "internal_test"),
            (n.CANVASES_PEEK_VIEW = "canvases_peek_view"),
            (n.SLACK_DOCS_PEEK_VIEW = "slack_docs_peek_view"),
            (n.RESURRECTED_USER_WELCOME = "resurrected_user_welcome"),
            (n.SLASH_COMMAND = "slash_command"),
            (n.CREATE_DOC_FROM_LIST = "create_doc_from_list"),
            (n.CREATE_TEMPLATE = "create_template"),
            (n.CREATE_CANVAS_FROM_MESSAGE = "create_canvas_from_message"),
            (n.HUDDLE_MEETING_NOTES_AUTO_OPEN =
              "huddle_meeting_notes_auto_open"),
            (n.CREATE_MEETING_NOTES_FROM_PLACEHOLDER =
              "create_meeting_notes_from_placeholder"),
            (n.UNIFIED_CONTENT_BROWSER = "unified_content_browser");
        })(t || (t = {}));
      },
      4849735859: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => M,
        });
        var t = e(9706240641),
          n = e(6422693406),
          s = e(4761125736),
          i = e(1031947056),
          d = e(3577873706),
          o = e(2985066322),
          a = e(1552255081),
          r = e(82287009),
          c = e(5534420337),
          u = e(1224315998),
          l = e(56548687);
        const m = (0, i.Ay)("Clog the creation of a doc", (p, O, C) => {
          let { fileId: h, source: D } = C;
          (0, l.e)({
            getState: O,
          }).track(u.EventId.QUIP_DOC_CREATION, {
            contexts: {
              ui_context: {
                ui_properties: {
                  element_name: D,
                },
                ui_component_name: u.UiComponentName.QUIP_MAIN_EMBED,
                ui_step: u.UiStep.QUIP_CREATION,
              },
              core: {
                quip_file_id: h,
                file_id: h,
              },
            },
          });
        });
        m.meta = {
          name: "createThunk",
          key: "createThunkclogCreateDoc",
          description: "Clog the creation of a doc",
        };
        const v = m;
        var E = e(5492559860),
          T = e(2832209848),
          g = e(2494018541);
        const I = 40 * 1e3,
          f = (0, i.Ay)(
            "Finalize a temporary document",
            (function () {
              var p = (0, t.coroutine)(function* (O, C, h) {
                let { tempId: D, finalId: P, onCreate: S, source: b } = h;
                const K = yield O(
                  (0, d.A)({
                    quipThreadId: P,
                    reason: "finalize-quip-doc",
                  })
                );
                O(
                  (0, g.O)({
                    fileId: K,
                    tempId: D,
                  })
                ),
                  O(
                    (0, o.A)({
                      fileId: K,
                      lastReadByUser: Date.now(),
                    })
                  ),
                  S &&
                    (b !== "create-channel-space" &&
                      O(
                        v({
                          fileId: K,
                          source: b,
                        })
                      ),
                    S({
                      tempId: D,
                      finalId: P,
                      fileId: K,
                    }));
              });
              return function (O, C, h) {
                return p.apply(this, arguments);
              };
            })()
          );
        f.meta = {
          name: "createThunk",
          key: "createThunkfinalizeDoc",
          description: "Finalize a temporary document",
        };
        const y = (0, i.Ay)(
          "Create a Quip doc",
          (function () {
            var p = (0, t.coroutine)(function* (O, C, h) {
              let {
                onCreate: D,
                options: P,
                isChannelCanvas: S,
                source: b,
              } = h;
              const K = (0, s._Z)(C(), "canvas_tab_customization_ga") === "on";
              if (!(0, a.F)(C()))
                return (
                  (0, c.Ay)({
                    getState: C,
                  }).error(
                    new Error(
                      "Failed to create a canvas - user does not have permission"
                    )
                  ),
                  n.S.reject(new Error("Cannot create canvas"))
                );
              const B = {
                  usesOnlyInlineTextComments: !0,
                  ...P,
                },
                R = yield (yield O((0, r.lN)())).docs.create(B);
              if (R.isCreated())
                O(
                  f({
                    tempId: "",
                    finalId: R.id.get(),
                    onCreate: D,
                    source: b,
                  })
                );
              else {
                const G = setTimeout(() => {
                    (0, c.Ay)({
                      getState: C,
                    }).error(new Error("createDoc timeout"), {
                      source: b,
                      isChannelCanvas: S,
                    });
                  }, I),
                  H = _((F, V) => {
                    R.isCreated() &&
                      (clearTimeout(G),
                      O(
                        f({
                          tempId: F,
                          finalId: V,
                          onCreate: D,
                          source: b,
                        })
                      ),
                      R.id.unlisten(H));
                  }, "listener");
                R.id.listen(H);
              }
              return (
                K &&
                  !S &&
                  O(
                    (0, E.z)({
                      component: T.G7.CanvasTabCanvasCreated,
                      type: T.X8.Click,
                      reason: "canvas-created",
                    })
                  ),
                R
              );
            });
            return function (O, C, h) {
              return p.apply(this, arguments);
            };
          })()
        );
        y.meta = {
          name: "createThunk",
          key: "createThunkcreateDoc",
          description: "Create a Quip doc",
        };
        const M = y;
      },
      7260478587: (W, A, e) => {
        "use strict";
        e.d(A, {
          F$: () => m,
          hM: () => l,
          nK: () => u,
          rW: () => g,
        });
        var t = e(3385422400),
          n = e(735940183),
          s = e(9421999304),
          i = e(3677514771);
        const d = new n.Ay("slack_docs");
        var o;
        (function (I) {
          (I.WRITE = "write"),
            (I.BRAINSTORM = "brainstorm"),
            (I.SUMMARIZE = "summarize"),
            (I.ASK = "ask");
        })(o || (o = {}));
        const a = {
            size: "20",
          },
          r = {
            [o.WRITE]: {
              name: "compose",
              ...a,
            },
            [o.BRAINSTORM]: {
              name: "magic-wand",
              ...a,
            },
            [o.SUMMARIZE]: {
              name: "ai-summary",
              ...a,
            },
            [o.ASK]: {
              name: "ai-sparkle",
              ...a,
            },
          },
          c = _((I) => {
            switch (I) {
              case o.WRITE:
                return d.t("Write anything\u2026", {
                  fallbackHash: "34a8cba77ba12851739e8c07098eadfffb709a59",
                });
              case o.BRAINSTORM:
                return d.t("Brainstorm ideas", {
                  fallbackHash: "4e95058a32f7f441e0c9ae52530d203ad26c7079",
                  fallbackHashNs: "ui_generator_static",
                });
              case o.SUMMARIZE:
                return d.t("Summarize\u2026", {
                  fallbackHash: "9763dad72dd460e5575210b5538e3f1b017bce2c",
                  fallbackHashNs: "activity",
                });
              case o.ASK:
                return d.t("Ask Slack AI\u2026", {
                  fallbackHash: "8b60471a45987c1dba9971372a2d779d56411328",
                  fallbackHashNs: "view",
                });
              default:
                return "";
            }
          }, "getSuggestionName"),
          u = _((I) => {
            switch (I) {
              case o.WRITE:
                return d.t("Write about", {
                  fallbackHash: "34a8cba77ba12851739e8c07098eadfffb709a59",
                });
              case o.BRAINSTORM:
                return d.t("Brainstorm ideas for", {
                  fallbackHash: "4e95058a32f7f441e0c9ae52530d203ad26c7079",
                  fallbackHashNs: "ui_generator_static",
                });
              case o.SUMMARIZE:
                return d.t("Summarize", {
                  fallbackHash: "9763dad72dd460e5575210b5538e3f1b017bce2c",
                  fallbackHashNs: "activity",
                });
              case o.ASK:
                return d.t("Ask Slack AI:", {
                  fallbackHash: "8b60471a45987c1dba9971372a2d779d56411328",
                  fallbackHashNs: "view",
                });
              default:
                return "";
            }
          }, "getSuggestionInsertionText");
        var l;
        (function (I) {
          (I.COMMAND = "command"), (I.QUESTION = "question");
        })(l || (l = {}));
        const m = _((I) => {
            switch (I) {
              case l.COMMAND:
                return d.t("Write", {
                  fallbackHash: "564d3571acd1b3f669f762d196b6156b7aa88834",
                  fallbackHashNs: "workflow_builder",
                });
              case l.QUESTION:
                return d.t("Find", {
                  fallbackHash: "df251b06eefdaa932e97b54fbe9a74d3e606fa61",
                  fallbackHashNs: "shortcuts_flexpane",
                });
              default:
                return "";
            }
          }, "getCategoryLabel"),
          v = {
            [o.WRITE]: l.COMMAND,
            [o.BRAINSTORM]: l.COMMAND,
            [o.SUMMARIZE]: l.COMMAND,
            [o.ASK]: l.QUESTION,
          },
          E = _((I) => {
            const f = c(I),
              y = v[I],
              M = r[I];
            return {
              id: I,
              category: y,
              name: f,
              icon: M,
              canicalName: `/${I}`,
            };
          }, "getSuggestionObjectForId"),
          T = _(() => Object.values(o).map(E), "getSuggestions"),
          g = (0, t.Mz)([i.H7, () => (0, s.JK)()], (I, f) =>
            T().map((y) => ({
              ...y,
              type: "client",
            }))
          );
      },
      4119164726: (W, A, e) => {
        "use strict";
        e.d(A, {
          Aw: () => f,
          Zj: () => E,
          vK: () => T,
        });
        var t = e(3385422400),
          n = e(735940183),
          s = e(9421999304),
          i = e(4761125736),
          d = e(8079225585),
          o = e(7731278967),
          a = e(9084547259),
          r = e(4843305308),
          c = e(5244168417),
          u = e(3677514771),
          l = e(6839188756),
          m = e(6642124196);
        const v = new n.Ay("quip_shortcut_handlers");
        var E;
        (function (y) {
          (y[(y.BASICS = 0)] = "BASICS"),
            (y[(y.MEDIA = 1)] = "MEDIA"),
            (y[(y.SLACK = 2)] = "SLACK"),
            (y[(y.LAYOUT = 3)] = "LAYOUT");
        })(E || (E = {}));
        const T = _(
            () => ({
              [E.BASICS]: v.t("Basics"),
              [E.MEDIA]: v.t("Media"),
              [E.SLACK]: v.t("Slack"),
              [E.LAYOUT]: v.t("Layout"),
            }),
            "getCategoryDetailsV2"
          ),
          g = _((y) => {
            let {
              currentTeam: M,
              experimentCanvasInsertWorkflowMenuGroupOn: p,
              experimentCanvasSetReminderFromDatePickerOn: O,
              experimentCanvasCreateListPrototypeGroupOn: C,
              experimentCanvasCalloutsGroupOn: h,
              teamHasListsAccess: D,
            } = y;
            const P = (0, l.qR)(M),
              S = T(),
              b = S[E.BASICS],
              K = S[E.MEDIA],
              x = S[E.SLACK],
              B = S[E.LAYOUT],
              U = _(
                (R, G, H, F) => ({
                  id: R,
                  name: G,
                  canonicalName: H,
                  hideOnEmptyQuery: F,
                  autocomplete: !0,
                  icon: (0, r.P)(o.r.DATE_MENTION).name,
                  category: E.BASICS,
                }),
                "dateShortcut"
              );
            return [
              {
                id: c.SlackShortcutCommandType.CANVAS,
                name: (0, d.O)(o.r.CANVAS),
                canonicalName: "/canvas",
                autocomplete: !0,
                icon: (0, r.P)(o.r.CANVAS).name,
                category: E.BASICS,
                aliases: [b],
              },
              {
                id: c.SlackShortcutCommandType.CHECKLIST,
                name: (0, d.O)(o.r.CHECK_LIST),
                canonicalName: "/checklist",
                autocomplete: !0,
                icon: (0, r.P)(o.r.CHECK_LIST).name,
                category: E.BASICS,
                aliases: [b],
              },
              {
                id: c.SlackShortcutCommandType.H1,
                name: (0, d.O)(o.r.H1),
                canonicalName: "/largeheading",
                autocomplete: !0,
                icon: (0, r.P)(o.r.H1).name,
                category: E.BASICS,
                aliases: ["h1", b],
              },
              {
                id: c.SlackShortcutCommandType.H2,
                name: (0, d.O)(o.r.H2),
                canonicalName: "/mediumheading",
                autocomplete: !0,
                icon: (0, r.P)(o.r.H2).name,
                category: E.BASICS,
                aliases: ["h2", b],
              },
              {
                id: c.SlackShortcutCommandType.H3,
                name: (0, d.O)(o.r.H3),
                canonicalName: "/smallheading",
                autocomplete: !0,
                icon: (0, r.P)(o.r.H3).name,
                category: E.BASICS,
                aliases: ["h3", b],
              },
              {
                id: c.SlackShortcutCommandType.PLAIN,
                name: (0, d.O)(o.r.PARAGRAPH),
                canonicalName: "/paragraph",
                autocomplete: !0,
                icon: (0, r.P)(o.r.PARAGRAPH).name,
                category: E.BASICS,
                aliases: [v.t("plain"), b],
              },
              {
                id: c.SlackShortcutCommandType.TABLE,
                name: (0, d.O)(o.r.TABLE),
                canonicalName: "/table",
                autocomplete: !0,
                icon: (0, r.P)(o.r.TABLE).name,
                category: E.BASICS,
                aliases: [v.t("grid"), v.t("spreadsheet"), b],
              },
              {
                id: c.SlackShortcutCommandType.DIVIDER,
                name: (0, d.O)(o.r.DIVIDER),
                canonicalName: "/divider",
                autocomplete: !0,
                icon: (0, r.P)(o.r.DIVIDER).name,
                category: E.BASICS,
                aliases: [v.t("horizontal line"), b],
              },
              {
                id: c.SlackShortcutCommandType.BULLET_LIST,
                name: (0, d.O)(o.r.BULLET_LIST),
                canonicalName: "/bulletedlist",
                autocomplete: !0,
                icon: (0, r.P)(o.r.BULLET_LIST).name,
                category: E.BASICS,
                aliases: [b],
              },
              {
                id: c.SlackShortcutCommandType.ORDERED_LIST,
                name: (0, d.O)(o.r.ORDERED_LIST),
                canonicalName: "/orderedlist",
                autocomplete: !0,
                icon: (0, r.P)(o.r.ORDERED_LIST).name,
                category: E.BASICS,
                aliases: [b],
              },
              {
                id: c.SlackShortcutCommandType.BLOCKQUOTE,
                name: (0, d.O)(o.r.BLOCKQUOTE),
                canonicalName: "/blockquote",
                autocomplete: !0,
                icon: (0, r.P)(o.r.BLOCKQUOTE).name,
                category: E.BASICS,
                aliases: [b],
              },
              ...(h
                ? [
                    {
                      id: c.SlackShortcutCommandType.CALLOUT,
                      name: (0, d.O)(o.r.CALLOUT),
                      canonicalName: "/callout",
                      autocomplete: !0,
                      icon: (0, r.P)(o.r.CALLOUT).name,
                      category: E.BASICS,
                    },
                  ]
                : []),
              {
                id: c.SlackShortcutCommandType.CODE,
                name: (0, d.O)(a.L.CODE),
                canonicalName: "/code",
                autocomplete: !0,
                icon: (0, r.P)(a.L.CODE).name,
                category: E.BASICS,
                aliases: [b],
              },
              {
                ...U(
                  c.SlackShortcutCommandType.DATE_GENERIC,
                  (0, d.O)(o.r.DATE_MENTION),
                  "/date"
                ),
                aliases: [b],
              },
              U(
                c.SlackShortcutCommandType.DATE_TODAY,
                v.t("Today"),
                "/today",
                !0
              ),
              U(
                c.SlackShortcutCommandType.DATE_TOMORROW,
                v.t("Tomorrow"),
                "/tomorrow",
                !0
              ),
              U(
                c.SlackShortcutCommandType.DATE_YESTERDAY,
                v.t("Yesterday"),
                "/yesterday",
                !0
              ),
              ...(O
                ? [
                    {
                      ...U(
                        c.SlackShortcutCommandType.DATE_GENERIC,
                        v.t("Reminder", {
                          fallbackHash:
                            "b87a1929f78bee9f6f3a2ac9e30465cd226ab5ec",
                          fallbackHashNs: "slack_docs",
                        }),
                        "/reminder"
                      ),
                      aliases: [b],
                    },
                  ]
                : []),
              {
                id: c.SlackShortcutCommandType.VIDEO,
                name: (0, d.O)(o.r.VIDEO_CLIP),
                canonicalName: "/videoclip",
                autocomplete: !0,
                icon: (0, r.P)(o.r.VIDEO_CLIP).name,
                category: E.MEDIA,
                aliases: [K],
              },
              {
                id: c.SlackShortcutCommandType.AUDIO,
                name: (0, d.O)(o.r.AUDIO_CLIP),
                canonicalName: "/audioclip",
                autocomplete: !0,
                icon: (0, r.P)(o.r.AUDIO_CLIP).name,
                category: E.MEDIA,
                aliases: [K],
              },
              {
                id: c.SlackShortcutCommandType.IMAGE,
                name: (0, d.O)(o.r.IMAGE),
                canonicalName: "/image",
                autocomplete: !0,
                icon: (0, r.P)(o.r.IMAGE).name,
                category: E.MEDIA,
                aliases: [K],
              },
              {
                id: c.SlackShortcutCommandType.FILE,
                name: (0, d.O)(o.r.FILE),
                canonicalName: "/file",
                autocomplete: !0,
                icon: "file",
                category: E.MEDIA,
                aliases: [K],
              },
              ...(p && P
                ? [
                    {
                      id: c.SlackShortcutCommandType.WORKFLOW,
                      name: (0, d.O)(o.r.WORKFLOW, {
                        experimentCanvasInsertWorkflowMenuGroupOn: p,
                      }),
                      canonicalName: "/workflow",
                      autocomplete: !0,
                      icon: (0, r.P)(o.r.WORKFLOW).name,
                      category: E.SLACK,
                      aliases: [x],
                    },
                  ]
                : []),
              ...(C && D
                ? [
                    {
                      id: c.SlackShortcutCommandType.LIST,
                      name: (0, d.O)(o.r.LIST),
                      canonicalName: "/list",
                      autocomplete: !0,
                      icon: (0, r.P)(o.r.LIST).name,
                      category: E.SLACK,
                      aliases: [x],
                    },
                  ]
                : []),
              {
                id: c.SlackShortcutCommandType.PROFILE,
                name: v.t("Profile"),
                canonicalName: "/profile",
                autocomplete: !0,
                icon: "user",
                category: E.SLACK,
                aliases: [x, v.t("user"), v.t("mention")],
              },
              {
                id: c.SlackShortcutCommandType.CHANNEL,
                name: v.t("Channel"),
                canonicalName: "/channel",
                autocomplete: !0,
                icon: "channel-add",
                category: E.SLACK,
                aliases: [x],
              },
              {
                id: c.SlackShortcutCommandType.TWO_COLUMNS,
                name: (0, d.O)(o.r.LAYOUT_2_COLUMNS),
                canonicalName: "/twocolumns",
                autocomplete: !0,
                icon: (0, r.P)(o.r.LAYOUT_2_COLUMNS).name,
                category: E.LAYOUT,
                aliases: [B],
              },
              {
                id: c.SlackShortcutCommandType.THREE_COLUMNS,
                name: (0, d.O)(o.r.LAYOUT_3_COLUMNS),
                canonicalName: "/threecolumns",
                autocomplete: !0,
                icon: (0, r.P)(o.r.LAYOUT_3_COLUMNS).name,
                category: E.LAYOUT,
                aliases: [B],
              },
              {
                id: c.SlackShortcutCommandType.CODEBLOCK,
                name: (0, d.O)(o.r.CODE_BLOCK),
                canonicalName: "/codeblock",
                autocomplete: !0,
                icon: (0, r.P)(o.r.CODE_BLOCK).name,
                category: E.LAYOUT,
                aliases: [B],
              },
            ];
          }, "getCommandsV2");
        function I(y) {
          return {
            ...y,
            type: "client",
          };
        }
        _(I, "formatShortcut");
        const f = (0, t.Mz)(
          [
            u.H7,
            (y) => (0, i._Z)(y, "canvas_insert_workflow_menu") === "on",
            (y) =>
              (0, i._Z)(y, "canvas_set_reminder_from_date_picker") === "on",
            (y) => (0, i._Z)(y, "canvas_create_list_prototype") === "on",
            (y) => (0, i._Z)(y, "canvas_callouts") === "on",
            (y) => (0, m.teamHasFullListsAccess)(y),
            () => (0, s.JK)(),
            (y, M) => M,
          ],
          (y, M, p, O, C, h, D, P) =>
            g({
              currentTeam: y,
              experimentCanvasInsertWorkflowMenuGroupOn: M,
              experimentCanvasSetReminderFromDatePickerOn: p,
              experimentCanvasCreateListPrototypeGroupOn: O,
              experimentCanvasCalloutsGroupOn: C,
              teamHasListsAccess: h,
            })
              .map(I)
              .filter((b) => P || !b.hideOnEmptyQuery)
        );
      },
      9121476043: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => r,
        });
        var t = e(1031947056),
          n = e(9536404279),
          s = e(10127715),
          i = e(7606781622),
          d = e(3164289453),
          o = e(3110884894);
        const a = (0, t.Ay)(
          "Remove a message and its timestamp",
          function (c, u) {
            let {
              channelId: l,
              ts: m,
              threadTs: v,
              broadcastDelete: E = !1,
            } = arguments.length > 2 && arguments[2] !== void 0
              ? arguments[2]
              : {};
            if (!(!l || !m))
              if (E)
                c(
                  (0, s.E$)({
                    channelId: l,
                    ts: m,
                  })
                );
              else {
                c(
                  (0, n.Np)({
                    channelId: l,
                    timestamp: m,
                  })
                );
                const T = !1,
                  g = (0, i.Ld)(u(), l, m, T),
                  I = (g && g.thread_ts) || v;
                if (I) {
                  const f = (0, o.Iu)(l, I) || "";
                  c(
                    (0, n.Np)({
                      channelId: f,
                      timestamp: m,
                    })
                  );
                }
                c(
                  (0, s.QN)({
                    message: {
                      channel: l,
                      ts: m,
                    },
                  })
                ),
                  c(
                    (0, d.A)({
                      channelId: l,
                      item: g,
                    })
                  );
              }
          }
        );
        a.meta = {
          name: "createThunk",
          key: "createThunkremoveMessageAndTimestamp",
          description: "Remove a message and its timestamp",
        };
        const r = a;
      },
      3164289453: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
        });
        var t = e(3297051565),
          n = e.n(t),
          s = e(2140362605);
        const i = (0, s.Ay)("(noop) Remove a pinned item via side-effect");
        (i.meta = {
          name: "createAction",
          key: "createActionremovePinnedItemCircular",
          description: "(noop) Remove a pinned item via side-effect",
        }),
          (i.propTypes = n().shape({
            item: n().object.isRequired,
            channelId: n().string.isRequired,
          }).isRequired);
        const d = i;
      },
      8391820676: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => b,
        });
        var t = e(6422693406),
          n = e(6696292586),
          s = e(8086952004),
          i = e(12126472),
          d = e(3398586081),
          o = e(5950652755),
          a = e(1031947056),
          r = e(6533394955),
          c = e(5795074931),
          u = e(8847766420),
          l = e(2155512519),
          m = e(1116859610),
          v = e(9101533895),
          E = e(9536404279),
          T = e(1407713935),
          g = e(1581380967),
          I = e(3110884894),
          f = e(10127715),
          y = e(3087402890),
          M = e(6704899486),
          p = e(796111729),
          O = e(8802876335);
        const C = 1e3,
          h = _((x, B, U) => {
            if (B === "Vall_threads")
              return (0, r.dispatchForTeamId)(x, (0, y.r8)()), t.K.resolve();
            const R = !1,
              G = (0, v.OL)((0, r.getStateByTeamId)(x), B, R);
            if (!G) return t.K.resolve();
            if (U) return D(x, B, U);
            const H = (0, T.mz)(G);
            return (0, r.dispatchForTeamId)(
              x,
              (0, l.Ay)({
                channelId: B,
                type: H,
                oldest: null,
                latest: null,
                reason: "requestOfflineHistory",
              })
            )
              .then(function () {
                let {
                  msgs: F,
                  hasMore: V,
                  isLimited: X,
                  pinCount: q,
                  deleted: oe,
                } = arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : {};
                const z = (0, r.getStateByTeamId)(x);
                ((0, O.UJ)(z) &&
                  !(0, M.N)(z, B) &&
                  !(0, M.N)(z, (0, c.WR)(z))) ||
                  ((0, r.dispatchForTeamId)(
                    x,
                    (0, E.Jt)({
                      channelId: B,
                    })
                  ),
                  (0, r.dispatchForTeamId)(
                    x,
                    (0, m.A)({
                      msgs: F,
                      channelId: B,
                      isLimited: X,
                      pinCount: q,
                      hasMore: {
                        hasMoreStart: V,
                        hasMoreEnd: !1,
                      },
                      oldest: null,
                      latest: null,
                      deleted: oe,
                    })
                  ),
                  (0, n.A)(q) &&
                    (0, r.dispatchForTeamId)(
                      x,
                      (0, g.K)({
                        channelId: B,
                        count: q,
                      })
                    ));
              })
              .catch((F) => {
                (0, p.Ay)({
                  state: (0, r.getStateByTeamId)(x),
                }).error(`Failed to fetch offline history for ${B}: ${F}`);
              });
          }, "fetchOfflineHistory");
        function D(x, B, U) {
          const R = (0, I.Iu)(B, U);
          return (0, r.dispatchForTeamId)(
            x,
            (0, l.$b)({
              channelId: B,
              threadTs: U,
              oldest: null,
              latest: null,
              reason: "requestOfflineHistory",
            })
          ).then(function () {
            let {
              msgs: G,
              deleted: H,
              hasMore: F,
            } = arguments.length > 0 && arguments[0] !== void 0
              ? arguments[0]
              : {};
            const V = (0, r.getStateByTeamId)(x);
            if ((0, O.UJ)(V) && !(0, M.N)(V, B) && !(0, M.N)(V, (0, c.WR)(V)))
              return;
            let X = G;
            const q = (0, s.A)(G, {
              ts: U,
            });
            F &&
              (X = (0, i.A)(G, {
                ts: U,
              })),
              (0, r.dispatchForTeamId)(
                x,
                (0, E.Jt)({
                  channelId: R,
                })
              ),
              (0, r.dispatchForTeamId)(
                x,
                (0, m.A)({
                  msgs: X,
                  channelId: R,
                  hasMore: {
                    hasMoreStart: F,
                    hasMoreEnd: !1,
                  },
                  oldest: null,
                  latest: null,
                  deleted: H,
                })
              ),
              q && (0, r.dispatchForTeamId)(x, (0, f.Kc)([q]));
          });
        }
        _(D, "fetchOfflineHistoryForThread");
        const P = (() => {
            const x = (0, d.A)(
              () => (0, o.A)(h, C),
              function () {
                for (
                  var B = arguments.length, U = new Array(B), R = 0;
                  R < B;
                  R++
                )
                  U[R] = arguments[R];
                return JSON.stringify(U);
              }
            );
            return function () {
              for (
                var B = arguments.length, U = new Array(B), R = 0;
                R < B;
                R++
              )
                U[R] = arguments[R];
              return x(...U)(...U);
            };
          })(),
          S = (0, a.Ay)("Request offline history", function (x, B) {
            let { channelId: U, threadTs: R } =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : {};
            return P((0, u.ZT)(B()), U, R);
          });
        (S.meta = {
          name: "createThunk",
          key: "createThunkrequestOfflineHistory",
          description: "Request offline history",
        }),
          (S.propTypes = {});
        const b = S,
          K = {
            fetchOfflineHistory: h,
            fetchOfflineHistoryForThread: D,
          };
      },
      4587446194: (W, A, e) => {
        "use strict";
        e.d(A, {
          NU: () => $,
          e8: () => N,
          Ay: () => ke,
          IY: () => ne,
        });
        var t = e(2003990933),
          n = e(7174777686),
          s = e(3571452446),
          i = e(1649982175),
          d = e(3110884894),
          o = e(5795074931),
          a = e(8847766420),
          r = e(9536404279),
          c = e(9101533895),
          u = e(10127715),
          l = e(6483201417),
          m = e(6704899486),
          v = e(1031947056),
          E = e(796111729),
          T = e(9190452268),
          g = e(3855029223),
          I = e(3158767748),
          f = e(7715417323),
          y = e(9762304444);
        const M = (0, y.Ay)(
          "TS.channels.read_only.stashAndFetchChannelPostingUpdates",
          f.A
        );
        var p = e(2664504268),
          O = e(662226046),
          C = e(9121476043),
          h = e(8391820676),
          D = e(6422693406),
          P = e(6580433553),
          S = e(6533394955),
          b = e(2872463257);
        const K = {},
          x = "cse-message-send",
          B = "cse-message-send";
        let U = _(
          class {
            _send() {
              var fe;
              const {
                message: re,
                trace: le,
                parentSpanId: Re,
              } = this._activeRequest || {};
              (0, E.Ay)({
                teamId: this._teamId,
              }).action(
                "MESSAGE-Q",
                `Sending message with clientMsgId ${
                  re == null ? void 0 : re.client_msg_id
                }`
              );
              const ye = _(() => {
                var Te;
                return (Te = this._store) === null || Te === void 0
                  ? void 0
                  : Te.dispatch(
                      (0, P.A)({
                        message: re,
                        traceId: le == null ? void 0 : le.getTraceId(),
                        parentSpanId: Re,
                      })
                    );
              }, "postMessageP");
              return (fe = this._maybeTraceMessageSend(ye)) === null ||
                fe === void 0
                ? void 0
                : fe
                    .then(
                      this._activeRequest ? this._activeRequest.resolve : f.A
                    )
                    .catch(
                      this._activeRequest ? this._activeRequest.reject : f.A
                    )
                    .finally(() => this.resolve(re));
            }
            _next() {
              if (this._activeRequest || !this._queue.length) return !1;
              this._activeRequest = this._queue.shift();
              const { messageEnqueueSpan: fe } = this._activeRequest || {};
              return (
                fe == null ||
                  fe.addTags({
                    count: this._queue.length,
                  }),
                fe == null || fe.close(),
                this._send(),
                (0, E.Ay)({
                  teamId: this._teamId,
                }).action(
                  "MESSAGE-Q",
                  `Shifting queue, now has ${this._queue.length} messages`
                ),
                !0
              );
            }
            _maybeTraceMessageSend(fe) {
              var re;
              if (!this.shouldTraceMessageSend()) return fe();
              const le =
                  (re = this._tracer) === null || re === void 0
                    ? void 0
                    : re.createTrace({
                        traceName: x,
                        tags: {
                          event_type: "/api/chat.postMessage",
                        },
                        samplingOptions: {
                          sampleType: b.nl.ALWAYS,
                        },
                      }),
                Re = _(() => {
                  var Te;
                  le &&
                    ((Te = this._tracer) === null ||
                      Te === void 0 ||
                      Te.clearTrace(le));
                }, "onResolve"),
                ye = _((Te, De) => {
                  var Ue;
                  const Ke = {
                    state: b.$m.ERROR,
                  };
                  De.status && (Ke.status = De.status),
                    De.message && (Ke.message = De.message),
                    De.data && De.data.error && (Ke.reason = De.data.error),
                    Te == null || Te.addTags(Ke),
                    Te == null || Te.close(),
                    le &&
                      ((Ue = this._tracer) === null ||
                        Ue === void 0 ||
                        Ue.reportTrace(le));
                }, "onError");
              return le == null
                ? void 0
                : le.traceFn(
                    {
                      name: B,
                      onError: ye,
                      onResolve: Re,
                    },
                    fe
                  );
            }
            enqueue(fe) {
              let { trace: re, parentSpanId: le } =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : {};
              return new D.S((Re, ye) => {
                const Te =
                  re == null
                    ? void 0
                    : re.startSpan("message_send_attempt:enqueue", {
                        parentSpanId: le,
                      });
                this._queue.push({
                  message: fe,
                  messageEnqueueSpan: Te,
                  trace: re,
                  parentSpanId: le,
                  resolve: Re,
                  reject: ye,
                }),
                  (0, E.Ay)({
                    teamId: this._teamId,
                  }).action(
                    "MESSAGE-Q",
                    `Enqueueing message with clientMsgId ${fe.client_msg_id}, queue has ${this._queue.length} messages`
                  ),
                  this._next();
              });
            }
            resolve(fe) {
              return !fe ||
                !this._activeRequest ||
                !this._activeRequest.message ||
                fe.client_msg_id !== this._activeRequest.message.client_msg_id
                ? !1
                : ((0, E.Ay)({
                    teamId: this._teamId,
                  }).action(
                    "MESSAGE-Q",
                    `Resolving active request with clientMsgId ${fe.client_msg_id}`
                  ),
                  (this._activeRequest = null),
                  this._next());
            }
            shouldTraceMessageSend() {
              return this._tracer;
            }
            constructor(fe) {
              if (!fe) throw new Error("MessageQueue requires a teamId.");
              if (
                ((this._teamId = fe),
                (this._activeRequest = null),
                (this._queue = []),
                (this._store = (0, S.getStoreInstanceByTeamId)(fe)),
                !this._store)
              )
                throw new Error(
                  `MessageQueue requires a store; No store matching ${fe} found.`
                );
              const re = this._store.getState();
              this._tracer = (0, g.E)({
                state: re,
              });
            }
          },
          "MessageQueue"
        );
        function R(ge) {
          return K[ge] || (K[ge] = new U(ge)), K[ge];
        }
        _(R, "getInstance");
        const G = {
          MESSAGE_SEND_TRACE_LABEL: x,
          MESSAGE_SEND_SPAN_LABEL: B,
        };
        var H = e(9781145568),
          F = e(8802876335),
          V = e(5345057011),
          X = e(5774398667),
          q = e(4177200783),
          oe = e(7759525289),
          z = e(4761125736);
        const Ae = 6,
          ae = 7,
          de = 8,
          ve = "restricted_action_read_only_channel",
          Se = "restricted_action_thread_only_channel",
          Ee = "restricted_action_non_threadable_channel",
          be = "ekm_access_denied",
          Ce = "dlp_user_warning",
          Z = "message_limit_exceeded";
        var $;
        (function (ge) {
          (ge.BLOCK_FILES_LINK_TYPE =
            "slack_connect_file_link_sharing_blocked"),
            (ge.BLOCK_CANVAS_CONTAIN_FILES_TYPE =
              "slack_connect_canvas_contain_file_sharing_blocked"),
            (ge.BLOCK_CANVAS_CONTAIN_EMBEDDED_FILES_TYPE =
              "slack_connect_canvas_contain_embedded_files_blocked"),
            (ge.BLOCK_LIST_CONTAIN_FILES_TYPE =
              "slack_connect_list_contain_file_sharing_blocked");
        })($ || ($ = {}));
        var N;
        (function (ge) {
          (ge.SLACK_CONNECT_CANVAS_SHARING_BLOCKED =
            "slack_connect_canvas_sharing_blocked"),
            (ge.SLACK_CONNECT_FILE_UPLOAD_SHARING_BLOCKED =
              "slack_connect_file_upload_sharing_blocked"),
            (ge.SLACK_CONNECT_TEAM_BLOCKED = "slack_connect_team_blocked");
        })(N || (N = {}));
        const L = {
          [ve]: Ae,
          [Se]: ae,
          [Ee]: de,
        };
        function w(ge, fe) {
          ge((0, u.Kc)([fe]));
          const re = {
            channelId: fe.channel,
            timestamps: [fe.ts],
            oldest: fe.ts,
            hasMore: !1,
            append: !0,
          };
          if ((ge((0, r.VG)(re)), fe.thread_ts)) {
            const le = (0, d.Iu)(fe.channel, fe.thread_ts);
            ge(
              (0, r.VG)({
                ...re,
                channelId: le,
              })
            );
          }
        }
        _(w, "addMsgToEnd");
        const k = {};
        function J(ge, fe, re) {
          k[ge] || (k[ge] = {}), (k[ge][fe] = re);
        }
        _(J, "addResolutionTimer");
        function ee(ge, fe) {
          !k[ge] || !k[ge][fe] || (clearTimeout(k[ge][fe]), delete k[ge][fe]);
        }
        _(ee, "cancelResolutionTimer");
        function ne(ge, fe, re, le) {
          const Re = (0, a.ZT)(ge()) || "",
            ye = (0, X.I)(ge(), le.client_msg_id);
          if (ye) {
            (0, E.Ay)({
              getState: ge,
            }).action(
              "MESSAGE",
              `Resolved a message with clientMsgId ${le.client_msg_id} in ${re.channel} with ts ${le.ts}`
            ),
              fe((0, V.s)(ye.clientMsgId)),
              ee(Re, ye.clientMsgId),
              fe(
                (0, C.A)({
                  channelId: ye.channelId,
                  ts: ye.ts,
                })
              );
            const Te = !1;
            (0, c.OL)(ge(), re.channel, Te) &&
              fe(
                (0, H.A)({
                  channelId: re.channel,
                  msgTs: re.ts,
                  resent: !1,
                })
              );
          }
          R(Re).resolve(le);
        }
        _(ne, "resolveMessage");
        const pe = "cse-message-send:send",
          Me = (0, v.Ay)("Send a message", (ge, fe, re) => {
            let {
              messageSendTrace: le,
              notificationTracePassthroughData: Re,
              skipDLPUserWarning: ye,
              ...Te
            } = re;
            const De = (0, g.E)({
              getState: fe,
            });
            let Ue, Ke;
            le &&
              ((Ue = le.startSpan("message_send_attempt:send")),
              (Ke = le.startSpan("message_send_attempt:placeholder", {
                parentSpanId: Ue == null ? void 0 : Ue.getId(),
              })));
            const Ze = De.createMetricsTrace({
              label: "cse-message-send",
            });
            Ze.count({
              name: pe,
              label: "pending",
            }),
              De.reportTrace(Ze);
            const Q = (0, I.A)(1),
              {
                channel: ie,
                reply_broadcast: Ve,
                thread_ts: xe,
                client_msg_id: je,
                xArgs: Fe,
              } = Te,
              He = (0, E.Ay)({
                getState: fe,
              }),
              Oe = (0, a.ZT)(fe()) || "",
              Ye = xe
                ? {
                    _hidden_reply: !0,
                    _was_reply_broadcast: Ve,
                  }
                : null,
              at = je || (0, p.A)();
            Re &&
              (0, O.qe)(fe(), {
                notificationTracePassthroughData: Re,
                clientMsgId: at,
              });
            const _t = (0, z._Z)(fe(), "fe_message_rendering_perf_m1") === "on",
              pt = Te.blocks,
              Qe = {
                ...Te,
                ...Ye,
                user: (0, o.WR)(fe()),
                showResend: !1,
                showCancel: !1,
                is_pending: !0,
                client_msg_id: at,
                blocksProcessed: (0, oe.R)({
                  blocks: pt,
                  experimentFeMessageRenderingPerfM1GroupOn: _t,
                }),
              };
            He.action(
              "MESSAGE",
              `Sent a message to ${ie} via HTTP, clientMsgId: ${at}`
            );
            const ct = {
              ...Te,
              ...Fe,
              include_channel_perm_error: !0,
              client_msg_id: at,
              skip_dlp_user_warning: ye,
            };
            Q &&
              J(
                Oe,
                at,
                window.setTimeout(() => {
                  if ((0, X.I)(fe(), Qe.client_msg_id)) {
                    const an = fe();
                    (0, F.UJ)(an) &&
                      (0, T.Cy)({
                        state: an,
                      }).count(
                        "msg_send_placeholder_not_resolved_connected_60s"
                      );
                  }
                }, 1e3 * 60)
              );
            const Pt = R((0, a.ZT)(fe()) || "").enqueue(ct, {
              trace: le,
              parentSpanId: Ue == null ? void 0 : Ue.getId(),
            });
            w(ge, Qe),
              ge(
                (0, V.T)({
                  clientMsgId: Qe.client_msg_id,
                  channelId: Qe.channel,
                  ts: Qe.ts,
                })
              ),
              xe ||
                ge(
                  (0, l.A)({
                    ts: null,
                  })
                ),
              Ke == null || Ke.close();
            const zt = (0, z._Z)(fe(), "ecompl_custom_dlp_text") === "on";
            return Pt.tap(() => {
              const an = fe();
              (!(0, F.UJ)(an) ||
                (0, m.N)(an, ie) ||
                (0, m.N)(an, (0, o.WR)(an))) &&
                (ge(
                  (0, h.A)({
                    channelId: ie,
                    threadTs: xe,
                  })
                ),
                Ve &&
                  ge(
                    (0, h.A)({
                      channelId: ie,
                    })
                  )),
                Ze.count({
                  name: pe,
                  label: "success",
                }),
                De.reportTrace(Ze),
                le &&
                  (le.addTags({
                    success: !0,
                  }),
                  Ue == null || Ue.close(),
                  De.reportTrace(le));
            }).catch((an) => {
              const Qt = (0, t.A)(an, "data.error"),
                tn = zt ? (0, t.A)(an, "data.dlp_custom_message") : void 0;
              Ze.count({
                name: pe,
                label: "failure",
              }).setTag("error", Qt || (an == null ? void 0 : an.message)),
                De.reportTrace(Ze);
              const Ht = Qt === be,
                Kt = Qt === Ce,
                qt = Qt === Z,
                Tn = Object.values(N).includes(Qt) ? Qt : void 0,
                Mt = Object.values($).includes(Qt) ? Qt : void 0;
              if (!Qt && !(0, X.I)(fe(), Qe.client_msg_id)) {
                He.info(
                  "MESSAGE",
                  "Ignoring non-backend chat.postMessage error since the message already came in over socket"
                );
                return;
              }
              const Jt = L[Qt];
              let dn = !0;
              const rn = !0,
                gn = [Ae, ae, de, ve, Se, Ee];
              (0, n.A)(gn, Qt) &&
                (M(ie, Jt, "send-message/sendMessage.catch"), (dn = !1)),
                Ht && (dn = !1),
                Mt && (dn = !1),
                qt && ((dn = !1), ge((0, q.A)())),
                Tn && (dn = !1);
              const Zt = "Message failed to send",
                Vt = (0, s.A)(an, [
                  "status",
                  "retryAfter",
                  "attempts",
                  "data.ok",
                  "data.error",
                  "args._x_reason",
                  "args.channel",
                  "args.ts",
                  "args.thread_ts",
                  "args.reply_broadcast",
                ]);
              (Vt.client_msg_id = at), (Vt.channel = ie), (Vt.thread_ts = xe);
              const Sn =
                an && an.status === 429
                  ? "message_send_ratelimit"
                  : "message_send_fail";
              He.error(
                Vt instanceof Error ? Vt : new Error(Zt),
                `${Zt}: ${Qt} | ${JSON.stringify(Vt)}`,
                {
                  subtype: Sn,
                }
              );
              const ze = Qt ? (0, i.A)(Vt, ["response"]) : an;
              He.error("MESSAGE", Zt, Qt, ze);
              const Ot = {
                ...Qe,
                showResend: dn,
                showCancel: rn,
                isEKMError: Ht,
                isDLPUserWarningError: Kt,
                canvasSharingError: Tn,
                blockFileLinkSharingError: Mt,
                ...(zt
                  ? {
                      dlpCustomMessage: tn,
                    }
                  : {}),
              };
              (0, X.I)(fe(), Qe.client_msg_id)
                ? ge((0, u.Kc)([Ot]))
                : w(ge, Ot),
                !dn && Q && ee(Oe, Qe.client_msg_id),
                le &&
                  (dn
                    ? (le.addTags({
                        success: !1,
                      }),
                      Ue == null || Ue.close(),
                      De.reportTrace(le))
                    : De.clearTrace(le));
            });
          });
        Me.meta = {
          name: "createThunk",
          key: "createThunksendMessage",
          description: "Send a message",
        };
        const ke = Me;
      },
      5363983309: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => v,
        });
        var t = e(5824283093),
          n = e(8212623464),
          s = e(1031947056),
          i = e(6533394955),
          d = e(8847766420),
          o = e(2567914105),
          a = e(2375333597),
          r = e(8726613433),
          c = e(5258584090),
          u = e(4518410378);
        function l() {
          return (
            (l =
              Object.assign ||
              function (E) {
                for (var T = 1; T < arguments.length; T++) {
                  var g = arguments[T];
                  for (var I in g)
                    Object.prototype.hasOwnProperty.call(g, I) && (E[I] = g[I]);
                }
                return E;
              }),
            l.apply(this, arguments)
          );
        }
        _(l, "_extends");
        const v = _(
          (E, T) =>
            (0, s.Ay)(`XWS open ${E.displayName} modal`, (g, I, f, y) => {
              const {
                modalName: M,
                allowMultiple: p = !0,
                isStackable: O = !1,
                renderInChildWindow: C = !1,
              } = T || {};
              let h,
                D = C;
              const P = y(c.S);
              if (
                ((P == null ? void 0 : P.windowRef.deref()) !== u.J &&
                  P != null &&
                  P.windowId &&
                  ((D = !0), (h = P.windowId)),
                !p &&
                  M &&
                  (0, o.wc)(I(), h).find((G) => {
                    let { name: H } = G;
                    return H === M;
                  }))
              )
                return;
              const S = (0, d.ZT)(I()),
                b = (0, r.vB)(I()),
                K = (0, i.getStoreInstanceByTeamId)(S);
              let x,
                B = t.createElement(
                  E,
                  l({}, f, {
                    closeModal: () => (x == null ? void 0 : x()),
                  })
                );
              D ||
                (B = t.createElement(
                  n.Kq,
                  {
                    store: K,
                  },
                  B
                ));
              let U;
              return (
                D
                  ? (U = g(
                      (0, a.q)({
                        element: B,
                        name: M || void 0,
                        isStackable: O,
                      })
                    ))
                  : (U = (0, i.dispatchForTeamId)(
                      b,
                      (0, a.q)({
                        element: B,
                        name: M || void 0,
                        isStackable: O,
                      })
                    )),
                (x = U.close),
                U
              );
            }),
          "createXWSModalThunk"
        );
      },
      2371143272: (W, A, e) => {
        "use strict";
        e.d(A, {
          b: () => d,
          i: () => i,
        });
        var t = e(3398586081),
          n = e(6917917245),
          s = e(1658558415);
        const i = "sentry_fe_perf",
          d = (0, t.A)(() => ((0, s.A)() ? !1 : (0, n.fW)(i)));
      },
      7206394193: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => a,
        });
        var t = e(8571983633),
          n = e(9686962598),
          s = e(6926388022),
          i = e(1527536225),
          d = e(5219503691);
        const o = (0, i.Ay)(
          "Logs helpful messages to the console if you do something incorrect",
          (r, c, u) => {
            if ((0, t.A)(u) || (0, n.A)(u))
              return (
                d.Qs &&
                  (0, s.z3)(
                    "It looks like you dispatched null or undefined, instead of an action or a thunk. Check the stack trace of this error to see where this mistake is occurring."
                  ),
                null
              );
            if (u.isThunkCreator || u.isActionCreator) {
              if (d.Qs) {
                const l = u.isThunkCreator ? "thunk" : "action",
                  m = u.meta ? u.meta.name : `${l}Creator`;
                (0, s.z3)(`
	It looks like you dispatched a ${l} creator instead of the ${l} itself!
	This is a common mistake, and the solution is to call dispatch(${m}(payload)) instead of just dispatch(${m}), note the extra parens at the end.
				`);
              }
              return null;
            }
            return (0, d.ZR)(u), c(u);
          }
        );
        o.meta = {
          name: "createMiddleware",
          key: "createMiddlewarehelpfulMessagingMiddleware",
          description:
            "Logs helpful messages to the console if you do something incorrect",
        };
        const a = o;
      },
      773865333: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => c,
        });
        var t = e(862210999),
          n = e(796111729),
          s = e(4724591729),
          i = e(1527536225),
          d = e(4423055085);
        let o = [];
        const a = (0, n.Wo)(),
          r = (0, i.Ay)(
            "Allows devs to get console logging or trigger breakpoints when state they care about changes",
            (m, v, E) => {
              const T = [],
                g = m.getState();
              o.forEach((y) => {
                T.push(y(g, E));
              });
              const I = v(E),
                f = m.getState();
              return (
                o.forEach((y, M) => {
                  const p = y(f, E);
                  if (T[M] !== p) {
                    const O = [
                      "Redux Watcher:",
                      `Value has changed! 
Action: `,
                      E,
                      `
Before: `,
                      T[M],
                      `
After:  `,
                      p,
                    ];
                    if (T[M] !== void 0 && p !== void 0) {
                      const C = T[M] === void 0 ? {} : T[M],
                        h = p === void 0 ? {} : p;
                      O.push(
                        `
Diff: `,
                        Object.keys({
                          ...C,
                          ...h,
                        })
                          .filter((D) => C[D] !== h[D])
                          .map((D) => ({
                            key: D,
                            before: C[D],
                            after: h[D],
                          }))
                      );
                    }
                    if ((a.warn(...O), (0, s.Cu)() || (0, s.b3)())) debugger;
                  }
                }),
                I
              );
            }
          );
        r.meta = {
          name: "createMiddleware",
          key: "createMiddlewarereduxWatcherMiddleware",
          description:
            "Allows devs to get console logging or trigger breakpoints when state they care about changes",
        };
        const c = r;
        function u(m) {
          if (!(0, t.A)(m)) {
            a.error("watcherFn passed in to addWatcher must be a function");
            return;
          }
          o.push(m);
        }
        _(u, "addWatcher");
        function l() {
          o = [];
        }
        _(l, "clearAllWatchers"),
          (0, d.ul)("reduxWatcher", {
            addWatcher: u,
            clearAllWatchers: l,
          });
      },
      7156104699: (W, A, e) => {
        "use strict";
        e.d(A, {
          N: () => m,
          A: () => l,
        });
        var t = e(1527536225),
          n = e(6152845331),
          s = e(8161242485);
        const i = (0, s.Ay)((v) => {
          var E;
          return v == null || (E = v.sideEffects) === null || E === void 0
            ? void 0
            : E.sideEffectsMap;
        });
        i.meta = {
          name: "createSelector",
          key: "createSelectorgetSideEffectsMap",
          description: (v) => {
            var E;
            return v == null || (E = v.sideEffects) === null || E === void 0
              ? void 0
              : E.sideEffectsMap;
          },
        };
        const d = (0, s.Ay)((v) => {
          var E;
          return v == null || (E = v.clientSideEffects) === null || E === void 0
            ? void 0
            : E.clientSideEffectsMap;
        });
        d.meta = {
          name: "createSelector",
          key: "createSelectorgetClientSideEffectsMap",
          description: (v) => {
            var E;
            return v == null ||
              (E = v.clientSideEffects) === null ||
              E === void 0
              ? void 0
              : E.clientSideEffectsMap;
          },
        };
        var o = e(796111729),
          a = e(6422693406);
        function r() {
          return (0, t.Ay)("Handle client side effects", (v, E, T) => {
            var g;
            if (
              !((g = T.__test) === null || g === void 0) &&
              g.disableSideEffects
            )
              return E(T);
            const I = v.getState(),
              f = d(I);
            return (
              u({
                store: v,
                action: T,
                sideEffectsMap: f,
              }),
              E(T)
            );
          });
        }
        _(r, "createClientSideEffectsMiddleware");
        function c() {
          return (0, t.Ay)("Handle side effects", (v, E, T) => {
            var g;
            if (
              !((g = T.__test) === null || g === void 0) &&
              g.disableSideEffects
            )
              return E(T);
            const I = v.getState(),
              f = i(I);
            return (
              u({
                store: v,
                action: T,
                sideEffectsMap: f,
              }),
              E(T)
            );
          });
        }
        _(c, "createSideEffectsMiddleware");
        function u(v) {
          let { store: E, action: T, sideEffectsMap: g } = v;
          const I = g && g[T.type],
            f = _((y) => ((0, n.S$)(T, y), E.dispatch(y)), "wrappedDispatch");
          I != null &&
            I.length &&
            a.S.resolve().then(() => {
              I.forEach((y) => {
                if (!y) return;
                const { thunk: M } = y;
                try {
                  f(M(T));
                } catch (p) {
                  (0, o.Ay)({
                    getState: E.getState,
                  }).error(
                    "SIDE-EFFECTS",
                    `Error in side effect for '${T.type}'`,
                    p,
                    {
                      subtype: "side_effect_error",
                    }
                  );
                }
              });
            });
        }
        _(u, "runSideEffects");
        const l = c(),
          m = r();
      },
      8333842125: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => c,
        });
        var t = e(1416482128),
          n = e(4724591729),
          s = e(3202757386),
          i = e(4157777698);
        const d = _((u) => {
            switch (u.type) {
              case i.f0.getType():
                return {
                  ...u,
                  payload:
                    "Channel bulk add payload is too big to output to redux devtools",
                };
              default:
                return u;
            }
          }, "actionSanitizer"),
          o = (0, s.A)()
            ? void 0
            : () => ({
                apologies:
                  "Serializing our large state kept crashing redux devtools. I hope to bring it back someday, but for now you can see the state by using `TS.redux.getState()` in the console",
              }),
          r = {
            autoPause: !0,
            actionSanitizer: d,
            stateSanitizer: o,
            maxAge: 1e3,
            features: {
              pause: !0,
            },
          };
        function c(u) {
          let {
            teamOrEnterpriseId: l,
            appName: m = "",
            customEnhancers: v,
            middlewares: E,
            disableDevTools: T,
          } = u;
          return (
            window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&
              !T &&
              ((0, n.Cu)() || (0, n.b3)())
              ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({
                  ...r,
                  name: ["Slack", l, m]
                    .filter((f) => f && f.length > 0)
                    .join("-"),
                })
              : t.Zz
          )((0, t.Tw)(...(E ?? [])), ...(v ?? []));
        }
        _(c, "configureEnhancers");
      },
      582577127: (W, A, e) => {
        "use strict";
        e.d(A, {
          g: () => n,
        });
        var t = e(3371371503);
        function n(s) {
          const o = {
            sideEffectsMap: {},
            clientSideEffectsMap: {},
          };
          return !s || !s.length
            ? o
            : s.reduce((a, r) => {
                const { actions: c, scope: u } = r;
                let l;
                switch (u) {
                  case t.RE.client:
                    l = a.clientSideEffectsMap;
                    break;
                  default:
                  case t.RE.workspace:
                    l = a.sideEffectsMap;
                    break;
                }
                return (
                  c.forEach((m) => {
                    var v;
                    const E =
                      m == null || (v = m.getType) === null || v === void 0
                        ? void 0
                        : v.call(m);
                    E && ((l[E] = l[E] || []), l[E].push(r));
                  }),
                  a
                );
              }, o);
        }
        _(n, "generateSideEffectsMaps");
      },
      2732935554: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
        });
        var t = e(9139930183),
          n = e(1004520977);
        const s = {
            hasKeyboardFocus: !1,
          },
          d = (0, t.Ay)({}, s, {
            storeKey: "accessibilityPersistent",
            persistenceEnabled: !0,
            persistImmediately: !0,
          }).on(n.w, function (o) {
            let a =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : !1;
            return o.hasKeyboardFocus === a
              ? o
              : {
                  ...o,
                  hasKeyboardFocus: a,
                };
          });
      },
      5105455463: (W, A, e) => {
        "use strict";
        e.d(A, {
          As: () => d,
          N9: () => n,
          V_: () => s,
          WB: () => u,
          X8: () => i,
          bb: () => r,
          c7: () => l,
          dH: () => a,
          lf: () => c,
          og: () => t,
          rf: () => o,
        });
        const t = "(prefers-contrast: more)",
          n = "useAriaApplicationForListViews",
          s = "composerUpArrowShortcutBehavior",
          i = "messageTextLineSpacing",
          d = "messageSpacing",
          o = "messageTextWordSpacing",
          a = "conversationIncomingMessageSound",
          r = "conversationSentMessageSound",
          c = "conversationIncomingMessageAnnouncement",
          u = "peeksEnabledOnMouseEnter",
          l = !0;
      },
      3034787354: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => C,
        });
        var t = e(3245843483),
          n = e(8646192222),
          s = e(9139930183),
          i = e(25586007),
          d = e(5105455463),
          o = e(8439865561),
          a = e(9733150292);
        let r = !1;
        (0, n.Nu)()
          ? (r = window.matchMedia(d.og).matches)
          : (0, n.hk)() &&
            (r = (0, t.oQe)("settings", "shouldUseHighContrastColors"));
        let c = !1;
        try {
          c = !!(0, a.W6)(d.N9);
        } catch {}
        let u;
        try {
          u = (0, a.W6)(d.V_);
        } catch {}
        let l;
        try {
          l = (0, a.W6)(d.X8) || 1;
        } catch {}
        let m;
        try {
          m = (0, a.W6)(d.As) || 1;
        } catch {}
        let v;
        try {
          v = (0, a.W6)(d.rf) || "0";
        } catch {}
        let E;
        try {
          var T;
          E = (T = (0, a.W6)(d.dH)) !== null && T !== void 0 ? T : "";
        } catch {
          E = "";
        }
        let g;
        try {
          var I;
          g = (I = (0, a.W6)(d.bb)) !== null && I !== void 0 ? I : "";
        } catch {
          g = "";
        }
        let f;
        try {
          f = (0, a.W6)(d.lf);
        } catch {
          f = void 0;
        }
        let y;
        try {
          var M;
          y = (M = (0, a.W6)(d.WB)) !== null && M !== void 0 ? M : d.c7;
        } catch {
          y = d.c7;
        }
        const p = {
            screenReaderEnabled: !1,
            shouldUseHighContrastColors: r,
            useARIAApplicationForListViews: c,
            composerUpArrowShortcutBehavior: u,
            messageTextLineSpacing: l,
            messageSpacing: m,
            messageTextWordSpacing: v,
            conversationIncomingMessageSound: E,
            conversationSentMessageSound: g,
            conversationIncomingMessageAnnouncement: f,
            peeksEnabledOnMouseEnter: y,
          },
          C = (0, s.Ay)({}, p, {
            storeKey: "accessibility",
            persistenceEnabled: !1,
          })
            .on(o.rl, (h, D) =>
              D != null && D.message
                ? {
                    ...h,
                    announcerAPIAnnouncement: D,
                  }
                : h
            )
            .on(o.Jq, (h, D) =>
              typeof D != "boolean" || D === h.screenReaderEnabled
                ? h
                : {
                    ...h,
                    screenReaderEnabled: D,
                  }
            )
            .on(o.N, function (h) {
              let D =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : !1;
              return typeof D != "boolean" ||
                D === h.shouldUseHighContrastColors
                ? h
                : {
                    ...h,
                    shouldUseHighContrastColors: D,
                  };
            })
            .on(o.KQ, function (h) {
              let D =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : !1;
              return {
                ...h,
                useARIAApplicationForListViews: D,
              };
            })
            .on(o.Tv, function (h) {
              let D =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : i.v.LIST;
              return {
                ...h,
                composerUpArrowShortcutBehavior: D,
              };
            })
            .on(o.C_, function (h) {
              let D =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : 1;
              return {
                ...h,
                messageTextLineSpacing: D,
              };
            })
            .on(o.XE, function (h) {
              let D =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : 1;
              return {
                ...h,
                messageSpacing: D,
              };
            })
            .on(o.Mq, function (h) {
              let D =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : "0";
              return {
                ...h,
                messageTextWordSpacing: D,
              };
            })
            .on(o.Sr, (h, D) => ({
              ...h,
              conversationIncomingMessageSound: D,
            }))
            .on(o.mw, (h, D) => ({
              ...h,
              conversationSentMessageSound: D,
            }))
            .on(o.Ap, (h, D) => ({
              ...h,
              conversationIncomingMessageAnnouncement: D,
            }))
            .on(o.V_, (h, D) => ({
              ...h,
              peeksEnabledOnMouseEnter: D,
            }));
      },
      8365110903: (W, A, e) => {
        "use strict";
        e.d(A, {
          T: () => o,
        });
        var t = e(1031947056),
          n = e(4134037340),
          s = e(5105455463),
          i = e(8439865561),
          d = e(9733150292);
        const o = (0, t.Ay)(
          "Set the behavior of the up arrow shortcut when focus is in the MessageInput",
          (a, r, c) => {
            if ((0, n.A)(r()))
              try {
                (0, d.q9)(s.V_, c);
              } catch {}
            a((0, i.Tv)(c));
          }
        );
        o.meta = {
          name: "createThunk",
          key: "createThunksetComposerUpArrowShortcutBehavior",
          description:
            "Set the behavior of the up arrow shortcut when focus is in the MessageInput",
        };
      },
      2633701976: (W, A, e) => {
        "use strict";
        e.d(A, {
          p: () => o,
        });
        var t = e(1031947056),
          n = e(4134037340),
          s = e(5105455463),
          i = e(8439865561),
          d = e(9733150292);
        const o = (0, t.Ay)(
          "Set the pref for the sound that plays when a message arrives to the focused conversation",
          (a, r, c) => {
            if ((0, n.A)(r()))
              try {
                (0, d.q9)(s.lf, c);
              } catch {}
            a((0, i.Ap)(c));
          }
        );
        o.meta = {
          name: "createThunk",
          key: "createThunksetPersistentConversationIncomingMessageAnnouncement",
          description:
            "Set the pref for the sound that plays when a message arrives to the focused conversation",
        };
      },
      2517531287: (W, A, e) => {
        "use strict";
        e.d(A, {
          R: () => o,
          r: () => a,
        });
        var t = e(1031947056),
          n = e(4134037340),
          s = e(5105455463),
          i = e(8439865561),
          d = e(9733150292);
        const o = (0, t.Ay)(
          "Set the pref for the sound that plays when a message arrives to the focused conversation",
          (r, c, u) => {
            if ((0, n.A)(c()))
              try {
                (0, d.q9)(s.dH, u);
              } catch {}
            r((0, i.Sr)(u));
          }
        );
        o.meta = {
          name: "createThunk",
          key: "createThunksetPersistentConversationIncomingMessageSound",
          description:
            "Set the pref for the sound that plays when a message arrives to the focused conversation",
        };
        const a = (0, t.Ay)(
          "Set the pref for the sound that plays when a message is sent to the focused conversation",
          (r, c, u) => {
            if ((0, n.A)(c()))
              try {
                (0, d.q9)(s.bb, u);
              } catch {}
            r((0, i.mw)(u));
          }
        );
        a.meta = {
          name: "createThunk",
          key: "createThunksetPersistentConversationSentMessageSound",
          description:
            "Set the pref for the sound that plays when a message is sent to the focused conversation",
        };
      },
      25586007: (W, A, e) => {
        "use strict";
        e.d(A, {
          v: () => t,
        });
        var t;
        (function (n) {
          (n[(n.LIST = 1)] = "LIST"),
            (n[(n.LIST_IF_EMPTY = 2)] = "LIST_IF_EMPTY"),
            (n[(n.EDIT = 3)] = "EDIT");
        })(t || (t = {}));
      },
      3087402890: (W, A, e) => {
        "use strict";
        e.d(A, {
          FX: () => o,
          X5: () => d,
          ZY: () => v,
          cD: () => c,
          cQ: () => u,
          cw: () => r,
          dj: () => l,
          fe: () => i,
          hc: () => E,
          lB: () => m,
          qK: () => n,
          r8: () => a,
          s2: () => s,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Set the thread root keys");
        n.meta = {
          name: "createAction",
          key: "createActionsetThreads",
          description: "Set the thread root keys",
        };
        const s = (0, t.Ay)("Append more thread root keys");
        s.meta = {
          name: "createAction",
          key: "createActionappendThreads",
          description: "Append more thread root keys",
        };
        const i = (0, t.Ay)("Insert a thread at the beginning");
        i.meta = {
          name: "createAction",
          key: "createActionprependThread",
          description: "Insert a thread at the beginning",
        };
        const d = (0, t.Ay)("Increments totalUnreadReplies");
        d.meta = {
          name: "createAction",
          key: "createActionincrementTotalUnreadReplies",
          description: "Increments totalUnreadReplies",
        };
        const o = (0, t.Ay)("Sets totalNewThreads to 0");
        o.meta = {
          name: "createAction",
          key: "createActionclearTotalNewThreads",
          description: "Sets totalNewThreads to 0",
        };
        const a = (0, t.Ay)("Increments allThreadsRefreshCounter");
        a.meta = {
          name: "createAction",
          key: "createActionincrementAllThreadsRefreshCounter",
          description: "Increments allThreadsRefreshCounter",
        };
        const r = (0, t.Ay)("Set the thread key that should be focused");
        r.meta = {
          name: "createAction",
          key: "createActionsetFocusRequestedThreadKey",
          description: "Set the thread key that should be focused",
        };
        const c = (0, t.Ay)("Set the thread timestamp that should be focused");
        c.meta = {
          name: "createAction",
          key: "createActionsetFocusRequestedReplyTs",
          description: "Set the thread timestamp that should be focused",
        };
        const u = (0, t.Ay)(
          "Add a thread key to an array of threads that were manually marked unread"
        );
        u.meta = {
          name: "createAction",
          key: "createActionappendThreadToManuallyMarkedUnread",
          description:
            "Add a thread key to an array of threads that were manually marked unread",
        };
        const l = (0, t.Ay)(
          "set object of threads that have been manually marked as unread"
        );
        l.meta = {
          name: "createAction",
          key: "createActionsetManuallyMarkedThreads",
          description:
            "set object of threads that have been manually marked as unread",
        };
        const m = (0, t.Ay)(
          "Remove a thread key from an array of threads that were manually marked unread"
        );
        m.meta = {
          name: "createAction",
          key: "createActionremoveThreadFromManuallyMarkedUnread",
          description:
            "Remove a thread key from an array of threads that were manually marked unread",
        };
        const v = (0, t.Ay)("Sets manuallyMarkedUnread to empty");
        v.meta = {
          name: "createAction",
          key: "createActionclearThreadsFromManuallyMarkedUnread",
          description: "Sets manuallyMarkedUnread to empty",
        };
        const E = (0, t.Ay)("Sets selected tab in threads view");
        E.meta = {
          name: "createAction",
          key: "createActionsetSelectedTab",
          description: "Sets selected tab in threads view",
        };
      },
      8778137680: (W, A, e) => {
        "use strict";
        e.d(A, {
          DQ: () => d,
          Lm: () => a,
          RZ: () => c,
          S: () => v,
          X$: () => i,
          _y: () => u,
          c6: () => l,
          fv: () => o,
          rk: () => s,
          yT: () => m,
          z7: () => r,
          zZ: () => n,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Set Awareness State for another user");
        n.meta = {
          name: "createAction",
          key: "createActionsetAwarenessStateForOtherUser",
          description: "Set Awareness State for another user",
        };
        const s = (0, t.Ay)("Set Awareness State for me");
        s.meta = {
          name: "createAction",
          key: "createActionsetMyAwarenessState",
          description: "Set Awareness State for me",
        };
        const i = (0, t.Ay)("Remove Awareness State for me");
        i.meta = {
          name: "createAction",
          key: "createActionremoveMyAwarenessState",
          description: "Remove Awareness State for me",
        };
        const d = (0, t.Ay)("Clear the full awareness state for a user");
        d.meta = {
          name: "createAction",
          key: "createActionclearUserAwarenessState",
          description: "Clear the full awareness state for a user",
        };
        const o = (0, t.Ay)("Set my screenshare view");
        o.meta = {
          name: "createAction",
          key: "createActionsetMyScreenshareView",
          description: "Set my screenshare view",
        };
        const a = (0, t.Ay)("Remove my screenshare view");
        a.meta = {
          name: "createAction",
          key: "createActionremoveMyScreenshareView",
          description: "Remove my screenshare view",
        };
        const r = (0, t.Ay)("Set my sticky reaction");
        r.meta = {
          name: "createAction",
          key: "createActionsetMyStickyReaction",
          description: "Set my sticky reaction",
        };
        const c = (0, t.Ay)("Remove my sticky reaction");
        c.meta = {
          name: "createAction",
          key: "createActionremoveMyStickyReaction",
          description: "Remove my sticky reaction",
        };
        const u = (0, t.Ay)("Clear any stale awareness entries");
        u.meta = {
          name: "createAction",
          key: "createActionttlAwarenessEntries",
          description: "Clear any stale awareness entries",
        };
        const l = (0, t.Ay)(
          "Sets updatedTimestamp for my awareness entries to current time"
        );
        l.meta = {
          name: "createAction",
          key: "createActionrenewMyUpdatedTimestamps",
          description:
            "Sets updatedTimestamp for my awareness entries to current time",
        };
        const m = (0, t.Ay)("Set my active song");
        m.meta = {
          name: "createAction",
          key: "createActionsetMyActiveSong",
          description: "Set my active song",
        };
        const v = (0, t.Ay)("Remove my active song");
        v.meta = {
          name: "createAction",
          key: "createActionremoveMyActiveSong",
          description: "Remove my active song",
        };
      },
      7592559649: (W, A, e) => {
        "use strict";
        e.d(A, {
          $G: () => y,
          Ae: () => p,
          Fb: () => f,
          M3: () => g,
          fL: () => I,
          gV: () => M,
          sW: () => T,
          xP: () => E,
        });
        var t = e(8161242485),
          n = e(3385422400),
          s = e(6418055367),
          i = e(166097325),
          d = e(9113979368),
          o = e(2689960678),
          a = e(1345902898),
          r = e(6324645806);
        const c = (0, n.Ad)(s.UI, i.A),
          u = _((C) => {
            var h;
            return (
              (C == null || (h = C.awareness) === null || h === void 0
                ? void 0
                : h.awarenessEntries) || o.Ml
            );
          }, "selectAwarenessEntries"),
          l = (0, n.Mz)(
            [u, (C, h) => h, (C, h, D) => D, (C, h, D, P) => P],
            (C, h, D, P) => {
              if (h === void 0) return o.t0;
              const S = C.filter((K) => {
                  const x = K.channel === h,
                    B = K.fieldName === D,
                    U = P ? K.uniqueId === P : !0,
                    R = !(0, r.h)(K);
                  return x && B && U && R;
                }).map((K) => [K.user, K.fieldValue]),
                b = Object.fromEntries(S);
              return (0, d.A)(b) ? o.t0 : b;
            }
          ),
          m = (0, n.Mz)([u, (C, h) => h, (C, h, D) => D], (C, h, D) => {
            if (h === void 0) return o.t0;
            const P = C.filter((b) => {
                const K = b.channel === h,
                  x = b.fieldName === D,
                  B = !(0, r.h)(b);
                return K && x && B;
              }).map((b) => [b.uniqueId, [b.user, b.fieldValue]]),
              S = Object.fromEntries(P);
            return (0, d.A)(S) ? o.t0 : S;
          }),
          v = (0, n.Mz)([u, (C, h) => h, (C, h, D) => D], (C, h, D) => {
            if (h === void 0) return o.t0;
            var P, S;
            const b = C.filter((x) => {
              const B = x.channel === h,
                U = x.fieldName === D,
                R = !(0, r.h)(x);
              return B && U && R;
            })
              .sort(
                (x, B) =>
                  ((P = x.fieldTimestampMs) !== null && P !== void 0
                    ? P
                    : Number.MAX_SAFE_INTEGER) -
                  ((S = B.fieldTimestampMs) !== null && S !== void 0
                    ? S
                    : Number.MAX_SAFE_INTEGER)
              )
              .map((x) => [x.user, x.fieldValue]);
            return Object.fromEntries(b);
          }),
          E = (0, t.Ay)((C, h) => {
            const D = v(C, h, a.p4.STICKYEMOJI);
            return (0, d.A)(D) ? o.t0 : D;
          });
        E.meta = {
          name: "createSelector",
          key: "createSelectorgetStickyEmojisForTopicByUser",
          description: (C, h) => {
            const D = v(C, h, a.p4.STICKYEMOJI);
            return (0, d.A)(D) ? o.t0 : D;
          },
        };
        const T = (0, t.Ay)((C, h) => l(C, h, a.p4.CONTENTVIEW));
        T.meta = {
          name: "createSelector",
          key: "createSelectorgetContentViewsForTopicByUser",
          description: (C, h) => l(C, h, a.p4.CONTENTVIEW),
        };
        const g = (0, t.Ay)((C, h) => m(C, h, a.p4.CONTENTVIEW));
        g.meta = {
          name: "createSelector",
          key: "createSelectorgetContentViewsKeyedByPeerId",
          description: (C, h) => m(C, h, a.p4.CONTENTVIEW),
        };
        const I = (0, t.Ay)((C, h, D, P) => {
          var S;
          return (
            C == null || (S = C.awareness) === null || S === void 0
              ? void 0
              : S.awarenessEntries
          )
            .filter((x) => {
              const B = x.channel === h,
                U = x.user === D,
                R = !P || (0, r.I)(x.fieldName) ? !0 : x.uniqueId === P,
                G = !(0, r.h)(x);
              return B && U && R && G;
            })
            .map((x) => ({
              field_name: x.fieldName,
              field_value: x.fieldValue,
              ...(!!x.fieldTimestampMs && {
                field_timestamp_ms: x.fieldTimestampMs,
              }),
            }));
        });
        I.meta = {
          name: "createSelector",
          key: "createSelectorgetAwarenessForMe",
          description: (C, h, D, P) => {
            var S;
            return (
              C == null || (S = C.awareness) === null || S === void 0
                ? void 0
                : S.awarenessEntries
            )
              .filter((x) => {
                const B = x.channel === h,
                  U = x.user === D,
                  R = !P || (0, r.I)(x.fieldName) ? !0 : x.uniqueId === P,
                  G = !(0, r.h)(x);
                return B && U && R && G;
              })
              .map((x) => ({
                field_name: x.fieldName,
                field_value: x.fieldValue,
                ...(!!x.fieldTimestampMs && {
                  field_timestamp_ms: x.fieldTimestampMs,
                }),
              }));
          },
        };
        const f = (0, t.Ay)((C, h, D, P) => {
          const S = I(C, h, D, P);
          for (const b of S) if (b.field_name === a.p4.STICKYEMOJI) return b;
          return null;
        });
        f.meta = {
          name: "createSelector",
          key: "createSelectorgetAwarenessStickyEmoji",
          description: (C, h, D, P) => {
            const S = I(C, h, D, P);
            for (const b of S) if (b.field_name === a.p4.STICKYEMOJI) return b;
            return null;
          },
        };
        const y = (0, t.Ay)((C, h) => {
          let { callId: D, userId: P, uniqueId: S } = h;
          return D ? l(C, D, a.p4.STICKYEMOJI, S)[P] : void 0;
        });
        y.meta = {
          name: "createSelector",
          key: "createSelectorgetStickyReactionsByUserId",
          description: (C, h) => {
            let { callId: D, userId: P, uniqueId: S } = h;
            return D ? l(C, D, a.p4.STICKYEMOJI, S)[P] : void 0;
          },
        };
        const M = (0, t.Ay)((C, h) => {
          let { callId: D, userId: P } = h;
          if (!D) return;
          const S = l(C, D, a.p4.HUDDLE_ACTIVE_SONG);
          if ((0, d.A)(S)) return;
          if (P) return S[P];
          const b = Object.values(S);
          if (b.length !== 0) return b[0];
        });
        M.meta = {
          name: "createSelector",
          key: "createSelectorgetRequestedSong",
          description: (C, h) => {
            let { callId: D, userId: P } = h;
            if (!D) return;
            const S = l(C, D, a.p4.HUDDLE_ACTIVE_SONG);
            if ((0, d.A)(S)) return;
            if (P) return S[P];
            const b = Object.values(S);
            if (b.length !== 0) return b[0];
          },
        };
        const p = c([u, (C, h, D, P, S) => `${h},${D},${P},${S}`], (C, h) => {
            const [D, P, S, b] = h.split(","),
              K = C.filter((x) => {
                const B = x.channel === D,
                  U = x.user !== P,
                  R =
                    x.fieldName === a.p4.ACTIVE_CELL &&
                    x.fieldValue &&
                    x.fieldValue.rowId === S &&
                    x.fieldValue.colId === b,
                  G = !(0, r.h)(x);
                return B && U && R && G;
              }).map((x) => [
                [`${x.fieldValue.rowId},${x.fieldValue.colId}`],
                x.user,
              ]);
            return K.length ? Object.fromEntries(K) : o.t0;
          }),
          O = (0, n.Mz)([u, (C, h) => h], (C, h) =>
            h === void 0
              ? o.Ml
              : C.filter((P) => {
                  const S = P.channel === h,
                    b = P.fieldName === a.p4.ACTIVE_CELL;
                  return S && b;
                }).map((P) => P.user)
          );
      },
      1345902898: (W, A, e) => {
        "use strict";
        e.d(A, {
          Pz: () => t,
          mO: () => s,
          p4: () => n,
        });
        var t;
        (function (i) {
          (i.BROADCAST = "broadcast"), (i.QUERY = "query"), (i.CLOSE = "close");
        })(t || (t = {}));
        var n;
        (function (i) {
          (i.CONTENTVIEW = "contentView"),
            (i.STICKYEMOJI = "stickyEmoji"),
            (i.ACTIVE_CELL = "activeCell"),
            (i.HUDDLE_ACTIVE_SONG = "huddleActiveSong");
        })(n || (n = {}));
        const s = 60 * 1e3;
      },
      6324645806: (W, A, e) => {
        "use strict";
        e.d(A, {
          I: () => s,
          h: () => n,
        });
        var t = e(1345902898);
        const n = _((i) => {
            const d = Date.now();
            var o;
            return (
              d - ((o = i.updatedTimestamp) !== null && o !== void 0 ? o : d) >=
              t.mO
            );
          }, "isAwarenessEntryExpired"),
          s = _(
            (i) => (i ? [t.p4.HUDDLE_ACTIVE_SONG].includes(i) : !1),
            "skipUniquenessCheck"
          );
      },
      3749529250: (W, A, e) => {
        "use strict";
        e.d(A, {
          K: () => s,
          z: () => n,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Enable big button mode");
        n.meta = {
          name: "createAction",
          key: "createActionenableBBM",
          description: "Enable big button mode",
        };
        const s = (0, t.Ay)("Disable big button mode");
        s.meta = {
          name: "createAction",
          key: "createActiondisableBBM",
          description: "Disable big button mode",
        };
      },
      4614661813: (W, A, e) => {
        "use strict";
        e.d(A, {
          Y: () => i,
        });
        var t = e(9139930183),
          n = e(3749529250);
        const s = {
            enabled: !1,
          },
          i = (0, t.Ay)({}, s, {
            storeKey: "bbm",
            persistenceEnabled: !0,
            persistImmediately: !0,
          })
            .on(n.z, (d) => ({
              ...d,
              enabled: !0,
            }))
            .on(n.K, (d) => ({
              ...d,
              enabled: !1,
            }));
      },
      8677230210: (W, A, e) => {
        "use strict";
        e.d(A, {
          pO: () => T,
          AF: () => E,
          E6: () => y,
          vu: () => f,
          wC: () => g,
          Od: () => I,
        });
        var t = e(3037015781),
          n = e(8161242485),
          s = e(9464746668),
          i = e(4588963228),
          d = e(8847766420),
          o = e(2762206868),
          a = e(8276911661);
        const r = ["B01", "BSLACKBOT", "B03"];
        var c = e(3447104916),
          u = e(4562579337);
        function l(M) {
          return !!(M && (0, t.uz)(M) && !(0, u.A)(M));
        }
        _(l, "isMemberHuman");
        var m = e(9887599716),
          v = e(9354158662);
        const E = (0, n.Ay)(function (M, p) {
          let O =
            arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
          const C = (0, d.ZT)(M);
          if (!p) return !1;
          const h = (0, m.o)(M, p);
          return !h && (0, i.A)(p) && O && r.indexOf(p) < 0
            ? (0, c.Ss)().fetchObjectWithId(C, p)
            : ((0, c.ez)(C, p), h || !1);
        });
        E.meta = {
          name: "createSelector",
          key: "createSelectorgetBotById",
          description: function (M, p) {
            let O =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : !0;
            const C = (0, d.ZT)(M);
            if (!p) return !1;
            const h = (0, m.o)(M, p);
            return !h && (0, i.A)(p) && O && r.indexOf(p) < 0
              ? (0, c.Ss)().fetchObjectWithId(C, p)
              : ((0, c.ez)(C, p), h || !1);
          },
        };
        const T = (0, n.Ay)((M, p) => {
          if (!p) return;
          const O = (0, v.iO)(M);
          let C;
          return O && (C = Object.values(O).find((h) => h.app_id === p)), C;
        });
        T.meta = {
          name: "createSelector",
          key: "createSelectorgetBotByAppId",
          description: (M, p) => {
            if (!p) return;
            const O = (0, v.iO)(M);
            let C;
            return O && (C = Object.values(O).find((h) => h.app_id === p)), C;
          },
        };
        const g = (0, n.Ay)((M, p) => {
          const O = (0, a.nv)(M, p);
          return l(O);
        });
        g.meta = {
          name: "createSelector",
          key: "createSelectorgetMemberIsHuman",
          description: (M, p) => {
            const O = (0, a.nv)(M, p);
            return l(O);
          },
        };
        const I = (0, n.Ay)(function (M) {
          let {
              userId: p,
              botId: O,
              botProfile: C,
            } = arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : {},
            h,
            D;
          p && (h = (0, a.nv)(M, p)), O && (D = E(M, O) || void 0);
          const P = h ? l(h) : !1;
          let S;
          !(0, t.uz)(D) &&
            (0, t.uz)(h) &&
            ((S = (0, s.A)(M, h)), S && S !== O && (D = E(M, S) || void 0));
          let b;
          if (
            (!(0, t.uz)(D) &&
              C &&
              ((b = C.id),
              b && b !== S && b !== O && (D = E(M, b) || void 0),
              (0, t.uz)(D) || (D = C)),
            !(0, t.uz)(h) && (0, t.uz)(D) && D.app_id)
          ) {
            const K = (0, o.sO)(M, D.app_id);
            if ((0, t.uz)(K)) {
              const x = K.app_user_id;
              x && x !== p && (h = (0, a.nv)(M, x));
            }
          }
          return {
            bot: D,
            member: h,
            memberIsHuman: P,
          };
        });
        I.meta = {
          name: "createSelector",
          key: "createSelectormaybeGetBotAndMemberByIds",
          description: function (M) {
            let {
                userId: p,
                botId: O,
                botProfile: C,
              } = arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : {},
              h,
              D;
            p && (h = (0, a.nv)(M, p)), O && (D = E(M, O) || void 0);
            const P = h ? l(h) : !1;
            let S;
            !(0, t.uz)(D) &&
              (0, t.uz)(h) &&
              ((S = (0, s.A)(M, h)), S && S !== O && (D = E(M, S) || void 0));
            let b;
            if (
              (!(0, t.uz)(D) &&
                C &&
                ((b = C.id),
                b && b !== S && b !== O && (D = E(M, b) || void 0),
                (0, t.uz)(D) || (D = C)),
              !(0, t.uz)(h) && (0, t.uz)(D) && D.app_id)
            ) {
              const K = (0, o.sO)(M, D.app_id);
              if ((0, t.uz)(K)) {
                const x = K.app_user_id;
                x && x !== p && (h = (0, a.nv)(M, x));
              }
            }
            return {
              bot: D,
              member: h,
              memberIsHuman: P,
            };
          },
        };
        const f = (0, n.Ay)((M, p) => {
          const O = E(M, p);
          if (O && O.name) return O.name;
        });
        f.meta = {
          name: "createSelector",
          key: "createSelectorgetBotNameById",
          description: (M, p) => {
            const O = E(M, p);
            if (O && O.name) return O.name;
          },
        };
        const y = (0, n.Ay)((M, p) => {
          if (!M || !p) return null;
          const O = (0, a.nv)(M, p.user),
            C = p.bot_id || (0, s.A)(M, O);
          if (!C) return null;
          if (p.bot_profile)
            return p.bot_profile.id !== C
              ? {
                  ...p.bot_profile,
                  id: C,
                }
              : p.bot_profile;
          const h = E(M, C);
          return h || null;
        });
        y.meta = {
          name: "createSelector",
          key: "createSelectorgetBotByMsg",
          description: (M, p) => {
            if (!M || !p) return null;
            const O = (0, a.nv)(M, p.user),
              C = p.bot_id || (0, s.A)(M, O);
            if (!C) return null;
            if (p.bot_profile)
              return p.bot_profile.id !== C
                ? {
                    ...p.bot_profile,
                    id: C,
                  }
                : p.bot_profile;
            const h = E(M, C);
            return h || null;
          },
        };
      },
      6252535684: (W, A, e) => {
        "use strict";
        e.d(A, {
          M: () => s,
          h: () => n,
        });
        var t = e(8161242485);
        const n = 5 * 60 * 1e3,
          s = (0, t.Ay)((i, d) => {
            var o;
            const a =
              i == null ||
              (o = i.channelActiveTabStore) === null ||
              o === void 0
                ? void 0
                : o[d];
            if (a && a.timestamp > Date.now() - n) return a.tab;
          });
        s.meta = {
          name: "createSelector",
          key: "createSelectorgetLastActiveTabForChannel",
          description: (i, d) => {
            var o;
            const a =
              i == null ||
              (o = i.channelActiveTabStore) === null ||
              o === void 0
                ? void 0
                : o[d];
            if (a && a.timestamp > Date.now() - n) return a.tab;
          },
        };
      },
      8980478045: (W, A, e) => {
        "use strict";
        e.d(A, {
          HR: () => i,
          Pf: () => s,
          Vp: () => d,
        });
        var t = e(8161242485);
        const n = (0, t.Ay)((o, a) => {
          var r;
          return (r = o.channelCanvas) === null || r === void 0
            ? void 0
            : r.byChannelId[a];
        });
        n.meta = {
          name: "createSelector",
          key: "createSelectorgetByChannelIdState",
          description: (o, a) => {
            var r;
            return (r = o.channelCanvas) === null || r === void 0
              ? void 0
              : r.byChannelId[a];
          },
        };
        const s = (0, t.Ay)((o, a) => {
          var r;
          return (r = n(o, a)) === null || r === void 0 ? void 0 : r.tempId;
        });
        s.meta = {
          name: "createSelector",
          key: "createSelectorgetChannelCanvasTempId",
          description: (o, a) => {
            var r;
            return (r = n(o, a)) === null || r === void 0 ? void 0 : r.tempId;
          },
        };
        const i = (0, t.Ay)((o, a) => {
          var r;
          return (r = o.channelCanvas) === null || r === void 0
            ? void 0
            : r.byTempId[a];
        });
        i.meta = {
          name: "createSelector",
          key: "createSelectorgetChannelIdForTempId",
          description: (o, a) => {
            var r;
            return (r = o.channelCanvas) === null || r === void 0
              ? void 0
              : r.byTempId[a];
          },
        };
        const d = (0, t.Ay)((o, a) => {
          var r, c;
          return (c =
            (r = n(o, a)) === null || r === void 0
              ? void 0
              : r.waitingForLock) !== null && c !== void 0
            ? c
            : !1;
        });
        d.meta = {
          name: "createSelector",
          key: "createSelectorgetChannelCanvasWaitingForLock",
          description: (o, a) => {
            var r, c;
            return (c =
              (r = n(o, a)) === null || r === void 0
                ? void 0
                : r.waitingForLock) !== null && c !== void 0
              ? c
              : !1;
          },
        };
      },
      9536404279: (W, A, e) => {
        "use strict";
        e.d(A, {
          CD: () => a,
          Jt: () => d,
          Np: () => s,
          VG: () => n,
          bz: () => i,
          fp: () => o,
          hX: () => r,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Add timestamps to channel history");
        n.meta = {
          name: "createAction",
          key: "createActionaddTimestamps",
          description: "Add timestamps to channel history",
        };
        const s = (0, t.Ay)("Remove timestamps from channel history");
        s.meta = {
          name: "createAction",
          key: "createActionremoveTimestamp",
          description: "Remove timestamps from channel history",
        };
        const i = (0, t.Ay)("Remove all history for a channel");
        i.meta = {
          name: "createAction",
          key: "createActionremoveAllTimestamps",
          description: "Remove all history for a channel",
        };
        const d = (0, t.Ay)("Was disconnected; reset reachedEnd to false");
        d.meta = {
          name: "createAction",
          key: "createActionresetReachedEnd",
          description: "Was disconnected; reset reachedEnd to false",
        };
        const o = (0, t.Ay)("Drop messages from before a given timestamp");
        o.meta = {
          name: "createAction",
          key: "createActiontruncateChannelHistoryPriorToTimestamp",
          description: "Drop messages from before a given timestamp",
        };
        const a = (0, t.Ay)("Drop old messages if there are too many");
        a.meta = {
          name: "createAction",
          key: "createActiontruncateChannelHistory",
          description: "Drop old messages if there are too many",
        };
        const r = (0, t.Ay)("Remove all history for every channel");
        r.meta = {
          name: "createAction",
          key: "createActionclearChannelHistory",
          description: "Remove all history for every channel",
        };
      },
      4350638406: (W, A, e) => {
        "use strict";
        e.d(A, {
          Hw: () => Se,
          e3: () => Z,
          mY: () => ae,
          D1: () => de,
          Zc: () => Ce,
          ez: () => Ae,
        });
        var t = e(3398586081),
          n = e(7715417323),
          s = e(6533394955),
          i = e(8352634987);
        function d($, N) {
          return `${$}:${N}`;
        }
        _(d, "serialize_serialize");
        function o($) {
          const [N, L] = $.split(":");
          return {
            channelId: N,
            ts: L,
          };
        }
        _(o, "deserialize");
        var a = e(4423055085),
          r = e(2208015175),
          c = e(1703559452),
          u = e(9816084745),
          l = e(8289365785),
          m = e(8786006583),
          v = e(6422693406),
          E = e(1031947056),
          T = e(796111729),
          g = e(7334104107),
          I = e(6457401668),
          f = e(4919145213),
          y = e(9986847041),
          M = e(4365697073),
          p = e(3110884894),
          O = e(7606781622),
          C = e(8040098042),
          h = e(2155512519),
          D = e(12126472),
          P = e(1116859610);
        const S = "HISTORY-CFM";
        function b($, N) {
          return _(function L() {
            let {
              channelId: w,
              oldest: k,
              latest: J,
              cursor: ee = "",
              msgsInRange: ne = [],
              deletedInRange: pe = [],
            } = arguments.length > 0 && arguments[0] !== void 0
              ? arguments[0]
              : {};
            const Me = {
              channelId: w,
              oldest: k,
              latest: J,
              cursor: ee,
              inclusive: !0,
              includePinCount: !1,
              reason: "channel-history-store.CFM.fetch",
            };
            return $((0, h.Ay)(Me)).then(function () {
              let {
                msgs: ke = [],
                deleted: ge = [],
                isLimited: fe,
                hasMore: re,
                responseMetadata: le = {},
              } = arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : {};
              return (
                ne.push(...ke),
                pe.push(...ge),
                re && !fe && le.next_cursor
                  ? L({
                      channelId: w,
                      oldest: k,
                      latest: J,
                      cursor: le.next_cursor,
                      msgsInRange: ne,
                      deletedInRange: pe,
                    })
                  : ($(
                      (0, P.A)({
                        msgs: ne,
                        channelId: w,
                        isLimited: fe,
                        latest: J,
                        oldest: k,
                        deletedInRange: pe,
                      })
                    ),
                    v.S.resolve())
              );
            });
          }, "fetchHistoryRangeHelper")(N);
        }
        _(b, "fetchHistoryRange");
        function K($, N) {
          return _(function L() {
            let {
              channelId: w,
              threadTs: k,
              oldest: J,
              latest: ee,
              cursor: ne = "",
              msgsInRange: pe = [],
              deletedInRange: Me = [],
            } = arguments.length > 0 && arguments[0] !== void 0
              ? arguments[0]
              : {};
            const ke = {
              channelId: w,
              threadTs: k,
              oldest: J,
              latest: ee,
              cursor: ne,
              inclusive: !0,
              reason: "channel-history-store.CFM.fetch",
            };
            return $((0, h.$b)(ke)).then(function () {
              let {
                msgs: ge = [],
                deleted: fe = [],
                hasMore: re,
                responseMetadata: le = {},
              } = arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : {};
              if (
                (pe.push(
                  ...(ne
                    ? (0, D.A)(ge, {
                        ts: k,
                      })
                    : ge)
                ),
                Me.push(...fe),
                re && le.next_cursor)
              )
                return L({
                  channelId: w,
                  threadTs: k,
                  oldest: J,
                  latest: ee,
                  cursor: le.next_cursor,
                  msgsInRange: pe,
                  deletedInRange: Me,
                });
              const ye =
                J === k || ee === k
                  ? pe
                  : (0, D.A)(pe, {
                      ts: k,
                    });
              return (
                $(
                  (0, P.A)({
                    msgs: ye,
                    channelId: (0, p.Iu)(w, k),
                    latest: ee,
                    oldest: J,
                    deletedInRange: Me,
                  })
                ),
                v.S.resolve()
              );
            });
          }, "fetchRepliesRangeHelper")(N);
        }
        _(K, "fetchRepliesRange");
        const x = (0, E.Ay)("Fetches a range of messages", ($, N, L) => {
          let { channelId: w, oldest: k, latest: J } = L;
          return (
            (0, T.Ay)({
              getState: N,
              label: S,
            }).info(`Re-fetching ${w} ${k} - ${J}`),
            (0, C.A)(w)
              ? b($, {
                  channelId: w,
                  oldest: k,
                  latest: J,
                })
              : K($, {
                  ...(0, p.Sb)(w),
                  oldest: k,
                  latest: J,
                })
          );
        });
        x.meta = {
          name: "createThunk",
          key: "createThunkfetchRange",
          description: "Fetches a range of messages",
        };
        var B = e(8455301571);
        function U($) {
          const N = {};
          return (
            $.forEach((L) => {
              const { channelId: w, ts: k } = o(L);
              (N[w] = N[w] || []), N[w].push(k);
            }),
            N
          );
        }
        _(U, "groupTimestampsByChannel");
        function R($) {
          let N, L;
          return (
            (0, r.A)($, (w, k) => {
              N === void 0 && (N = k),
                L === void 0 && (L = k),
                k < N && (N = k),
                k > L && (L = k);
            }),
            {
              minTs: N,
              maxTs: L,
            }
          );
        }
        _(R, "getMinAndMaxTs");
        function G() {
          let $ =
              arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : {},
            N =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : {};
          return (0, c.A)(N, (L, w) => $[w]);
        }
        _(G, "hasIntersection");
        function H($, N) {
          return (0, u.A)(N, (L, w) => $[w]);
        }
        _(H, "isSuperset");
        function F($) {
          let { ranges: N = {}, tsMaps: L = [] } = $;
          const w = {
            ...N,
          };
          let k = L[0];
          return (
            L.forEach((J) => {
              k !== J &&
                (G(k, J)
                  ? H(k, J)
                    ? delete w[J.rangeId]
                    : H(J, k)
                    ? (delete w[k.rangeId], (k = J))
                    : (0, r.A)(J, (ee, ne) => delete k[ne])
                  : (k = J));
            }),
            Object.values(w)
          );
        }
        _(F, "dedupe");
        function V($, N) {
          let L =
            arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
          const w = (0, T.Ay)({
              state: $,
              label: S,
            }),
            k = {},
            J = [];
          return (
            L.sort().forEach((ee) => {
              const pe = (0, O.Ld)($, N, ee, !1);
              if (!pe) {
                w.warn(`No message for ${ee} in ${N}`);
                return;
              }
              if ((0, g.aw)(pe) || (0, f.A)(pe)) return;
              const Me = [];
              (!(0, M.n)(pe) || (0, g.jX)(pe) || (0, I.SM)(pe)) && Me.push(N),
                ((0, g.jX)(pe) || (0, M.n)(pe)) &&
                  Me.push((0, p.Iu)(N, (0, y.L)(pe))),
                Me.forEach((ke) => {
                  if (!ke) return;
                  const ge = (0, B.tp)($, ke, ee);
                  if (!ge || ge === B.Vl) return;
                  const { start: fe, end: re, timestamps: le } = ge,
                    Re = `${fe}-${re}`;
                  if (!k[Re]) {
                    const Te = {};
                    Object.defineProperty(Te, "rangeId", {
                      enumerable: !1,
                      value: Re,
                    }),
                      (k[Re] = {
                        id: ke,
                        firstTs: (0, l.A)(le),
                        lastTs: (0, m.A)(le),
                        start: fe,
                        end: re,
                        tsMap: Te,
                      }),
                      J.push(Te);
                  }
                  const ye = k[Re];
                  ye.tsMap[ee] = !0;
                });
            }),
            {
              ranges: k,
              tsMaps: J,
            }
          );
        }
        _(V, "segment");
        function X($, N) {
          let L =
            arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
          return (F(V($, N, L)) || [{}]).map((k) => {
            let {
              id: J,
              firstTs: ee,
              lastTs: ne,
              start: pe,
              end: Me,
              tsMap: ke,
            } = k;
            const { minTs: ge, maxTs: fe } = R(ke);
            return {
              id: J,
              oldest: ge === ee ? pe : ge,
              latest: fe === ne ? Me : fe,
            };
          });
        }
        _(X, "rangify");
        const q = (0, E.Ay)(
          "Fetches chunks of channel history for the given message IDs",
          ($, N, L) => {
            let { ids: w } = L;
            const k = U(w),
              J = {};
            return (
              (0, r.A)(k, (ee, ne) => {
                const pe = X(N(), ne, ee);
                J[ne] = v.S.map(pe, (Me) => {
                  let { oldest: ke, latest: ge, id: fe } = Me;
                  return $(
                    x({
                      channelId: fe,
                      oldest: ke,
                      latest: ge,
                    })
                  );
                });
              }),
              v.S.all(Object.values(J))
            );
          }
        );
        q.meta = {
          name: "createThunk",
          key: "createThunkrefetchChannelHistory",
          description:
            "Fetches chunks of channel history for the given message IDs",
        };
        const oe = q,
          z = (0, t.A)(
            () =>
              new i.Ay({
                storeKey: "channelHistory",
                fetch: ($, N) =>
                  (0, s.dispatchForTeamId)(
                    $,
                    oe({
                      ids: N,
                    })
                  ),
                metricsName: "channel-history",
                isEnabled: () => !0,
                markStaleAfterSlowReconnect: () => !1,
              })
          ),
          Ae = _(($, N, L) => z().maybeRefetch($, d(N, L)), "maybeRefetch"),
          ae = _(
            ($, N, L) =>
              z().markObjectsAsFresh(
                $,
                L.map((w) => d(N, w))
              ),
            "markObjectsAsFresh"
          ),
          de = _(
            ($, N, L) =>
              z().markObjectsAsStale(
                $,
                L.map((w) => d(N, w))
              ),
            "markObjectsAsStale"
          ),
          ve = _(
            ($, N, L) => z().isObjectFresh($, serialize(N, L)),
            "isObjectFresh"
          ),
          Se = _(($) => z().getFreshObjects($).map(o), "getFreshObjects");
        (0, a.zv)("conditionalFetchManagerChannelHistory", z);
        const Ee = "reachedEnd",
          be = (0, t.A)(
            () =>
              new i.Ay({
                storeKey: "channelHistory",
                fetch: n.A,
                metricsName: "channel-history-reached-end",
                isEnabled: () => !0,
              })
          ),
          Ce = _(
            ($) => be().markObjectsAsFresh($, [Ee]),
            "markReachedEndAsFresh"
          ),
          Z = _(($) => be().isObjectFresh($, [Ee]), "isReachedEndFresh");
      },
      7097022175: (W, A, e) => {
        "use strict";
        e.d(A, {
          Y: () => s,
          r: () => n,
        });
        var t = e(7933637612);
        const { addObjects: n, removeObjects: s } = t.o1;
      },
      7933637612: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => o,
          Tp: () => d,
          o1: () => i,
        });
        var t = e(7538465478);
        const n = {
            storeKey: "channelLoading",
            persistenceEnabled: !1,
          },
          {
            reducer: s,
            actions: i,
            selectors: d,
          } = (0, t.A)(n, {
            idKey: "channelId",
            transform: (a) => {
              const { channelId: r, ...c } = a;
              return {
                id: r,
                object: c,
              };
            },
          }),
          o = s;
      },
      8298125694: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ah: () => i,
          Qr: () => d,
          c: () => o,
        });
        var t = e(8161242485),
          n = e(7933637612);
        const { getObjectById: s } = n.Tp,
          i = _((r, c) => s(r, c), "innerGetChannelLoadingDataById"),
          d = (0, t.Ay)((r, c) => {
            var u;
            return !!(!((u = i(r, c)) === null || u === void 0) && u.loading);
          });
        d.meta = {
          name: "createSelector",
          key: "createSelectorisChannelLoading",
          description: (r, c) => {
            var u;
            return !!(!((u = i(r, c)) === null || u === void 0) && u.loading);
          },
        };
        const o = (0, t.Ay)((r, c) => {
          const u = i(r, c);
          return !!(u != null && u.loading && u != null && u.loadingOlder);
        });
        o.meta = {
          name: "createSelector",
          key: "createSelectorisChannelLoadingOlder",
          description: (r, c) => {
            const u = i(r, c);
            return !!(u != null && u.loading && u != null && u.loadingOlder);
          },
        };
        const a = {
          innerGetChannelLoadingDataById: i,
        };
      },
      3528815215: (W, A, e) => {
        "use strict";
        e.d(A, {
          f: () => s,
        });
        var t = e(1031947056),
          n = e(7097022175);
        const s = (0, t.Ay)(
          "Finished loading history for a channel",
          (i, d, o) => {
            const { channelId: a } = o || {};
            i(
              (0, n.Y)({
                ids: [a],
              })
            );
          }
        );
        s.meta = {
          name: "createThunk",
          key: "createThunkdoneLoading",
          description: "Finished loading history for a channel",
        };
      },
      1284885799: (W, A, e) => {
        "use strict";
        e.d(A, {
          v: () => i,
        });
        var t = e(1031947056),
          n = e(8298125694),
          s = e(7097022175);
        const i = (0, t.Ay)(
          "Started loading history for a channel",
          (d, o, a) => {
            const { channelId: r, loadingOlder: c, request: u } = a || {},
              l = (0, n.Ah)(o(), r);
            l && l.loading && l.request && l.request.cancel(),
              d(
                (0, s.r)({
                  objects: [
                    {
                      channelId: r,
                      loading: !0,
                      loadingOlder: c,
                      request: u,
                    },
                  ],
                })
              );
          }
        );
        i.meta = {
          name: "createThunk",
          key: "createThunkstartLoading",
          description: "Started loading history for a channel",
        };
      },
      1949656963: (W, A, e) => {
        "use strict";
        e.d(A, {
          U: () => s,
          ih: () => i,
          k9: () => n,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Set the history invalid timestamp for a channel");
        n.meta = {
          name: "createAction",
          key: "createActionsetHistoryInvalidTimestamp",
          description: "Set the history invalid timestamp for a channel",
        };
        const s = (0, t.Ay)("Set the updated timestamp for a channel");
        s.meta = {
          name: "createAction",
          key: "createActionsetUpdatedTimestamp",
          description: "Set the updated timestamp for a channel",
        };
        const i = (0, t.Ay)(
          "Bulk update the history invalid timestamps for a channel"
        );
        i.meta = {
          name: "createAction",
          key: "createActionbulkUpdateMutationTimestamps",
          description:
            "Bulk update the history invalid timestamps for a channel",
        };
      },
      4405788578: (W, A, e) => {
        "use strict";
        e.d(A, {
          Kq: () => d,
          QO: () => i,
        });
        var t = e(8161242485);
        const n = (0, t.Ay)((o) =>
          o == null ? void 0 : o.channelMutationTimestamps
        );
        n.meta = {
          name: "createSelector",
          key: "createSelectorgetAllMutationTimestamps",
          description: (o) =>
            o == null ? void 0 : o.channelMutationTimestamps,
        };
        const s = (0, t.Ay)((o, a) => {
          var r;
          return (r = n(o)) === null || r === void 0 ? void 0 : r[a];
        });
        s.meta = {
          name: "createSelector",
          key: "createSelectorgetMutationTimestampsByChannelId",
          description: (o, a) => {
            var r;
            return (r = n(o)) === null || r === void 0 ? void 0 : r[a];
          },
        };
        const i = (0, t.Ay)((o, a) => {
          var r;
          return (r = s(o, a)) === null || r === void 0 ? void 0 : r.updatedTs;
        });
        i.meta = {
          name: "createSelector",
          key: "createSelectorgetUpdatedTimestamp",
          description: (o, a) => {
            var r;
            return (r = s(o, a)) === null || r === void 0
              ? void 0
              : r.updatedTs;
          },
        };
        const d = (0, t.Ay)((o, a) => {
          var r;
          return (r = s(o, a)) === null || r === void 0
            ? void 0
            : r.historyInvalidTs;
        });
        d.meta = {
          name: "createSelector",
          key: "createSelectorgetHistoryInvalidTimestamp",
          description: (o, a) => {
            var r;
            return (r = s(o, a)) === null || r === void 0
              ? void 0
              : r.historyInvalidTs;
          },
        };
      },
      9606603587: (W, A, e) => {
        "use strict";
        e.d(A, {
          B: () => i,
        });
        var t = e(1031947056),
          n = e(3430841143),
          s = e(9530687876);
        const i = (0, t.Ay)(s.rd.ADD_CHANNEL, function (d, o) {
          let { channel: a } =
            arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          !a ||
            !a.id ||
            d(
              (0, n.F)({
                channel: a,
                reason: s.rd.ADD_CHANNEL,
              })
            );
        });
        i.meta = {
          name: "createThunk",
          key: "createThunkaddChannel",
          description: s.rd.ADD_CHANNEL,
        };
      },
      1761027239: (W, A, e) => {
        "use strict";
        e.d(A, {
          t: () => r,
        });
        var t = e(6422693406),
          n = e(1031947056),
          s = e(4446301238),
          i = e(3430841143),
          d = e(9530687876),
          o = e(5267010247),
          a = e(8822892075);
        const r = (0, n.Ay)(
          "Archives a private channel, creates and upserts a new one with the same name, then adds users",
          (c, u, l) => {
            let {
              channelId: m,
              users: v,
              subteams: E,
              inviteAll: T,
              force: g,
              propagateInviteResult: I,
            } = l;
            return c(
              (0, s.wb)({
                channelId: m,
                reason: d.rd.CHILD_CHANNEL_CREATED,
              })
            ).then(function () {
              let { channel: f } =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : {};
              return (
                c(
                  (0, i.F)({
                    channel: f,
                    reason: d.rd.CHILD_CHANNEL_CREATED,
                  })
                ),
                c((0, o.o)((0, a.pr)(f.id))),
                I
                  ? T || v || E
                    ? c(
                        (0, s.Cw)({
                          channelId: f.id,
                          users: v,
                          subteams: E,
                          inviteAll: T,
                          force: g,
                        })
                      ).then((y) => ({
                        channel: f,
                        inviteResult: y,
                      }))
                    : t.S.resolve({
                        channel: f,
                        inviteResult: {
                          ok: !0,
                        },
                      })
                  : (c(
                      (0, s.Cw)({
                        channelId: f.id,
                        users: v,
                        subteams: E,
                      })
                    ),
                    t.S.resolve({
                      channel: f,
                    }))
              );
            });
          }
        );
        r.meta = {
          name: "createThunk",
          key: "createThunkcreateChildChannelAndAddMembers",
          description:
            "Archives a private channel, creates and upserts a new one with the same name, then adds users",
        };
      },
      613926746: (W, A, e) => {
        "use strict";
        e.d(A, {
          Z: () => s,
        });
        var t = e(1031947056),
          n = e(7631186994);
        const s = (0, t.Ay)("Create or open an IM", function (i, d) {
          let {
            memberId: o,
            shouldNavigateToChannel: a = !0,
            reason: r,
          } = arguments.length > 2 && arguments[2] !== void 0
            ? arguments[2]
            : {};
          const c = o ? [o] : [];
          return i(
            (0, n.r)({
              memberIds: c,
              shouldNavigateToChannel: a,
              reason: r,
            })
          );
        });
        s.meta = {
          name: "createThunk",
          key: "createThunkstartImByMemberId",
          description: "Create or open an IM",
        };
      },
      7631186994: (W, A, e) => {
        "use strict";
        e.d(A, {
          r: () => m,
        });
        var t = e(6422693406),
          n = e(9113979368),
          s = e(235108050),
          i = e(1031947056),
          d = e(5795074931),
          o = e(9884588328),
          a = e(4446301238),
          r = e(8822892075),
          c = e(9101533895),
          u = e(3430841143),
          l = e(5267010247);
        const m = (0, i.Ay)("Create or open an MPIM", function (v, E) {
          let {
            memberIds: T,
            shouldNavigateToChannel: g = !0,
            isQuiet: I = !1,
            reason: f = "startMpimByMemberIds",
          } = arguments.length > 2 && arguments[2] !== void 0
            ? arguments[2]
            : {};
          if ((0, n.A)(T)) return t.S.resolve();
          const y = E(),
            M = _(
              (C) => (v((0, l.o)((0, r.pr)(C.id))), t.S.resolve(C)),
              "navigateToChannel"
            );
          let p, O;
          if (T.length === 1) (O = T), (p = (0, c.Pu)(y, T[0]));
          else {
            const C = (0, d.WR)(y);
            (O = (0, s.A)([C, ...T])), (p = (0, c.FB)(y, O));
          }
          return (0, o.nT)(p)
            ? g
              ? M(p)
              : t.S.resolve(p)
            : v(
                (0, a.jP)({
                  isQuiet: I,
                  memberIds: O,
                  reason: f,
                })
              ).then((C) =>
                !C || !C.channel
                  ? t.S.reject(new Error("missing-channel"))
                  : (v(
                      (0, u.F)({
                        channel: C.channel,
                      })
                    ),
                    g ? M(C.channel) : t.S.resolve(C.channel))
              );
        });
        m.meta = {
          name: "createThunk",
          key: "createThunkstartMpimByMemberIds",
          description: "Create or open an MPIM",
        };
      },
      4711657482: (W, A, e) => {
        "use strict";
        e.d(A, {
          CS: () => u,
          HM: () => i,
          IX: () => v,
          JC: () => I,
          JT: () => O,
          Kv: () => x,
          MC: () => M,
          MD: () => ae,
          Ov: () => y,
          PV: () => oe,
          RS: () => h,
          Ri: () => H,
          VM: () => p,
          Xr: () => E,
          Xu: () => a,
          Y5: () => z,
          Ye: () => f,
          Yr: () => n,
          Yy: () => C,
          Z8: () => q,
          _Q: () => s,
          ai: () => B,
          e0: () => S,
          f: () => V,
          fc: () => P,
          fl: () => T,
          ho: () => R,
          i9: () => r,
          kB: () => m,
          ke: () => g,
          l3: () => F,
          mP: () => K,
          mt: () => Ae,
          qC: () => D,
          r5: () => X,
          r6: () => l,
          rl: () => G,
          uN: () => c,
          vp: () => d,
          yK: () => b,
          yQ: () => o,
          yg: () => U,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Checkout Address Form Data Loaded");
        n.meta = {
          name: "createAction",
          key: "createActioncheckoutAddressFormDataLoaded",
          description: "Checkout Address Form Data Loaded",
        };
        const s = (0, t.Ay)("Checkout Credit Card Form Loaded");
        s.meta = {
          name: "createAction",
          key: "createActionupdateCheckoutCreditCardFormLoaded",
          description: "Checkout Credit Card Form Loaded",
        };
        const i = (0, t.Ay)("Checkout States and Countries Data Loaded");
        i.meta = {
          name: "createAction",
          key: "createActioncheckoutStatesAndCountriesDataLoaded",
          description: "Checkout States and Countries Data Loaded",
        };
        const d = (0, t.Ay)("Checkout Company Address Data Loaded");
        d.meta = {
          name: "createAction",
          key: "createActioncheckoutCompanyAddressDataLoaded",
          description: "Checkout Company Address Data Loaded",
        };
        const o = (0, t.Ay)(
          "Checkout Action for setting isFetchingCurrencyAfterCountryChange"
        );
        o.meta = {
          name: "createAction",
          key: "createActionsetIsFetchingCurrencyAfterCountryChange",
          description:
            "Checkout Action for setting isFetchingCurrencyAfterCountryChange",
        };
        const a = (0, t.Ay)("Update Company Address Field");
        a.meta = {
          name: "createAction",
          key: "createActionupdateCompanyAddressField",
          description: "Update Company Address Field",
        };
        const r = (0, t.Ay)("Update is country from auto detect");
        r.meta = {
          name: "createAction",
          key: "createActionupdateIsCountryFromAutoDetect",
          description: "Update is country from auto detect",
        };
        const c = (0, t.Ay)("Company Address Validated");
        c.meta = {
          name: "createAction",
          key: "createActioncompanyAddressValidated",
          description: "Company Address Validated",
        };
        const u = (0, t.Ay)("Company Address Form Field Validated");
        u.meta = {
          name: "createAction",
          key: "createActioncompanyAddressFormFieldValidated",
          description: "Company Address Form Field Validated",
        };
        const l = (0, t.Ay)(
          "Clear Company Address Form Field Validation Errors"
        );
        l.meta = {
          name: "createAction",
          key: "createActionclearCompanyAddressFormFieldValidationErrors",
          description: "Clear Company Address Form Field Validation Errors",
        };
        const m = (0, t.Ay)("Upgrade Response Received");
        m.meta = {
          name: "createAction",
          key: "createActiononUpgradeResponseReceived",
          description: "Upgrade Response Received",
        };
        const v = (0, t.Ay)("Purchase Attempt Response Received");
        v.meta = {
          name: "createAction",
          key: "createActiononPurchaseAttemptResponseReceived",
          description: "Purchase Attempt Response Received",
        };
        const E = (0, t.Ay)("Addon Purchase Attempt Response Received");
        E.meta = {
          name: "createAction",
          key: "createActiononAddonPurchaseResponseReceived",
          description: "Addon Purchase Attempt Response Received",
        };
        const T = (0, t.Ay)("Purchase Attempt Confirmation Response Received");
        T.meta = {
          name: "createAction",
          key: "createActiononPurchaseAttemptConfirmationResponseReceived",
          description: "Purchase Attempt Confirmation Response Received",
        };
        const g = (0, t.Ay)("Update Stripe API Key");
        g.meta = {
          name: "createAction",
          key: "createActionupdateStripeApiKey",
          description: "Update Stripe API Key",
        };
        const I = (0, t.Ay)("Update Invoice Data Field");
        I.meta = {
          name: "createAction",
          key: "createActionupdateInvoiceDataField",
          description: "Update Invoice Data Field",
        };
        const f = (0, t.Ay)("Invoice Data Validated");
        f.meta = {
          name: "createAction",
          key: "createActioninvoiceDataValidated",
          description: "Invoice Data Validated",
        };
        const y = (0, t.Ay)("Invoice Form Field Validated");
        y.meta = {
          name: "createAction",
          key: "createActioninvoiceDataFieldValidated",
          description: "Invoice Form Field Validated",
        };
        const M = (0, t.Ay)("Clear Any Existing Payment Status or Errors");
        M.meta = {
          name: "createAction",
          key: "createActionclearPaymentStatus",
          description: "Clear Any Existing Payment Status or Errors",
        };
        const p = (0, t.Ay)("Self User Data Loaded");
        p.meta = {
          name: "createAction",
          key: "createActionselfUserDataLoaded",
          description: "Self User Data Loaded",
        };
        const O = (0, t.Ay)("Update Is Processing Payment");
        O.meta = {
          name: "createAction",
          key: "createActionupdateIsProcessingPayment",
          description: "Update Is Processing Payment",
        };
        const C = (0, t.Ay)("Update Payment Method Selected");
        C.meta = {
          name: "createAction",
          key: "createActionupdatePaymentMethodSelected",
          description: "Update Payment Method Selected",
        };
        const h = (0, t.Ay)("Update Show App Disconnect Dialog");
        h.meta = {
          name: "createAction",
          key: "createActionupdateIsAppDisconnectedDialogShown",
          description: "Update Show App Disconnect Dialog",
        };
        const D = (0, t.Ay)("Update Active Checkout Step");
        D.meta = {
          name: "createAction",
          key: "createActionupdateActiveCheckoutStep",
          description: "Update Active Checkout Step",
        };
        const P = (0, t.Ay)("Update Active Checkout Step");
        P.meta = {
          name: "createAction",
          key: "createActionupdateActiveSteppedCheckoutStep",
          description: "Update Active Checkout Step",
        };
        const S = (0, t.Ay)("Update Active Country");
        S.meta = {
          name: "createAction",
          key: "createActionupdateActiveCountry",
          description: "Update Active Country",
        };
        const b = (0, t.Ay)("Checkout configuration data loaded");
        b.meta = {
          name: "createAction",
          key: "createActioncheckoutConfigurationDataLoaded",
          description: "Checkout configuration data loaded",
        };
        const K = (0, t.Ay)("Update Checkout Flow API Error Indicator");
        K.meta = {
          name: "createAction",
          key: "createActionupdateIsCheckoutFlowAPIError",
          description: "Update Checkout Flow API Error Indicator",
        };
        const x = (0, t.Ay)(
          "Update checkout store values with configuration data"
        );
        x.meta = {
          name: "createAction",
          key: "createActionupdateCheckoutWithConfigData",
          description: "Update checkout store values with configuration data",
        };
        const B = (0, t.Ay)("Redeem partner promo code failed");
        B.meta = {
          name: "createAction",
          key: "createActionredeemPartnerPromoCodeFailed",
          description: "Redeem partner promo code failed",
        };
        const U = (0, t.Ay)("Redeem partner promo code success");
        U.meta = {
          name: "createAction",
          key: "createActionredeemPartnerPromoCodeSuccess",
          description: "Redeem partner promo code success",
        };
        const R = (0, t.Ay)(
          "Sets boolean regarding whether we are currently loading Stripe, i.e. getting a new Stripe library initializing promise and a new Setup Intent Client Secret"
        );
        R.meta = {
          name: "createAction",
          key: "createActionsetIsLoadingStripeCustomerAndPaymentMethods",
          description:
            "Sets boolean regarding whether we are currently loading Stripe, i.e. getting a new Stripe library initializing promise and a new Setup Intent Client Secret",
        };
        const G = (0, t.Ay)("Sets Active Payment Method Id");
        G.meta = {
          name: "createAction",
          key: "createActionsetActivePaymentMethodId",
          description: "Sets Active Payment Method Id",
        };
        const H = (0, t.Ay)("Sets Active Stripe Customer Id");
        H.meta = {
          name: "createAction",
          key: "createActionsetActiveStripeCustomerId",
          description: "Sets Active Stripe Customer Id",
        };
        const F = (0, t.Ay)(
          "Sets Active Stripe Customer Payment Method Types for UPE"
        );
        F.meta = {
          name: "createAction",
          key: "createActionsetPaymentMethodTypes",
          description:
            "Sets Active Stripe Customer Payment Method Types for UPE",
        };
        const V = (0, t.Ay)("Sets Payment Methods");
        V.meta = {
          name: "createAction",
          key: "createActionsetPaymentMethods",
          description: "Sets Payment Methods",
        };
        const X = (0, t.Ay)(
          "Sets the PaymentElementError, i.e. the error message"
        );
        X.meta = {
          name: "createAction",
          key: "createActionsetPaymentElementError",
          description: "Sets the PaymentElementError, i.e. the error message",
        };
        const q = (0, t.Ay)("Stripe UPE credit card form is complete");
        q.meta = {
          name: "createAction",
          key: "createActionsetIsStripeUpeComplete",
          description: "Stripe UPE credit card form is complete",
        };
        const oe = (0, t.Ay)("Stripe UPE credit card form has interactiono");
        oe.meta = {
          name: "createAction",
          key: "createActionsetHasUPEInteraction",
          description: "Stripe UPE credit card form has interactiono",
        };
        const z = (0, t.Ay)("Is address form collapsed and not editable");
        z.meta = {
          name: "createAction",
          key: "createActionsetIsAddressFormCollapsed",
          description: "Is address form collapsed and not editable",
        };
        const Ae = (0, t.Ay)("Select or deselect an addon by type");
        Ae.meta = {
          name: "createAction",
          key: "createActiontoggleSelectedAddon",
          description: "Select or deselect an addon by type",
        };
        const ae = (0, t.Ay)("Select or deselect an addon by type");
        ae.meta = {
          name: "createAction",
          key: "createActionsetAddonsForPurchase",
          description: "Select or deselect an addon by type",
        };
      },
      6460545324: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => a,
          bE: () => o,
          eM: () => i,
          gW: () => d,
          x: () => n,
          xj: () => s,
        });
        const t = {
            form: "form",
            review: "review",
            success: "success",
            addons: "addons",
            addon_success: "addon_success",
            trial_review: "trial_review",
            trial_success: "trial_success",
          },
          n = {
            overview: "overview",
            address: "address",
            payment: "payment",
            review: "review",
          },
          s = 200,
          i = {
            educational: "educational",
            local: {
              brazil: "local_discount_real",
              india: "local_discount_rupee",
            },
            nonprofit: "nonprofit",
            tenured_teams: "tenured_teams_discount",
            wfh_bundle: "wfhbundle",
            atlassian_2020: "atlassian_2020",
            smart_discount: "smart_discount",
            paid_acquisition_self_serve: "paid_acquisition_self_serve",
            price_increase_churn_prevention: "price_increase_churn_prevention",
            sfdc_customer_coupon_2022: "sfdc_customer_coupon_2022",
            slack_grb_campaign_coupon_2022: "slack_grb_campaign_coupon_2022",
            canvas_freemium_tenured_team_promo:
              "canvas_freemium_tenured_team_promo",
            straight_to_paid: "straight_to_paid",
            self_serve_affiliates: "self_serve_affiliates",
            new_year_discount_v2: "new_year_discount_v2",
            milestone_tenured_team_promo: "milestone_tenured_team_promo",
            winback_promo: "winback_promo",
            pricing_and_packaging_promo: "pricing_and_packaging_promo",
          },
          d = "partner_growth",
          o = {
            TEAM_INELIGIBLE: "team_ineligible",
            CODE_ALREADY_REDEEMED: "code_already_redeemed",
          },
          a = t;
      },
      3559164431: (W, A, e) => {
        "use strict";
        e.d(A, {
          $3: () => I,
          BD: () => ke,
          Bj: () => Se,
          Bo: () => c,
          Cb: () => re,
          D5: () => z,
          E$: () => g,
          EX: () => J,
          Ex: () => G,
          GG: () => Re,
          Hg: () => le,
          IK: () => Ue,
          J5: () => m,
          Ju: () => ye,
          M: () => h,
          MA: () => O,
          Oe: () => N,
          S_: () => a,
          U$: () => v,
          VE: () => x,
          VV: () => l,
          Vs: () => K,
          WP: () => oe,
          Wq: () => r,
          X: () => ae,
          YW: () => E,
          Yv: () => o,
          Zl: () => f,
          Zn: () => F,
          bB: () => y,
          bW: () => ne,
          bm: () => fe,
          c9: () => Z,
          cR: () => Ae,
          ch: () => w,
          d2: () => X,
          fD: () => Ze,
          fx: () => ge,
          gr: () => C,
          h0: () => de,
          hy: () => De,
          iD: () => k,
          k7: () => T,
          kr: () => Ee,
          lK: () => $,
          oi: () => U,
          oy: () => R,
          p: () => Ce,
          qR: () => be,
          qn: () => P,
          r2: () => Te,
          r8: () => H,
          rn: () => V,
          t5: () => B,
          tG: () => u,
          vO: () => ee,
          wz: () => M,
          y4: () => Ke,
          zj: () => D,
        });
        var t = e(8161242485),
          n = e(5597672932),
          s = e(9113979368),
          i = e(6323355797),
          d = e(2689960678);
        const o = (0, t.Ay)((Q) =>
          !Q ||
          !Q.checkoutFlow ||
          !Q.checkoutFlow.companyAddress ||
          !Q.checkoutFlow.companyAddress.validationErrors
            ? !1
            : Object.values(
                Q.checkoutFlow.companyAddress.validationErrors
              ).some((ie) => ie)
        );
        o.meta = {
          name: "createSelector",
          key: "createSelectorhasAddressFormErrors",
          description: (Q) =>
            !Q ||
            !Q.checkoutFlow ||
            !Q.checkoutFlow.companyAddress ||
            !Q.checkoutFlow.companyAddress.validationErrors
              ? !1
              : Object.values(
                  Q.checkoutFlow.companyAddress.validationErrors
                ).some((ie) => ie),
        };
        const a = (0, t.Ay)((Q) => {
          var ie;
          return (
            (Q == null || (ie = Q.checkoutFlow) === null || ie === void 0
              ? void 0
              : ie.activeStripeCustomerId) || null
          );
        });
        a.meta = {
          name: "createSelector",
          key: "createSelectorgetActiveCustomerId",
          description: (Q) => {
            var ie;
            return (
              (Q == null || (ie = Q.checkoutFlow) === null || ie === void 0
                ? void 0
                : ie.activeStripeCustomerId) || null
            );
          },
        };
        const r = (0, t.Ay)((Q) => {
          var ie;
          return (
            (Q == null || (ie = Q.checkoutFlow) === null || ie === void 0
              ? void 0
              : ie.isFetchingCurrencyAfterCountryChange) || !1
          );
        });
        r.meta = {
          name: "createSelector",
          key: "createSelectorgetIsFetchingCurrencyAfterCountryChange",
          description: (Q) => {
            var ie;
            return (
              (Q == null || (ie = Q.checkoutFlow) === null || ie === void 0
                ? void 0
                : ie.isFetchingCurrencyAfterCountryChange) || !1
            );
          },
        };
        const c = (0, t.Ay)((Q) => {
          var ie, Ve;
          return !(
            !(Q == null || (ie = Q.checkoutFlow) === null || ie === void 0) &&
            ie.activeStripeCustomerId
          ) ||
            !(
              !(Q == null || (Ve = Q.checkoutFlow) === null || Ve === void 0) &&
              Ve.activePaymentMethodIdMap
            )
            ? null
            : Q.checkoutFlow.activePaymentMethodIdMap[
                Q.checkoutFlow.activeStripeCustomerId
              ];
        });
        c.meta = {
          name: "createSelector",
          key: "createSelectorgetActivePaymentMethodId",
          description: (Q) => {
            var ie, Ve;
            return !(
              !(Q == null || (ie = Q.checkoutFlow) === null || ie === void 0) &&
              ie.activeStripeCustomerId
            ) ||
              !(
                !(
                  Q == null ||
                  (Ve = Q.checkoutFlow) === null ||
                  Ve === void 0
                ) && Ve.activePaymentMethodIdMap
              )
              ? null
              : Q.checkoutFlow.activePaymentMethodIdMap[
                  Q.checkoutFlow.activeStripeCustomerId
                ];
          },
        };
        const u = (0, t.Ay)((Q) => {
          var ie;
          return !Q || !Q.checkoutFlow
            ? null
            : (ie = Q.checkoutFlow) === null || ie === void 0
            ? void 0
            : ie.activePaymentMethodIdMap;
        });
        u.meta = {
          name: "createSelector",
          key: "createSelectorgetActivePaymentMethodIdMap",
          description: (Q) => {
            var ie;
            return !Q || !Q.checkoutFlow
              ? null
              : (ie = Q.checkoutFlow) === null || ie === void 0
              ? void 0
              : ie.activePaymentMethodIdMap;
          },
        };
        const l = (0, t.Ay)((Q) => {
          var ie;
          return !Q || !Q.checkoutFlow
            ? null
            : (ie = Q.checkoutFlow) === null || ie === void 0
            ? void 0
            : ie.paymentMethodTypes;
        });
        l.meta = {
          name: "createSelector",
          key: "createSelectorgetPaymentMethodTypes",
          description: (Q) => {
            var ie;
            return !Q || !Q.checkoutFlow
              ? null
              : (ie = Q.checkoutFlow) === null || ie === void 0
              ? void 0
              : ie.paymentMethodTypes;
          },
        };
        const m = (0, t.Ay)((Q) =>
          !Q || !Q.checkoutFlow ? null : Q.checkoutFlow.paymentMethods
        );
        m.meta = {
          name: "createSelector",
          key: "createSelectorgetPaymentMethods",
          description: (Q) =>
            !Q || !Q.checkoutFlow ? null : Q.checkoutFlow.paymentMethods,
        };
        const v = (0, t.Ay)((Q) => {
          const ie = c(Q);
          if (!ie || (0, s.A)(ie)) return null;
          const Ve = m(Q);
          return !ie || !Array.isArray(Ve)
            ? null
            : Ve.find((xe) => xe.id === ie);
        });
        v.meta = {
          name: "createSelector",
          key: "createSelectorgetActivePaymentMethod",
          description: (Q) => {
            const ie = c(Q);
            if (!ie || (0, s.A)(ie)) return null;
            const Ve = m(Q);
            return !ie || !Array.isArray(Ve)
              ? null
              : Ve.find((xe) => xe.id === ie);
          },
        };
        const E = (0, t.Ay)((Q) =>
          !Q || !Q.checkoutFlow || !Q.checkoutFlow.companyAddress
            ? null
            : Q.checkoutFlow.companyAddress
        );
        E.meta = {
          name: "createSelector",
          key: "createSelectorgetCompanyAddress",
          description: (Q) =>
            !Q || !Q.checkoutFlow || !Q.checkoutFlow.companyAddress
              ? null
              : Q.checkoutFlow.companyAddress,
        };
        const T = (0, t.Ay)((Q) => {
          var ie;
          return !!(
            !(Q == null || (ie = Q.checkoutFlow) === null || ie === void 0) &&
            ie.isAddressFormCollapsed
          );
        });
        T.meta = {
          name: "createSelector",
          key: "createSelectorgetIsAddressFormCollapsed",
          description: (Q) => {
            var ie;
            return !!(
              !(Q == null || (ie = Q.checkoutFlow) === null || ie === void 0) &&
              ie.isAddressFormCollapsed
            );
          },
        };
        const g = (0, t.Ay)((Q) => {
          var ie;
          return !!(
            !(Q == null || (ie = Q.checkoutFlow) === null || ie === void 0) &&
            ie.isPaymentMethodSectionDisplayed
          );
        });
        g.meta = {
          name: "createSelector",
          key: "createSelectorgetIsPaymentMethodSectionDisplayed",
          description: (Q) => {
            var ie;
            return !!(
              !(Q == null || (ie = Q.checkoutFlow) === null || ie === void 0) &&
              ie.isPaymentMethodSectionDisplayed
            );
          },
        };
        const I = (0, t.Ay)((Q) =>
          !Q ||
          !Q.checkoutFlow ||
          !Q.checkoutFlow.isLoadingStripeCustomerAndPaymentMethods
            ? null
            : Q.checkoutFlow.isLoadingStripeCustomerAndPaymentMethods
        );
        I.meta = {
          name: "createSelector",
          key: "createSelectorgetIsLoadingStripeCustomerAndPaymentMethods",
          description: (Q) =>
            !Q ||
            !Q.checkoutFlow ||
            !Q.checkoutFlow.isLoadingStripeCustomerAndPaymentMethods
              ? null
              : Q.checkoutFlow.isLoadingStripeCustomerAndPaymentMethods,
        };
        const f = (0, t.Ay)((Q) => {
          var ie, Ve;
          return !(
            Q == null ||
            (ie = Q.checkoutFlow) === null ||
            ie === void 0 ||
            (Ve = ie.config) === null ||
            Ve === void 0
          ) && Ve.countryMap
            ? Q.checkoutFlow.config.countryMap
            : null;
        });
        f.meta = {
          name: "createSelector",
          key: "createSelectorgetCountryMap",
          description: (Q) => {
            var ie, Ve;
            return !(
              Q == null ||
              (ie = Q.checkoutFlow) === null ||
              ie === void 0 ||
              (Ve = ie.config) === null ||
              Ve === void 0
            ) && Ve.countryMap
              ? Q.checkoutFlow.config.countryMap
              : null;
          },
        };
        const y = (0, t.Ay)((Q) => {
          var ie;
          return Q == null || (ie = Q.checkoutFlow) === null || ie === void 0
            ? void 0
            : ie.paymentElementError;
        });
        y.meta = {
          name: "createSelector",
          key: "createSelectorgetPaymentElementError",
          description: (Q) => {
            var ie;
            return Q == null || (ie = Q.checkoutFlow) === null || ie === void 0
              ? void 0
              : ie.paymentElementError;
          },
        };
        const M = (0, t.Ay)((Q) => {
          const ie = E(Q);
          return ie ? ie.country : null;
        });
        M.meta = {
          name: "createSelector",
          key: "createSelectorgetCompanyAddressCountry",
          description: (Q) => {
            const ie = E(Q);
            return ie ? ie.country : null;
          },
        };
        const p = (0, t.Ay)((Q) => {
          const ie = E(Q);
          return !ie || !ie.validationErrors || !ie.validationErrors.country
            ? null
            : ie.validationErrors.country.errorText;
        });
        p.meta = {
          name: "createSelector",
          key: "createSelectorgetCompanyAddressCountryError",
          description: (Q) => {
            const ie = E(Q);
            return !ie || !ie.validationErrors || !ie.validationErrors.country
              ? null
              : ie.validationErrors.country.errorText;
          },
        };
        const O = (0, t.Ay)((Q) => {
          var ie, Ve, xe;
          return (ie = E(Q)) === null ||
            ie === void 0 ||
            (Ve = ie.validationErrors) === null ||
            Ve === void 0 ||
            (xe = Ve.vatId) === null ||
            xe === void 0
            ? void 0
            : xe.errorText;
        });
        O.meta = {
          name: "createSelector",
          key: "createSelectorgetCompanyAddressVatIdError",
          description: (Q) => {
            var ie, Ve, xe;
            return (ie = E(Q)) === null ||
              ie === void 0 ||
              (Ve = ie.validationErrors) === null ||
              Ve === void 0 ||
              (xe = Ve.vatId) === null ||
              xe === void 0
              ? void 0
              : xe.errorText;
          },
        };
        const C = (0, t.Ay)((Q) => {
          const ie = E(Q);
          return ie ? ie.postalCode : null;
        });
        C.meta = {
          name: "createSelector",
          key: "createSelectorgetCompanyAddressPostalCode",
          description: (Q) => {
            const ie = E(Q);
            return ie ? ie.postalCode : null;
          },
        };
        const h = (0, t.Ay)((Q) => {
          const ie = E(Q);
          return ie ? ie.region : null;
        });
        h.meta = {
          name: "createSelector",
          key: "createSelectorgetCompanyAddressRegion",
          description: (Q) => {
            const ie = E(Q);
            return ie ? ie.region : null;
          },
        };
        const D = (0, t.Ay)((Q) =>
          !Q || !Q.checkoutFlow || !Q.checkoutFlow.config
            ? null
            : Q.checkoutFlow.config
        );
        D.meta = {
          name: "createSelector",
          key: "createSelectorgetConfig",
          description: (Q) =>
            !Q || !Q.checkoutFlow || !Q.checkoutFlow.config
              ? null
              : Q.checkoutFlow.config,
        };
        const P = (0, t.Ay)((Q) =>
          !Q || !Q.checkoutFlow || !Q.checkoutFlow.checkoutConfiguration
            ? null
            : Q.checkoutFlow.checkoutConfiguration
        );
        P.meta = {
          name: "createSelector",
          key: "createSelectorgetCheckoutPreConfig",
          description: (Q) =>
            !Q || !Q.checkoutFlow || !Q.checkoutFlow.checkoutConfiguration
              ? null
              : Q.checkoutFlow.checkoutConfiguration,
        };
        const S = (0, t.Ay)((Q) =>
          !Q ||
          !Q.checkoutFlow ||
          !Q.checkoutFlow.checkoutConfiguration ||
          !Q.checkoutFlow.checkoutConfiguration.currentTerm
            ? null
            : Q.checkoutFlow.checkoutConfiguration.currentTerm === i.ck.yearly
        );
        S.meta = {
          name: "createSelector",
          key: "createSelectorgetCheckoutPreConfigTermIsYearly",
          description: (Q) =>
            !Q ||
            !Q.checkoutFlow ||
            !Q.checkoutFlow.checkoutConfiguration ||
            !Q.checkoutFlow.checkoutConfiguration.currentTerm
              ? null
              : Q.checkoutFlow.checkoutConfiguration.currentTerm ===
                i.ck.yearly,
        };
        const b = (0, t.Ay)((Q) =>
          !Q ||
          !Q.checkoutFlow ||
          !Q.checkoutFlow.checkoutConfiguration ||
          !Q.checkoutFlow.checkoutConfiguration.currentPlanLevel
            ? null
            : Q.checkoutFlow.checkoutConfiguration.currentPlanLevel
        );
        b.meta = {
          name: "createSelector",
          key: "createSelectorgetCheckoutPreConfigPlanLevel",
          description: (Q) =>
            !Q ||
            !Q.checkoutFlow ||
            !Q.checkoutFlow.checkoutConfiguration ||
            !Q.checkoutFlow.checkoutConfiguration.currentPlanLevel
              ? null
              : Q.checkoutFlow.checkoutConfiguration.currentPlanLevel,
        };
        const K = (0, t.Ay)((Q) => {
          var ie, Ve;
          return (Ve =
            Q == null || (ie = Q.checkoutFlow) === null || ie === void 0
              ? void 0
              : ie.isCheckoutConfigurationDataLoaded) !== null && Ve !== void 0
            ? Ve
            : !1;
        });
        K.meta = {
          name: "createSelector",
          key: "createSelectorisCheckoutPreConfigLoaded",
          description: (Q) => {
            var ie, Ve;
            return (Ve =
              Q == null || (ie = Q.checkoutFlow) === null || ie === void 0
                ? void 0
                : ie.isCheckoutConfigurationDataLoaded) !== null &&
              Ve !== void 0
              ? Ve
              : !1;
          },
        };
        const x = (0, t.Ay)((Q) => {
          var ie, Ve;
          return !!(
            !(
              Q == null ||
              (ie = Q.checkoutFlow) === null ||
              ie === void 0 ||
              (Ve = ie.checkoutConfiguration) === null ||
              Ve === void 0
            ) && Ve.isFutureSwitch
          );
        });
        x.meta = {
          name: "createSelector",
          key: "createSelectorselectIsFutureProductSwitch",
          description: (Q) => {
            var ie, Ve;
            return !!(
              !(
                Q == null ||
                (ie = Q.checkoutFlow) === null ||
                ie === void 0 ||
                (Ve = ie.checkoutConfiguration) === null ||
                Ve === void 0
              ) && Ve.isFutureSwitch
            );
          },
        };
        const B = (0, t.Ay)((Q) => {
          var ie, Ve;
          return (
            (Q == null ||
            (ie = Q.checkoutFlow) === null ||
            ie === void 0 ||
            (Ve = ie.checkoutConfiguration) === null ||
            Ve === void 0
              ? void 0
              : Ve.availableTerms) || null
          );
        });
        B.meta = {
          name: "createSelector",
          key: "createSelectorselectAvailableTerms",
          description: (Q) => {
            var ie, Ve;
            return (
              (Q == null ||
              (ie = Q.checkoutFlow) === null ||
              ie === void 0 ||
              (Ve = ie.checkoutConfiguration) === null ||
              Ve === void 0
                ? void 0
                : Ve.availableTerms) || null
            );
          },
        };
        const U = (0, t.Ay)((Q) => {
          var ie, Ve;
          return (
            (Q == null ||
            (ie = Q.checkoutFlow) === null ||
            ie === void 0 ||
            (Ve = ie.checkoutConfiguration) === null ||
            Ve === void 0
              ? void 0
              : Ve.upeSelectedAvailableTerms) || null
          );
        });
        U.meta = {
          name: "createSelector",
          key: "createSelectorgetUpeSelectedAvailableTerms",
          description: (Q) => {
            var ie, Ve;
            return (
              (Q == null ||
              (ie = Q.checkoutFlow) === null ||
              ie === void 0 ||
              (Ve = ie.checkoutConfiguration) === null ||
              Ve === void 0
                ? void 0
                : Ve.upeSelectedAvailableTerms) || null
            );
          },
        };
        const R = (0, t.Ay)((Q) => {
          var ie, Ve;
          return Q == null ||
            (ie = Q.checkoutFlow) === null ||
            ie === void 0 ||
            (Ve = ie.checkoutConfiguration) === null ||
            Ve === void 0
            ? void 0
            : Ve.redirectUrl;
        });
        R.meta = {
          name: "createSelector",
          key: "createSelectorselectRedirectUrl",
          description: (Q) => {
            var ie, Ve;
            return Q == null ||
              (ie = Q.checkoutFlow) === null ||
              ie === void 0 ||
              (Ve = ie.checkoutConfiguration) === null ||
              Ve === void 0
              ? void 0
              : Ve.redirectUrl;
          },
        };
        const G = (0, t.Ay)((Q) => {
          var ie;
          return !!(
            !(Q == null || (ie = Q.checkoutFlow) === null || ie === void 0) &&
            ie.isCheckoutAddressFormDataLoaded
          );
        });
        G.meta = {
          name: "createSelector",
          key: "createSelectorisCheckoutAddressFormDataLoaded",
          description: (Q) => {
            var ie;
            return !!(
              !(Q == null || (ie = Q.checkoutFlow) === null || ie === void 0) &&
              ie.isCheckoutAddressFormDataLoaded
            );
          },
        };
        const H = (0, t.Ay)((Q) => {
          var ie;
          return !!(
            !(Q == null || (ie = Q.checkoutFlow) === null || ie === void 0) &&
            ie.isCountryFromAutoDetect
          );
        });
        H.meta = {
          name: "createSelector",
          key: "createSelectorgetIsCountryFromAutoDetect",
          description: (Q) => {
            var ie;
            return !!(
              !(Q == null || (ie = Q.checkoutFlow) === null || ie === void 0) &&
              ie.isCountryFromAutoDetect
            );
          },
        };
        const F = (0, t.Ay)((Q) => {
          var ie;
          return !!(
            !(Q == null || (ie = Q.checkoutFlow) === null || ie === void 0) &&
            ie.isCheckoutCreditCardFormLoaded
          );
        });
        F.meta = {
          name: "createSelector",
          key: "createSelectorgetIsCheckoutCreditCardFormLoaded",
          description: (Q) => {
            var ie;
            return !!(
              !(Q == null || (ie = Q.checkoutFlow) === null || ie === void 0) &&
              ie.isCheckoutCreditCardFormLoaded
            );
          },
        };
        const V = (0, t.Ay)((Q) => {
          var ie;
          return !!(
            !(Q == null || (ie = Q.checkoutFlow) === null || ie === void 0) &&
            ie.isStripeUpeComplete
          );
        });
        V.meta = {
          name: "createSelector",
          key: "createSelectorgetIsStripeUpeComplete",
          description: (Q) => {
            var ie;
            return !!(
              !(Q == null || (ie = Q.checkoutFlow) === null || ie === void 0) &&
              ie.isStripeUpeComplete
            );
          },
        };
        const X = (0, t.Ay)((Q) => {
          var ie;
          return !!(
            !(Q == null || (ie = Q.checkoutFlow) === null || ie === void 0) &&
            ie.hasUPEInteraction
          );
        });
        X.meta = {
          name: "createSelector",
          key: "createSelectorgetHasUPEInteraction",
          description: (Q) => {
            var ie;
            return !!(
              !(Q == null || (ie = Q.checkoutFlow) === null || ie === void 0) &&
              ie.hasUPEInteraction
            );
          },
        };
        const q = (0, t.Ay)((Q) =>
          !Q || !Q.checkoutFlow ? null : Q.checkoutFlow.paymentStatus
        );
        q.meta = {
          name: "createSelector",
          key: "createSelectorgetPaymentStatus",
          description: (Q) =>
            !Q || !Q.checkoutFlow ? null : Q.checkoutFlow.paymentStatus,
        };
        const oe = (0, t.Ay)((Q) => {
          const ie = q(Q);
          return ie
            ? ie.ok === !0 && !ie.error && !ie.isActionRequiredOnPurchaseAttempt
            : !1;
        });
        oe.meta = {
          name: "createSelector",
          key: "createSelectordidUpgradeSucceed",
          description: (Q) => {
            const ie = q(Q);
            return ie
              ? ie.ok === !0 &&
                  !ie.error &&
                  !ie.isActionRequiredOnPurchaseAttempt
              : !1;
          },
        };
        const z = (0, t.Ay)((Q) => {
          const ie = q(Q);
          return ie ? (ie.error && ie.msg ? ie.msg : ie.error) : "";
        });
        z.meta = {
          name: "createSelector",
          key: "createSelectorgetUpgradeError",
          description: (Q) => {
            const ie = q(Q);
            return ie ? (ie.error && ie.msg ? ie.msg : ie.error) : "";
          },
        };
        const Ae = (0, t.Ay)((Q) => {
          const ie = q(Q);
          return !!(ie != null && ie.isProcessingPayment);
        });
        Ae.meta = {
          name: "createSelector",
          key: "createSelectorselectIsProcessingPayment",
          description: (Q) => {
            const ie = q(Q);
            return !!(ie != null && ie.isProcessingPayment);
          },
        };
        const ae = (0, t.Ay)((Q) => {
          const ie = D(Q);
          return ie ? ie.stripeApiKey : null;
        });
        ae.meta = {
          name: "createSelector",
          key: "createSelectorselectStripeApiKey",
          description: (Q) => {
            const ie = D(Q);
            return ie ? ie.stripeApiKey : null;
          },
        };
        const de = (0, t.Ay)((Q) => {
          const ie = D(Q);
          return ie ? ie.sourcesPayable : null;
        });
        de.meta = {
          name: "createSelector",
          key: "createSelectorselectSourcesPayable",
          description: (Q) => {
            const ie = D(Q);
            return ie ? ie.sourcesPayable : null;
          },
        };
        const ve = (0, t.Ay)((Q, ie) => {
          if (ie === null) return {};
          const Ve = de(Q);
          if (!Ve) return {};
          const xe = Object.values(Ve).find((je) => je.id === ie);
          return xe || {};
        });
        ve.meta = {
          name: "createSelector",
          key: "createSelectorselectSourcePayableById",
          description: (Q, ie) => {
            if (ie === null) return {};
            const Ve = de(Q);
            if (!Ve) return {};
            const xe = Object.values(Ve).find((je) => je.id === ie);
            return xe || {};
          },
        };
        const Se = (0, t.Ay)((Q) => {
          const ie = D(Q);
          return !ie || !ie.user ? !1 : ie.user.is_owner;
        });
        Se.meta = {
          name: "createSelector",
          key: "createSelectorselectIsSelfUserOwner",
          description: (Q) => {
            const ie = D(Q);
            return !ie || !ie.user ? !1 : ie.user.is_owner;
          },
        };
        const Ee = (0, t.Ay)((Q) => {
          const ie = D(Q);
          return !ie || !ie.user || !Q || !Q.checkoutFlow;
        });
        Ee.meta = {
          name: "createSelector",
          key: "createSelectorgetIsInvoiceFormLoading",
          description: (Q) => {
            const ie = D(Q);
            return !ie || !ie.user || !Q || !Q.checkoutFlow;
          },
        };
        const be = (0, t.Ay)((Q) =>
          !Q || !Q.checkoutFlow ? null : Q.checkoutFlow.invoiceData
        );
        be.meta = {
          name: "createSelector",
          key: "createSelectorgetInvoiceData",
          description: (Q) =>
            !Q || !Q.checkoutFlow ? null : Q.checkoutFlow.invoiceData,
        };
        const Ce = (0, t.Ay)((Q) =>
          !Q || !Q.checkoutFlow ? null : Q.checkoutFlow.paymentMethodSelected
        );
        Ce.meta = {
          name: "createSelector",
          key: "createSelectorselectPaymentMethodSelected",
          description: (Q) =>
            !Q || !Q.checkoutFlow ? null : Q.checkoutFlow.paymentMethodSelected,
        };
        const Z = (0, t.Ay)((Q) =>
          !Q || !Q.checkoutFlow
            ? null
            : Q.checkoutFlow.isAppDisconnectedDialogShown
        );
        Z.meta = {
          name: "createSelector",
          key: "createSelectorselectIsAppDisconnectedDialogShown",
          description: (Q) =>
            !Q || !Q.checkoutFlow
              ? null
              : Q.checkoutFlow.isAppDisconnectedDialogShown,
        };
        const $ = (0, t.Ay)((Q) =>
          !Q || !Q.checkoutFlow ? null : Q.checkoutFlow.activeCheckoutStep
        );
        $.meta = {
          name: "createSelector",
          key: "createSelectorselectActiveCheckoutStep",
          description: (Q) =>
            !Q || !Q.checkoutFlow ? null : Q.checkoutFlow.activeCheckoutStep,
        };
        const N = (0, t.Ay)((Q) => {
          var ie;
          return (
            (Q == null || (ie = Q.checkoutFlow) === null || ie === void 0
              ? void 0
              : ie.activeSteppedCheckoutStep) || null
          );
        });
        N.meta = {
          name: "createSelector",
          key: "createSelectorselectActiveSteppedCheckoutStep",
          description: (Q) => {
            var ie;
            return (
              (Q == null || (ie = Q.checkoutFlow) === null || ie === void 0
                ? void 0
                : ie.activeSteppedCheckoutStep) || null
            );
          },
        };
        const L = (0, t.Ay)((Q) => {
          var ie;
          return Q == null || (ie = Q.checkoutFlow) === null || ie === void 0
            ? void 0
            : ie.promoCodeRedeem;
        });
        L.meta = {
          name: "createSelector",
          key: "createSelectorselectPromoCodeRedeem",
          description: (Q) => {
            var ie;
            return Q == null || (ie = Q.checkoutFlow) === null || ie === void 0
              ? void 0
              : ie.promoCodeRedeem;
          },
        };
        const w = (0, t.Ay)((Q) => {
          var ie;
          return (
            ((ie = L(Q)) === null || ie === void 0 ? void 0 : ie.failed) || !1
          );
        });
        w.meta = {
          name: "createSelector",
          key: "createSelectorselectDidPromoCodeRedeemFail",
          description: (Q) => {
            var ie;
            return (
              ((ie = L(Q)) === null || ie === void 0 ? void 0 : ie.failed) || !1
            );
          },
        };
        const k = (0, t.Ay)((Q) => {
          var ie;
          return (
            ((ie = L(Q)) === null || ie === void 0 ? void 0 : ie.errorName) ||
            ""
          );
        });
        k.meta = {
          name: "createSelector",
          key: "createSelectorselectPromoCodeRedeemErrorName",
          description: (Q) => {
            var ie;
            return (
              ((ie = L(Q)) === null || ie === void 0 ? void 0 : ie.errorName) ||
              ""
            );
          },
        };
        const J = (0, t.Ay)((Q) => {
          var ie;
          return (
            ((ie = L(Q)) === null || ie === void 0
              ? void 0
              : ie.discountName) || ""
          );
        });
        J.meta = {
          name: "createSelector",
          key: "createSelectorselectPromoCodeRedeemFailedDiscountName",
          description: (Q) => {
            var ie;
            return (
              ((ie = L(Q)) === null || ie === void 0
                ? void 0
                : ie.discountName) || ""
            );
          },
        };
        const ee = (0, t.Ay)((Q) => {
          var ie;
          return (
            ((ie = L(Q)) === null || ie === void 0
              ? void 0
              : ie.discountPercentage) || 0
          );
        });
        ee.meta = {
          name: "createSelector",
          key: "createSelectorselectPromoCodeRedeemFailedDiscountPercentage",
          description: (Q) => {
            var ie;
            return (
              ((ie = L(Q)) === null || ie === void 0
                ? void 0
                : ie.discountPercentage) || 0
            );
          },
        };
        const ne = (0, t.Ay)((Q) => {
          var ie;
          return (
            ((ie = L(Q)) === null || ie === void 0
              ? void 0
              : ie.discountDuration) || 0
          );
        });
        ne.meta = {
          name: "createSelector",
          key: "createSelectorselectPromoCodeRedeemFailedDiscountDuration",
          description: (Q) => {
            var ie;
            return (
              ((ie = L(Q)) === null || ie === void 0
                ? void 0
                : ie.discountDuration) || 0
            );
          },
        };
        const pe = (0, t.Ay)((Q) => {
          var ie;
          return (
            ((ie = L(Q)) === null || ie === void 0 ? void 0 : ie.attempted) ||
            !1
          );
        });
        pe.meta = {
          name: "createSelector",
          key: "createSelectorselectDidAttemptPromoCodeRedeem",
          description: (Q) => {
            var ie;
            return (
              ((ie = L(Q)) === null || ie === void 0 ? void 0 : ie.attempted) ||
              !1
            );
          },
        };
        const Me = (0, t.Ay)((Q) => {
          var ie;
          return (
            ((ie = L(Q)) === null || ie === void 0 ? void 0 : ie.code) || null
          );
        });
        Me.meta = {
          name: "createSelector",
          key: "createSelectorselectPromoCode",
          description: (Q) => {
            var ie;
            return (
              ((ie = L(Q)) === null || ie === void 0 ? void 0 : ie.code) || null
            );
          },
        };
        const ke = (0, t.Ay)((Q) =>
          !Q || !Q.checkoutFlow ? null : Q.checkoutFlow.isCheckoutFlowAPIError
        );
        ke.meta = {
          name: "createSelector",
          key: "createSelectorselectIsCheckoutFlowAPIError",
          description: (Q) =>
            !Q || !Q.checkoutFlow
              ? null
              : Q.checkoutFlow.isCheckoutFlowAPIError,
        };
        const ge = (0, t.Ay)((Q) => {
          const ie = q(Q);
          return !!(ie != null && ie.isActionRequiredOnPurchaseAttempt);
        });
        ge.meta = {
          name: "createSelector",
          key: "createSelectorselectIsActionRequiredOnPurchaseAttempt",
          description: (Q) => {
            const ie = q(Q);
            return !!(ie != null && ie.isActionRequiredOnPurchaseAttempt);
          },
        };
        const fe = (0, t.Ay)((Q) => {
          const ie = q(Q);
          return (ie && ie.intentSecret) || "";
        });
        fe.meta = {
          name: "createSelector",
          key: "createSelectorselectIntentSecret",
          description: (Q) => {
            const ie = q(Q);
            return (ie && ie.intentSecret) || "";
          },
        };
        const re = (0, t.Ay)((Q) => {
          const ie = q(Q);
          return (ie && ie.billingItemId) || "";
        });
        re.meta = {
          name: "createSelector",
          key: "createSelectorselectBillingItemId",
          description: (Q) => {
            const ie = q(Q);
            return (ie && ie.billingItemId) || "";
          },
        };
        const le = (0, t.Ay)((Q) => (0, n.x)(Q, "self_serve_select"));
        le.meta = {
          name: "createSelector",
          key: "createSelectorselectCanViewEnterpriseSelect",
          description: (Q) => (0, n.x)(Q, "self_serve_select"),
        };
        const Re = (0, t.Ay)((Q) =>
          !Q ||
          !Q.checkoutFlow ||
          !Q.checkoutFlow.checkoutConfiguration ||
          !Q.checkoutFlow.checkoutConfiguration.addons
            ? null
            : Q.checkoutFlow.checkoutConfiguration.addons[0].id
        );
        Re.meta = {
          name: "createSelector",
          key: "createSelectorselectAddonId",
          description: (Q) =>
            !Q ||
            !Q.checkoutFlow ||
            !Q.checkoutFlow.checkoutConfiguration ||
            !Q.checkoutFlow.checkoutConfiguration.addons
              ? null
              : Q.checkoutFlow.checkoutConfiguration.addons[0].id,
        };
        const ye = (0, t.Ay)((Q) =>
          !Q || !Q.checkoutFlow || !Q.checkoutFlow.checkoutConfiguration
            ? !1
            : Q.checkoutFlow.checkoutConfiguration.isPayingByInvoice
        );
        ye.meta = {
          name: "createSelector",
          key: "createSelectorselectIsPayingByInvoice",
          description: (Q) =>
            !Q || !Q.checkoutFlow || !Q.checkoutFlow.checkoutConfiguration
              ? !1
              : Q.checkoutFlow.checkoutConfiguration.isPayingByInvoice,
        };
        const Te = (0, t.Ay)((Q) =>
          !Q ||
          !Q.checkoutFlow ||
          !Q.checkoutFlow.checkoutConfiguration ||
          !Q.checkoutFlow.checkoutConfiguration.addons
            ? null
            : Q.checkoutFlow.checkoutConfiguration.addons.map((ie) => ie.id)
        );
        Te.meta = {
          name: "createSelector",
          key: "createSelectorselectArrayOfAddonIds",
          description: (Q) =>
            !Q ||
            !Q.checkoutFlow ||
            !Q.checkoutFlow.checkoutConfiguration ||
            !Q.checkoutFlow.checkoutConfiguration.addons
              ? null
              : Q.checkoutFlow.checkoutConfiguration.addons.map((ie) => ie.id),
        };
        const De = (0, t.Ay)((Q) =>
          !Q ||
          !Q.checkoutFlow ||
          !Q.checkoutFlow.checkoutConfiguration ||
          !Q.checkoutFlow.checkoutConfiguration.addons
            ? null
            : Q.checkoutFlow.checkoutConfiguration.addons[0].type
        );
        De.meta = {
          name: "createSelector",
          key: "createSelectorselectAddonType",
          description: (Q) =>
            !Q ||
            !Q.checkoutFlow ||
            !Q.checkoutFlow.checkoutConfiguration ||
            !Q.checkoutFlow.checkoutConfiguration.addons
              ? null
              : Q.checkoutFlow.checkoutConfiguration.addons[0].type,
        };
        const Ue = (0, t.Ay)((Q) =>
          !Q || !Q.checkoutFlow || !Q.checkoutFlow.selectedAddonTypes
            ? d.Ml
            : Q.checkoutFlow.selectedAddonTypes
        );
        Ue.meta = {
          name: "createSelector",
          key: "createSelectorselectAddonsForPurchase",
          description: (Q) =>
            !Q || !Q.checkoutFlow || !Q.checkoutFlow.selectedAddonTypes
              ? d.Ml
              : Q.checkoutFlow.selectedAddonTypes,
        };
        const Ke = (0, t.Ay)((Q) =>
          !Q ||
          !Q.checkoutFlow ||
          !Q.checkoutFlow.checkoutConfiguration ||
          !Q.checkoutFlow.checkoutConfiguration.nextPossibleBillingDate
            ? null
            : Q.checkoutFlow.checkoutConfiguration.nextPossibleBillingDate
        );
        Ke.meta = {
          name: "createSelector",
          key: "createSelectorselectAddonBillingDate",
          description: (Q) =>
            !Q ||
            !Q.checkoutFlow ||
            !Q.checkoutFlow.checkoutConfiguration ||
            !Q.checkoutFlow.checkoutConfiguration.nextPossibleBillingDate
              ? null
              : Q.checkoutFlow.checkoutConfiguration.nextPossibleBillingDate,
        };
        const Ze = (0, t.Ay)((Q) => {
          var ie;
          return !Q || !Q.checkoutFlow
            ? null
            : (ie = Q.checkoutFlow.checkoutConfiguration) === null ||
              ie === void 0
            ? void 0
            : ie.isEligibleForDataDeletion;
        });
        Ze.meta = {
          name: "createSelector",
          key: "createSelectorselectIsEligibleForDataDeletion",
          description: (Q) => {
            var ie;
            return !Q || !Q.checkoutFlow
              ? null
              : (ie = Q.checkoutFlow.checkoutConfiguration) === null ||
                ie === void 0
              ? void 0
              : ie.isEligibleForDataDeletion;
          },
        };
      },
      8368515877: (W, A, e) => {
        "use strict";
        e.d(A, {
          l: () => f,
        });
        var t = e(9706240641),
          n = e(1031947056),
          s = e(3048437087),
          i = e(1649982175),
          d = e(9113979368),
          o = e(2927826522),
          a = e(6422693406),
          r = e(165535451),
          c = e(7520484642);
        const u = (0, n.Ay)(
          "fetches all available pricing plans for the team.",
          (y, M, p) =>
            new a.S((O) => {
              y((0, r.iV)(p)).then((C) => {
                y((0, c.wt)(C)), O();
              });
            })
        );
        u.meta = {
          name: "createThunk",
          key: "createThunkfetchPlansData",
          description: "fetches all available pricing plans for the team.",
        };
        const l = u;
        var m = e(6460545324),
          v = e(4711657482),
          E = e(6323355797);
        const T = _((y) => {
            var M, p;
            const O =
                ((M = y.product) === null || M === void 0
                  ? void 0
                  : M.level) === y.current_product.level,
              C =
                ((p = y.product) === null || p === void 0 ? void 0 : p.term) ===
                y.current_product.term,
              h = y.selected_payment_method === E.uq.CREDIT_CARD;
            return O && C && h ? [E.uq.CREDIT_CARD] : y.allowed_payment_methods;
          }, "filterAllowedPaymentMethods"),
          g = _((y) => {
            var M, p;
            const O =
                ((M = y.product) === null || M === void 0
                  ? void 0
                  : M.level) === y.current_product.level,
              C =
                ((p = y.product) === null || p === void 0 ? void 0 : p.term) ===
                y.current_product.term;
            return y.selected_payment_method === E.uq.INVOICE && O
              ? C
                ? [E.ck.monthly]
                : [E.ck.yearly]
              : y.available_terms;
          }, "getUpeSelectedAvailableTerms"),
          I = (0, n.Ay)(
            "Load configuration data for checkout",
            (function () {
              var y = (0, t.coroutine)(function* (M, p, O) {
                let { checkoutConfigData: C } = O,
                  h = (0, i.A)(C, [
                    "clientRequestId",
                    "requestId",
                    "args",
                    "method",
                    "ok",
                  ]);
                const D = !(0, d.A)(h);
                if (D) {
                  var P, S, b, K, x;
                  (h = Object.assign(h, {
                    planLevel:
                      (P = h.product) === null || P === void 0
                        ? void 0
                        : P.level,
                    term:
                      (S = h.product) === null || S === void 0
                        ? void 0
                        : S.term,
                    isTrial:
                      (b = h.product) === null || b === void 0
                        ? void 0
                        : b.is_trial,
                    isPayingByInvoice: h.current_product.is_invoice,
                    currency:
                      (K = h.product) === null || K === void 0
                        ? void 0
                        : K.currency,
                    productId:
                      (x = h.product) === null || x === void 0 ? void 0 : x.id,
                    currentPlanLevel: h.current_product.level,
                    currentTerm: h.current_product.term,
                    currentIsTrial: h.current_product.is_trial,
                    currentCurrency: h.current_product.currency,
                    currentProductId: h.current_product.id,
                    allowedPaymentMethods: T(h),
                    upeSelectedAvailableTerms: g(h),
                    isEligibleForDataDeletion: h.is_eligible_for_data_deletion,
                  })),
                    delete h.product,
                    delete h.current_product;
                }
                (h = (0, o.A)(h)),
                  M((0, v.yK)(h)),
                  D &&
                    (M((0, v.Kv)(h)),
                    yield M(
                      l({
                        checkout_step: m.Ay.form,
                      })
                    ));
              });
              return function (M, p, O) {
                return y.apply(this, arguments);
              };
            })()
          );
        I.meta = {
          name: "createThunk",
          key: "createThunkloadCheckoutConfigurationData",
          description: "Load configuration data for checkout",
        };
        const f = (0, n.Ay)(
          "Fetch configuration data for checkout",
          (function () {
            var y = (0, t.coroutine)(function* (M, p, O) {
              let { productId: C = null } = O;
              const h = "fetchConfigurationData",
                D = yield M(
                  (0, s.n)(
                    C
                      ? {
                          productId: C,
                          reason: h,
                        }
                      : {
                          reason: h,
                        }
                  )
                );
              yield M(
                I({
                  checkoutConfigData: D,
                })
              );
            });
            return function (M, p, O) {
              return y.apply(this, arguments);
            };
          })()
        );
        f.meta = {
          name: "createThunk",
          key: "createThunkfetchConfigurationData",
          description: "Fetch configuration data for checkout",
        };
      },
      2222994823: (W, A, e) => {
        "use strict";
        e.d(A, {
          I: () => o,
        });
        var t = e(2774532222),
          n = e(6323355797),
          s = e(4252064756),
          i = e(8234448831);
        const d = _((r) => {
            const c = (0, i.Ay)(r),
              u = c && c.pathname;
            return (0, s.D)(c) && (0, t.A)(u, (0, n.hZ)());
          }, "isPlansAppUrl"),
          o = _((r) => r && !d(r), "shouldCheckoutRedirect"),
          a = {
            isPlansAppUrl: d,
          };
      },
      4653418008: (W, A, e) => {
        "use strict";
        e.d(A, {
          LA: () => i,
          Th: () => d,
          kl: () => s,
          yg: () => n,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)(
          "Set the current theme field in redux (do not use this)"
        );
        n.meta = {
          name: "createAction",
          key: "createActionsetClientThemeInternal",
          description: "Set the current theme field in redux (do not use this)",
        };
        const s = (0, t.Ay)(
          "Set the OS system sync field in redux (do not use this)"
        );
        s.meta = {
          name: "createAction",
          key: "createActionsetSystemSyncInternal",
          description:
            "Set the OS system sync field in redux (do not use this)",
        };
        const i = (0, t.Ay)(
          "Set the OS system theme field in redux (do not use this)"
        );
        i.meta = {
          name: "createAction",
          key: "createActionsetSystemTheme",
          description:
            "Set the OS system theme field in redux (do not use this)",
        };
        const d = (0, t.Ay)("Set the client typeface");
        d.meta = {
          name: "createAction",
          key: "createActionsetClientTypeface",
          description: "Set the client typeface",
        };
      },
      5922222922: (W, A, e) => {
        "use strict";
        e.d(A, {
          C3: () => s,
          k4: () => t,
          u7: () => n,
        });
        const t = "slack-client-theme",
          n = "slack-client-theme-os-sync",
          s = "client-typeface";
      },
      5923036663: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => M,
        });
        var t = e(1703559452),
          n = e(796111729),
          s = e(4096483543),
          i = e(958961878),
          d = e(3245843483),
          o = e(9139930183),
          a = e(6533394955),
          r = e(5922222922),
          c = e(4653418008),
          u = e(3328068409),
          l = e(767804497),
          m = e(7439773700),
          v = e(9012396182),
          E = e(9733150292);
        let T = "light",
          g = !1,
          I = "light",
          f;
        try {
          f = (0, E.W6)(r.C3) || void 0;
        } catch {}
        try {
          i.w2 &&
            (0, s.A)() &&
            window.matchMedia &&
            window
              .matchMedia("(prefers-color-scheme: dark)")
              .addListener((p) => {
                const O = p.matches ? "dark" : "light";
                (I = O), g && (T = I);
                const C = (0, a.getClientStoreInstance)();
                if (C) {
                  const h = C.getState(),
                    D = (0, v.getBootedWorkspaces)(h),
                    P = (0, t.A)(
                      D.map((S) => (0, i.Ay)((0, a.getStateByTeamId)(S)))
                    );
                  C.dispatch((0, c.LA)(O)),
                    P && (0, u.FW)(h) && C.dispatch((0, l.P)(O));
                }
              });
        } catch (p) {
          (0, n.Wo)().warn(
            "CLIENT-THEME-STORE",
            "window.matchMedia hook failed; system theme will not be updated.",
            p
          );
        }
        try {
          const p = window.localStorage.getItem(r.k4),
            O = window.localStorage.getItem(r.u7);
          (T = p || "light"),
            i.w2 &&
              (O ? (g = O === "true") : (g = !p),
              window.matchMedia &&
                window.matchMedia("(prefers-color-scheme: dark)").matches &&
                (I = "dark"),
              g && (T = I)),
            (0, d.g9M)() &&
              ((0, d.cGU)({
                name: "userTheme",
                value: T,
              }),
              (0, d.cGU)({
                name: "systemThemeSyncEnabled",
                value: g,
              }));
        } catch (p) {
          (0, n.Wo)().warn(
            "CLIENT-THEME-STORE",
            "localStorage read failed; client theme will not be persisted.",
            p
          );
        }
        const M = (0, o.Ay)(
          {},
          {
            clientTheme: T,
            systemSync: g,
            systemTheme: I,
            clientTypeface: f,
          },
          {
            storeKey: "clientTheme",
            persistenceEnabled: !1,
          }
        )
          .on(c.yg, function (p) {
            let O =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : "light";
            return {
              ...p,
              clientTheme: O,
            };
          })
          .on(c.kl, function (p) {
            let O =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : !1;
            return {
              ...p,
              systemSync: O,
            };
          })
          .on(c.LA, function (p) {
            let O =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : "light";
            return {
              ...p,
              systemTheme: O,
            };
          })
          .on(c.Th, function (p) {
            let O =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : (0, m.kh)();
            return {
              ...p,
              clientTypeface: O,
            };
          });
      },
      767804497: (W, A, e) => {
        "use strict";
        e.d(A, {
          P: () => o,
        });
        var t = e(796111729),
          n = e(3245843483),
          s = e(1031947056),
          i = e(5922222922),
          d = e(4653418008);
        const o = (0, s.Ay)(
          "Set the current theme for the device",
          function (a, r) {
            let c =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : "light";
            try {
              window.localStorage.setItem(i.k4, c);
            } catch {
              (0, t.Wo)().warn(
                "CLIENT-THEME-STORE",
                "localStorage write failed; client theme will not be persisted."
              );
            }
            a((0, d.yg)(c)),
              (0, n.cGU)({
                name: "userTheme",
                value: c,
              });
          }
        );
        o.meta = {
          name: "createThunk",
          key: "createThunksetClientTheme",
          description: "Set the current theme for the device",
        };
      },
      5670953896: (W, A, e) => {
        "use strict";
        e.d(A, {
          $_: () => T,
          Ci: () => d,
          Dn: () => i,
          F8: () => u,
          MJ: () => v,
          N2: () => r,
          RX: () => a,
          Xc: () => E,
          ij: () => s,
          pq: () => l,
          qE: () => o,
          rj: () => m,
          sR: () => n,
          vN: () => c,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)(
          "Resets Slack Connect Invites to the provided inbound/outbound connect invites"
        );
        n.meta = {
          name: "createAction",
          key: "createActionresetConnectInvites",
          description:
            "Resets Slack Connect Invites to the provided inbound/outbound connect invites",
        };
        const s = (0, t.Ay)(
          "Resets Slack Connect Invites to the provided inbound/outbound pending connect invites"
        );
        s.meta = {
          name: "createAction",
          key: "createActionresetPendingConnectInvites",
          description:
            "Resets Slack Connect Invites to the provided inbound/outbound pending connect invites",
        };
        const i = (0, t.Ay)("Upserts a Slack Connect Invite");
        i.meta = {
          name: "createAction",
          key: "createActionupsertConnectInvite",
          description: "Upserts a Slack Connect Invite",
        };
        const d = (0, t.Ay)("Upserts a pending Slack Connect Invite");
        d.meta = {
          name: "createAction",
          key: "createActionupsertPendingConnectInvite",
          description: "Upserts a pending Slack Connect Invite",
        };
        const o = (0, t.Ay)("Removes a Slack Connect Invite");
        o.meta = {
          name: "createAction",
          key: "createActionremoveConnectInvite",
          description: "Removes a Slack Connect Invite",
        };
        const a = (0, t.Ay)("Removes a pending Slack Connect Invite");
        a.meta = {
          name: "createAction",
          key: "createActionremovePendingConnectInvite",
          description: "Removes a pending Slack Connect Invite",
        };
        const r = (0, t.Ay)("Sets freshness flag for Slack Connect invites");
        r.meta = {
          name: "createAction",
          key: "createActionsetAreInvitesFresh",
          description: "Sets freshness flag for Slack Connect invites",
        };
        const c = (0, t.Ay)(
          "Sets whether logged-in member's email has been verified for Slack Connect visibility purposes"
        );
        c.meta = {
          name: "createAction",
          key: "createActionsetIsEmailVerified",
          description:
            "Sets whether logged-in member's email has been verified for Slack Connect visibility purposes",
        };
        const u = (0, t.Ay)(
          "Sets whether logged-in member's email verification has failed"
        );
        u.meta = {
          name: "createAction",
          key: "createActionsetIsUserVerificationFetchError",
          description:
            "Sets whether logged-in member's email verification has failed",
        };
        const l = (0, t.Ay)(
          "Upserts an acceptance eligibility result for a Slack Connect channel invite"
        );
        l.meta = {
          name: "createAction",
          key: "createActionupsertChannelConnectInviteAcceptanceEligibilityResult",
          description:
            "Upserts an acceptance eligibility result for a Slack Connect channel invite",
        };
        const m = (0, t.Ay)(
          "Upserts an acceptance eligibility result for a Slack Connect DM invite"
        );
        m.meta = {
          name: "createAction",
          key: "createActionupsertDmConnectInviteAcceptanceEligibilityResult",
          description:
            "Upserts an acceptance eligibility result for a Slack Connect DM invite",
        };
        const v = (0, t.Ay)(
          "Upserts an acceptance eligibility result for a Slack Connect space invite"
        );
        v.meta = {
          name: "createAction",
          key: "createActionupsertSpaceConnectInviteAcceptanceEligibilityResult",
          description:
            "Upserts an acceptance eligibility result for a Slack Connect space invite",
        };
        const E = (0, t.Ay)(
          "Upserts whether an acceptance attempt has failed for a specific Slack Connect invite"
        );
        E.meta = {
          name: "createAction",
          key: "createActionupsertHasConnectInviteAcceptanceFailed",
          description:
            "Upserts whether an acceptance attempt has failed for a specific Slack Connect invite",
        };
        const T = (0, t.Ay)(
          "Sets whether we are currently switching workspaces"
        );
        T.meta = {
          name: "createAction",
          key: "createActionsetIsSwitchingWorkspaces",
          description: "Sets whether we are currently switching workspaces",
        };
      },
      1496122061: (W, A, e) => {
        "use strict";
        e.d(A, {
          d: () => u,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(1031947056),
          i = e(320199792),
          d = e(5914498199),
          o = e(5670953896),
          a = e(1605540670),
          r = e(3243667193),
          c = e(2368561198);
        const u = (0, s.Ay)(
          "Fetch and reset the result of connectInvites.list with only pending invites for inbound/outbound invites",
          (function () {
            var l = (0, t.coroutine)(function* (m, v, E) {
              let { reason: T } = E,
                g;
              const I = [r.k.Channel, r.k.Im];
              (0, c.i)(v()) && I.push(r.k.Workspace);
              const y = yield m(
                (0, a.O)({
                  reason: T,
                  inviteTypes: I,
                  onlyPendingInvites: !0,
                })
              );
              if (y != null && y.connect_invites) {
                g = y.connect_invites;
                const M = g.filter(i.Ef),
                  p = g.filter(i.I4);
                m(
                  (0, d.R)({
                    connectInvites: g,
                  })
                ),
                  m(
                    (0, o.ij)({
                      pendingInboundConnectInvites: M,
                      pendingOutboundConnectInvites: p,
                    })
                  );
              }
              return g || [];
            });
            return function (m, v, E) {
              return l.apply(this, arguments);
            };
          })()
        );
        u.meta = {
          name: "createThunk",
          key: "createThunkfetchAndResetAllPendingConnectInvites",
          description:
            "Fetch and reset the result of connectInvites.list with only pending invites for inbound/outbound invites",
        };
      },
      6111266013: (W, A, e) => {
        "use strict";
        e.d(A, {
          p: () => u,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(1031947056),
          i = e(3622175906),
          d = e(1605540670),
          o = e(5914498199),
          a = e(5670953896),
          r = e(3243667193),
          c = e(2368561198);
        const u = (0, s.Ay)(
          "Fetch and upsert the result of connectInvites.list for inbound/outbound invites",
          (function () {
            var l = (0, t.coroutine)(function* (m, v, E) {
              let { reason: T, direction: g, includeInviteRequests: I } = E,
                f;
              const y = [r.k.Channel, r.k.Im];
              (0, c.i)(v()) && y.push(r.k.Workspace);
              const p = yield m(
                (0, d.O)({
                  reason: T,
                  direction: g,
                  inviteTypes: y,
                  includeInviteRequests: I,
                })
              );
              if (p != null && p.connect_invites) {
                (f = p.connect_invites),
                  m(
                    (0, o.R)({
                      connectInvites: f,
                    })
                  );
                const O = {
                  inboundConnectInvites: g === i.D.Incoming ? f : void 0,
                  outboundConnectInvites: g === i.D.Outgoing ? f : void 0,
                };
                m((0, a.sR)(O));
              }
              return f || [];
            });
            return function (m, v, E) {
              return l.apply(this, arguments);
            };
          })()
        );
        u.meta = {
          name: "createThunk",
          key: "createThunkfetchAndResetConnectInvites",
          description:
            "Fetch and upsert the result of connectInvites.list for inbound/outbound invites",
        };
      },
      5914498199: (W, A, e) => {
        "use strict";
        e.d(A, {
          R: () => o,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(1031947056),
          i = e(7679955939),
          d = e(320199792);
        const o = (0, s.Ay)(
          "Upsert any non-local members referenced in the specified connect invites",
          (function () {
            var a = (0, t.coroutine)(function* (r, c, u) {
              let { connectInvites: l } = u;
              const m = [];
              l.forEach((v) => {
                const E = (0, d.$N)(v);
                if (
                  ((0, d.I4)(v) &&
                    E &&
                    E.forEach((T) => {
                      m.push((0, d.mZ)(T));
                    }),
                  (0, d.Ef)(v))
                ) {
                  m.push((0, d.y1)(v));
                  const T = (0, d.kR)(v);
                  T && m.push(T);
                }
              }),
                r(
                  (0, i.Ay)({
                    members: m,
                  })
                );
            });
            return function (r, c, u) {
              return a.apply(this, arguments);
            };
          })()
        );
        o.meta = {
          name: "createThunk",
          key: "createThunkupsertMembersFromConnectInvites",
          description:
            "Upsert any non-local members referenced in the specified connect invites",
        };
      },
      6168781067: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
        });
        var t = e(9139930183),
          n = e(2456103428);
        const s = {
            serviceOnline: !0,
            lastSocketActivity: 0,
            clientOnline: !0,
            lastClientConnection: Date.now(),
            lastSocketConnection: 0,
          },
          d = (0, t.Ay)({}, s, {
            storeKey: "connectivity",
            persistenceEnabled: !1,
          })
            .on(n.pm, (o, a) => ({
              ...o,
              serviceOnline: !!a,
            }))
            .on(n.Uj, (o) =>
              o === s
                ? {
                    ...o,
                    lastSocketActivity: Date.now(),
                  }
                : ((o.lastSocketActivity = Date.now()), o)
            )
            .on(n.p9, (o, a) => ({
              ...o,
              clientOnline: !!a,
              lastClientConnection: Date.now(),
            }))
            .on(n.hM, (o) => ({
              ...o,
              lastSocketConnection: Date.now(),
            }));
      },
      1314103953: (W, A, e) => {
        "use strict";
        e.d(A, {
          b: () => s,
          k: () => n,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)(
          "Set a value that represents whether we are currently in the boot phase"
        );
        n.meta = {
          name: "createAction",
          key: "createActionsetBootInFlight",
          description:
            "Set a value that represents whether we are currently in the boot phase",
        };
        const s = (0, t.Ay)(
          "Set a value that represents whether we are currently performing a warm boot"
        );
        s.meta = {
          name: "createAction",
          key: "createActionsetWarmBootInFlight",
          description:
            "Set a value that represents whether we are currently performing a warm boot",
        };
      },
      9469211187: (W, A, e) => {
        "use strict";
        e.d(A, {
          d: () => s,
          f: () => n,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Remove prefs for a given channel");
        n.meta = {
          name: "createAction",
          key: "createActionremovePrefsForConversation",
          description: "Remove prefs for a given channel",
        };
        const s = (0, t.Ay)(
          "Set channel prefs associated with a given channel"
        );
        s.meta = {
          name: "createAction",
          key: "createActionsetConversationsListPrefs",
          description: "Set channel prefs associated with a given channel",
        };
      },
      7914670207: (W, A, e) => {
        "use strict";
        e.d(A, {
          Dq: () => E,
          YO: () => T,
          im: () => I,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(3398586081),
          i = e(6639221719),
          d = e(8352634987),
          o = e(6422693406),
          a = e(4423055085),
          r = e(1031947056),
          c = e(6533394955),
          u = e(9469211187),
          l = e(8081461848);
        const m = (0, r.Ay)(
          "Fetch and upsert channel list prefs",
          (function () {
            var y = (0, t.coroutine)(function* (M, p, O) {
              let { channelId: C, teamId: h } = O;
              const D = yield M(
                  (0, i.U)({
                    channel: C,
                    reason: "client_redux_store",
                  })
                ),
                { prefs: P } = D;
              M(
                (0, u.d)({
                  channelId: C,
                  prefs: P,
                })
              ),
                g(h, C);
            });
            return function (M, p, O) {
              return y.apply(this, arguments);
            };
          })()
        );
        m.meta = {
          name: "createThunk",
          key: "createThunkfetchAndUpsertConversationsListPrefs",
          description: "Fetch and upsert channel list prefs",
        };
        const v = (0, s.A)(
            () =>
              new d.Ay({
                storeKey: l.U,
                fetch: (y, M) =>
                  o.S.map(M, (p) =>
                    (0, c.dispatchForTeamId)(
                      y,
                      m({
                        channelId: p,
                        teamId: y,
                      })
                    )
                  ),
                isEnabled: () => !0,
                metricsName: l.U,
              })
          ),
          E = _(
            (y, M) => v().markObjectsAsStale(y, [M]),
            "markConversationsListPrefsAsStale"
          ),
          T = _(
            (y, M) => v().markObjectsAsStale(y, M),
            "markConversationsListPrefsAsStaleForMultipleChannels"
          ),
          g = _(
            (y, M) => v().markObjectsAsFresh(y, [M]),
            "markConversationsListPrefsAsFresh"
          ),
          I = _(
            (y, M) => v().maybeRefetch(y, M),
            "maybeRefetchConversationsListPrefs"
          ),
          f = {
            fetchAndUpsertConversationsListPrefs: m,
          };
        (0, a.zv)("conditionalFetchManagerConversationsListPrefs", v);
      },
      8081461848: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => o,
          U: () => s,
        });
        var t = e(9139930183),
          n = e(9469211187);
        const s = "conversationsListPrefs",
          i = {},
          o = (0, t.Ay)({}, i, {
            storeKey: s,
            persistenceEnabled: !0,
          })
            .on(n.f, (a, r) => {
              let { channelId: c } = r;
              if (!c || !a[c]) return a;
              const u = {
                ...a,
              };
              return delete u[c], u;
            })
            .on(n.d, (a, r) => {
              let { channelId: c, prefs: u } = r;
              return c
                ? {
                    ...a,
                    [c]: u,
                  }
                : a;
            });
      },
      2527994834: (W, A, e) => {
        "use strict";
        e.d(A, {
          Q: () => o,
        });
        var t = e(3385422400),
          n = e(8847766420),
          s = e(7914670207),
          i = e(8040098042);
        const d = _((a, r) => {
            var c;
            const u = (0, n.ZT)(a);
            if (!u || !(0, i.A)(r)) return null;
            (0, s.im)(u, r);
            var l;
            return (l =
              a == null ||
              (c = a.conversationsListPrefs) === null ||
              c === void 0
                ? void 0
                : c[r]) !== null && l !== void 0
              ? l
              : null;
          }, "getConversationsListPrefsByChannelId"),
          o = (0, t.Mz)(
            (a, r, c) => d(a, c),
            (a, r) => r,
            (a, r) => (a == null ? void 0 : a[r])
          );
      },
      330221449: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ot: () => s,
          S9: () => d,
          X8: () => n,
          d$: () => a,
          d1: () => r,
          en: () => o,
          gx: () => i,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)(
          "Adds the new set of custom emoji to the existing store"
        );
        n.meta = {
          name: "createAction",
          key: "createActionaddCustomEmoji",
          description: "Adds the new set of custom emoji to the existing store",
        };
        const s = (0, t.Ay)("Resets the array of custom emoji in the store");
        s.meta = {
          name: "createAction",
          key: "createActionsetNewCustomEmojiData",
          description: "Resets the array of custom emoji in the store",
        };
        const i = (0, t.Ay)(
          "Removes the specified custom emoji from the store"
        );
        i.meta = {
          name: "createAction",
          key: "createActionremoveCustomEmoji",
          description: "Removes the specified custom emoji from the store",
        };
        const d = (0, t.Ay)("Renames a disabled custom emoji");
        d.meta = {
          name: "createAction",
          key: "createActionrenameCustomEmoji",
          description: "Renames a disabled custom emoji",
        };
        const o = (0, t.Ay)(
          "Set the loading status for the API request when a new page is loading"
        );
        o.meta = {
          name: "createAction",
          key: "createActionsetIsLoadingNewPage",
          description:
            "Set the loading status for the API request when a new page is loading",
        };
        const a = (0, t.Ay)(
          "Set the loading status for the API request when a user searches for emojis"
        );
        a.meta = {
          name: "createAction",
          key: "createActionsetIsLoadingNewSearchQuery",
          description:
            "Set the loading status for the API request when a user searches for emojis",
        };
        const r = (0, t.Ay)(
          "Set the current sort category and direction for the table"
        );
        r.meta = {
          name: "createAction",
          key: "createActionsetSort",
          description:
            "Set the current sort category and direction for the table",
        };
      },
      1484767411: (W, A, e) => {
        "use strict";
        e.d(A, {
          o: () => n,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Record that a message was deleted");
        n.meta = {
          name: "createAction",
          key: "createActionrecordMessageDeleted",
          description: "Record that a message was deleted",
        };
      },
      6739248722: (W, A, e) => {
        "use strict";
        e.d(A, {
          k: () => n,
        });
        var t = e(8161242485);
        const n = (0, t.Ay)((s, i) => {
          let { channelId: d, ts: o } = i;
          return (
            s &&
            s.deletedMessages &&
            s.deletedMessages[d] &&
            !!s.deletedMessages[d][o]
          );
        });
        n.meta = {
          name: "createSelector",
          key: "createSelectorwasMessageDeleted",
          description: (s, i) => {
            let { channelId: d, ts: o } = i;
            return (
              s &&
              s.deletedMessages &&
              s.deletedMessages[d] &&
              !!s.deletedMessages[d][o]
            );
          },
        };
      },
      1378315125: (W, A, e) => {
        "use strict";
        e.d(A, {
          $3: () => r,
          Bt: () => o,
          Ez: () => s,
          LS: () => u,
          Mk: () => i,
          NN: () => m,
          XF: () => d,
          Y$: () => v,
          Yv: () => n,
          _F: () => c,
          jC: () => l,
          n9: () => E,
          oR: () => g,
          um: () => T,
          yz: () => a,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Sets the highlight property of a download");
        n.meta = {
          name: "createAction",
          key: "createActioninternalSetDownloadHighlight",
          description: "Sets the highlight property of a download",
        };
        const s = (0, t.Ay)(
          "An update of the desktop state from the desktop app"
        );
        s.meta = {
          name: "createAction",
          key: "createActionupdateFromDesktop",
          description: "An update of the desktop state from the desktop app",
        };
        const i = (0, t.Ay)("An update of the window frame state");
        i.meta = {
          name: "createAction",
          key: "createActionupdateWindowFrameState",
          description: "An update of the window frame state",
        };
        const d = (0, t.Ay)("Starts a download on the desktop app");
        d.meta = {
          name: "createAction",
          key: "createActionstartDesktopDownload",
          description: "Starts a download on the desktop app",
        };
        const o = (0, t.Ay)("Pauses a download on the desktop app");
        o.meta = {
          name: "createAction",
          key: "createActionpauseDesktopDownload",
          description: "Pauses a download on the desktop app",
        };
        const a = (0, t.Ay)("Resumes a download on the desktop app");
        a.meta = {
          name: "createAction",
          key: "createActionresumeDesktopDownload",
          description: "Resumes a download on the desktop app",
        };
        const r = (0, t.Ay)("Cancels a download on the desktop app");
        r.meta = {
          name: "createAction",
          key: "createActioncancelDesktopDownload",
          description: "Cancels a download on the desktop app",
        };
        const c = (0, t.Ay)("Clears all stopped downloads for the active team");
        c.meta = {
          name: "createAction",
          key: "createActionclearTeamDesktopDownloads",
          description: "Clears all stopped downloads for the active team",
        };
        const u = (0, t.Ay)("Removes a download on the desktop app");
        u.meta = {
          name: "createAction",
          key: "createActionremoveDesktopDownload",
          description: "Removes a download on the desktop app",
        };
        const l = (0, t.Ay)("Retries a download on the desktop app");
        l.meta = {
          name: "createAction",
          key: "createActionretryDesktopDownload",
          description: "Retries a download on the desktop app",
        };
        const m = (0, t.Ay)("Opens a file downloaded by the desktop app");
        m.meta = {
          name: "createAction",
          key: "createActionopenDesktopDownload",
          description: "Opens a file downloaded by the desktop app",
        };
        const v = (0, t.Ay)(
          "Shows the folder that contains the downloaded file"
        );
        v.meta = {
          name: "createAction",
          key: "createActionshowDesktopDownload",
          description: "Shows the folder that contains the downloaded file",
        };
        const E = (0, t.Ay)("Toggles the performance monitor");
        E.meta = {
          name: "createAction",
          key: "createActiontogglePerformanceMonitor",
          description: "Toggles the performance monitor",
        };
        const T = (0, t.Ay)("Sets the currently active team in the SSB");
        T.meta = {
          name: "createAction",
          key: "createActionsetActiveTeam",
          description: "Sets the currently active team in the SSB",
        };
        const g = (0, t.Ay)("Update canvas system text settings in the SSB");
        g.meta = {
          name: "createAction",
          key: "createActionsetCanvasSystemTextSettings",
          description: "Update canvas system text settings in the SSB",
        };
      },
      7902571278: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => m,
        });
        var t = e(9139930183),
          n = e(4103274853),
          s = e(3571452446),
          i = e(2003990933),
          d = e(7715417323),
          o = e(3245843483),
          a = e(1378315125);
        const r = _(
            (v, E) => (0, n.A)(v, (T, g) => (0, n.A)(T, (I, f) => E(g, f, I))),
            "mapDownloads"
          ),
          c = _(
            (v) => ({
              ...{
                app: {},
                environment: {},
                settings: {},
                ...(0, s.A)(v, ["app", "settings", "environment"]),
                windows: (0, n.A)(
                  (v == null ? void 0 : v.windows) || {},
                  (T) => ({
                    frame: (0, s.A)(T.frame, [
                      "isFullScreen",
                      "isFocused",
                      "isVisible",
                      "hasVibrancy",
                      "isCurrentlyAudible",
                    ]),
                  })
                ),
                downloads: r(
                  (v == null ? void 0 : v.downloads) || {},
                  (T, g, I) => ({
                    ...I,
                    highlight: !1,
                  })
                ),
                debug: {
                  isPerformanceMonitorEnabled: !1,
                },
              },
              activeTeamId: (0, i.A)(
                window,
                "desktop.reduxHelper.state.selectedTeamId"
              ),
            }),
            "initializeState"
          ),
          u = (0, o.g9M)()
            ? c((0, i.A)(window, "desktop.redux.getState", d.A)())
            : null,
          m = (0, t.Ay)({}, u, {
            storeKey: "desktop",
            persistenceEnabled: !1,
          })
            .on(a.Ez, (v, E) => {
              const T = E.downloads
                ? r(E.downloads, (g, I, f) => ({
                    ...f,
                    highlight: (0, i.A)(v.downloads, [g, I, "highlight"], !1),
                  }))
                : v.downloads;
              return {
                ...v,
                ...E,
                downloads: T,
              };
            })
            .on(a.Mk, (v, E) => {
              let { windowId: T, property: g, value: I } = E;
              var f, y, M;
              return {
                ...v,
                windows: {
                  ...v.windows,
                  [T]: {
                    ...(((f = v.windows) === null || f === void 0
                      ? void 0
                      : f[T]) || {}),
                    frame: {
                      ...(((y = v.windows) === null ||
                      y === void 0 ||
                      (M = y[T]) === null ||
                      M === void 0
                        ? void 0
                        : M.frame) || {}),
                      [g]: I,
                    },
                  },
                },
              };
            })
            .on(a.Yv, (v, E) => {
              let { fileId: T, teamId: g, highlight: I } = E;
              return (0, i.A)(v.downloads, [g, T])
                ? {
                    ...v,
                    downloads: {
                      ...v.downloads,
                      [g]: {
                        ...v.downloads[g],
                        [T]: {
                          ...v.downloads[g][T],
                          highlight: I,
                        },
                      },
                    },
                  }
                : v;
            })
            .on(a.n9, (v) => ({
              ...v,
              debug: {
                ...v.debug,
                isPerformanceMonitorEnabled:
                  !v.debug.isPerformanceMonitorEnabled,
              },
            }))
            .on(a.um, (v, E) =>
              E
                ? {
                    ...v,
                    activeTeamId: E,
                  }
                : v
            );
      },
      7600673124: (W, A, e) => {
        "use strict";
        e.d(A, {
          y: () => n,
        });
        var t = e(5818203962);
        const n = _((s, i) => (0, t.I$)(s, i), "getIsMemberDisconnectedById");
      },
      4318855015: (W, A, e) => {
        "use strict";
        e.d(A, {
          $x: () => d,
          H9: () => n,
          at: () => a,
          j_: () => c,
          jy: () => r,
          o2: () => i,
          qw: () => s,
          su: () => o,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Mark emoji collections as fetch (or not fetched");
        n.meta = {
          name: "createAction",
          key: "createActionsetEmojiCollectionsFetched",
          description: "Mark emoji collections as fetch (or not fetched",
        };
        const s = (0, t.Ay)("Set and replace emoji collections");
        s.meta = {
          name: "createAction",
          key: "createActionsetEmojiCollections",
          description: "Set and replace emoji collections",
        };
        const i = (0, t.Ay)(
          "Signals that an emoji collection has been installed"
        );
        i.meta = {
          name: "createAction",
          key: "createActioninstallEmojiCollection",
          description: "Signals that an emoji collection has been installed",
        };
        const d = (0, t.Ay)(
          "Signals that an emoji collection has been uninstalled"
        );
        d.meta = {
          name: "createAction",
          key: "createActionuninstallEmojiCollection",
          description: "Signals that an emoji collection has been uninstalled",
        };
        const o = (0, t.Ay)("Signals that badges should be added post-install");
        o.meta = {
          name: "createAction",
          key: "createActionbadgeEmojiCollection",
          description: "Signals that badges should be added post-install",
        };
        const a = (0, t.Ay)(
          "Signals that the message input badge should be removed"
        );
        a.meta = {
          name: "createAction",
          key: "createActionremoveEmojiCollectionInputBadge",
          description: "Signals that the message input badge should be removed",
        };
        const r = (0, t.Ay)(
          "Signals that the message tab badge should be removed from the emoji picker"
        );
        r.meta = {
          name: "createAction",
          key: "createActionremoveEmojiCollectionTabBadge",
          description:
            "Signals that the message tab badge should be removed from the emoji picker",
        };
        const c = (0, t.Ay)("Increments emoji click count");
        c.meta = {
          name: "createAction",
          key: "createActionincrementEmojiClickCount",
          description: "Increments emoji click count",
        };
      },
      3004085654: (W, A, e) => {
        "use strict";
        e.d(A, {
          Cs: () => m,
          Ur: () => g,
          _J: () => I,
          _o: () => E,
          fl: () => f,
          nQ: () => v,
          pG: () => T,
          uI: () => l,
        });
        var t = e(2101927269),
          n = e(9113979368),
          s = e(2141441167),
          i = e(2048121586),
          d = e(6696292586),
          o = e(8161242485),
          a = e(3385422400),
          r = e(2047021170);
        const c = 60 * 60 * 24 * 14,
          u = (0, o.Ay)(
            (y, M) =>
              y &&
              y.emojiCollections &&
              y.emojiCollections.collections &&
              y.emojiCollections.collections[M]
          );
        u.meta = {
          name: "createSelector",
          key: "createSelectorgetEmojiCollection",
          description: (y, M) =>
            y &&
            y.emojiCollections &&
            y.emojiCollections.collections &&
            y.emojiCollections.collections[M],
        };
        const l = (0, o.Ay)(
          (y) => y && y.emojiCollections && y.emojiCollections.collections
        );
        l.meta = {
          name: "createSelector",
          key: "createSelectorgetEmojiCollections",
          description: (y) =>
            y && y.emojiCollections && y.emojiCollections.collections,
        };
        const m = (0, a.Mz)(l, (y) => (0, t.A)(y, (M) => M.installed)),
          v = (0, o.Ay)(
            (y) => y && y.emojiCollections && y.emojiCollections.hasFetched
          );
        v.meta = {
          name: "createSelector",
          key: "createSelectorhasFetchedEmojiCollections",
          description: (y) =>
            y && y.emojiCollections && y.emojiCollections.hasFetched,
        };
        const E = (0, o.Ay)(
          (y) => y && y.emojiCollections && y.emojiCollections.inputBadge
        );
        E.meta = {
          name: "createSelector",
          key: "createSelectorgetInputBadge",
          description: (y) =>
            y && y.emojiCollections && y.emojiCollections.inputBadge,
        };
        const T = (0, o.Ay)(
          (y) => y && y.emojiCollections && y.emojiCollections.tabBadge
        );
        T.meta = {
          name: "createSelector",
          key: "createSelectorgetTabBadge",
          description: (y) =>
            y && y.emojiCollections && y.emojiCollections.tabBadge,
        };
        const g = (0, o.Ay)(
          (y) => y && y.emojiCollections && y.emojiCollections.emojiClickCount
        );
        g.meta = {
          name: "createSelector",
          key: "createSelectorgetEmojiClickCount",
          description: (y) =>
            y && y.emojiCollections && y.emojiCollections.emojiClickCount,
        };
        const I = (0, o.Ay)((y) => {
          const M = l(y);
          if ((0, n.A)(M)) return null;
          const p = (0, s.A)(M);
          return (0, i.A)(p, (O) => O.date_create);
        });
        I.meta = {
          name: "createSelector",
          key: "createSelectorgetMostRecentPack",
          description: (y) => {
            const M = l(y);
            if ((0, n.A)(M)) return null;
            const p = (0, s.A)(M);
            return (0, i.A)(p, (O) => O.date_create);
          },
        };
        const f = (0, o.Ay)((y) => {
          const M = (0, r.ty)(y, "emoji_packs_most_recent_available_time");
          if (!(0, d.A)(M)) return !1;
          const p = M + c;
          return Date.now() / 1e3 < p;
        });
        f.meta = {
          name: "createSelector",
          key: "createSelectorisWithinExpirationDateOfNewPack",
          description: (y) => {
            const M = (0, r.ty)(y, "emoji_packs_most_recent_available_time");
            if (!(0, d.A)(M)) return !1;
            const p = M + c;
            return Date.now() / 1e3 < p;
          },
        };
      },
      7564917982: (W, A, e) => {
        "use strict";
        e.d(A, {
          H: () => v,
        });
        var t = e(7156798807),
          n = e(1031947056),
          s = e(1194535350),
          i = e(4724591729),
          d = e(3004085654),
          o = e(4318855015),
          a = e(2048121586),
          r = e(2047021170),
          c = e(5510392579),
          u = e(387484329);
        const l = (0, n.Ay)(
          "handle updating prefs if new emoji pack has become available",
          (E, T, g) => {
            let { collections: I } = g;
            const f = T(),
              y = (0, c.h3)(f),
              M = (0, r.ty)(f, "emoji_packs_most_recent_available_time") || 0,
              p = (0, a.A)(I, (D) => D.date_create),
              { date_create: O, installed: C } = p || {};
            (y || C) &&
              O > M &&
              E(
                (0, u.Hj)({
                  emoji_packs_most_recent_available_time: Date.now() / 1e3,
                  emoji_packs_clicked_picker_cta: !1,
                  emoji_packs_clicked_picker_post_install_cta: !1,
                  emoji_packs_clicked_collection_cta: !1,
                })
              );
          }
        );
        l.meta = {
          name: "createThunk",
          key: "createThunkhandlePotentialNewPack",
          description:
            "handle updating prefs if new emoji pack has become available",
        };
        const m = l,
          v = (0, n.Ay)("Process and add emoji collections", (E, T, g) => {
            let { reason: I } = g;
            const f = T();
            (0, d.nQ)(f) ||
              (E(
                (0, o.H9)({
                  hasFetched: !0,
                })
              ),
              E(
                (0, s.KO)({
                  reason: I,
                })
              )
                .then((y) => {
                  const M = y.installed || [],
                    p = y.available || [],
                    O = (0, t.A)(M, "id"),
                    C = p.map((h) => ({
                      ...h,
                      installed: !!O[h.id],
                      localEmoji: O[h.id] ? O[h.id].emoji : h.emoji,
                    }));
                  E(
                    m({
                      collections: C,
                    })
                  ),
                    (0, i.Cu)()
                      ? E(
                          (0, o.qw)({
                            collections: C.filter(
                              (h) => !["1044122771874", "11"].includes(h.id)
                            ),
                          })
                        )
                      : E(
                          (0, o.qw)({
                            collections: C,
                          })
                        );
                })
                .catch(() => {
                  E(
                    (0, o.H9)({
                      hasFetched: !1,
                    })
                  );
                }));
          });
        v.meta = {
          name: "createThunk",
          key: "createThunkfetchAllEmojiCollections",
          description: "Process and add emoji collections",
        };
      },
      1890276164: (W, A, e) => {
        "use strict";
        e.d(A, {
          R: () => n,
          t: () => i,
        });
        var t = e(8161242485);
        const n = (0, t.Ay)((o, a) => {
          var r;
          return !!(
            !((r = o.externalTeamIds) === null || r === void 0) && r[a]
          );
        });
        n.meta = {
          name: "createSelector",
          key: "createSelectorisTeamExternalById",
          description: (o, a) => {
            var r;
            return !!(
              !((r = o.externalTeamIds) === null || r === void 0) && r[a]
            );
          },
        };
        var s;
        const i = (0, t.Ay)(
          (o) =>
            !!Object.keys(
              (s = o.externalTeamIds) !== null && s !== void 0 ? s : {}
            ).length
        );
        var d;
        i.meta = {
          name: "createSelector",
          key: "createSelectorhasAnyExternalTeam",
          description: (o) =>
            !!Object.keys(
              (d = o.externalTeamIds) !== null && d !== void 0 ? d : {}
            ).length,
        };
      },
      5549390246: (W, A, e) => {
        "use strict";
        e.d(A, {
          Y: () => E,
        });
        var t = e(9113979368),
          n = e(8161242485),
          s = e(8393662842),
          i = e(8276911661),
          d = e(8677230210),
          o = e(8170643398),
          a = e(9464746668),
          r = e(3244118357),
          c = e(1002129445),
          u = e(4910963364),
          l = e(8847766420),
          m = e(735940183);
        const v = new m.Ay("files"),
          E = (0, n.Ay)((T, g) => {
            if (!g || !(0, s.Vx)(g)) return null;
            let I = v.t("External App");
            const f =
              (g == null ? void 0 : g.bot_user_id) ||
              (g == null ? void 0 : g.user);
            if (f) {
              var y;
              const M =
                (y = (0, i.nv)(T, f)) !== null && y !== void 0 ? y : void 0;
              if ((0, o.po)(M)) {
                const p = (0, a.A)(T, M),
                  O = (0, d.AF)(T, p) || void 0,
                  C = (0, r.Hg)(O);
                if (((I = C || I), (0, t.A)(C) && p)) {
                  const h = (0, u.G2)(T, {
                    serviceId: p,
                    homeWorkspaceId: (0, r.AW)({
                      bot: O,
                      member: M,
                      currentTeamId: (0, l.ZT)(T),
                    }),
                  });
                  I = (0, c.fj)(h) || I;
                }
              }
            }
            return I;
          });
        E.meta = {
          name: "createSelector",
          key: "createSelectorgetAppNameForRemoteFile",
          description: (T, g) => {
            if (!g || !(0, s.Vx)(g)) return null;
            let I = v.t("External App");
            const f =
              (g == null ? void 0 : g.bot_user_id) ||
              (g == null ? void 0 : g.user);
            if (f) {
              var y;
              const M =
                (y = (0, i.nv)(T, f)) !== null && y !== void 0 ? y : void 0;
              if ((0, o.po)(M)) {
                const p = (0, a.A)(T, M),
                  O = (0, d.AF)(T, p) || void 0,
                  C = (0, r.Hg)(O);
                if (((I = C || I), (0, t.A)(C) && p)) {
                  const h = (0, u.G2)(T, {
                    serviceId: p,
                    homeWorkspaceId: (0, r.AW)({
                      bot: O,
                      member: M,
                      currentTeamId: (0, l.ZT)(T),
                    }),
                  });
                  I = (0, c.fj)(h) || I;
                }
              }
            }
            return I;
          },
        };
      },
      6415612447: (W, A, e) => {
        "use strict";
        e.d(A, {
          Y: () => r,
          r: () => a,
        });
        var t = e(8161242485),
          n = e(9101533895),
          s = e(3634593162),
          i = e(497761763),
          d = e(2960290117),
          o = e(6078549397);
        const a = _((c) => {
            if ((0, d.Ay)(c)) {
              const { fileIdOrQuipThreadId: m = null } = (0, o.EX)(c) || {};
              if (m && (0, i.A)(m)) {
                const v = m,
                  E = (0, s.p)(v);
                return {
                  fileId: v,
                  channelId: E,
                };
              }
            }
            if ((0, i.A)(c)) {
              const m = c,
                v = (0, s.p)(m);
              return {
                fileId: m,
                channelId: v,
              };
            }
            const u = c;
            return {
              fileId: (0, s.l)(u),
              channelId: u,
            };
          }, "getIds"),
          r = (0, t.Ay)(function (c, u) {
            let l =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : !0;
            const { channelId: m } = a(u);
            return (0, n.OL)(c, m, l);
          });
        r.meta = {
          name: "createSelector",
          key: "createSelectorgetFileChannelById",
          description: function (c, u) {
            let l =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : !0;
            const { channelId: m } = a(u);
            return (0, n.OL)(c, m, l);
          },
        };
      },
      6403218297: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
        });
        var t = e(8086952004),
          n = e(3571452446),
          s = e(6217320234),
          i = e(6626377467);
        function d(o, a) {
          if (!o || !a) return a;
          const r = a.comments || [],
            c = (0, t.A)(r, (g) => g.id === o.id),
            u = (0, n.A)(c, ["is_starred", "_rxn_key"]),
            l = {
              ...c,
              ...o,
              ...u,
            },
            m = (0, s.A)((0, i.A)([l, ...r], "id"), "timestamp"),
            E =
              a.initial_comment && o.id === a.initial_comment.id
                ? l
                : a.initial_comment,
            T = {
              ...a,
              comments: m,
            };
          return E && (T.initial_comment = E), T;
        }
        _(d, "addCommentToFile");
      },
      9553287e3: (W, A, e) => {
        "use strict";
        e.d(A, {
          n: () => d,
        });
        var t = e(1031947056),
          n = e(2384831516);
        const s = (0, n.Mz)((o) => o.fullscreenHistory);
        s.meta = {
          name: "createSelector",
          key: "createSelectorgetFullscreenHistory",
          description: (o) => o.fullscreenHistory,
        };
        var i = e(8646192222);
        const d = (0, t.Ay)(
          "Find view container for a specific window history entry",
          (o, a, r) => {
            let { id: c } = r;
            const u = a();
            return (0, i.iB)(u) ? s(u)[c] : void 0;
          }
        );
        d.meta = {
          name: "createThunk",
          key: "createThunkgetFullscreenContainerByHistoryId",
          description:
            "Find view container for a specific window history entry",
        };
      },
      56562029: (W, A, e) => {
        "use strict";
        e.d(A, {
          G: () => d,
        });
        var t = e(9139930183),
          n = e(848813706),
          s = e(3193155968);
        const i = {
            enabled: !1,
            containers: {},
          },
          d = (0, t.Ay)({}, i, {
            storeKey: "fullscreen",
            persistenceEnabled: !1,
          })
            .on(n.K$, (o) => ({
              ...o,
              enabled: !0,
            }))
            .on(n.sM, (o) => ({
              ...o,
              enabled: !1,
              containers: {},
            }))
            .on(n.BR, (o, a) => {
              let { container: r, windowId: c } = a;
              const u = c === s.N2 ? "main" : c;
              if (o.containers[u] === r) return o;
              if (r)
                return {
                  ...o,
                  containers: {
                    ...o.containers,
                    [u]: r,
                  },
                };
              const l = {
                ...o,
              };
              return delete l.containers[u], l;
            });
      },
      2332058678: (W, A, e) => {
        "use strict";
        e.d(A, {
          r: () => t,
          u: () => n,
        });
        const t = {
            openCount: 0,
            unreadCount: 0,
          },
          n = {
            issues: {},
            stats: t,
            locale: "",
            zdLocale: "",
            helpSearchArticles: [],
            productReleaseCards: [],
            recommendedArticles: {
              articles: [],
              requestId: "",
            },
            helpSections: [],
            helpCategories: [],
            helpNavigation: {
              categoryId: null,
            },
            helpTour: null,
            anchorId: null,
            isArticleLoaded: !1,
            isHelpTipHistoryTourActive: !1,
          };
      },
      761034736: (W, A, e) => {
        "use strict";
        e.d(A, {
          fE: () => de,
          ZL: () => Ee,
          Fb: () => F,
          wB: () => Ae,
          Cb: () => oe,
          sv: () => z,
          wg: () => ae,
          tL: () => ve,
          aN: () => be,
          Mu: () => Se,
          Kb: () => V,
          cN: () => q,
          ZO: () => X,
          Eq: () => Ce,
          PN: () => Z,
        });
        var t = e(8161242485),
          n = e(8847766420),
          s = e(3398586081),
          i = e(2141441167),
          d = e(8352634987),
          o = e(6533394955),
          a = e(4848430086),
          r = e(1031947056),
          c = e(930270247),
          u = e(7629299684),
          l = e(2927826522);
        const m = (0, r.Ay)(
          "Fetch product release cards into the store",
          (N, L, w) => {
            let { locale: k } = w;
            return N(
              (0, c.l)({
                count: 3,
                type: "product_release_card",
                locale: k,
                reason: "client/fetch_published_product_release_cards",
              })
            ).then((J) => {
              let { cards: ee } = J;
              N((0, u.M0)((0, l.t)(ee)));
            });
          }
        );
        m.meta = {
          name: "createThunk",
          key: "createThunkfetchProductReleaseCards",
          description: "Fetch product release cards into the store",
        };
        var v = e(9532047472);
        const E = (0, r.Ay)(
          "Fetch helpdesk articles into the store",
          (N, L, w) => {
            let { locale: k, reason: J } = w;
            return N(
              (0, v.a)({
                locale: k,
                reason: J,
              })
            ).then((ee) => {
              let { articles: ne } = ee;
              N((0, u.NX)((0, l.t)(ne))), N((0, u.a4)(k));
            });
          }
        );
        E.meta = {
          name: "createThunk",
          key: "createThunkfetchHelpArticles",
          description: "Fetch helpdesk articles into the store",
        };
        var T = e(9706240641),
          g = e(3593297427),
          I = e(138202077),
          f = e(6422693406);
        const y = (0, r.Ay)(
          "Fetch recommended articles into the store",
          (N, L, w) => {
            let { locale: k, reason: J } = w;
            return N(
              (0, I.H)({
                reason: J,
              })
            ).then(
              (function () {
                var ee = (0, T.coroutine)(function* (ne) {
                  let { articles: pe, request_id: Me } = ne;
                  const ke = yield f.S.all(
                    pe.map(
                      (function () {
                        var ge = (0, T.coroutine)(function* (fe) {
                          return N(
                            (0, g.w)({
                              articleId: fe.id,
                              locale: k,
                              reason: J,
                            })
                          ).then((re) => {
                            let { article: le } = re;
                            return {
                              id: le.article_id,
                              title: le.title,
                            };
                          });
                        });
                        return function (fe) {
                          return ge.apply(this, arguments);
                        };
                      })()
                    )
                  );
                  N(
                    (0, u.LV)({
                      articles: ke,
                      requestId: Me ?? "",
                    })
                  );
                });
                return function (ne) {
                  return ee.apply(this, arguments);
                };
              })()
            );
          }
        );
        y.meta = {
          name: "createThunk",
          key: "createThunkfetchRecommendedArticles",
          description: "Fetch recommended articles into the store",
        };
        var M = e(8745755260);
        const p = (0, r.Ay)("Fetch help sections into the store", (N, L, w) => {
          let { categoryId: k, locale: J, reason: ee } = w;
          return N(
            (0, M.h)({
              categoryId: k,
              locale: J,
              reason: ee,
            })
          ).then((ne) => {
            let { sections: pe } = ne;
            return N((0, u.CK)((0, l.t)(pe)));
          });
        });
        p.meta = {
          name: "createThunk",
          key: "createThunkfetchHelpSections",
          description: "Fetch help sections into the store",
        };
        var O = e(6936450040);
        const C = (0, r.Ay)(
          "Fetch help categories into the store",
          (N, L, w) => {
            let { locale: k, reason: J } = w;
            return N(
              (0, O.G)({
                locale: k,
                reason: J,
              })
            ).then((ee) => {
              let { categories: ne } = ee;
              N((0, u.KO)((0, l.t)(ne))), N((0, u.WL)(k));
            });
          }
        );
        C.meta = {
          name: "createThunk",
          key: "createThunkfetchHelpCategories",
          description: "Fetch help categories into the store",
        };
        const h = (0, s.A)(
            () =>
              new d.Ay({
                storeKey: "help",
                fetch: (N) => (0, o.dispatchForTeamId)(N, (0, a.w)()),
                isEnabled: () => !0,
              })
          ),
          D = (0, s.A)(
            (N) =>
              new d.Ay({
                storeKey: "help",
                fetch: (L) =>
                  (0, o.dispatchForTeamId)(
                    L,
                    m({
                      locale: N,
                    })
                  ),
                isEnabled: () => !0,
              })
          ),
          P = (0, s.A)(
            (N, L) =>
              new d.Ay({
                storeKey: "help",
                fetch: (w) =>
                  (0, o.dispatchForTeamId)(
                    w,
                    E({
                      locale: N,
                      reason: L,
                    })
                  ),
                isEnabled: () => !0,
              })
          ),
          S = (0, s.A)(
            (N, L) =>
              new d.Ay({
                storeKey: "help",
                fetch: (w) =>
                  (0, o.dispatchForTeamId)(
                    w,
                    y({
                      locale: N,
                      reason: L,
                    })
                  ),
                isEnabled: () => !0,
                maxAge: () => 86400,
              })
          ),
          b = (0, s.A)(
            (N, L, w) =>
              new d.Ay({
                storeKey: "help",
                fetch: (k) =>
                  (0, o.dispatchForTeamId)(
                    k,
                    p({
                      categoryId: N,
                      locale: L,
                      reason: w,
                    })
                  ),
                isEnabled: () => !0,
              }),
            (N, L) => (0, i.A)([N, L]).join("_")
          ),
          K = (0, s.A)(
            (N, L) =>
              new d.Ay({
                storeKey: "help",
                fetch: (w) =>
                  (0, o.dispatchForTeamId)(
                    w,
                    C({
                      locale: N,
                      reason: L,
                    })
                  ),
                isEnabled: () => !0,
              })
          );
        var x = e(2332058678),
          B = e(735940183),
          U = e(9907843289);
        const R = new B.Ay("help"),
          G = "",
          H = (0, t.Ay)((N) => (N && N.help) || x.u);
        H.meta = {
          name: "createSelector",
          key: "createSelectorgetHelpState",
          description: (N) => (N && N.help) || x.u,
        };
        const F = (0, t.Ay)((N, L) => {
          const w = (0, n.ZT)(N),
            k = (0, U.db)();
          return (
            H(N).zdLocale !== k && P(k, L).markObjectsAsStale(w, [k]),
            P(k, L).maybeRefetch(w, k),
            H(N).helpSearchArticles || []
          );
        });
        F.meta = {
          name: "createSelector",
          key: "createSelectorgetHelpArticles",
          description: (N, L) => {
            const w = (0, n.ZT)(N),
              k = (0, U.db)();
            return (
              H(N).zdLocale !== k && P(k, L).markObjectsAsStale(w, [k]),
              P(k, L).maybeRefetch(w, k),
              H(N).helpSearchArticles || []
            );
          },
        };
        const V = (0, t.Ay)((N) => {
          const L = (0, n.ZT)(N),
            w = (0, B.Yp)();
          return (
            H(N).locale !== w && D(w).markObjectsAsStale(L, [w]),
            D(w).maybeRefetch(L, w),
            H(N).productReleaseCards || []
          );
        });
        V.meta = {
          name: "createSelector",
          key: "createSelectorgetProductReleaseCards",
          description: (N) => {
            const L = (0, n.ZT)(N),
              w = (0, B.Yp)();
            return (
              H(N).locale !== w && D(w).markObjectsAsStale(L, [w]),
              D(w).maybeRefetch(L, w),
              H(N).productReleaseCards || []
            );
          },
        };
        const X = (0, t.Ay)((N, L) => {
          var w;
          const k = (0, n.ZT)(N),
            J = (0, B.Yp)();
          return (
            H(N).locale !== J && S(J, L).markObjectsAsStale(k, [J]),
            S(J, L).maybeRefetch(k, J),
            ((w = H(N).recommendedArticles) === null || w === void 0
              ? void 0
              : w.articles) || []
          );
        });
        X.meta = {
          name: "createSelector",
          key: "createSelectorgetRecommendedArticles",
          description: (N, L) => {
            var w;
            const k = (0, n.ZT)(N),
              J = (0, B.Yp)();
            return (
              H(N).locale !== J && S(J, L).markObjectsAsStale(k, [J]),
              S(J, L).maybeRefetch(k, J),
              ((w = H(N).recommendedArticles) === null || w === void 0
                ? void 0
                : w.articles) || []
            );
          },
        };
        const q = (0, t.Ay)((N) => {
          var L;
          return (
            ((L = H(N).recommendedArticles) === null || L === void 0
              ? void 0
              : L.requestId) || ""
          );
        });
        q.meta = {
          name: "createSelector",
          key: "createSelectorgetRecommendArticlesRequestId",
          description: (N) => {
            var L;
            return (
              ((L = H(N).recommendedArticles) === null || L === void 0
                ? void 0
                : L.requestId) || ""
            );
          },
        };
        const oe = (0, t.Ay)((N) => H(N).helpNavigation || x.u.helpNavigation);
        oe.meta = {
          name: "createSelector",
          key: "createSelectorgetHelpNavigation",
          description: (N) => H(N).helpNavigation || x.u.helpNavigation,
        };
        const z = (0, t.Ay)((N, L, w) => {
          var k, J;
          const ee = (0, n.ZT)(N),
            ne = (0, B.Yp)(),
            pe = H(N).locale,
            Me =
              w ??
              ((k = H(N).helpNavigation) === null || k === void 0
                ? void 0
                : k.categoryId),
            ke =
              (J = H(N).helpSections[0]) === null || J === void 0
                ? void 0
                : J.categoryId;
          return Me
            ? (ke && Me !== ke
                ? (b(Me, ne, L).markObjectsAsStale(ee, [Me.toString()]),
                  b(Me, ne, L).maybeRefetch(ee, Me.toString()))
                : pe !== ne && b(Me, ne, L).markObjectsAsStale(ee, [ne]),
              b(Me, ne, L).maybeRefetch(ee, ne),
              H(N).helpSections || [])
            : H(N).helpSections || [];
        });
        z.meta = {
          name: "createSelector",
          key: "createSelectorgetHelpSections",
          description: (N, L, w) => {
            var k, J;
            const ee = (0, n.ZT)(N),
              ne = (0, B.Yp)(),
              pe = H(N).locale,
              Me =
                w ??
                ((k = H(N).helpNavigation) === null || k === void 0
                  ? void 0
                  : k.categoryId),
              ke =
                (J = H(N).helpSections[0]) === null || J === void 0
                  ? void 0
                  : J.categoryId;
            return Me
              ? (ke && Me !== ke
                  ? (b(Me, ne, L).markObjectsAsStale(ee, [Me.toString()]),
                    b(Me, ne, L).maybeRefetch(ee, Me.toString()))
                  : pe !== ne && b(Me, ne, L).markObjectsAsStale(ee, [ne]),
                b(Me, ne, L).maybeRefetch(ee, ne),
                H(N).helpSections || [])
              : H(N).helpSections || [];
          },
        };
        const Ae = (0, t.Ay)((N, L) => {
          const w = (0, n.ZT)(N),
            k = (0, B.Yp)();
          return (
            H(N).locale !== k && K(k, L).markObjectsAsStale(w, [k]),
            K(k, L).maybeRefetch(w, k),
            H(N).helpCategories || []
          );
        });
        Ae.meta = {
          name: "createSelector",
          key: "createSelectorgetHelpCategories",
          description: (N, L) => {
            const w = (0, n.ZT)(N),
              k = (0, B.Yp)();
            return (
              H(N).locale !== k && K(k, L).markObjectsAsStale(w, [k]),
              K(k, L).maybeRefetch(w, k),
              H(N).helpCategories || []
            );
          },
        };
        const ae = (0, t.Ay)((N) => H(N).helpTour || x.u.helpTour);
        ae.meta = {
          name: "createSelector",
          key: "createSelectorgetHelpTour",
          description: (N) => H(N).helpTour || x.u.helpTour,
        };
        const de = (0, t.Ay)((N) => H(N).anchorId || x.u.anchorId);
        de.meta = {
          name: "createSelector",
          key: "createSelectorgetAnchorId",
          description: (N) => H(N).anchorId || x.u.anchorId,
        };
        const ve = (0, t.Ay)(
          (N) => H(N).isArticleLoaded || x.u.isArticleLoaded
        );
        ve.meta = {
          name: "createSelector",
          key: "createSelectorgetIsHelpArticleLoaded",
          description: (N) => H(N).isArticleLoaded || x.u.isArticleLoaded,
        };
        const Se = (0, t.Ay)((N) => {
          var L, w;
          if (
            !(
              (L = N.desktop) === null ||
              L === void 0 ||
              (w = L.app) === null ||
              w === void 0
            ) &&
            w.updateInfo
          ) {
            var k;
            const { releaseName: J } = N.desktop.app.updateInfo;
            if (!((k = N.desktop) === null || k === void 0) && k.environment) {
              const { appVersion: ee } = N.desktop.environment;
              if (J.endsWith(ee)) return null;
            }
            return J;
          }
          return null;
        });
        Se.meta = {
          name: "createSelector",
          key: "createSelectorgetPendingAppUpdateReleaseName",
          description: (N) => {
            var L, w;
            if (
              !(
                (L = N.desktop) === null ||
                L === void 0 ||
                (w = L.app) === null ||
                w === void 0
              ) &&
              w.updateInfo
            ) {
              var k;
              const { releaseName: J } = N.desktop.app.updateInfo;
              if (
                !((k = N.desktop) === null || k === void 0) &&
                k.environment
              ) {
                const { appVersion: ee } = N.desktop.environment;
                if (J.endsWith(ee)) return null;
              }
              return J;
            }
            return null;
          },
        };
        const Ee = (0, t.Ay)((N) => {
          if (N.desktop && N.desktop.app && N.desktop.app.updateInfo) {
            const {
              releaseName: L,
              releaseNotes: w,
              releaseDate: k,
            } = N.desktop.app.updateInfo;
            return {
              timestamp: k ? k.getTime() : Date.now(),
              title: L,
              description: R.t("A new version of the app is available.", {
                fallbackHash: "6d9f3bb92920feceb484bca2ce4e062b5024208e",
                fallbackHashNs: "whats_new",
              }),
              url: w,
              url_title: R.t("See release notes", {
                fallbackHash: "6d9f3bb92920feceb484bca2ce4e062b5024208e",
                fallbackHashNs: "whats_new",
              }),
              is_app_update: !0,
            };
          }
          return null;
        });
        Ee.meta = {
          name: "createSelector",
          key: "createSelectorgetAppUpdate",
          description: (N) => {
            if (N.desktop && N.desktop.app && N.desktop.app.updateInfo) {
              const {
                releaseName: L,
                releaseNotes: w,
                releaseDate: k,
              } = N.desktop.app.updateInfo;
              return {
                timestamp: k ? k.getTime() : Date.now(),
                title: L,
                description: R.t("A new version of the app is available.", {
                  fallbackHash: "6d9f3bb92920feceb484bca2ce4e062b5024208e",
                  fallbackHashNs: "whats_new",
                }),
                url: w,
                url_title: R.t("See release notes", {
                  fallbackHash: "6d9f3bb92920feceb484bca2ce4e062b5024208e",
                  fallbackHashNs: "whats_new",
                }),
                is_app_update: !0,
              };
            }
            return null;
          },
        };
        const be = (0, t.Ay)((N) => {
          const L = Ee(N) || null;
          return L ? L.timestamp : -1;
        });
        be.meta = {
          name: "createSelector",
          key: "createSelectorgetLatestAppUpdateTimeStamp",
          description: (N) => {
            const L = Ee(N) || null;
            return L ? L.timestamp : -1;
          },
        };
        const Ce = (0, t.Ay)((N) => {
          const L = (0, n.ZT)(N);
          return h().maybeRefetch(L, G), H(N).stats || x.r;
        });
        Ce.meta = {
          name: "createSelector",
          key: "createSelectorgetTicketStats",
          description: (N) => {
            const L = (0, n.ZT)(N);
            return h().maybeRefetch(L, G), H(N).stats || x.r;
          },
        };
        const Z = (0, t.Ay)((N) => Ce(N).unreadCount);
        Z.meta = {
          name: "createSelector",
          key: "createSelectorgetUnreadTickets",
          description: (N) => Ce(N).unreadCount,
        };
        const $ = (0, t.Ay)(
          (N) =>
            H(N).isHelpTipHistoryTourActive || x.u.isHelpTipHistoryTourActive
        );
        $.meta = {
          name: "createSelector",
          key: "createSelectorgetIsHelpTipHistoryTourActive",
          description: (N) =>
            H(N).isHelpTipHistoryTourActive || x.u.isHelpTipHistoryTourActive,
        };
      },
      4848430086: (W, A, e) => {
        "use strict";
        e.d(A, {
          w: () => i,
        });
        var t = e(1031947056),
          n = e(8726791251),
          s = e(7629299684);
        const i = (0, t.Ay)(
          "Fetch and upsert ticket stats into the store",
          (d) =>
            d(
              (0, n.I)({
                reason: "fetchAndUpsertTicketStats",
              })
            ).then((o) => {
              const a = {
                unreadCount: o.unread_count || 0,
                openCount: o.open_count || 0,
              };
              return d((0, s.SX)(a)), a;
            })
        );
        i.meta = {
          name: "createThunk",
          key: "createThunkfetchAndUpsertTicketStats",
          description: "Fetch and upsert ticket stats into the store",
        };
      },
      6121742712: (W, A, e) => {
        "use strict";
        e.d(A, {
          NJ: () => de,
          Fv: () => ae,
          cw: () => Ae,
          uQ: () => U,
          q1: () => G,
          Yl: () => Ce,
          pM: () => oe,
          N6: () => q,
          zZ: () => z,
          bn: () => K,
          Rz: () => ve,
          nd: () => x,
          ad: () => B,
          i8: () => R,
          qC: () => V,
          Iy: () => Se,
          VT: () => X,
          jo: () => F,
          pk: () => $,
          Wk: () => Z,
        });
        var t = e(2101927269),
          n = e(2141441167),
          s = e(4423055085),
          i = e(8161242485),
          d = e(4813703725),
          o = e(3385422400),
          a = e(8847766420),
          r = e(2569545045),
          c = e(1521013946),
          u = e(2823938397),
          l = e(9706240641),
          m = e(6422693406),
          v = e(3398586081),
          E = e(3037015781),
          T = e(6533394955),
          g = e(4947933789),
          I = e(5209876365),
          f = e(5380461521);
        const y = (0, v.A)(
          () =>
            new E.Ay({
              fetch: M,
              metricsName: "hermesTriggers",
              upsertKnown: p,
              upsertNonExistent: p,
            })
        );
        function M(N) {
          let L =
            arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
          return m.S.map(
            L,
            (function () {
              var w = (0, l.coroutine)(function* (k) {
                try {
                  return (yield (0, T.dispatchForTeamId)(
                    N,
                    (0, g.B)({
                      triggerId: k,
                      includeWorkflowDetails: !0,
                      reason: "hermes_triggers_ufm",
                    })
                  )).trigger;
                } catch (J) {
                  return {
                    id: k,
                    error: J.name,
                  };
                }
              });
              return function (k) {
                return w.apply(this, arguments);
              };
            })()
          );
        }
        _(M, "fetchTriggersForTeamId");
        function p(N, L) {
          const w = L.map((k) => k.id);
          (0, f.X)().markObjectsAsFresh(N, w),
            (0, T.dispatchForTeamId)(
              N,
              (0, I.z4)({
                triggers: L,
              })
            );
        }
        _(p, "upsertTriggersForTeamId");
        var O = e(2689960678),
          C = e(8481467080),
          h = e(9552526132),
          D = e(3799600789),
          P = e(3906734293);
        const S = (0, i.Ay)((N) => {
          var L;
          return N == null || (L = N.hermesTriggers) === null || L === void 0
            ? void 0
            : L.triggersById;
        });
        S.meta = {
          name: "createSelector",
          key: "createSelectorgetTriggersById",
          description: (N) => {
            var L;
            return N == null || (L = N.hermesTriggers) === null || L === void 0
              ? void 0
              : L.triggersById;
          },
        };
        const b = (0, i.Ay)((N) => {
          var L;
          return N == null || (L = N.hermesTriggers) === null || L === void 0
            ? void 0
            : L.recentlyRunTriggerIds;
        });
        b.meta = {
          name: "createSelector",
          key: "createSelectorgetRecentlyRunTriggerIds",
          description: (N) => {
            var L;
            return N == null || (L = N.hermesTriggers) === null || L === void 0
              ? void 0
              : L.recentlyRunTriggerIds;
          },
        };
        const K = (0, d.eI)((N, L, w) => {
            let { triggerId: k } = L;
            var J, ee;
            const ne =
                N == null ||
                (J = N.hermesTriggers) === null ||
                J === void 0 ||
                (ee = J.triggersById) === null ||
                ee === void 0
                  ? void 0
                  : ee[k],
              pe = (0, a.ZT)(N);
            return pe
              ? ne
                ? ((0, f.X)().maybeRefetch(pe, k), ne)
                : w
                ? y().fetchObjectWithId(pe, k)
                : (0, u.WQ)(k)
              : (0, u.WQ)(k);
          }),
          x = (0, d.eI)((N, L) => {
            let { triggerIds: w } = L;
            const k = (0, a.ZT)(N);
            return k
              ? w.length
                ? w.map((J) => {
                    var ee, ne;
                    const pe =
                      N == null ||
                      (ee = N.hermesTriggers) === null ||
                      ee === void 0 ||
                      (ne = ee.triggersById) === null ||
                      ne === void 0
                        ? void 0
                        : ne[J];
                    return pe
                      ? ((0, f.X)().maybeRefetch(k, J), pe)
                      : y().fetchObjectWithId(k, J);
                  })
                : O.Ml
              : w.map((J) => (0, u.WQ)(J));
          }),
          B = (0, i.Ay)((N) => {
            var L;
            return (
              (N == null || (L = N.hermesTriggers) === null || L === void 0
                ? void 0
                : L.workflowPickerSearchResults) || O.Ml
            );
          });
        B.meta = {
          name: "createSelector",
          key: "createSelectorgetWorkflowPickerSearchResults",
          description: (N) => {
            var L;
            return (
              (N == null || (L = N.hermesTriggers) === null || L === void 0
                ? void 0
                : L.workflowPickerSearchResults) || O.Ml
            );
          },
        };
        const U = (0, i.Ay)((N) => {
          var L;
          return (
            (N == null || (L = N.hermesTriggers) === null || L === void 0
              ? void 0
              : L.channelPrimaryActionSearchResults) || O.Ml
          );
        });
        U.meta = {
          name: "createSelector",
          key: "createSelectorgetChannelPrimaryActionSearchResults",
          description: (N) => {
            var L;
            return (
              (N == null || (L = N.hermesTriggers) === null || L === void 0
                ? void 0
                : L.channelPrimaryActionSearchResults) || O.Ml
            );
          },
        };
        const R = (0, i.Ay)((N, L) => {
          const w = S(N) || {},
            k = new RegExp(L, "i"),
            J = Object.keys(w).map((ne) => w[ne] || {});
          return (
            (0, t.A)(
              J,
              (ne) => ne && ((ne == null ? void 0 : ne.name) || "").match(k)
            ) || []
          );
        });
        R.meta = {
          name: "createSelector",
          key: "createSelectorgetWorkflowPickerSearchResultsCached",
          description: (N, L) => {
            const w = S(N) || {},
              k = new RegExp(L, "i"),
              J = Object.keys(w).map((ne) => w[ne] || {});
            return (
              (0, t.A)(
                J,
                (ne) => ne && ((ne == null ? void 0 : ne.name) || "").match(k)
              ) || []
            );
          },
        };
        const G = (0, i.Ay)((N, L) => {
          const w = S(N) || {},
            k = new RegExp(L, "i"),
            J = Object.keys(w).map((ne) => w[ne] || {});
          return (
            (0, t.A)(
              J,
              (ne) =>
                ne &&
                ne.type === h.M.Shortcut &&
                ((ne == null ? void 0 : ne.name) || "").match(k)
            ) || []
          );
        });
        G.meta = {
          name: "createSelector",
          key: "createSelectorgetChannelPrimaryActionSearchResultsCached",
          description: (N, L) => {
            const w = S(N) || {},
              k = new RegExp(L, "i"),
              J = Object.keys(w).map((ne) => w[ne] || {});
            return (
              (0, t.A)(
                J,
                (ne) =>
                  ne &&
                  ne.type === h.M.Shortcut &&
                  ((ne == null ? void 0 : ne.name) || "").match(k)
              ) || []
            );
          },
        };
        const H = (0, i.Ay)((N) => {
          var L;
          return (
            (N == null || (L = N.hermesTriggers) === null || L === void 0
              ? void 0
              : L.openTourId) || null
          );
        });
        H.meta = {
          name: "createSelector",
          key: "createSelectorgetGuidedTourCoachmark",
          description: (N) => {
            var L;
            return (
              (N == null || (L = N.hermesTriggers) === null || L === void 0
                ? void 0
                : L.openTourId) || null
            );
          },
        };
        const F = (0, i.Ay)((N) => {
          var L;
          const w =
            (N == null || (L = N.hermesTriggers) === null || L === void 0
              ? void 0
              : L.openTourId) || "";
          return (
            w === "platform-coachmark-tour" ||
            w === "announce-only-platform-coachmark-tour"
          );
        });
        F.meta = {
          name: "createSelector",
          key: "createSelectorisWorkflowCoachmarkOpen",
          description: (N) => {
            var L;
            const w =
              (N == null || (L = N.hermesTriggers) === null || L === void 0
                ? void 0
                : L.openTourId) || "";
            return (
              w === "platform-coachmark-tour" ||
              w === "announce-only-platform-coachmark-tour"
            );
          },
        };
        const V = (0, i.Ay)((N) => {
          var L;
          return (
            ((N == null || (L = N.hermesTriggers) === null || L === void 0
              ? void 0
              : L.openTourId) || "") === "announce-only-platform-coachmark-tour"
          );
        });
        V.meta = {
          name: "createSelector",
          key: "createSelectorisAnnounceOnlyWorkflowCoachmarkOpen",
          description: (N) => {
            var L;
            return (
              ((N == null || (L = N.hermesTriggers) === null || L === void 0
                ? void 0
                : L.openTourId) || "") ===
              "announce-only-platform-coachmark-tour"
            );
          },
        };
        const X = (0, i.Ay)((N) => {
          var L;
          return (
            ((N == null || (L = N.hermesTriggers) === null || L === void 0
              ? void 0
              : L.openTourId) || "") === "slash-commands-coachmark-tour"
          );
        });
        X.meta = {
          name: "createSelector",
          key: "createSelectorisSlashCommandsCoachmarkOpen",
          description: (N) => {
            var L;
            return (
              ((N == null || (L = N.hermesTriggers) === null || L === void 0
                ? void 0
                : L.openTourId) || "") === "slash-commands-coachmark-tour"
            );
          },
        };
        const q = (0, i.Ay)((N) => {
          var L;
          return (L = b(N)) === null || L === void 0
            ? void 0
            : L.map((w) =>
                K(N, {
                  triggerId: w,
                })
              );
        });
        q.meta = {
          name: "createSelector",
          key: "createSelectorgetRecentlyRunTriggers",
          description: (N) => {
            var L;
            return (L = b(N)) === null || L === void 0
              ? void 0
              : L.map((w) =>
                  K(N, {
                    triggerId: w,
                  })
                );
          },
        };
        const oe = (0, i.Ay)((N) => {
          var L;
          return (
            (N == null || (L = N.hermesTriggers) === null || L === void 0
              ? void 0
              : L.recentlyRunTriggerTimestamps) || {}
          );
        });
        oe.meta = {
          name: "createSelector",
          key: "createSelectorgetRecentlyRunTriggerTimestamps",
          description: (N) => {
            var L;
            return (
              (N == null || (L = N.hermesTriggers) === null || L === void 0
                ? void 0
                : L.recentlyRunTriggerTimestamps) || {}
            );
          },
        };
        const z = (0, i.Ay)((N) => {
          var L;
          return N == null || (L = N.hermesTriggers) === null || L === void 0
            ? void 0
            : L.recentlyRunTriggerWorkflowActivity;
        });
        z.meta = {
          name: "createSelector",
          key: "createSelectorgetRecentlyRunTriggersWorkflowActivity",
          description: (N) => {
            var L;
            return N == null || (L = N.hermesTriggers) === null || L === void 0
              ? void 0
              : L.recentlyRunTriggerWorkflowActivity;
          },
        };
        const Ae = (0, i.Ay)((N) => {
          var L;
          return N == null || (L = N.hermesTriggers) === null || L === void 0
            ? void 0
            : L.triggersAvailableForWorkflowBuilder;
        });
        Ae.meta = {
          name: "createSelector",
          key: "createSelectorgetAvailableTriggersForWorkflowBuilder",
          description: (N) => {
            var L;
            return N == null || (L = N.hermesTriggers) === null || L === void 0
              ? void 0
              : L.triggersAvailableForWorkflowBuilder;
          },
        };
        const ae = (0, i.Ay)((N) => {
          var L;
          return N == null || (L = N.hermesTriggers) === null || L === void 0
            ? void 0
            : L.triggerCategoriesAvailableForWorkflowBuilder;
        });
        ae.meta = {
          name: "createSelector",
          key: "createSelectorgetAvailableTriggerCategoriesForWorkflowBuilder",
          description: (N) => {
            var L;
            return N == null || (L = N.hermesTriggers) === null || L === void 0
              ? void 0
              : L.triggerCategoriesAvailableForWorkflowBuilder;
          },
        };
        const de = (0, o.Mz)(
            (N) => S(N),
            (N) => {
              if (!N) return O.Ml;
              const L = (0, n.A)(N);
              return (0, t.A)(
                L,
                (k) =>
                  !(
                    !(0, P.G)(k) ||
                    (k.workflow_details && !k.workflow_details.is_published)
                  )
              );
            }
          ),
          ve = (0, i.Ay)((N, L) => {
            let { appId: w } = L;
            const k = S(N) || {};
            return Object.values(k).find((ee) => {
              var ne;
              return (
                (ee == null || (ne = ee.workflow) === null || ne === void 0
                  ? void 0
                  : ne.app_id) === w
              );
            });
          });
        ve.meta = {
          name: "createSelector",
          key: "createSelectorgetTriggerFromSlackAppId",
          description: (N, L) => {
            let { appId: w } = L;
            const k = S(N) || {};
            return Object.values(k).find((ee) => {
              var ne;
              return (
                (ee == null || (ne = ee.workflow) === null || ne === void 0
                  ? void 0
                  : ne.app_id) === w
              );
            });
          },
        };
        const Se = (0, i.Ay)((N, L) => {
          const w = (0, c.$N)(N, L);
          return w
            ? (w == null ? void 0 : w.type) === c.im.SHORTCUT_LINK_TRIGGER
            : !1;
        });
        Se.meta = {
          name: "createSelector",
          key: "createSelectorisHermesLinkTriggerFormat",
          description: (N, L) => {
            const w = (0, c.$N)(N, L);
            return w
              ? (w == null ? void 0 : w.type) === c.im.SHORTCUT_LINK_TRIGGER
              : !1;
          },
        };
        const Ee = (0, i.Ay)((N, L) => {
          let { triggerId: w } = L;
          const k = K(
            N,
            {
              triggerId: w,
            },
            !1
          );
          return k == null ? void 0 : k.shortcut_url;
        });
        Ee.meta = {
          name: "createSelector",
          key: "createSelectorgetShortcutUrl",
          description: (N, L) => {
            let { triggerId: w } = L;
            const k = K(
              N,
              {
                triggerId: w,
              },
              !1
            );
            return k == null ? void 0 : k.shortcut_url;
          },
        };
        const be = (0, i.Ay)((N, L) => {
          let { triggerId: w } = L;
          var k;
          return !!(
            !(N == null || (k = N.hermesTriggers) === null || k === void 0) &&
            k.triggersMarkedStaleInSession[w]
          );
        });
        be.meta = {
          name: "createSelector",
          key: "createSelectorhasTriggerBeenMarkedStaleInSession",
          description: (N, L) => {
            let { triggerId: w } = L;
            var k;
            return !!(
              !(N == null || (k = N.hermesTriggers) === null || k === void 0) &&
              k.triggersMarkedStaleInSession[w]
            );
          },
        };
        const Ce = (0, i.Ay)((N, L) => {
          let { block: w } = L;
          var k;
          const J = w.functionTriggerId,
            ee = (0, C.U)(w);
          if (
            !be(N, {
              triggerId: J,
            })
          )
            return ee;
          const pe = K(
              N,
              {
                triggerId: J,
              },
              !0
            ),
            Me =
              pe == null || (k = pe.workflow) === null || k === void 0
                ? void 0
                : k.workflow_id,
            ke = Me ? (0, r.g)(N, Me) : void 0;
          return (0, u.mX)(pe) || !ke || (0, u.mX)(ke)
            ? ee
            : (0, D.V)({
                passedShortcutInfo: ee,
                trigger: pe,
                workflow: ke,
              });
        });
        Ce.meta = {
          name: "createSelector",
          key: "createSelectorgetFreshShortcutInfoForShareShortcutBlock",
          description: (N, L) => {
            let { block: w } = L;
            var k;
            const J = w.functionTriggerId,
              ee = (0, C.U)(w);
            if (
              !be(N, {
                triggerId: J,
              })
            )
              return ee;
            const pe = K(
                N,
                {
                  triggerId: J,
                },
                !0
              ),
              Me =
                pe == null || (k = pe.workflow) === null || k === void 0
                  ? void 0
                  : k.workflow_id,
              ke = Me ? (0, r.g)(N, Me) : void 0;
            return (0, u.mX)(pe) || !ke || (0, u.mX)(ke)
              ? ee
              : (0, D.V)({
                  passedShortcutInfo: ee,
                  trigger: pe,
                  workflow: ke,
                });
          },
        };
        const Z = (0, d.eI)((N, L) =>
            Ae(N)
              .filter((k) => {
                var J, ee;
                return (
                  (k == null || (J = k.label) === null || J === void 0
                    ? void 0
                    : J.length) &&
                  (k == null || (ee = k.label) === null || ee === void 0
                    ? void 0
                    : ee.toLowerCase().includes(L.toLowerCase()))
                );
              })
              .map((k) => ({
                ...k,
                title: k.label,
              }))
          ),
          $ = (0, d.eI)((N, L) => {
            const w = ae(N);
            return Object.entries(w)
              .filter((k) => {
                let [, J] = k;
                var ee;
                return (
                  (J == null ? void 0 : J.name.length) &&
                  (J == null || (ee = J.name) === null || ee === void 0
                    ? void 0
                    : ee.toLowerCase().includes(L.toLowerCase()))
                );
              })
              .map((k) => {
                let [J, ee] = k;
                return {
                  id: ee.name,
                  title: ee.name,
                  appId: J,
                };
              });
          });
        (0, s.ul)("hermesTriggers", function (N, L) {
          let { triggerId: w } = L,
            k =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : !0;
          return K(
            N,
            {
              triggerId: w,
            },
            k
          );
        });
      },
      7478895768: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => I,
          tP: () => g,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(8840779375),
          i = e(9268023148),
          d = e(6494470131),
          o = e(1031947056),
          a = e(5380461521),
          r = e(8847766420),
          c = e(5209876365),
          u = e(796111729),
          l = e(1948374838),
          m = e(6121742712);
        const v = (0, o.Ay)(
          "Fetch triggers with query",
          (function () {
            var y = (0, t.coroutine)(function* (M, p, O) {
              let {
                query: C,
                currentChannelId: h,
                useLegacyCacheing: D = !1,
                includeAutomatedTriggers: P = !1,
                strictExposureRules: S = !0,
              } = O;
              const b = p(),
                K = (0, r.ZT)(b),
                x = (0, l.X)(b),
                B = P
                  ? ["shortcut", "event", "webhook", "scheduled", "service"]
                  : ["shortcut"];
              if (x.containsPrefixOf(C)) {
                if (D) {
                  const U = P ? (0, m.i8)(b, C) : (0, m.q1)(b, C);
                  return (
                    M(
                      P
                        ? (0, c.we)({
                            results: U,
                          })
                        : (0, c.S8)({
                            results: U,
                          })
                    ),
                    U
                  );
                }
              } else
                try {
                  const R = (yield M(
                      (0, d.v)({
                        query: C,
                        currentChannelId: h,
                        strictExposureRules: S,
                        triggerTypes: B,
                        reason:
                          "hermes_triggers_store:fetch_and_upsert_triggers",
                      })
                    )).triggers,
                    G = 5;
                  return (
                    R.length < G &&
                      (x.addAsPrefix(C), x.clearRequestInFlight()),
                    K && (0, a.X)().markObjectsAsFresh(K, (0, s.A)(R, "id")),
                    M(
                      (0, c.z4)({
                        triggers: R,
                      })
                    ),
                    D &&
                      M(
                        P
                          ? (0, c.we)({
                              results: R,
                            })
                          : (0, c.S8)({
                              results: R,
                            })
                      ),
                    R
                  );
                } catch (U) {
                  return (
                    (0, u.Wo)().error(
                      U,
                      "There was an issue fetching triggers with query"
                    ),
                    []
                  );
                }
              return [];
            });
            return function (M, p, O) {
              return y.apply(this, arguments);
            };
          })()
        );
        v.meta = {
          name: "createThunk",
          key: "createThunkfetchAndUpsertTriggersWithQuery",
          description: "Fetch triggers with query",
        };
        const E = 500,
          T = (0, i.A)(
            (y, M) => {
              let {
                query: p,
                includeAutomatedTriggers: O,
                strictExposureRules: C,
              } = M;
              return y(
                v({
                  query: p,
                  includeAutomatedTriggers: O,
                  strictExposureRules: C,
                })
              );
            },
            E,
            {
              leading: !0,
              trailing: !0,
            }
          ),
          g = (0, o.Ay)(
            "debounced fetch and upsert triggers with query",
            (y, M, p) => {
              let {
                query: O,
                includeAutomatedTriggers: C,
                strictExposureRules: h,
              } = p;
              return T(y, {
                query: O,
                includeAutomatedTriggers: C,
                strictExposureRules: h,
              });
            }
          );
        g.meta = {
          name: "createThunk",
          key: "createThunkdebouncedFetchAndUpsertTriggersWithQuery",
          description: "debounced fetch and upsert triggers with query",
        };
        const I = v,
          f = {
            DEBOUNCE_MS: E,
          };
      },
      2569545045: (W, A, e) => {
        "use strict";
        e.d(A, {
          g: () => I,
          R: () => f,
        });
        var t = e(8161242485),
          n = e(2823938397),
          s = e(8847766420),
          i = e(8032027544),
          d = e(9706240641),
          o = e(3398586081),
          a = e(8840779375),
          r = e(6422693406),
          c = e(3037015781),
          u = e(6533394955),
          l = e(3118461857),
          m = e(4134951078);
        const v = (0, o.A)(
          () =>
            new c.Ay({
              fetch: E,
              upsertKnown: T,
              upsertNonExistent: T,
              isEnabled: () => !0,
            })
        );
        function E(y, M) {
          return r.S.map(
            M,
            (function () {
              var p = (0, d.coroutine)(function* (O) {
                try {
                  return (yield (0, u.dispatchForTeamId)(
                    y,
                    (0, l.D)({
                      workflowId: O,
                      reason: "hermes_workflows_store_unknown_fetching",
                    })
                  )).workflow;
                } catch {
                  var C;
                  const D =
                    (C = (0, u.getStateByTeamId)(y).hermesWorkflows) === null ||
                    C === void 0
                      ? void 0
                      : C[O];
                  return (0, c.GU)(D) ? null : D;
                }
              });
              return function (O) {
                return p.apply(this, arguments);
              };
            })()
          ).filter((p) => p);
        }
        _(E, "fetchWorkflowsForTeamId");
        function T(y, M) {
          (0, i.G)().markObjectsAsFresh(y, (0, a.A)(M, "id")),
            (0, u.dispatchForTeamId)(
              y,
              (0, m.uY)({
                workflows: M,
              })
            );
        }
        _(T, "upsertWorkflowsForTeamId");
        const g = {
            fetchWorkflowsForTeamId: E,
            upsertWorkflowsForTeamId: T,
          },
          I = (0, t.Ay)(function (y, M) {
            let p =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : !0;
            var O;
            const C = (0, s.ZT)(y),
              h =
                (O = y.hermesWorkflows) === null || O === void 0
                  ? void 0
                  : O[M];
            return C
              ? h
                ? ((0, i.G)().maybeRefetch(C, M), h)
                : p
                ? v().fetchObjectWithId(C, M)
                : (0, n.WQ)(M)
              : (0, n.WQ)(M);
          });
        I.meta = {
          name: "createSelector",
          key: "createSelectorgetWorkflowById",
          description: function (y, M) {
            let p =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : !0;
            var O;
            const C = (0, s.ZT)(y),
              h =
                (O = y.hermesWorkflows) === null || O === void 0
                  ? void 0
                  : O[M];
            return C
              ? h
                ? ((0, i.G)().maybeRefetch(C, M), h)
                : p
                ? v().fetchObjectWithId(C, M)
                : (0, n.WQ)(M)
              : (0, n.WQ)(M);
          },
        };
        const f = (0, t.Ay)((y, M) => {
          const p = I(y, M);
          return (0, n.GU)(p) ? [] : p.steps;
        });
        f.meta = {
          name: "createSelector",
          key: "createSelectorgetWorkflowStepsById",
          description: (y, M) => {
            const p = I(y, M);
            return (0, n.GU)(p) ? [] : p.steps;
          },
        };
      },
      8239363237: (W, A, e) => {
        "use strict";
        e.d(A, {
          GF: () => c,
          Tk: () => u,
          UI: () => g,
          X_: () => l,
          iN: () => T,
          pm: () => v,
          t6: () => I,
          vc: () => m,
          xA: () => E,
        });
        var t = e(3385422400),
          n = e(8393662842),
          s = e(937317117),
          i = e(1990810649),
          d = e(387328355);
        const o = _((f, y) => {
            var M;
            return y
              ? (M = (0, s.Lp)(f, y)) === null || M === void 0
                ? void 0
                : M.localUpdated
              : null;
          }, "getFileLocalUpdated"),
          a = _((f) => (0, d.lt)(f), "getFileId"),
          r = _(
            (f) =>
              (0, t.Mz)(
                [
                  (y) => (0, d.JC)(y),
                  (y) => {
                    const M = a(y);
                    return o(y, M);
                  },
                  (y) => {
                    const M = a(y);
                    return M ? (0, s.Lp)(y, M) : null;
                  },
                ],
                (y, M, p) =>
                  p != null &&
                  p.id &&
                  (y === i.cM.CanvasFile || y === i.cM.QuipFile)
                    ? f(p)
                    : null
              ),
            "selectFromUpdatedFile"
          ),
          c = r((f) => f),
          u = r((f) => (f == null ? void 0 : f.id)),
          l = r((f) => (f ? (0, n.sJ)(f) : !1)),
          m = r((f) => (f ? (0, n.uO)(f) : !1)),
          v = r((f) => (f ? (0, n.WP)(f) : null)),
          E = r((f) => (f == null ? void 0 : f.user)),
          T = r((f) => !!f),
          g = r((f) => (f ? (0, n.l7)(f) : !1)),
          I = r((f) => (f ? (0, n.wL)(f) : !1));
      },
      5145584581: (W, A, e) => {
        "use strict";
        e.d(A, {
          x: () => f,
        });
        var t = e(8628145494),
          n = e(1031947056),
          s = e(6533394955),
          i = e(4250409994),
          d = e(5286203919),
          o = e(387328355),
          a = e(1990810649),
          r = e(7434063642),
          c = e(6251210828),
          u = e(7723800688),
          l = e(2664504268),
          m = e(6470070112),
          v = e(1224315998),
          E = e(56548687),
          T = e(5737576046),
          g = e(7884000776);
        const I = _((M, p, O, C) => {
            const h = (0, s.getStateForClientStore)(),
              D = (0, d.E9)(h),
              P = (0, m.$t)(p, {
                huddleId: D,
              }),
              S = (0, m.kn)(h),
              b = (0, m.UE)(h),
              K = (0, c.Ec)(p, {
                huddleId: D,
              });
            let x,
              B,
              U = null,
              R = null,
              G = null;
            if (O === a.cM.None)
              (x = u.Hi.FOCUS_CLOSE),
                (B = (0, c.U7)(p, {
                  key: u.Hi.FOCUS_OPEN,
                }));
            else {
              var H;
              switch (
                ((x = u.Hi.FOCUS_OPEN),
                (B = (0, l.A)()),
                (G =
                  (C == null || (H = C.item) === null || H === void 0
                    ? void 0
                    : H.id) || null),
                O)
              ) {
                case a.cM.Screenshare:
                  (U = "focus_screenshare"), (R = "screenshare");
                  break;
                default:
                  (U = "focus_file"), (R = "file");
              }
              M(
                (0, r.Mn)({
                  key: u.Hi.FOCUS_OPEN,
                  value: B,
                })
              );
            }
            (0, E.e)({
              state: p,
            }).track(v.EventId.CANVAS_EVENT, {
              contexts: {
                ui_context: {
                  ui_page: K ? K.toString() : null,
                  ui_properties: {
                    element_name: x,
                  },
                  action: v.UiAction.IMPRESSION,
                },
                calls: b,
              },
              ...P,
              ...S,
              interaction_id: B,
              canvas_dimension_marker: U,
              type: R,
              item_file_id: G,
            });
          }, "clogCanvasEvent"),
          f = (0, n.Ay)(
            "Sets a user content view which represents what the user is focused on in the canvas",
            (M, p, O) => {
              if (!O || (0, t.A)(O.contentViewType)) return;
              const C = p(),
                h = O.contentViewType,
                D = !1;
              if (h === a.cM.Screenshare) {
                const S = (0, o.JC)(C),
                  b = y(C);
                S === a.cM.None &&
                  !b &&
                  M(
                    (0, r.fI)({
                      isThreadOpen: !1,
                    })
                  ),
                  M(
                    (0, r.Zx)({
                      userId: "",
                    })
                  );
              }
              M(
                (0, r.YC)({
                  isFullscreen: D,
                })
              ),
                M(
                  (0, r.s7)({
                    isNotesOpen: h === a.cM.QuipFile,
                  })
                );
              const P =
                O.contentViewType === a.cM.None || !O.contentViewConfig
                  ? {}
                  : O.contentViewConfig;
              M(
                (0, o.sK)({
                  id: O.peerId,
                  contentViewType: h,
                  contentViewConfig: P,
                })
              ),
                (0, s.dispatchForClientStore)(
                  (0, i.xq)({
                    contentViewType: h,
                    contentViewConfig: P,
                  })
                ),
                I(M, C, h, P);
            }
          );
        f.meta = {
          name: "createThunk",
          key: "createThunksetContentView",
          description:
            "Sets a user content view which represents what the user is focused on in the canvas",
        };
        function y(M) {
          const p = (0, s.getStateForClientStore)(),
            O = (0, d.E9)(p),
            C = (0, d.hc)(p),
            h = (0, c.fG)(M, {
              huddleId: O,
            });
          if (!(h != null && h.ts) || !C) return !1;
          const D = (0, T.zC)({
            viewContext: g.Y.HUDDLE_THREADS,
            channelId: C,
            threadTs: h.ts,
          });
          return (D == null ? void 0 : D.hasFocus()) || !1;
        }
        _(y, "doesThreadInputHaveFocus");
      },
      6758774099: (W, A, e) => {
        "use strict";
        e.d(A, {
          Lm: () => i,
          T3: () => s,
          U$: () => d,
          WO: () => n,
          dD: () => a,
          h2: () => o,
          jL: () => r,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Enable huddle event log");
        n.meta = {
          name: "createAction",
          key: "createActionenableEventLog",
          description: "Enable huddle event log",
        };
        const s = (0, t.Ay)("Disable huddle event log");
        s.meta = {
          name: "createAction",
          key: "createActiondisableEventLog",
          description: "Disable huddle event log",
        };
        const i = (0, t.Ay)("Set loading state for huddle event log");
        i.meta = {
          name: "createAction",
          key: "createActionsetEventLogLoading",
          description: "Set loading state for huddle event log",
        };
        const d = (0, t.Ay)("Add non-transcription event");
        d.meta = {
          name: "createAction",
          key: "createActionpushNonTranscriptionEvent",
          description: "Add non-transcription event",
        };
        const o = (0, t.Ay)("Update with latest transcription events");
        o.meta = {
          name: "createAction",
          key: "createActionupdateTranscriptions",
          description: "Update with latest transcription events",
        };
        const a = (0, t.Ay)(
          "Set enabled state for huddle captions side-by-side view"
        );
        a.meta = {
          name: "createAction",
          key: "createActionsetSideBySideEnabled",
          description:
            "Set enabled state for huddle captions side-by-side view",
        };
        const r = (0, t.Ay)(
          "Set enabled state for huddle closed captions view"
        );
        r.meta = {
          name: "createAction",
          key: "createActionsetClosedCaptionsEnabled",
          description: "Set enabled state for huddle closed captions view",
        };
      },
      8409540889: (W, A, e) => {
        "use strict";
        e.d(A, {
          u: () => n,
          y: () => t,
        });
        const t = 2e3,
          n = 2e3;
      },
      4988306802: (W, A, e) => {
        "use strict";
        e.d(A, {
          Cb: () => l,
          M3: () => r,
          TP: () => o,
          VN: () => c,
          gL: () => a,
          iv: () => m,
        });
        var t = e(3385422400),
          n = e(8161242485),
          s = e(8409540889),
          i = e(8783285437);
        const d = (0, n.Ay)((v) => v.huddleEvents);
        d.meta = {
          name: "createSelector",
          key: "createSelectorgetHuddleEventsData",
          description: (v) => v.huddleEvents,
        };
        const o = (0, n.Ay)((v) => d(v).enabled);
        o.meta = {
          name: "createSelector",
          key: "createSelectorareHuddleEventsEnabled",
          description: (v) => d(v).enabled,
        };
        const a = (0, n.Ay)((v) => d(v).isLoading);
        a.meta = {
          name: "createSelector",
          key: "createSelectorareHuddleEventsLoading",
          description: (v) => d(v).isLoading,
        };
        const r = (0, n.Ay)((v) => v.huddleEvents.isSideBySideEnabled);
        r.meta = {
          name: "createSelector",
          key: "createSelectorisHuddleSideBySideCaptionsEnabled",
          description: (v) => v.huddleEvents.isSideBySideEnabled,
        };
        const c = (0, n.Ay)((v) => v.huddleEvents.isClosedCaptionsEnabled);
        c.meta = {
          name: "createSelector",
          key: "createSelectorisHuddleClosedCaptionsEnabled",
          description: (v) => v.huddleEvents.isClosedCaptionsEnabled,
        };
        const u = (0, n.Ay)((v) => v.huddleEvents.isClosedCaptionsEnabled);
        u.meta = {
          name: "createSelector",
          key: "createSelectorHuddlesPersistTranscriptToggle",
          description: (v) => v.huddleEvents.isClosedCaptionsEnabled,
        };
        const l = (0, t.Mz)(
            (v) => d(v).events,
            (v) => {
              const E = [];
              let T,
                g = [];
              const I = _(() => {
                T &&
                  E.push({
                    ...T,
                    content: g.join(" "),
                  });
              }, "maybeCommit");
              return (
                v.forEach((f) => {
                  T &&
                  f.type === i.v.TRANSCRIBE &&
                  T.memberId === f.memberId &&
                  f.timestampMs - T.endTimeMs < s.y
                    ? (g.push(f.content), (T.endTimeMs = f.endTimeMs))
                    : (I(),
                      f.type === i.v.TRANSCRIBE
                        ? ((T = {
                            type: i.v.TRANSCRIBE,
                            resultId: "",
                            memberId: f.memberId,
                            content: "",
                            timestampMs: f.timestampMs,
                            endTimeMs: f.endTimeMs,
                          }),
                          (g = [f.content]))
                        : ((T = null), (g = []), E.push(f)));
                }),
                I(),
                E
              );
            }
          ),
          m = (0, t.Mz)(
            (v) => l(v),
            (v) =>
              v
                .filter(
                  (E) =>
                    E.type === i.v.TRANSCRIBE ||
                    E.type === i.v.START_TRANSCRIPTION
                )
                .slice(-5)
          );
      },
      1889537412: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => y,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(1031947056),
          i = e(727128009),
          d = e(6422693406),
          o = e(9640070512),
          a = e(2527782504),
          r = e(6758774099),
          c = e(4988306802),
          u = e(7004355564),
          l = e(6533394955),
          m = e(796111729),
          v = e(5286203919),
          E = e(8783285437),
          T = e(6694086724),
          g = e(8872167513),
          I = e(2709531527);
        const f = (0, s.Ay)(
          "Start transcription for current huddle",
          (function () {
            var M = (0, t.coroutine)(function* (p, O) {
              if ((0, c.TP)(O()) || (0, c.gL)(O())) return d.S.resolve();
              const C = (0, l.getStateForClientStore)(),
                h = (0, v.E9)(C);
              return h
                ? (p((0, r.WO)()),
                  p((0, r.Lm)(!0)),
                  yield (0, u.A)(),
                  p(
                    (0, T.e)({
                      clearOnEndedCallback: !0,
                      logContext: "huddles-captions-turned-on",
                      isStoppedByUser: !0,
                    })
                  ),
                  p(
                    (0, i.i)({
                      reason: "start-event-log",
                      callId: h,
                    })
                  )
                    .catch((D) => {
                      var P;
                      if (
                        ((P = D.data) === null || P === void 0
                          ? void 0
                          : P.error) === "permission_denied"
                      )
                        return d.S.delay(5e3).then(() =>
                          p(
                            (0, i.i)({
                              reason: "start-event-log/retry",
                              callId: h,
                            })
                          )
                        );
                      throw D;
                    })
                    .catch((D) => {
                      (0, m.Ay)({
                        getState: O,
                      }).error(D),
                        p((0, r.T3)());
                    })
                    .finally(() => {
                      p((0, r.Lm)(!1)),
                        p(
                          (0, o.H)({
                            focusKey: a.Ay.HUDDLE_CAPTIONS_TAB,
                          })
                        ),
                        p(
                          (0, r.U$)({
                            type: E.v.START_TRANSCRIPTION,
                            memberId: "USLACKBOT",
                            timestampMs: Date.now(),
                          })
                        );
                      const { huddleEventsTrace: D } = (0,
                      g.A)().getAllTraceHandlers();
                      D == null ||
                        D.update({
                          name: I.p.TRANSCRIPT,
                          type: I.G.START,
                        });
                    }))
                : d.S.reject(new Error("No active call ID for huddle"));
            });
            return function (p, O) {
              return M.apply(this, arguments);
            };
          })()
        );
        f.meta = {
          name: "createThunk",
          key: "createThunkstartEventLog",
          description: "Start transcription for current huddle",
        };
        const y = f;
      },
      6855917924: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => l,
        });
        var t = e(1031947056),
          n = e(580220061),
          s = e(6422693406),
          i = e(6758774099),
          d = e(4988306802),
          o = e(6533394955),
          a = e(5286203919),
          r = e(8872167513),
          c = e(2709531527);
        const u = (0, t.Ay)("Stop transcription for current huddle", (m, v) => {
          if (!(0, d.TP)(v()) || (0, d.gL)(v())) return s.S.resolve();
          const E = (0, o.getStateForClientStore)(),
            T = (0, a.E9)(E);
          return T
            ? (m((0, i.T3)()),
              m((0, i.Lm)(!0)),
              m(
                (0, n.W)({
                  reason: "stop-event-log",
                  callId: T,
                })
              ).finally(() => {
                m((0, i.Lm)(!1));
                const { huddleEventsTrace: g } = (0,
                r.A)().getAllTraceHandlers();
                g == null ||
                  g.update({
                    name: c.p.TRANSCRIPT,
                    type: c.G.STOP,
                  });
              }))
            : s.S.reject(new Error("No active call ID for huddle"));
        });
        u.meta = {
          name: "createThunk",
          key: "createThunkstopEventLog",
          description: "Stop transcription for current huddle",
        };
        const l = u;
      },
      8783285437: (W, A, e) => {
        "use strict";
        e.d(A, {
          v: () => t,
        });
        var t;
        (function (n) {
          (n.JOIN = "JOIN"),
            (n.LEAVE = "LEAVE"),
            (n.SCREENSHARE_START = "SCREENSHARE_START"),
            (n.SCREENSHARE_STOP = "SCREENSHARE_STOP"),
            (n.TRANSCRIBE = "TRANSCRIBE"),
            (n.SEND_REACTION = "SEND_REACTION"),
            (n.START_TRANSCRIPTION = "START_TRANSCRIPTION");
        })(t || (t = {}));
      },
      4250409994: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ag: () => V,
          B5: () => ee,
          Bk: () => b,
          Db: () => L,
          Dj: () => ge,
          Gx: () => ve,
          HC: () => h,
          HF: () => C,
          Hg: () => pe,
          I9: () => c,
          JM: () => be,
          Jc: () => T,
          Ko: () => K,
          Lx: () => $,
          M4: () => l,
          OA: () => N,
          QZ: () => p,
          Rb: () => S,
          Rh: () => E,
          Rr: () => O,
          Sd: () => d,
          Sn: () => y,
          TK: () => Me,
          VU: () => s,
          WB: () => B,
          WM: () => H,
          WY: () => Z,
          YA: () => M,
          Yi: () => x,
          _H: () => ae,
          _I: () => o,
          _U: () => q,
          _o: () => ie,
          _u: () => Ce,
          aO: () => G,
          bV: () => oe,
          bk: () => Ee,
          cx: () => Se,
          f2: () => R,
          fP: () => f,
          hB: () => g,
          kg: () => ne,
          kn: () => i,
          nI: () => J,
          nU: () => u,
          nw: () => w,
          o9: () => k,
          og: () => Ze,
          ol: () => D,
          pl: () => r,
          qW: () => a,
          qr: () => z,
          so: () => m,
          t2: () => ke,
          u8: () => I,
          wr: () => Q,
          xf: () => v,
          xq: () => X,
          yR: () => P,
          yi: () => de,
        });
        var t = e(2140362605),
          n = e(1031947056);
        const s = (0, t.Ay)("Set flag to indicate if Huddles is enabled.");
        s.meta = {
          name: "createAction",
          key: "createActionsetIsHuddlesEnabled",
          description: "Set flag to indicate if Huddles is enabled.",
        };
        const i = (0, t.Ay)(
          "Stores audio reference that will be passed to SDK"
        );
        i.meta = {
          name: "createAction",
          key: "createActionstoreHuddlesAudioRef",
          description: "Stores audio reference that will be passed to SDK",
        };
        const d = (0, t.Ay)("Start video shariing");
        d.meta = {
          name: "createAction",
          key: "createActionstartVideoSharing",
          description: "Start video shariing",
        };
        const o = (0, t.Ay)("Stop video shariing");
        o.meta = {
          name: "createAction",
          key: "createActionstopVideoSharing",
          description: "Stop video shariing",
        };
        const a = (0, t.Ay)("Connect to Huddle media server");
        a.meta = {
          name: "createAction",
          key: "createActionconnectToHuddlesMediaServer",
          description: "Connect to Huddle media server",
        };
        const r = (0, t.Ay)("Leave the huddle and stop media transmission");
        r.meta = {
          name: "createAction",
          key: "createActiondisconnectHuddlesFromMediaServer",
          description: "Leave the huddle and stop media transmission",
        };
        const c = (0, t.Ay)("Enable or disable local microphone");
        c.meta = {
          name: "createAction",
          key: "createActionenableSelfMicrophone",
          description: "Enable or disable local microphone",
        };
        const u = (0, t.Ay)("Send an emoji reaction");
        u.meta = {
          name: "createAction",
          key: "createActionsendReactionMessage",
          description: "Send an emoji reaction",
        };
        const l = (0, t.Ay)("Send a sticky emoji reaction");
        l.meta = {
          name: "createAction",
          key: "createActionsendStickyReactionMessage",
          description: "Send a sticky emoji reaction",
        };
        const m = (0, t.Ay)("Send a mute request");
        m.meta = {
          name: "createAction",
          key: "createActionsendMuteRequestMessage",
          description: "Send a mute request",
        };
        const v = (0, t.Ay)(
          "Insert new active huddle reference with teamId channelId, etc."
        );
        v.meta = {
          name: "createAction",
          key: "createActionaddActiveHuddleReference",
          description:
            "Insert new active huddle reference with teamId channelId, etc.",
        };
        const E = (0, t.Ay)("Upsert existing active huddle reference");
        E.meta = {
          name: "createAction",
          key: "createActionupdateActiveHuddleReference",
          description: "Upsert existing active huddle reference",
        };
        const T = (0, t.Ay)("Upsert existing active huddle channel");
        T.meta = {
          name: "createAction",
          key: "createActionupdateActiveHuddleChannel",
          description: "Upsert existing active huddle channel",
        };
        const g = (0, t.Ay)("Set active huddle invite");
        g.meta = {
          name: "createAction",
          key: "createActionupsertInvite",
          description: "Set active huddle invite",
        };
        const I = (0, t.Ay)("Clear invite for given channel ID");
        I.meta = {
          name: "createAction",
          key: "createActionclearInviteForChannelId",
          description: "Clear invite for given channel ID",
        };
        const f = (0, t.Ay)(
          "Mark invite notifications as viewed by clearing them."
        );
        f.meta = {
          name: "createAction",
          key: "createActionmarkInvitesSeenForTeam",
          description: "Mark invite notifications as viewed by clearing them.",
        };
        const y = (0, n.Ay)(
          "Mark invite notifications as viewed by clearing them after a delay",
          (Ve, xe, je) => {
            let { delay: Fe, teamId: He } = je;
            setTimeout(() => {
              Ve(
                f({
                  teamId: He,
                  markBeforeMs: Date.now() - Fe,
                })
              );
            }, Fe);
          }
        );
        y.meta = {
          name: "createThunk",
          key: "createThunkmarkInvitesReadOnDelay",
          description:
            "Mark invite notifications as viewed by clearing them after a delay",
        };
        const M = (0, t.Ay)(
          "Start screen share for current user with given mediaSourceId"
        );
        M.meta = {
          name: "createAction",
          key: "createActionstartScreenShare",
          description:
            "Start screen share for current user with given mediaSourceId",
        };
        const p = (0, t.Ay)("Stop screen share for current user");
        p.meta = {
          name: "createAction",
          key: "createActionstopScreenShare",
          description: "Stop screen share for current user",
        };
        const O = (0, t.Ay)("Notify peers of changes to isDrawEnabled");
        O.meta = {
          name: "createAction",
          key: "createActionpropagateDrawEnabled",
          description: "Notify peers of changes to isDrawEnabled",
        };
        const C = (0, t.Ay)("Enabled annotations for screen share host");
        C.meta = {
          name: "createAction",
          key: "createActionpropagateHostDrawEnabled",
          description: "Enabled annotations for screen share host",
        };
        const h = (0, t.Ay)(
          "Notify middleware that a new preferred device was selected"
        );
        h.meta = {
          name: "createAction",
          key: "createActionsetNewPreferredDevice",
          description:
            "Notify middleware that a new preferred device was selected",
        };
        const D = (0, t.Ay)(
          "Notify middleware that automatic gain control setting has changed"
        );
        D.meta = {
          name: "createAction",
          key: "createActionsetAGC",
          description:
            "Notify middleware that automatic gain control setting has changed",
        };
        const P = (0, t.Ay)(
          "Notify middleware that noise suppression setting has changed"
        );
        P.meta = {
          name: "createAction",
          key: "createActionsetNoiseSuppression",
          description:
            "Notify middleware that noise suppression setting has changed",
        };
        const S = (0, t.Ay)(
          "Notify middleware that video background setting has changed"
        );
        S.meta = {
          name: "createAction",
          key: "createActionsetVideoBackgroundEffect",
          description:
            "Notify middleware that video background setting has changed",
        };
        const b = (0, t.Ay)(
          "Toggle global keyboard shortcut support for muting / unmuting a huddle"
        );
        b.meta = {
          name: "createAction",
          key: "createActiontoggleGlobalMuteShortcut",
          description:
            "Toggle global keyboard shortcut support for muting / unmuting a huddle",
        };
        const K = (0, t.Ay)("Internal store update for mini-panel visibility");
        K.meta = {
          name: "createAction",
          key: "createActioninternalUpdateMiniPanelVisibility",
          description: "Internal store update for mini-panel visibility",
        };
        const x = (0, t.Ay)("Upsert join credentials for a channel");
        x.meta = {
          name: "createAction",
          key: "createActionupsertJoinCredentialsForChannel",
          description: "Upsert join credentials for a channel",
        };
        const B = (0, t.Ay)(
          "Clear the join credentials for a specific channel"
        );
        B.meta = {
          name: "createAction",
          key: "createActionclearJoinCredentialsForChannel",
          description: "Clear the join credentials for a specific channel",
        };
        const U = (0, t.Ay)("Store and/or remote push Chime meeting events");
        U.meta = {
          name: "createAction",
          key: "createActionhandleMeetingEvents",
          description: "Store and/or remote push Chime meeting events",
        };
        const R = (0, t.Ay)("Transition from the prejoin state to started");
        R.meta = {
          name: "createAction",
          key: "createActiontransitionFromPrejoinToStarted",
          description: "Transition from the prejoin state to started",
        };
        const G = (0, t.Ay)(
          "Action to update the store to either show or hide discovery banner"
        );
        G.meta = {
          name: "createAction",
          key: "createActionupdateDiscoveryBannerVisibility",
          description:
            "Action to update the store to either show or hide discovery banner",
        };
        const H = (0, t.Ay)("Toggle Video");
        H.meta = {
          name: "createAction",
          key: "createActiontoggleVideo",
          description: "Toggle Video",
        };
        const F = (0, t.Ay)("Reporting CPU and memory usage stats");
        F.meta = {
          name: "createAction",
          key: "createActionreportAppMetrics",
          description: "Reporting CPU and memory usage stats",
        };
        const V = (0, t.Ay)(
          "Set true to specify that lounge music is playing, false otherwise."
        );
        V.meta = {
          name: "createAction",
          key: "createActionsetIsLoungeMusicPlaying",
          description:
            "Set true to specify that lounge music is playing, false otherwise.",
        };
        const X = (0, t.Ay)("Set current focused view type");
        X.meta = {
          name: "createAction",
          key: "createActionsetContentView",
          description: "Set current focused view type",
        };
        const q = (0, t.Ay)("Set last huddle start time");
        q.meta = {
          name: "createAction",
          key: "createActionsetLastHuddleStartTs",
          description: "Set last huddle start time",
        };
        const oe = (0, t.Ay)("Set last huddle end time");
        oe.meta = {
          name: "createAction",
          key: "createActionsetLastHuddleEndTs",
          description: "Set last huddle end time",
        };
        const z = (0, t.Ay)("Set last huddle duration time");
        z.meta = {
          name: "createAction",
          key: "createActionsetLastHuddleDurationTs",
          description: "Set last huddle duration time",
        };
        const Ae = (0, t.Ay)("Toggle video background filter");
        Ae.meta = {
          name: "createAction",
          key: "createActiontoggleVideoBackgroundFilter",
          description: "Toggle video background filter",
        };
        const ae = (0, t.Ay)(
          "Starts the video preview on the video element using the specified device"
        );
        ae.meta = {
          name: "createAction",
          key: "createActionstartVideoPreview",
          description:
            "Starts the video preview on the video element using the specified device",
        };
        const de = (0, t.Ay)("Stops the video preview on the video element");
        de.meta = {
          name: "createAction",
          key: "createActionstopVideoPreview",
          description: "Stops the video preview on the video element",
        };
        const ve = (0, t.Ay)(
          "Identifies which screenshare is being viewed in the mini-player"
        );
        ve.meta = {
          name: "createAction",
          key: "createActionsetScreenshareActivePanel",
          description:
            "Identifies which screenshare is being viewed in the mini-player",
        };
        const Se = (0, t.Ay)("Resets the store");
        Se.meta = {
          name: "createAction",
          key: "createActionresetClientHuddleStore",
          description: "Resets the store",
        };
        const Ee = (0, t.Ay)("Start the canvas jukebox using content share");
        Ee.meta = {
          name: "createAction",
          key: "createActionstartContentShareJukebox",
          description: "Start the canvas jukebox using content share",
        };
        const be = (0, t.Ay)("Stop the canvas jukebox");
        be.meta = {
          name: "createAction",
          key: "createActionstopJukebox",
          description: "Stop the canvas jukebox",
        };
        const Ce = (0, t.Ay)("Set selected song");
        Ce.meta = {
          name: "createAction",
          key: "createActionsetSongPlaying",
          description: "Set selected song",
        };
        const Z = (0, t.Ay)("Send jukebox active song");
        Z.meta = {
          name: "createAction",
          key: "createActionsendJukeboxActiveSong",
          description: "Send jukebox active song",
        };
        const $ = (0, t.Ay)("Request a jukebox song");
        $.meta = {
          name: "createAction",
          key: "createActionrequestJukeboxSong",
          description: "Request a jukebox song",
        };
        const N = (0, t.Ay)("Request the jukebox stops");
        N.meta = {
          name: "createAction",
          key: "createActionrequestJukeboxStop",
          description: "Request the jukebox stops",
        };
        const L = (0, t.Ay)("Send recording start notification");
        L.meta = {
          name: "createAction",
          key: "createActionsendRecordingStartNotification",
          description: "Send recording start notification",
        };
        const w = (0, t.Ay)(
          "Sets whether the active invite card in the sidebar can be rendered"
        );
        w.meta = {
          name: "createAction",
          key: "createActionsetCanRenderActiveInviteCardInSidebar",
          description:
            "Sets whether the active invite card in the sidebar can be rendered",
        };
        const k = (0, t.Ay)(
          "Sets whether the huddle window of an active huddle is in focus or not."
        );
        k.meta = {
          name: "createAction",
          key: "createActionsetIsHuddleWindowFocused",
          description:
            "Sets whether the huddle window of an active huddle is in focus or not.",
        };
        const J = (0, t.Ay)(
          "Sets whether the huddle window of an active huddle is open or not."
        );
        J.meta = {
          name: "createAction",
          key: "createActiontoggleAllIncomingVideo",
          description:
            "Sets whether the huddle window of an active huddle is open or not.",
        };
        const ee = (0, t.Ay)("Reports to the SDK when the client is offline");
        ee.meta = {
          name: "createAction",
          key: "createActionreportClientOffline",
          description: "Reports to the SDK when the client is offline",
        };
        const ne = (0, t.Ay)("Sets whether audio only mode is active or not.");
        ne.meta = {
          name: "createAction",
          key: "createActionsetIsAudioOnlyMode",
          description: "Sets whether audio only mode is active or not.",
        };
        const pe = (0, t.Ay)(
          "Sets whether the camera was enabled when audio only mode was activated."
        );
        pe.meta = {
          name: "createAction",
          key: "createActionsetAudioOnlyModeCameraWasEnabled",
          description:
            "Sets whether the camera was enabled when audio only mode was activated.",
        };
        const Me = (0, t.Ay)(
          "Sets whether the huddle window of an active huddle is open or not."
        );
        Me.meta = {
          name: "createAction",
          key: "createActionsetIsHuddleWindowOpen",
          description:
            "Sets whether the huddle window of an active huddle is open or not.",
        };
        const ke = (0, t.Ay)(
          "True if huddle mini player is hidden, false if shown."
        );
        ke.meta = {
          name: "createAction",
          key: "createActionsetIsHuddleMiniPlayerHidden",
          description: "True if huddle mini player is hidden, false if shown.",
        };
        const ge = (0, t.Ay)(
          "Asks for video permission and enumerates devices"
        );
        ge.meta = {
          name: "createAction",
          key: "createActioninitVideoPermission",
          description: "Asks for video permission and enumerates devices",
        };
        const fe = (0, t.Ay)("Execute readiness check for audio input");
        fe.meta = {
          name: "createAction",
          key: "createActionexecuteHuddlesAudioInputReadinessCheck",
          description: "Execute readiness check for audio input",
        };
        const re = (0, t.Ay)("Execute readiness check for audio output");
        re.meta = {
          name: "createAction",
          key: "createActionexecuteHuddlesAudioOutputReadinessCheck",
          description: "Execute readiness check for audio output",
        };
        const le = (0, t.Ay)("Execute readiness check for video input");
        le.meta = {
          name: "createAction",
          key: "createActionexecuteHuddlesVideoInputReadinessCheck",
          description: "Execute readiness check for video input",
        };
        const Re = (0, t.Ay)(
          "Execute readiness check for a particular camera resolution"
        );
        Re.meta = {
          name: "createAction",
          key: "createActionexecuteHuddlesCameraResolutionReadinessCheck",
          description:
            "Execute readiness check for a particular camera resolution",
        };
        const ye = (0, t.Ay)("Execute readiness check for audio connectivity");
        ye.meta = {
          name: "createAction",
          key: "createActionexecuteHuddlesAudioConnectivityReadinessCheck",
          description: "Execute readiness check for audio connectivity",
        };
        const Te = (0, t.Ay)("Execute readiness check for video connectivity");
        Te.meta = {
          name: "createAction",
          key: "createActionexecuteHuddlesVideoConnectivityReadinessCheck",
          description: "Execute readiness check for video connectivity",
        };
        const De = (0, t.Ay)(
          "Execute readiness check for content share connectivity"
        );
        De.meta = {
          name: "createAction",
          key: "createActionexecuteHuddlesContentShareConnectivityReadinessCheck",
          description: "Execute readiness check for content share connectivity",
        };
        const Ue = (0, t.Ay)(
          "Execute readiness check for network UDP connectivity"
        );
        Ue.meta = {
          name: "createAction",
          key: "createActionexecuteHuddlesNetworkUDPConnectivityReadinessCheck",
          description: "Execute readiness check for network UDP connectivity",
        };
        const Ke = (0, t.Ay)(
          "Execute readiness check for network TCP connectivity"
        );
        Ke.meta = {
          name: "createAction",
          key: "createActionexecuteNetworkTCPConnectivityReadinessCheck",
          description: "Execute readiness check for network TCP connectivity",
        };
        const Ze = (0, t.Ay)("Sets that the Huddle was joined via prejoin");
        Ze.meta = {
          name: "createAction",
          key: "createActionsetHuddleWasJoinedFromPrejoin",
          description: "Sets that the Huddle was joined via prejoin",
        };
        const Q = (0, t.Ay)("Sets Huddle device based on preview entry");
        Q.meta = {
          name: "createAction",
          key: "createActionsetDeviceStateBasedOnPreviewEntry",
          description: "Sets Huddle device based on preview entry",
        };
        const ie = (0, t.Ay)(
          "Sets the channel ID for the Huddle when joining through the Huddle Join Preview flow"
        );
        ie.meta = {
          name: "createAction",
          key: "createActionsetHuddleJoinPreviewChannel",
          description:
            "Sets the channel ID for the Huddle when joining through the Huddle Join Preview flow",
        };
      },
      5702042015: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
          p: () => o,
        });
        var t = e(5286203919),
          n = e(4250409994),
          s = e(1031947056);
        let i;
        const d = (0, s.Ay)("Temporarily show mini-panel", function (a, r) {
          let c =
            arguments.length > 2 && arguments[2] !== void 0
              ? arguments[2]
              : 2500;
          clearTimeout(i),
            a((0, n.Ko)(!0)),
            (i = setTimeout(() => a((0, n.Ko)(!1)), c));
        });
        d.meta = {
          name: "createThunk",
          key: "createThunkshowMiniPanelForDuration",
          description: "Temporarily show mini-panel",
        };
        const o = (0, s.Ay)(
          "Temporarily pause mini-panel visibility transition",
          (a, r) => {
            const c = r();
            (0, t.Ae)(c) && clearTimeout(i);
          }
        );
        o.meta = {
          name: "createThunk",
          key: "createThunkpauseMiniPanelTimeout",
          description: "Temporarily pause mini-panel visibility transition",
        };
      },
      2778217221: (W, A, e) => {
        "use strict";
        e.d(A, {
          WS: () => s,
          nq: () => n,
          o7: () => t,
        });
        const t = "HUDDLES",
          n = 864e5,
          s = 2;
      },
      5378147939: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => ge,
        });
        var t = e(9706240641),
          n = e(3398586081),
          s = e(387328355),
          i = e(1289024643),
          d = e(462591818),
          o = e(6533394955),
          a = e(5795074931),
          r = e(2047021170),
          c = e(1889537412),
          u = e(6758774099),
          l = e(4250409994),
          m = e(5881236351),
          v = e(1031947056),
          E = e(6562711329);
        const T = (0, v.Ay)(
          "Fetch channel membership info for huddle member",
          (fe, re, le) => {
            let { channelId: Re, userId: ye } = le;
            return fe(
              (0, E.z)({
                channelId: Re,
                userIds: [ye],
              })
            ).then((Te) => {
              let { membershipInfo: De } = Te;
              return De[ye] && "isMember" in De[ye] ? !De[ye].isMember : !0;
            });
          }
        );
        T.meta = {
          name: "createThunk",
          key: "createThunkisUserNotHuddleChannelMember",
          description: "Fetch channel membership info for huddle member",
        };
        var g = e(2778217221),
          I = e(7434063642),
          f = e(9548972574),
          y = e(5332875232),
          M = e(3677514771),
          p = e(8305649700),
          O = e(1883693579),
          C = e(9712681361),
          h = e(9680914051),
          D = e(4695727674),
          P = e(4540171876),
          S = e(6422693406),
          b = e(6470070112),
          K = e(6839188756),
          x = e(56548687),
          B = e(1224315998),
          U = e(5741354339),
          R = e(6929023741),
          G = e(4476913522),
          H = e(5286203919),
          F = e(4423055085),
          V = e(2141441167),
          X = e(4949104520),
          q = e(796111729),
          oe = e(9190452268),
          z = e(1651628626),
          Ae = e(2664504268),
          ae = e(1921074781),
          de = e(5203103513);
        const ve = 60 * 1e3,
          Se = 15 * 1e3,
          Ee = 1e3 * 10,
          be = 1e3 * 60,
          Ce = 5e3;
        let Z = !1;
        const $ = 500,
          N = 25;
        let L = _(
          class {
            setTargetState(re) {
              var le = this;
              return (0, t.coroutine)(function* () {
                le.targetState = re;
                const { huddleState: Re, huddleSubState: ye } = le.targetState;
                le.isValidHuddleSubState(Re, ye) ||
                  (le.targetState.huddleSubState =
                    le.getInitialSubStateForHuddleState(Re)),
                  (0, o.dispatchForClientStore)(
                    (0, l.Rh)(le.getOptimisticState(re))
                  ),
                  yield le.process();
              })();
            }
            setTargetChannel(re) {
              this.targetState.channelId = re;
            }
            setTargetSubState(re) {
              var le = this;
              return (0, t.coroutine)(function* () {
                le.isValidHuddleSubState(le.targetState.huddleState, re) &&
                  ((le.targetState.huddleSubState = re), yield le.process());
              })();
            }
            transitionFromPrejoinToStarted() {
              this.setTargetState({
                huddleState: C.RJ.STARTED,
                teamId: this.targetState.teamId,
                channelId: this.targetState.channelId,
                muted: this.targetState.muted,
                callId: this.targetState.callId,
              });
            }
            getTimeOfLastStateChange() {
              return this.timeOfLastStateChange;
            }
            getTimeOfLastSubStateChange() {
              return this.timeOfLastSubStateChange;
            }
            waitForStartStop() {
              var re = this;
              return (0, t.coroutine)(function* () {
                return re.startStopDeferred || S.S.resolve();
              })();
            }
            isProcessing() {
              var re;
              return (re = this.startStopDeferred) === null || re === void 0
                ? void 0
                : re.isPending();
            }
            isTargetState() {
              const {
                teamId: re,
                channelId: le,
                huddleState: Re,
              } = this.getClientHuddleState();
              return (0, b.Ft)(this.targetState.huddleState)
                ? Re === this.targetState.huddleState
                : re === this.targetState.teamId &&
                    le === this.targetState.channelId &&
                    Re === this.targetState.huddleState;
            }
            isTargetSubState() {
              return (
                this.getClientHuddleState().huddleSubState ===
                this.targetState.huddleSubState
              );
            }
            hasBeenInSubStateForAtLeastApproxTime(re) {
              return this.timeOfLastSubStateChange
                ? Date.now() - this.timeOfLastSubStateChange > re - $
                : !1;
            }
            isValidHuddleSubState(re, le) {
              return re === C.RJ.STARTED
                ? le === void 0
                  ? !1
                  : (0, V.A)(C.J_).includes(le)
                : le === void 0;
            }
            getInitialSubStateForHuddleState(re) {
              if (re === C.RJ.STARTED) return C.J_.INITIAL_ALONE;
            }
            process() {
              var re = this;
              return (0, t.coroutine)(function* () {
                if (re.isProcessing()) return re.waitForStartStop();
                re.startStopDeferred = (0, U.u)();
                const le = setTimeout(
                  (0, t.coroutine)(function* () {
                    var Re;
                    if (
                      !(
                        (Re = re.startStopDeferred) === null || Re === void 0
                      ) &&
                      Re.isPending()
                    ) {
                      const ye = new S.S.TimeoutError(
                        "HuddleStateManager timeout"
                      );
                      yield re.handleErrorAndDisconnect(ye);
                    }
                  }),
                  re.startStopTimeout
                );
                try {
                  yield re.runLoop(),
                    clearTimeout(le),
                    re.startStopDeferred.resolve();
                } catch (Re) {
                  yield re.handleErrorAndDisconnect(Re);
                } finally {
                  clearTimeout(le);
                }
                re.startStopDeferred = null;
              })();
            }
            runLoop() {
              var re = this;
              return (0, t.coroutine)(function* () {
                let le = 0;
                for (; !re.isTargetState(); ) {
                  if (!re.isProcessing()) return;
                  if (((le += 1), le > N)) throw new Error("runLoop was stuck");
                  const {
                      teamId: Te,
                      channelId: De,
                      huddleState: Ue,
                    } = re.getClientHuddleState(),
                    {
                      teamId: Ke,
                      channelId: Ze,
                      huddleState: Q,
                      callId: ie,
                    } = re.targetState;
                  if (
                    (Te !== Ke &&
                      (delete re.clogger,
                      delete re.logger,
                      delete re.telemeter),
                    [C.RJ.STARTED, C.RJ.PRE_JOINED].includes(Q))
                  ) {
                    if (Te !== Ke || De !== Ze) {
                      switch (Ue) {
                        case C.RJ.PENDING:
                        case C.RJ.STARTED:
                        case C.RJ.PRE_JOINED:
                          yield re.goToNext(C.RJ.ENDING);
                          break;
                        default:
                          yield re.goToNext(C.RJ.STARTING);
                      }
                      continue;
                    }
                    switch (Ue) {
                      case C.RJ.NOT_STARTED:
                        yield re.goToNext(C.RJ.STARTING);
                        break;
                      case C.RJ.STARTING:
                        try {
                          yield re.goToNext(C.RJ.PENDING);
                        } catch (Ve) {
                          var Re;
                          if (
                            !(
                              (Re = re.credentials) === null || Re === void 0
                            ) &&
                            Re.isQuickJoinCredentials
                          ) {
                            if (
                              (delete re.credentials,
                              yield re.clearQuickJoinCredentials(),
                              Ve.message === C.M6.ChimeMeetingEnded)
                            )
                              throw Ve;
                            if (ie) {
                              const Oe = (0, f.P_)(re.getState(), ie);
                              if (Oe && Oe.hasEnded)
                                throw new Error(C.M6.ChimeMeetingEnded);
                            }
                            const xe = Date.now(),
                              je = !0;
                            yield re.safelyDisconnect(je);
                            const He = Date.now() - xe;
                            re
                              .getLogger()
                              .info(
                                `Disconnecting after failed attempt to join huddle added ${He}ms to TTI`
                              ),
                              yield re.goToNext(C.RJ.STARTING);
                          } else throw Ve;
                        }
                        break;
                      case C.RJ.PENDING:
                        yield re.goToNext(re.targetState.huddleState);
                        break;
                      case C.RJ.PRE_JOINED:
                        yield re.goToNext(C.RJ.COMPLETING_PRE_JOIN);
                        break;
                      case C.RJ.COMPLETING_PRE_JOIN:
                        yield re.completePrejoin({
                          isStartMuted: re.targetState.muted,
                        }),
                          yield re.goToNext(C.RJ.STARTED);
                        break;
                      case C.RJ.STARTED:
                        throw new Error("This should not be possible");
                      case C.RJ.ENDING:
                      case C.RJ.SURVEY:
                      case C.RJ.SURVEY_GOOD:
                      default:
                        yield re.goToNext(C.RJ.STARTING);
                        break;
                    }
                    continue;
                  }
                  if (
                    [C.RJ.PENDING, C.RJ.STARTED, C.RJ.PRE_JOINED].includes(Ue)
                  ) {
                    yield re.goToNext(C.RJ.ENDING);
                    continue;
                  }
                  yield re.goToNext(Q);
                }
                let ye = 0;
                for (; !re.isTargetSubState(); ) {
                  if (((ye += 1), ye > N))
                    throw new Error("runLoop() for huddle substate was stuck");
                  const { huddleState: Te, huddleSubState: De } =
                      re.getClientHuddleState(),
                    { huddleSubState: Ue } = re.targetState;
                  if (!re.isValidHuddleSubState(Te, Ue)) {
                    const Ke = re.getInitialSubStateForHuddleState(Te);
                    (re.targetState.huddleSubState = Ke),
                      yield re.goToNextSubState(Ke),
                      re
                        .getLogger()
                        .warn(
                          g.o7,
                          `attempted to reach invalid huddleSubstate (${Ue}) for the given huddleState (${Te})`
                        );
                    continue;
                  }
                  if (Te === C.RJ.STARTED) {
                    switch (De) {
                      case C.J_.INITIAL_ALONE:
                        if (Ue === C.J_.INITIAL_ALONE_NOTICE_ACTIVE) {
                          yield re.goToNextSubState(Ue);
                          break;
                        }
                        yield re.goToNextSubState(C.J_.IN_PROGRESS_TOGETHER);
                        break;
                      case C.J_.INITIAL_ALONE_NOTICE_ACTIVE:
                        if (Ue === C.J_.INITIAL_ALONE_NOTICE_DISMISSED) {
                          yield re.goToNextSubState(Ue);
                          break;
                        }
                        yield re.goToNextSubState(C.J_.IN_PROGRESS_TOGETHER);
                        break;
                      case C.J_.INITIAL_ALONE_NOTICE_DISMISSED:
                        yield re.goToNextSubState(C.J_.IN_PROGRESS_TOGETHER);
                        break;
                      case C.J_.IN_PROGRESS_TOGETHER:
                        yield re.goToNextSubState(C.J_.IN_PROGRESS_ALONE);
                        break;
                      case C.J_.IN_PROGRESS_ALONE:
                        if (Ue === C.J_.IN_PROGRESS_ALONE_NOTICE_ACTIVE) {
                          yield re.goToNextSubState(Ue);
                          break;
                        }
                        yield re.goToNextSubState(C.J_.IN_PROGRESS_TOGETHER);
                        break;
                      case C.J_.IN_PROGRESS_ALONE_NOTICE_ACTIVE:
                        if (Ue === C.J_.IN_PROGRESS_ALONE_NOTICE_DISMISSED) {
                          yield re.goToNextSubState(Ue);
                          break;
                        }
                        yield re.goToNextSubState(C.J_.IN_PROGRESS_TOGETHER);
                        break;
                      case C.J_.IN_PROGRESS_ALONE_NOTICE_DISMISSED:
                        yield re.goToNextSubState(C.J_.IN_PROGRESS_TOGETHER);
                        break;
                      default:
                        yield re.goToNextSubState(C.J_.INITIAL_ALONE);
                    }
                    continue;
                  }
                  yield re.goToNextSubState(void 0);
                }
              })();
            }
            goToNext(re) {
              var le = this;
              return (0, t.coroutine)(function* () {
                var Re, ye, Te, De;
                le.getLogger().info(
                  `Marking huddle as ${re} [${
                    (Te =
                      (Re = le.targetState) === null || Re === void 0
                        ? void 0
                        : Re.teamId) !== null && Te !== void 0
                      ? Te
                      : "N/A"
                  }, ${
                    (De =
                      (ye = le.targetState) === null || ye === void 0
                        ? void 0
                        : ye.channelId) !== null && De !== void 0
                      ? De
                      : "N/A"
                  }]`
                );
                const Ue = Date.now();
                (le.timeOfLastStateChange = Ue),
                  (le.timeOfLastSubStateChange = Ue);
                const Ke = le.getInitialSubStateForHuddleState(re);
                if (re === C.RJ.STARTING) {
                  var Ze, Q;
                  const xe = le.assertTargetTeamAndChannel(C.RJ.STARTING),
                    je = le.getOptimisticState(le.targetState);
                  le
                    .getLogger()
                    .info(`Optimistic state: ${je.optimisticHuddleState}`),
                    (0, o.dispatchForClientStore)(
                      (0, l.xf)({
                        huddleState: re,
                        huddleSubState: Ke,
                        ...xe,
                        ...je,
                        isPrejoin:
                          ((Ze = le.targetState) === null || Ze === void 0
                            ? void 0
                            : Ze.huddleState) === C.RJ.PRE_JOINED,
                        sessionId: (0, Ae.A)(),
                      })
                    ),
                    (le.credentials = yield le.fetchCredentials()),
                    (Q = le.getTelemeter()) === null ||
                      Q === void 0 ||
                      Q.mark(h.Bq);
                  return;
                }
                if (re === C.RJ.PENDING) {
                  const xe = le.assert(
                    le.credentials,
                    "Expected credentials to be set before PENDING"
                  );
                  (0, o.dispatchForClientStore)(
                    (0, l.Rh)({
                      huddleState: re,
                      huddleSubState: Ke,
                      ...le.assertTargetTeamAndChannel(C.RJ.PENDING),
                      callId: xe.roomId,
                    })
                  ),
                    yield le.connectToChime(xe, le.targetState),
                    delete le.credentials;
                  return;
                }
                if (re === C.RJ.STARTED) {
                  var ie;
                  const xe = le.assertTargetTeamAndChannel(C.RJ.STARTED);
                  (0, o.dispatchForClientStore)(
                    (0, l.Rh)({
                      huddleState: re,
                      huddleSubState: Ke,
                      optimisticHuddleState: null,
                      ...xe,
                      isPrejoin: !1,
                    })
                  ),
                    (0, r.ty)(le.getState(), "huddles_set_status") &&
                      le.scheduleHuddleStateExpirationIncrement(),
                    le.setCoachmarkTimeout(Ke),
                    (ie = ae.F.getInstance()) === null ||
                      ie === void 0 ||
                      ie.request();
                } else {
                  var Ve;
                  (Ve = ae.F.getInstance()) === null ||
                    Ve === void 0 ||
                    Ve.release();
                }
                if (
                  (re === C.RJ.PRE_JOINED &&
                    (0, o.dispatchForClientStore)(
                      (0, l.Rh)({
                        huddleState: re,
                        huddleSubState: Ke,
                        optimisticHuddleState: null,
                        ...le.assertTargetTeamAndChannel(C.RJ.PRE_JOINED),
                      })
                    ),
                  re === C.RJ.ENDING)
                ) {
                  (0, o.dispatchForClientStore)(
                    (0, l.Rh)({
                      huddleState: re,
                      huddleSubState: Ke,
                    })
                  ),
                    yield le.safelyDisconnect();
                  return;
                }
                (0, o.dispatchForClientStore)(
                  (0, l.Rh)({
                    huddleState: re,
                    huddleSubState: Ke,
                    optimisticHuddleState: null,
                  })
                );
              })();
            }
            goToNextSubState(re) {
              var le = this;
              return (0, t.coroutine)(function* () {
                re === C.J_.IN_PROGRESS_ALONE &&
                  setTimeout(() => {
                    var Re;
                    ((Re = le.getClientHuddleState()) === null || Re === void 0
                      ? void 0
                      : Re.huddleSubState) === C.J_.IN_PROGRESS_ALONE &&
                      le.hasBeenInSubStateForAtLeastApproxTime(Ee) &&
                      le.setTargetSubState(
                        C.J_.IN_PROGRESS_ALONE_NOTICE_ACTIVE
                      );
                  }, Ee),
                  (le.timeOfLastSubStateChange = Date.now()),
                  (0, o.dispatchForClientStore)(
                    (0, l.Rh)({
                      huddleSubState: re,
                    })
                  );
              })();
            }
            handleErrorAndDisconnect(re) {
              var le = this;
              return (0, t.coroutine)(function* () {
                var Re;
                le.getLogger().error(re);
                const { huddleState: ye } = le.getClientHuddleState();
                if ([C.RJ.PENDING, C.RJ.STARTED].includes(ye))
                  try {
                    yield S.S.race([
                      new S.S((Te, De) => {
                        setTimeout(
                          () =>
                            De(
                              new Error("HuddleStateManager disconnect timeout")
                            ),
                          le.disconnectTimeout
                        );
                      }),
                      le.safelyDisconnect(),
                    ]);
                  } catch (Te) {
                    le.getLogger().error(Te);
                  }
                (0, o.dispatchForClientStore)(
                  (0, l.Rh)({
                    huddleState: C.RJ.NOT_STARTED,
                    optimisticHuddleState: null,
                  })
                ),
                  yield S.S.resolve(le.handleError(re, ye)),
                  (Re = le.startStopDeferred) === null ||
                    Re === void 0 ||
                    Re.reject(re);
              })();
            }
            getInitialAloneInHuddleTimeOutValue() {
              if (Z) return Ce;
              const re = this.getState(),
                le = (0, r.ty)(re, de.VW);
              return le
                ? le * 1e3
                : (this.getLogger().info(
                    "User pref 'huddles_play_music_timeout' is undefined, using default 60 seconds"
                  ),
                  be);
            }
            setCoachmarkTimeout(re) {
              re === C.J_.INITIAL_ALONE &&
                (setTimeout(() => {
                  var le;
                  ((le = this.getClientHuddleState()) === null || le === void 0
                    ? void 0
                    : le.huddleSubState) === C.J_.INITIAL_ALONE &&
                    this.hasBeenInSubStateForAtLeastApproxTime(
                      this.getInitialAloneInHuddleTimeOutValue()
                    ) &&
                    (this.setTargetSubState(C.J_.INITIAL_ALONE_NOTICE_ACTIVE),
                    this.getLogger().info(
                      "setTimeout executed on substate: initial_alone"
                    ));
                }, this.getInitialAloneInHuddleTimeOutValue()),
                this.getLogger().info(
                  "setTimeout started on substate: initial_alone"
                ));
            }
            isMicEnabled() {
              var re;
              return !!(
                !(
                  (re = (0, s.Ng)(this.getState())) === null || re === void 0
                ) && re.isMicrophoneEnabled
              );
            }
            getClientHuddleState() {
              const re = (0, o.getStateForClientStore)(),
                le = (0, H.EG)(re),
                { channelId: Re, teamId: ye } = (0, H.Qn)(re) || {};
              if (!le || le === C.RJ.NOT_STARTED)
                return {
                  huddleState: C.RJ.NOT_STARTED,
                  channelId: Re,
                  teamId: ye,
                };
              const Te = (0, H.EO)(re);
              return {
                huddleState: le,
                huddleSubState: Te,
                channelId: Re,
                teamId: ye,
              };
            }
            assertTargetTeamAndChannel(re) {
              const { teamId: le, channelId: Re } = this.targetState;
              return {
                teamId: this.assert(le, `Expected teamId to be set for ${re}`),
                channelId: this.assert(
                  Re,
                  `Expeted channelId to be set for ${re}`
                ),
              };
            }
            getChannelIdOrDie() {
              const { channelId: re } = this.getClientHuddleState(),
                { channelId: le } = this.targetState,
                Re = re || le;
              return this.assert(Re, "No channel ID or active huddle");
            }
            getThreadTsOrNothing() {
              const { threadTs: re } = this.getClientHuddleState(),
                { threadTs: le } = this.targetState;
              return re || le;
            }
            getIsMultiDevice() {
              return !!this.targetState.isMultiDevice;
            }
            getIsExperimentStandaloneHuddlesOn() {
              return !!this.targetState.experimentStandaloneHuddlesOn;
            }
            getTeamIdOrDie() {
              const { teamId: re } = this.getClientHuddleState(),
                { teamId: le } = this.targetState,
                Re = re || le;
              return this.assert(Re, "No team ID or active huddle");
            }
            getCallIdOrDie() {
              const re = (0, o.getStateForClientStore)(),
                le = (0, H.E9)(re);
              return this.assert(le, "No call ID or active huddle");
            }
            getHuddleState() {
              const { huddleState: re } = this.getClientHuddleState();
              return re;
            }
            dispatch(re) {
              const le = this.getTeamIdOrDie();
              return (0, o.dispatchForTeamId)(le, re);
            }
            getState(re) {
              const le = re || this.getTeamIdOrDie();
              return (0, o.getStateByTeamId)(le);
            }
            assert(re, le) {
              if (re == null) throw new Error(le);
              return re;
            }
            getClogger() {
              if (this.clogger) return this.clogger;
              const { teamId: re } = this.getClientHuddleState();
              return (
                (this.clogger = re
                  ? (0, x.e)({
                      state: (0, o.getStateByTeamId)(re),
                    })
                  : (0, x.e)()),
                this.clogger
              );
            }
            getLogger() {
              return this.logger
                ? this.logger
                : ((this.logger = (0, q.Wo)({
                    label: this.logLabel,
                  })),
                  this.logger);
            }
            getTelemeter() {
              if (this.telemeter) return this.telemeter;
              const { teamId: re } = this.getClientHuddleState();
              return (
                re
                  ? (this.telemeter = (0, oe.Cy)({
                      state: (0, o.getStateByTeamId)(re),
                    }))
                  : (this.telemeter = (0, oe.rh)()),
                this.telemeter
              );
            }
            constructor({
              logLabel: re = g.o7,
              startStopTimeout: le = ve,
              disconnectTimeout: Re = Se,
            } = {}) {
              (this.targetState = {
                huddleState: C.RJ.NOT_STARTED,
              }),
                (this.startStopDeferred = null);
              var ye = this;
              this.safelyDisconnect = (0, t.coroutine)(function* () {
                let De =
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : !1;
                try {
                  yield ye.disconnect(De);
                } catch (Ue) {
                  ye.getLogger().error(
                    "Failed to disconnect from the Huddle. This may mean the user is still connected to the media server",
                    Ue
                  );
                }
              });
              var Te = this;
              (this.scheduleHuddleStateExpirationIncrement = (0, t.coroutine)(
                function* () {
                  if (
                    Te.isTargetState() &&
                    Te.targetState.huddleState !== C.RJ.STARTED
                  )
                    return;
                  const De = 60 * 5,
                    Ue = {
                      huddle_state_expiration_ts:
                        new Date().getTime() / 1e3 + De,
                    };
                  yield Te.dispatch(
                    (0, z.c)({
                      profile: Ue,
                      reason: "increment-huddle-state-expiration-ts",
                    })
                  ),
                    setTimeout(
                      Te.scheduleHuddleStateExpirationIncrement,
                      (0, X.A)(24e4, -0.1, 0.1)
                    );
                }
              )),
                (this.logLabel = re),
                (this.startStopTimeout = le),
                (this.disconnectTimeout = Re),
                (this.timeOfLastStateChange = null),
                (this.timeOfLastSubStateChange = null);
            }
          },
          "BaseHuddleStateManager"
        );
        (0, F.ul)("baseHuddleStateManager", {
          setShortTimeoutValue: () => {
            Z = !0;
          },
          resetShortTimeoutValue: () => {
            Z = !1;
          },
        }),
          Object.defineProperty(
            {
              shouldUseDebugTimeout: Z,
            },
            "shouldUseDebugTimeout",
            {
              get: () => Z,
              set: () => {
                Z = !0;
              },
            }
          );
        var k = e(7004355564),
          J = e(4715430489),
          ee = e(6251210828),
          ne = e(415910655),
          pe = e(8872167513);
        class Me extends L {
          start(re, le, Re, ye, Te, De, Ue) {
            var Ke = this;
            return (0, t.coroutine)(function* () {
              yield Ke.startHuddleWithTargetState(
                C.RJ.STARTED,
                re,
                le,
                Re,
                ye,
                Te,
                De,
                Ue
              );
            })();
          }
          prejoin(re, le, Re, ye) {
            var Te = this;
            return (0, t.coroutine)(function* () {
              yield Te.startHuddleWithTargetState(
                C.RJ.PRE_JOINED,
                re,
                le,
                Re,
                ye,
                void 0
              );
            })();
          }
          setOthersInHuddle() {
            var re = this;
            return (0, t.coroutine)(function* () {
              yield re.setTargetSubState(C.J_.IN_PROGRESS_TOGETHER);
            })();
          }
          setAloneInHuddle() {
            var re = this;
            return (0, t.coroutine)(function* () {
              yield re.setTargetSubState(C.J_.IN_PROGRESS_ALONE);
            })();
          }
          dismissAloneInHuddleWarning(re) {
            var le = this;
            return (0, t.coroutine)(function* () {
              const Re = re
                ? C.J_.INITIAL_ALONE_NOTICE_DISMISSED
                : C.J_.IN_PROGRESS_ALONE_NOTICE_DISMISSED;
              yield le.setTargetSubState(Re);
            })();
          }
          startHuddleWithTargetState(re, le, Re, ye, Te, De, Ue, Ke) {
            var Ze = this;
            return (0, t.coroutine)(function* () {
              var Q;
              (!((Q = Ze.currentHuddleDeferred) === null || Q === void 0) &&
                Q.isPending()) ||
                (Ze.currentHuddleDeferred = (0, U.u)()),
                yield Ze.setTargetState({
                  huddleState: re,
                  teamId: le,
                  channelId: Re,
                  muted: ye,
                  callId: Te,
                  threadTs: De,
                  isMultiDevice: Ue,
                  experimentStandaloneHuddlesOn: Ke,
                });
            })();
          }
          stop() {
            var re = this;
            return (0, t.coroutine)(function* () {
              var le;
              const Re = re.getState(),
                ye =
                  re.getHuddleState() !== C.RJ.PRE_JOINED &&
                  (0, f.Cd)(Re) &&
                  !re.isProcessing();
              ye &&
                (re
                  .getLogger()
                  .info(`Show huddle survey in ${re.getChannelIdOrDie()}`),
                re.dispatch(
                  (0, O.Cd)({
                    timeSeen: new Date().toISOString(),
                  })
                )),
                yield re.setTargetState({
                  huddleState: ye ? C.RJ.SURVEY : C.RJ.NOT_STARTED,
                }),
                re.getHuddleState() === C.RJ.NOT_STARTED &&
                  !(
                    (le = re.currentHuddleDeferred) === null || le === void 0
                  ) &&
                  le.isPending() &&
                  re.currentHuddleDeferred.resolve();
            })();
          }
          enterTerminalState(re) {
            var le = this;
            return (0, t.coroutine)(function* () {
              var Re;
              !((Re = le.pendingHuddleStart) === null || Re === void 0) &&
              Re.isPending()
                ? le.pendingHuddleStart.reject(re)
                : yield le.handleErrorAndDisconnect(re);
            })();
          }
          waitForHuddleToEnd() {
            return S.S.resolve(this.currentHuddleDeferred);
          }
          handleError(re, le) {
            var Re;
            this.getLogger().error(re);
            const ye = le === C.RJ.STARTING || le === C.RJ.PENDING;
            this.dispatch(
              (0, D.A)({
                errorCode: (0, C.dJ)(re.name) ? re.name : re.message,
                isJoinError: ye,
              })
            ),
              !((Re = this.currentHuddleDeferred) === null || Re === void 0) &&
                Re.isPending() &&
                this.currentHuddleDeferred.resolve();
          }
          getOptimisticState(re) {
            let { teamId: le, channelId: Re, huddleState: ye } = re;
            if ([C.RJ.NOT_STARTED].includes(ye))
              return {
                optimisticHuddleState: C.RJ.ENDING,
              };
            if ([C.RJ.SURVEY].includes(ye))
              return {
                optimisticHuddleState: null,
              };
            if (ye === C.RJ.PRE_JOINED)
              return {
                optimisticHuddleState: C.RJ.PRE_JOINED,
                isPrejoin: !0,
              };
            if (ye === C.RJ.STARTED && le) {
              var Te, De;
              const Ue = (0, o.getStateByTeamId)(le),
                Ke = (0, o.getStateForClientStore)(),
                Ze = (0, H.aQ)(Ke),
                Q =
                  (Ze == null ? void 0 : Ze.channelId) === Re ||
                  (!(
                    (Te = (0, f.Yw)(Ue, Re)) === null ||
                    Te === void 0 ||
                    (De = Te.activeParticipants) === null ||
                    De === void 0
                  ) &&
                    De.length)
                    ? null
                    : C.RJ.STARTED;
              return (
                (0, r.ty)(Ue, "huddles_global_mute") &&
                  (0, o.dispatchForClientStore)((0, l.Bk)(!0)),
                {
                  isPrejoin: !1,
                  optimisticHuddleState: Q,
                }
              );
            }
            return {};
          }
          fetchCredentials() {
            var re = this;
            return (0, t.coroutine)(function* () {
              const le = re.getTeamIdOrDie(),
                Re = re.getChannelIdOrDie(),
                ye = re.getThreadTsOrNothing(),
                Te = (0, o.getStateForClientStore)(),
                De = (0, f.Yw)(re.getState(), Re),
                { ttiTrace: Ue } = (0, pe.A)().getAllTraceHandlers(),
                Ke = (0, H.WL)(Te, Re),
                Ze = re.getIsMultiDevice(),
                Q = (0, J.x)(re.getState());
              if ((Ue == null || Ue.createFetchCredentialsSpan(), Ke)) {
                Ue == null ||
                  Ue.setCachedTag({
                    cached: !0,
                  });
                const ie =
                  (De == null ? void 0 : De.id) || (0, b.RW)(Ke.credentials);
                if (ie) {
                  const Ve = (0, f.P_)(re.getState(), ie);
                  if (Ve && Ve.hasEnded)
                    throw (
                      (yield re.clearQuickJoinCredentials(),
                      new Error(C.M6.ChimeMeetingEnded))
                    );
                }
                return (
                  re.getTelemeter().count(h.K7),
                  Ue == null || Ue.closeFetchCredentialsSpan(),
                  {
                    roomId: ie,
                    server: Ke.credentials,
                    isQuickJoinCredentials: !0,
                  }
                );
              }
              if ((0, y.CI)(re.getState(le))) {
                const ie = (0, ee._6)(re.getState(), {
                  channelId: Re,
                });
                if (ie) {
                  const Ve = (0, f.it)(re.getState(le), Re),
                    xe = (0, ee.G5)(re.getState(), {
                      channelId: Re,
                    }),
                    je = (0, b.RW)(ie);
                  return (
                    Ve &&
                      xe &&
                      re.dispatch(
                        (0, p.KN)({
                          channelId: Re,
                          threadTs: Ve,
                          lastRead: Ve,
                          reason: "huddles-rooms-join-kte",
                        })
                      ),
                    {
                      roomId: je,
                      server: ie,
                      isQuickJoinCredentials: !1,
                    }
                  );
                }
              }
              return (
                re.getTelemeter().mark(h.aW),
                Ue == null ||
                  Ue.setCachedTag({
                    cached: !1,
                  }),
                re
                  .dispatch(
                    (0, P.O3)({
                      teamId: le,
                      channelId: Re,
                      shouldFetchRegion: !De,
                      traceId: Ue == null ? void 0 : Ue.getTTITraceId(),
                      parentSpanId:
                        Ue == null ? void 0 : Ue.getFetchCredentialsSpanId(),
                      ...(ye && {
                        threadTs: ye,
                      }),
                      ...(Ze && {
                        isMultiDevice: Ze,
                      }),
                    })
                  )
                  .then((ie) => {
                    var Ve, xe;
                    if (
                      !(
                        !(
                          ie == null ||
                          (Ve = ie.server) === null ||
                          Ve === void 0
                        ) && Ve.meeting
                      ) ||
                      !(
                        !(
                          ie == null ||
                          (xe = ie.server) === null ||
                          xe === void 0
                        ) && xe.attendee
                      )
                    )
                      throw new Error("create_meeting_failed");
                    Ue == null || Ue.closeFetchCredentialsSpan(),
                      re.getTelemeter().mark(h.bW);
                    const je = re.getTelemeter().measure(h.aW, h.iE, h.bW);
                    re.getTelemeter().count(h.iE, je),
                      (0, ne.jm)({
                        roomsJoinTime: je,
                      });
                    let Fe = Re;
                    return (
                      re.getIsExperimentStandaloneHuddlesOn() &&
                        ie.channelId &&
                        ((Fe = ie.channelId),
                        re.setTargetChannel(Fe),
                        (0, o.dispatchForClientStore)((0, l.Jc)(Fe))),
                      (0, o.dispatchForClientStore)(
                        (0, l.Yi)({
                          channelId: Fe,
                          joinCredentials: ie.server,
                          expiry: Date.now() + g.nq,
                          fromInvite: !1,
                        })
                      ),
                      ie.rootThreadTs &&
                        ie.roomId &&
                        (re.dispatch(
                          (0, I.ZL)({
                            huddleId: ie.roomId,
                            thread: {
                              channelId: Fe,
                              ts: ie.rootThreadTs,
                            },
                          })
                        ),
                        re.dispatch(
                          (0, p.KN)({
                            channelId: Fe,
                            threadTs: ie.rootThreadTs,
                            lastRead: ie.rootThreadTs,
                            reason: "canvas-rooms-join-api",
                          })
                        ),
                        re.dispatch(
                          Q
                            ? (0, G.a)({
                                channelId: Fe,
                                threadTs: ie.rootThreadTs,
                                oldest: ie.rootThreadTs,
                              })
                            : (0, R.a)({
                                channelId: Fe,
                                threadTs: ie.rootThreadTs,
                                oldest: ie.rootThreadTs,
                              })
                        )),
                      ie
                    );
                  })
              );
            })();
          }
          connectToChime(re, le) {
            let { server: Re, roomId: ye } = re,
              { muted: Te, huddleState: De } = le;
            var Ue = this;
            return (0, t.coroutine)(function* () {
              const { ttiTrace: Ke } = (0, pe.A)().getAllTraceHandlers();
              return (
                Ke == null || Ke.createConnectToMediaServiceSpan(),
                (0, o.dispatchForClientStore)(
                  (0, l.qW)({
                    callResult: {
                      server: Re,
                      roomId: ye,
                      regions: "",
                      inviteResponses: [],
                      virtualRoomId: "",
                    },
                    isStartMuted: Te,
                    waitForHuddleStart: (0, U.u)(),
                    isPrejoin: De === C.RJ.PRE_JOINED,
                  })
                ),
                (Ue.pendingHuddleStart = (0, U.u)()),
                De === C.RJ.PRE_JOINED ? S.S.resolve() : Ue.pendingHuddleStart
              );
            })();
          }
          resolvePendingJoin(re) {
            var le = this;
            return (0, t.coroutine)(function* () {
              try {
                var Re;
                const Te = le.getChannelIdOrDie(),
                  { ttiTrace: De } = (0, pe.A)().getAllTraceHandlers(),
                  Ue = le.getState(),
                  Ke = (0, o.getStateForClientStore)(),
                  { callId: Ze, optimisticHuddleState: Q } =
                    (0, H.Qn)(Ke) || {},
                  ie = (0, f.dy)(Ue);
                if (
                  (le
                    .getLogger()
                    .info(
                      `Resolve pending huddle (${Te}, optimisticHuddleState: ${Q}, has optimisticTopic: ${!!ie})`
                    ),
                  !(
                    !((Re = le.pendingHuddleStart) === null || Re === void 0) &&
                    Re.isPending()
                  ))
                )
                  throw new Error(
                    "No pending huddle start in resolvePendingJoin"
                  );
                const Ve = le.assert(
                    Ze,
                    "Room ID is not defined for pending join"
                  ),
                  xe = (0, r.ty)(Ue, "huddles_cc_by_default");
                if (
                  ((0, b.UA)(Ue, Te) &&
                    xe &&
                    (le.dispatch((0, c.A)()),
                    le.dispatch((0, u.dD)(!0)),
                    le.dispatch((0, u.jL)(!0))),
                  ie)
                ) {
                  try {
                    yield le.dispatch(
                      (0, P.xB)({
                        roomId: Ve,
                        name: ie,
                      })
                    ),
                      le.dispatch(
                        (0, i.oU)({
                          id: Ve,
                          name: ie,
                        })
                      );
                  } catch (Fe) {
                    le.getLogger().error(Fe);
                  }
                  le.dispatch((0, m.Jc)(null));
                }
                (0, o.dispatchForClientStore)((0, l.u8)(Te)),
                  De == null || De.closeConnectToMediaServiceSpan(),
                  (0, x.e)({
                    state: Ue,
                  }).track(B.EventId.HUDDLES_TIME_AUDIO_SESSION_STARTED, {
                    contexts: {
                      calls: {
                        room_id: Ve,
                        duration_ms: Math.round(re),
                        channel_id: Te,
                      },
                    },
                  }),
                  (0, ne.jm)({
                    audioConnectedTime: re,
                  }),
                  (0, o.dispatchForClientStore)(
                    (0, l.Rh)({
                      isSelfJoined: !0,
                    })
                  ),
                  le.pendingHuddleStart.resolve();
              } catch (Te) {
                var ye;
                (ye = le.pendingHuddleStart) === null ||
                  ye === void 0 ||
                  ye.reject(Te);
              }
            })();
          }
          completePrejoin(re) {
            var le = this;
            return (0, t.coroutine)(function* () {
              const Re = le.getChannelIdOrDie(),
                ye = (0, o.getStateForClientStore)(),
                { ttiTrace: Te } = (0, pe.A)().getAllTraceHandlers(),
                De = (0, H.WL)(ye, Re);
              return (
                Te == null ||
                  Te.setCachedTag({
                    cached: !!De,
                  }),
                Te == null || Te.createConnectToMediaServiceSpan(),
                (0, o.dispatchForClientStore)(
                  (0, l.f2)({
                    ...re,
                  })
                )
              );
            })();
          }
          clearQuickJoinCredentials() {
            return (0, t.coroutine)(function* () {
              const re = (0, o.getStateForClientStore)(),
                { channelId: le } = (0, H.Qn)(re) || {};
              return (0, o.dispatchForClientStore)(
                (0, l.WB)({
                  channelId: le,
                })
              );
            })();
          }
          disconnect() {
            let re =
              arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : !1;
            var le = this;
            return (0, t.coroutine)(function* () {
              var Re;
              const ye = le.getState(),
                Te = (0, o.getStateForClientStore)(),
                { channelId: De, teamId: Ue } = (0, H.Qn)(Te) || {};
              if (!re)
                try {
                  (0, pe.A)().cleanup();
                } catch (Ke) {
                  le.getLogger().error(
                    `Error cleaning up huddle tracing: ${Ke}`
                  );
                }
              try {
                (0, o.dispatchForClientStore)((0, l.Bk)(!1)),
                  (0, y.Eg)(ye) &&
                    ((0, o.dispatchForClientStore)((0, l.JM)()),
                    (0, o.dispatchForClientStore)(
                      (0, l._u)({
                        song: void 0,
                      })
                    )),
                  (0, o.dispatchForClientStore)(
                    (0, l.Rh)({
                      isSelfJoined: !1,
                    })
                  );
                const Ze = (0, a.WR)(ye),
                  Q = De && (0, f.Yw)(ye, De);
                if (Q && De) {
                  const ie = (Q.activeParticipants || []).filter(
                    (xe) => !((0, d.MZ)(xe) && xe.slackId === Ze)
                  );
                  le.dispatch(
                    (0, i.oU)({
                      id: Q.id,
                      activeParticipants: ie,
                    })
                  );
                  const Ve = (0, i.H6)(le.getState(), Q.id);
                  Ve &&
                    le.dispatch(
                      (0, m.mr)({
                        call: Ve,
                        channelId: De,
                      })
                    );
                }
                if (De) {
                  const ie = yield (0, o.dispatchForTeamId)(
                      Ue,
                      T({
                        channelId: De,
                        userId: Ze,
                      })
                    ),
                    Ve = (0, M.H7)(ye),
                    xe = (0, K.tc)(Ve);
                  (ie || xe) && (yield le.clearQuickJoinCredentials()),
                    (0, o.dispatchForClientStore)((0, l.u8)(De));
                }
              } catch (Ke) {
                le.getLogger().error(
                  "An error occurred cleaning up huddle redux state. Proceeding to disconnect from media server.",
                  Ke
                );
              }
              try {
                const Ke = (0, U.u)();
                (0, o.dispatchForClientStore)(
                  (0, l.pl)({
                    waitForHuddleEnd: Ke,
                  })
                ),
                  yield Ke;
              } catch (Ke) {
                le.getLogger().error(
                  "An error occurred while disconnecting from the media server.",
                  Ke
                );
              }
              le.dispatch(
                (0, s.VL)({
                  huddlesVideoActive: !1,
                })
              ),
                le.dispatch((0, I.np)()),
                (0, o.dispatchForClientStore)((0, l.cx)()),
                !((Re = le.pendingHuddleStart) === null || Re === void 0) &&
                  Re.isPending() &&
                  le.pendingHuddleStart.reject(
                    new Error("HuddleStateManager shutdown")
                  );
            })();
          }
        }
        _(Me, "HuddleStateManager");
        const ge = (0, n.A)(() => {
          const fe = new Me();
          return (0, k.R)(fe.waitForStartStop.bind(fe)), fe;
        });
      },
      7004355564: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => i,
          R: () => s,
        });
        var t = e(6422693406);
        let n;
        const s = _((d) => {
            n = d;
          }, "setWaitForStartStop"),
          i = _(() => (n ? n() : t.S.resolve()), "__WEBPACK_DEFAULT_EXPORT__");
      },
      3065433701: (W, A, e) => {
        "use strict";
        e.d(A, {
          CE: () => o,
          Gu: () => a,
          vT: () => n.vT,
        });
        var t = e(1031947056),
          n = e(7366481123);
        const s = 3 * 1e3,
          i = {
            [n.vT.NoUserAudioStream]: !0,
            [n.vT.NoUserVideoStream]: !0,
            [n.vT.NoAudioOutputAudioElementError]: !0,
            [n.vT.NoAudioOutputAudioLevelError]: !0,
            [n.vT.PeerMuteRequest]: !0,
          };
        let d = {};
        const o = (0, t.Ay)(
          "Display alert message for huddle call",
          (c, u, l) => {
            let { alert: m, peerId: v } = l;
            if (!d[m]) {
              if (i[m]) {
                d[m] = setTimeout(() => {
                  d[m] && (clearTimeout(d[m]), delete d[m]),
                    c(
                      (0, n.Sb)({
                        alert: m,
                        peerId: v,
                      })
                    );
                }, s);
                return;
              }
              c(
                (0, n.Sb)({
                  alert: m,
                  peerId: v,
                })
              );
            }
          }
        );
        o.meta = {
          name: "createThunk",
          key: "createThunkdisplayAlertMessage",
          description: "Display alert message for huddle call",
        };
        const a = (0, t.Ay)(
          "Undisplay an alert message for huddle call",
          (c, u, l) => {
            d[l] && (clearTimeout(d[l]), delete d[l]), c((0, n.LL)(l));
          }
        );
        (a.meta = {
          name: "createThunk",
          key: "createThunkhideAlertMessage",
          description: "Undisplay an alert message for huddle call",
        }),
          Object.defineProperty(
            {
              alertTimeouts: d,
            },
            "alertTimeouts",
            {
              get: () => d,
              set: (c) => {
                d = c;
              },
            }
          );
      },
      5253428843: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => i,
        });
        var t = e(1031947056),
          n = e(5378147939);
        const s = (0, t.Ay)("Handle huddle error", (d, o, a) =>
          (0, n.A)().enterTerminalState(new Error(a.terminalState))
        );
        s.meta = {
          name: "createThunk",
          key: "createThunkenterTerminalState",
          description: "Handle huddle error",
        };
        const i = s;
      },
      2766373332: (W, A, e) => {
        "use strict";
        e.d(A, {
          N$: () => ye,
          KD: () => re,
          kq: () => fe,
          HU: () => le,
        });
        var t = e(9706240641),
          n = e(1031947056),
          s = e(6533394955),
          i = e(387328355),
          d = e(9864164947),
          o = e(7067820909),
          a = e(7621809678),
          r = e(3245843483),
          c = e(2778217221),
          u = e(6134475965),
          l = e(1049642794),
          m = e(2802517438),
          v = e(5824283093),
          E = e(3288846409),
          T = e(3037015781),
          g = e(4979382452),
          I = e(8029613601),
          f = e(4947127560),
          y = e(4636370173),
          M = e(2465132699),
          p = e(8523371695),
          O = e(3606117573),
          C = e(2683115972),
          h = e(3165300465),
          D = e(1610251172),
          P = e(4481313819),
          S = e(2562405183),
          b = e(5363983309),
          K = e(5286203919),
          x = e(9101533895),
          B = e(9884588328),
          U = e(8921478798),
          R = e(1407713935),
          G = e(1224315998),
          H = e(735940183),
          F = e(8320929653),
          V = e(4233000497);
        function X() {
          return (
            (X =
              Object.assign ||
              function (Te) {
                for (var De = 1; De < arguments.length; De++) {
                  var Ue = arguments[De];
                  for (var Ke in Ue)
                    Object.prototype.hasOwnProperty.call(Ue, Ke) &&
                      (Te[Ke] = Ue[Ke]);
                }
                return Te;
              }),
            X.apply(this, arguments)
          );
        }
        _(X, "_extends");
        const q = new H.Ay("huddles"),
          oe = {
            elementName: "huddles_invite_confirmation_dialog_cancel",
            eventId: G.EventId.HUDDLES_JOIN_CANCEL,
            onClick: {
              enableClogAction: !0,
            },
          },
          z = {
            elementName: "huddles_invite_confirmation_dialog_ok",
            eventId: G.EventId.HUDDLES_JOIN_CONFIRM,
            onClick: {
              enableClogAction: !0,
            },
          };
        function Ae(Te) {
          let { closeModal: De, ...Ue } = Te;
          const { channelId: Ke, senderUserId: Ze } = Ue,
            Q = (0, V.A)(Ke),
            {
              handleDecline: ie,
              handleJoin: Ve,
              isLoading: xe,
              inviteText: je,
            } = (0, F.lc)(Ue),
            Fe = (0, S.d4)((Qe) => (0, U.I)(Qe, Ze));
          let He = q.t("Huddle with {dmPersons}", {
            dmPersons: Fe,
            fallbackHash: "a0767c2e0145a0f1159ecf41452f3cf03b376fe1",
          });
          const Oe = (0, S.d4)((Qe) => (0, x.OL)(Qe, Ke)),
            Ye = (0, S.d4)((Qe) =>
              (0, T.uz)(Oe)
                ? (0, B.SB)(Qe, Oe, {
                    publicChannelIncludeHashSign: !1,
                    imIncludeAtSign: !1,
                  })
                : void 0
            );
          Ye &&
            (He = (0, R.JM)(Oe)
              ? q.t("Huddle with {dmPersons}", {
                  dmPersons: Ye,
                  fallbackHash: "a0767c2e0145a0f1159ecf41452f3cf03b376fe1",
                })
              : q.t("Huddle in {channelName}", {
                  channelName: Ye,
                  fallbackHash: "a0767c2e0145a0f1159ecf41452f3cf03b376fe1",
                }));
          const at = (0, E.cw)(K.hc) === Ke;
          (0, v.useEffect)(() => {
            at && !xe && (De == null || De());
          }, [at, xe, De]);
          const _t = (0, v.useCallback)(() => {
              ie(), De == null || De();
            }, [De, ie]),
            pt = "huddle-invite-join-modal";
          return v.createElement(
            P.A,
            X(
              {
                uiComponentName:
                  G.UiComponentName.HUDDLES_INVITE_CONFIRMATION_DIALOG,
              },
              Q
            ),
            v.createElement(
              g.A,
              {
                labelledby: pt,
                dataQa: pt,
                closeModal: De,
                role: "dialog",
                className: "p-huddle_invite_join_modal",
                overlayClassName: "p-huddle_invite_join_modal__overlay",
                shouldReturnFocusAfterClose: !0,
              },
              v.createElement(
                I.A,
                null,
                v.createElement(f.A, {
                  title: He,
                  id: pt,
                })
              ),
              v.createElement(y.A, null, v.createElement(M.A, null, je)),
              v.createElement(
                p.A,
                null,
                v.createElement(
                  O.A,
                  null,
                  v.createElement(
                    C.Ay,
                    {
                      type: "outline",
                      onClick: _t,
                      "data-qa": "huddle_invite_join_cancel",
                      autoClogProps: oe,
                    },
                    q.t("Not Now")
                  ),
                  v.createElement(
                    h.A,
                    {
                      type: "primary",
                      loading: xe,
                      onClick: Ve,
                      "data-qa": "huddle_invite_join_go",
                      autoClogProps: z,
                      autoFocus: !0,
                      "aria-label": q.t("Join"),
                    },
                    v.createElement(D.A, {
                      type: "headphones",
                    }),
                    v.createElement(
                      "span",
                      {
                        className: "p-huddle_invite_join_modal__join_label",
                      },
                      q.t("Join")
                    )
                  )
                )
              )
            )
          );
        }
        _(Ae, "HuddleInviteJoinModal"),
          (Ae.displayName = "HuddleInviteJoinModal");
        const ae = {
            HuddleInviteJoinModal: Ae,
          },
          de = (0, b.A)(Ae);
        var ve = e(605594140),
          Se = e(6422693406),
          Ee = e(796111729),
          be = e(8040098042),
          Ce = e(2960290117),
          Z = e(6415612447),
          $ = e(6470070112),
          N = e(56548687),
          L = e(571104883),
          w = e(8746998952),
          k = e(9712681361),
          J = e(5702042015),
          ee = e(7429662208),
          ne = e(3193155968),
          pe = e(6695353875),
          Me = e(9629572172),
          ke = e(352142497);
        const ge = _((Te, De, Ue) => {
            (0, N.e)({
              state: Te,
            }).track(De, {
              contexts: {
                calls: (0, $.gG)(Te, Ue),
                ui_context: {
                  action: G.UiAction.KEYDOWN,
                },
              },
            });
          }, "clogHuddlesEvent"),
          fe = (0, n.Ay)(
            "Start huddle in highlighted channel or current primary view",
            (function () {
              var Te = (0, t.coroutine)(function* (De, Ue, Ke) {
                let { highlightedChannelId: Ze } = Ke;
                const Q = (0, s.getStateForClientStore)(),
                  ie = Ue(),
                  Ve = (0, pe.cc)(ie),
                  xe = Ve,
                  je = (0, ee.e6)(ie),
                  Fe = (0, m.A)(ie),
                  He = xe
                    ? (0, ee.F8)(ie, {
                        tab: je,
                        container: ne.mq.Primary,
                      })
                    : null,
                  Oe = xe ? (He == null ? void 0 : He.id) : Fe,
                  Ye = Ze || Oe,
                  { channelId: at, teamId: _t } = (0, K.Ak)(Q) || {};
                if (at && _t && (!Ze || Ze === at)) {
                  (0, s.dispatchForTeamId)(_t, (0, u.A)()),
                    ge(ie, G.EventId.HUDDLES_LEAVE, at);
                  return;
                }
                const pt = (0, K.aQ)(Q);
                if (pt && !Ze) {
                  const {
                    channelId: ct,
                    senderUserId: Pt,
                    callId: zt,
                    teamId: an,
                  } = pt;
                  (0, s.dispatchForTeamId)(
                    an,
                    de({
                      channelId: ct,
                      senderUserId: Pt,
                      callId: zt,
                    })
                  );
                  return;
                }
                if (!Ye || (!(0, be.A)(Ye) && !(0, Ce.Ay)(Ye))) {
                  Ve && De((0, ve.A)());
                  return;
                }
                const Qe = (0, Z.Y)(ie, Ye);
                Qe &&
                  (0, $.Bn)(ie, Qe) &&
                  (ge(ie, G.EventId.HUDDLES_JOIN, Qe.id),
                  De(
                    (0, w.A)({
                      channelId: Qe.id,
                      forceFocus: !0,
                      entryPoint: k.su.KEYBOARD_SHORTCUT_JOIN_HUDDLE,
                    })
                  ));
              });
              return function (De, Ue, Ke) {
                return Te.apply(this, arguments);
              };
            })()
          );
        fe.meta = {
          name: "createThunk",
          key: "createThunktoggleHuddleInHighlightedChannel",
          description:
            "Start huddle in highlighted channel or current primary view",
        };
        const re = (0, n.Ay)(
          "Start huddle in the current view",
          (function () {
            var Te = (0, t.coroutine)(function* (De, Ue, Ke, Ze) {
              var Q, ie;
              const Ve = Ue(),
                {
                  shouldUseNavigate: xe,
                  isChildWindow: je,
                  getViewSet: Fe,
                } = Ze(Me.U),
                He = Fe(Ve);
              (!xe ||
                !je ||
                (He == null || (Q = He[ne.mq.Primary]) === null || Q === void 0
                  ? void 0
                  : Q.viewType) !== ke.D.Channel) &&
                De(
                  fe({
                    highlightedChannelId: void 0,
                  })
                );
              const Oe =
                He == null || (ie = He[ne.mq.Primary]) === null || ie === void 0
                  ? void 0
                  : ie.id;
              De(
                fe({
                  highlightedChannelId: Oe,
                })
              );
            });
            return function (De, Ue, Ke, Ze) {
              return Te.apply(this, arguments);
            };
          })()
        );
        re.meta = {
          name: "createThunk",
          key: "createThunktoggleHuddleInCurrentView",
          description: "Start huddle in the current view",
        };
        const le = (0, n.Ay)(
          "Toggle microphone from current value to opposite value",
          (Te, De) => {
            const Ue = (0, s.getStateForClientStore)(),
              { teamId: Ke, channelId: Ze } = (0, K.Ak)(Ue) || {};
            if (!Ke) return;
            const Q = (0, s.getStateByTeamId)(Ke),
              ie = (0, i.Ng)(Q),
              Ve = ie == null ? void 0 : ie.isMicrophoneEnabled;
            (0, s.dispatchForTeamId)(Ke, (0, l.A)(!Ve)),
              Te(Ve ? (0, d.Ho)() : (0, d.qc)()),
              (0, Ee.Ay)({
                state: Q,
              }).info(
                c.o7,
                `Keyboard shortcut invoked -- toggling mic to ${
                  Ve ? G.EventId.HUDDLES_MUTE : G.EventId.HUDDLES_UNMUTE
                }`
              ),
              Ze &&
                ge(
                  Q,
                  Ve ? G.EventId.HUDDLES_MUTE : G.EventId.HUDDLES_UNMUTE,
                  Ze
                );
          }
        );
        le.meta = {
          name: "createThunk",
          key: "createThunktoggleSelfMicrophone",
          description: "Toggle microphone from current value to opposite value",
        };
        let Re = !1;
        const ye = _((Te) => {
          var De;
          return (0, L.dY)("4.13.0")
            ? (Te &&
                !Re &&
                ((0, r.zin)(
                  a.Sr.TOGGLE_MUTE,
                  (0, t.coroutine)(function* () {
                    const Ue = (0, s.getStateForClientStore)(),
                      { teamId: Ke } = (0, K.Ak)(Ue) || {};
                    Ke &&
                      ((0, s.dispatchForTeamId)(Ke, le()),
                      (0, o.Sr)((0, s.getStateForClientStore)()) ||
                        (0, s.dispatchForClientStore)((0, J.A)()));
                  })
                ),
                (Re = !0)),
              (De = (0, r.wzE)(a.Sr.TOGGLE_MUTE, Te)) === null || De === void 0
                ? void 0
                : De.then(() => Te))
            : Se.S.resolve(!1);
        }, "maybeToggleGlobalMuteShortcut");
      },
      1883693579: (W, A, e) => {
        "use strict";
        e.d(A, {
          uZ: () => Se,
          Tn: () => be,
          Cd: () => Ee,
        });
        var t = e(796111729),
          n = e(1031947056),
          s = e(6533394955),
          i = e(387484329),
          d = e(2778217221),
          o = e(4250409994),
          a = e(9712681361),
          r = e(6422693406),
          c = e(5046160032),
          u = e(4914127094),
          l = e(8445020572),
          m = e(7299481592),
          v;
        (function (Ce) {
          (Ce.HuddleSurvey = "huddle-survey"),
            (Ce.ListsSurvey = "lists-survey");
        })(v || (v = {}));
        var E;
        (function (Ce) {
          (Ce.NoAudioInput = "no-audio-input"),
            (Ce.NoAudioOutput = "no-audio-output"),
            (Ce.LowVideoQuality = "low-video-quality"),
            (Ce.LowAudioQuality = "low-audio-quality"),
            (Ce.VideoNotWorking = "video-not-working"),
            (Ce.DeviceSelectionError = "device-selection-error"),
            (Ce.Disconnected = "disconnected"),
            (Ce.SomethingElse = "something-else"),
            (Ce.Dismiss = "dismiss");
        })(E || (E = {}));
        function T(Ce) {
          return Ce.isOk;
        }
        _(T, "isOkResult");
        const g = (0, n.Ay)("Send survey results", (Ce, Z, $) => {
          var N, L;
          const w = Z();
          var k;
          const J =
            (k = $.callId) !== null && k !== void 0 ? k : w.activeCall.id;
          if (!J)
            return (
              (0, m.M)(
                !1,
                "There should have been a call in order to send survey results."
              ),
              r.S.reject(new Error("SendSurveyResult: No call"))
            );
          var ee;
          const ne = (ee = $.type) !== null && ee !== void 0 ? ee : "vo-survey",
            pe = T($)
              ? void 0
              : {
                  response_requested: !1,
                  comments: $.comments,
                  is_video:
                    (N = w.activeCall) === null || N === void 0
                      ? void 0
                      : N.hasVideoBeenEnabled,
                  is_ss:
                    (L = w.activeCall) === null || L === void 0
                      ? void 0
                      : L.hasScreenshareBeenEnabled,
                  list_id: $ == null ? void 0 : $.listId,
                  list_entry_point: $ == null ? void 0 : $.listEntryPoint,
                },
            Me =
              T($) || ne === v.ListsSurvey ? "ok" : $.notOkResponses.join(","),
            ke = {
              room: J,
              event_type: ne,
              event_value: Me,
              event_metadata: JSON.stringify(pe),
            };
          return (0, c.A)({
            apiUrl: "/api/",
            method: "screenhero.rooms.userEvent",
            token: (0, u.F)(w),
            versionTs: (0, l.HF)(),
            versionUid: (0, l.X3)(),
            args: ke,
          })
            ? r.S.resolve()
            : r.S.reject(new Error("SendSurveyResult: beacon failed"));
        });
        g.meta = {
          name: "createThunk",
          key: "createThunksendSurveyResult",
          description: "Send survey results",
        };
        var I = e(5824283093),
          f = e(2562405183),
          y = e(6313685253),
          M = e(6122756707),
          p = e(6084388622),
          O = e(3989454579),
          C = e(6948117092),
          h = e(5016574668),
          D = e(3855029223),
          P = e(4798756512),
          S = e(6310192986),
          b = e(1616072515);
        const K = "survey";
        var x;
        (function (Ce) {
          (Ce.Good = "good"), (Ce.Bad = "bad"), (Ce.Dismiss = "dismiss");
        })(x || (x = {}));
        const B = "HUDDLES-SURVEY-TRACE",
          U = _((Ce) => {
            let { teamId: Z, callId: $, results: N } = Ce;
            const L = Z
              ? (0, t.Ay)({
                  label: B,
                  teamId: Z,
                })
              : (0, t.Wo)({
                  label: B,
                });
            if (!Z) {
              L.warn("Missing team id. Exiting early");
              return;
            }
            const w = (0, D.E)({
                teamOrEnterpriseId: Z,
              }),
              k = w.createTrace({
                traceName: h.Sq,
                tags: {
                  __dataset: h.RN,
                },
                samplingOptions: {
                  sampleRate: 1,
                  sampleType: P.tS.SESSION,
                },
              }),
              J = k.startSpan(K),
              ee = {
                ...N,
              };
            (0, C.A)(ee, "comments");
            const { notOkResponses: ne, summary: pe } = ee || {};
            if (!$) {
              L.warn("Missing callId. Exiting early");
              return;
            }
            if (!pe) {
              L.warn("Missing summary. Exiting early");
              return;
            }
            try {
              L.info(
                `Processing huddle survey response. callId: ${$} - traceId: ${k.getTraceId()} - results: ${JSON.stringify(
                  ee
                )}`
              );
            } catch (ge) {
              L.error(ge);
            }
            const Me = {
                teamId: Z,
                callId: $,
                surveySummary: pe,
                surveyResponseCount: (ne == null ? void 0 : ne.length) || 0,
                surveyResponses: ne == null ? void 0 : ne.join(" "),
              },
              ke = (0, b.tT)({
                ...Me,
                ...(0, S.vP)(),
              });
            J.addTags(ke),
              J.close(),
              L.info(
                `Reporting huddle survey trace with ${
                  Object.keys(ke).length
                } tags (${k.getTraceId()})`
              ),
              L.debug("Tags attached", ke),
              w.reportTrace(k),
              w.clearTrace(k);
          }, "reportHuddleSurveyResultsTrace");
        var R = e(8847766420),
          G = e(980293773),
          H = e(7138682671),
          F = e(8472205500),
          V = e(735940183),
          X = e(8739505998),
          q = e(5363983309),
          oe = e(6968387112);
        const z = new V.Ay("huddles");
        function Ae(Ce) {
          return (0, y.A)(Ce, (Z, $, N) => ($ && Z.push(N), Z), []);
        }
        _(Ae, "collectResponses");
        const ae = _((Ce) => {
          let { closeModal: Z, callId: $ } = Ce;
          const N = (0, f.d4)(R.ZT),
            [L, w] = (0, I.useState)({}),
            [k, J] = (0, I.useState)(""),
            [ee, ne] = (0, I.useState)(!1),
            pe = `https://${(0, oe.qF)()}`,
            Me = (0, M.wA)(),
            ke = [
              {
                value: E.NoAudioInput,
                text: z.t("Others couldn\u2019t hear me"),
              },
              {
                value: E.NoAudioOutput,
                text: z.t("I couldn\u2019t hear others"),
              },
              {
                value: E.DeviceSelectionError,
                text: z.t(
                  "Slack selected the wrong microphone/speaker, or couldn\u2019t find my device"
                ),
              },
              {
                value: E.LowAudioQuality,
                text: z.t(
                  "Audio was low quality (e.g., it lagged or sounded choppy/robotic)"
                ),
              },
              {
                value: E.LowVideoQuality,
                text: z.t(
                  "Video was low quality (e.g., slow, not in sync with audio, or pixelated)"
                ),
              },
              {
                value: E.VideoNotWorking,
                text: z.t("Video didn\u2019t work at all"),
              },
              {
                value: E.Disconnected,
                text: z.t("I got disconnected from the Huddle"),
              },
              {
                value: E.SomethingElse,
                text: z.t("Something else went wrong"),
              },
            ],
            ge = v.HuddleSurvey,
            fe = (0, I.useCallback)(() => {
              ne(!0);
              const Te = {
                isOk: !1,
                notOkResponses: Ae(L),
                comments: k,
                callId: $,
                type: ge,
              };
              Me(g(Te)).then(() => {
                N &&
                  U({
                    teamId: N,
                    callId: $,
                    results: {
                      summary: x.Bad,
                      ...Te,
                    },
                  }),
                  ne(!1),
                  Z == null || Z();
              });
            }, [$, L, Z, N, k, Me, ge]),
            re = (0, I.useCallback)(() => {
              Me(
                g({
                  isOk: !1,
                  notOkResponses: [E.Dismiss],
                  callId: $,
                  type: ge,
                })
              ),
                Z == null || Z();
            }, [Z, $, ge, Me]),
            le = (0, I.useCallback)((Te) => J(Te), []),
            ye = !!L[E.SomethingElse];
          return I.createElement(
            G.dW,
            {
              closeModal: re,
              showCloseButton: !0,
              centered: !0,
              maxWidth: 600,
            },
            I.createElement(
              I.Fragment,
              null,
              I.createElement(
                G.rQ,
                null,
                I.createElement(G.Rc, {
                  title: z.t("What went wrong?"),
                })
              ),
              I.createElement(
                G.$m,
                null,
                I.createElement(
                  G.qf,
                  null,
                  ke.map((Te) => {
                    let { value: De, text: Ue } = Te;
                    return I.createElement(
                      H.A,
                      {
                        text: Ue,
                        key: De,
                        id: De,
                        type: "inline",
                        cursor: "pointer",
                        className: "p-huddle_survey_modal_checkbox",
                      },
                      I.createElement(O.A, {
                        name: De,
                        value: De,
                        checked: !!L[De],
                        onChange: (Ke) =>
                          w((Ze) => ({
                            ...Ze,
                            [De]: Ke.target.checked,
                          })),
                      })
                    );
                  }),
                  ye &&
                    I.createElement(
                      H.A,
                      {
                        className: "padding_top_75",
                        text: z.t(
                          "If you\u2019d like, please share any other details here:"
                        ),
                        id: "details",
                        optional: !0,
                      },
                      I.createElement(F.A, {
                        name: "details",
                        id: "details",
                        onChange: le,
                        value: k,
                      })
                    )
                )
              ),
              I.createElement(
                G.jl,
                null,
                I.createElement(
                  X.A,
                  {
                    href: `${pe}/privacy-policy`,
                    target: "_blank",
                  },
                  z.t("Privacy Policy")
                ),
                I.createElement(
                  G.ox,
                  null,
                  I.createElement(
                    p.$n,
                    {
                      onClick: re,
                      type: "outline",
                    },
                    z.t("Dismiss")
                  ),
                  I.createElement(
                    p.lV,
                    {
                      loading: ee,
                      onClick: fe,
                      "aria-label": z.t("Send"),
                    },
                    z.t("Send")
                  )
                )
              )
            )
          );
        }, "HuddleSurveyModal");
        ae.displayName = "HuddleSurveyModal";
        const de = (0, q.A)(ae);
        var ve = e(5286203919);
        const Se = (0, n.Ay)(
          "Close the mini survey after a postive response",
          (Ce, Z, $) => {
            let { channelId: N } = $;
            (0, s.dispatchForClientStore)(
              (0, o.Rh)({
                channelId: N,
                optimisticHuddleState: null,
                huddleState: a.RJ.NOT_STARTED,
              })
            );
          }
        );
        Se.meta = {
          name: "createThunk",
          key: "createThunkcloseMiniSurvey",
          description: "Close the mini survey after a postive response",
        };
        const Ee = (0, n.Ay)(
          "Set the date for when the user last saw the huddle survey",
          (Ce, Z, $) => {
            let { timeSeen: N } = $;
            Ce(
              (0, i.AZ)({
                pref: "huddle_survey_last_seen",
                value: N,
              })
            );
          }
        );
        Ee.meta = {
          name: "createThunk",
          key: "createThunksetHuddleLastSeenSurvey",
          description:
            "Set the date for when the user last saw the huddle survey",
        };
        const be = (0, n.Ay)(
          "Record the result of the mini survey we first display the user after a huddle ends.",
          (Ce, Z, $) => {
            let { result: N } = $;
            const L = (0, s.getStateForClientStore)(),
              w = (0, ve.E9)(L),
              k = (0, ve.hc)(L),
              J = (0, ve.l4)(L),
              ee = v.HuddleSurvey;
            let ne = a.RJ.NOT_STARTED,
              pe;
            switch (N) {
              case "bad":
                w &&
                  Ce(
                    de({
                      callId: w,
                    })
                  );
                break;
              case "good":
                (ne = a.RJ.SURVEY_GOOD),
                  Ce(
                    g({
                      isOk: !0,
                      callId: w,
                      type: ee,
                    })
                  ),
                  (pe = x.Good);
                break;
              case "dismiss":
                (pe = x.Dismiss),
                  Ce(
                    g({
                      isOk: !1,
                      callId: w,
                      notOkResponses: [E.Dismiss],
                    })
                  );
                break;
              default:
            }
            pe &&
              U({
                teamId: J,
                callId: w,
                results: {
                  summary: pe,
                },
              }),
              (0, s.dispatchForClientStore)(
                (0, o.Rh)({
                  channelId: k,
                  optimisticHuddleState: null,
                  huddleState: ne,
                })
              ),
              (0, t.Ay)({
                getState: Z,
              }).info(
                d.o7,
                `Marking huddle as ${ne} in component: huddle-survey`
              );
          }
        );
        be.meta = {
          name: "createThunk",
          key: "createThunkrecordMiniSurvey",
          description:
            "Record the result of the mini survey we first display the user after a huddle ends.",
        };
      },
      6741408957: (W, A, e) => {
        "use strict";
        e.d(A, {
          GD: () => E,
          Ss: () => g,
          iz: () => f,
        });
        var t = e(3398586081),
          n = e(1289024643),
          s = e(4540171876),
          i = e(6422693406),
          d = e(3037015781),
          o = e(8352634987),
          a = e(1031947056),
          r = e(6533394955),
          c = e(9640070512),
          u = e(2527782504),
          l = e(5286203919),
          m = e(5881236351);
        const v = _(
            (M, p) =>
              (0, r.dispatchForTeamId)(
                M,
                (0, s.Db)({
                  callIds: p,
                  reason: "all-calls-store/conditional-fetch",
                })
              ).then((O) =>
                O.map((C) => (0, r.dispatchForTeamId)(M, (0, n.oU)(C)))
              ),
            "fetchAndUpsert"
          ),
          E = (0, t.A)(
            () =>
              new o.Ay({
                storeKey: "allCalls",
                fetch: v,
                isEnabled: () => !0,
              })
          ),
          T = _((M, p) => {
            const O = p.map(
              (C) => ((0, r.dispatchForTeamId)(M, (0, n.oU)(C)), C.id)
            );
            E().markObjectsAsFresh(M, O);
          }, "upsertCalls"),
          g = (0, t.A)(
            () =>
              new d.Ay({
                fetch: (M, p) =>
                  (0, r.dispatchForTeamId)(
                    M,
                    (0, s.Db)({
                      callIds: p,
                      reason: "all-calls-store/unknown-fetch",
                    })
                  ),
                upsertKnown: T,
                upsertNonExistent: (M, p) =>
                  T(
                    M,
                    p.map((O) => {
                      let { id: C } = O;
                      return {
                        id: C,
                        name: "",
                      };
                    })
                  ),
              })
          );
        let I = 0;
        const f = (0, a.Ay)("Set a huddle topic", (M, p, O) => {
          let { channelId: C, topic: h } = O;
          const D = (0, r.getStateForClientStore)();
          if ((0, l.aS)(D)) return M((0, m.Jc)(h)), i.S.resolve();
          const P = (0, l.E9)(D);
          if (!P) return i.S.reject(new Error(`No callId for channel ${C}`));
          M((0, m.Jc)(h)), (I += 1);
          const S = I;
          return M(
            (0, s.xB)({
              roomId: P,
              name: h,
            })
          )
            .then(() =>
              M(
                (0, n.oU)({
                  id: P,
                  name: h,
                })
              )
            )
            .finally(() => {
              S === I && M((0, m.Jc)(null)),
                M(
                  (0, c.H)({
                    focusKey: u.Ay.HUDDLE_SIDEBAR_TOPIC,
                    forceFocus: !0,
                  })
                );
            });
        });
        f.meta = {
          name: "createThunk",
          key: "createThunksetHuddleTopic",
          description: "Set a huddle topic",
        };
        const y = {
          fetchAndUpsert: v,
        };
      },
      666760496: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => E,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(4540171876),
          i = e(6422693406),
          d = e(1031947056),
          o = e(387328355),
          a = e(6533394955),
          r = e(9548972574),
          c = e(7723800688),
          u = e(1224315998),
          l = e(56548687),
          m = e(6470070112);
        const v = (0, d.Ay)(
          "Notify members to join huddle",
          (function () {
            var T = (0, t.coroutine)(function* (g, I, f) {
              let { channelId: y, userIds: M } = f;
              const p = [];
              if (M && M.length > 0) {
                M.forEach((b) => {
                  g(
                    (0, o.oN)({
                      userId: b,
                    })
                  ),
                    p.push(
                      new i.S((K, x) => {
                        g(
                          (0, s.OB)({
                            userId: b,
                            channelId: y,
                            reason: "huddle-notify-member",
                          })
                        )
                          .then(K)
                          .catch((B) => {
                            const U = new Error(B.message);
                            (U.invitedMemberId = b),
                              (U.inviteRejectionReason = B.name),
                              x(U);
                          });
                      })
                    );
                });
                const O = (0, a.getStateForClientStore)(),
                  C = I(),
                  h = (0, r.Yw)(C, y),
                  D = (0, m.$t)(C, {
                    huddleId: h == null ? void 0 : h.id,
                  }),
                  P = (0, m.kn)(O),
                  S = (0, m.UE)(O);
                (0, l.e)({
                  state: C,
                }).track(u.EventId.CANVAS_EVENT, {
                  contexts: {
                    ui_context: {
                      ui_properties: {
                        element_name: c.Hi.INVITATION_SENT,
                      },
                      action: u.UiAction.INVITE_PEOPLE,
                    },
                    calls: S,
                  },
                  invited_user_ids: M,
                  ...D,
                  ...P,
                });
              }
              return i.S.all(p).then((O) => O);
            });
            return function (g, I, f) {
              return T.apply(this, arguments);
            };
          })()
        );
        v.meta = {
          name: "createThunk",
          key: "createThunkinviteMembers",
          description: "Notify members to join huddle",
        };
        const E = v;
      },
      1070786785: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => r,
          V3: () => o,
          kb: () => a,
        });
        var t = e(1031947056),
          n = e(6533394955),
          s = e(6134475965),
          i = e(5286203919);
        const d = (0, t.Ay)("End huddle for channelId if any", (c, u, l) => {
          const m = (0, n.getStateForClientStore)(),
            v = (0, i.hc)(m);
          v && v === l && c((0, s.A)());
        });
        d.meta = {
          name: "createThunk",
          key: "createThunkmaybeEndHuddle",
          description: "End huddle for channelId if any",
        };
        const o = (0, t.Ay)(
          "End last active huddle for channelId if any",
          (c, u, l) => {
            var m;
            const v = (0, n.getStateForClientStore)(),
              E =
                (m = (0, i.Qn)(v)) === null || m === void 0
                  ? void 0
                  : m.channelId,
              T = (0, i.Ak)(v);
            ((E && E === l) || (T === null && E && E !== l)) && c((0, s.A)());
          }
        );
        o.meta = {
          name: "createThunk",
          key: "createThunkmaybeEndLastActiveHuddleByChannelId",
          description: "End last active huddle for channelId if any",
        };
        const a = (0, t.Ay)(
          "End huddle for call Id and channelId if any",
          (c, u, l) => {
            let { channelId: m, callId: v } = l;
            const E = (0, n.getStateForClientStore)(),
              { channelId: T, callId: g } = (0, i.Qn)(E) || {};
            T && T === m && g === v && c((0, s.A)());
          }
        );
        a.meta = {
          name: "createThunk",
          key: "createThunkmaybeEndHuddleByChannelAndCallId",
          description: "End huddle for call Id and channelId if any",
        };
        const r = d;
      },
      9864164947: (W, A, e) => {
        "use strict";
        e.d(A, {
          Gt: () => B,
          Ho: () => S,
          LW: () => P,
          Md: () => C,
          OF: () => F,
          Ux: () => K,
          Wf: () => H,
          dr: () => I,
          fH: () => h,
          gA: () => D,
          gV: () => R,
          qc: () => b,
          rV: () => x,
          s5: () => U,
        });
        var t = e(6998663753),
          n = e(5950652755),
          s = e(1031947056),
          i = e(2778217221),
          d = e(796111729),
          o = e(8664881451),
          a = e(2854284421),
          r = e(2047021170),
          c = e(3986753718),
          u = e(7022928841),
          l = e(5332875232),
          m = e(2791814261),
          v = e(5387083734),
          E = e(735940183);
        const T = (0, d.Wo)({
            label: "HUDDLE-SOUNDS",
          }),
          g = [a.o8, a.CZ, a.Ji, a.PV, a.wg, a.sQ, a.o3, a.nP, a.zd, a.qP],
          I = (0, t.A)(() => {
            (0, v.IE)(
              "pre-cache-huddles-sounds",
              () => {
                g.forEach((V) => {
                  T.info(`Adding huddle sound effect to in-memory cache: ${V}`),
                    (0, o.qG)(V);
                });
              },
              {
                delay: 1e3,
              }
            );
          }),
          f = (0, n.A)(
            function () {
              let V =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : !1;
              return (0, o.ZH)(V ? a.Ji : a.o8, {
                loop: !1,
              });
            },
            7e3,
            {
              leading: !0,
              trailing: !1,
            }
          ),
          y = (0, n.A)(
            function () {
              let V =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : !1;
              return (0, o.ZH)(V ? a.PV : a.CZ, {
                loop: !1,
              });
            },
            7e3,
            {
              leading: !0,
              trailing: !1,
            }
          ),
          M = (0, n.A)(
            function () {
              let V =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : !1;
              return (0, o.ZH)(V ? a.DT : a.o, {
                loop: !1,
              });
            },
            0,
            {
              leading: !0,
              trailing: !1,
            }
          ),
          p = (0, n.A)(
            (V, X, q) => {
              let oe = X ? a.sQ : a.wg;
              const z = 0.25,
                Ae = (0, m.L)(q),
                ae = (0, l.DR)(q);
              X && V === "gong" && ae && Ae && (oe = a.o3);
              const de = (0, l.Ey)(q);
              X && V === "duck" && de && Ae && (oe = a.nP),
                (0, o.ZH)(oe, {
                  loop: !1,
                  volume: z,
                });
            },
            5e3,
            {
              leading: !0,
              trailing: !1,
            }
          ),
          O = _(
            (V) => !(0, r.ty)(V, "mute_huddle_sounds"),
            "canPlayHuddleSound"
          ),
          C = (0, s.Ay)("Play sound when user joins", (V, X) => {
            O(X()) &&
              ((0, d.Ay)({
                getState: X,
              }).info(i.o7, "playSoundOnUserJoin"),
              f(!1));
          });
        C.meta = {
          name: "createThunk",
          key: "createThunkplaySoundOnUserJoin",
          description: "Play sound when user joins",
        };
        const h = (0, s.Ay)("Play sound when user leaves", (V, X) => {
          O(X()) &&
            ((0, d.Ay)({
              getState: X,
            }).info(i.o7, "playSoundOnUserLeft"),
            y(!1));
        });
        h.meta = {
          name: "createThunk",
          key: "createThunkplaySoundOnUserLeft",
          description: "Play sound when user leaves",
        };
        const D = (0, s.Ay)("Play sound when you join", (V, X) => {
          O(X()) &&
            ((0, d.Ay)({
              getState: X,
            }).info(i.o7, "playSoundOnYouJoin"),
            f(!0));
        });
        D.meta = {
          name: "createThunk",
          key: "createThunkplaySoundOnYouJoin",
          description: "Play sound when you join",
        };
        const P = (0, s.Ay)("Play sound when you leave", (V, X) => {
          O(X()) &&
            ((0, d.Ay)({
              getState: X,
            }).info(i.o7, "playSoundOnYouLeft"),
            y(!0));
        });
        P.meta = {
          name: "createThunk",
          key: "createThunkplaySoundOnYouLeft",
          description: "Play sound when you leave",
        };
        const S = (0, s.Ay)(
          "Play sound when user mutes the mic using keyboard shortcut",
          (V, X) => {
            O(X()) &&
              ((0, d.Ay)({
                getState: X,
              }).info(i.o7, "playSoundOnMicMute"),
              M(!0));
          }
        );
        S.meta = {
          name: "createThunk",
          key: "createThunkplaySoundOnMicMute",
          description:
            "Play sound when user mutes the mic using keyboard shortcut",
        };
        const b = (0, s.Ay)(
          "Play sound when user unmutes the mic using keyboard shortcut",
          (V, X) => {
            O(X()) &&
              ((0, d.Ay)({
                getState: X,
              }).info(i.o7, "playSoundOnMicUnmute"),
              M(!1));
          }
        );
        b.meta = {
          name: "createThunk",
          key: "createThunkplaySoundOnMicUnmute",
          description:
            "Play sound when user unmutes the mic using keyboard shortcut",
        };
        const K = (0, s.Ay)(
          "Play sound when reaction is received",
          (V, X, q) => {
            let { emoji: oe, isEffect: z } = q;
            const Ae = X();
            (0, r.ty)(Ae, "huddles_reactions_play_sound") && O(Ae)
              ? ((0, d.Ay)({
                  getState: X,
                }).info(i.o7, "playSoundOnReaction"),
                p(oe, z, Ae))
              : (0, d.Ay)({
                  getState: X,
                }).info(i.o7, "did not playSoundOnReaction");
          }
        );
        K.meta = {
          name: "createThunk",
          key: "createThunkplaySoundOnReaction",
          description: "Play sound when reaction is received",
        };
        const x = (0, s.Ay)("Plays the huddle invite sound", (V, X) => {
          const q = X();
          (0, c.YX)(q) || !O(q) || (0, o.ZH)((0, u.qF)(q));
        });
        x.meta = {
          name: "createThunk",
          key: "createThunkplayHuddleInviteSound",
          description: "Plays the huddle invite sound",
        };
        const B = (0, s.Ay)("Plays the huddle new requester sound", (V, X) => {
          O(X()) &&
            ((0, d.Ay)({
              getState: X,
            }).info(i.o7, "playHuddleNewRequesterSound"),
            (0, o.ZH)(a.rT, {
              loop: !1,
            }));
        });
        B.meta = {
          name: "createThunk",
          key: "createThunkplayHuddleNewRequesterSound",
          description: "Plays the huddle new requester sound",
        };
        const U = (0, s.Ay)(
          "Plays the huddle request accepted sound",
          (V, X) => {
            O(X()) &&
              ((0, d.Ay)({
                getState: X,
              }).info(i.o7, "playHuddleNewRequestAcceptedSound"),
              (0, o.ZH)(a.rT, {
                loop: !1,
              }));
          }
        );
        U.meta = {
          name: "createThunk",
          key: "createThunkplayHuddleNewRequestAcceptedSound",
          description: "Plays the huddle request accepted sound",
        };
        const R = (0, s.Ay)(
          "Plays the huddle request expired sound",
          (V, X) => {
            O(X()) &&
              ((0, d.Ay)({
                getState: X,
              }).info(i.o7, "playHuddleNewRequestExpiredSound"),
              (0, o.ZH)(a.xE, {
                loop: !1,
              }));
          }
        );
        R.meta = {
          name: "createThunk",
          key: "createThunkplayHuddleNewRequestExpiredSound",
          description: "Plays the huddle request expired sound",
        };
        const G = _((V) => {
            let X = {
              onSound: void 0,
              offSound: void 0,
            };
            switch (V) {
              case "ja-JP":
                X = {
                  onSound: a.Q6,
                  offSound: a.uv,
                };
                break;
              case "es-LA":
              case "es-ES":
                X = {
                  onSound: a.ll,
                  offSound: a.PK,
                };
                break;
              default:
                X = {
                  onSound: a.sH,
                  offSound: a.IZ,
                };
                break;
            }
            return X;
          }, "getHuddleSounds"),
          H = (0, s.Ay)("Plays the huddle recording on sound", (V, X) => {
            const q = (0, E.Yp)(),
              { onSound: oe, offSound: z } = G(q);
            oe &&
              z &&
              ((0, o.ds)(oe),
              (0, o.ds)(z),
              (0, o.ZH)(oe, {
                loop: !1,
              }));
          });
        H.meta = {
          name: "createThunk",
          key: "createThunkplayHuddleRecordingOnSound",
          description: "Plays the huddle recording on sound",
        };
        const F = (0, s.Ay)("Plays the huddle recording off sound", (V, X) => {
          const q = (0, E.Yp)(),
            { onSound: oe, offSound: z } = G(q);
          oe &&
            z &&
            ((0, o.ds)(oe),
            (0, o.ds)(z),
            (0, o.ZH)(z, {
              loop: !1,
            }));
        });
        F.meta = {
          name: "createThunk",
          key: "createThunkplayHuddleRecordingOffSound",
          description: "Plays the huddle recording off sound",
        };
      },
      4156857608: (W, A, e) => {
        "use strict";
        e.d(A, {
          a: () => m,
        });
        var t = e(1031947056),
          n = e(6533394955),
          s = e(4250409994),
          i = e(7434063642),
          d = e(8783285437),
          o = e(6758774099),
          a = e(1990810649),
          r = e(387328355),
          c = e(8872167513),
          u = e(2709531527),
          l = e(5795074931);
        const m = (0, t.Ay)(
          "Dispatch a reaction to the middleware and the current store to notify user has sent a reaction",
          (v, E, T) => {
            let { emoji: g, reactionType: I = a.o.Standard } = T;
            if (I === a.o.Sticker)
              v(
                (0, i.Kp)({
                  emoji: g,
                })
              ),
                (0, n.dispatchForClientStore)((0, s.M4)(g));
            else {
              (0, n.dispatchForClientStore)(
                (0, s.nU)({
                  emoji: g,
                  reactionType: I,
                })
              ),
                v(
                  (0, r._x)({
                    peerId: "self",
                    emoji: g,
                    isEmoji: !0,
                    reactionType: I,
                  })
                );
              const { huddleEventsTrace: y } = (0, c.A)().getAllTraceHandlers();
              y == null ||
                y.update({
                  name: u.p.REACTION,
                  type: u.G.ONCE,
                  tags: {
                    reactionType: I,
                  },
                });
            }
            const f = (0, l.WR)(E());
            f &&
              v(
                (0, o.U$)({
                  type: d.v.SEND_REACTION,
                  memberId: f,
                  timestampMs: Date.now(),
                  emoji: g,
                })
              );
          }
        );
        m.meta = {
          name: "createThunk",
          key: "createThunksendReaction",
          description:
            "Dispatch a reaction to the middleware and the current store to notify user has sent a reaction",
        };
      },
      1049642794: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => p,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(8571983633),
          i = e(1031947056),
          d = e(6533394955),
          o = e(8847766420),
          a = e(2778217221),
          r = e(4250409994),
          c = e(6694086724),
          u = e(5286203919),
          l = e(571104883),
          m = e(796111729),
          v = e(462591818),
          E = e(7434063642),
          T = e(6251210828),
          g = e(387328355),
          I = e(9365970888),
          f = e(3065433701),
          y = e(700984029);
        const M = (0, i.Ay)(
          "Enable or disable local microphone",
          (function () {
            var O = (0, t.coroutine)(function* (C, h, D) {
              const P = (0, d.getStateForClientStore)(),
                S = h(),
                b = (0, m.Ay)({
                  state: S,
                }),
                K = (0, I.Hc)(S);
              if (
                ((0, T.RT)(S) ||
                  C(
                    (0, E.G4)({
                      canShowMutedBanner: !0,
                    })
                  ),
                (0, l.y3)() ||
                  (yield (0, d.dispatchForClientStore)(
                    (0, y.e$)({
                      mediaResourceType: v.mT.MICROPHONE,
                    })
                  )),
                b.info(a.o7, `Set microphone to ${D}`),
                K && D)
              ) {
                b.warn(
                  a.o7,
                  "Microphone could not be set to enabled as access to the device was blocked"
                ),
                  (0, l.y3)()
                    ? C(
                        (0, f.CE)({
                          alert: f.vT.NoSystemAudio,
                        })
                      )
                    : C(
                        (0, f.CE)({
                          alert: f.vT.NoBrowserAudioPermission,
                        })
                      );
                return;
              }
              const { teamId: B } = (0, u.Qn)(P) || {};
              if (B && B !== (0, o.ZT)(S)) {
                (0, d.dispatchForTeamId)(B, M(D));
                return;
              }
              (0, s.A)(D) ||
                ((0, d.dispatchForClientStore)((0, r.I9)(D)),
                D &&
                  (0, u.wQ)(P) &&
                  C(
                    (0, c.e)({
                      clearOnEndedCallback: !0,
                      logContext: "huddle-set-self-microphone",
                    })
                  )),
                C(
                  (0, g.kT)({
                    id: "self",
                    isMicrophoneEnabled: D,
                  })
                );
            });
            return function (C, h, D) {
              return O.apply(this, arguments);
            };
          })()
        );
        M.meta = {
          name: "createThunk",
          key: "createThunksetSelfMicrophone",
          description: "Enable or disable local microphone",
        };
        const p = M;
      },
      8746998952: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => O,
        });
        var t = e(1031947056),
          n = e(6422693406),
          s = e(796111729),
          i = e(9190452268),
          d = e(1452921056),
          o = e(5319025363),
          a = e(6533394955),
          r = e(6470070112),
          c = e(5286203919),
          u = e(5933621899),
          l = e(9680914051),
          m = e(8330768070),
          v = e(6259241484),
          E = e(716227588),
          T = e(1655938719),
          g = e(5332875232),
          I = e(5881236351),
          f = e(9712681361),
          y = e(1328191530);
        const M = (0, t.Ay)(
          "Join/start huddle, but confirm with shouty rooster modal first",
          (C, h, D) => {
            let {
                channelId: P,
                threadTs: S,
                muted: b,
                callId: K,
                forceFocus: x,
                entryPoint: B,
                forceConfirmation: U,
                markTelemeter: R,
                isMultiDevice: G,
                isStandaloneHuddle: H,
              } = D,
              F = !1;
            if ((0, g.Rk)(h())) {
              const z = (0, a.getClientStoreInstance)().getState(),
                Ae = (0, c.J0)(z);
              F = P !== void 0 && Ae !== P;
            }
            const X = _(() => {
                var oe;
                R &&
                  (0, i.Cy)({
                    state: h(),
                  }).mark(l.qr),
                  (oe = C(
                    (0, d.A)({
                      channelId: P,
                      threadTs: S,
                      muted: b,
                      callId: K,
                      forceFocus: x,
                      entryPoint: B,
                      isMultiDevice: G,
                      isStandaloneHuddle: H,
                    })
                  )) === null ||
                    oe === void 0 ||
                    oe.catch((z) => {
                      (0, s.Ay)({
                        getState: h,
                      }).error("Could not start huddle", z);
                    });
              }, "onConfirm"),
              q = _(() => {
                F &&
                  P &&
                  C(
                    (0, y._)({
                      channelId: P,
                      handleJoin: X,
                    })
                  );
              }, "showHuddlesJoinPreview");
            if ((0, r.Qj)(h(), P, S) || U) {
              S
                ? C(
                    (0, T.iR)({
                      event: {
                        type: v.jo.HUDDLE_STARTED_FROM_THREAD,
                      },
                    })
                  ).then(() => {
                    (0, E.Hp)(h(), v.xu.LAUNCH_MODAL) ===
                    v.ze.HUDDLE_FROM_THREAD_EDUCATIONAL_MODAL
                      ? C(
                          (0, u.Wx)({
                            channelId: P ?? "",
                            onConfirm: X,
                          })
                        )
                      : F
                      ? q()
                      : X();
                  })
                : C(
                    (0, m.Oe)({
                      channelId: P ?? "",
                      onConfirm: X,
                    })
                  );
              return;
            }
            F ? q() : X();
          }
        );
        M.meta = {
          name: "createThunk",
          key: "createThunkstartHuddleWithShoutyRooster",
          description:
            "Join/start huddle, but confirm with shouty rooster modal first",
        };
        const p = (0, t.Ay)(
          "Join/start huddle, but confirm if already in another huddle",
          (C, h, D) => {
            const { channelId: P } = D,
              S = h(),
              b = (0, g.pL)(S),
              K = (0, a.getStateForClientStore)(),
              x = (0, c.hc)(K),
              B = (0, c.EG)(K),
              U = (0, c.$V)(K),
              R = (0, r.r5)(S, {
                channelId: P,
              });
            if ((C((0, o.z)()), x && P !== x && !U))
              return C(
                (0, m.Y6)({
                  prevChannelId: x,
                  nextChannelId: P ?? "",
                  onConfirm: () => {
                    C(
                      M({
                        ...D,
                        markTelemeter: !1,
                      })
                    );
                  },
                })
              );
            if (b && R) {
              C(
                (0, I.$Z)({
                  channelId: P ?? "",
                  onConfirm: (G) => {
                    let { isMultiDevice: H } = G;
                    return C(
                      M({
                        ...D,
                        markTelemeter: !1,
                        isMultiDevice: H,
                      })
                    );
                  },
                })
              );
              return;
            }
            return x && P === x && B === f.RJ.STARTED
              ? n.S.resolve()
              : C(
                  M({
                    ...D,
                    markTelemeter: !0,
                  })
                );
          }
        );
        p.meta = {
          name: "createThunk",
          key: "createThunkstartHuddleWithConfirmation",
          description:
            "Join/start huddle, but confirm if already in another huddle",
        };
        const O = p;
      },
      1452921056: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => Ce,
        });
        var t = e(9706240641),
          n = e(92886754);
        let s = null;
        const i = _(() => s, "getOpenChannelId"),
          d = _((Z) => {
            s = Z;
          }, "setOpenChannelId");
        var o = e(5824283093),
          a = e(2562405183),
          r = e(3051824855),
          c = e(825587348),
          u = e(8739505998),
          l = e(4481313819),
          m = e(1224315998),
          v = e(6968387112),
          E = e(735940183),
          T = e(3078708518),
          g = e(4761125736);
        const I = new E.Ay("huddles");
        function f(Z) {
          let { closeModal: $ } = Z;
          const N = (0, a.d4)(T.A),
            L =
              (0, a.d4)((J) => (0, g._Z)(J, "adoption_instant_slack")) ===
              "treatment";
          let w, k;
          if ((0, n.yh)())
            (w = I.t("Your browser does not support Huddles")),
              (k =
                N && L
                  ? I.rt(
                      "Unfortunately, Huddles aren\u2019t available in this browser. We recommend switching to <chrome-link>Chrome</chrome-link>.",
                      {},
                      (J) => {
                        let { text: ee } = J;
                        return o.createElement(
                          u.A,
                          {
                            href: "https://www.google.com/chrome",
                          },
                          ee
                        );
                      }
                    )
                  : I.rt(
                      "Unfortunately, Huddles aren\u2019t available in this browser. We recommend downloading the <desktop-link>Slack desktop app</desktop-link>, or you can switch to <chrome-link>Chrome</chrome-link>.",
                      {},
                      (J) => {
                        let { tag: ee, text: ne } = J;
                        switch (ee) {
                          case "desktop-link":
                            return o.createElement(
                              u.A,
                              {
                                href: `https://${(0, v.qF)()}/downloads`,
                              },
                              ne
                            );
                          case "chrome-link":
                            return o.createElement(
                              u.A,
                              {
                                href: "https://www.google.com/chrome",
                              },
                              ne
                            );
                          default:
                            return null;
                        }
                      }
                    ));
          else if ((0, n.WT)())
            (w = I.t("Please update Slack")),
              (k = I.t(
                "Unfortunately, this version of Slack is out of date. Update your Slack app for access to Huddles \u2014 as well as bug fixes and an all-around smoother experience."
              ));
          else return null;
          return o.createElement(
            l.A,
            {
              eventId: m.EventId.HUDDLES_ALERT_SHOWN,
              uiComponentName: m.UiComponentName.HUDDLES_UNSUPPORTED_ALERRT,
              clogImpression: !0,
            },
            o.createElement(
              c.A,
              {
                onClose: $,
                onSubmit: $,
                showCancelButton: !1,
                showSubmitButton: !0,
                title: w,
                submitButtonText: I.t("OK"),
              },
              k
            )
          );
        }
        _(f, "HuddleUnsupportedAlert"),
          (f.displayName = "HuddleUnsupportedAlert");
        const y = (0, r.e)(f);
        var M = e(6422693406),
          p = e(1031947056),
          O = e(5881236351),
          C = e(5378147939),
          h = e(6758774099),
          D = e(8847766420),
          P = e(1289024643),
          S = e(7304871158);
        const b = (0, p.Ay)("End active call", (Z, $) => {
          const N = (0, P.J2)($());
          if (N) {
            const L = (0, P.Ms)(N);
            L && !L.isClosed() && (0, S.R)(L, "endActiveCall");
          }
        });
        b.meta = {
          name: "createThunk",
          key: "createThunkmaybeEndActiveCall",
          description: "End active call",
        };
        var K = e(9640070512),
          x = e(2527782504),
          B = e(2832209848),
          U = e(7843142872),
          R = e(6533394955),
          G = e(9548972574),
          H = e(8935621861),
          F = e(5332875232),
          V = e(5795074931),
          X = e(2791814261),
          q = e(5286203919),
          oe = e(9712681361),
          z = e(7723800688),
          Ae = e(56548687),
          ae = e(6470070112),
          de = e(5470425448),
          ve = e(5071086688),
          Se = e(4250409994),
          Ee = e(8872167513);
        const be = (0, p.Ay)(
          "Start huddle",
          (function () {
            var Z = (0, t.coroutine)(function* ($, N, L) {
              let {
                channelId: w,
                threadTs: k,
                muted: J,
                callId: ee,
                forceFocus: ne,
                entryPoint: pe = oe.su.UNKNOWN,
                isMultiDevice: Me,
                isStandaloneHuddle: ke,
              } = L;
              (0, R.dispatchForClientStore)((0, Se.t2)(!1));
              const ge = N();
              if (
                ($(b()),
                $((0, h.Lm)(!1)),
                $((0, h.T3)()),
                (0, n.WT)() || (0, n.yh)())
              )
                return $(y()), M.S.resolve();
              $(
                (0, U.g6)({
                  experimentHuddlesDiscoveryCallsGroupTreatment: (0, F.Ms)(ge),
                  interactionType: B.X8.Click,
                })
              ),
                i() !== w &&
                  $(
                    (0, O.Es)({
                      channelId: w ?? "",
                      open: !1,
                    })
                  );
              const fe = (0, X.L)(ge),
                re = (0, D.ZT)(ge);
              (0, Ee.A)().initializeTraces({
                teamId: re,
                isTinySpeck: fe,
              });
              const le = !!(0, q.gj)((0, R.getStateForClientStore)()),
                Re = yield H.A.getInstance().getNearestChimeMediaRegion(re),
                { ttiTrace: ye, huddleEventsTrace: Te } = (0,
                Ee.A)().getAllTraceHandlers();
              ye.addTTIMetaTags({
                entryPoint: pe,
                preferredMediaRegion: Re,
                isPrejoin: le,
                isCreate: !(0, G.Yw)(ge, w),
              }),
                Te == null || Te.recordEntryPoint(pe),
                ve.A.publish({
                  type: de.lx.PreferredMediaRegion,
                  update: {
                    mediaRegionPreferred: Re,
                  },
                });
              const De = (0, C.A)(),
                Ue = (0, V.WR)(ge);
              return De.start(re, w ?? "", J, ee, k, Me, ke).then(
                (0, t.coroutine)(function* () {
                  const Ke = (0, R.getStateForClientStore)(),
                    Ze = (0, ae.$t)(ge, {
                      huddleId: ee,
                    }),
                    Q = (0, ae.kn)(Ke),
                    ie = (0, ae.UE)(Ke);
                  (0, Ae.e)({
                    state: ge,
                  }).track(m.EventId.CANVAS_EVENT, {
                    contexts: {
                      ui_context: {
                        entry_point: pe,
                        ui_properties: {
                          element_name: z.Hi.CANVAS_JOIN,
                        },
                        action: m.UiAction.TOGGLE,
                      },
                      calls: ie,
                    },
                    ...Ze,
                    ...Q,
                  }),
                    $(
                      (0, K.H)({
                        focusKey: x.Ay.HUDDLE_SIDEBAR_FOOTER,
                        forceFocus: ne,
                      })
                    ),
                    $((0, O.xb)(!1)),
                    ee &&
                      $(
                        (0, P.r_)({
                          callId: ee,
                          userId: Ue,
                        })
                      );
                })
              );
            });
            return function ($, N, L) {
              return Z.apply(this, arguments);
            };
          })()
        );
        be.meta = {
          name: "createThunk",
          key: "createThunkstartHuddle",
          description: "Start huddle",
        };
        const Ce = be;
      },
      5319025363: (W, A, e) => {
        "use strict";
        e.d(A, {
          z: () => i,
        });
        var t = e(1031947056),
          n = e(7022928841),
          s = e(8664881451);
        const i = (0, t.Ay)("Stop the huddle invite sound", (d, o) => {
          (0, s.ds)((0, n.qF)(o()), {
            logFailure: !1,
          });
        });
        i.meta = {
          name: "createThunk",
          key: "createThunkstopHuddleInviteSound",
          description: "Stop the huddle invite sound",
        };
      },
      6694086724: (W, A, e) => {
        "use strict";
        e.d(A, {
          e: () => u,
        });
        var t = e(1031947056),
          n = e(796111729),
          s = e(4869203191),
          i = e(4250409994),
          d = e(6533394955),
          o = e(5332875232),
          a = e(5286203919),
          r = e(7434063642),
          c = e(6251210828);
        const u = (0, t.Ay)(
          "Stops huddle lounge music from playing",
          (l, m, v) => {
            let {
              clearOnEndedCallback: E,
              logContext: T,
              isStoppedByUser: g,
            } = v;
            const I = m(),
              f = (0, n.Ay)({
                state: I,
              }),
              y = (0, o.CI)(I),
              M = (0, c.jr)(I),
              p = (0, c.K8)(I),
              O = (0, d.getStateForClientStore)(),
              C = (0, a.E9)(O);
            s.Ay.getInstance().stopMusic({
              clearOnEndedCallback: E,
              logger: f,
              logContext: T,
            }),
              (0, d.dispatchForClientStore)((0, i.Ag)(!1)),
              g &&
                C &&
                l(
                  (0, r.sH)({
                    huddleId: C,
                    hasUserStoppedLoungeMusic: g,
                  })
                ),
              y &&
                (g || p) &&
                M &&
                l(
                  (0, r.ju)({
                    stopMusic: !0,
                  })
                );
          }
        );
        u.meta = {
          name: "createThunk",
          key: "createThunkstopHuddleLoungeMusic",
          description: "Stops huddle lounge music from playing",
        };
      },
      6134475965: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => u,
        });
        var t = e(1031947056),
          n = e(5378147939),
          s = e(6533394955),
          i = e(6694086724),
          d = e(6855917924),
          o = e(5332875232),
          a = e(4250409994),
          r = e(7366481123);
        const c = (0, t.Ay)("Stop the active huddle", (l, m) => {
          const v = m(),
            E = (0, o.Eg)(v);
          return (
            (0, s.dispatchForClientStore)((0, a.yi)({})),
            l((0, d.A)()),
            l(
              (0, i.e)({
                clearOnEndedCallback: !0,
                logContext: "stop-huddle-thunk",
              })
            ),
            E && (0, s.dispatchForClientStore)((0, a.JM)()),
            l((0, r.LL)(r.vT.HiddenUserJoinedHuddle)),
            (0, n.A)().stop()
          );
        });
        c.meta = {
          name: "createThunk",
          key: "createThunkstopHuddle",
          description: "Stop the active huddle",
        };
        const u = c;
      },
      6310192986: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => $,
          vP: () => be,
        });
        var t = e(6313685253),
          n = e(9137897911),
          s = e(3398586081),
          i = e(716022512),
          d = e(6696292586),
          o = e(4518410378),
          a = e(9548972574),
          r = e(8233775522),
          c = e(6470070112),
          u = e(3245843483),
          l = e(5286203919),
          m = e(4988306802),
          v = e(9012396182),
          E = e(9101533895),
          T = e(6533394955),
          g = e(2767624118),
          I = e(6664301844),
          f = e(7429662208),
          y = e(387328355),
          M = e(1990810649),
          p = e(9365970888),
          O = e(6117529990),
          C = e(8736071954),
          h = e(610288365),
          D = e(5332875232),
          P = e(6251210828),
          S = e(2465464861),
          b = e(571104883),
          K = e(9195837907),
          x = e(1473609332),
          B = e(3193155968),
          U = e(6839188756);
        function R(N) {
          return N
            ? (0, U.tc)(N)
              ? "free"
              : (0, U.r7)(N)
              ? "enterprise"
              : "pro"
            : "unknown";
        }
        _(R, "getTeamTier");
        var G = e(3677514771),
          H = e(4724591729),
          F = e(4761125736),
          V = e(8634352961),
          X = e(415910655),
          q = e(5795074931),
          oe = e(7366481123);
        const z = navigator.hardwareConcurrency,
          Ae = (0, b.zS)(),
          ae = (0, H.b3)(),
          de = (0, H.$i)(),
          ve = _(
            (N) =>
              (0, t.A)(
                N,
                (L, w, k) => {
                  if (k === B.N2) return L;
                  const J = k.split(/-|_/).slice(0, -1).join("-"),
                    ee = (0, n.A)(`windows-${J}-count`);
                  return L[ee] ? (L[ee] += 1) : (L[ee] = 1), L;
                },
                {}
              ),
            "countWindowsByType"
          ),
          Se = _((N) => {
            if (!N) return "";
            let L = N;
            const w = /Default -/g;
            L = N.replace(w, "");
            const k = / *?\([^)]*?\) *?/g;
            return (L = L.replace(k, "")), (L = L.trim()), L;
          }, "scrubDeviceLabelForReporting");
        let Ee;
        const be = _(() => Ee, "getMostRecentStableTags"),
          Ce = (0, s.A)(
            (N, L) => {
              let { teamState: w, clientState: k } = N;
              var J;
              const ee = (0, l.E9)(k),
                ne = (0, l.hc)(k),
                pe = (0, O.OV)(w),
                Me = (0, D.MJ)(w),
                ke = (0, D.nC)(w),
                ge = (0, D.ZI)(w),
                fe = (0, D.DP)(w),
                re = I.zF.sdkVersion,
                le = (0, c.R8)(w),
                Re = (0, D.Qq)(w),
                ye = (0, l.sQ)(k),
                Te = (0, D.Jf)(w),
                De = (0, D.bb)(w),
                Ue = (0, D.eB)(w),
                Ke = (0, F._Z)(w, "huddles_filter_worker", !1),
                Ze = (0, l.l4)(k),
                Q = (0, G.H7)(w),
                ie = R(Q);
              var Ve;
              const xe =
                  (Ve =
                    (J = (0, v.getBootedWorkspaces)(k)) === null || J === void 0
                      ? void 0
                      : J.length) !== null && Ve !== void 0
                    ? Ve
                    : 0,
                je = (0, E.D5)(w),
                Fe = (je == null ? void 0 : je.length) || 0,
                He = (0, X.s2)() || {},
                Oe = {
                  teamId: Ze,
                  huddleId: ee,
                  huddleChannelId: ne,
                  workspaceCount: xe,
                  chimeSdkVersion: re,
                  teamTier: ie,
                  isPreWarmed: Re,
                  isPrejoin: ye,
                  isHuddlesIncreaseMaxParticipantsEnabled: ke,
                  isTranscriptAllowed: le,
                  isChimeSdkExpEnabled: pe,
                  isHuddlesLaterEnabled: Me,
                  isVideoQualityIncreaseEnabled: Te,
                  isDevicesExpEnabled: ge,
                  isRtmFilteringEnabled: fe,
                  osVersion: Ae,
                  envIsJsPath: ae,
                  envIsQa: de,
                  xwsChannelCount: Fe,
                  filterWorkerGroup: Ke,
                  isConnectionHealthPolicyExperimentEnabled: De,
                  isDisconnectObserverEnabled: Ue,
                  ...He,
                };
              return (Ee = Oe), Oe;
            },
            (N, L) => L
          ),
          $ = _((N) => {
            let { state: L, appMetrics: w } = N;
            var k, J, ee, ne, pe, Me, ke, ge;
            const fe = (0, T.getClientStoreInstance)().getState(),
              re = (0, l.cN)(fe),
              le = (0, l.E9)(fe),
              Re = `${re}${le ?? ""}`,
              ye = Ce(
                {
                  teamState: L,
                  clientState: fe,
                },
                Re
              ),
              {
                huddleId: Te,
                huddleChannelId: De,
                workspaceCount: Ue,
                isRtmFilteringEnabled: Ke,
              } = ye,
              Ze = {},
              Q = (0, f.e6)(L),
              ie = Q
                ? (0, f.Le)(L, {
                    tab: Q,
                  })
                : {},
              { primary: Ve, secondary: xe, sidebar: je } = ie || {};
            Object.assign(Ze, {
              viewPrimary: Ve == null ? void 0 : Ve.viewType,
              viewSecondary: xe == null ? void 0 : xe.viewType,
              viewSidebar: je == null ? void 0 : je.viewType,
              viewTab: Q,
            });
            const Fe = (0, p.Hc)(L),
              He = (0, p.AZ)(L),
              Oe = (0, p.IO)(L),
              Ye = (0, p.JM)(L),
              at = (0, p.SR)(L),
              _t = (0, p.f3)(L),
              pt = (0, p.aA)(L),
              Qe = {
                microphoneIsBlocked: Fe,
                microphoneIsAvailable: He,
                cameraIsBlocked: at,
                cameraIsAvailable: _t,
                isMicrophoneBluetooth: Oe,
                isSpeakerBluetooth: Ye,
                isMicrophoneAndSpeakerOnSameDevice: pt,
              },
              ct = (0, r.fq)(L),
              Pt = {};
            if (ct) {
              const $e = Object.keys(ct);
              Object.assign(Pt, {
                windowsTotalOpen: $e.length,
                windowsOpenTypes: $e.length ? $e.join(" ") : "",
                windowsTypeWithFocus: (0, i.A)(ct, (mt) => !!mt.isFocused),
                ...ve(ct),
              });
            }
            const zt = (0, c.Fm)(L),
              an = zt && zt.type === oe.vT.ConnectionUnstable,
              Qt = (0, S._R)(L),
              tn = Qt !== null,
              Ht = {
                isTroubleshootingPanelOpen: tn,
                isAudioOnlyModeEnabled: (0, l.Rv)(fe),
                troubleshootingPanelTab: tn ? (0, S.Eh)(L) : null,
                troubleshootingPillPage: (0, S.Wg)(L),
                troubleshootingEntryPointWas: (0, S.qV)(L),
                troubleshootingSessionId: tn
                  ? `${(0, q.WR)(L)}${Te}:${(0, S.$i)(L)}`
                  : null,
                troubleshootingBannerInView: an,
                troubleshootingSource: Qt,
              },
              Kt = (0, a.UK)(L),
              qt =
                (k = (0, p.ql)(L, C.lW.Camera)) === null || k === void 0
                  ? void 0
                  : k.label,
              Tn =
                (J = (0, p.ql)(L, C.lW.Microphone)) === null || J === void 0
                  ? void 0
                  : J.label,
              Mt =
                (ee = (0, p.ql)(L, C.Q4)) === null || ee === void 0
                  ? void 0
                  : ee.label,
              {
                isScreenshareEnabled: Jt,
                isHostDrawEnabled: dn,
                isHostDrawRendererActive: rn,
                isCameraEnabled: gn,
                isMicrophoneEnabled: Zt,
                isConnected: Vt,
              } = (0, y.Ng)(L),
              Sn = !!Jt,
              ze = !!gn,
              Ot = (0, y.fU)(L, {
                id: "self",
              }),
              fn = (0, y.MY)(L),
              ln = fn === "self",
              it = Kt.filter(($e) => $e.isCameraEnabled).length,
              Tt = (0, g.H)(De),
              Ct = (0, x.Bh)(),
              Rt =
                ze &&
                (Ct == null || (ne = Ct.video) === null || ne === void 0
                  ? void 0
                  : ne.effect) === K.t.Blur,
              Yt = !!(
                !(Ct == null || (pe = Ct.audio) === null || pe === void 0) &&
                pe.enableNoiseSuppression
              ),
              bn = Yt && ln,
              Wn =
                ze &&
                (Ct == null || (Me = Ct.video) === null || Me === void 0
                  ? void 0
                  : Me.effect) === K.t.Background &&
                (Ct == null || (ke = Ct.video) === null || ke === void 0
                  ? void 0
                  : ke.effectBgKey) !== void 0,
              hn = !!fn,
              Bn = !!it,
              zn = (0, y.nD)(L).length,
              is = !!zn,
              ss = zn + (Sn ? 1 : 0),
              jn = ss === 2,
              Yn = is || Sn,
              Qn = (0, S.gA)(L),
              es = (0, m.VN)(L),
              Et = (0, m.M3)(L),
              gt = hn
                ? (ge = Kt.find(($e) => $e.id === fn)) === null || ge === void 0
                  ? void 0
                  : ge.userId
                : void 0,
              Ft =
                (0, P.dj)(L, {
                  huddleId: Te,
                }) || !1,
              nn = o.J.document.visibilityState === "visible",
              Dn = {
                isBackgroundBlurActive: Rt,
                isNoiseSuppressionEnabled: Yt,
                isNoiseSuppressionActive: bn,
                isCustomVideoBackgroundActive: Wn,
                isClosedCaptionsEnabled: es,
                isSideBySideCaptionsEnabled: Et,
              },
              bt = Ke ? (0, V.zT)() : void 0,
              In = Ke ? (0, V.kB)() : void 0,
              xn = (0, V.oB)(),
              Nt = {
                callId: le,
                isMicrophoneEnabled: Zt,
                isActiveSpeaker: ln,
                isSomeoneSpeaking: hn,
                isSomeoneSharingScreen: Yn,
                isVideoEnabledForSomeone: Qn,
                isSharingScreen: Sn,
                isHostDrawEnabled: dn,
                isHostDrawActive: rn,
                isSelfVideoEnabled: ze,
                isPeerVideoEnabled: Bn,
                isHuddleWindowVisible: Tt,
                selectedCamera: Se(qt),
                selectedMicrophone: Se(Tn),
                selectedSpeakers: Se(Mt),
                activeSpeakerUserId: gt,
                isPeerSharingScreen: is,
                isDualScreenshareActive: jn,
                cpuCount: z,
                remotePeerCount: Kt.length,
                remotePeersWithVideoCount: it,
                peersScreensharingCount: zn,
                activeScreenshareCount: ss,
                workspaceCount: Ue,
                huddleStartTimestamp: re,
                isDisconnected: Vt === !1,
                isMainWindowVisible: nn,
                rtmPercentSkipped: bt,
                rtmTopAllowedTypes: In,
                rtmRatePerSecond: xn,
                isHuddleSummaryActive: Ft,
              };
            let At = {};
            if (w) {
              const {
                  cpu: $e,
                  memory: mt,
                  gpu: Xt,
                  thermalState: _n,
                  speedLimit: mn,
                } = w,
                Fn = (0, d.A)($e) ? Math.round($e * z) : void 0,
                Kn = (0, d.A)(Xt) ? Math.round(Xt * z) : void 0,
                { useHwAcceleration: dt } = (0, u.oQe)("settings") || {};
              At = {
                cpuUseRelative: $e ? Math.round($e) : void 0,
                cpuUse: Fn,
                gpuUse: Kn,
                memoryUse: (mt == null ? void 0 : mt.workingSetSize) || void 0,
                isHardwareAccelerationEnabled: dt,
                osThermalState: _n,
                osSpeedLimit: mn,
                osIsThrottlingCpu: mn && mn !== 0 ? mn < 30 : void 0,
              };
            }
            let te = {
              huddleViewMode: (0, P.HH)(L, {
                huddleId: Te,
              }),
            };
            if (Tt) {
              var _e;
              const $e = (0, P.Ec)(L, {
                  huddleId: Te,
                }),
                mt = (0, P.SC)(L, {
                  huddleId: Te,
                  surface: $e,
                });
              te = {
                ...te,
                huddleWindowSurface: $e,
                huddleWindowFocusedContentType:
                  (Ot == null || (_e = Ot.item) === null || _e === void 0
                    ? void 0
                    : _e.type) || M.cM.None,
                huddleWindowIsFullscreen: (0, P.g0)(L),
                huddleWindowIsSelfDrawingEnabled: (0, P.ny)(L),
                huddleWindowWindowHeight: mt == null ? void 0 : mt.height,
                huddleWindowWindowWidth: mt == null ? void 0 : mt.width,
              };
            }
            const Ie = (0, h.Ay)(),
              Ne = {
                batteryIsUsing: Ie.isUsingBatteryPower(),
                batteryPercentRemaining: Ie.getLevel(),
              };
            return {
              ...Nt,
              ...Dn,
              ...At,
              ...te,
              ...Ze,
              ...Qe,
              ...Ne,
              ...Ht,
              ...Pt,
              ...ye,
            };
          }, "getHuddleStateSnapshot");
      },
      4742719639: (W, A, e) => {
        "use strict";
        e.d(A, {
          o: () => d,
        });
        var t = e(2384831516),
          n = e(9548972574),
          s = e(8847766420),
          i = e(6741408957);
        const d = (0, t.Mz)((o, a) => {
          const r = (0, n.dy)(o);
          if (r) return r;
          const c = (0, n.Yw)(o, a);
          if (!c) return null;
          const u = (0, s.ZT)(o);
          return c.name === void 0
            ? ((0, i.Ss)().fetchObjectWithId(u, c.id), null)
            : ((0, i.GD)().maybeRefetch(u, c.id), c.name);
        });
        d.meta = {
          name: "createSelector",
          key: "createSelectorgetHuddleTopic",
          description: (o, a) => {
            const r = (0, n.dy)(o);
            if (r) return r;
            const c = (0, n.Yw)(o, a);
            if (!c) return null;
            const u = (0, s.ZT)(o);
            return c.name === void 0
              ? ((0, i.Ss)().fetchObjectWithId(u, c.id), null)
              : ((0, i.GD)().maybeRefetch(u, c.id), c.name);
          },
        };
      },
      1921074781: (W, A, e) => {
        "use strict";
        e.d(A, {
          F: () => a,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(8571983633),
          i = e(6422693406),
          d = e(796111729),
          o = e(2778217221);
        class a {
          static getInstance() {
            if (!a.wakeLockManager)
              try {
                a.wakeLockManager = new a();
              } catch (c) {
                (0, d.Wo)({
                  label: o.o7,
                }).warn("Error instantiating WakeLockManager,", c.message);
              }
            return a.wakeLockManager;
          }
          static doesInstanceExist() {
            return !(0, s.A)(a.wakeLockManager);
          }
          request() {
            var c = this;
            return (0, t.coroutine)(function* () {
              if (c.wakeLockSentinel) return i.S.resolve();
              (c.wakeLockSentinel = yield c.wakeLock
                .request("screen")
                .catch(
                  (u) => (
                    c.logger.warn("WakeLock acquire failed", u.message), null
                  )
                )),
                c.addHandlers();
            })();
          }
          release() {
            var c = this;
            return (0, t.coroutine)(function* () {
              if (!c.wakeLockSentinel) return i.S.resolve();
              (c.shouldRemoveVisibilityHandler = !0),
                yield c.wakeLockSentinel.release(),
                c.logger.info("WakeLock released");
            })();
          }
          addHandlers() {
            this.wakeLockSentinel &&
              (this.wakeLockSentinel.addEventListener(
                "release",
                this.handleWakeLockReleased
              ),
              document.addEventListener(
                "visibilitychange",
                this.handleDocumentVisibilityChange
              ));
          }
          cleanupHandlers() {
            this.wakeLockSentinel &&
              (this.wakeLockSentinel.removeEventListener(
                "release",
                this.handleWakeLockReleased
              ),
              (this.wakeLockSentinel = null),
              this.shouldRemoveVisibilityHandler &&
                (document.removeEventListener(
                  "visibilitychange",
                  this.handleDocumentVisibilityChange
                ),
                (this.shouldRemoveVisibilityHandler = !1)));
          }
          handleWakeLockReleased() {
            var c = this;
            return (0, t.coroutine)(function* () {
              c.logger.info("WakeLock released by browser"),
                c.cleanupHandlers();
            })();
          }
          handleDocumentVisibilityChange() {
            var c = this;
            return (0, t.coroutine)(function* () {
              document.visibilityState === "visible" && c.request();
            })();
          }
          constructor() {
            if (
              ((this.logger = (0, d.Wo)({
                label: o.o7,
              })),
              (this.shouldRemoveVisibilityHandler = !1),
              !navigator.wakeLock)
            )
              throw Error("navigator.wakeLock undefined");
            (this.wakeLock = navigator.wakeLock),
              (this.handleDocumentVisibilityChange =
                this.handleDocumentVisibilityChange.bind(this)),
              (this.handleWakeLockReleased =
                this.handleWakeLockReleased.bind(this));
          }
        }
        _(a, "WakeLockManager");
      },
      8478954380: (W, A, e) => {
        "use strict";
        e.d(A, {
          Li: () => v,
          ML: () => d,
          Rt: () => a,
          _6: () => m,
          aS: () => r,
          al: () => o,
          bW: () => u,
          it: () => l,
          qO: () => c,
        });
        var t = e(2140362605),
          n = e(1031947056),
          s = e(5071086688),
          i = e(5470425448);
        const d = (0, t.Ay)(
          "Update the state of the active tab in the huddle troubleshooting panel"
        );
        d.meta = {
          name: "createAction",
          key: "createActionupdateTroubleshootingActiveAccordionViewTrace",
          description:
            "Update the state of the active tab in the huddle troubleshooting panel",
        };
        const o = (0, t.Ay)(
          "Makes troubleshoot panel V2 visible in source view or clears it"
        );
        o.meta = {
          name: "createAction",
          key: "createActionsetTroubleshootingSource",
          description:
            "Makes troubleshoot panel V2 visible in source view or clears it",
        };
        const a = (0, n.Ay)("Set the screen sharing of a peer.", (E, T, g) => {
          s.A.publish({
            type: i.lx.TroubleshootingEntryPoint,
            update: (g == null ? void 0 : g.entryPoint) || null,
          }),
            E(o(g));
        });
        a.meta = {
          name: "createThunk",
          key: "createThunksetTroubleshootingSourceWithTrace",
          description: "Set the screen sharing of a peer.",
        };
        const r = (0, t.Ay)("Sets active pill page for tracing.");
        r.meta = {
          name: "createAction",
          key: "createActionsetTroubleshootingPillPageTrace",
          description: "Sets active pill page for tracing.",
        };
        const c = (0, t.Ay)("Update stable metrics state");
        c.meta = {
          name: "createAction",
          key: "createActionupdateStableMetrics",
          description: "Update stable metrics state",
        };
        const u = (0, t.Ay)("Update unstable metrics and warnings state");
        u.meta = {
          name: "createAction",
          key: "createActionupdateUnstableMetricsAndWarnings",
          description: "Update unstable metrics and warnings state",
        };
        const l = (0, t.Ay)("Update stable warnings state");
        l.meta = {
          name: "createAction",
          key: "createActionupdateStableWarnings",
          description: "Update stable warnings state",
        };
        const m = (0, t.Ay)("Update stable alert state");
        m.meta = {
          name: "createAction",
          key: "createActionupdateStableAlerts",
          description: "Update stable alert state",
        };
        const v = (0, t.Ay)("Update unstable alert state");
        v.meta = {
          name: "createAction",
          key: "createActionupdateUnstableAlerts",
          description: "Update unstable alert state",
        };
      },
      2465464861: (W, A, e) => {
        "use strict";
        e.d(A, {
          $i: () => u,
          Eh: () => a,
          FP: () => I,
          Ku: () => y,
          Wf: () => g,
          Wg: () => c,
          Z8: () => o,
          _R: () => r,
          cB: () => E,
          gA: () => M,
          h: () => T,
          m: () => f,
          qV: () => l,
        });
        var t = e(8161242485),
          n = e(2689960678),
          s = e(6790819894),
          i = e(7091646278),
          d = e(387328355);
        const o = 3,
          a = (0, t.Ay)(
            (p) => p.huddleTroubleshooting.view.activeAccordionView
          );
        a.meta = {
          name: "createSelector",
          key: "createSelectorgetTroubleshootingPanelActiveAccordionView",
          description: (p) => p.huddleTroubleshooting.view.activeAccordionView,
        };
        const r = (0, t.Ay)((p) => p.huddleTroubleshooting.view.source);
        r.meta = {
          name: "createSelector",
          key: "createSelectorgetTroubleshootingPanelSource",
          description: (p) => p.huddleTroubleshooting.view.source,
        };
        const c = (0, t.Ay)((p) => p.huddleTroubleshooting.view.activePillPage);
        c.meta = {
          name: "createSelector",
          key: "createSelectorgetTroubleshootingPillPageTrace",
          description: (p) => p.huddleTroubleshooting.view.activePillPage,
        };
        const u = (0, t.Ay)((p) =>
          p.huddleTroubleshooting.view.source
            ? p.huddleTroubleshooting.view.openCounter
            : -1
        );
        u.meta = {
          name: "createSelector",
          key: "createSelectorgetTroubleshootingSessionCounterIdTrace",
          description: (p) =>
            p.huddleTroubleshooting.view.source
              ? p.huddleTroubleshooting.view.openCounter
              : -1,
        };
        const l = (0, t.Ay)((p) => p.huddleTroubleshooting.view.entryPoint);
        l.meta = {
          name: "createSelector",
          key: "createSelectorgetTroubleshootingEntryPointTrace",
          description: (p) => p.huddleTroubleshooting.view.entryPoint,
        };
        const m = (0, t.Ay)(
          (p) => p.huddleTroubleshooting.view.alertCount >= o
        );
        m.meta = {
          name: "createSelector",
          key: "createSelectorshouldDisplaySupportLink",
          description: (p) => p.huddleTroubleshooting.view.alertCount >= o,
        };
        const v = (0, t.Ay)((p) => p.huddleTroubleshooting.metrics.stable);
        v.meta = {
          name: "createSelector",
          key: "createSelectorgetStableMetrics",
          description: (p) => p.huddleTroubleshooting.metrics.stable,
        };
        const E = (0, t.Ay)((p) => p.huddleTroubleshooting.metrics.unstable);
        E.meta = {
          name: "createSelector",
          key: "createSelectorgetUnstableMetrics",
          description: (p) => p.huddleTroubleshooting.metrics.unstable,
        };
        const T = (0, t.Ay)((p) => p.huddleTroubleshooting.warnings.stable);
        T.meta = {
          name: "createSelector",
          key: "createSelectorgetStableWarnings",
          description: (p) => p.huddleTroubleshooting.warnings.stable,
        };
        const g = (0, t.Ay)((p) => p.huddleTroubleshooting.warnings.unstable);
        g.meta = {
          name: "createSelector",
          key: "createSelectorgetUnstableWarnings",
          description: (p) => p.huddleTroubleshooting.warnings.unstable,
        };
        const I = (0, t.Ay)((p) => p.huddleTroubleshooting.alerts.stable);
        I.meta = {
          name: "createSelector",
          key: "createSelectorgetStableAlerts",
          description: (p) => p.huddleTroubleshooting.alerts.stable,
        };
        const f = (0, t.Ay)((p) => p.huddleTroubleshooting.alerts.unstable);
        f.meta = {
          name: "createSelector",
          key: "createSelectorgetUnstableAlerts",
          description: (p) => p.huddleTroubleshooting.alerts.unstable,
        };
        const y = (0, s.F)(
            (p) => I(p) || n.t0,
            (p) => f(p) || n.t0,
            (p) => T(p) || n.t0,
            (p, O, C) => {
              const {
                  isMicrophoneBlocked: h,
                  isCameraBlocked: D,
                  isDisconnected: P,
                  isMicrophoneNotSendingAudio: S,
                } = p,
                {
                  isAudioQualityPoor: b,
                  isCpuCompetitionPoor: K,
                  isNetworkQualityPoor: x,
                  networkQualityHealth: B,
                } = O,
                { isCameraProbablyIphone: U, isSpeakerBluetooth: R } = C,
                G = !!(b && x),
                H = !!(b && K),
                F = !!((R && b) || D || h || S || U),
                V = !!(G || H || D || h || S || P),
                X = b || P ? i.bz.Bad : B;
              return {
                shouldSurfaceGeneralWarning: V,
                shouldSurfaceSystemWarning: H,
                shouldSurfaceDevicesWarning: F,
                aggregateNetworkHealth: X,
              };
            }
          ),
          M = (0, s.F)(d.Ng, d.nt, (p, O) => {
            const { isCameraEnabled: C } = p;
            return !!(C || O);
          });
      },
      7091646278: (W, A, e) => {
        "use strict";
        e.d(A, {
          ML: () => n,
          bz: () => s,
          pK: () => t,
        });
        var t;
        (function (i) {
          (i.Network = "network"),
            (i.System = "system"),
            (i.Devices = "devices"),
            (i.Overview = "overview");
        })(t || (t = {}));
        var n;
        (function (i) {
          (i.EnlargedWindow = "EnlargedWindow"),
            (i.CompactWindow = "CompactWindow"),
            (i.MiniPlayer = "MiniPlayer");
        })(n || (n = {}));
        var s;
        (function (i) {
          (i.Good = "good"), (i.Warn = "warn"), (i.Bad = "bad");
        })(s || (s = {}));
      },
      9943020700: (W, A, e) => {
        "use strict";
        e.d(A, {
          $W: () => u,
          $o: () => I,
          Am: () => g,
          At: () => L,
          C2: () => D,
          CO: () => v,
          Cj: () => f,
          DB: () => be,
          Dx: () => P,
          EX: () => q,
          FV: () => G,
          Fm: () => E,
          GI: () => l,
          IC: () => U,
          IE: () => Ee,
          I_: () => o,
          KF: () => Ce,
          KJ: () => de,
          Lu: () => ve,
          OG: () => T,
          Ot: () => $,
          Qk: () => s,
          Qq: () => k,
          RL: () => x,
          TD: () => N,
          TW: () => F,
          To: () => S,
          Tt: () => z,
          U_: () => y,
          Uo: () => Ae,
          VV: () => a,
          XB: () => B,
          ZE: () => K,
          _L: () => C,
          _R: () => V,
          ab: () => h,
          av: () => w,
          aw: () => ee,
          d0: () => oe,
          fg: () => X,
          g: () => M,
          iI: () => J,
          k$: () => m,
          kJ: () => ne,
          k_: () => b,
          qD: () => Z,
          rL: () => r,
          se: () => pe,
          tK: () => n,
          w$: () => R,
          wW: () => ae,
          w_: () => H,
          yw: () => c,
          zD: () => O,
          zl: () => Se,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Remove a list");
        n.meta = {
          name: "createAction",
          key: "createActionremoveList",
          description: "Remove a list",
        };
        const s = (0, t.Ay)("trigger animation for view");
        s.meta = {
          name: "createAction",
          key: "createActiontriggerAnimationForViewId",
          description: "trigger animation for view",
        };
        const i = (0, t.Ay)("Add / update a list column");
        i.meta = {
          name: "createAction",
          key: "createActionupsertColumn",
          description: "Add / update a list column",
        };
        const d = (0, t.Ay)("Remove a list column");
        d.meta = {
          name: "createAction",
          key: "createActionremoveColumn",
          description: "Remove a list column",
        };
        const o = (0, t.Ay)("Fill column with info data or default value");
        o.meta = {
          name: "createAction",
          key: "createActionfillColumnData",
          description: "Fill column with info data or default value",
        };
        const a = (0, t.Ay)("Replace all of a list's records");
        a.meta = {
          name: "createAction",
          key: "createActionreplaceRecords",
          description: "Replace all of a list's records",
        };
        const r = (0, t.Ay)("Replace all of a list's archived records");
        r.meta = {
          name: "createAction",
          key: "createActionreplaceArchivedRecords",
          description: "Replace all of a list's archived records",
        };
        const c = (0, t.Ay)("Add / update multiple records");
        c.meta = {
          name: "createAction",
          key: "createActionbulkUpsertRecords",
          description: "Add / update multiple records",
        };
        const u = (0, t.Ay)("Add / update a list record");
        u.meta = {
          name: "createAction",
          key: "createActionupsertRecord",
          description: "Add / update a list record",
        };
        const l = (0, t.Ay)("Remove a list record");
        l.meta = {
          name: "createAction",
          key: "createActionremoveRecord",
          description: "Remove a list record",
        };
        const m = (0, t.Ay)("Archive a list record");
        m.meta = {
          name: "createAction",
          key: "createActionarchiveRecord",
          description: "Archive a list record",
        };
        const v = (0, t.Ay)("Add/update a record position in a view");
        v.meta = {
          name: "createAction",
          key: "createActionupsertRecordPosition",
          description: "Add/update a record position in a view",
        };
        const E = (0, t.Ay)("Add / update multiple templates");
        E.meta = {
          name: "createAction",
          key: "createActionbulkUpsertTemplates",
          description: "Add / update multiple templates",
        };
        const T = (0, t.Ay)("Add / update multiple starter templates");
        T.meta = {
          name: "createAction",
          key: "createActionbulkUpsertStarterTemplates",
          description: "Add / update multiple starter templates",
        };
        const g = (0, t.Ay)("Remove a starter template by ID");
        g.meta = {
          name: "createAction",
          key: "createActionremoveStarterTemplate",
          description: "Remove a starter template by ID",
        };
        const I = (0, t.Ay)("Set the list's banner message");
        I.meta = {
          name: "createAction",
          key: "createActionsetBannerMessageForList",
          description: "Set the list's banner message",
        };
        const f = (0, t.Ay)(
          "Clear the specified type of banner message for this list"
        );
        f.meta = {
          name: "createAction",
          key: "createActionclearBannerMessageForList",
          description:
            "Clear the specified type of banner message for this list",
        };
        const y = (0, t.Ay)("Add / update a list record field");
        y.meta = {
          name: "createAction",
          key: "createActionupsertField",
          description: "Add / update a list record field",
        };
        const M = (0, t.Ay)("Add / update a list cell");
        M.meta = {
          name: "createAction",
          key: "createActionupsertCell",
          description: "Add / update a list cell",
        };
        const p = (0, t.Ay)("Add / update a workflow for a list");
        p.meta = {
          name: "createAction",
          key: "createActionupsertWorkflow",
          description: "Add / update a workflow for a list",
        };
        const O = (0, t.Ay)("Apply an edit action to a list");
        O.meta = {
          name: "createAction",
          key: "createActionapplyEditAction",
          description: "Apply an edit action to a list",
        };
        const C = (0, t.Ay)("Clear edit history for a list");
        C.meta = {
          name: "createAction",
          key: "createActionclearEditHistory",
          description: "Clear edit history for a list",
        };
        const h = (0, t.Ay)("Update local filters");
        h.meta = {
          name: "createAction",
          key: "createActionchangeViewLocalFilters",
          description: "Update local filters",
        };
        const D = (0, t.Ay)("Update local sorts");
        D.meta = {
          name: "createAction",
          key: "createActionchangeViewLocalSorts",
          description: "Update local sorts",
        };
        const P = (0, t.Ay)("Update local collapsed grids");
        P.meta = {
          name: "createAction",
          key: "createActionchangeViewLocalCollapsedGrids",
          description: "Update local collapsed grids",
        };
        const S = (0, t.Ay)(
          "Update the current viewId set by refine in the active window"
        );
        S.meta = {
          name: "createAction",
          key: "createActionsetRefineView",
          description:
            "Update the current viewId set by refine in the active window",
        };
        const b = (0, t.Ay)(
          "Update the default list view id set for the specific List channel tab"
        );
        b.meta = {
          name: "createAction",
          key: "createActionsetChannelTabDefaultRefineView",
          description:
            "Update the default list view id set for the specific List channel tab",
        };
        const K = (0, t.Ay)("Set filter pill to auto open");
        K.meta = {
          name: "createAction",
          key: "createActionsetFilterPillKeyById",
          description: "Set filter pill to auto open",
        };
        const x = (0, t.Ay)("Set group by pill to auto open");
        x.meta = {
          name: "createAction",
          key: "createActionsetGroupByPillAutoOpen",
          description: "Set group by pill to auto open",
        };
        const B = (0, t.Ay)("Set search query for list");
        B.meta = {
          name: "createAction",
          key: "createActionsetListSearchQuery",
          description: "Set search query for list",
        };
        const U = (0, t.Ay)("Destroy local refinements");
        U.meta = {
          name: "createAction",
          key: "createActiondestroyLocalRefinements",
          description: "Destroy local refinements",
        };
        const R = (0, t.Ay)("Add / update my items");
        R.meta = {
          name: "createAction",
          key: "createActionupsertMyItems",
          description: "Add / update my items",
        };
        const G = (0, t.Ay)("Add / update a single my item");
        G.meta = {
          name: "createAction",
          key: "createActionupsertMyItem",
          description: "Add / update a single my item",
        };
        const H = (0, t.Ay)("Add / update a list cell edit");
        H.meta = {
          name: "createAction",
          key: "createActionupsertCellEdit",
          description: "Add / update a list cell edit",
        };
        const F = (0, t.Ay)("set refinement pill to auto open in view");
        F.meta = {
          name: "createAction",
          key: "createActionsetRefinePillAutoOpenByViewId",
          description: "set refinement pill to auto open in view",
        };
        const V = (0, t.Ay)("Add / update last read timestamp by list ID");
        V.meta = {
          name: "createAction",
          key: "createActionupsertLastReadTimestampById",
          description: "Add / update last read timestamp by list ID",
        };
        const X = (0, t.Ay)("Mark records as new to highlight it");
        X.meta = {
          name: "createAction",
          key: "createActionhighlightRecordsAsNew",
          description: "Mark records as new to highlight it",
        };
        const q = (0, t.Ay)("Mark record read to unhighlight it");
        q.meta = {
          name: "createAction",
          key: "createActionremoveRecordHighlight",
          description: "Mark record read to unhighlight it",
        };
        const oe = (0, t.Ay)("Set record as open in flexpane");
        oe.meta = {
          name: "createAction",
          key: "createActionrecordFlexpaneOpen",
          description: "Set record as open in flexpane",
        };
        const z = (0, t.Ay)("Set record flexpane closed");
        z.meta = {
          name: "createAction",
          key: "createActionrecordFlexpaneClosed",
          description: "Set record flexpane closed",
        };
        const Ae = (0, t.Ay)("Load all recently viewed lists");
        Ae.meta = {
          name: "createAction",
          key: "createActionloadRecentlyViewedLists",
          description: "Load all recently viewed lists",
        };
        const ae = (0, t.Ay)("Add recently opened list to the store");
        ae.meta = {
          name: "createAction",
          key: "createActionaddToRecentlyViewedLists",
          description: "Add recently opened list to the store",
        };
        const de = (0, t.Ay)("Remove deleted lists from the store");
        de.meta = {
          name: "createAction",
          key: "createActionremoveFromRecentlyViewedLists",
          description: "Remove deleted lists from the store",
        };
        const ve = (0, t.Ay)("Update local field visibility");
        ve.meta = {
          name: "createAction",
          key: "createActionchangeLocalViewFieldVisibility",
          description: "Update local field visibility",
        };
        const Se = (0, t.Ay)("Update local view type");
        Se.meta = {
          name: "createAction",
          key: "createActionchangeLocalViewType",
          description: "Update local view type",
        };
        const Ee = (0, t.Ay)("Update local show completed items");
        Ee.meta = {
          name: "createAction",
          key: "createActionchangeLocalShowCompletedItems",
          description: "Update local show completed items",
        };
        const be = (0, t.Ay)("Update local group by");
        be.meta = {
          name: "createAction",
          key: "createActionchangeLocalViewGroupBy",
          description: "Update local group by",
        };
        const Ce = (0, t.Ay)("Subscribe/unsubscribe a list record");
        Ce.meta = {
          name: "createAction",
          key: "createActionsetRecordIsSubscribed",
          description: "Subscribe/unsubscribe a list record",
        };
        const Z = (0, t.Ay)("Set new view ids for badging");
        Z.meta = {
          name: "createAction",
          key: "createActionsetListNewViewBadgingById",
          description: "Set new view ids for badging",
        };
        const $ = (0, t.Ay)("Set highlight column in the item flexpane");
        $.meta = {
          name: "createAction",
          key: "createActionsetHighlightColumnId",
          description: "Set highlight column in the item flexpane",
        };
        const N = (0, t.Ay)("Clear highlight column in the item flexpane");
        N.meta = {
          name: "createAction",
          key: "createActionclearHighlightColumnId",
          description: "Clear highlight column in the item flexpane",
        };
        const L = (0, t.Ay)("Set local views for optimistic updates");
        L.meta = {
          name: "createAction",
          key: "createActionsetLocalViewsByListId",
          description: "Set local views for optimistic updates",
        };
        const w = (0, t.Ay)(
          "Updates the UI state for the refine edit view menu component"
        );
        w.meta = {
          name: "createAction",
          key: "createActionrefineEditViewMenuComponentState",
          description:
            "Updates the UI state for the refine edit view menu component",
        };
        const k = (0, t.Ay)("Sets the reference tracker map for my tasks list");
        k.meta = {
          name: "createAction",
          key: "createActionsetMyTasksReferenceTracker",
          description: "Sets the reference tracker map for my tasks list",
        };
        const J = (0, t.Ay)(
          "Adds a reference to the reference tracker map for my tasks list"
        );
        J.meta = {
          name: "createAction",
          key: "createActionaddToMyTasksReferenceTracker",
          description:
            "Adds a reference to the reference tracker map for my tasks list",
        };
        const ee = (0, t.Ay)(
          "Removes a reference from the reference tracker map for my tasks list"
        );
        ee.meta = {
          name: "createAction",
          key: "createActionremoveFromMyTasksReferenceTracker",
          description:
            "Removes a reference from the reference tracker map for my tasks list",
        };
        const ne = (0, t.Ay)("Should show list description");
        ne.meta = {
          name: "createAction",
          key: "createActionsetShowListDescriptionById",
          description: "Should show list description",
        };
        const pe = (0, t.Ay)("Set list history version by list id");
        pe.meta = {
          name: "createAction",
          key: "createActionsetSelectedListVersionByListId",
          description: "Set list history version by list id",
        };
      },
      4001611198: (W, A, e) => {
        "use strict";
        e.d(A, {
          ez: () => a,
          mY: () => r,
        });
        var t = e(3398586081),
          n = e(8352634987),
          s = e(574001087),
          i = e(6533394955);
        const d = (0, t.A)(
            (c) =>
              new n.Ay({
                storeKey: "lists",
                fetch: (u, l) =>
                  (0, i.dispatchForTeamId)(
                    u,
                    (0, s.o)({
                      idsToFetch: l,
                      listId: c,
                    })
                  ),
                isEnabled: () => !0,
                metricsName: "lists-record-fetcher",
              })
          ),
          o = _(
            (c, u, l) => d(l).markObjectsAsStale(c, u),
            "markObjectsAsStale"
          ),
          a = _((c, u, l) => d(l).maybeRefetch(c, u), "maybeRefetch"),
          r = _(
            (c, u, l) => d(l).markObjectsAsFresh(c, u),
            "markObjectsAsFresh"
          );
      },
      4224126550: (W, A, e) => {
        "use strict";
        e.d(A, {
          w9: () => re,
          uu: () => hn,
          mJ: () => Qe,
          Uw: () => Sn,
          vg: () => ve,
          K0: () => _t,
          rm: () => $,
          kS: () => N,
          E4: () => fn,
          fc: () => In,
          Yq: () => Mt,
          k7: () => rn,
          $8: () => ln,
          nh: () => it,
          Jc: () => Te,
          $N: () => Tn,
          zH: () => Ht,
          lq: () => Ye,
          Te: () => Ve,
          YI: () => Q,
          dR: () => Tt,
          iP: () => Bn,
          Ui: () => Et,
          qC: () => jn,
          Ws: () => ss,
          tu: () => Qn,
          hA: () => Wn,
          PH: () => gt,
          Tj: () => an,
          jv: () => Qt,
          vS: () => z,
          $b: () => ae,
          PZ: () => bn,
          I9: () => le,
          DU: () => be,
          C0: () => ee,
          C5: () => Ct,
          vD: () => ne,
          Rl: () => Ae,
          jH: () => ze,
          P6: () => de,
          Mr: () => Ee,
          El: () => Nt,
          bA: () => Jt,
          ot: () => Rt,
          Bj: () => zn,
          qO: () => pt,
          Cf: () => Ft,
          rh: () => qt,
          iM: () => Pt,
          dE: () => zt,
          EI: () => Ce,
          kG: () => L,
          _H: () => Yt,
          wx: () => Z,
          Xb: () => fe,
          nZ: () => ge,
          X0: () => ct,
          hL: () => Vt,
          uJ: () => At,
          BO: () => tn,
          K1: () => Ke,
          gu: () => Ot,
          aY: () => je,
          hY: () => es,
          Pj: () => xn,
          Yb: () => is,
          XR: () => He,
          WE: () => Oe,
          x2: () => J,
          $F: () => w,
          yv: () => k,
          n7: () => ie,
          iX: () => Se,
          Es: () => gn,
          mc: () => nn,
          TF: () => Rn,
          le: () => Ze,
          jW: () => Fe,
        });
        var t = e(166097325),
          n = e(3385422400),
          s = e(1737183214),
          i = e(3001769570),
          d = e(9216332371),
          o = e(3032483460),
          a = e(8191156954),
          r = e(9884588328),
          c = e(8393662842),
          u = e(5917710436),
          l = e(6642124196),
          m = e(2009641291),
          v = e(1521013946),
          E = e(6106034567),
          T = e(3110884894),
          g = e(1305633231),
          I = e(3339229351),
          f = e(2689960678),
          y = e(796111729),
          M = e(6471801899),
          p = e(8161242485),
          O = e(8847766420),
          C = e(4813703725),
          h = e(8455301571),
          D = e(937317117),
          P = e(6415612447),
          S = e(4001611198),
          b = e(3398586081),
          K = e(3037015781),
          x = e(6533394955),
          B = e(164394607);
        const U = (0, b.A)(
          (te) =>
            new K.Ay({
              fetch: (_e, Ie) =>
                (0, x.dispatchForTeamId)(
                  _e,
                  (0, B.q5)({
                    idsToFetch: Ie,
                    listId: te,
                  })
                ),
              upsertKnown: (_e, Ie) =>
                (0, x.dispatchForTeamId)(
                  _e,
                  (0, B.x3)({
                    records: Ie,
                    listId: te,
                  })
                ),
              upsertNonExistent: (_e, Ie) =>
                (0, x.dispatchForTeamId)(
                  _e,
                  (0, B.x3)({
                    records: Ie,
                    listId: te,
                  })
                ),
              isEnabled: () => !0,
            })
        );
        var R = e(5942687316),
          G = e(7606781622),
          H = e(2567914105),
          F = e(9113979368);
        const V = (0, p.Ay)((te) => !(0, F.A)(te.overlays));
        V.meta = {
          name: "createSelector",
          key: "createSelectorisOverlayOpen",
          description: (te) => !(0, F.A)(te.overlays),
        };
        var X = e(2047021170);
        const q = 1e3 * 60 * 60 * 24,
          oe = _((te) => te.lists, "getListsState"),
          z = (0, p.Ay)((te, _e) => (0, D.Lp)(te, _e));
        z.meta = {
          name: "createSelector",
          key: "createSelectorgetList",
          description: (te, _e) => (0, D.Lp)(te, _e),
        };
        const Ae = (0, p.Ay)((te, _e) => {
          var Ie;
          return (
            (_e &&
              ((Ie = oe(te).listsById[_e]) === null || Ie === void 0
                ? void 0
                : Ie.records)) ||
            f.t0
          );
        });
        Ae.meta = {
          name: "createSelector",
          key: "createSelectorgetListRecords",
          description: (te, _e) => {
            var Ie;
            return (
              (_e &&
                ((Ie = oe(te).listsById[_e]) === null || Ie === void 0
                  ? void 0
                  : Ie.records)) ||
              f.t0
            );
          },
        };
        const ae = (0, p.Ay)((te, _e) => {
          var Ie;
          return (
            (_e &&
              ((Ie = oe(te).archivedItemsByListId[_e]) === null || Ie === void 0
                ? void 0
                : Ie.archivedRecords)) ||
            f.t0
          );
        });
        ae.meta = {
          name: "createSelector",
          key: "createSelectorgetListArchivedRecords",
          description: (te, _e) => {
            var Ie;
            return (
              (_e &&
                ((Ie = oe(te).archivedItemsByListId[_e]) === null ||
                Ie === void 0
                  ? void 0
                  : Ie.archivedRecords)) ||
              f.t0
            );
          },
        };
        const de = (0, n.Mz)(z, (te) => (te == null ? void 0 : te.title)),
          ve = (0, p.Ay)((te) => oe(te).clock);
        ve.meta = {
          name: "createSelector",
          key: "createSelectorgetClock",
          description: (te) => oe(te).clock,
        };
        const Se = (0, p.Ay)((te) => oe(te).triggerAnimationForViewId);
        Se.meta = {
          name: "createSelector",
          key: "createSelectorgetViewToAnimate",
          description: (te) => oe(te).triggerAnimationForViewId,
        };
        const Ee = (0, p.Ay)((te) => (0, D.Im)(te));
        Ee.meta = {
          name: "createSelector",
          key: "createSelectorgetLists",
          description: (te) => (0, D.Im)(te),
        };
        const be = (0, p.Ay)((te, _e) => te.files[_e].list_limits);
        be.meta = {
          name: "createSelector",
          key: "createSelectorgetListLimits",
          description: (te, _e) => te.files[_e].list_limits,
        };
        const Ce = (0, p.Ay)((te, _e, Ie) => {
          var Ne, We;
          const $e = (0, O.ZT)(te);
          if (!$e) return;
          const mt =
            (Ne = oe(te).listsById[_e]) === null ||
            Ne === void 0 ||
            (We = Ne.records) === null ||
            We === void 0
              ? void 0
              : We[Ie];
          return mt
            ? (!(0, u.z7)(mt) &&
                !U(_e).isFetchPendingForId($e, Ie) &&
                (0, S.ez)($e, Ie, _e),
              mt)
            : U(_e).fetchObjectWithId($e, Ie);
        });
        Ce.meta = {
          name: "createSelector",
          key: "createSelectorgetRecord",
          description: (te, _e, Ie) => {
            var Ne, We;
            const $e = (0, O.ZT)(te);
            if (!$e) return;
            const mt =
              (Ne = oe(te).listsById[_e]) === null ||
              Ne === void 0 ||
              (We = Ne.records) === null ||
              We === void 0
                ? void 0
                : We[Ie];
            return mt
              ? (!(0, u.z7)(mt) &&
                  !U(_e).isFetchPendingForId($e, Ie) &&
                  (0, S.ez)($e, Ie, _e),
                mt)
              : U(_e).fetchObjectWithId($e, Ie);
          },
        };
        const Z = (0, p.Ay)((te, _e, Ie) => {
          var Ne, We;
          return (0, g.A)(
            te,
            (Ne = Ce(te, _e, Ie)) === null ||
              Ne === void 0 ||
              (We = Ne.fields) === null ||
              We === void 0
              ? void 0
              : We.name
          );
        });
        Z.meta = {
          name: "createSelector",
          key: "createSelectorgetRecordNameAsPlainText",
          description: (te, _e, Ie) => {
            var Ne, We;
            return (0, g.A)(
              te,
              (Ne = Ce(te, _e, Ie)) === null ||
                Ne === void 0 ||
                (We = Ne.fields) === null ||
                We === void 0
                ? void 0
                : We.name
            );
          },
        };
        const $ = (0, p.Ay)((te, _e, Ie) => {
          const Ne = z(te, _e),
            We = (0, u.uA)(Ne);
          return We == null ? void 0 : We.find(($e) => $e.key === Ie);
        });
        $.meta = {
          name: "createSelector",
          key: "createSelectorgetColumnByKey",
          description: (te, _e, Ie) => {
            const Ne = z(te, _e),
              We = (0, u.uA)(Ne);
            return We == null ? void 0 : We.find(($e) => $e.key === Ie);
          },
        };
        const N = (0, p.Ay)((te, _e, Ie) => {
          var Ne;
          return (Ne = $(te, _e, Ie)) === null || Ne === void 0
            ? void 0
            : Ne.id;
        });
        N.meta = {
          name: "createSelector",
          key: "createSelectorgetColumnIdByColumnKey",
          description: (te, _e, Ie) => {
            var Ne;
            return (Ne = $(te, _e, Ie)) === null || Ne === void 0
              ? void 0
              : Ne.id;
          },
        };
        const L = (0, p.Ay)((te, _e, Ie) => {
          var Ne;
          const We =
            (Ne = oe(te).listsById[_e]) === null || Ne === void 0
              ? void 0
              : Ne.records;
          if (We) return Object.values(We).find(($e) => $e.threadTs === Ie);
        });
        L.meta = {
          name: "createSelector",
          key: "createSelectorgetRecordByThreadTs",
          description: (te, _e, Ie) => {
            var Ne;
            const We =
              (Ne = oe(te).listsById[_e]) === null || Ne === void 0
                ? void 0
                : Ne.records;
            if (We) return Object.values(We).find(($e) => $e.threadTs === Ie);
          },
        };
        const w = (0, p.Ay)((te, _e) => oe(te).templatesById[_e]);
        w.meta = {
          name: "createSelector",
          key: "createSelectorgetTemplate",
          description: (te, _e) => oe(te).templatesById[_e],
        };
        const k = (0, p.Ay)((te) => oe(te).templatesById);
        k.meta = {
          name: "createSelector",
          key: "createSelectorgetTemplates",
          description: (te) => oe(te).templatesById,
        };
        const J = (0, p.Ay)((te) => oe(te).starterTemplatesById);
        J.meta = {
          name: "createSelector",
          key: "createSelectorgetStarterTemplates",
          description: (te) => oe(te).starterTemplatesById,
        };
        const ee = (0, p.Ay)((te) => {
          const _e = [],
            Ie = Ee(te);
          for (const We of Ie) {
            var Ne;
            const $e = {
              id: We.id,
              title: (Ne = We.title) !== null && Ne !== void 0 ? Ne : "",
            };
            _e.push($e);
          }
          return _e;
        });
        ee.meta = {
          name: "createSelector",
          key: "createSelectorgetListMentions",
          description: (te) => {
            const _e = [],
              Ie = Ee(te);
            for (const We of Ie) {
              var Ne;
              const $e = {
                id: We.id,
                title: (Ne = We.title) !== null && Ne !== void 0 ? Ne : "",
              };
              _e.push($e);
            }
            return _e;
          },
        };
        const ne = (0, p.Ay)((te, _e) => {
          const Ie = Ee(te),
            Ne = (0, M.V3)(_e);
          if (!Ne) return [];
          const { listTitle: We } = Ne,
            $e = (0, M.xL)(Ie, We);
          if (!$e) return [];
          const mt = (0, D.Lp)(te, $e.id),
            Xt = pe($e),
            _n = [],
            mn = Ae(te, $e.id);
          for (const Y of Object.values(mn ?? {})) {
            var Fn, Kn;
            const se =
              (Kn =
                Y == null || (Fn = Y.fields) === null || Fn === void 0
                  ? void 0
                  : Fn[Xt]) !== null && Kn !== void 0
                ? Kn
                : [];
            var dt;
            const he = {
              id: Y.id,
              name: (0, g.A)(te, se),
              blocks: se,
              listId: mt.id,
              listTitle: (dt = mt.title) !== null && dt !== void 0 ? dt : "",
            };
            _n.push(he);
          }
          return _n;
        });
        ne.meta = {
          name: "createSelector",
          key: "createSelectorgetListRecordMentions",
          description: (te, _e) => {
            const Ie = Ee(te),
              Ne = (0, M.V3)(_e);
            if (!Ne) return [];
            const { listTitle: We } = Ne,
              $e = (0, M.xL)(Ie, We);
            if (!$e) return [];
            const mt = (0, D.Lp)(te, $e.id),
              Xt = pe($e),
              _n = [],
              mn = Ae(te, $e.id);
            for (const Y of Object.values(mn ?? {})) {
              var Fn, Kn;
              const se =
                (Kn =
                  Y == null || (Fn = Y.fields) === null || Fn === void 0
                    ? void 0
                    : Fn[Xt]) !== null && Kn !== void 0
                  ? Kn
                  : [];
              var dt;
              const he = {
                id: Y.id,
                name: (0, g.A)(te, se),
                blocks: se,
                listId: mt.id,
                listTitle: (dt = mt.title) !== null && dt !== void 0 ? dt : "",
              };
              _n.push(he);
            }
            return _n;
          },
        };
        function pe(te) {
          let _e;
          const Ie = (0, u.uA)(te);
          for (const Ne of Ie ?? [])
            if (
              Ne.type === "text" &&
              (_e || (_e = Ne), Ne.key.toUpperCase() === "NAME")
            )
              return Ne.key;
          return _e ? _e.key : "name";
        }
        _(pe, "findColumnKeyForMention");
        const Me = (0, p.Ay)((te) =>
          (0, l.isListsEnabled)(te)
            ? !!(0, X.ty)(te, "seen_onboarding_lists")
            : !0
        );
        Me.meta = {
          name: "createSelector",
          key: "createSelectorhasSeenOnboardingLists",
          description: (te) =>
            (0, l.isListsEnabled)(te)
              ? !!(0, X.ty)(te, "seen_onboarding_lists")
              : !0,
        };
        const ke = (0, p.Ay)((te, _e) => {
          var Ie;
          const Ne = z(te, _e);
          return (Ie = (0, u.uA)(Ne)) === null || Ie === void 0
            ? void 0
            : Ie.find((We) => (We == null ? void 0 : We.key) === "name");
        });
        ke.meta = {
          name: "createSelector",
          key: "createSelectorgetListDefaultColumn",
          description: (te, _e) => {
            var Ie;
            const Ne = z(te, _e);
            return (Ie = (0, u.uA)(Ne)) === null || Ie === void 0
              ? void 0
              : Ie.find((We) => (We == null ? void 0 : We.key) === "name");
          },
        };
        const ge = (0, p.Ay)((te, _e, Ie) => {
          const Ne = Ce(te, _e, Ie),
            We = (0, P.Y)(te, _e),
            $e = (0, r.FB)(We),
            mt =
              Ne != null && Ne.threadTs
                ? (0, G.Ld)(te, $e, Ne.threadTs)
                : void 0;
          var Xt;
          return (Xt = mt == null ? void 0 : mt.reply_count) !== null &&
            Xt !== void 0
            ? Xt
            : null;
        });
        ge.meta = {
          name: "createSelector",
          key: "createSelectorgetRecordThreadReplyCount",
          description: (te, _e, Ie) => {
            const Ne = Ce(te, _e, Ie),
              We = (0, P.Y)(te, _e),
              $e = (0, r.FB)(We),
              mt =
                Ne != null && Ne.threadTs
                  ? (0, G.Ld)(te, $e, Ne.threadTs)
                  : void 0;
            var Xt;
            return (Xt = mt == null ? void 0 : mt.reply_count) !== null &&
              Xt !== void 0
              ? Xt
              : null;
          },
        };
        const fe = (0, p.Ay)((te, _e, Ie) => {
          const Ne = Ce(te, _e, Ie),
            We = (0, P.Y)(te, _e),
            $e = (0, r.FB)(We),
            mt =
              Ne != null && Ne.threadTs
                ? (0, G.Ld)(te, $e, Ne.threadTs)
                : void 0,
            Xt = (0, T.Iu)($e, Ne == null ? void 0 : Ne.threadTs),
            _n =
              mt && Xt
                ? (0, h.r7)(te, Xt) || {
                    timestamps: [],
                    reachedStart: !0,
                  }
                : null,
            mn = mt
              ? (0, d.Nh)(
                  te,
                  $e,
                  (_n == null ? void 0 : _n.timestamps) || []
                ) || (mt == null ? void 0 : mt.ts)
              : "";
          var Fn;
          const Kn =
            (Fn = mt == null ? void 0 : mt._subscribed) !== null &&
            Fn !== void 0
              ? Fn
              : !1;
          var dt;
          const Y =
            (dt = mt == null ? void 0 : mt._last_read) !== null && dt !== void 0
              ? dt
              : "0";
          return Kn ? mn > Y : !1;
        });
        fe.meta = {
          name: "createSelector",
          key: "createSelectorgetRecordThreadIsUnread",
          description: (te, _e, Ie) => {
            const Ne = Ce(te, _e, Ie),
              We = (0, P.Y)(te, _e),
              $e = (0, r.FB)(We),
              mt =
                Ne != null && Ne.threadTs
                  ? (0, G.Ld)(te, $e, Ne.threadTs)
                  : void 0,
              Xt = (0, T.Iu)($e, Ne == null ? void 0 : Ne.threadTs),
              _n =
                mt && Xt
                  ? (0, h.r7)(te, Xt) || {
                      timestamps: [],
                      reachedStart: !0,
                    }
                  : null,
              mn = mt
                ? (0, d.Nh)(
                    te,
                    $e,
                    (_n == null ? void 0 : _n.timestamps) || []
                  ) || (mt == null ? void 0 : mt.ts)
                : "";
            var Fn;
            const Kn =
              (Fn = mt == null ? void 0 : mt._subscribed) !== null &&
              Fn !== void 0
                ? Fn
                : !1;
            var dt;
            const Y =
              (dt = mt == null ? void 0 : mt._last_read) !== null &&
              dt !== void 0
                ? dt
                : "0";
            return Kn ? mn > Y : !1;
          },
        };
        const re = (0, p.Ay)((te, _e) => oe(te).listBannerMessagesbyId[_e]);
        re.meta = {
          name: "createSelector",
          key: "createSelectorgetBannerMessagesForList",
          description: (te, _e) => oe(te).listBannerMessagesbyId[_e],
        };
        const le = (0, p.Ay)((te, _e) => {
          const Ie = (0, m.A)(te),
            Ne = (0, D.Lp)(te, _e);
          return !Ne || !Ne.access || !(0, c.mW)(Ne) || !Ie;
        });
        le.meta = {
          name: "createSelector",
          key: "createSelectorgetListIsViewOnly",
          description: (te, _e) => {
            const Ie = (0, m.A)(te),
              Ne = (0, D.Lp)(te, _e);
            return !Ne || !Ne.access || !(0, c.mW)(Ne) || !Ie;
          },
        };
        const Re = (0, p.Ay)((te) => (0, O.ZT)(te) === "T024BE7LD");
        Re.meta = {
          name: "createSelector",
          key: "createSelectoronTinySpeckDevOrg",
          description: (te) => (0, O.ZT)(te) === "T024BE7LD",
        };
        const ye = (0, p.Ay)((te) => (0, O.jV)(te) === I.uh);
        ye.meta = {
          name: "createSelector",
          key: "createSelectoronTinySpeckOrg",
          description: (te) => (0, O.jV)(te) === I.uh,
        };
        const Te = (0, p.Ay)((te, _e) => oe(te).historyById[_e]);
        Te.meta = {
          name: "createSelector",
          key: "createSelectorgetEditHistory",
          description: (te, _e) => oe(te).historyById[_e],
        };
        const De = (0, p.Ay)((te, _e) => {
          const Ie = z(te, _e),
            Ne = Ae(te, _e);
          if (!Ie || !Ne) return null;
          let We = "";
          for (const mt of Object.values(Ne)) {
            mt.position && We < mt.position && (We = mt.position);
            var $e;
            for (const Xt of Object.values(
              ($e = mt.viewPositions) !== null && $e !== void 0 ? $e : {}
            ))
              We < Xt && (We = Xt);
          }
          return We || null;
        });
        De.meta = {
          name: "createSelector",
          key: "createSelectorgetBiggestRecordPosition",
          description: (te, _e) => {
            const Ie = z(te, _e),
              Ne = Ae(te, _e);
            if (!Ie || !Ne) return null;
            let We = "";
            for (const mt of Object.values(Ne)) {
              mt.position && We < mt.position && (We = mt.position);
              var $e;
              for (const Xt of Object.values(
                ($e = mt.viewPositions) !== null && $e !== void 0 ? $e : {}
              ))
                We < Xt && (We = Xt);
            }
            return We || null;
          },
        };
        const Ue = (0, p.Ay)((te, _e, Ie) => {
          const Ne = (0, R.zZ)({
            listId: _e,
            viewId: Ie,
          });
          return oe(te).localFiltersById[Ne];
        });
        Ue.meta = {
          name: "createSelector",
          key: "createSelectorgetLocalFiltersByViewId",
          description: (te, _e, Ie) => {
            const Ne = (0, R.zZ)({
              listId: _e,
              viewId: Ie,
            });
            return oe(te).localFiltersById[Ne];
          },
        };
        const Ke = (0, C.Rb)(
            (te, _e, Ie) => z(te, _e),
            (te, _e, Ie) => Ie,
            (te, _e) => {
              const Ie = (0, u.Qq)(te, _e);
              var Ne;
              const We =
                (Ne = Ie == null ? void 0 : Ie.filters) !== null &&
                Ne !== void 0
                  ? Ne
                  : [];
              var $e;
              const mt =
                ($e = Ie == null ? void 0 : Ie.infoColumnFilters) !== null &&
                $e !== void 0
                  ? $e
                  : [];
              return [...We, ...mt];
            }
          ),
          Ze = _(
            (te, _e) =>
              (0, n.Mz)(
                (Ie) => Ke(Ie, te, _e),
                (Ie) => Ie
              ),
            "makeGetServerFiltersByViewIdSelector"
          ),
          Q = (0, n.Mz)(Ue, Ke, (te, _e) =>
            te
              ? te.length !== (_e == null ? void 0 : _e.length)
                ? !0
                : !(0, i.bw)(te, _e, "columnId")
              : !1
          ),
          ie = (0, n.Mz)(Ue, Ke, (te, _e) => {
            if (!te) return new Set();
            const Ie = new Map(
                _e == null ? void 0 : _e.map((We) => [We.key, We])
              ),
              Ne = te.filter((We) => (0, i.bV)(We, Ie)).map((We) => We.key);
            return new Set(Ne);
          }),
          Ve = (0, n.Mz)(Ue, Ke, (te, _e) => (te !== void 0 ? te : _e || [])),
          xe = (0, p.Ay)((te, _e, Ie) => {
            const Ne = (0, R.zZ)({
              listId: _e,
              viewId: Ie,
            });
            return oe(te).localSortsById[Ne];
          });
        xe.meta = {
          name: "createSelector",
          key: "createSelectorgetLocalSortsByViewId",
          description: (te, _e, Ie) => {
            const Ne = (0, R.zZ)({
              listId: _e,
              viewId: Ie,
            });
            return oe(te).localSortsById[Ne];
          },
        };
        const je = (0, C.Rb)(
            (te, _e, Ie) => z(te, _e),
            (te, _e, Ie) => Ie,
            (te, _e) => {
              const Ie = (0, u.Qq)(te, _e);
              return (Ie == null ? void 0 : Ie.sorts) || [];
            }
          ),
          Fe = _(
            (te, _e) =>
              (0, n.Mz)(
                (Ie) => je(Ie, te, _e),
                (Ie) => Ie
              ),
            "makeGetServerSortsByViewIdSelector"
          ),
          He = (0, n.Mz)(xe, je, (te, _e) => (te !== void 0 ? te : _e || [])),
          Oe = (0, n.Mz)(xe, je, (te, _e) =>
            te
              ? te.length !== (_e == null ? void 0 : _e.length)
                ? !0
                : !(0, i.bw)(te, _e, "columnId")
              : !1
          ),
          Ye = (0, p.Ay)((te, _e, Ie) => {
            var Ne, We;
            const $e = (0, R.zZ)({
              listId: _e,
              viewId: Ie,
            });
            return (Ne = oe(te)) === null ||
              Ne === void 0 ||
              (We = Ne.filterPillKeyById) === null ||
              We === void 0
              ? void 0
              : We[$e];
          });
        Ye.meta = {
          name: "createSelector",
          key: "createSelectorgetFilterPillKeyById",
          description: (te, _e, Ie) => {
            var Ne, We;
            const $e = (0, R.zZ)({
              listId: _e,
              viewId: Ie,
            });
            return (Ne = oe(te)) === null ||
              Ne === void 0 ||
              (We = Ne.filterPillKeyById) === null ||
              We === void 0
              ? void 0
              : We[$e];
          },
        };
        const at = (0, p.Ay)((te) => {
          var _e;
          return (_e = oe(te)) === null || _e === void 0
            ? void 0
            : _e.groupByPillAutoOpen;
        });
        at.meta = {
          name: "createSelector",
          key: "createSelectorgetGroupByPillAutoOpen",
          description: (te) => {
            var _e;
            return (_e = oe(te)) === null || _e === void 0
              ? void 0
              : _e.groupByPillAutoOpen;
          },
        };
        const _t = (0, p.Ay)((te, _e, Ie) => {
          const Ne = (0, R.zZ)({
            listId: _e,
            viewId: Ie,
          });
          return oe(te).localCollapsedGridsById[Ne];
        });
        _t.meta = {
          name: "createSelector",
          key: "createSelectorgetCollapsedGridsByViewId",
          description: (te, _e, Ie) => {
            const Ne = (0, R.zZ)({
              listId: _e,
              viewId: Ie,
            });
            return oe(te).localCollapsedGridsById[Ne];
          },
        };
        const pt = (0, p.Ay)((te) => oe(te).myItemMap);
        pt.meta = {
          name: "createSelector",
          key: "createSelectorgetMyItemMap",
          description: (te) => oe(te).myItemMap,
        };
        const Qe = (0, p.Ay)((te, _e) => oe(te).editActivityMap[_e]);
        Qe.meta = {
          name: "createSelector",
          key: "createSelectorgetCellEditByTimestamp",
          description: (te, _e) => oe(te).editActivityMap[_e],
        };
        const ct = (0, p.Ay)((te, _e) => {
          var Ie;
          return (Ie = oe(te).refinePillAutoOpenByViewId) === null ||
            Ie === void 0
            ? void 0
            : Ie[_e];
        });
        ct.meta = {
          name: "createSelector",
          key: "createSelectorgetRefinePillAutoOpenByViewId",
          description: (te, _e) => {
            var Ie;
            return (Ie = oe(te).refinePillAutoOpenByViewId) === null ||
              Ie === void 0
              ? void 0
              : Ie[_e];
          },
        };
        const Pt = (0, p.Ay)((te) => oe(te).recentlyViewedLists);
        Pt.meta = {
          name: "createSelector",
          key: "createSelectorgetRecentlyViewedLists",
          description: (te) => oe(te).recentlyViewedLists,
        };
        const zt = (0, p.Ay)((te) => oe(te).recentlyViewedListsLastLoadedMs);
        zt.meta = {
          name: "createSelector",
          key: "createSelectorgetRecentlyViewedListsLastLoadedMs",
          description: (te) => oe(te).recentlyViewedListsLastLoadedMs,
        };
        const an = (0, p.Ay)((te) => {
          const _e = zt(te);
          return _e ? Date.now() - _e > q : !0;
        });
        an.meta = {
          name: "createSelector",
          key: "createSelectorgetIsRecentlyViewedListsExpired",
          description: (te) => {
            const _e = zt(te);
            return _e ? Date.now() - _e > q : !0;
          },
        };
        const Qt = (0, p.Ay)((te, _e) => {
          var Ie;
          return (Ie = oe(te).lastReadTimestampById) === null || Ie === void 0
            ? void 0
            : Ie[_e];
        });
        Qt.meta = {
          name: "createSelector",
          key: "createSelectorgetLastReadTimestampByListId",
          description: (te, _e) => {
            var Ie;
            return (Ie = oe(te).lastReadTimestampById) === null || Ie === void 0
              ? void 0
              : Ie[_e];
          },
        };
        const tn = (0, n.Mz)(
            (te, _e, Ie) => {
              const Ne = z(te, _e);
              return (0, u.cv)(Ne, Ie);
            },
            (te) => {
              var _e;
              return te == null || (_e = te.columns) === null || _e === void 0
                ? void 0
                : _e.reduce((Ne, We) => {
                    let { key: $e, visible: mt } = We;
                    return mt !== void 0 && (Ne[$e] = mt), Ne;
                  }, {});
            }
          ),
          Ht = (0, p.Ay)((te, _e, Ie) => {
            const Ne = (0, R.zZ)({
                listId: _e,
                viewId: Ie,
              }),
              We = oe(te).localFieldVisibilityByViewId[Ne];
            if (!We) return;
            const $e = tn(te, _e, Ie);
            return Object.entries(We)
              .filter((Xt) => {
                let [_n, mn] = Xt;
                return mn !== ($e == null ? void 0 : $e[_n]);
              })
              .map((Xt) => {
                let [_n, mn] = Xt;
                return {
                  key: _n,
                  visible: mn,
                };
              });
          });
        Ht.meta = {
          name: "createSelector",
          key: "createSelectorgetFieldsThatChangedVisibility",
          description: (te, _e, Ie) => {
            const Ne = (0, R.zZ)({
                listId: _e,
                viewId: Ie,
              }),
              We = oe(te).localFieldVisibilityByViewId[Ne];
            if (!We) return;
            const $e = tn(te, _e, Ie);
            return Object.entries(We)
              .filter((Xt) => {
                let [_n, mn] = Xt;
                return mn !== ($e == null ? void 0 : $e[_n]);
              })
              .map((Xt) => {
                let [_n, mn] = Xt;
                return {
                  key: _n,
                  visible: mn,
                };
              });
          },
        };
        const Kt = (0, C.eI)((te, _e, Ie) => {
            const Ne = (0, R.zZ)({
                listId: _e,
                viewId: Ie,
              }),
              We = oe(te).localFieldVisibilityByViewId[Ne],
              $e = tn(te, _e, Ie);
            return (
              We && {
                ...$e,
                ...We,
              }
            );
          }),
          qt = (0, C.eI)((te, _e, Ie) => {
            const Ne = (0, R.zZ)({
              listId: _e,
              viewId: Ie,
            });
            return oe(te).localFieldVisibilityByViewId[Ne];
          }),
          Tn = (0, n.Mz)(Kt, tn, (te, _e) => (te ? !(0, t.A)(te, _e) : !1)),
          Mt = (0, p.Ay)((te, _e, Ie) => {
            const Ne = Kt(te, _e, Ie);
            return Ne || tn(te, _e, Ie);
          });
        Mt.meta = {
          name: "createSelector",
          key: "createSelectorgetCurrentViewFieldVisibilityByViewId",
          description: (te, _e, Ie) => {
            const Ne = Kt(te, _e, Ie);
            return Ne || tn(te, _e, Ie);
          },
        };
        const Jt = (0, p.Ay)((te, _e, Ie) => {
          const Ne = (0, R.zZ)({
            listId: _e,
            viewId: Ie,
          });
          return oe(te).localViewTypeByViewId[Ne];
        });
        Jt.meta = {
          name: "createSelector",
          key: "createSelectorgetLocalViewType",
          description: (te, _e, Ie) => {
            const Ne = (0, R.zZ)({
              listId: _e,
              viewId: Ie,
            });
            return oe(te).localViewTypeByViewId[Ne];
          },
        };
        const dn = (0, C.ow)((te, _e, Ie) => {
            const Ne = z(te, _e),
              We = (0, u.Qq)(Ne, Ie);
            return We == null ? void 0 : We.type;
          }),
          rn = (0, p.Ay)((te, _e, Ie) => {
            const Ne = Jt(te, _e, Ie);
            return Ne !== void 0 ? Ne : dn(te, _e, Ie);
          });
        rn.meta = {
          name: "createSelector",
          key: "createSelectorgetCurrentViewTypeByViewId",
          description: (te, _e, Ie) => {
            const Ne = Jt(te, _e, Ie);
            return Ne !== void 0 ? Ne : dn(te, _e, Ie);
          },
        };
        const gn = (0, p.Ay)((te, _e, Ie) => {
          const Ne = Jt(te, _e, Ie);
          if (!Ne) return !1;
          const We = dn(te, _e, Ie);
          return Ne !== We;
        });
        gn.meta = {
          name: "createSelector",
          key: "createSelectorgetViewTypeHasChanged",
          description: (te, _e, Ie) => {
            const Ne = Jt(te, _e, Ie);
            if (!Ne) return !1;
            const We = dn(te, _e, Ie);
            return Ne !== We;
          },
        };
        const Zt = (0, p.Ay)((te, _e, Ie) => {
          const Ne = (0, R.zZ)({
            listId: _e,
            viewId: Ie,
          });
          return oe(te).localGroupByViewId[Ne];
        });
        Zt.meta = {
          name: "createSelector",
          key: "createSelectorgetLocalGroupBy",
          description: (te, _e, Ie) => {
            const Ne = (0, R.zZ)({
              listId: _e,
              viewId: Ie,
            });
            return oe(te).localGroupByViewId[Ne];
          },
        };
        const Vt = (0, p.Ay)((te, _e) => {
          var Ie;
          return (Ie = oe(te)) === null || Ie === void 0
            ? void 0
            : Ie.refineViewByWindowId[_e];
        });
        Vt.meta = {
          name: "createSelector",
          key: "createSelectorgetRefineView",
          description: (te, _e) => {
            var Ie;
            return (Ie = oe(te)) === null || Ie === void 0
              ? void 0
              : Ie.refineViewByWindowId[_e];
          },
        };
        const Sn = (0, p.Ay)((te, _e) => {
          var Ie;
          return (Ie = oe(te)) === null || Ie === void 0
            ? void 0
            : Ie.channelTabDefaultRefineView[_e];
        });
        Sn.meta = {
          name: "createSelector",
          key: "createSelectorgetChannelTabDefaultRefineView",
          description: (te, _e) => {
            var Ie;
            return (Ie = oe(te)) === null || Ie === void 0
              ? void 0
              : Ie.channelTabDefaultRefineView[_e];
          },
        };
        const ze = (0, p.Ay)((te, _e) => {
          var Ie;
          return (Ie = oe(te)) === null || Ie === void 0
            ? void 0
            : Ie.listSearchQueriesByWindowId[_e];
        });
        ze.meta = {
          name: "createSelector",
          key: "createSelectorgetListSearchQuery",
          description: (te, _e) => {
            var Ie;
            return (Ie = oe(te)) === null || Ie === void 0
              ? void 0
              : Ie.listSearchQueriesByWindowId[_e];
          },
        };
        const Ot = (0, C.ow)((te, _e, Ie) => {
            const Ne = z(te, _e),
              We = (0, u.Qq)(Ne, Ie);
            return We == null ? void 0 : We.grouping;
          }),
          fn = (0, p.Ay)((te, _e, Ie) => {
            const Ne = Zt(te, _e, Ie);
            return Ne || Ot(te, _e, Ie);
          });
        fn.meta = {
          name: "createSelector",
          key: "createSelectorgetCurrentGroupByViewId",
          description: (te, _e, Ie) => {
            const Ne = Zt(te, _e, Ie);
            return Ne || Ot(te, _e, Ie);
          },
        };
        const ln = (0, p.Ay)((te) =>
          (0, X.ty)(te, "lists_add_to_list_default_list")
        );
        ln.meta = {
          name: "createSelector",
          key: "createSelectorgetDefaultListForAddToList",
          description: (te) => (0, X.ty)(te, "lists_add_to_list_default_list"),
        };
        const it = (0, n.Mz)(
            (te) => (0, X.ty)(te, "lists_default_view"),
            (te) => {
              try {
                return JSON.parse(te || "{}");
              } catch (_e) {
                return (
                  (0, y.Ay)({
                    label: "lists",
                  }).error("error parsing default lists view prefs", _e),
                  {}
                );
              }
            }
          ),
          Tt = (0, p.Ay)((te, _e, Ie) => {
            var Ne;
            const We = Zt(te, _e, Ie);
            if (!We) return !1;
            const $e = Ot(te, _e, Ie);
            return !(
              !(We == null || (Ne = We.groupBy) === null || Ne === void 0) &&
              Ne.length
            ) && !($e != null && $e.groupBy)
              ? !1
              : (We == null ? void 0 : We.groupBy) !==
                  ($e == null ? void 0 : $e.groupBy);
          });
        Tt.meta = {
          name: "createSelector",
          key: "createSelectorgetHasGroupByChanged",
          description: (te, _e, Ie) => {
            var Ne;
            const We = Zt(te, _e, Ie);
            if (!We) return !1;
            const $e = Ot(te, _e, Ie);
            return !(
              !(We == null || (Ne = We.groupBy) === null || Ne === void 0) &&
              Ne.length
            ) && !($e != null && $e.groupBy)
              ? !1
              : (We == null ? void 0 : We.groupBy) !==
                  ($e == null ? void 0 : $e.groupBy);
          },
        };
        const Ct = (0, p.Ay)((te, _e) => oe(te).listNewViewBadgingById[_e]);
        Ct.meta = {
          name: "createSelector",
          key: "createSelectorgetListNewViewBadgingById",
          description: (te, _e) => oe(te).listNewViewBadgingById[_e],
        };
        const Rt = (0, p.Ay)((te, _e) => {
          var Ie;
          return (
            ((Ie = oe(te).localViewsByListId) === null || Ie === void 0
              ? void 0
              : Ie[_e]) || f.Ml
          );
        });
        Rt.meta = {
          name: "createSelector",
          key: "createSelectorgetLocalViewsByListId",
          description: (te, _e) => {
            var Ie;
            return (
              ((Ie = oe(te).localViewsByListId) === null || Ie === void 0
                ? void 0
                : Ie[_e]) || f.Ml
            );
          },
        };
        const Yt = (0, p.Ay)((te, _e, Ie) => {
          var Ne, We, $e;
          return (Ne = oe(te).listsById[_e]) === null ||
            Ne === void 0 ||
            (We = Ne.records) === null ||
            We === void 0 ||
            ($e = We[Ie]) === null ||
            $e === void 0
            ? void 0
            : $e.isSubscribed;
        });
        Yt.meta = {
          name: "createSelector",
          key: "createSelectorgetRecordIsSubscribed",
          description: (te, _e, Ie) => {
            var Ne, We, $e;
            return (Ne = oe(te).listsById[_e]) === null ||
              Ne === void 0 ||
              (We = Ne.records) === null ||
              We === void 0 ||
              ($e = We[Ie]) === null ||
              $e === void 0
              ? void 0
              : $e.isSubscribed;
          },
        };
        const bn = (0, p.Ay)((te, _e) => {
          var Ie;
          if (le(te, _e)) return !1;
          const Ne = (0, D.Lp)(te, _e);
          if (
            !Ne ||
            (!((Ie = Ne.editors) === null || Ie === void 0) && Ie.length)
          )
            return !1;
          const We = Te(te, _e);
          if (
            (We != null && We.undoStack.length) ||
            (We != null && We.redoStack.length)
          )
            return !1;
          const $e = Ae(te, _e);
          for (const mt of Object.values($e ?? {}))
            if (String(mt.dateCreated) !== mt.updatedTimestamp) return !1;
          return !0;
        });
        bn.meta = {
          name: "createSelector",
          key: "createSelectorgetListIsEditableAndNeverUpdated",
          description: (te, _e) => {
            var Ie;
            if (le(te, _e)) return !1;
            const Ne = (0, D.Lp)(te, _e);
            if (
              !Ne ||
              (!((Ie = Ne.editors) === null || Ie === void 0) && Ie.length)
            )
              return !1;
            const We = Te(te, _e);
            if (
              (We != null && We.undoStack.length) ||
              (We != null && We.redoStack.length)
            )
              return !1;
            const $e = Ae(te, _e);
            for (const mt of Object.values($e ?? {}))
              if (String(mt.dateCreated) !== mt.updatedTimestamp) return !1;
            return !0;
          },
        };
        const Wn = (0, p.Ay)((te) =>
          (0, X.ty)(te, "lists_template_sidebar_collapsed")
        );
        Wn.meta = {
          name: "createSelector",
          key: "createSelectorgetIsListsTemplateSidebarCollapsedUserPref",
          description: (te) =>
            (0, X.ty)(te, "lists_template_sidebar_collapsed"),
        };
        const hn = (0, p.Ay)((te, _e) => {
          const Ie = z(te, _e);
          return bn(te, _e) && (0, u.BS)(Ie);
        });
        hn.meta = {
          name: "createSelector",
          key: "createSelectorgetCanShowListEmptyStateSidebar",
          description: (te, _e) => {
            const Ie = z(te, _e);
            return bn(te, _e) && (0, u.BS)(Ie);
          },
        };
        const Bn = (0, p.Ay)((te, _e, Ie, Ne) => {
          const We = (0, R.pe)(_e, Ie, Ne);
          return oe(te).highlightColumnMap[We];
        });
        Bn.meta = {
          name: "createSelector",
          key: "createSelectorgetHighlightColumnId",
          description: (te, _e, Ie, Ne) => {
            const We = (0, R.pe)(_e, Ie, Ne);
            return oe(te).highlightColumnMap[We];
          },
        };
        const Rn = (0, p.Ay)((te) => (0, H.oY)(te) || V(te));
        Rn.meta = {
          name: "createSelector",
          key: "createSelectorisModalOrOverlayOpen",
          description: (te) => (0, H.oY)(te) || V(te),
        };
        const zn = (0, p.Ay)((te, _e) => {
          if (!_e) return null;
          const Ie = (0, v.$N)(te, _e);
          return !Ie || Ie.type !== v.im.MESSAGE || !Ie.channelId || !Ie.ts
            ? null
            : (0, G.Ld)(te, Ie.channelId, Ie.ts);
        });
        zn.meta = {
          name: "createSelector",
          key: "createSelectorgetMessageFromCellValue",
          description: (te, _e) => {
            if (!_e) return null;
            const Ie = (0, v.$N)(te, _e);
            return !Ie || Ie.type !== v.im.MESSAGE || !Ie.channelId || !Ie.ts
              ? null
              : (0, G.Ld)(te, Ie.channelId, Ie.ts);
          },
        };
        const is = (0, p.Ay)(
          (te, _e) =>
            (0, l.isListsAutomationsEntrypointsEnabled)(te) &&
            (0, s.I)(te) &&
            !le(te, _e)
        );
        is.meta = {
          name: "createSelector",
          key: "createSelectorgetShowListAutomationsEntrypoint",
          description: (te, _e) =>
            (0, l.isListsAutomationsEntrypointsEnabled)(te) &&
            (0, s.I)(te) &&
            !le(te, _e),
        };
        const ss = (0, p.Ay)((te) => {
          const _e = (0, E.p)(te),
            Ie = _e === E.v.IMAGES_ONLY,
            Ne = _e === E.v.DISABLE_ALL;
          return Ie || Ne;
        });
        ss.meta = {
          name: "createSelector",
          key: "createSelectorgetIsListCsvImportDisabled",
          description: (te) => {
            const _e = (0, E.p)(te),
              Ie = _e === E.v.IMAGES_ONLY,
              Ne = _e === E.v.DISABLE_ALL;
            return Ie || Ne;
          },
        };
        const jn = (0, p.Ay)((te, _e, Ie) => {
          const Ne = (0, R.o2)(_e, Ie),
            We = oe(te).refineComponentsState[Ne];
          var $e;
          return ($e = We == null ? void 0 : We.isEditViewMenuOpen) !== null &&
            $e !== void 0
            ? $e
            : !1;
        });
        jn.meta = {
          name: "createSelector",
          key: "createSelectorgetIsEditViewMenuComponentOpen",
          description: (te, _e, Ie) => {
            const Ne = (0, R.o2)(_e, Ie),
              We = oe(te).refineComponentsState[Ne];
            var $e;
            return ($e = We == null ? void 0 : We.isEditViewMenuOpen) !==
              null && $e !== void 0
              ? $e
              : !1;
          },
        };
        const Yn = (0, p.Ay)((te) => oe(te).myTasksReferenceTrackingMap);
        Yn.meta = {
          name: "createSelector",
          key: "createSelectorgetMyTasksReferenceTrackingMap",
          description: (te) => oe(te).myTasksReferenceTrackingMap,
        };
        const Qn = (0, p.Ay)((te, _e) => {
          const Ie = _e == null ? void 0 : _e.slack_list;
          if (!Ie || !Ie.list_id || !Ie.list_record_id) return !1;
          const Ne = Ce(te, Ie.list_id, Ie.list_record_id);
          return Ne == null ? void 0 : Ne.isDeleted;
        });
        Qn.meta = {
          name: "createSelector",
          key: "createSelectorgetIsListRootDeletedFromMsg",
          description: (te, _e) => {
            const Ie = _e == null ? void 0 : _e.slack_list;
            if (!Ie || !Ie.list_id || !Ie.list_record_id) return !1;
            const Ne = Ce(te, Ie.list_id, Ie.list_record_id);
            return Ne == null ? void 0 : Ne.isDeleted;
          },
        };
        const es = (0, p.Ay)(
          (te, _e) => oe(te).shouldShowListDescriptionByListId[_e]
        );
        es.meta = {
          name: "createSelector",
          key: "createSelectorgetShouldShowListDescriptionById",
          description: (te, _e) => oe(te).shouldShowListDescriptionByListId[_e],
        };
        const Et = (0, p.Ay)((te, _e) => (0, X.iN)(te) === _e);
        Et.meta = {
          name: "createSelector",
          key: "createSelectorgetIsAssignedToList",
          description: (te, _e) => (0, X.iN)(te) === _e,
        };
        const gt = (0, p.Ay)((te, _e) => {
          if (Et(te, _e)) return !0;
          const Ie = (0, X.N$)(te);
          var Ne;
          return (
            ((Ne = Ie == null ? void 0 : Ie[0]) !== null && Ne !== void 0
              ? Ne
              : void 0) === _e
          );
        });
        gt.meta = {
          name: "createSelector",
          key: "createSelectorgetIsMyTasksList",
          description: (te, _e) => {
            if (Et(te, _e)) return !0;
            const Ie = (0, X.N$)(te);
            var Ne;
            return (
              ((Ne = Ie == null ? void 0 : Ie[0]) !== null && Ne !== void 0
                ? Ne
                : void 0) === _e
            );
          },
        };
        const Ft = (0, p.Ay)((te, _e) => {
          var Ie;
          if (!(0, l.isTodosEnabled)(te)) return;
          const Ne = (0, X.N$)(te);
          var We;
          const $e =
              (We = Ne == null ? void 0 : Ne[0]) !== null && We !== void 0
                ? We
                : void 0,
            mt = z(te, $e),
            Xt = (0, u.uA)(mt),
            _n = Ae(te, $e),
            mn =
              Xt == null ? void 0 : Xt.find((Kn) => Kn.type === a.$.Reference);
          return !mn || !_n
            ? null
            : (Ie = Object.values(_n)) === null || Ie === void 0
            ? void 0
            : Ie.find((Kn) => {
                var dt, Y, se;
                if ((0, o.gk)(Kn)) return !1;
                const he =
                  Kn == null || (dt = Kn.fields) === null || dt === void 0
                    ? void 0
                    : dt[mn.key];
                if ((0, o.No)(_e)) {
                  var Le, qe;
                  return (
                    (he == null || (Le = he.message) === null || Le === void 0
                      ? void 0
                      : Le.channel_id) === _e.message.channelId &&
                    (he == null || (qe = he.message) === null || qe === void 0
                      ? void 0
                      : qe.ts) === _e.message.ts
                  );
                }
                return (
                  (he == null || (Y = he.list_record) === null || Y === void 0
                    ? void 0
                    : Y.list_id) === _e.listRecord.listId &&
                  (he == null || (se = he.list_record) === null || se === void 0
                    ? void 0
                    : se.row_id) === _e.listRecord.rowId
                );
              });
        });
        Ft.meta = {
          name: "createSelector",
          key: "createSelectorgetMyTasksItem",
          description: (te, _e) => {
            var Ie;
            if (!(0, l.isTodosEnabled)(te)) return;
            const Ne = (0, X.N$)(te);
            var We;
            const $e =
                (We = Ne == null ? void 0 : Ne[0]) !== null && We !== void 0
                  ? We
                  : void 0,
              mt = z(te, $e),
              Xt = (0, u.uA)(mt),
              _n = Ae(te, $e),
              mn =
                Xt == null
                  ? void 0
                  : Xt.find((Kn) => Kn.type === a.$.Reference);
            return !mn || !_n
              ? null
              : (Ie = Object.values(_n)) === null || Ie === void 0
              ? void 0
              : Ie.find((Kn) => {
                  var dt, Y, se;
                  if ((0, o.gk)(Kn)) return !1;
                  const he =
                    Kn == null || (dt = Kn.fields) === null || dt === void 0
                      ? void 0
                      : dt[mn.key];
                  if ((0, o.No)(_e)) {
                    var Le, qe;
                    return (
                      (he == null || (Le = he.message) === null || Le === void 0
                        ? void 0
                        : Le.channel_id) === _e.message.channelId &&
                      (he == null || (qe = he.message) === null || qe === void 0
                        ? void 0
                        : qe.ts) === _e.message.ts
                    );
                  }
                  return (
                    (he == null || (Y = he.list_record) === null || Y === void 0
                      ? void 0
                      : Y.list_id) === _e.listRecord.listId &&
                    (he == null ||
                    (se = he.list_record) === null ||
                    se === void 0
                      ? void 0
                      : se.row_id) === _e.listRecord.rowId
                  );
                });
          },
        };
        const nn = (0, p.Ay)((te, _e) => {
          if (!(0, l.isTodosEnabled)(te)) return !1;
          var Ie;
          const Ne = (Ie = Yn(te)) !== null && Ie !== void 0 ? Ie : {},
            We = (0, o.qC)(_e),
            $e = Ne[We];
          return !!$e && !(0, o.gk)($e);
        });
        nn.meta = {
          name: "createSelector",
          key: "createSelectorisAddedToMyTasks",
          description: (te, _e) => {
            if (!(0, l.isTodosEnabled)(te)) return !1;
            var Ie;
            const Ne = (Ie = Yn(te)) !== null && Ie !== void 0 ? Ie : {},
              We = (0, o.qC)(_e),
              $e = Ne[We];
            return !!$e && !(0, o.gk)($e);
          },
        };
        const Dn = (0, p.Ay)((te, _e, Ie) => {
          const Ne = (0, R.zZ)({
            listId: _e,
            viewId: Ie,
          });
          return oe(te).localShowCompletedItemsByViewId[Ne];
        });
        Dn.meta = {
          name: "createSelector",
          key: "createSelectorgetLocalShowCompletedItems",
          description: (te, _e, Ie) => {
            const Ne = (0, R.zZ)({
              listId: _e,
              viewId: Ie,
            });
            return oe(te).localShowCompletedItemsByViewId[Ne];
          },
        };
        const bt = (0, C.ow)((te, _e, Ie) => {
            const Ne = z(te, _e),
              We = (0, u.Qq)(Ne, Ie);
            var $e;
            return ($e = We == null ? void 0 : We.showCompletedItems) !==
              null && $e !== void 0
              ? $e
              : !1;
          }),
          In = (0, p.Ay)((te, _e, Ie) => {
            const Ne = Dn(te, _e, Ie);
            return Ne !== void 0 ? Ne : bt(te, _e, Ie);
          });
        In.meta = {
          name: "createSelector",
          key: "createSelectorgetCurrentShowCompletedItemsByViewId",
          description: (te, _e, Ie) => {
            const Ne = Dn(te, _e, Ie);
            return Ne !== void 0 ? Ne : bt(te, _e, Ie);
          },
        };
        const xn = (0, n.Mz)(Dn, bt, (te, _e) =>
            te === void 0 ? !1 : !(0, t.A)(te, _e)
          ),
          Nt = (0, p.Ay)(
            (te) => (0, X.ty)(te, "lists_message_todo_reaction") || "eyes"
          );
        Nt.meta = {
          name: "createSelector",
          key: "createSelectorgetListsMessageTodoReaction",
          description: (te) =>
            (0, X.ty)(te, "lists_message_todo_reaction") || "eyes",
        };
        const At = (0, p.Ay)(
          (te, _e) => oe(te).selectedListVersionByListId[_e]
        );
        At.meta = {
          name: "createSelector",
          key: "createSelectorgetSelectedListVersionByListId",
          description: (te, _e) => oe(te).selectedListVersionByListId[_e],
        };
      },
      4525672255: (W, A, e) => {
        "use strict";
        e.d(A, {
          E: () => u,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(5513050121),
          i = e(6554371307),
          d = e(6927609153),
          o = e(796111729),
          a = e(1031947056),
          r = e(474652310),
          c = e(832411022);
        const u = (0, a.Ay)(
          "Fetch lists",
          (function () {
            var l = (0, t.coroutine)(function* (m, v) {
              let {
                query: E,
                sort: T,
                reason: g,
              } = arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : {};
              try {
                const I = yield E
                  ? m(
                      (0, i.yz)({
                        query: `type:list ${E}`,
                        includeShares: !0,
                        reason: g || "get-lists",
                        bypassCache: !0,
                      })
                    )
                  : m(
                      (0, d.jQ)({
                        module: "files",
                        query: "type:list",
                        sort: T || c.VU.lastRead,
                        reason: g || "get-lists",
                        context: s.Oj.ListsDefault,
                      })
                    ).then((f) => {
                      let { items: y } = f;
                      return y;
                    });
                m(
                  (0, r.b)({
                    files: I,
                  })
                );
              } catch (I) {
                (0, o.Ay)({
                  label: "lists",
                }).error("error fetching lists", I);
              }
            });
            return function (m, v) {
              return l.apply(this, arguments);
            };
          })()
        );
        u.meta = {
          name: "createThunk",
          key: "createThunkfetchLists",
          description: "Fetch lists",
        };
      },
      164394607: (W, A, e) => {
        "use strict";
        e.d(A, {
          Kd: () => m,
          ky: () => T,
          q5: () => v,
          x3: () => E,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(2694081143),
          i = e(796111729),
          d = e(6471801899),
          o = e(1031947056),
          a = e(8847766420),
          r = e(5795074931),
          c = e(9943020700),
          u = e(4001611198),
          l = e(9629831899);
        const m = (0, o.Ay)(
          "Fetch list and list record",
          (function () {
            var g = (0, t.coroutine)(function* (I, f, y) {
              let {
                listId: M,
                id: p,
                includeIsSubscribed: O,
                reason: C = "get-list-record",
              } = y;
              try {
                const { list: x, record: B } = yield I(
                  (0, s.T)({
                    listId: M,
                    id: p,
                    includeIsSubscribed: O,
                    reason: C,
                  })
                );
                I(
                  (0, l.y)({
                    lists: [x],
                  })
                );
                var h, D, P, S, b;
                const U = (0, d.jG)({
                  id: B.id,
                  fields: B.fields,
                  dateCreated: B.date_created,
                  createdBy:
                    (h = B.created_by) !== null && h !== void 0 ? h : "",
                  threadTs: (D = B.thread_ts) !== null && D !== void 0 ? D : "",
                  position: (P = B.position) !== null && P !== void 0 ? P : "",
                  updatedTimestamp:
                    (S = B.updated_timestamp) !== null && S !== void 0 ? S : "",
                  updatedBy:
                    (b = B.updated_by) !== null && b !== void 0 ? b : "",
                  viewPositions: B.view_positions,
                  platformRefs: B.platform_refs,
                  saved: B.saved,
                  savedFields: B.saved_fields,
                  isSubscribed: B.is_subscribed,
                });
                return (
                  I(
                    (0, c.$W)({
                      listId: M,
                      record: U,
                    })
                  ),
                  null
                );
              } catch (x) {
                var K;
                return (
                  (0, i.Ay)({
                    label: "lists",
                  }).error("error fetching list record", x),
                  {
                    error:
                      x == null || (K = x.data) === null || K === void 0
                        ? void 0
                        : K.error,
                  }
                );
              }
            });
            return function (I, f, y) {
              return g.apply(this, arguments);
            };
          })()
        );
        m.meta = {
          name: "createThunk",
          key: "createThunkfetchRecord",
          description: "Fetch list and list record",
        };
        const v = (0, o.Ay)(
          "Fetch and upsert list record",
          (function () {
            var g = (0, t.coroutine)(function* (I, f, y) {
              let { idsToFetch: M, listId: p } = y;
              return n().all(
                M.map(
                  (function () {
                    var O = (0, t.coroutine)(function* (C) {
                      try {
                        const x = (yield I(
                          (0, s.T)({
                            listId: p,
                            id: C,
                            includeIsSubscribed: !0,
                            reason: "get-list-record",
                          })
                        )).record;
                        if (x.archived)
                          return {
                            id: C,
                            isArchived: !0,
                          };
                        var h, D, P, S, b;
                        return (0, d.jG)({
                          id: x.id,
                          fields: x.fields,
                          dateCreated: x.date_created,
                          createdBy:
                            (h = x.created_by) !== null && h !== void 0
                              ? h
                              : "",
                          threadTs:
                            (D = x.thread_ts) !== null && D !== void 0 ? D : "",
                          position:
                            (P = x.position) !== null && P !== void 0 ? P : "",
                          updatedTimestamp:
                            (S = x.updated_timestamp) !== null && S !== void 0
                              ? S
                              : "",
                          updatedBy:
                            (b = x.updated_by) !== null && b !== void 0
                              ? b
                              : "",
                          viewPositions: x.view_positions,
                          platformRefs: x.platform_refs,
                          saved: x.saved,
                          savedFields: x.saved_fields,
                        });
                      } catch (K) {
                        return K.data.error === "record_deleted"
                          ? {
                              id: C,
                              isDeleted: !0,
                            }
                          : {
                              id: C,
                              isNonExistent: !0,
                            };
                      }
                    });
                    return function (C) {
                      return O.apply(this, arguments);
                    };
                  })()
                )
              );
            });
            return function (I, f, y) {
              return g.apply(this, arguments);
            };
          })()
        );
        v.meta = {
          name: "createThunk",
          key: "createThunkfetchRecordsForList",
          description: "Fetch and upsert list record",
        };
        const E = (0, o.Ay)("Format and upsert list records", (g, I, f) => {
          let { records: y, listId: M } = f;
          g(
            (0, c.yw)({
              listId: M,
              records: y,
            })
          );
          const p = (0, r.WR)(I());
          g(
            (0, c.fg)({
              listId: M,
              currentUserId: p,
            })
          );
          const O = y.map((h) => h.id),
            C = (0, a.ZT)(I()) || "";
          (0, u.mY)(C, O, M);
        });
        E.meta = {
          name: "createThunk",
          key: "createThunkupsertRecordsForList",
          description: "Format and upsert list records",
        };
        const T = (0, o.Ay)(
          "Fetch and upsert list record",
          (function () {
            var g = (0, t.coroutine)(function* (I, f, y) {
              let { idsToFetch: M, listId: p } = y;
              return I(
                v({
                  idsToFetch: M,
                  listId: p,
                })
              ).then((O) => {
                I(
                  E({
                    records: O,
                    listId: p,
                  })
                );
              });
            });
            return function (I, f, y) {
              return g.apply(this, arguments);
            };
          })()
        );
        T.meta = {
          name: "createThunk",
          key: "createThunkfetchAndUpsertRecordsForList",
          description: "Fetch and upsert list record",
        };
      },
      9174292896: (W, A, e) => {
        "use strict";
        e.d(A, {
          D: () => r,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(444762595),
          i = e(796111729),
          d = e(6471801899),
          o = e(1031947056),
          a = e(9943020700);
        const r = (0, o.Ay)(
          "Fetch list records",
          (function () {
            var c = (0, t.coroutine)(function* (u, l, m) {
              let { listId: v, currentUserId: E, archived: T = !1 } = m;
              try {
                const I = (yield u(
                  (0, s.z)({
                    listId: v,
                    reason: "get-list-records",
                    archived: T,
                  })
                )).records.map((f) => {
                  var y, M, p, O, C;
                  return (0, d.jG)({
                    id: f.id,
                    fields: f.fields,
                    dateCreated: f.date_created,
                    createdBy:
                      (y = f.created_by) !== null && y !== void 0 ? y : "",
                    threadTs:
                      (M = f.thread_ts) !== null && M !== void 0 ? M : "",
                    position:
                      (p = f.position) !== null && p !== void 0 ? p : "",
                    updatedTimestamp:
                      (O = f.updated_timestamp) !== null && O !== void 0
                        ? O
                        : "",
                    updatedBy:
                      (C = f.updated_by) !== null && C !== void 0 ? C : "",
                    viewPositions: f.view_positions,
                    platformRefs: f.platform_refs,
                    saved: f.saved,
                    savedFields: f.saved_fields,
                  });
                });
                return (
                  T
                    ? u(
                        (0, a.rL)({
                          listId: v,
                          archivedRecords: I,
                        })
                      )
                    : (u(
                        (0, a.VV)({
                          listId: v,
                          records: I,
                        })
                      ),
                      u(
                        (0, a.fg)({
                          listId: v,
                          currentUserId: E,
                        })
                      )),
                  I
                );
              } catch (g) {
                (0, i.Ay)({
                  label: "lists",
                }).error("error fetching list records", g);
              }
              return null;
            });
            return function (u, l, m) {
              return c.apply(this, arguments);
            };
          })()
        );
        r.meta = {
          name: "createThunk",
          key: "createThunkfetchRecords",
          description: "Fetch list records",
        };
      },
      9629831899: (W, A, e) => {
        "use strict";
        e.d(A, {
          y: () => o,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(1031947056),
          i = e(3237710044),
          d = e(937317117);
        const o = (0, s.Ay)(
          "Fetch list",
          (function () {
            var a = (0, t.coroutine)(function* (r, c, u) {
              let { lists: l } = u;
              l.forEach((m) => {
                const v = (0, d.Lp)(c(), m.id);
                r(
                  (0, i.sM)({
                    ...v,
                    ...m,
                  })
                );
              });
            });
            return function (r, c, u) {
              return a.apply(this, arguments);
            };
          })()
        );
        o.meta = {
          name: "createThunk",
          key: "createThunkupsertLocalListFiles",
          description: "Fetch list",
        };
      },
      5942687316: (W, A, e) => {
        "use strict";
        e.d(A, {
          o2: () => s,
          pe: () => n,
          zZ: () => t,
        });
        const t = _((i) => {
            let { listId: d, viewId: o } = i;
            return `${d}-${o}`;
          }, "getLocalRefinementsId"),
          n = _(
            (i, d, o) => `${i.toString()}-${d}-${o}`,
            "makeHighlightStoreKey"
          ),
          s = _(
            (i, d) => `${i.toString()}-${d}`,
            "makeRefineComponentStateStoreKey"
          );
      },
      2938177083: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => u,
        });
        var t = e(796111729),
          n = e(1031947056),
          s = e(6422693406),
          i = e(6259241484),
          d = e(716227588),
          o = e(3603672985),
          a = e(7003004874),
          r = e(3707193570);
        const c = (0, n.Ay)(
          "record a dismissal on a megaphone notification",
          (l, m, v) => {
            const { spaceName: E, ...T } = v,
              g = v.channelId || v.entityId,
              I = (0, t.Wo)();
            if (!E)
              return (
                I.error(
                  i.cK,
                  "spaceName is required when dispatching recordAndClearNotification."
                ),
                s.S.resolve()
              );
            const f = m(),
              y = (0, d.Hp)(f, E, g);
            return (
              (0, r.Ay)(g) && v.entityType === "team"
                ? l(
                    (0, o.pn)({
                      spaceName: E,
                      channelId: g,
                    })
                  )
                : l(
                    (0, o.KT)({
                      spaceName: E,
                      channelId: g,
                    })
                  ),
              l(
                (0, a.A)({
                  notificationName: y,
                  ...T,
                })
              )
            );
          }
        );
        c.meta = {
          name: "createThunk",
          key: "createThunkrecordAndClearNotification",
          description: "record a dismissal on a megaphone notification",
        };
        const u = c;
      },
      7003004874: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => l,
          j: () => u,
        });
        var t = e(796111729),
          n = e(1031947056),
          s = e(8760181906),
          i = e(6485511687),
          d = e(6422693406),
          o = e(6259241484);
        const a = (0, n.Ay)(
          "record an event (e.g. dismissal, impression, etc) on a megaphone notification",
          (m, v, E) => {
            const { notificationName: T, ...g } = E,
              I = (0, t.Wo)();
            var f;
            const y =
              (f = E.reason) !== null && f !== void 0
                ? f
                : "record-notification-event";
            if (!T)
              return (
                I.error(
                  o.cK,
                  "notificationName is required when dispatching recordNotificationEvent."
                ),
                d.S.resolve()
              );
            const M = {
              notification: T,
              ...g,
              reason: y,
            };
            return m((0, i.a)(M));
          }
        );
        a.meta = {
          name: "createThunk",
          key: "createThunkrecordNotificationEvent",
          description:
            "record an event (e.g. dismissal, impression, etc) on a megaphone notification",
        };
        const r = 6e4,
          c = !1,
          u = (0, s.A)(a, r, c, void 0, !1),
          l = a;
      },
      7487228876: (W, A, e) => {
        "use strict";
        e.d(A, {
          h: () => i,
        });
        var t = e(796111729),
          n = e(6259241484);
        const s = (0, t.Wo)(),
          i = _((d) => {
            let { spaceName: o, notificationName: a } = d;
            a &&
              s.error(
                n.cK,
                `${a} is not a recognized notification name for space ${o}.`
              );
          }, "maybeLogUnrecognizedNotification");
      },
      2374999399: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => i,
        });
        var t = e(8161242485),
          n = e(8276911661);
        const s = (0, t.Ay)(
          (d, o) => (0, n.nv)(d, o).profile.statusEmojiDisplayInfo || void 0
        );
        s.meta = {
          name: "createSelector",
          key: "createSelectorgetMemberCustomStatusEmojiDisplayInfo",
          description: (d, o) =>
            (0, n.nv)(d, o).profile.statusEmojiDisplayInfo || void 0,
        };
        const i = s;
      },
      1345620242: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => o,
        });
        var t = e(8161242485),
          n = e(8170643398),
          s = e(8276911661),
          i = e(3428522109);
        const d = (0, t.Ay)((a, r) => {
          const c = (0, s.nv)(a, r),
            { status_text_canonical: u } = c.profile;
          return u ? (0, n.UM)(c) : (0, i.K)(a, c) ? 0 : (0, n.UM)(c);
        });
        d.meta = {
          name: "createSelector",
          key: "createSelectorgetMemberCustomStatusExpiration",
          description: (a, r) => {
            const c = (0, s.nv)(a, r),
              { status_text_canonical: u } = c.profile;
            return u ? (0, n.UM)(c) : (0, i.K)(a, c) ? 0 : (0, n.UM)(c);
          },
        };
        const o = d;
      },
      2072540560: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => a,
        });
        var t = e(8086952004),
          n = e(8161242485),
          s = e(8276911661),
          i = e(8956918631),
          d = e(3428522109);
        const o = (0, n.Ay)((r, c) => {
          const u = (0, s.nv)(r, c),
            { status_text_canonical: l } = u.profile;
          if (l) {
            let m;
            const v = (0, i.A)(r);
            return (
              v &&
                (m =
                  ((0, t.A)(v, (E) => E.canonical === l) || {}).text || null),
              l.toLowerCase() === "on a call" && (m = s.Ru.t("On a call")),
              m || u.profile.status_text || ""
            );
          }
          return (0, d.K)(r, u)
            ? s.Ru.t("In a huddle")
            : u.profile.status_text || "";
        });
        o.meta = {
          name: "createSelector",
          key: "createSelectorgetMemberCustomStatusText",
          description: (r, c) => {
            const u = (0, s.nv)(r, c),
              { status_text_canonical: l } = u.profile;
            if (l) {
              let m;
              const v = (0, i.A)(r);
              return (
                v &&
                  (m =
                    ((0, t.A)(v, (E) => E.canonical === l) || {}).text || null),
                l.toLowerCase() === "on a call" && (m = s.Ru.t("On a call")),
                m || u.profile.status_text || ""
              );
            }
            return (0, d.K)(r, u)
              ? s.Ru.t("In a huddle")
              : u.profile.status_text || "";
          },
        };
        const a = o;
      },
      1651628626: (W, A, e) => {
        "use strict";
        e.d(A, {
          c: () => o,
        });
        var t = e(5797466484),
          n = e(1031947056),
          s = e(6422693406),
          i = e(6333950786),
          d = e(9291336591);
        const o = (0, n.Ay)(
          "Submits changes to the current user\u2019s profile",
          (a, r, c) => {
            let { profile: u, reason: l = "submitProfileChange" } = c;
            if (!(0, t.A)(u)) return s.S.resolve();
            const m = {
                ...u,
              },
              v = r();
            return (
              u.status_text && (m.status_text = (0, i.A)(v, u.status_text)),
              a(
                (0, d.n)({
                  profile: JSON.stringify(m),
                  reason: l,
                })
              )
            );
          }
        );
        o.meta = {
          name: "createThunk",
          key: "createThunksubmitProfileChange",
          description: "Submits changes to the current user\u2019s profile",
        };
      },
      7651407571: (W, A, e) => {
        "use strict";
        e.d(A, {
          p: () => n,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)(
          "Upsert fetched ordered membership list for channel"
        );
        n.meta = {
          name: "createAction",
          key: "createActionupsertFetchedChannelOrderedMemberList",
          description: "Upsert fetched ordered membership list for channel",
        };
      },
      8188087967: (W, A, e) => {
        "use strict";
        e.d(A, {
          GD: () => E,
          Nd: () => g,
        });
        var t = e(3398586081),
          n = e(8352634987),
          s = e(6422693406),
          i = e(6533394955),
          d = e(3339229351),
          o = e(7058495549),
          a = e(8847766420),
          r = e(7651407571),
          c = e(1031947056),
          u = e(8760181906),
          l = e(4949104520),
          m = e(796111729);
        const v = 1e4,
          E = (0, t.A)(
            () =>
              new n.Ay({
                storeKey: "membershipOrdered",
                fetch: (f, y) =>
                  s.S.all(
                    y.map((M) =>
                      (0, i.dispatchForTeamId)(
                        f,
                        I({
                          channelId: M,
                          count: d.Ql,
                        })
                      )
                    )
                  ),
                isEnabled: () => !0,
                metricsName: "member-list",
              })
          ),
          T = (0, c.Ay)(
            "marks objects as stale via CFM for Membership List",
            function (f, y) {
              let { teamId: M, channelId: p } =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : {};
              E().markObjectsAsStale(M, [p]);
            }
          );
        T.meta = {
          name: "createThunk",
          key: "createThunkmarkObjectsAsStale",
          description: "marks objects as stale via CFM for Membership List",
        };
        const g = (0, u.A)(T, (0, l.A)(v, 0, 0.5)),
          I = (0, c.Ay)("Fetches top members for the channel", function (f, y) {
            let { channelId: M, count: p } =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : {};
            return (0, o.ds)(f, y, M, p).then((O) => {
              const C = (0, a.ZT)(y());
              if (!C) {
                (0, m.Wo)().info("MOS", "No teamId found");
                return;
              }
              return (
                E().markObjectsAsFresh(C, [M]),
                f(
                  (0, r.p)({
                    channelId: M,
                    memberList: O,
                  })
                )
              );
            });
          });
        I.meta = {
          name: "createThunk",
          key: "createThunkfetchAndUpsertFirstNMembersForChannel",
          description: "Fetches top members for the channel",
        };
      },
      1794107122: (W, A, e) => {
        "use strict";
        e.d(A, {
          $: () => d,
        });
        var t = e(8161242485),
          n = e(8847766420),
          s = e(8188087967),
          i = e(2689960678);
        const d = (0, t.Ay)((o, a) => {
          const r = (0, n.ZT)(o);
          return (
            r && (0, s.GD)().maybeRefetch(r, a),
            o && o.membershipOrdered && o.membershipOrdered[a]
              ? o.membershipOrdered[a]
              : i.Ml
          );
        });
        d.meta = {
          name: "createSelector",
          key: "createSelectorgetMemberListForChannel",
          description: (o, a) => {
            const r = (0, n.ZT)(o);
            return (
              r && (0, s.GD)().maybeRefetch(r, a),
              o && o.membershipOrdered && o.membershipOrdered[a]
                ? o.membershipOrdered[a]
                : i.Ml
            );
          },
        };
      },
      6562711329: (W, A, e) => {
        "use strict";
        e.d(A, {
          z: () => v,
        });
        var t = e(6422693406),
          n = e(7823346015),
          s = e(8403493408),
          i = e(1031947056),
          d = e(1407713935),
          o = e(8798294025),
          a = e(6533394955),
          r = e(5795074931),
          c = e(8847766420),
          u = e(9101533895),
          l = e(3730613858),
          m = e(2480881364);
        const v = (0, i.Ay)(
          "Gets the channel membership for a set of users and returns a promise when the store is updated accordingly",
          function (E, T) {
            let { channelId: g, userIds: I } =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : {};
            const f = T(),
              [y, M] = (0, n.A)(I, (C) => (0, l.wr)(f, g, C)),
              p = (0, u.OL)(f, g);
            if ((0, d.LI)(p)) {
              const C = (0, o.e)(p),
                h = (0, r.WR)(f);
              (0, s.A)(M, C, h),
                I != null && I.includes(C) && y.push(C),
                I != null && I.includes(h) && y.push(h);
            }
            const O = {};
            return (
              y.forEach((C) => {
                O[C] = (0, l.Ql)(f, g, C);
              }),
              M.length
                ? (0, a.dispatchForTeamId)(
                    (0, c.ZT)(f),
                    (0, m.R)({
                      channelId: g,
                      userIds: M,
                    })
                  ).then((C) =>
                    C && C.payload && C.payload.membershipInfo
                      ? {
                          membershipInfo: {
                            ...C.payload.membershipInfo,
                            ...O,
                          },
                        }
                      : {
                          membershipInfo: O,
                        }
                  )
                : t.S.resolve({
                    membershipInfo: O,
                  })
            );
          }
        );
        v.meta = {
          name: "createThunk",
          key: "createThunkgetChannelMembershipInfoForUsers",
          description:
            "Gets the channel membership for a set of users and returns a promise when the store is updated accordingly",
        };
      },
      5345057011: (W, A, e) => {
        "use strict";
        e.d(A, {
          T: () => n,
          s: () => s,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Add a placeholder to the store");
        n.meta = {
          name: "createAction",
          key: "createActionaddPlaceholder",
          description: "Add a placeholder to the store",
        };
        const s = (0, t.Ay)(
          "Remove a placeholder from the store by client_msg_id"
        );
        s.meta = {
          name: "createAction",
          key: "createActionremovePlaceholder",
          description: "Remove a placeholder from the store by client_msg_id",
        };
      },
      6445408916: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => n,
        });
        var t = e(8161242485);
        const n = (0, t.Ay)((s) =>
          s == null ? void 0 : s.messagePlaceholders
        );
        n.meta = {
          name: "createSelector",
          key: "createSelectorgetAllPlaceholders",
          description: (s) => (s == null ? void 0 : s.messagePlaceholders),
        };
      },
      5774398667: (W, A, e) => {
        "use strict";
        e.d(A, {
          I: () => s,
        });
        var t = e(8161242485),
          n = e(6445408916);
        const s = (0, t.Ay)((i, d) => {
          var o;
          return (o = (0, n.A)(i)) === null || o === void 0 ? void 0 : o[d];
        });
        s.meta = {
          name: "createSelector",
          key: "createSelectorgetPlaceholderByClientMsgId",
          description: (i, d) => {
            var o;
            return (o = (0, n.A)(i)) === null || o === void 0 ? void 0 : o[d];
          },
        };
      },
      6347367879: (W, A, e) => {
        "use strict";
        e.d(A, {
          o: () => n,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Start delete animation for a message");
        n.meta = {
          name: "createAction",
          key: "createActionanimateDeleteMessage",
          description: "Start delete animation for a message",
        };
      },
      1508337910: (W, A, e) => {
        "use strict";
        e.d(A, {
          h: () => d,
        });
        var t = e(8161242485),
          n = e(2689960678);
        const s = (0, t.Ay)((a) => (a == null ? void 0 : a.messagesMeta));
        s.meta = {
          name: "createSelector",
          key: "createSelectorgetMessagesMetaState",
          description: (a) => (a == null ? void 0 : a.messagesMeta),
        };
        var i;
        const d = (0, t.Ay)((a, r) => {
          let { channelId: c, ts: u } = r;
          var l, m;
          return (i =
            (l = s(a)) === null ||
            l === void 0 ||
            (m = l[c]) === null ||
            m === void 0
              ? void 0
              : m[u]) !== null && i !== void 0
            ? i
            : n.t0;
        });
        var o;
        d.meta = {
          name: "createSelector",
          key: "createSelectorgetMessageMetaData",
          description: (a, r) => {
            let { channelId: c, ts: u } = r;
            var l, m;
            return (o =
              (l = s(a)) === null ||
              l === void 0 ||
              (m = l[c]) === null ||
              m === void 0
                ? void 0
                : m[u]) !== null && o !== void 0
              ? o
              : n.t0;
          },
        };
      },
      3521202413: (W, A, e) => {
        "use strict";
        e.d(A, {
          j: () => I,
        });
        var t = e(1031947056),
          n = e(7606781622),
          s = e(9101533895),
          i = e(8289365785),
          d = e(8726613433),
          o = e(8233775522),
          a = e(6347367879),
          r = e(9121476043),
          c = e(9629572172),
          u = e(4096483543),
          l = e(3110884894);
        const m = (0, t.Ay)(
          "Checks if the message is in an active view before doing the animation",
          function (f, y) {
            let {
                channelId: M,
                ts: p,
                threadTs: O,
              } = arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : {},
              C = arguments.length > 3 ? arguments[3] : void 0;
            const h = y(),
              { getViewSet: D } = C(c.U),
              P = !(0, u.A)() || (0, d.T2)(h),
              S = (0, o.ko)(h) && P,
              b = (0, d.Qm)(h);
            var K;
            const { primary: x, secondary: B } =
                (K = D(h)) !== null && K !== void 0 ? K : {},
              U = x == null ? void 0 : x.id,
              R = B == null ? void 0 : B.id,
              G = _(
                () =>
                  f(
                    (0, a.o)({
                      channelId: M,
                      ts: p,
                    })
                  ),
                "doAnimation"
              );
            if (S) {
              if (
                O &&
                (R === "convo" || R === "thread") &&
                (0, i.A)(b) === (0, l.Iu)(M, O)
              ) {
                G();
                return;
              }
              if (U === M) {
                G();
                return;
              }
            }
            f(
              (0, r.A)({
                channelId: M,
                ts: p,
                threadTs: O,
              })
            );
          }
        );
        m.meta = {
          name: "createThunk",
          key: "createThunkmaybeAnimateDeleteMessage",
          description:
            "Checks if the message is in an active view before doing the animation",
        };
        const v = m;
        var E = e(1484767411),
          T = e(1508337910),
          g = e(796111729);
        const I = (0, t.Ay)(
          "Delete a message by channel ID and timestamp",
          function (f, y) {
            let {
              deleted_ts: M,
              channel: p,
              _from_evt_log: O,
              previous_message: C,
            } = arguments.length > 2 && arguments[2] !== void 0
              ? arguments[2]
              : {};
            var h;
            const D = y(),
              P = (0, g.Ay)({
                state: D,
              });
            if (!M) {
              P.error("Error in messageDeleted: no deleted_ts");
              return;
            }
            if (!((0, s.gT)(D, p) && (0, s.OL)(D, p))) {
              P.error(`Unknown channelId: ${p}`);
              return;
            }
            if (
              (h = (0, T.h)(D, {
                channelId: p,
                ts: M,
              })) === null || h === void 0
                ? void 0
                : h.isDeleting
            )
              return;
            const K = !1,
              B = (0, n.Ld)(D, p, M, K) || C;
            f(
              B
                ? v({
                    channelId: p,
                    ts: M,
                    threadTs: B.thread_ts,
                    fromEvtLog: O,
                  })
                : (0, r.A)({
                    channelId: p,
                    ts: M,
                  })
            ),
              f(
                (0, E.o)({
                  channelId: p,
                  ts: M,
                })
              );
          }
        );
        I.meta = {
          name: "createThunk",
          key: "createThunksetMessageDeleted",
          description: "Delete a message by channel ID and timestamp",
        };
      },
      5688490863: (W, A, e) => {
        "use strict";
        e.d(A, {
          J_: () => r,
          QI: () => E,
          Up: () => d,
          V1: () => v,
          Zs: () => a,
          iN: () => i,
          m3: () => o,
          oh: () => l,
          qA: () => u,
          qj: () => m,
          yw: () => c,
        });
        var t = e(2689960678),
          n = e(8161242485);
        const s = (0, n.Ay)((T) => T.modernSelling.salesListViews);
        s.meta = {
          name: "createSelector",
          key: "createSelectorgetSalesListViews",
          description: (T) => T.modernSelling.salesListViews,
        };
        const i = (0, n.Ay)((T) => s(T).listViewActiveObjectOption);
        i.meta = {
          name: "createSelector",
          key: "createSelectorgetListViewActiveObjectOption",
          description: (T) => s(T).listViewActiveObjectOption,
        };
        const d = (0, n.Ay)((T) => {
          var g;
          return (g = s(T)) === null || g === void 0
            ? void 0
            : g.listViewSearchResults;
        });
        d.meta = {
          name: "createSelector",
          key: "createSelectorgetListViewSearchResults",
          description: (T) => {
            var g;
            return (g = s(T)) === null || g === void 0
              ? void 0
              : g.listViewSearchResults;
          },
        };
        const o = (0, n.Ay)((T, g) => {
          var I;
          const f =
            (I = s(T)) === null || I === void 0
              ? void 0
              : I.listViewIdSearchResultsMap;
          return (f == null ? void 0 : f[g]) || t.t0;
        });
        o.meta = {
          name: "createSelector",
          key: "createSelectorgetListViewObjectMapByOrg",
          description: (T, g) => {
            var I;
            const f =
              (I = s(T)) === null || I === void 0
                ? void 0
                : I.listViewIdSearchResultsMap;
            return (f == null ? void 0 : f[g]) || t.t0;
          },
        };
        const a = (0, n.Ay)((T, g, I) => o(T, g)[I] || t.Ml);
        a.meta = {
          name: "createSelector",
          key: "createSelectorgetListViewIdsByOrgAndObject",
          description: (T, g, I) => o(T, g)[I] || t.Ml,
        };
        const r = (0, n.Ay)((T) => {
          var g;
          return (
            ((g = s(T)) === null || g === void 0
              ? void 0
              : g.listViewActiveSearchResultIds) || t.Ml
          );
        });
        r.meta = {
          name: "createSelector",
          key: "createSelectorgetListViewActiveSearchResultIds",
          description: (T) => {
            var g;
            return (
              ((g = s(T)) === null || g === void 0
                ? void 0
                : g.listViewActiveSearchResultIds) || t.Ml
            );
          },
        };
        const c = (0, n.Ay)((T) => {
          var g;
          return (g = s(T)) === null || g === void 0
            ? void 0
            : g.listViewActiveSearchQuery;
        });
        c.meta = {
          name: "createSelector",
          key: "createSelectorgetListViewActiveSearchQuery",
          description: (T) => {
            var g;
            return (g = s(T)) === null || g === void 0
              ? void 0
              : g.listViewActiveSearchQuery;
          },
        };
        const u = (0, n.Ay)((T) => {
          var g;
          return (
            ((g = s(T)) === null || g === void 0
              ? void 0
              : g.adminSuggestedListViews) || t.Ml
          );
        });
        u.meta = {
          name: "createSelector",
          key: "createSelectorgetAdminSuggestedListViewsForSidebar",
          description: (T) => {
            var g;
            return (
              ((g = s(T)) === null || g === void 0
                ? void 0
                : g.adminSuggestedListViews) || t.Ml
            );
          },
        };
        const l = (0, n.Ay)((T) => {
          var g;
          return (g = s(T)) === null || g === void 0
            ? void 0
            : g.areAdminSuggestedListViewsForSidebarFresh;
        });
        l.meta = {
          name: "createSelector",
          key: "createSelectorgetAreAdminSuggestedListViewsForSidebarFresh",
          description: (T) => {
            var g;
            return (g = s(T)) === null || g === void 0
              ? void 0
              : g.areAdminSuggestedListViewsForSidebarFresh;
          },
        };
        const m = (0, n.Ay)((T) => {
          var g;
          return (g = s(T)) === null || g === void 0
            ? void 0
            : g.adminConfiguredObjects;
        });
        m.meta = {
          name: "createSelector",
          key: "createSelectorgetAdminConfiguredObjects",
          description: (T) => {
            var g;
            return (g = s(T)) === null || g === void 0
              ? void 0
              : g.adminConfiguredObjects;
          },
        };
        const v = (0, n.Ay)((T) => {
          var g;
          return (g = s(T)) === null || g === void 0
            ? void 0
            : g.selectedExplorerRowListViewId;
        });
        v.meta = {
          name: "createSelector",
          key: "createSelectorgetSelectedExplorerRowListViewId",
          description: (T) => {
            var g;
            return (g = s(T)) === null || g === void 0
              ? void 0
              : g.selectedExplorerRowListViewId;
          },
        };
        const E = (0, n.Ay)((T) => {
          var g;
          return (g = s(T)) === null || g === void 0
            ? void 0
            : g.selectedExplorerRowListViewType;
        });
        E.meta = {
          name: "createSelector",
          key: "createSelectorgetSelectedExplorerRowListViewType",
          description: (T) => {
            var g;
            return (g = s(T)) === null || g === void 0
              ? void 0
              : g.selectedExplorerRowListViewType;
          },
        };
      },
      8149648525: (W, A, e) => {
        "use strict";
        e.d(A, {
          b: () => r,
        });
        var t = e(5104468117),
          n = e(8956161330),
          s = e(1031947056),
          i = e(7146087658),
          d = e(5688490863),
          o = e(1670025826),
          a = e(146149780);
        const r = (0, s.Ay)("Search list views by query", (c, u, l) => {
          let {
            isFullSearch: m = !1,
            objectType: v,
            query: E,
            salesforceOrgId: T,
          } = l;
          const g = u(),
            I = m ? t.Iq : t.TD,
            f = (0, n.Qb)(g);
          let y;
          return (
            v ? (y = [v]) : (y = (0, d.qj)(g).map((p) => p.sobject_api_name)),
            c(
              (0, o.R)({
                limit: I,
                listviewObjectScopes: y,
                query: E,
                sobjects: [
                  {
                    sobjectApiName: "ListView",
                    fields: ["Name", "LastViewedDate", "SobjectType"],
                  },
                ],
                salesforceOrgId: T,
                reason: "list_view_search",
              })
            ).then((M) => {
              let { records: p } = M;
              const O = p.map((h) => ({
                  id: h.value,
                  label: h.label,
                  lastViewedDate: f ? void 0 : h.extras.LastViewedDate,
                  objectType: h.extras.SobjectType,
                  salesforceOrgId: T,
                })),
                C = c(
                  (0, a.x)({
                    listViews: O,
                    salesforceOrgId: T,
                  })
                );
              return m && c((0, i.hA)(C)), O;
            })
          );
        });
        r.meta = {
          name: "createThunk",
          key: "createThunksearchListViews",
          description: "Search list views by query",
        };
      },
      146149780: (W, A, e) => {
        "use strict";
        e.d(A, {
          x: () => s,
        });
        var t = e(1031947056),
          n = e(7146087658);
        const s = (0, t.Ay)(
          "Upsert list views fetched by search or other API",
          (i, d, o) => {
            let { listViews: a, salesforceOrgId: r } = o;
            const c = [],
              u = {},
              l = {};
            return (
              a.forEach((m) => {
                const v = m.id,
                  E = m.objectType;
                (u[v] = {
                  id: v,
                  label: m.label,
                  lastViewedDate: m.lastViewedDate,
                  objectType: E,
                  salesforceOrgId: r,
                  url: m.url,
                }),
                  (l[E] = l[E] || []),
                  l[E].push(v),
                  c.push(v);
              }),
              i((0, n.TO)(u)),
              i(
                (0, n.KT)({
                  salesforceOrgId: r,
                  listViewObjMap: l,
                })
              ),
              c
            );
          }
        );
        s.meta = {
          name: "createThunk",
          key: "createThunkupsertFetchedListViews",
          description: "Upsert list views fetched by search or other API",
        };
      },
      2413251042: (W, A, e) => {
        "use strict";
        e.d(A, {
          p$: () => n,
          rB: () => s,
          x8: () => i,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)(
          "Set whether inverted sidebar was enabled before starting BBM"
        );
        n.meta = {
          name: "createAction",
          key: "createActionsetInvertedSidebarInternal",
          description:
            "Set whether inverted sidebar was enabled before starting BBM",
        };
        const s = (0, t.Ay)(
          "Set whether peeks were enabled on mouse enter before starting BBM"
        );
        s.meta = {
          name: "createAction",
          key: "createActionsetPeeksEnabledOnMouseEnterInternal",
          description:
            "Set whether peeks were enabled on mouse enter before starting BBM",
        };
        const i = (0, t.Ay)(
          "Set what zoom value was set in the client before starting BBM"
        );
        i.meta = {
          name: "createAction",
          key: "createActionsetZoomInternal",
          description:
            "Set what zoom value was set in the client before starting BBM",
        };
      },
      6303140164: (W, A, e) => {
        "use strict";
        e.d(A, {
          UY: () => s,
          Vb: () => t,
          _J: () => n,
        });
        const t = "slack-inverted-sidebar-initial-setting",
          n = "slack-peeks-enabled-on-mouse-enter-initial-setting",
          s = "slack-zoom-initial-setting";
      },
      1838435986: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => c,
        });
        var t = e(4423055085),
          n = e(9139930183),
          s = e(2140362605);
        const i = (0, s.Ay)("NOOP");
        i.meta = {
          name: "createAction",
          key: "createActionnoopAction",
          description: "NOOP",
        };
        var d = e(6533394955),
          o = e(1642614792);
        const a = 0,
          c = (0, n.Ay)({}, a, {
            storeKey: "noop",
            persistenceEnabled: !1,
          }).on(i, (u) => u + 1);
        (0, t.ul)("dispatchNoop", () => {
          (0, d.dispatchForTeamId)((0, o.oI)(), i());
        });
      },
      4309043566: (W, A, e) => {
        "use strict";
        e.d(A, {
          l: () => n,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)(
          "Relay observed overlays state from OverlaysContextProvider to Redux"
        );
        n.meta = {
          name: "createAction",
          key: "createActionrelayOverlays",
          description:
            "Relay observed overlays state from OverlaysContextProvider to Redux",
        };
      },
      3180420025: (W, A, e) => {
        "use strict";
        e.d(A, {
          y: () => o,
        });
        var t = e(2384831516),
          n = e(4309043566),
          s = e(2689960678);
        const i = s.t0,
          d = {
            persistenceEnabled: !1,
            storeKey: "overlays",
          },
          o = (0, t.vy)({}, i, d).on(n.l, (a, r) => r);
      },
      983004675: (W, A, e) => {
        "use strict";
        e.d(A, {
          OI: () => a,
          cg: () => s,
          kK: () => n,
          ot: () => o,
          qH: () => d,
          us: () => i,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Sets the current loading state for a channel");
        n.meta = {
          name: "createAction",
          key: "createActionsetLoadingState",
          description: "Sets the current loading state for a channel",
        };
        const s = (0, t.Ay)(
          "Adds pinned item identifiers for files and messages to list of pinned items"
        );
        s.meta = {
          name: "createAction",
          key: "createActionaddPinnedItems",
          description:
            "Adds pinned item identifiers for files and messages to list of pinned items",
        };
        const i = (0, t.Ay)(
          "Remove an item from the pinned items list for a channel"
        );
        i.meta = {
          name: "createAction",
          key: "createActionremovePinnedItem",
          description:
            "Remove an item from the pinned items list for a channel",
        };
        const d = (0, t.Ay)(
          "Adds a pinned item to the beginning of the pinned items list (used for pinning an item in the UI)"
        );
        d.meta = {
          name: "createAction",
          key: "createActionprependPinnedItem",
          description:
            "Adds a pinned item to the beginning of the pinned items list (used for pinning an item in the UI)",
        };
        const o = (0, t.Ay)(
          "Clears the existing pinned items for a channel and sets the loading state"
        );
        o.meta = {
          name: "createAction",
          key: "createActionclearPinnedItems",
          description:
            "Clears the existing pinned items for a channel and sets the loading state",
        };
        const a = (0, t.Ay)(
          "Sets the scrollTop value of the pins popover so that it can be opened to the same spot again"
        );
        a.meta = {
          name: "createAction",
          key: "createActionsetPopoverScrollTop",
          description:
            "Sets the scrollTop value of the pins popover so that it can be opened to the same spot again",
        };
      },
      4352409775: (W, A, e) => {
        "use strict";
        e.d(A, {
          G: () => a,
        });
        var t = e(3398586081),
          n = e(6422693406),
          s = e(8352634987),
          i = e(6533394955),
          d = e(983004675),
          o = e(6701536972);
        const a = (0, t.A)(
          () =>
            new s.Ay({
              storeKey: "pins",
              fetch: (r, c) =>
                n.S.map(
                  c,
                  (u) => (
                    (0, i.dispatchForTeamId)(
                      r,
                      (0, d.ot)({
                        channelId: u,
                      })
                    ),
                    (0, i.dispatchForTeamId)(
                      r,
                      (0, o.b)({
                        channelId: u,
                      })
                    )
                  )
                ),
              isEnabled: () => !0,
              metricsName: "pins",
            })
        );
      },
      6247263305: (W, A, e) => {
        "use strict";
        e.d(A, {
          R: () => t,
          b: () => n,
        });
        const t = {
            FILE: "file",
            FILE_COMMENT: "file_comment",
            MESSAGE: "message",
          },
          n = {
            NOT_LOADED: void 0,
            LOADING: "loading",
            LOADED: "loaded",
          };
      },
      7158699554: (W, A, e) => {
        "use strict";
        e.d(A, {
          $U: () => u,
          A_: () => l,
          Wt: () => m,
          YG: () => E,
          c7: () => v,
          jR: () => c,
        });
        var t = e(2384831516),
          n = e(8847766420),
          s = e(7606781622),
          i = e(6457401668),
          d = e(937317117),
          o = e(4352409775),
          a = e(6247263305),
          r = e(4813703725);
        const c = (0, t.Mz)(function (g, I) {
          let { refetchIfNeeded: f = !0 } =
            arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          if (f) {
            const y = (0, n.ZT)(g);
            (0, o.G)().maybeRefetch(y, I);
          }
          return g && g.pins && g.pins.pinsByChannel[I];
        });
        c.meta = {
          name: "createSelector",
          key: "createSelectorgetPinnedItemsForChannel",
          description: function (g, I) {
            let { refetchIfNeeded: f = !0 } =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : {};
            if (f) {
              const y = (0, n.ZT)(g);
              (0, o.G)().maybeRefetch(y, I);
            }
            return g && g.pins && g.pins.pinsByChannel[I];
          },
        };
        const u = (0, t.Mz)((g, I) => {
          var f, y;
          return g && g.pins && g.pins.pinsByChannel[I]
            ? (f = g.pins.pinsByChannel) === null ||
              f === void 0 ||
              (y = f[I]) === null ||
              y === void 0
              ? void 0
              : y.length
            : 0;
        });
        u.meta = {
          name: "createSelector",
          key: "createSelectorgetPinCountForChannel",
          description: (g, I) => {
            var f, y;
            return g && g.pins && g.pins.pinsByChannel[I]
              ? (f = g.pins.pinsByChannel) === null ||
                f === void 0 ||
                (y = f[I]) === null ||
                y === void 0
                ? void 0
                : y.length
              : 0;
          },
        };
        const l = (0, t.Mz)(
          (g, I) => g && g.pins && g.pins.loadingStateByChannel[I]
        );
        l.meta = {
          name: "createSelector",
          key: "createSelectorgetLoadingState",
          description: (g, I) => g && g.pins && g.pins.loadingStateByChannel[I],
        };
        const m = (0, t.Mz)((g, I) => {
          let { channelId: f, ts: y } = I;
          const M = !1,
            p = (0, s.Ld)(g, f, y, M);
          if (!p) return !1;
          if ((0, i.m)(p) && p.comment) {
            const O = (0, d.yd)(g, p.file, p.comment.id);
            return O ? !!(O.pinned_to && O.pinned_to.includes(f)) : !1;
          }
          return !!(p.pinned_to && p.pinned_to.includes(f));
        });
        m.meta = {
          name: "createSelector",
          key: "createSelectorisMessagePinned",
          description: (g, I) => {
            let { channelId: f, ts: y } = I;
            const M = !1,
              p = (0, s.Ld)(g, f, y, M);
            if (!p) return !1;
            if ((0, i.m)(p) && p.comment) {
              const O = (0, d.yd)(g, p.file, p.comment.id);
              return O ? !!(O.pinned_to && O.pinned_to.includes(f)) : !1;
            }
            return !!(p.pinned_to && p.pinned_to.includes(f));
          },
        };
        const v = _((g, I) => {
            switch (I.type) {
              case a.R.MESSAGE:
                return {
                  ...(0, s.Ld)(g, I.channel, I.ts),
                  type: a.R.MESSAGE,
                };
              case a.R.FILE:
                return {
                  ...(0, d.Lp)(g, I.id),
                  type: a.R.FILE,
                };
              case a.R.FILE_COMMENT:
                return {
                  ...(0, d.yd)(g, I.fileId, I.id),
                  fileId: I.fileId,
                  type: a.R.FILE_COMMENT,
                };
              default:
                return {};
            }
          }, "getItemWithPinIdentifier"),
          E = (0, r.eI)((g, I) => {
            const f = c(g, I);
            return f ? f.map((y) => v(g, y)) : [];
          }),
          T = (0, t.Mz)((g) => g && g.pins && g.pins.popoverScrollTop);
        T.meta = {
          name: "createSelector",
          key: "createSelectorgetPopoverScrollTop",
          description: (g) => g && g.pins && g.pins.popoverScrollTop,
        };
      },
      6701536972: (W, A, e) => {
        "use strict";
        e.d(A, {
          b: () => E,
        });
        var t = e(796111729),
          n = e(9109082163),
          s = e(474652310),
          i = e(1031947056),
          d = e(8847766420),
          o = e(6403218297),
          a = e(6665892446),
          r = e(10127715),
          c = e(6247263305),
          u = e(983004675),
          l = e(1581380967),
          m = e(4352409775),
          v = e(5792544570);
        const E = (0, i.Ay)(
          "Fetch pinned items list for channel",
          (T, g, I) => {
            const f = I.channelId;
            return (
              T(
                (0, u.kK)({
                  loadingState: c.b.LOADING,
                  channelId: f,
                })
              ),
              T(
                (0, n.xs)({
                  reason: "fetchPinsList",
                  ...I,
                })
              )
                .then(function () {
                  let { items: y } =
                    arguments.length > 0 && arguments[0] !== void 0
                      ? arguments[0]
                      : {};
                  const M = y
                      .filter((C) => C.type.includes(c.R.FILE))
                      .map((C) => {
                        if (C.type === c.R.FILE_COMMENT) {
                          const { comment: h, file: D, ...P } = C,
                            S = (0, o.A)(h, D);
                          return {
                            ...P,
                            file: S,
                          };
                        }
                        return C;
                      }),
                    p = y.filter((C) => C.type === c.R.MESSAGE);
                  if (M.length) {
                    const C = M.filter((D) => D.type !== c.R.FILE_COMMENT),
                      h = M.filter((D) => D.type === c.R.FILE_COMMENT);
                    T(
                      (0, s.b)({
                        files: C.map((D) => D.file),
                      })
                    ),
                      T(
                        (0, s.b)({
                          files: h.map((D) => D.file),
                        })
                      );
                  }
                  if (p.length) {
                    const C = p.map((D) => {
                        let { message: P } = D;
                        return P;
                      }),
                      h = T(
                        (0, a.A)({
                          imsgs: C,
                          channelId: f,
                        })
                      );
                    T((0, r.Kc)(h));
                  }
                  T(
                    (0, l.K)({
                      channelId: f,
                      count: y.length,
                    })
                  ),
                    T(
                      (0, u.cg)({
                        items: y.map(v.B),
                        channelId: f,
                      })
                    ),
                    T(
                      (0, u.kK)({
                        loadingState: c.b.LOADED,
                        channelId: f,
                      })
                    );
                  const O = (0, d.ZT)(g());
                  (0, m.G)().markObjectsAsFresh(O, [f]);
                })
                .catch((y) => {
                  throw (
                    (T(
                      (0, u.kK)({
                        loadingState: c.b.NOT_LOADED,
                        channelId: f,
                      })
                    ),
                    (0, t.Ay)({
                      getState: g,
                    }).error(`Error in fetchPinsList: ${JSON.stringify(y)}`),
                    y)
                  );
                })
            );
          }
        );
        E.meta = {
          name: "createThunk",
          key: "createThunkfetchPinsList",
          description: "Fetch pinned items list for channel",
        };
      },
      1581380967: (W, A, e) => {
        "use strict";
        e.d(A, {
          K: () => a,
        });
        var t = e(1031947056),
          n = e(9606603587),
          s = e(9101533895),
          i = e(796111729),
          d = e(6247263305),
          o = e(7158699554);
        const a = (0, t.Ay)("update a pin count for a channel", (r, c, u) => {
          let { channelId: l, count: m, forceUpdate: v = !1 } = u;
          const E = c(),
            T = {
              ...(0, s.OL)(E, l),
            },
            g = (0, o.jR)(E, l, {
              refetchIfNeeded: !1,
            }),
            I = (0, o.A_)(E, l),
            f = !v && I === d.b.LOADED ? (g == null ? void 0 : g.length) : m;
          if (f === T.pinned_items_count) return;
          (0, i.Ay)({
            state: E,
          }).info("PINS", `Pins count updated for channel ${l}: ${f}`);
          const y = {
            ...T,
            pinned_items_count: f,
          };
          r(
            (0, n.B)({
              channel: y,
            })
          );
        });
        a.meta = {
          name: "createThunk",
          key: "createThunkupdatePinCount",
          description: "update a pin count for a channel",
        };
      },
      5792544570: (W, A, e) => {
        "use strict";
        e.d(A, {
          B: () => n,
        });
        var t = e(6247263305);
        const n = _((s) => {
          switch (s.type) {
            case t.R.MESSAGE:
              var i;
              return {
                type: s.type,
                channel: s.channel,
                ts: (i = s.message) === null || i === void 0 ? void 0 : i.ts,
              };
            case t.R.FILE:
              var d, o;
              return {
                type: s.type,
                id: s.file
                  ? s.file.id
                  : (d = s.files) === null ||
                    d === void 0 ||
                    (o = d[0]) === null ||
                    o === void 0
                  ? void 0
                  : o.id,
              };
            case t.R.FILE_COMMENT:
              var a;
              return {
                type: s.type,
                id: s.comment.id,
                fileId: (a = s.file) === null || a === void 0 ? void 0 : a.id,
              };
            default:
              return {};
          }
        }, "formatPinFromAPI");
      },
      4079686795: (W, A, e) => {
        "use strict";
        e.d(A, {
          j: () => s,
          z: () => n,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Set a channel pref");
        n.meta = {
          name: "createAction",
          key: "createActionsetChannelPref",
          description: "Set a channel pref",
        };
        const s = (0, t.Ay)("Bulk set channel prefs");
        s.meta = {
          name: "createAction",
          key: "createActionbulkSetChannelsPrefs",
          description: "Bulk set channel prefs",
        };
      },
      1523378513: (W, A, e) => {
        "use strict";
        e.d(A, {
          E: () => r,
          d: () => a,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(1031947056),
          i = e(4446301238),
          d = e(8243083011),
          o = e(4079686795);
        const a = (0, s.Ay)(
          "Fetch and upsert channel pref data",
          (function () {
            var c = (0, t.coroutine)(function* (u, l, m) {
              let { channelId: v, prefName: E, reason: T } = m;
              if (E === "enable_at_channel" && !(0, d.q)(l(), v)) return;
              const g = yield u(
                (0, i.d9)({
                  channelId: v,
                  prefName: E,
                  reason: T || "fetch-channel-pref",
                })
              );
              u(
                (0, o.z)({
                  channelId: v,
                  pref: E,
                  value: g == null ? void 0 : g.pref_value,
                })
              );
            });
            return function (u, l, m) {
              return c.apply(this, arguments);
            };
          })()
        );
        a.meta = {
          name: "createThunk",
          key: "createThunkgetChannelPref",
          description: "Fetch and upsert channel pref data",
        };
        const r = (0, s.Ay)(
          "Set and upsert channel pref data",
          (function () {
            var c = (0, t.coroutine)(function* (u, l, m) {
              let { channelId: v, newPrefs: E, reason: T } = m;
              const g = yield u(
                  (0, i.E9)({
                    channelId: v,
                    newPrefs: E,
                    reason: T || "set-channel-prefs",
                  })
                ),
                I = {
                  [v]: g.prefs,
                };
              u((0, o.j)(I));
            });
            return function (u, l, m) {
              return c.apply(this, arguments);
            };
          })()
        );
        r.meta = {
          name: "createThunk",
          key: "createThunksetChannelPrefs",
          description: "Set and upsert channel pref data",
        };
      },
      7665060966: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => i,
        });
        var t = e(8161242485),
          n = e(2047021170);
        const s = (0, t.Ay)((d) =>
          (0, n.ty)(d, "messages_theme") === "dense" ? "dense" : "light"
        );
        s.meta = {
          name: "createSelector",
          key: "createSelectorgetUserMessagesTheme",
          description: (d) =>
            (0, n.ty)(d, "messages_theme") === "dense" ? "dense" : "light",
        };
        const i = s;
      },
      1317368584: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => o,
        });
        var t = e(8161242485),
          n = e(9599231336),
          s = e(2047021170),
          i = e(7665060966);
        const d = (0, t.Ay)(
          (a) =>
            !(0, n.P)(a) &&
            !!(0, s.ty)(a, "jumbomoji") &&
            (0, i.A)(a) !== "dense"
        );
        d.meta = {
          name: "createSelector",
          key: "createSelectorshouldDisplayJumbomoji",
          description: (a) =>
            !(0, n.P)(a) &&
            !!(0, s.ty)(a, "jumbomoji") &&
            (0, i.A)(a) !== "dense",
        };
        const o = d;
      },
      7520484642: (W, A, e) => {
        "use strict";
        e.d(A, {
          $n: () => E,
          DS: () => n,
          Eu: () => c,
          JB: () => v,
          Lk: () => T,
          QU: () => I,
          UR: () => d,
          Ye: () => u,
          aF: () => g,
          cl: () => a,
          dz: () => i,
          gJ: () => l,
          mC: () => o,
          mo: () => r,
          wt: () => s,
          zG: () => m,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Switch currently active plan");
        n.meta = {
          name: "createAction",
          key: "createActionswitchPlans",
          description: "Switch currently active plan",
        };
        const s = (0, t.Ay)("Successfully fetched available plans");
        s.meta = {
          name: "createAction",
          key: "createActionplansFetchSuccess",
          description: "Successfully fetched available plans",
        };
        const i = (0, t.Ay)("Successfully fetched cost for current plan");
        i.meta = {
          name: "createAction",
          key: "createActioncostFetchSuccess",
          description: "Successfully fetched cost for current plan",
        };
        const d = (0, t.Ay)("Successfully fetched cost for current addon");
        d.meta = {
          name: "createAction",
          key: "createActionaddonsCostFetchSuccess",
          description: "Successfully fetched cost for current addon",
        };
        const o = (0, t.Ay)("Received an API error");
        o.meta = {
          name: "createAction",
          key: "createActionsetErrorState",
          description: "Received an API error",
        };
        const a = (0, t.Ay)("Plans and cost data loaded");
        a.meta = {
          name: "createAction",
          key: "createActionplansAndCostDataLoaded",
          description: "Plans and cost data loaded",
        };
        const r = (0, t.Ay)("Mark plans and cost data as not loaded");
        r.meta = {
          name: "createAction",
          key: "createActionmarkPlansAndCostDataAsNotLoaded",
          description: "Mark plans and cost data as not loaded",
        };
        const c = (0, t.Ay)("Set Plan Level");
        c.meta = {
          name: "createAction",
          key: "createActionsetPlanLevel",
          description: "Set Plan Level",
        };
        const u = (0, t.Ay)("Set Payment Method");
        u.meta = {
          name: "createAction",
          key: "createActionsetPaymentMethod",
          description: "Set Payment Method",
        };
        const l = (0, t.Ay)("Update Is Plans Data Loading");
        l.meta = {
          name: "createAction",
          key: "createActionupdateIsPlansDataLoading",
          description: "Update Is Plans Data Loading",
        };
        const m = (0, t.Ay)("Update Is Cost Data Loading");
        m.meta = {
          name: "createAction",
          key: "createActionupdateIsCostDataLoading",
          description: "Update Is Cost Data Loading",
        };
        const v = (0, t.Ay)("Load Plans Page Boot Data Success");
        v.meta = {
          name: "createAction",
          key: "createActionloadPlansPageBootDataSuccess",
          description: "Load Plans Page Boot Data Success",
        };
        const E = (0, t.Ay)("Mark plans page boot data as not loaded");
        E.meta = {
          name: "createAction",
          key: "createActionmarkPlansPageBootDataAsNotLoaded",
          description: "Mark plans page boot data as not loaded",
        };
        const T = (0, t.Ay)("Mark plan payment status data as not loaded");
        T.meta = {
          name: "createAction",
          key: "createActionmarkPlanStatusDataAsNotLoaded",
          description: "Mark plan payment status data as not loaded",
        };
        const g = (0, t.Ay)(
          "Set when toggling between base plan and Slack AI on plans page"
        );
        g.meta = {
          name: "createAction",
          key: "createActionsetIsSlackAiToggleSelected",
          description:
            "Set when toggling between base plan and Slack AI on plans page",
        };
        const I = (0, t.Ay)("Team plan status loaded");
        I.meta = {
          name: "createAction",
          key: "createActionteamPlanStatusFetchSuccess",
          description: "Team plan status loaded",
        };
      },
      4005238080: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
        });
        var t = e(1031947056),
          n = e(165535451),
          s = e(7520484642);
        const i = (0, t.Ay)(
          "Load Plans Page Boot Data",
          (o) => (o((0, s.$n)()), o((0, n.ib)()).then((a) => o((0, s.JB)(a))))
        );
        i.meta = {
          name: "createThunk",
          key: "createThunkloadPlansPageBootData",
          description: "Load Plans Page Boot Data",
        };
        const d = i;
      },
      962959561: (W, A, e) => {
        "use strict";
        e.d(A, {
          L9: () => v,
          aJ: () => l,
        });
        var t = e(8161242485),
          n = e(7268021173),
          s = e(3677514771),
          i = e(6839188756),
          d = e(6323355797),
          o = e(5773584938),
          a = e(3245843483);
        const r = [
            {
              promoType: d.ZO.PaidFeatureTrial,
              promoSubtype: d.zG.MessageLimit,
            },
            {
              promoType: d.ZO.PaidFeatureTrial,
              promoSubtype: d.zG.Vhq,
            },
            {
              promoType: d.ZO.PaidFeatureTrial,
              promoSubtype: d.zG.Canvas,
            },
            {
              promoType: d.ZO.PaidFeatureTrial,
              promoSubtype: d.zG.SharedChannels,
            },
            {
              promoType: d.ZO.GlobalEntrypointTrial,
            },
          ],
          c = (0, t.Ay)((T) =>
            r.some((g) => {
              let { promoType: I, promoSubtype: f } = g;
              return (0, n.G)(T, I, f);
            })
          );
        c.meta = {
          name: "createSelector",
          key: "createSelectorisCurrentTrialEligiblePromoCampaign",
          description: (T) =>
            r.some((g) => {
              let { promoType: I, promoSubtype: f } = g;
              return (0, n.G)(T, I, f);
            }),
        };
        const u = (0, t.Ay)((T) =>
          r.some((g) => {
            let { promoType: I, promoSubtype: f } = g;
            return (0, n.hq)(T, I, f);
          })
        );
        u.meta = {
          name: "createSelector",
          key: "createSelectorisEligiblePromoCampaign",
          description: (T) =>
            r.some((g) => {
              let { promoType: I, promoSubtype: f } = g;
              return (0, n.hq)(T, I, f);
            }),
        };
        const l = _((T) => {
            let { campaignType: g, campaignSubType: I } = T;
            return r.some((f) => {
              let { promoType: y, promoSubtype: M } = f;
              return y === g && M === I;
            });
          }, "checkIfEligiblePromoCampaign"),
          m = (0, t.Ay)((T) => {
            const g = (0, s.H7)(T);
            return !(0, i.tc)(g) && (0, n.tV)(T) && c(T) && (0, o.Ii)(T);
          });
        m.meta = {
          name: "createSelector",
          key: "createSelectorisCurrentlyOnAutoChargeFeatureTrial",
          description: (T) => {
            const g = (0, s.H7)(T);
            return !(0, i.tc)(g) && (0, n.tV)(T) && c(T) && (0, o.Ii)(T);
          },
        };
        const v = (0, t.Ay)(function (T) {
          let g =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : !1,
            I =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : !1;
          const f = (0, s.H7)(T);
          return (
            !(0, a.Z9F)() &&
            (0, i.tc)(f) &&
            !(0, n.iH)(T) &&
            (I || u(T)) &&
            (g || (0, o.Ii)(T))
          );
        });
        v.meta = {
          name: "createSelector",
          key: "createSelectorisEligibleAutoChargeFeatureTrial",
          description: function (T) {
            let g =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : !1,
              I =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : !1;
            const f = (0, s.H7)(T);
            return (
              !(0, a.Z9F)() &&
              (0, i.tc)(f) &&
              !(0, n.iH)(T) &&
              (I || u(T)) &&
              (g || (0, o.Ii)(T))
            );
          },
        };
        const E = (0, t.Ay)((T) => v(T) && (0, d.jo)());
        E.meta = {
          name: "createSelector",
          key: "createSelectorisEligibleAutoChargeAndCheckoutRoute",
          description: (T) => v(T) && (0, d.jo)(),
        };
      },
      5512605238: (W, A, e) => {
        "use strict";
        e.d(A, {
          F: () => n,
        });
        var t = e(8161242485);
        const n = (0, t.Ay)(
          (s) => s && s.promo && s.promo.showTrialStartedCelebration
        );
        n.meta = {
          name: "createSelector",
          key: "createSelectorgetShowTrialStartedCelebration",
          description: (s) =>
            s && s.promo && s.promo.showTrialStartedCelebration,
        };
      },
      3825145648: (W, A, e) => {
        "use strict";
        e.d(A, {
          r: () => S,
        });
        var t = e(9706240641),
          n = e(5824283093),
          s = e(6122756707),
          i = e(5220162857),
          d = e(8576613356),
          o = e(7115655993),
          a = e(677609895),
          r = e(6084388622),
          c = e(8739505998),
          u = e(735940183),
          l = e(698347924),
          m = e(6323355797),
          v = e(2562405183),
          E = e(9003400431),
          T = e(3554387543),
          g = e(3810478625),
          I = e(4005238080),
          f = e(3677514771),
          y = e(3366751172),
          M = e.n(y);
        const p = new u.Ay("trials");
        function O(b) {
          let {
            onCloseModal: K,
            entryPoint: x,
            isEligibleForTrial: B,
            experimentPaidFeatureTrialAutoChargeGroupTreatment: U,
            promoType: R,
            promoSubtype: G,
          } = b;
          const H = (0, s.wA)(),
            F = (0, n.useCallback)(() => H((0, E.O)()), [H]),
            V = (0, v.d4)(f.H7),
            X = (0, v.d4)(g.g),
            q = (0, v.d4)(T.Pr),
            oe = (0, v.d4)(T.nc),
            z = (0, v.d4)((N) =>
              (0, T.MO)(N, m.i6.standard.name, m.ck.monthly)
            ),
            Ae = (0, v.d4)((N) =>
              (0, T.UO)(N, m.i6.standard.name, m.ck.monthly)
            ),
            ae = (0, v.d4)(a.X),
            de = z
              ? (0, l.ZV)(z, (0, u.Yp)(), {
                  style: "currency",
                  currency: oe,
                  currencyDisplay: "symbol",
                })
              : void 0,
            ve = (0, m.tc)(V, R, G),
            Se = (0, m.Qn)({
              team: V,
              productId: Ae,
              excludeDomain: !0,
              entryPoint: R,
            }),
            Ee = (0, m.hZ)({
              entryPoint: R,
            }),
            be = (0, n.useCallback)(
              () =>
                (0, i.L_)({
                  experimentPnpE2eGroupOn: X,
                }).map((w) => ({
                  id: w.iconName,
                  header: w.title,
                  description: w.text,
                  iconProps: {
                    name: w.iconName,
                  },
                  imageAlt: w.title,
                  imageSrc: i.XC[w.iconName],
                  getAnimationImport: i.wj[w.iconName],
                })),
              [X]
            );
          (0, o.A)(() => {
            q || H((0, I.A)());
          });
          const Ce = (0, n.useMemo)(
              () =>
                ae
                  ? n.createElement(
                      n.Fragment,
                      null,
                      n.createElement(
                        r.z9,
                        {
                          href: Se,
                          type: "primary",
                          className: M().cta,
                        },
                        U ? p.t("Upgrade to Pro") : ""
                      ),
                      n.createElement(
                        c.A,
                        {
                          href: Ee,
                          className: M().link,
                        },
                        U ? p.t("View all paid features") : ""
                      )
                    )
                  : n.createElement(
                      r.z9,
                      {
                        href: Ee,
                        className: M().cta,
                      },
                      U ? p.t("View all paid features") : ""
                    ),
              [ae, U, Ee, Se]
            ),
            Z = (0, n.useMemo)(
              () =>
                n.createElement(
                  "div",
                  {
                    className: M().footer,
                  },
                  B && ae
                    ? n.createElement(
                        n.Fragment,
                        null,
                        n.createElement(
                          r.z9,
                          {
                            href: ve,
                            type: "primary",
                            className: M().cta,
                          },
                          U
                            ? p.rt(
                                "Try Slack Pro <span>Free for 30 days</span>",
                                null,
                                (N) => {
                                  let { text: L } = N;
                                  return n.createElement(
                                    "span",
                                    {
                                      className: M().light,
                                    },
                                    L
                                  );
                                }
                              )
                            : ""
                        ),
                        n.createElement(
                          "p",
                          {
                            className: M().disclaimer,
                          },
                          q && U
                            ? p.rt("{price} per person/month after trial. ", {
                                price: de,
                              })
                            : "",
                          U ? p.t("Cancel anytime.") : ""
                        )
                      )
                    : Ce
                ),
              [U, Ce, de, B, q, ve, ae]
            );
          let $ = U
            ? p.t(
                "Explore the premium features of our most popular plan with a free 30-day trial."
              )
            : "";
          return (
            (!B || !ae) &&
              ($ = U
                ? p.t(
                    "Get access to the premium features of our most popular plan."
                  )
                : ""),
            n.createElement(d.C, {
              closeModal: K || F,
              customFooter: Z,
              entryPoint: x,
              featureListItems: be(),
              subtitle: $,
              title: U ? p.t("Do even more with Slack Pro") : "",
            })
          );
        }
        _(O, "AutoChargeTrialEntryModal"),
          (O.displayName = "AutoChargeTrialEntryModal");
        var C = e(1031947056),
          h = e(2375333597),
          D = e(1384076438),
          P = e(5773584938);
        const S = (0, C.Ay)(
          "Open Auto Charge Trial entry modal",
          (function () {
            var b = (0, t.coroutine)(function* (K, x, B) {
              let { promoType: U, promoSubtype: R, entryPoint: G } = B;
              const { isEligible: H } = yield K(
                  (0, D.A)({
                    campaignType: U,
                    campaignSubType: R,
                    reason: "auto_charge_trial_entry",
                  })
                ),
                F = (0, P.Ii)(x());
              return K(
                (0, h.q)({
                  element: n.createElement(O, {
                    entryPoint: G || "auto_charge_trial_entry_point",
                    isEligibleForTrial: H,
                    promoType: U,
                    promoSubtype: R,
                    experimentPaidFeatureTrialAutoChargeGroupTreatment: F,
                  }),
                })
              );
            });
            return function (K, x, B) {
              return b.apply(this, arguments);
            };
          })()
        );
        S.meta = {
          name: "createThunk",
          key: "createThunkopenAutoChargeTrialEntryModal",
          description: "Open Auto Charge Trial entry modal",
        };
      },
      398781533: (W, A, e) => {
        "use strict";
        e.d(A, {
          Q: () => a,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(1031947056),
          i = e(962959561),
          d = e(5773584938),
          o = e(1384076438);
        const a = (0, s.Ay)(
          "Maybe try logging exposure after checking eligibility",
          (function () {
            var r = (0, t.coroutine)(function* (c, u, l) {
              (0, i.aJ)({
                campaignType: l == null ? void 0 : l.campaignType,
                campaignSubType: l == null ? void 0 : l.campaignSubType,
              }) &&
                (l && (yield c((0, o.A)(l))),
                (0, i.L9)(u(), !0, !!l.skipCampaignEligibiltyCheck) &&
                  c((0, d.Fg)()));
            });
            return function (c, u, l) {
              return r.apply(this, arguments);
            };
          })()
        );
        a.meta = {
          name: "createThunk",
          key: "createThunkpaidFeatureTrialAutoChargeMaybeLogExposureAndCheck",
          description: "Maybe try logging exposure after checking eligibility",
        };
      },
      6822097892: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => v,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(7307560139),
          i = e(2346425530),
          d = e(9629572172),
          o = e(3193155968),
          a = e(6078549397),
          r = e(5033667e3),
          c = e(7429662208),
          u = e(9108490430),
          l = e(1031947056);
        const m = (0, l.Ay)(
          "Open a document on a specific version",
          (function () {
            var E = (0, t.coroutine)(function* (T, g, I, f) {
              const {
                  fileId: y,
                  windowId: M,
                  version: p,
                  isFromCloseActivityHistory: O,
                  replaceHistoryState: C,
                } = I,
                h = g(),
                { versionId: D, sequence: P } = {
                  ...p,
                };
              if (!y) return;
              const { isMainWindow: S, closeView: b, getViewSet: K } = f(d.U),
                x = (0, c.e6)(h),
                B = (0, i.xu)(h, M),
                { versionId: U, sequence: R } = {
                  ...B,
                },
                G = O ? void 0 : D || U,
                H = O ? void 0 : P || R;
              if (
                (O ||
                  T(
                    (0, s.fw)({
                      windowId: M,
                      versionId: D || U,
                    })
                  ),
                C)
              ) {
                const F = S
                  ? K(h)
                  : (0, c.hZ)(h, {
                      windowId: M,
                    });
                if (F) {
                  const V = F[o.mq.Primary];
                  if (V) {
                    const X = {
                      ...F,
                      [o.mq.Primary]: {
                        ...F[o.mq.Primary],
                        params: {
                          ...V.params,
                          versionId: G,
                          sequence: H,
                        },
                      },
                    };
                    T(
                      S
                        ? (0, r.A)({
                            windowId: o.N2,
                            tab: x,
                            viewSet: X,
                          })
                        : (0, r.A)({
                            windowId: M.toString(),
                            viewSet: X,
                          })
                    );
                  }
                }
              } else {
                const F = {
                  id: (0, a.Lo)({
                    id: y,
                  }),
                  versionId: G,
                  sequence: H,
                  preserveExistingSecondaryView: !O,
                };
                T(
                  S
                    ? (0, u.IZ)({
                        windowId: o.N2,
                        tab: x,
                        container: o.mq.Primary,
                        params: F,
                      })
                    : (0, u.IZ)({
                        windowId: M.toString(),
                        container: o.mq.Primary,
                        params: F,
                      })
                ),
                  O && b(o.mq.Secondary);
              }
              O &&
                T(
                  (0, s.NA)({
                    windowId: M,
                  })
                );
            });
            return function (T, g, I, f) {
              return E.apply(this, arguments);
            };
          })()
        );
        m.meta = {
          name: "createThunk",
          key: "createThunkopenDocVersion",
          description: "Open a document on a specific version",
        };
        const v = m;
      },
      7115106069: (W, A, e) => {
        "use strict";
        e.d(A, {
          Bi: () => s,
          d0: () => d,
          oj: () => i,
        });
        var t = e(8161242485);
        const n = (0, t.Ay)((o) => (o == null ? void 0 : o.quipDocEmbeds));
        n.meta = {
          name: "createSelector",
          key: "createSelectorgetQuipDocEmbedsStoreState",
          description: (o) => (o == null ? void 0 : o.quipDocEmbeds),
        };
        const s = (0, t.Ay)((o) => {
          const a = n(o);
          return a && Object.keys(a).length > 0;
        });
        s.meta = {
          name: "createSelector",
          key: "createSelectorisSpaceOpen",
          description: (o) => {
            const a = n(o);
            return a && Object.keys(a).length > 0;
          },
        };
        const i = (0, t.Ay)((o) => {
          const a = n(o);
          return Object.keys(a);
        });
        i.meta = {
          name: "createSelector",
          key: "createSelectorgetOpenSpaces",
          description: (o) => {
            const a = n(o);
            return Object.keys(a);
          },
        };
        const d = (0, t.Ay)((o, a) => {
          const r = n(o);
          var c;
          return ((c = r[a]) !== null && c !== void 0 ? c : 0) > 0;
        });
        d.meta = {
          name: "createSelector",
          key: "createSelectorisSpaceOpenForThreadId",
          description: (o, a) => {
            const r = n(o);
            var c;
            return ((c = r[a]) !== null && c !== void 0 ? c : 0) > 0;
          },
        };
      },
      2494018541: (W, A, e) => {
        "use strict";
        e.d(A, {
          O: () => n,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Store the corresponding file id for temp quip id");
        n.meta = {
          name: "createAction",
          key: "createActionsetFileIdForTempId",
          description: "Store the corresponding file id for temp quip id",
        };
      },
      4368281601: (W, A, e) => {
        "use strict";
        e.d(A, {
          Kt: () => r,
          al: () => o,
          jw: () => d,
          k: () => n,
          uo: () => s,
          yw: () => i,
          z5: () => a,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Store/replace client.counts for this channel");
        n.meta = {
          name: "createAction",
          key: "createActionsetQuipUnreadCount",
          description: "Store/replace client.counts for this channel",
        };
        const s = (0, t.Ay)("increment mention count for the channel");
        s.meta = {
          name: "createAction",
          key: "createActionincQuipUnreadCountForChannel",
          description: "increment mention count for the channel",
        };
        const i = (0, t.Ay)("decrement mention count for the channel");
        i.meta = {
          name: "createAction",
          key: "createActiondecQuipUnreadCountForChannel",
          description: "decrement mention count for the channel",
        };
        const d = (0, t.Ay)("Add canvases to hide on undo");
        d.meta = {
          name: "createAction",
          key: "createActionsetCanvasesToHideOnClearAll",
          description: "Add canvases to hide on undo",
        };
        const o = (0, t.Ay)("clear new mention flag for the channel");
        o.meta = {
          name: "createAction",
          key: "createActionclearNewMentionFlagForChannel",
          description: "clear new mention flag for the channel",
        };
        const a = (0, t.Ay)(
          "Set the list of enterprise file channels (canvases) to exclude from total counts"
        );
        a.meta = {
          name: "createAction",
          key: "createActionsetCanvasesToSuppress",
          description:
            "Set the list of enterprise file channels (canvases) to exclude from total counts",
        };
        const r = (0, t.Ay)(
          "Set the last seen timestamp for a badged canvas animation"
        );
        r.meta = {
          name: "createAction",
          key: "createActionsetLastSeenCanvasAnimationTimestamp",
          description:
            "Set the last seen timestamp for a badged canvas animation",
        };
      },
      117899263: (W, A, e) => {
        "use strict";
        e.d(A, {
          _: () => s,
        });
        var t = e(8161242485),
          n = e(1960898919);
        const s = (0, t.Ay)((i) => {
          var d;
          return (d = (0, n.ax)(i, "is_new_human")) !== null && d !== void 0
            ? d
            : !1;
        });
        s.meta = {
          name: "createSelector",
          key: "createSelectorisNewHuman",
          description: (i) => {
            var d;
            return (d = (0, n.ax)(i, "is_new_human")) !== null && d !== void 0
              ? d
              : !1;
          },
        };
      },
      5773584938: (W, A, e) => {
        "use strict";
        e.d(A, {
          Fg: () => l,
          Ii: () => a,
        });
        var t = e(8161242485),
          n = e(1031947056),
          s = e(6209625934),
          i = e(4761125736);
        const d = (0, t.Ay)((m) =>
          (0, i._Z)(m, "paid_feature_trial_auto_charge", !1)
        );
        d.meta = {
          name: "createSelector",
          key: "createSelectorpaidFeatureTrialAutoChargeGetAssignment",
          description: (m) =>
            (0, i._Z)(m, "paid_feature_trial_auto_charge", !1),
        };
        const o = (0, t.Ay)(
          (m) =>
            (0, i._Z)(m, "paid_feature_trial_auto_charge", !1) === "control"
        );
        o.meta = {
          name: "createSelector",
          key: "createSelectorpaidFeatureTrialAutoChargeIsControl",
          description: (m) =>
            (0, i._Z)(m, "paid_feature_trial_auto_charge", !1) === "control",
        };
        const a = (0, t.Ay)(
          (m) =>
            (0, i._Z)(m, "paid_feature_trial_auto_charge", !1) === "treatment"
        );
        a.meta = {
          name: "createSelector",
          key: "createSelectorpaidFeatureTrialAutoChargeIsTreatment",
          description: (m) =>
            (0, i._Z)(m, "paid_feature_trial_auto_charge", !1) === "treatment",
        };
        const r = (0, t.Ay)((m) => {
          var v;
          return ["treatment"].includes(
            (v = (0, i._Z)(m, "paid_feature_trial_auto_charge", !1)) !== null &&
              v !== void 0
              ? v
              : ""
          );
        });
        r.meta = {
          name: "createSelector",
          key: "createSelectorpaidFeatureTrialAutoChargeIsAnyTreatment",
          description: (m) => {
            var v;
            return ["treatment"].includes(
              (v = (0, i._Z)(m, "paid_feature_trial_auto_charge", !1)) !==
                null && v !== void 0
                ? v
                : ""
            );
          },
        };
        const c = (0, t.Ay)((m) => o(m) || r(m));
        c.meta = {
          name: "createSelector",
          key: "createSelectorpaidFeatureTrialAutoChargeIsExposed",
          description: (m) => o(m) || r(m),
        };
        const u = _((m) => {
            const v = (0, i.KK)(m, "paid_feature_trial_auto_charge");
            v &&
              v.log_exposures &&
              (0, s.K)("paid_feature_trial_auto_charge", v, m);
          }, "paidFeatureTrialAutoChargeLogExposure"),
          l = (0, n.Ay)(
            "Log exposure for the paid_feature_trial_auto_charge experiment if it is exposed",
            (m, v) => {
              u(v());
            }
          );
        l.meta = {
          name: "createThunk",
          key: "createThunkpaidFeatureTrialAutoChargeMaybeLogExposure",
          description:
            "Log exposure for the paid_feature_trial_auto_charge experiment if it is exposed",
        };
      },
      3577873706: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => r,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(1031947056),
          i = e(2332966328),
          d = e(8910811843),
          o = e(4144687165);
        const a = (0, s.Ay)(
          "Fetch Slack Doc file IDs for and re-map",
          (function () {
            var c = (0, t.coroutine)(function* (u, l, m) {
              let {
                quipThreadId: v,
                reason: E = "get-and-upsert-slack-doc-file-id",
              } = m;
              const T = (0, o.R)(l(), v);
              if (T) return T;
              const { file_id: g } = yield u(
                (0, i.I)({
                  quipThreadId: v,
                  reason: E,
                })
              );
              return (
                u(
                  (0, d.Gc)({
                    objects: [
                      {
                        id: v,
                        fileId: g,
                      },
                    ],
                  })
                ),
                g
              );
            });
            return function (u, l, m) {
              return c.apply(this, arguments);
            };
          })()
        );
        a.meta = {
          name: "createThunk",
          key: "createThunkgetAndUpsertSlackDocFileId",
          description: "Fetch Slack Doc file IDs for and re-map",
        };
        const r = a;
      },
      7359239710: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => c,
          I$: () => r,
          iJ: () => a,
        });
        var t = e(5571264920),
          n = e(1031947056),
          s = e(5502459222);
        const i = (0, n.Ay)(
          "Fetch slack doc last read timestamps and re-map",
          (u, l, m) => {
            let { ids: v } = m;
            return u(
              (0, s.R)({
                fileIds: v,
                reason: "fetch-slack-doc-last-read",
              })
            ).then((E) => {
              let { files: T } = E;
              return T.map((g) => ({
                id: g.file_id,
                lastReadByUser: g.last_read_timestamp,
              }));
            });
          }
        );
        i.meta = {
          name: "createThunk",
          key: "createThunkfetchSlackDocLastReadTimestamps",
          description: "Fetch slack doc last read timestamps and re-map",
        };
        const d = i,
          {
            reducer: o,
            actions: { upsertObjects: a },
            selectors: { getObjectById: r },
          } = (0, t.A)(
            {
              storeKey: "slackDocLastRead",
              persistenceEnabled: !0,
            },
            {
              fetchObjects: d,
            }
          ),
          c = o;
      },
      2985066322: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => i,
        });
        var t = e(1031947056),
          n = e(7359239710);
        const s = (0, t.Ay)(
          "Upsert a slack doc last read for a given file ID",
          (d, o, a) => {
            let { fileId: r, lastReadByUser: c } = a;
            return d(
              (0, n.iJ)({
                objects: [
                  {
                    id: r,
                    lastReadByUser: c,
                  },
                ],
              })
            );
          }
        );
        s.meta = {
          name: "createThunk",
          key: "createThunkupsertSlackDocLastReadByUserForFileId",
          description: "Upsert a slack doc last read for a given file ID",
        };
        const i = s;
      },
      1302213854: (W, A, e) => {
        "use strict";
        e.d(A, {
          C7: () => n,
          Ln: () => i,
          Mb: () => s,
          UM: () => d,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Have we already sent boot metrics");
        n.meta = {
          name: "createAction",
          key: "createActionsetShouldLogAppBootMetrics",
          description: "Have we already sent boot metrics",
        };
        const s = (0, t.Ay)("Should we log team switch metrics");
        s.meta = {
          name: "createAction",
          key: "createActionsetShouldLogTeamSwitchMetrics",
          description: "Should we log team switch metrics",
        };
        const i = (0, t.Ay)(
          "Set whether we should continue logging time to visible metrics"
        );
        i.meta = {
          name: "createAction",
          key: "createActionsetShouldLogTTVMetrics",
          description:
            "Set whether we should continue logging time to visible metrics",
        };
        const d = (0, t.Ay)(
          "Set whether we should continue logging time to usable metrics"
        );
        d.meta = {
          name: "createAction",
          key: "createActionsetShouldLogTTUMetrics",
          description:
            "Set whether we should continue logging time to usable metrics",
        };
      },
      4476913522: (W, A, e) => {
        "use strict";
        e.d(A, {
          a: () => v,
        });
        var t = e(8086952004),
          n = e(12126472),
          s = e(6626377467),
          i = e(235108050),
          d = e(7530630315),
          o = e(5729325965),
          a = e(2240330919),
          r = e(1116859610),
          c = e(6422693406),
          u = e(1031947056),
          l = e(3110884894),
          m = e(2155512519);
        const v = (0, u.Ay)("gets thread replies from the API", (E, T, g) => {
          const { channelId: I, threadTs: f, oldest: y, limit: M } = g;
          let p = g.latest;
          y === p && p === g.threadTs && (p = null);
          const O = (0, l.Iu)(I, f);
          return y && p
            ? c.S.all([
                E(
                  (0, m.$b)({
                    channelId: I,
                    threadTs: f,
                    latest: p,
                    limit: M,
                  })
                ),
                E(
                  (0, m.$b)({
                    channelId: I,
                    threadTs: f,
                    oldest: y,
                    limit: M,
                  })
                ),
              ]).then((C) => {
                let [h, D] = C;
                const P =
                    (0, t.A)(h.msgs, {
                      ts: f,
                    }) ||
                    (0, t.A)(D.msgs, {
                      ts: f,
                    }),
                  S = (0, n.A)(h.msgs, {
                    ts: f,
                  }),
                  b = (0, n.A)(D.msgs, {
                    ts: f,
                  }),
                  K = h.deleted,
                  x = D.deleted,
                  B = (0, s.A)(S.concat(b), "ts"),
                  U = (0, i.A)((0, d.A)(K, x));
                !h.hasMore && P && B.unshift(P);
                const R = B.map((G) => G.ts);
                return (
                  E(
                    (0, r.A)({
                      msgs: B,
                      channelId: O,
                      hasMore: {
                        hasMoreStart: h.hasMore,
                        hasMoreEnd: D.hasMore,
                      },
                      oldest: (0, o.A)([y, (0, o.A)(R)]),
                      latest: (0, a.A)([p, (0, a.A)(R)]),
                      deleted: U,
                    })
                  ),
                  {
                    msgs: B,
                  }
                );
              })
            : E(
                (0, m.$b)({
                  channelId: I,
                  threadTs: f,
                  oldest: y,
                  latest: p,
                  limit: M,
                })
              ).then(function () {
                let {
                  msgs: C,
                  deleted: h,
                  hasMore: D,
                } = arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : {};
                const P = (p && !D) || y === f || p === f || (!y && !p && !D);
                let S = C;
                P ||
                  (S = (0, n.A)(C, {
                    ts: f,
                  }));
                let b = D;
                !y &&
                  !p &&
                  (b = {
                    hasMoreStart: D,
                    hasMoreEnd: !1,
                  }),
                  E(
                    (0, r.A)({
                      msgs: S,
                      channelId: O,
                      hasMore: b,
                      oldest: y,
                      latest: p,
                      deleted: h,
                    })
                  );
                const K = (0, t.A)(C, {
                  ts: f,
                });
                return (
                  K &&
                    y === f &&
                    E(
                      (0, r.A)({
                        msgs: [K],
                        channelId: O,
                        hasMore: !1,
                        latest: f,
                      })
                    ),
                  {
                    msgs: S,
                  }
                );
              });
        });
        v.meta = {
          name: "createThunk",
          key: "createThunkrequestReplies",
          description: "gets thread replies from the API",
        };
      },
      6929023741: (W, A, e) => {
        "use strict";
        e.d(A, {
          a: () => v,
        });
        var t = e(8086952004),
          n = e(12126472),
          s = e(6626377467),
          i = e(235108050),
          d = e(7530630315),
          o = e(5729325965),
          a = e(2240330919),
          r = e(1116859610),
          c = e(6422693406),
          u = e(1031947056),
          l = e(3110884894),
          m = e(2155512519);
        const v = (0, u.Ay)("gets thread replies from the API", (E, T, g) => {
          const { channelId: I, threadTs: f, oldest: y, limit: M } = g;
          let p = g.latest;
          y === p && p === g.threadTs && (p = null);
          const O = (0, l.Iu)(I, f);
          return y && p
            ? c.S.all([
                E(
                  (0, m.$b)({
                    channelId: I,
                    threadTs: f,
                    latest: p,
                    limit: M,
                  })
                ),
                E(
                  (0, m.$b)({
                    channelId: I,
                    threadTs: f,
                    oldest: y,
                    limit: M,
                  })
                ),
              ]).then((C) => {
                let [h, D] = C;
                const P =
                    (0, t.A)(h.msgs, {
                      ts: f,
                    }) ||
                    (0, t.A)(D.msgs, {
                      ts: f,
                    }),
                  S = (0, n.A)(h.msgs, {
                    ts: f,
                  }),
                  b = (0, n.A)(D.msgs, {
                    ts: f,
                  }),
                  K = h.deleted,
                  x = D.deleted,
                  B = (0, s.A)(S.concat(b), "ts"),
                  U = (0, i.A)((0, d.A)(K, x));
                !h.hasMore && P && B.unshift(P);
                const R = B.map((G) => G.ts);
                return (
                  E(
                    (0, r.A)({
                      msgs: B,
                      channelId: O,
                      hasMore: {
                        hasMoreStart: h.hasMore,
                        hasMoreEnd: D.hasMore,
                      },
                      oldest: (0, o.A)([y, (0, o.A)(R)]),
                      latest: (0, a.A)([p, (0, a.A)(R)]),
                      deleted: U,
                    })
                  ),
                  {
                    msgs: B,
                  }
                );
              })
            : E(
                (0, m.$b)({
                  channelId: I,
                  threadTs: f,
                  oldest: y,
                  latest: p,
                  limit: M,
                })
              ).then(function () {
                let {
                  msgs: C,
                  deleted: h,
                  hasMore: D,
                } = arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : {};
                const P = (p && !D) || y === f || p === f || (!y && !p && !D);
                let S = C;
                P ||
                  (S = (0, n.A)(C, {
                    ts: f,
                  }));
                let b = D;
                !y &&
                  !p &&
                  (b = {
                    hasMoreStart: D,
                    hasMoreEnd: !1,
                  }),
                  E(
                    (0, r.A)({
                      msgs: S,
                      channelId: O,
                      hasMore: b,
                      oldest: y,
                      latest: p,
                      deleted: h,
                    })
                  );
                const K = (0, t.A)(C, {
                  ts: f,
                });
                return (
                  K &&
                    y === f &&
                    E(
                      (0, r.A)({
                        msgs: [K],
                        channelId: O,
                        hasMore: !1,
                        latest: f,
                      })
                    ),
                  {
                    msgs: S,
                  }
                );
              });
        });
        v.meta = {
          name: "createThunk",
          key: "createThunkrequestReplies",
          description: "gets thread replies from the API",
        };
      },
      1827030018: (W, A, e) => {
        "use strict";
        e.d(A, {
          _: () => r,
        });
        var t = e(9746734072),
          n = e(5238395322),
          s = e(2101927269),
          i = e(7486305635),
          d = e(1031947056),
          o = e(9101533895),
          a = e(157328471);
        const r = (0, d.Ay)(
          "Update the unread count for the all threads view",
          (c, u, l) => {
            let {
              threadsHasUnreads: m,
              threadsUnreadCountByChannel: v,
              threadsMentionCountByChannel: E,
              threadsLastUpdatedTimestamp: T,
            } = l;
            const g = (0, t.A)(E) ? {} : E,
              I = u(),
              f = (0, n.A)(
                (0, s.A)(g, (M, p) => {
                  const O = (0, o.OL)(I, p);
                  return (0, i.WK)(I, O) && !(0, i.fA)(I, O);
                })
              );
            let y = 0;
            v
              ? (y = (0, n.A)(
                  (0, s.A)(v, (M, p) => {
                    const O = (0, o.OL)(I, p);
                    return (0, i.WK)(I, O);
                  })
                ))
              : (y = m ? 1 : 0),
              c(
                (0, a.LI)({
                  threadsUnreadCount: y,
                  threadsUnreadCountByChannel: v,
                  threadsMentionCount: f,
                  threadsMentionCountByChannel: g,
                  threadsLastUpdatedTimestamp: T,
                  suppressThreads: (0, i.dQ)(I),
                })
              );
          }
        );
        r.meta = {
          name: "createThunk",
          key: "createThunkthreadsUnreadCountChanged",
          description: "Update the unread count for the all threads view",
        };
      },
      9132245692: (W, A, e) => {
        "use strict";
        e.d(A, {
          g: () => n,
          y: () => s,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)(
          "Update unread counts for the specified user alert types"
        );
        n.meta = {
          name: "createAction",
          key: "createActionupdateUserAlertsUnreadCount",
          description:
            "Update unread counts for the specified user alert types",
        };
        const s = (0, t.Ay)(
          "Reset the user alerts store to the specified alert counts map"
        );
        s.meta = {
          name: "createAction",
          key: "createActionresetAllUserAlertsUnreadCounts",
          description:
            "Reset the user alerts store to the specified alert counts map",
        };
      },
      2696160384: (W, A, e) => {
        "use strict";
        e.d(A, {
          D_: () => s,
          FI: () => n,
          Sr: () => i,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Sets whether the mini player is open or not");
        n.meta = {
          name: "createAction",
          key: "createActionsetIsDocked",
          description: "Sets whether the mini player is open or not",
        };
        const s = (0, t.Ay)("Sets mini video player config");
        s.meta = {
          name: "createAction",
          key: "createActionsetMiniPlayerConfig",
          description: "Sets mini video player config",
        };
        const i = (0, t.Ay)("Clears mini video player config");
        i.meta = {
          name: "createAction",
          key: "createActionclearMiniPlayerConfig",
          description: "Clears mini video player config",
        };
      },
      9813790040: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => u,
        });
        var t = e(3750057149),
          n = e(9121100949),
          s = e(9139930183),
          i = e(1201539379),
          d = e(7489442332),
          o = e(9733150292);
        const a = {
            persistenceEnabled: !1,
            storeKey: "viewLayout",
          },
          r = {
            sidebarWidthIntent: void 0,
            sidebarWidthMode: d.tR.AUTO,
            sidebarWideWidthIntent: void 0,
            sidebarWideWidthMode: d.tR.AUTO,
            sidebarExtraWideWidthIntent: void 0,
            sidebarExtraWideWidthMode: d.tR.AUTO,
            secondaryWidthIntent: void 0,
            secondaryWidthMode: d.tR.AUTO,
            splitWidthIntent: void 0,
            splitWidthMode: d.tR.AUTO,
            isSidebarVisible: !0,
            isSidebarVisibleWhenFloating: !1,
            isWorkspaceSwitcherVisible: !1,
            isCompactModeEnabled: !1,
          };
        try {
          (r.sidebarWidthIntent = (0, o.W6)(n.ke) || void 0),
            (r.sidebarWideWidthIntent = (0, o.W6)(n.u1) || void 0),
            (r.sidebarExtraWideWidthIntent = (0, o.W6)(n.jt) || void 0),
            (r.secondaryWidthIntent = (0, o.W6)(n.gN) || void 0),
            (r.sidebarWidthMode = (0, o.W6)(n.ts) || d.tR.AUTO),
            (r.splitWidthIntent = (0, o.W6)(n.qD) || void 0),
            (r.splitWidthMode = (0, o.W6)(n.$D) || d.tR.AUTO),
            (r.sidebarWidthMode = (0, o.W6)(n.ts) || d.tR.AUTO),
            (r.sidebarWideWidthMode = (0, o.W6)(n.r1) || d.tR.AUTO),
            (r.sidebarExtraWideWidthMode = (0, o.W6)(n.OR) || d.tR.AUTO),
            (r.secondaryWidthMode = (0, o.W6)(n.Ts) || d.tR.AUTO);
          const l = (0, o.W6)(n.jG);
          r.isSidebarVisible = (0, t.A)(l) ? l : !0;
          const m = (0, o.W6)(n.WU);
          r.isWorkspaceSwitcherVisible = (0, t.A)(m) ? m : !1;
          const v = (0, o.W6)(n.RC);
          r.isCompactModeEnabled = (0, t.A)(v) ? v : !1;
        } catch {}
        const u = (0, s.Ay)({}, r, a)
          .on(i.SP, (l, m) => {
            let { sidebarWidthIntent: v, sidebarWidthMode: E } = m;
            return {
              ...l,
              sidebarWidthIntent: v,
              sidebarWidthMode: E,
            };
          })
          .on(i.hk, (l, m) => {
            let { sidebarWideWidthIntent: v, sidebarWideWidthMode: E } = m;
            return {
              ...l,
              sidebarWideWidthIntent: v,
              sidebarWideWidthMode: E,
            };
          })
          .on(i.$t, (l, m) => {
            let {
              sidebarExtraWideWidthIntent: v,
              sidebarExtraWideWidthMode: E,
            } = m;
            return {
              ...l,
              sidebarExtraWideWidthIntent: v,
              sidebarExtraWideWidthMode: E,
            };
          })
          .on(i.ie, (l, m) => {
            let { secondaryWidthIntent: v, secondaryWidthMode: E } = m;
            return {
              ...l,
              secondaryWidthIntent: v,
              secondaryWidthMode: E,
            };
          })
          .on(i.yL, (l, m) => {
            let { splitWidthIntent: v, splitWidthMode: E } = m;
            return {
              ...l,
              splitWidthIntent: v,
              splitWidthMode: E,
            };
          })
          .on(i.KY, (l, m) => ({
            ...l,
            isSidebarVisible: m,
          }))
          .on(i.Eo, (l, m) => ({
            ...l,
            isSidebarVisibleWhenFloating: m,
          }))
          .on(i.mV, (l, m) => ({
            ...l,
            isWorkspaceSwitcherVisible: m,
          }))
          .on(i.Fe, (l, m) => ({
            ...l,
            isCompactModeEnabled: m,
          }));
      },
      4172221507: (W, A, e) => {
        "use strict";
        e.d(A, {
          F: () => o,
        });
        var t = e(9121100949),
          n = e(1031947056),
          s = e(6533394955),
          i = e(1201539379),
          d = e(9733150292);
        const o = (0, n.Ay)(
          "Sets whether or not the sidebar is part of the grid layout at normal window sizes",
          (a, r, c) => {
            (0, d.q9)(t.jG, c),
              a((0, i.KY)(c)),
              (0, s.dispatchForClientStore)((0, i.KY)(c));
          }
        );
        o.meta = {
          name: "createThunk",
          key: "createThunksetIsSidebarVisible",
          description:
            "Sets whether or not the sidebar is part of the grid layout at normal window sizes",
        };
      },
      8707579690: (W, A, e) => {
        "use strict";
        e.d(A, {
          J: () => o,
        });
        var t = e(9121100949),
          n = e(1031947056),
          s = e(1201539379),
          i = e(6533394955),
          d = e(9733150292);
        const o = (0, n.Ay)(
          "Set the user-specified secondary width and mode",
          (a, r, c) => {
            let { secondaryWidthIntent: u, secondaryWidthMode: l } = c;
            (0, d.q9)(t.gN, u),
              (0, d.q9)(t.Ts, l),
              a(
                (0, s.ie)({
                  secondaryWidthIntent: u,
                  secondaryWidthMode: l,
                })
              ),
              (0, i.dispatchForClientStore)(
                (0, s.ie)({
                  secondaryWidthIntent: u,
                  secondaryWidthMode: l,
                })
              );
          }
        );
        o.meta = {
          name: "createThunk",
          key: "createThunksetSecondaryColumn",
          description: "Set the user-specified secondary width and mode",
        };
      },
      2779520532: (W, A, e) => {
        "use strict";
        e.d(A, {
          R: () => o,
        });
        var t = e(9121100949),
          n = e(1031947056),
          s = e(1201539379),
          i = e(6533394955),
          d = e(9733150292);
        const o = (0, n.Ay)(
          "Set the user-specified sidebar width and mode",
          (a, r, c) => {
            let { sidebarWidthIntent: u, sidebarWidthMode: l } = c;
            (0, d.q9)(t.ke, u),
              (0, d.q9)(t.ts, l),
              a(
                (0, s.SP)({
                  sidebarWidthIntent: u,
                  sidebarWidthMode: l,
                })
              ),
              (0, i.dispatchForClientStore)(
                (0, s.SP)({
                  sidebarWidthIntent: u,
                  sidebarWidthMode: l,
                })
              );
          }
        );
        o.meta = {
          name: "createThunk",
          key: "createThunksetSidebarColumn",
          description: "Set the user-specified sidebar width and mode",
        };
      },
      7128275929: (W, A, e) => {
        "use strict";
        e.d(A, {
          a: () => o,
        });
        var t = e(9121100949),
          n = e(1031947056),
          s = e(1201539379),
          i = e(6533394955),
          d = e(9733150292);
        const o = (0, n.Ay)(
          "Set the user-specified extra wide sidebar width and mode",
          (a, r, c) => {
            let {
              sidebarExtraWideWidthIntent: u,
              sidebarExtraWideWidthMode: l,
            } = c;
            (0, d.q9)(t.jt, u),
              (0, d.q9)(t.OR, l),
              a(
                (0, s.$t)({
                  sidebarExtraWideWidthIntent: u,
                  sidebarExtraWideWidthMode: l,
                })
              ),
              (0, i.dispatchForClientStore)(
                (0, s.$t)({
                  sidebarExtraWideWidthIntent: u,
                  sidebarExtraWideWidthMode: l,
                })
              );
          }
        );
        o.meta = {
          name: "createThunk",
          key: "createThunksetSidebarExtraWideColumn",
          description:
            "Set the user-specified extra wide sidebar width and mode",
        };
      },
      9341298: (W, A, e) => {
        "use strict";
        e.d(A, {
          q: () => o,
        });
        var t = e(9121100949),
          n = e(1031947056),
          s = e(1201539379),
          i = e(6533394955),
          d = e(9733150292);
        const o = (0, n.Ay)(
          "Set the user-specified wide sidebar width and mode",
          (a, r, c) => {
            let { sidebarWideWidthIntent: u, sidebarWideWidthMode: l } = c;
            (0, d.q9)(t.u1, u),
              (0, d.q9)(t.r1, l),
              a(
                (0, s.hk)({
                  sidebarWideWidthIntent: u,
                  sidebarWideWidthMode: l,
                })
              ),
              (0, i.dispatchForClientStore)(
                (0, s.hk)({
                  sidebarWideWidthIntent: u,
                  sidebarWideWidthMode: l,
                })
              );
          }
        );
        o.meta = {
          name: "createThunk",
          key: "createThunksetSidebarWideColumn",
          description: "Set the user-specified wide sidebar width and mode",
        };
      },
      7573598208: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => l,
        });
        var t = e(352142497),
          n = e(8834730594),
          s = e(2960290117),
          i = e(8040098042),
          d = e(1826991857),
          o = e(4862221402),
          a = e(8813411026),
          r = e(8414867410);
        const c = {
            activity: t.D.ActivityList,
            threads: t.D.Threads,
            rimeto_profile: t.D.Profile,
            files: t.D.FileDetails,
            help: t.D.Help,
            shortcuts: t.D.KeyboardShortcuts,
            whats_new: t.D.WhatsNew,
            feedback: t.D.Feedback,
            comment_thread: t.D.QuipCommentThread,
            comment_stream: t.D.QuipCommentStream,
            activity_history: t.D.QuipActivityHistory,
            quip_automations_overview: t.D.QuipAutomationsOverview,
            channel_canvas: t.D.ChannelCanvas,
            thread: t.D.Thread,
            ai_summary_details: t.D.AiSummaryDetails,
            search_summary: t.D.SearchSummary,
            channel_files: t.D.ChannelFiles,
            ai_app: t.D.AiApp,
            about_ai_app: t.D.AboutAiApp,
            workflow_details: t.D.WorkflowDetails,
            record: t.D.Record,
          },
          l = _(
            (m) =>
              m
                ? (0, n.A)(m)
                  ? t.D.AppSpace
                  : (0, s.Ay)(m)
                  ? t.D.Canvas
                  : (0, i.A)(m)
                  ? t.D.Channel
                  : (0, a.T)(m)
                  ? (0, r.F8)(m)
                  : m && m[0] === "V"
                  ? t.D.Threads
                  : (0, d.A)(m)
                  ? t.D.Thread
                  : (0, o.A)(m)
                  ? t.D.UserGroup
                  : m === t.D.BrowseCanvases
                  ? m
                  : c[m]
                  ? c[m]
                  : t.D.Unknown
                : t.D.Unknown,
            "convertIdToViewType"
          );
      },
      9936094925: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => g,
          cB: () => v,
          ds: () => m,
          w9: () => E,
          wg: () => l,
        });
        var t = e(9113979368),
          n = e(498506970),
          s = e(1618349278),
          i = e(1649982175),
          d = e(9139930183),
          o = e(3193155968),
          a = e(7590914282);
        const r = 100,
          c = {},
          u = {
            persistenceEnabled: !1,
            storeKey: "windowHistory",
          };
        function l(I) {
          let { windowState: f, entry: y } = I;
          const M = f ? f.stack : [],
            p = (0, t.A)(M) ? null : 1;
          return {
            stack: [(0, n.A)(y)].concat(M).slice(0, r),
            index: 0,
            previousIndex: p,
          };
        }
        _(l, "handlePushHistoryEntryForWindow");
        function m(I) {
          let { windowState: f, index: y, previousIndex: M } = I;
          return {
            stack: f.stack,
            index: y,
            previousIndex: M,
          };
        }
        _(m, "handleUpdateIndexForWindow");
        function v(I) {
          let { windowState: f, index: y } = I;
          return {
            stack: (0, s.A)(f.stack, y),
            index: f.index,
            previousIndex: null,
          };
        }
        _(v, "handlePopHistoryAboveIndexForWindow");
        function E(I) {
          let { windowState: f, entry: y } = I;
          const M = [...f.stack];
          return (
            (M[f.index] = (0, n.A)(y)),
            {
              ...f,
              stack: M,
            }
          );
        }
        _(E, "handleReplaceCurrentHistoryEntryForWindowInternal");
        const g = (0, d.Ay)({}, c, u)
          .on(a.xU, (I, f) => {
            let { windowId: y, entry: M } = f;
            return !y || !M
              ? I
              : {
                  ...I,
                  [y]: l({
                    windowState: I[y],
                    entry: M,
                  }),
                };
          })
          .on(a.aV, (I, f) => {
            let { windowId: y } = f;
            return (0, i.A)(I, y);
          })
          .on(a.Nr, (I, f) => {
            let { windowId: y, index: M, previousIndex: p } = f;
            return {
              ...I,
              [y]: m({
                windowState: I[y],
                index: M,
                previousIndex: p,
              }),
            };
          })
          .on(a.o1, (I, f) => {
            let { windowId: y, entry: M } = f;
            return {
              ...I,
              [y]: {
                stack: [(0, n.A)(M)],
                index: 0,
                previousIndex: null,
              },
            };
          })
          .on(a.s0, (I, f) => {
            let { windowId: y, index: M } = f;
            return I[y]
              ? {
                  ...I,
                  [y]: v({
                    windowState: I[y],
                    index: M,
                  }),
                }
              : I;
          })
          .on(a.iV, (I, f) => {
            let { windowId: y, entry: M } = f;
            return I[y]
              ? {
                  ...I,
                  [y]: E({
                    windowState: I[y],
                    entry: M,
                  }),
                }
              : I;
          })
          .on(a.$Z, (I, f) => {
            let { windowId: y, viewParams: M, index: p } = f;
            if (!I[y]) return I;
            const C = [...(I[y] ? I[y].stack : [])];
            if (!C[p]) return I;
            const { id: h, ...D } = (0, n.A)(C[p]),
              P = D[o.mq.Primary];
            if (!(P != null && P.id)) return I;
            const S = {
              ...D,
              [o.mq.Primary]: {
                ...P,
                params: {
                  ...P.params,
                  ...M,
                },
              },
            };
            return (
              (C[p] = {
                id: h,
                ...S,
              }),
              {
                ...I,
                [y]: {
                  ...I[y],
                  stack: C,
                },
              }
            );
          });
      },
      4256476552: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => o,
        });
        var t = e(9139930183),
          n = e(1780675971),
          s = e(3193155968);
        const i = {
            [s.N2]: {
              isFocused: void 0,
              isUnloading: !1,
              timeCreation: 0,
              timeLastBlurEvent: 0,
              timeLastFocusEvent: 0,
            },
          },
          o = (0, t.Ay)({}, i, {
            storeKey: "window",
            persistenceEnabled: !1,
          })
            .on(n._p, (a, r) => {
              let { windowId: c = s.N2, ...u } = r;
              if (!a[c]) return a;
              const l = {
                [s.N2]: {
                  ...a[s.N2],
                },
              };
              return (
                (l[c] = {
                  ...a[c],
                  ...u,
                }),
                Reflect.ownKeys(a).forEach((m) => {
                  m !== c &&
                    u.isFocused &&
                    (l[m] = {
                      ...a[m],
                      isFocused: !1,
                    });
                }),
                {
                  ...a,
                  ...l,
                }
              );
            })
            .on(n.w3, (a, r) => {
              let { windowId: c = s.N2, ...u } = r;
              return a[c]
                ? {
                    ...a,
                    [c]: {
                      ...a[c],
                      isUnloading: u.isUnloading,
                    },
                  }
                : a;
            })
            .on(n.d1, (a, r) => {
              let { windowId: c = s.N2, ...u } = r;
              return {
                ...a,
                [c]: {
                  ...a[c],
                  ...u,
                  windowId: c,
                },
              };
            })
            .on(n.pb, (a, r) => {
              let { windowId: c = s.N2, ...u } = r;
              return a[c]
                ? {
                    ...a,
                    [c]: {
                      ...a[c],
                      bootType: u.bootType,
                    },
                  }
                : a;
            })
            .on(n.jO, (a, r) => {
              let { windowId: c } = r;
              if (c === s.N2 || !a[c]) return a;
              const u = {
                ...a,
              };
              return delete u[c], u;
            })
            .on(n.NV, (a, r) => {
              let { windowId: c, viewport: u } = r;
              return a[c]
                ? {
                    ...a,
                    [c]: {
                      ...a[c],
                      viewport: u,
                    },
                  }
                : a;
            });
      },
      2591023465: (W, A, e) => {
        "use strict";
        e.d(A, {
          FO: () => i,
          KY: () => d,
          SP: () => n,
          iJ: () => a,
          lT: () => s,
          vm: () => o,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)(
          "Set the user-specified sidebar width and mode (use setSidebarColumn instead)"
        );
        n.meta = {
          name: "createAction",
          key: "createActionsetSidebarColumnInternal",
          description:
            "Set the user-specified sidebar width and mode (use setSidebarColumn instead)",
        };
        const s = (0, t.Ay)(
          "Set the user-specified sidebar width and mode (use setInspectorColumn instead)"
        );
        s.meta = {
          name: "createAction",
          key: "createActionsetInspectorColumnInternal",
          description:
            "Set the user-specified sidebar width and mode (use setInspectorColumn instead)",
        };
        const i = (0, t.Ay)(
          "Sets whether or not the team sidebar is part of the grid layout (use setIsTeamSidebarVisible instead)"
        );
        i.meta = {
          name: "createAction",
          key: "createActionsetIsTeamSidebarVisibleInternal",
          description:
            "Sets whether or not the team sidebar is part of the grid layout (use setIsTeamSidebarVisible instead)",
        };
        const d = (0, t.Ay)(
          "Sets whether or not the sidebar is part of the grid layout at normal window sizes (use setIsSidebarVisible instead)"
        );
        d.meta = {
          name: "createAction",
          key: "createActionsetIsSidebarVisibleInternal",
          description:
            "Sets whether or not the sidebar is part of the grid layout at normal window sizes (use setIsSidebarVisible instead)",
        };
        const o = (0, t.Ay)(
          "Sets whether or not the sidebar is currently visible when in collapsed mode"
        );
        o.meta = {
          name: "createAction",
          key: "createActionsetIsSidebarVisibleWhenFloating",
          description:
            "Sets whether or not the sidebar is currently visible when in collapsed mode",
        };
        const a = (0, t.Ay)(
          "Sets whether the user prefers a responsive sidebar"
        );
        a.meta = {
          name: "createAction",
          key: "createActionsetUserPrefersResponsiveSidebarInternal",
          description: "Sets whether the user prefers a responsive sidebar",
        };
      },
      894072650: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => c,
        });
        var t = e(3750057149),
          n = e(7489442332),
          s = e(9139930183),
          i = e(2591023465),
          d = e(9733150292);
        const o = {
            persistenceEnabled: !1,
            storeKey: "workspaceLayout",
          },
          a = {
            inspectorWidthIntent: null,
            inspectorWidthMode: n.tR.AUTO,
            isSidebarVisible: !0,
            isSidebarVisibleWhenFloating: !1,
            isTeamSidebarVisible: !0,
            sidebarWidthIntent: null,
            sidebarWidthMode: n.tR.AUTO,
            userPrefersResponsiveSidebar: !0,
          };
        try {
          (a.sidebarWidthIntent = (0, d.W6)(n.ke) || null),
            (a.inspectorWidthIntent = (0, d.W6)(n.j0) || null),
            (a.sidebarWidthMode = (0, d.W6)(n.ts) || "auto"),
            (a.inspectorWidthMode = (0, d.W6)(n.mu) || "auto");
          const u = (0, d.W6)(n.jG);
          a.isSidebarVisible = (0, t.A)(u) ? u : !0;
          const l = (0, d.W6)(n.Xg);
          a.isTeamSidebarVisible = (0, t.A)(l) ? l : !0;
          const m = (0, d.W6)(n.Lb);
          a.userPrefersResponsiveSidebar = (0, t.A)(m) ? m : !0;
        } catch {}
        const c = (0, s.Ay)({}, a, o)
          .on(i.SP, (u, l) => {
            let { sidebarWidthIntent: m, sidebarWidthMode: v } = l;
            return {
              ...u,
              sidebarWidthIntent: m,
              sidebarWidthMode: v,
            };
          })
          .on(i.lT, (u, l) => {
            let { inspectorWidthIntent: m, inspectorWidthMode: v } = l;
            return {
              ...u,
              inspectorWidthIntent: m,
              inspectorWidthMode: v,
            };
          })
          .on(i.KY, (u, l) => ({
            ...u,
            isSidebarVisible: l,
          }))
          .on(i.vm, (u, l) => ({
            ...u,
            isSidebarVisibleWhenFloating: l,
          }))
          .on(i.FO, (u, l) => ({
            ...u,
            isTeamSidebarVisible: l,
          }))
          .on(i.iJ, (u, l) => ({
            ...u,
            userPrefersResponsiveSidebar: l,
          }));
      },
      3674298388: (W, A, e) => {
        "use strict";
        e.d(A, {
          In: () => r,
          Vo: () => o,
          r8: () => a,
          xx: () => c,
        });
        var t = e(8161242485);
        const n = (0, t.Ay)((u) => {
          var l;
          return u == null || (l = u.workspaceLayout) === null || l === void 0
            ? void 0
            : l.sidebarWidthIntent;
        });
        n.meta = {
          name: "createSelector",
          key: "createSelectorgetSidebarWidthIntent",
          description: (u) => {
            var l;
            return u == null || (l = u.workspaceLayout) === null || l === void 0
              ? void 0
              : l.sidebarWidthIntent;
          },
        };
        const s = (0, t.Ay)((u) => {
          var l;
          return u == null || (l = u.workspaceLayout) === null || l === void 0
            ? void 0
            : l.sidebarWidthMode;
        });
        s.meta = {
          name: "createSelector",
          key: "createSelectorgetSidebarWidthMode",
          description: (u) => {
            var l;
            return u == null || (l = u.workspaceLayout) === null || l === void 0
              ? void 0
              : l.sidebarWidthMode;
          },
        };
        const i = (0, t.Ay)((u) => {
          var l;
          return u == null || (l = u.workspaceLayout) === null || l === void 0
            ? void 0
            : l.inspectorWidthIntent;
        });
        i.meta = {
          name: "createSelector",
          key: "createSelectorgetInspectorWidthIntent",
          description: (u) => {
            var l;
            return u == null || (l = u.workspaceLayout) === null || l === void 0
              ? void 0
              : l.inspectorWidthIntent;
          },
        };
        const d = (0, t.Ay)((u) => {
          var l;
          return u == null || (l = u.workspaceLayout) === null || l === void 0
            ? void 0
            : l.inspectorWidthMode;
        });
        d.meta = {
          name: "createSelector",
          key: "createSelectorgetInspectorWidthMode",
          description: (u) => {
            var l;
            return u == null || (l = u.workspaceLayout) === null || l === void 0
              ? void 0
              : l.inspectorWidthMode;
          },
        };
        const o = (0, t.Ay)((u) => {
          var l;
          return u == null || (l = u.workspaceLayout) === null || l === void 0
            ? void 0
            : l.isSidebarVisible;
        });
        o.meta = {
          name: "createSelector",
          key: "createSelectorgetIsSidebarVisible",
          description: (u) => {
            var l;
            return u == null || (l = u.workspaceLayout) === null || l === void 0
              ? void 0
              : l.isSidebarVisible;
          },
        };
        const a = (0, t.Ay)((u) => {
          var l;
          return u == null || (l = u.workspaceLayout) === null || l === void 0
            ? void 0
            : l.isSidebarVisibleWhenFloating;
        });
        a.meta = {
          name: "createSelector",
          key: "createSelectorgetIsSidebarVisibleWhenFloating",
          description: (u) => {
            var l;
            return u == null || (l = u.workspaceLayout) === null || l === void 0
              ? void 0
              : l.isSidebarVisibleWhenFloating;
          },
        };
        const r = (0, t.Ay)((u) => {
          var l;
          return u == null || (l = u.workspaceLayout) === null || l === void 0
            ? void 0
            : l.isTeamSidebarVisible;
        });
        r.meta = {
          name: "createSelector",
          key: "createSelectorgetIsTeamSidebarVisible",
          description: (u) => {
            var l;
            return u == null || (l = u.workspaceLayout) === null || l === void 0
              ? void 0
              : l.isTeamSidebarVisible;
          },
        };
        const c = (0, t.Ay)((u) => {
          var l;
          return u == null || (l = u.workspaceLayout) === null || l === void 0
            ? void 0
            : l.userPrefersResponsiveSidebar;
        });
        c.meta = {
          name: "createSelector",
          key: "createSelectorgetUserPrefersResponsiveSidebar",
          description: (u) => {
            var l;
            return u == null || (l = u.workspaceLayout) === null || l === void 0
              ? void 0
              : l.userPrefersResponsiveSidebar;
          },
        };
      },
      2802517438: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => a,
        });
        var t = e(4096483543),
          n = e(8414867410),
          s = e(5084575109),
          i = e(4522919696),
          d = e(3080748521);
        const a = _((r) => {
          if ((0, t.A)()) {
            const c = (0, d.MC)(r),
              u = c && c.entityId,
              l = (0, n.US)(u);
            return (0, n.l1)(r, l)
              ? l.id
              : (0, s.n)(u)
              ? Object.keys(i.F).find((m) => i.F[m] === u)
              : u;
          }
          return r && r.workspace && r.workspace.primaryViewId;
        }, "getPrimaryView");
      },
      9083290776: (W, A, e) => {
        "use strict";
        e.d(A, {
          Gy: () => u,
          HO: () => n,
          Hu: () => o,
          K$: () => a,
          Lo: () => d,
          fw: () => r,
          j0: () => m,
          k0: () => l,
          lH: () => v,
          nG: () => i,
          ne: () => c,
          xW: () => E,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Sets the primary view in workspace store");
        n.meta = {
          name: "createAction",
          key: "createActionsetPrimaryViewInternal",
          description: "Sets the primary view in workspace store",
        };
        const s = n.getType(),
          i = (0, t.Ay)("Sets the secondary view in workspace store");
        i.meta = {
          name: "createAction",
          key: "createActionsetSecondaryViewInternal",
          description: "Sets the secondary view in workspace store",
        };
        const d = (0, t.Ay)("Sets the flexpane origin store");
        d.meta = {
          name: "createAction",
          key: "createActionsetFlexOriginInternal",
          description: "Sets the flexpane origin store",
        };
        const o = (0, t.Ay)("Sets the flexpane restore store");
        o.meta = {
          name: "createAction",
          key: "createActionsetFlexRestoreInternal",
          description: "Sets the flexpane restore store",
        };
        const a = (0, t.Ay)(
          "Sets the focused workspaces from the client-store"
        );
        a.meta = {
          name: "createAction",
          key: "createActionsetRecentlyFocusedWorkspaces",
          description: "Sets the focused workspaces from the client-store",
        };
        const r = (0, t.Ay)(
          "Sets an object where the key is a workspace id and the value is the timestamp reflecting the last time the workspace was focused"
        );
        r.meta = {
          name: "createAction",
          key: "createActionsetRecentlyFocusedWorkspacesTimestamps",
          description:
            "Sets an object where the key is a workspace id and the value is the timestamp reflecting the last time the workspace was focused",
        };
        const c = (0, t.Ay)(
          "Sets the props we need to re-open the last flexpane"
        );
        c.meta = {
          name: "createAction",
          key: "createActionsetPreviousFlexpane",
          description: "Sets the props we need to re-open the last flexpane",
        };
        const u = (0, t.Ay)("Sets channelDetailsOpen");
        u.meta = {
          name: "createAction",
          key: "createActionsetChannelDetailsOpen",
          description: "Sets channelDetailsOpen",
        };
        const l = (0, t.Ay)("Sets flexpane highlight state");
        l.meta = {
          name: "createAction",
          key: "createActionsetFlexpaneHighlight",
          description: "Sets flexpane highlight state",
        };
        const m = (0, t.Ay)("Sets flexpane section currently docked");
        m.meta = {
          name: "createAction",
          key: "createActionsetDockedFlexpaneSection",
          description: "Sets flexpane section currently docked",
        };
        const v = (0, t.Ay)("Add or remove from list expanded inputs");
        v.meta = {
          name: "createAction",
          key: "createActionsetMessageInputExpanded",
          description: "Add or remove from list expanded inputs",
        };
        const E = (0, t.Ay)("Sets the last tab for a given channel id");
        E.meta = {
          name: "createAction",
          key: "createActionsetLastTabForChannelId",
          description: "Sets the last tab for a given channel id",
        };
      },
      1116859610: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => p,
        });
        var t = e(2101927269),
          n = e(8840779375),
          s = e(3750057149),
          i = e(1031947056),
          d = e(9536404279),
          o = e(4350638406),
          a = e(10127715),
          r = e(3521202413),
          c = e(8847766420),
          u = e(3110884894),
          l = e(8040098042),
          m = e(6739248722),
          v = e(2791814261),
          E = e(4587446194),
          T = e(796111729),
          g = e(9190452268),
          I = e(1284885799),
          f = e(3528815215),
          y = e(2689960678);
        const M = (0, i.Ay)("Add messages from history", (O, C, h) => {
          let {
            msgs: D,
            channelId: P,
            isLimited: S,
            latest: b,
            oldest: K,
            hasMore: x,
            loading: B,
            forceUnreadCount: U,
            deleted: R = [],
          } = h;
          const G = C(),
            H = (0, g.Cy)({
              getState: C,
            });
          (0, v.L)(G) && H.mark("rmsgs_addMessagesFromHistory");
          const F = (0, t.A)(D, (oe) => {
              const z = (0, m.k)(G, {
                channelId: P,
                ts: oe.ts,
              });
              return (
                z &&
                  (0, T.Ay)({
                    getState: C,
                  }).warn(
                    `Filtering out ${oe.ts} in ${P} history response because it was deleted`
                  ),
                !z
              );
            }),
            V = S
              ? D.filter((oe) => oe.is_beyond_free_limit).map((oe) => oe.ts)
              : y.Ml,
            X = (0, n.A)(F, "ts"),
            q = (0, l.A)(P) ? P : (0, u.Sb)(P).channelId;
          q && (0, o.mY)((0, c.ZT)(G), q, X),
            O((0, a.tT)(F)),
            O(
              (0, d.VG)({
                channelId: P,
                timestamps: X,
                isLimited: S,
                blurredMessages: V,
                latest: b,
                oldest: K,
                hasMore: x,
                loading: B,
                forceUnreadCount: U,
              })
            ),
            (0, s.A)(B) &&
              O(
                B
                  ? (0, I.v)({
                      channelId: P,
                      loadingOlder: !!b,
                    })
                  : (0, f.f)({
                      channelId: P,
                    })
              ),
            (0, v.L)(G) &&
              H.measureAndClear(
                "rmsgs_addMessagesFromHistory",
                "rmsgs_addMessagesFromHistory"
              ),
            R.forEach((oe) =>
              O(
                (0, r.j)({
                  deleted_ts: oe,
                  channel: q,
                })
              )
            ),
            F.forEach((oe) => (0, E.IY)(C, O, oe, oe));
        });
        M.meta = {
          name: "createThunk",
          key: "createThunkaddMessagesFromHistory",
          description: "Add messages from history",
        };
        const p = M;
      },
      8243624171: (W, A, e) => {
        "use strict";
        e.d(A, {
          Fj: () => K,
          Vq: () => b,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(6422693406),
          i = e(1069376685),
          d = e(4446301238),
          o = e(5274604535),
          a = e(5373179915),
          r = e(8170643398),
          c = e(5096647761),
          u = e(148278831),
          l = e(6536982570),
          m = e(2023092677),
          v = e(5184226701),
          E = e(3339229351),
          T = e(4327331459),
          g = e(4862221402),
          I = e(1031947056),
          f = e(1761027239),
          y = e(4761125736),
          M = e(8276911661),
          p = e(3730613858);
        const O = _(
            (x, B) =>
              B.map((U) =>
                U.pasted && !U.entity
                  ? {
                      value: U.value,
                      entity: (0, M.nv)(x, U.value),
                    }
                  : U
              ),
            "getMemberInfoForPastedMembers"
          ),
          C = _((x) => {
            const B = x.entity || {};
            return (0, T.A)(x == null ? void 0 : x.value) || (0, r.NB)(B);
          }, "isAMember"),
          h = _((x) => {
            const B = x.entity || {};
            return (0, g.A)(x.value) || (0, m.PH)(B);
          }, "isAUserGroup"),
          D = {
            [E.IS.ALREADY_IN_CHANNEL]: !0,
            [E.IS.CANNOT_INVITE_SELF]: !0,
            [E.IS.ALREADY_IN_CHANNEL_UG]: !0,
          },
          P = {},
          S = _((x) => {
            let { shouldPreserve: B, teamId: U } = x;
            P[U] = B;
          }, "setShouldPreserveModalsOnNavigation"),
          b = _((x) => {
            let { teamId: B } = x;
            return P[B];
          }, "getShouldPreserveModalsOnNavigation"),
          K = (0, I.Ay)(
            "Add users and user groups to channel",
            (function () {
              var x = (0, t.coroutine)(function* (B, U, R) {
                let {
                  selectedMembers: G,
                  addMemberMode: H,
                  channel: F,
                  keepChannelHistory: V,
                  teamId: X,
                  shouldSkipInitialStage: q,
                } = R;
                const oe = {
                  channelId: F.id,
                  force: !0,
                  reason: "submit-invite-channel-invite-modal",
                };
                let z, Ae;
                if (H === i.D.AllMembers)
                  (oe.inviteAll = !0), (z = []), (Ae = []);
                else {
                  const Ce = O(U(), G),
                    Z = (0, o.A)(U(), F),
                    $ = (0, a.R)(U(), F);
                  (z = Ce.reduce((N, L) => {
                    if (L && C(L) && L.entity) {
                      const w = L,
                        k = (0, p.Sv)(U(), F.id, w.value);
                      if (!k.isKnown || !k.isMember) {
                        const J = (0, l.dQ)(w.entity),
                          ee = (0, u.S)(U(), w.entity, F);
                        ($ ||
                          ((0, c.g)(w.entity) && J && Z.includes(J)) ||
                          ee) &&
                          N.push(w.value);
                      }
                    }
                    return N;
                  }, [])),
                    (oe.users = z.join(",")),
                    (Ae = G.reduce(
                      (N, L) => (L && h(L) && N.push(L.value), N),
                      []
                    )),
                    (oe.subteams = Ae.join(","));
                }
                const ae = oe.inviteAll || !!oe.users || !!oe.subteams,
                  de =
                    (0, y._Z)(U(), "shared_channel_invite_requested_event") ===
                    "on",
                  ve = {
                    addedExistingMembers: ae,
                    userInviteResults: z.map((Ce) => ({
                      ok: !0,
                      invitee: Ce,
                      inviteeType: v.T0.User,
                      accessType: v.BD.Member,
                      error: "",
                    })),
                    groupInviteResults: Ae.map((Ce) => ({
                      ok: !0,
                      invitee: Ce,
                      inviteeType: v.T0.UserGroup,
                      accessType: v.BD.Member,
                    })),
                    newChannelId: void 0,
                  };
                let Se;
                try {
                  if (V)
                    ae &&
                      (yield B((0, d.Cw)(oe)).then((Ce) => {
                        const { requested_invites: Z = [] } = Ce;
                        Se = Z;
                      }),
                      de &&
                        (ve.userInviteResults = ve.userInviteResults.map(
                          (Ce) => {
                            const Z = Se.find(($) => $.user_id === Ce.invitee);
                            return {
                              ...Ce,
                              accessType: Z
                                ? v.BD.SharedChannel
                                : Ce.accessType,
                              inviteeType: Z ? v.T0.Email : Ce.inviteeType,
                              ...(de && {
                                isRequestedInvite: !!Z,
                              }),
                            };
                          }
                        )));
                  else {
                    S({
                      shouldPreserve: !q,
                      teamId: X,
                    }),
                      (oe.propagateInviteResult = !0);
                    const { channel: Ce } = yield B((0, f.t)(oe));
                    (ve.newChannelId = Ce.id),
                      S({
                        shouldPreserve: !1,
                        teamId: X,
                      });
                  }
                } catch (Ce) {
                  var Ee;
                  S({
                    shouldPreserve: !1,
                    teamId: X,
                  });
                  const Z =
                    Ce == null || (Ee = Ce.data) === null || Ee === void 0
                      ? void 0
                      : Ee.errors;
                  if (!Z) {
                    var be;
                    if (
                      !D[
                        Ce == null || (be = Ce.data) === null || be === void 0
                          ? void 0
                          : be.error
                      ]
                    )
                      throw Ce;
                  }
                  Z == null ||
                    Z.forEach(($) => {
                      if (D[$.error]) return;
                      const N = ve.userInviteResults.filter(
                        (w) => w.invitee === $.user
                      );
                      if (N.length) (N[0].ok = !1), (N[0].error = $.error);
                      else if (G.length === 1 && !$.user && q) {
                        var L;
                        ve.userInviteResults = [
                          {
                            ok: !1,
                            invitee:
                              (L = G[0]) === null || L === void 0
                                ? void 0
                                : L.value,
                            inviteeType: v.T0.User,
                            error: $.error,
                            accessType: v.BD.Member,
                          },
                        ];
                      } else
                        ve.userInviteResults.push({
                          ok: !1,
                          invitee: $.user,
                          inviteeType: v.T0.User,
                          error: $.error,
                          accessType: v.BD.Member,
                        });
                    });
                }
                return s.S.resolve(ve);
              });
              return function (B, U, R) {
                return x.apply(this, arguments);
              };
            })()
          );
        K.meta = {
          name: "createThunk",
          key: "createThunkaddUsersAndGroupsToChannel",
          description: "Add users and user groups to channel",
        };
      },
      8854307618: (W, A, e) => {
        "use strict";
        e.d(A, {
          r: () => o,
        });
        var t = e(1031947056),
          n = e(8620339321),
          s = e(6533394955),
          i = e(6695353875),
          d = e(4326266690);
        const o = (0, t.Ay)("Go back in history", (a, r) => {
          const c = r();
          if ((0, i.yZ)(c)) {
            (0, d.ud)((0, s.getStateForClientStore)()) ||
              (0, s.dispatchForClientStore)((0, n.oX)());
            return;
          }
          window.history.back();
        });
        o.meta = {
          name: "createThunk",
          key: "createThunkgoBackInWindowHistory",
          description: "Go back in history",
        };
      },
      7606925238: (W, A, e) => {
        "use strict";
        e.d(A, {
          h: () => s,
        });
        var t = e(1031947056),
          n = e(6695353875);
        const s = (0, t.Ay)("Go forward in history", (i, d) => {
          const o = d();
          (0, n.yZ)(o) || window.history.forward();
        });
        s.meta = {
          name: "createThunk",
          key: "createThunkgoForwardInWindowHistory",
          description: "Go forward in history",
        };
      },
      8496310524: (W, A, e) => {
        "use strict";
        e.d(A, {
          I: () => d,
          u: () => i,
        });
        var t = e(2689960678),
          n = e(7969244833),
          s = e(9101533895);
        const i = _(
            (o) => (o == null ? void 0 : o.name) || "",
            "getActionName"
          ),
          d = _((o, a, r) => {
            const c = !r;
            let u = t.Ml;
            if (r) {
              const l = (0, s.OL)(o, r);
              u = (l && (0, n.f)(o, l)) || t.Ml;
            }
            return a.teams && (u.length || c) && !a.isWorkspaceAgnostic
              ? c
                ? a.teams
                : a.teams.filter((m) => u.includes(m))
              : t.Ml;
          }, "getActionRelatedWorkspaces");
      },
      3982416567: (W, A, e) => {
        "use strict";
        e.d(A, {
          O4: () => i,
          OB: () => o,
        });
        var t = e(937317117),
          n = e(5597672932);
        const s = "canvas_version_history_enabled",
          i = _(
            (a) => (0, n.x)(a, s),
            "getCanvasVersionHistoryEnabledTeamPref"
          ),
          d = _((a, r) => {
            const c = (0, t.Lp)(a, r);
            return c ? c.team_pref_version_history_enabled : !1;
          }, "getOwnerCanvasVersionHistoryEnabledTeamPref"),
          o = _(
            (a, r) => (r ? !!i(a) && !!d(a, r) : !1),
            "isCanvasVersionHistoryEnabled"
          );
      },
      2063075339: (W, A, e) => {
        "use strict";
        e.d(A, {
          Z: () => i,
        });
        var t = e(1407713935),
          n = e(6007206761),
          s = e(6113051341);
        const i = _(
          (d, o) => !(0, t.JM)(o) && !(0, n.F)(o) && !(0, s.N)(o),
          "canBeExternallyShared"
        );
      },
      2912967402: (W, A, e) => {
        "use strict";
        e.d(A, {
          B2: () => a,
          Bw: () => E,
          CM: () => m,
          FA: () => c,
          Jr: () => v,
          Kg: () => y,
          QS: () => o,
          Vp: () => I,
          bS: () => f,
          bw: () => r,
          oP: () => l,
        });
        var t = e(3078252698),
          n = e(4724591729),
          s = e(796111729),
          i = e(735940183);
        const d = new i.Ay("channels"),
          o = 250,
          a = 250;
        function r(p) {
          return (0, t.A)(p)
            ? p.length > o
            : ((0, n.Cu)() &&
                (0, s.Wo)().warn(
                  "Argument `topic` passed to `channelTopicExceedsLimit()` is not a string"
                ),
              !1);
        }
        _(r, "channelTopicExceedsLimit");
        const c = "too_long",
          u = "restricted_action",
          l = "user_is_restricted",
          m = "method_not_supported_for_channel_type",
          v = "method_not_supported_for_dm";
        function E(p) {
          switch (p) {
            case c:
              return d.t(
                "Channel topics can only include up to {max} characters \u2014 please make this topic shorter.",
                {
                  max: o,
                }
              );
            case u:
            case l:
              return d.t(
                "It looks like you don\u2019t have permission to change the channel topic. Please check with your workspace admin."
              );
            case m:
              return d.t(
                "It\u2019s not possible to set a topic here, unfortunately."
              );
            case v:
              return d.t("Regrettably, direct messages do not have topics.");
            default:
              return d.t(
                "It looks like setting the channel topic didn\u2019t work, for some reason. Try again?"
              );
          }
        }
        _(E, "getChannelTopicError");
        const T = "too_long",
          g = "restricted_action",
          I = "user_is_restricted",
          f = "method_not_supported_for_channel_type",
          y = "method_not_supported_for_dm";
        function M(p) {
          switch (p) {
            case T:
              return d.t(
                "That purpose is too long. Please try again with fewer than {max} characters.",
                {
                  max: a,
                }
              );
            case g:
            case I:
              return d.t(
                "Uh oh! You don\u2019t have permission to change the purpose. Talk to your workspace admin."
              );
            case f:
              return d.t(
                "It\u2019s not possible to set a purpose here, unfortunately."
              );
            case y:
              return d.t("Regrettably, direct messages do not have purposes.");
            default:
              return d.t(
                "Uh oh! Something went wrong with setting the purpose. Please try again."
              );
          }
        }
        _(M, "getChannelPurposeError");
      },
      8243083011: (W, A, e) => {
        "use strict";
        e.d(A, {
          q: () => a,
        });
        var t = e(1407713935),
          n = e(6113051341),
          s = e(6839188756),
          i = e(8040098042),
          d = e(9101533895),
          o = e(3677514771);
        const a = _((r, c) => {
          if (!c || !(0, i.A)(c)) return !1;
          const u = (0, o.H7)(r),
            l = (0, d.OL)(r, c),
            m = (0, t.JM)(l),
            v = (0, n.N)(l),
            E = (0, s.Ny)(u);
          return !(m || (!E && !v));
        }, "doBroadcastKeywordPrefsApplyForChannel");
      },
      4559887502: (W, A, e) => {
        "use strict";
        e.d(A, {
          i: () => s,
        });
        var t = e(9884588328),
          n = e(1407713935);
        const s = _((i, d) => {
          if ((0, n.JM)(d) || !i) return !1;
          const o = (0, t.mG)(d),
            a = o ? i.get(o) : null;
          return a ? (a == null ? void 0 : a.length) > 1 : !1;
        }, "doesChannelHaveNonUniqueName");
      },
      7868634217: (W, A, e) => {
        "use strict";
        e.d(A, {
          Z: () => r,
          Y: () => c,
        });
        var t = e(8921478798),
          n = e(8276911661),
          s = e(3037015781),
          i = e(9262712126);
        function d(u, l, m) {
          const v = !m;
          var E;
          const T =
            (E = (0, n.nv)(u, l, {
              preferNonExistentToNull: !1,
              fetchIfMissing: v,
            })) !== null && E !== void 0
              ? E
              : void 0;
          return !T || (m && (0, s.mX)(T)) ? l : (0, i.wg)(T);
        }
        _(d, "getRealMemberNameById");
        var o = e(2689960678),
          a = e(8701485242);
        const r = _(
            (u, l) =>
              l
                ? l
                    .map((m) => ({
                      id: m,
                      name: (0, t.I)(u, m),
                    }))
                    .sort((m, v) => (0, a.Ay)(m.name, v.name))
                    .map((m) => m.id)
                : o.Ml,
            "getAlphabeticallySortedMemberIds"
          ),
          c = _(
            (u, l) =>
              !l || !l.length
                ? o.Ml
                : l
                    .map((m) => ({
                      id: m,
                      name: d(u, m),
                    }))
                    .sort((m, v) => (0, a.Ay)(m.name, v.name))
                    .map((m) => m.id),
            "getRealNameAlphabeticallySortedMemberIds"
          );
      },
      6045879501: (W, A, e) => {
        "use strict";
        e.d(A, {
          H: () => t,
        });
        function t(n) {
          return n && n.emoji;
        }
        _(t, "getEmojiCollectionEmoji");
      },
      370406050: (W, A, e) => {
        "use strict";
        e.d(A, {
          M: () => t,
        });
        function t(n) {
          return n && n.name;
        }
        _(t, "getEmojiCollectionName");
      },
      5071545805: (W, A, e) => {
        "use strict";
        e.d(A, {
          j: () => t,
        });
        function t(n) {
          return n && n.installed;
        }
        _(t, "isEmojiCollectionInstalled");
      },
      3890290905: (W, A, e) => {
        "use strict";
        e.d(A, {
          Y: () => t,
        });
        const t = _((n) => n && n.name, "getEmojiName");
      },
      4282439381: (W, A, e) => {
        "use strict";
        e.d(A, {
          x: () => n,
        });
        var t = e(4761125736);
        const n = _(
          (s) => (0, t._Z)(s, "a11y_emoji_group") === "on",
          "isEmojiGroupEnabled"
        );
      },
      9362126998: (W, A, e) => {
        "use strict";
        e.d(A, {
          $R: () => b,
          BM: () => be,
          DC: () => F,
          JC: () => x,
          Jn: () => ae,
          Kj: () => oe,
          NG: () => Ee,
          RI: () => q,
          UF: () => U,
          Wg: () => Ae,
          cG: () => V,
          hP: () => H,
          lL: () => ve,
          p4: () => Ce,
          qh: () => Se,
          rY: () => G,
          y0: () => z,
          yD: () => B,
        });
        var t = e(9113979368),
          n = e(8840779375),
          s = e(1703559452),
          i = e(2384831516),
          d = e(1316483933),
          o = e(571104883),
          a = e(5795074931),
          r = e(9101533895),
          c = e(8455301571),
          u = e(7606781622),
          l = e(5597672932),
          m = e(8276911661),
          v = e(3534324375),
          E = e(937317117),
          T = e(4827886670),
          g = e(340763958),
          I = e(3110884894),
          f = e(8393662842),
          y = e(1257883628),
          M = e(4702704067),
          p = e(9884588328),
          O = e(9536443280),
          C = e(735940183),
          h = e(2689960678),
          D = e(3207321841),
          P = e(6946629059);
        const S = new C.Ay("stories_av"),
          b = _((Z, $) => {
            const N = !!$ && (0, g.ju)($);
            let L = !0;
            return (
              N
                ? (L =
                    (0, l.x)(Z, "allow_video_clips") &&
                    (0, l.x)(Z, "allow_video_clip_sharing_slack_connect"))
                : (L = (0, l.x)(Z, "allow_video_clips")),
              L
            );
          }, "isVideoClipSharingEnabledForChannel"),
          K = _((Z, $, N) => {
            const L = (0, r.OL)(Z, $),
              w = b(Z, L);
            return (
              (!$ || (!N && (0, T.E)(Z, $)) || (!!N && (0, p.NI)(Z, L))) && w
            );
          }, "canDestinationReceiveVideoClips"),
          x = _((Z, $, N) => K(Z, $, N), "canPostVideoClipInDestination"),
          B = _(
            (Z, $, N) => K(Z, $, N) && x(Z, $, N) && !!window.MediaRecorder,
            "shouldRenderVideoRecorderButtonInComposer"
          ),
          U = _((Z, $) => {
            const N = !!$ && (0, g.ju)($);
            let L = !0;
            return (
              N
                ? (L =
                    (0, l.x)(Z, "allow_audio_clips") &&
                    (0, l.x)(Z, "allow_audio_clip_sharing_slack_connect"))
                : (L = (0, l.x)(Z, "allow_audio_clips")),
              L
            );
          }, "isAudioClipSharingEnabledForChannel"),
          R = _((Z, $, N) => {
            const L = (0, r.OL)(Z, $),
              w = U(Z, L);
            return (
              (!$ || (!N && (0, T.E)(Z, $)) || (!!N && (0, p.NI)(Z, L))) && w
            );
          }, "canDestinationReceiveAudioClips"),
          G = _((Z, $, N) => R(Z, $, N), "canPostAudioMessageInDestination"),
          H = _(
            (Z, $, N) => R(Z, $, N) && G(Z, $, N) && !!window.MediaRecorder,
            "shouldRenderAudioRecorderButtonInComposer"
          ),
          F = _((Z, $) => {
            if (!ae($)) return !0;
            const N = (0, l.x)(Z, "allow_clip_downloads"),
              L = (0, a.WR)(Z),
              w = (0, d.qc)(Z, L);
            if (N === "anyone" || w) return !0;
            const k = $.user !== null && $.user === L;
            return !!(N === "creator_and_admins" && k);
          }, "canDownloadClip"),
          V = _((Z, $) => F(Z, $) || (0, o.y3)(), "canOpenClipInNewWindow"),
          X = (0, i.Mz)((Z, $) => {
            if (!$) return !1;
            if ((0, t.A)($.files)) return h.Ml;
            const N = (0, n.A)($.files, (L) => (0, E.Lp)(Z, L));
            return (0, s.A)(N, y.A);
          });
        X.meta = {
          name: "createSelector",
          key: "createSelectorisStoryMessage",
          description: (Z, $) => {
            if (!$) return !1;
            if ((0, t.A)($.files)) return h.Ml;
            const N = (0, n.A)($.files, (L) => (0, E.Lp)(Z, L));
            return (0, s.A)(N, y.A);
          },
        };
        function q(Z) {
          let {
            state: $,
            threadKey: N,
            includeAllMessages: L = !1,
            startTs: w,
          } = Z;
          const { channelId: k, threadTs: J } = (0, I.Sb)(N),
            {
              timestamps: ee,
              reachedStart: ne,
              reachedEnd: pe,
            } = (0, c.r7)($, N, w || J) || {},
            Me =
              ee != null && ee.length && k
                ? ee.map((ke) => (0, u.Ld)($, k, ke)).filter(P.b)
                : [];
          return {
            messages: L ? Me : Me.filter((ke) => X($, ke)),
            reachedStart: !!ne,
            reachedEnd: !!pe,
          };
        }
        _(q, "getMediaThread");
        function oe(Z) {
          var $;
          return Z != null && Z.vtt
            ? O.D.available
            : (Z == null || ($ = Z.transcription) === null || $ === void 0
                ? void 0
                : $.status) === "processing"
            ? O.D.processing
            : O.D.none;
        }
        _(oe, "getCaptionsAvailability");
        const z = _(
          (Z) => (0, l.x)(Z, "allow_media_transcriptions"),
          "shouldAllowMediaTranscriptions"
        );
        function Ae(Z, $) {
          let N = "";
          if ($.user) {
            const w = (0, m.nv)(Z, $.user);
            N = w ? (0, v.sE)(Z, w) : "";
          }
          let L;
          return (
            N
              ? (L = (0, M.A)($)
                  ? S.t("Audio clip from {memberName}", {
                      memberName: N,
                    })
                  : S.t("Video clip from {memberName}", {
                      memberName: N,
                    }))
              : (L = (0, M.A)($) ? S.t("Audio clip") : S.t("Video clip")),
            L
          );
        }
        _(Ae, "getLabelForClip");
        function ae(Z) {
          return Z != null && Z.subtype ? de(Z.subtype) : !1;
        }
        _(ae, "isClip");
        function de(Z) {
          let { clipsSubtypes: $ = D.Y1 } =
            arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          return $.includes(Z);
        }
        _(de, "isClipsSubtype");
        function ve(Z) {
          return Z === D.iN;
        }
        _(ve, "isAudioClipSubtype");
        function Se(Z) {
          return Z && Z.some(($) => de($.subtype));
        }
        _(Se, "containsClip");
        function Ee(Z) {
          return Z ? Z.filter(($) => de($.subtype)) : [];
        }
        _(Ee, "findClips");
        function be(Z, $) {
          const N = (0, a.WR)(Z);
          return ($ == null ? void 0 : $.user) === N;
        }
        _(be, "canRemoveTranscriptPreview");
        function Ce(Z) {
          return (0, f.pI)(Z)
            ? (Z == null ? void 0 : Z.aac) ||
                (Z == null ? void 0 : Z.url_private)
            : (Z == null ? void 0 : Z.mp4) ||
                (Z == null ? void 0 : Z.url_private);
        }
        _(Ce, "getMediaSrc");
      },
      102566929: (W, A, e) => {
        "use strict";
        e.d(A, {
          Fh: () => c,
          Iz: () => r,
          gC: () => a,
        });
        var t = e(8161242485),
          n = e(937317117),
          s = e(497761763),
          i = e(6078549397),
          d = e(2823938397);
        const o = (0, t.Ay)((u, l) => {
          const { fileIdOrQuipThreadId: m } = (0, i.EX)(l);
          if ((0, s.A)(m)) {
            var v;
            return (v = (0, n.Lp)(u, m)) !== null && v !== void 0 ? v : null;
          }
          return null;
        });
        o.meta = {
          name: "createSelector",
          key: "createSelectormaybeGetFileByCompoundId",
          description: (u, l) => {
            const { fileIdOrQuipThreadId: m } = (0, i.EX)(l);
            if ((0, s.A)(m)) {
              var v;
              return (v = (0, n.Lp)(u, m)) !== null && v !== void 0 ? v : null;
            }
            return null;
          },
        };
        const a = (0, t.Ay)((u, l) => {
          const m = o(u, l);
          return m && (0, d.uz)(m) ? m : null;
        });
        a.meta = {
          name: "createSelector",
          key: "createSelectormaybeGetExistentFileByCompoundId",
          description: (u, l) => {
            const m = o(u, l);
            return m && (0, d.uz)(m) ? m : null;
          },
        };
        function r(u) {
          return u.linked_channel_id;
        }
        _(r, "getLinkedChannelId");
        function c(u) {
          return [
            "spaces-example-onboarding-canvas",
            "spaces-example-team-meeting",
          ].includes(u);
        }
        _(c, "isSampleCanvas");
      },
      7148679525: (W, A, e) => {
        "use strict";
        e.d(A, {
          eY: () => h,
          QX: () => S,
          dL: () => D,
          oG: () => b,
          Lz: () => P,
          L7: () => G,
          J5: () => R,
          XH: () => K,
          nY: () => x,
        });
        var t = e(2837660778),
          n = e(1340402138),
          s = e(7969244833),
          i = e(3792998666),
          d = e(8323393403),
          o = e(6839188756),
          a = e(9950739645),
          r = e(7112191091),
          c = e(6693783993),
          u = e(4761125736),
          l = e(9951956014),
          m = e(8289365785);
        function v(H) {
          return (
            H && {
              ...H,
              type:
                (0, m.A)(H == null ? void 0 : H.type) === "owner"
                  ? ["org_admin"]
                  : ["admin"],
            }
          );
        }
        _(v, "mapToWhoCanStyle");
        function E(H, F) {
          return (0, l.g)(H, "who_can_manage_guests", [F], v);
        }
        _(E, "canUserDoManageGuestsTeamPrefForTeamId");
        const T = {
          mapToWhoCanStyle: v,
        };
        var g = e(5795074931);
        const I = _((H, F) => {
          if (
            (0, u._Z)(H, "light_read_who_can_manage_guests_pref_migration") ===
            "on"
          ) {
            const X = (0, g.TZ)(H);
            return F && X ? (0, c.l0)(H).includes(F.id) : (0, c.mZ)(H);
          }
          return F
            ? (0, o.r7)(F)
              ? E(H, F.id) || !1
              : (0, r.Me)(H, F.id)
            : !1;
        }, "canUserInviteGuests");
        var f = e(5184226701),
          y = e(504058561),
          M = e(9101533895),
          p = e(8276911661),
          O = e(5597672932),
          C = e(3677514771);
        function h(H) {
          let F =
            arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : null;
          const V = (0, p.cA)(H),
            X = F ?? (0, C.H7)(H);
          if (!X) return !1;
          const q = (0, r.Me)(H, X.id),
            oe = (0, c.tx)(H, {
              teamOrEnterpriseIds: [X.id],
            });
          return q || oe
            ? !0
            : (0, i.P)(V)
            ? !1
            : (0, O.x)(H, "invites_only_admins", F == null ? void 0 : F.id)
            ? I(H, X)
            : !0;
        }
        _(h, "canUserInviteMembersToWorkspace");
        function D(H, F, V) {
          const X = F || (0, p.cA)(H),
            q = V || (0, C.H7)(H);
          return !(
            (!q && !q) ||
            (0, i.P)(X) ||
            !(0, O.x)(H, "invite_requests_enabled", q.id)
          );
        }
        _(D, "canUserRequestToInvite");
        function P(H) {
          const F = (0, p.cA)(H),
            V = (0, C.H7)(H);
          return !V || (0, n.R)(H)
            ? !1
            : (0, o.r7)(V)
            ? !!(0, t.Mo)(H).filter((q) => D(H, F, q) || h(H, q)).length
            : !!(D(H, F, V) || h(H));
        }
        _(P, "canUserSeeInviteModal");
        function S(H, F) {
          const V = (0, C.H7)(H);
          if (!V) return !1;
          const X = (0, M.OL)(H, F),
            q = (0, o.tc)(V),
            oe = (0, o.r7)(V),
            z = (0, d.D7)(H, F),
            Ae = oe ? !x(H, X) : P(H);
          return (q && Ae) || (!q && (Ae || z));
        }
        _(S, "canUserInviteToChannelByEmail");
        function b(H, F) {
          const V = (0, p.cA)(H),
            X = F ? (0, C._J)(H, F) : (0, C.H7)(H);
          return !X || (0, o.tc)(X) ? !1 : D(H, V, X) ? !0 : I(H, X);
        }
        _(b, "canUserSeeAccountTypeOptions");
        function K(H, F) {
          let { ignoreGuestSettings: V } =
            arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          const X = (0, p.cA)(H),
            q = F ? (0, C._J)(H, F) : (0, C.H7)(H);
          if (!(0, o.r7)(q)) return !1;
          const oe = (0, r.Me)(H, q.id),
            z = (0, c.tx)(H, {
              teamOrEnterpriseIds: [q.id],
            });
          return oe ||
            z ||
            !(0, O.x)(H, "invites_only_admins", q.id) ||
            D(H, X, q)
            ? !1
            : V
            ? !0
            : I(H, q);
        }
        _(K, "shouldDisableFullMemberInviteOption");
        function x(H, F) {
          const V = (0, s.f)(H, F);
          return !!(
            V != null &&
            V.every((X) =>
              K(H, X, {
                ignoreGuestSettings: !0,
              })
            )
          );
        }
        _(x, "shouldDisableFullMemberInviteOptionForChannel");
        function B(H) {
          let { state: F, team: V, inviteType: X } = H,
            q = V;
          if (!V && ((q = getCurrentTeam(F)), !q)) return !1;
          const oe = getTeamPref(F, "auth_mode"),
            z = oe === "google" || oe === "saml";
          return (
            (isEnterpriseOrEnterpriseWorkspace(q) && X === AccessType.Member) ||
            (z && getTeamPref(F, "sso_auth_restrictions") === 0)
          );
        }
        _(B, "shouldShowSsoAlert");
        function U(H) {
          let { state: F, inviteType: V } = H;
          const X = getTeamPref(F, "auth_mode"),
            q = getTeamPref(F, "sso_auth_restrictions");
          return X === "google"
            ? (V === AccessType.Member && (q === 0 || q === 1)) ||
                ((V === AccessType.MultiChannelGuest ||
                  V === AccessType.SingleChannelGuest) &&
                  q === 0)
            : !1;
        }
        _(U, "shouldShowGoogleDomainsNotice");
        function R(H) {
          let { state: F, inviteType: V, team: X } = H;
          if (!V || !(0, f.LX)(V)) throw new Error(`Invalid invite type: ${V}`);
          const q = X || (0, C.H7)(F);
          if (!q || (0, a.N)(X)) return !1;
          const oe = (0, O.x)(
              F,
              "invites_only_admins",
              q == null ? void 0 : q.id
            ),
            z = (0, r.Me)(F, q.id),
            Ae = (0, c.tx)(F, {
              teamOrEnterpriseIds: [q.id],
            }),
            ae = I(F, q);
          switch (V) {
            case f.BD.Member:
              return z || Ae ? !1 : !!oe;
            case f.BD.MultiChannelGuest:
            case f.BD.SingleChannelGuest:
              return !ae;
            default:
              return !0;
          }
        }
        _(R, "isRequestingInvitesForType");
        function G(H) {
          let { state: F } = H;
          const V = (0, C.H7)(F);
          return (0, y.z$)()
            ? !0
            : (0, o.r7)(V)
            ? !!(0, O.x)(F, "hide_gsuite_invite_option")
            : !1;
        }
        _(G, "isGoogleDirectoryDisabled");
      },
      9438480351: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => s,
        });
        var t = e(9101533895),
          n = e(9884588328);
        function s(i, d) {
          const o = (0, t.Pu)(i, d && d.id);
          return o ? (0, n.$M)(o) : null;
        }
        _(s, "getImUnreadCountByMember");
      },
      9541658228: (W, A, e) => {
        "use strict";
        e.d(A, {
          P: () => o,
        });
        var t = e(2003990933),
          n = e(5096647761),
          s = e(8847766420),
          i = e(6536982570),
          d = e(8170643398);
        function o(a, r) {
          if (!a || !r || (0, n.g)(r)) return !1;
          const c = (0, i.QI)(r);
          return (
            (0, d.dk)(r) &&
            (c === (0, s.jV)(a) ||
              c === (0, t.A)(r, "enterprise_user.enterprise_id"))
          );
        }
        _(o, "isMemberFromOrg");
      },
      148278831: (W, A, e) => {
        "use strict";
        e.d(A, {
          S: () => r,
        });
        var t = e(918457931),
          n = e(2298581483),
          s = e(6536982570),
          i = e(5096647761),
          d = e(2003903489),
          o = e(9541658228),
          a = e(893266994);
        const r = _((c, u, l) => {
          if ((0, i.g)(u)) return !1;
          if ((0, o.P)(c, u)) {
            if ((0, d.S)(l)) return !0;
            if ((0, t.t)(l)) return (0, n.R)(c, l).some((E) => (0, s.nO)(u, E));
          }
          const m = (0, a.c)(l);
          return (0, s.nO)(u, m);
        }, "isMemberOnSomeChannelWorkspace");
      },
      863407566: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => g,
        });
        var t = e(8455301571),
          n = e(2155512519),
          s = e(7606781622),
          i = e(3730613858),
          d = e(5795074931),
          o = e(8276911661),
          a = e(8170643398),
          r = e(4562579337),
          c = e(7334104107),
          u = e(9187449049),
          l = e(7616363684),
          m = e(1794107122),
          v = e(9290914927),
          E = e(1809170903);
        const T = 23;
        function g(I, f, y) {
          let M =
              arguments.length > 3 && arguments[3] !== void 0
                ? arguments[3]
                : Math.max((0, n.UL)(), y),
            p = arguments.length > 4 ? arguments[4] : void 0;
          if (!(0, t.si)(I, f)) return [];
          const O = (0, t.r7)(I, f);
          if (!O || !O.timestamps) return [];
          const C = (0, s.h8)(I, f),
            h = O.timestamps.slice(-M),
            D = (0, d.WR)(I);
          let P = [],
            S = [],
            b = !1;
          const K = [],
            x = [],
            B = [],
            U = [],
            R = [],
            G = [];
          let H = !1;
          for (let V = h.length - 1; V >= 0; V--) {
            const X = C[h[V]],
              q = (0, c.Hr)(X);
            if (!q) continue;
            if (p && q === D) {
              H = !0;
              continue;
            }
            if (
              !(p
                ? K.includes(q) || B.includes(q) || R.includes(q)
                : P.includes(q)) &&
              !(0, l.A)(X) &&
              (0, u.A)(X, D)
            ) {
              const z = (0, i.Sv)(I, f, q),
                Ae = (0, o.nv)(I, q);
              if (
                (b || (b = !(z != null && z.isKnown) || (0, a.t8)(Ae)),
                !b &&
                  z != null &&
                  z.isKnown &&
                  z != null &&
                  z.isMember &&
                  !(0, r.A)(Ae) &&
                  !(0, a.oy)(Ae))
              ) {
                if (p) {
                  if (
                    ((0, v.gd)(I, q) === "active"
                      ? (0, E.Vd)(I, q)
                        ? (B.push(q), U.push(Ae))
                        : (K.push(q), x.push(Ae))
                      : (R.push(q), G.push(Ae)),
                    x.length === y || B.length + G.length === T - y)
                  )
                    break;
                } else if ((P.push(q), S.push(Ae), S.length === y)) break;
              }
            }
          }
          if (b) return [];
          if (
            (p &&
              (x.length === y
                ? ((S = x), (P = K))
                : ((S = x.concat(U.slice(0, y - x.length))),
                  (P = K.concat(B.slice(0, y - R.length))),
                  S.length < y &&
                    ((S = S.concat(G.slice(0, y - x.length))),
                    (P = P.concat(R.slice(0, y - R.length)))))),
            S.length >= y)
          )
            return S;
          const F = (0, m.$)(I, f);
          if (!F.length) return [];
          for (let V = 0; V < F.length; V++) {
            const X = F[V];
            if (
              (X &&
                !P.includes(X) &&
                (p && X === D
                  ? (H = !0)
                  : (P.push(X), S.push((0, o.nv)(I, X)))),
              S.length === y)
            )
              break;
          }
          return S.length === 0 && H && (P.push(D), S.push((0, o.nv)(I, D))), S;
        }
        _(g, "getLastNRelevantMembersInChannel");
      },
      7616363684: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => s,
        });
        var t = e(7334104107),
          n = e(3339229351);
        function s(i) {
          return (0, t.Hr)(i) === n.Q$;
        }
        _(s, "isSlackbotMessage");
      },
      9951956014: (W, A, e) => {
        "use strict";
        e.d(A, {
          L: () => c,
          g: () => a,
        });
        var t = e(9507365519),
          n = e(1328783052),
          s = e(8847766420),
          i = e(7969244833),
          d = e(9101533895),
          o = e(497537177);
        const a = _((u, l, m, v) => {
            if ((0, o.X)(u)) return !0;
            const E = (0, t.p)(u, l, m);
            return Object.entries(E)
              .map((T) => {
                let [g, I] = T;
                return [g, v(I)];
              })
              .some((T) => {
                let [g, I] = T;
                return (0, n.Ic)(u, I, g);
              });
          }, "canUserDoCustomTeamPrefForTeamIds"),
          r = _((u, l, m, v) => {
            if (!m) return !1;
            const E = (0, i.f)(u, m);
            return E ? a(u, l, E, v) : !1;
          }, "canUserDoCustomTeamPrefForChannel"),
          c = _(
            (u) => ({
              getWorkspaceIdsOnWhichUserCanDoCustomTeamPref: (l, m) =>
                (0, s.VO)(l).filter((E) => a(l, m, [E], u)),
              canUserDoCustomTeamPrefInSomeWorkspace: (l, m) => {
                const v = (0, s.VO)(l);
                return a(l, m, v, u);
              },
              canUserDoCustomTeamPrefForChannel: (l, m, v) => r(l, m, v, u),
              canUserDoCustomTeamPrefForChannelById: (l, m, v) => {
                const E = (0, d.OL)(l, v);
                return r(l, m, E, u);
              },
            }),
            "createUserCanDoCustomTeamPrefRules"
          );
      },
      5169892262: (W, A, e) => {
        "use strict";
        e.d(A, {
          Cr: () => d,
          DH: () => i,
        });
        var t = e(9951956014),
          n = e(1328783052);
        const s = _(
            (r) => (r ? n.eT.ADMIN : n.eT.RA),
            "mapOnlyAdminToWhoCanStyle"
          ),
          {
            getWorkspaceIdsOnWhichUserCanDoCustomTeamPref: i,
            canUserDoCustomTeamPrefInSomeWorkspace: d,
            canUserDoCustomTeamPrefForChannel: o,
            canUserDoCustomTeamPrefForChannelById: a,
          } = (0, t.L)(s);
      },
      3769619294: (W, A, e) => {
        "use strict";
        e.d(A, {
          V: () => d,
          X: () => i,
        });
        var t = e(9101533895),
          n = e(7969244833),
          s = e(1328783052);
        const i = _((o, a, r) => {
            if (!r) return !1;
            const c = (0, n.f)(o, r);
            return c ? (0, s.TE)(o, a, c) : !1;
          }, "canUserDoTeamPrefForChannel"),
          d = _((o, a, r) => {
            const c = (0, t.OL)(o, r);
            return i(o, a, c);
          }, "canUserDoTeamPrefForChannelById");
      },
      3683888369: (W, A, e) => {
        "use strict";
        e.d(A, {
          l: () => i,
        });
        var t = e(1552255081),
          n = e(6839188756),
          s = e(3677514771);
        const i = _(
          (d) => (0, t.F)(d) && !(0, n.tc)((0, s.H7)(d)),
          "teamCanCreateStandaloneCanvas"
        );
      },
      5757070316: (W, A, e) => {
        "use strict";
        e.d(A, {
          J: () => s,
        });
        var t = e(78546762),
          n = e(1802262330);
        const s = _((i, d) => {
          var o, a;
          let r, c, u;
          i &&
            (i.subtype === "file_comment"
              ? ([c, r] = ["file_comment", i.comment])
              : (0, t.A)(i.subtype)
              ? ([c, r] = ["file", d])
              : ([c, r, u] = ["message", i, i.channel]));
          const l =
            c === "message"
              ? (o = r) === null || o === void 0
                ? void 0
                : o.ts
              : (a = r) === null || a === void 0
              ? void 0
              : a.id;
          return r && (r._rxn_key || (0, n.B)(c, l, u));
        }, "getReactionKey");
      },
      9001455011: (W, A, e) => {
        "use strict";
        e.d(A, {
          t: () => s,
        });
        var t = e(8161242485),
          n = e(9889493721);
        const s = (0, t.Ay)((i) => !((0, n.Bf)(i) || !(0, n.pr)(i)));
        s.meta = {
          name: "createSelector",
          key: "createSelectorshouldShowAppsLink",
          description: (i) => !((0, n.Bf)(i) || !(0, n.pr)(i)),
        };
      },
      2585735826: (W, A, e) => {
        "use strict";
        e.d(A, {
          R: () => c,
        });
        var t = e(1407713935),
          n = e(6113051341),
          s = e(340763958);
        const i = _(
          (u, l) => !(0, t.JM)(l) && (0, s.ju)(l) && !(0, n.N)(l),
          "canBeDisconnected"
        );
        var d = e(1359849784),
          o = e(6839188756),
          a = e(6025726268),
          r = e(3677514771);
        function c(u, l) {
          if (l && !i(u, l)) return !1;
          if (l && (0, a.M)(u, l)) return !0;
          const m = (0, r.H7)(u);
          return (0, o.tc)(m) ? !0 : (0, d.I)(u, l);
        }
        _(c, "canUserDisconnectExternalSharedChannel");
      },
      4803097854: (W, A, e) => {
        "use strict";
        e.d(A, {
          RY: () => c,
          cG: () => d,
          l6: () => r,
        });
        var t = e(7358758030),
          n = e(1650729052),
          s = e(5861086925),
          i = e(6841796315);
        const d = {
            RestrictedAction: Symbol("restricted_action"),
            CanCreateExternalLimitedPref: Symbol(
              "can_create_external_limited_pref"
            ),
            WhoCanCreateExternalLimitedPref: Symbol(
              "who_can_create_external_limited_pref"
            ),
          },
          o = {
            ok: !1,
            reason: d.CanCreateExternalLimitedPref,
          },
          a = {
            ok: !1,
            reason: d.WhoCanCreateExternalLimitedPref,
          },
          r = _((u) => {
            if (!(0, t.i)(u)) return o;
            const m = s.yY.WHO_CAN_CREATE_EXTERNAL_LIMITED_INVITE;
            return (0, n.y)(u, m) ? i.O : a;
          }, "canUserInviteExternalLimitedMembersWithReason"),
          c = _((u) => r(u).ok, "canUserInviteExternalLimitedMembers");
      },
      8323393403: (W, A, e) => {
        "use strict";
        e.d(A, {
          D7: () => y,
          JO: () => g,
          NU: () => f,
          wi: () => l,
        });
        var t = e(6027162153),
          n = e(2063075339),
          s = e(1407713935),
          i = e(7969244833),
          d = e(5455782105),
          o = e(3916100664),
          a = e(6839188756),
          r = e(6841796315),
          c = e(9101533895),
          u = e(3677514771);
        const l = {
            InvalidParams: Symbol("invalid_params"),
            FreeTeam: Symbol("free_team"),
            CannotRequest: Symbol("cannot_request_ext_shared"),
            InvalidChannel: Symbol("invalid_channel"),
          },
          m = {
            ok: !1,
            reason: l.InvalidParams,
          },
          v = {
            ok: !1,
            reason: l.FreeTeam,
          },
          E = {
            ok: !1,
            reason: l.CannotRequest,
          },
          T = {
            ok: !1,
            reason: l.InvalidChannel,
          },
          g = _((M, p) => {
            if (!(0, s.jq)(p)) return m;
            const O = (0, d.k)(M),
              C = (0, a.qR)((0, u.H7)(M));
            if (!O && !C) return v;
            const D = (0, o.lR)(M, {
              mustEveryWorkspaceBeAllowed: !0,
              teamIds: (0, i.f)(M, p),
            });
            return !(D != null && D.ok) &&
              (0, t.A)(
                D == null ? void 0 : D.reasons,
                o.jM.UserCannotCreateChannel,
                o.jM.AllowedWorkspacePref
              ).length > 0
              ? E
              : (0, n.Z)(M, p)
              ? r.O
              : T;
          }, "canUserInviteExternalMembersToChannelWithReason"),
          I = _((M, p) => {
            const C = (0, c.OL)(M, p, !1);
            return C ? g(M, C) : m;
          }, "canUserInviteExternalMembersToChannelWithReasonById"),
          f = _((M, p) => g(M, p).ok, "canUserInviteExternalMembersToChannel"),
          y = _(
            (M, p) => I(M, p).ok,
            "canUserInviteExternalMembersToChannelById"
          );
      },
      3916100664: (W, A, e) => {
        "use strict";
        e.d(A, {
          jM: () => y,
          Tc: () => p,
          lR: () => M,
        });
        var t = e(5455782105),
          n = e(4803097854),
          s = e(2643151579),
          i = e(6839188756),
          d = e(6992769897),
          o = e(9087248458),
          a = e(5980399196),
          r = e(3071940241),
          c = e(8359728598),
          u = e(4761125736);
        const l = (0, c.A)((O, C) => {
          const { teams: h, value: D } = C;
          switch (D) {
            case "ONLY_SELECTED":
              return (0, o.A)(O, h).length === O.length;
            case "ALL_EXCEPT_SELECTED":
              return (0, a.A)(O, h).length === O.length;
            default:
              return !0;
          }
        }, 2);
        function m(O) {
          let { slackConnectAllowedWorkspacesPref: C, teamIds: h } = O;
          return h != null && h.length ? l(h, C) : !1;
        }
        _(m, "isEveryTargetWorkspaceAllowedToHaveSharedChannelsStateless");
        function v(O, C) {
          return !(0, t.k)(O) ||
            (0, u._Z)(O, "sc_allowed_workspaces_pref_override") === "on"
            ? !0
            : m({
                slackConnectAllowedWorkspacesPref: (0, r.a)(O),
                teamIds: C,
              });
        }
        _(v, "isEveryTargetWorkspaceAllowedToHaveSharedChannels");
        var E = e(1507833885),
          T = e(3559837422),
          g = e(8847766420),
          I = e(3677514771);
        const f = {
            ok: !0,
          },
          y = {
            ...n.cG,
            ...s.Xg,
            InvalidParams: Symbol("invalid_params"),
            UserIsRestricted: Symbol("user_is_restricted"),
            FreeTeam: Symbol("free_team"),
            NoOneCanManagePref: Symbol(
              "who_can_manage_ext_shared_channels_pref_no_one"
            ),
            UserCannotCreateChannel: Symbol("create_channel_restricted_action"),
            AllowedWorkspacePref: Symbol(
              "slack_connect_allowed_workspaces_pref"
            ),
          },
          M = _(function (O) {
            let { mustEveryWorkspaceBeAllowed: C, teamIds: h } =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : {};
            const D = [],
              P = (0, I.H7)(O),
              S = (0, t.k)(O),
              b = (0, i.qR)(P),
              K = !S && !b;
            if ((0, T.AB)(O) || (0, T.sV)(O))
              return (
                D.push(y.UserIsRestricted),
                {
                  ok: !1,
                  reasons: D,
                }
              );
            var x;
            const B = (x = h ?? (0, g.kN)(O)) !== null && x !== void 0 ? x : [];
            (C ? E._t : E.Uq)(O, B) || D.push(y.UserCannotCreateChannel),
              (C ? v : d.A)(O, B) || D.push(y.AllowedWorkspacePref),
              K && D.push(y.FreeTeam);
            const G = (0, n.l6)(O),
              H = (0, s._d)(O);
            return (
              !G.ok && !H.ok && D.push(G.reason, H.reason),
              D.length > 0
                ? {
                    ok: !!K,
                    reasons: D,
                  }
                : f
            );
          }, "canUserInviteExternalMembersWithReason"),
          p = _((O, C) => M(O, C).ok, "canUserInviteExternalMembers");
      },
      2643151579: (W, A, e) => {
        "use strict";
        e.d(A, {
          Xg: () => d,
          _d: () => r,
          ml: () => c,
        });
        var t = e(5225510813),
          n = e(1650729052),
          s = e(5861086925),
          i = e(6841796315);
        const d = {
            RestrictedAction: Symbol("restricted_action"),
            CanCreateExternalUnlimitedPref: Symbol(
              "can_create_slack_connect_channel_pref"
            ),
            WhoCanCreateExternalUnlimitedPref: Symbol(
              "who_can_create_slack_connect_channel_pref"
            ),
          },
          o = {
            ok: !1,
            reason: d.CanCreateExternalUnlimitedPref,
          },
          a = {
            ok: !1,
            reason: d.WhoCanCreateExternalUnlimitedPref,
          },
          r = _((u) => {
            if (!(0, t.C)(u)) return o;
            const m = s.yY.WHO_CAN_CREATE_SLACK_CONNECT_CHANNEL_INVITE;
            return (0, n.y)(u, m) ? i.O : a;
          }, "canUserInviteExternalUnlimitedMembersWithReason"),
          c = _((u) => r(u).ok, "canUserInviteExternalUnlimitedMembers");
      },
      1359849784: (W, A, e) => {
        "use strict";
        e.d(A, {
          I: () => y,
          r: () => f,
        });
        var t = e(7174777686),
          n = e(9087248458),
          s = e(9884588328),
          i = e(1407713935),
          d = e(5455782105),
          o = e(7224980887),
          a = e(3792998666),
          r = e(5861086925),
          c = e(5331698805),
          u = e(6839188756),
          l = e(7112191091),
          m = e(5510392579),
          v = e(4761125736),
          E = e(8276911661),
          T = e(6693783993),
          g = e(3677514771),
          I = e(598369692);
        function f(M) {
          const p =
              (0, v._Z)(
                M,
                "light_read_who_can_manage_ext_shared_channels_pref_migration"
              ) === "on",
            O = (0, g.H7)(M);
          if (p) return (0, u.tc)(O) ? !1 : (0, T.Du)(M);
          const C = (0, E.cA)(M),
            h = (0, c.u)(M);
          if (!(h != null && h.value)) return !1;
          if ((0, d.k)(M)) {
            let D = [];
            switch (h.value) {
              case r.GX.ALL_ADMINS_AND_OWNERS:
                return (0, l.EC)(M) || (0, o.n5)(C) || (0, o.rr)(C);
              case r.GX.TOPLEVEL_ADMINS_AND_OWNERS_AND_SELECTED:
                return (0, o.n5)(C) || (0, o.rr)(C)
                  ? !0
                  : ((D = (0, I.QF)(M)),
                    !!(
                      (0, t.A)(h.users, C == null ? void 0 : C.id) ||
                      (0, n.A)(h.userGroups, D).length
                    ));
              case r.GX.EVERYONE:
                return !(0, a.Ez)(C);
              case r.GX.TOPLEVEL_ADMINS_AND_OWNERS:
              default:
                return (0, o.n5)(C) || (0, o.rr)(C);
            }
          }
          if ((0, u.qR)(O))
            switch (h.value) {
              case r.GX.TOPLEVEL_OWNERS:
                return (0, m.p2)(M);
              case r.GX.EVERYONE:
                return !(0, a.Ez)(C);
              case r.GX.TOPLEVEL_ADMINS_AND_OWNERS:
              default:
                return (0, m.p2)(M) || (0, m.Zo)(M);
            }
          return !1;
        }
        _(f, "canUserManageExternalSharedChannels");
        function y(M, p) {
          const O =
              (0, v._Z)(
                M,
                "light_read_who_can_manage_ext_shared_channels_pref_migration"
              ) === "on",
            C = (0, g.H7)(M);
          if (O) {
            if ((0, u.tc)(C) || !(0, i.jq)(p)) return !1;
            const P = (0, s.FB)(p);
            return (0, T.Du)(M, {
              channelId: P,
            });
          }
          const h = (0, E.cA)(M),
            D = (0, c.u)(M);
          if (!(D != null && D.value)) return !1;
          if ((0, d.k)(M)) {
            let P = [];
            switch (D.value) {
              case r.GX.ALL_ADMINS_AND_OWNERS:
                return (0, l.S4)(M, p);
              case r.GX.TOPLEVEL_ADMINS_AND_OWNERS_AND_SELECTED:
                return (0, o.n5)(h) || (0, o.rr)(h)
                  ? !0
                  : ((P = (0, I.QF)(M)),
                    !!(
                      (0, t.A)(D.users, h == null ? void 0 : h.id) ||
                      (0, n.A)(D.userGroups, P).length
                    ));
              case r.GX.EVERYONE:
                return !(0, a.Ez)(h);
              case r.GX.TOPLEVEL_ADMINS_AND_OWNERS:
              default:
                return (0, o.n5)(h) || (0, o.rr)(h);
            }
          }
          if ((0, u.qR)(C))
            switch (D.value) {
              case r.GX.TOPLEVEL_OWNERS:
                return (0, m.p2)(M);
              case r.GX.EVERYONE:
                return !(0, a.Ez)(h);
              case r.GX.TOPLEVEL_ADMINS_AND_OWNERS:
              default:
                return (0, m.p2)(M) || (0, m.Zo)(M);
            }
          return !1;
        }
        _(y, "canUserManageSlackConnectChannel");
      },
      1273480023: (W, A, e) => {
        "use strict";
        e.d(A, {
          u: () => d,
        });
        var t = e(2063075339),
          n = e(340763958),
          s = e(6839188756),
          i = e(3677514771);
        const d = _((o, a) => {
          const r = (0, i.H7)(o);
          return (0, s.tc)(r) && (0, n.ju)(a) && (0, t.Z)(o, a);
        }, "getIsCurrentTeamSponsoredInSlackConnectChannel");
      },
      8767621462: (W, A, e) => {
        "use strict";
        e.d(A, {
          S: () => o,
        });
        var t = e(8170643398),
          n = e(5096647761),
          s = e(9107158149),
          i = e(7600673124),
          d = e(8276911661);
        const o = _((a, r) => {
          const c = (0, d.nv)(a, r);
          return (0, t.Zx)(c)
            ? !1
            : (0, n.g)(c)
            ? !!((0, s.bo)(a, r) && (0, s.zP)(a, r) && !(0, i.y)(a, r))
            : !0;
        }, "isMemberConnectedById");
      },
      3071940241: (W, A, e) => {
        "use strict";
        e.d(A, {
          _: () => o,
          a: () => a,
        });
        var t = e(2003990933),
          n = e(5455782105),
          s = e(2689960678),
          i = e(6790819894),
          d = e(766806);
        const o = {
            All: "ALL",
            AllExceptSelected: "ALL_EXCEPT_SELECTED",
            OnlySelected: "ONLY_SELECTED",
          },
          a = (0, i.F)(
            n.k,
            (r) => (0, d.SI)(r, "slack_connect_allowed_workspaces"),
            (r, c) =>
              r
                ? {
                    value: (0, t.A)(c, "type[0]"),
                    teams: (c == null ? void 0 : c.team) || s.Ml,
                  }
                : {
                    value: o.All,
                    teams: s.Ml,
                  }
          );
      },
      7358758030: (W, A, e) => {
        "use strict";
        e.d(A, {
          i: () => a,
        });
        var t = e(5455782105),
          n = e(5861086925),
          s = e(6839188756),
          i = e(766806),
          d = e(5597672932),
          o = e(3677514771);
        const a = _((r) => {
          const c = (0, t.k)(r),
            u = (0, o.H7)(r);
          return !c && (0, s.tc)(u)
            ? !1
            : (c ? i.SI : d.x)(r, n.yY.CAN_CREATE_EXTERNAL_LIMITED_INVITE);
        }, "getCanCreateExternalLimitedInvitePref");
      },
      5225510813: (W, A, e) => {
        "use strict";
        e.d(A, {
          C: () => a,
        });
        var t = e(5455782105),
          n = e(5861086925),
          s = e(6839188756),
          i = e(766806),
          d = e(5597672932),
          o = e(3677514771);
        const a = _((r) => {
          const c = (0, t.k)(r),
            u = (0, o.H7)(r);
          return !c && (0, s.tc)(u)
            ? !1
            : (c ? i.SI : d.x)(r, n.yY.CAN_CREATE_SLACK_CONNECT_CHANNEL_INVITE);
        }, "getCanCreateSlackConnectChannelInvitePref");
      },
      1650729052: (W, A, e) => {
        "use strict";
        e.d(A, {
          y: () => v,
        });
        var t = e(7174777686),
          n = e(9087248458),
          s = e(5455782105),
          i = e(5861086925),
          d = e(8087758879),
          o = e(6839188756),
          a = e(5343157203),
          r = e(5510392579),
          c = e(3559837422),
          u = e(5795074931),
          l = e(3677514771),
          m = e(598369692);
        const v = _((E, T) => {
          const g = (0, u.WR)(E);
          var I;
          const f = (I = (0, l.H7)(E)) !== null && I !== void 0 ? I : void 0;
          if ((0, c.AB)(E) || (0, c.sV)(E)) return !1;
          const y = (0, r.p2)(E),
            M = (0, r.Zo)(E),
            p = (0, a.C)(E),
            O = (0, s.k)(E),
            C = (0, o.qR)(f),
            h = (0, d.o)(E, T);
          if (O) {
            const D = (0, r.hu)(E),
              P = (0, r.FQ)(E);
            switch (h.value) {
              case i.GX.TOPLEVEL_ADMINS_AND_OWNERS:
                return D || P;
              case i.GX.TOPLEVEL_ADMINS_AND_OWNERS_AND_SELECTED:
                return D || P ? !0 : !!(0, t.A)(h.users, g);
              case i.GX.ALL_ADMINS_AND_OWNERS:
                return D || P || p;
              case i.GX.EVERYONE:
                return !0;
              default:
                return !1;
            }
          }
          if (C)
            switch (h.value) {
              case i.GX.TOPLEVEL_OWNERS:
                return y;
              case i.GX.TOPLEVEL_ADMINS_AND_OWNERS:
                return y || M;
              case i.GX.TOPLEVEL_ADMINS_AND_OWNERS_AND_SELECTED:
                return y || M || (0, t.A)(h.users, g)
                  ? !0
                  : !!(0, n.A)(h.userGroups, (0, m.QF)(E)).length;
              case i.GX.EVERYONE:
                return !0;
              default:
                return !1;
            }
          return !1;
        }, "isUserWhoCanDoSlackConnectPref");
      },
      5861086925: (W, A, e) => {
        "use strict";
        e.d(A, {
          GX: () => n,
          cM: () => i,
          d5: () => s,
          yY: () => t,
        });
        const t = {
            CAN_CREATE_EXTERNAL_LIMITED_INVITE:
              "can_create_external_limited_invite",
            WHO_CAN_CREATE_EXTERNAL_LIMITED_INVITE:
              "who_can_create_external_limited_invite",
            CAN_CREATE_SLACK_CONNECT_CHANNEL_INVITE:
              "can_create_slack_connect_channel_invite",
            WHO_CAN_CREATE_SLACK_CONNECT_CHANNEL_INVITE:
              "who_can_create_slack_connect_channel_invite",
            CAN_ACCEPT_SLACK_CONNECT_CHANNEL_INVITES:
              "can_accept_slack_connect_channel_invites",
            WHO_CAN_ACCEPT_SLACK_CONNECT_CHANNEL_INVITES:
              "who_can_accept_slack_connect_channel_invites",
            WHO_CAN_MANAGE_SHARED_CHANNELS:
              "who_can_manage_ext_shared_channels",
            WHO_CAN_SLACK_CONNECT_DM: "who_can_dm_anyone",
          },
          n = {
            TOPLEVEL_OWNERS: "TOPLEVEL_OWNERS",
            ALL_ADMINS_AND_OWNERS: "ORG_AND_WORKSPACE_ADMINS_OWNERS",
            TOPLEVEL_ADMINS_AND_OWNERS: "TOPLEVEL_ADMINS_AND_OWNERS",
            TOPLEVEL_ADMINS_AND_OWNERS_AND_SELECTED:
              "TOPLEVEL_ADMINS_AND_OWNERS_AND_SELECTED",
            EVERYONE: "EVERYONE",
          },
          s = {
            ...n,
            NO_ONE: "NO_ONE",
            DEFAULT: n.EVERYONE,
          },
          i = {
            CAN_FREE_TEAMS_JOIN_SC_CHANNELS:
              "allow_sponsored_slack_connections",
          };
      },
      5331698805: (W, A, e) => {
        "use strict";
        e.d(A, {
          u: () => s,
        });
        var t = e(5861086925),
          n = e(8087758879);
        const s = _((i) => {
          const d = t.yY.WHO_CAN_MANAGE_SHARED_CHANNELS;
          return (0, n.o)(i, d);
        }, "getWhoCanManageSharedChannelsPref");
      },
      8087758879: (W, A, e) => {
        "use strict";
        e.d(A, {
          o: () => c,
        });
        var t = e(5455782105),
          n = e(5861086925),
          s = e(6839188756),
          i = e(2689960678),
          d = e(766806),
          o = e(5597672932),
          a = e(3677514771);
        const r = {
            plan: "",
            value: "",
            users: i.Ml,
            userGroups: i.Ml,
          },
          c = _((u, l) => {
            var m;
            const v = (0, a.H7)(u),
              E = (0, t.k)(u);
            if (!E && (0, s.tc)(v)) return r;
            const T = (E ? "enterprise" : v.plan) || "",
              g = E ? (0, d.SI)(u, l) : (0, o.x)(u, l),
              I =
                (g == null || (m = g.type) === null || m === void 0
                  ? void 0
                  : m[0]) || "",
              f = I === n.GX.TOPLEVEL_ADMINS_AND_OWNERS_AND_SELECTED,
              y = (f && (g == null ? void 0 : g.user)) || r.users,
              M = (f && (g == null ? void 0 : g.subteam)) || r.userGroups;
            return {
              plan: T,
              value: I,
              users: y,
              userGroups: M,
            };
          }, "getWhoCanPref");
      },
      3212336858: (W, A, e) => {
        "use strict";
        e.d(A, {
          DP: () => N,
          qc: () => ee,
          qA: () => Me,
          Bs: () => J,
          Hv: () => w,
          fK: () => L,
          tY: () => ke,
          GE: () => ne,
          b: () => k,
          iH: () => ge,
          mE: () => le,
        });
        var t = e(7174777686),
          n = e(4761125736),
          s = e(3245843483),
          i = e(5597672932),
          d = e(8276911661),
          o = e(9101533895),
          a = e(3792998666),
          r = e(3339229351),
          c = e(2791814261),
          u = e(8904182388),
          l = e(6165525655),
          m = e(591259428),
          v = e(9884588328),
          E = e(1407713935),
          T = e(395285811),
          g = e(918457931),
          I = e(2585735826),
          f = e(340763958),
          y = e(5343157203),
          M = e(9416626),
          p = e(6693783993);
        const O = {
            ...M.u9,
            CantDisconnectExtShared: Symbol("cant_disconnect_ext_shared"),
            WhoCanManagePref: Symbol("who_can_manage_shared_channels"),
          },
          C = {
            ok: !1,
            reason: O.ChannelNotFound,
          },
          h = {
            ok: !1,
            reason: O.ChannelTypeNotSupported,
          },
          D = {
            ok: !1,
            reason: O.CantDisconnectExtShared,
          },
          P = {
            ok: !1,
            reason: O.WhoCanManagePref,
          },
          S = {
            ok: !0,
          },
          b = _((ye, Te) => {
            const De =
              (0, n._Z)(
                ye,
                "light_read_who_can_manage_shared_channels_pref_migration"
              ) === "on";
            if (!(0, E.jq)(Te)) return C;
            if ((0, T.K3)(ye, Te)) return h;
            if ((0, f.ju)(Te) && !(0, I.R)(ye, Te)) return D;
            const Ue = (0, v.FB)(Te),
              Ke = (0, p.Om)(ye, {
                channelId: Ue,
              });
            if (!De && (0, g.t)(Te)) {
              if (Ke) return S;
              if (!(0, y.E)(ye)) return P;
            }
            return (0, M.iz)(ye, Te);
          }, "canUserArchiveChannelWithReasons"),
          K = _((ye, Te) => b(ye, Te).ok, "canUserArchiveChannel");
        var x = e(7563681762),
          B = e(7148679525),
          U = e(6495946979),
          R = e(2912967402),
          G = e(571104883),
          H = e(735940183),
          F = e(5156662944);
        const V = _(
          (ye) => ye && (0, n._Z)(ye, "feedback_disabled_orgs") === "treatment",
          "isOrgInFeedbackDisabledList"
        );
        var X = e(529357503),
          q = e(7969244833),
          oe = e(6934022494);
        const z = new H.Ay("cmd_handlers"),
          {
            UNKNOWN_COMMAND: Ae,
            UNSUPPORTED_IN_THREAD: ae,
            UNSUPPORTED_IN_SHORTCUTS_MENU: de,
            CUSTOM_ERROR: ve,
          } = r.SLASH_COMMAND_ERRORS,
          Se = [
            "/away",
            "/collapse",
            "/color",
            "/colour",
            "/dm",
            "/expand",
            "/feedback",
            "/keys",
            "/me",
            "/msg",
            "/s",
            "/search",
            "/shortcuts",
            "/shrug",
            "/slack_diagnostic_report",
            "/slackdevtools",
            "/star",
            "/gif",
            "/active",
            "/giphy",
            "/iamcal",
            "/mute",
            "/remind",
          ],
          Ee = [
            "/asana",
            "/adobe-manage",
            "/adobe-subscribe",
            "/adobe-feedback",
            "/adobe-help",
            "/cohere-help",
            "/cohere-settings",
            "/cohere-summarize",
            "/cohere-quiet",
          ],
          be = [
            "/away",
            "/active",
            "/keys",
            "/shortcuts",
            "/apps",
            "/rename",
            "/feedback",
            "/mute",
            "/dnd",
            "/leave",
            "/part",
            "/close",
            "/call",
          ],
          Ce = [
            "/slackdebugunreads",
            "/slackgov",
            "/slackjspath",
            "/slackstaging",
          ],
          Z = ["/slackaccessibility", "/slackgov"],
          $ = ["/leave", "/close", "/part", "/archive", "/topic"],
          N = _((ye) => ye && ye.alias_of, "getCommandAliasOf"),
          L = _((ye) => ye && ye.name, "getCommandName"),
          w = _((ye) => ye && (ye.desc || ye.description), "getCommandDesc"),
          k = _((ye) => ye && ye.usage, "getCommandUsage"),
          J = _(
            (ye) => ye && (ye.canonical_name || ye.name),
            "getCommandCanonicalName"
          ),
          ee = _((ye) => ye && ye.aliases, "getCommandAliases"),
          ne = _((ye) => ye && ye.type, "getCommandType"),
          pe = _((ye) => ye && ye.app, "getCommandApp"),
          Me = _(
            (ye) => (ye == null ? void 0 : ye.appName),
            "getCommandAppName"
          ),
          ke = _((ye, Te, De) => {
            const Ue = (0, o.OL)(ye, De),
              Ke = Ue ? (0, q.f)(ye, Ue) || [] : [];
            return Te.teams &&
              Ke.length &&
              Te.appName !== "Slack" &&
              !Te.isWorkspaceAgnostic
              ? Te.teams.filter((Q) => Ke.includes(Q))
              : [];
          }, "getCommandRelatedWorkspaces"),
          ge = _(function (ye, Te) {
            let { channelId: De } =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : {};
            if (!Te) return !1;
            const Ue = J(Te);
            return Ue === "/leave"
              ? (0, l.Y9)(ye, De)
              : Ue === "/remove"
              ? (0, u.Vj)(ye, De)
              : [
                  "/topic",
                  "/search",
                  "/invite",
                  "/invite_people",
                  "/status",
                  "/dm",
                  "/msg",
                ].indexOf(Ue) > -1
              ? !1
              : !!Te.autocomplete;
          }, "isAutocompleteCommand"),
          fe = _((ye) => !!(ye && ye.isServer), "isServerCommand"),
          re = _(function (ye) {
            let Te =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : !1;
            switch (ye) {
              case x.a_.InvalidDm:
                return z.t(
                  "Direct messages don\u2019t even have a name! Ergo, regrettably, you can\u2019t change it."
                );
              case x.a_.OwnerRequired:
                return z.t(
                  "Only Workspace Admins (or the channel creator) are allowed to rename channels."
                );
              case x.a_.InvalidParams:
                return Te
                  ? z.t(
                      "Channel names can\u2019t contain spaces, periods, or most punctuation. Try again?"
                    )
                  : z.t("You don\u2019t have permission to rename.");
              case x.a_.RestrictedUser:
                return Te
                  ? z.t(
                      "Your admins have limited who can rename multi-workspace channels."
                    )
                  : z.t("You don\u2019t have permission to rename.");
              case x.a_.OrgSharedSettings:
                return Te
                  ? z.t(
                      "Your admins have limited who can rename multi-workspace channels."
                    )
                  : z.t("You don\u2019t have permission to rename.");
              case x.a_.InvalidChannelType:
                return z.t("This channel can\u2019t be renamed.", {
                  fallbackHash: "796ff139eccb4a046e980e400012eb16b22449d8",
                });
              default:
                return z.t("You don\u2019t have permission to rename.");
            }
          }, "getRenameDisabledFeedback"),
          le = _(function (ye, Te) {
            let {
              channelId: De,
              isThread: Ue,
              isShortcutsMenu: Ke,
            } = arguments.length > 2 && arguments[2] !== void 0
              ? arguments[2]
              : {};
            if (!ye || !Te)
              return {
                isEnabled: !1,
                reason: Ae,
              };
            const Ze = (0, n._Z)(ye, "ai_apps_feature") === "on",
              Q = J(Te),
              ie = ne(Te),
              Ve = (0, o.OL)(ye, De);
            if (!(0, c.L)(ye) && (0, t.A)(Ce, Q))
              return {
                isEnabled: !1,
                reason: Ae,
              };
            if (!(0, G.y3)() && (0, t.A)(Z, Q))
              return {
                isEnabled: !1,
                reason: Ae,
              };
            if ((0, T.jT)(Ve) && (0, t.A)($, Q))
              return {
                isEnabled: !1,
                reason: Ae,
              };
            if (Ue && !((0, t.A)(Se, Q) || (Ze && (0, t.A)(Ee, Q))))
              return {
                isEnabled: !1,
                reason: ae,
              };
            if (Ke && (0, t.A)(be, Q))
              return {
                isEnabled: !1,
                reason: de,
              };
            if (ie === "custom" || ie === "service") {
              const je = (0, i.x)(ye, "commands_only_regular"),
                Fe = (0, d.cA)(ye);
              if (je && (0, a.Ez)(Fe))
                return {
                  isEnabled: !1,
                  reason: Ae,
                };
            }
            if (Te.teams) {
              const je = (0, q.f)(ye, Ve) || [];
              if (!Te.teams.filter((He) => je.includes(He)).length) {
                const He = `Command not run. No intersection found between channel teams (${je}) and command teams (${Te.teams})`;
                return {
                  isEnabled: !1,
                  reason: ve,
                  logString: He,
                  feedback: z.t(
                    "This command is not available in this channel"
                  ),
                };
              }
            }
            if (Q === "/open" || Q === "/feed") {
              const je = (0, d.cA)(ye);
              if ((0, a.Ez)(je))
                return {
                  isEnabled: !1,
                  reason: Ae,
                };
            } else if (Q === "/topic") {
              const { ok: je, reason: Fe } = (0, m.X)(ye, De);
              if (!je)
                return {
                  isEnabled: !1,
                  reason: ve,
                  feedback: (0, R.Bw)(Fe),
                };
            } else if (Q === "/invite") {
              const je = (0, d.cA)(ye);
              if ((0, a.Yd)(je))
                return {
                  isEnabled: !1,
                  reason: Ae,
                };
              if (!(0, U.bl)(Ve))
                return {
                  isEnabled: !1,
                  reason: ve,
                  feedback: z.t(
                    "You don\u2019t have permission to invite people."
                  ),
                };
              if (((0, a.Ez)(je) && !(0, E.Zp)(Ve)) || (0, X.A)(ye, je, Ve))
                return {
                  isEnabled: !1,
                  reason: ve,
                  feedback: z.t(
                    "You don\u2019t have permission to invite people."
                  ),
                };
            } else if (Q === "/invite_people") {
              if (!(0, B.Lz)(ye))
                return {
                  isEnabled: !1,
                  reason: ve,
                  feedback: z.t(
                    "You don\u2019t have permission to invite people."
                  ),
                };
            } else if (Q === "/rename") {
              const { ok: je, reason: Fe } = (0, x.be)(ye, De);
              if (!je)
                return {
                  isEnabled: !1,
                  reason: ve,
                  feedback: re(Fe),
                };
            } else if (Q === "/archive") {
              if (!K(ye, Ve))
                return {
                  isEnabled: !1,
                  reason: Ae,
                };
            } else if (Q === "/call") {
              if (!(0, F.lp)(ye, De) || (0, F.tO)(ye))
                return {
                  isEnabled: !1,
                  reason: Ae,
                };
            } else if (Q === "/slacktrace") {
              if (!(0, s.Rg4)())
                return {
                  isEnabled: !1,
                  reason: ve,
                  feedback: z.t(
                    "Please run /slacktrace in the latest version of the Slack desktop app."
                  ),
                };
            } else if (Q === "/feedback") {
              if (V(ye))
                return {
                  isEnabled: !1,
                  reason: Ae,
                };
            } else if (Q === "/gif") {
              if (!(0, oe.R4)(ye))
                return {
                  isEnabled: !1,
                  reason: Ae,
                };
              if (!(0, oe.BH)(ye))
                return {
                  isEnabled: !1,
                  reason: ve,
                  feedback: z.t("Attach a GIF is not enabled."),
                };
            }
            return {
              isEnabled: !0,
            };
          }, "isSlashCommandEnabled"),
          Re = {
            getRenameDisabledFeedback: re,
            TS_ONLY_COMMANDS: Ce,
            DESKTOP_APP_ONLY_COMMANDS: Z,
          };
      },
      6992769897: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => c,
          O: () => r,
        });
        var t = e(9087248458),
          n = e(5980399196),
          s = e(5455782105),
          i = e(3071940241),
          d = e(8359728598),
          o = e(4761125736);
        const a = (0, d.A)((u, l) => {
          const { teams: m, value: v } = l;
          switch (v) {
            case "ONLY_SELECTED":
              return !!(0, t.A)(u, m).length;
            case "ALL_EXCEPT_SELECTED":
              return !!(0, n.A)(u, m).length;
            default:
              return !0;
          }
        }, 2);
        function r(u) {
          let { slackConnectAllowedWorkspacesPref: l, teamIds: m } = u;
          return m != null && m.length ? a(m, l) : !1;
        }
        _(r, "areSomeTargetWorkspacesAllowedToHaveSharedChannelsStateless");
        function c(u, l) {
          return !(0, s.k)(u) ||
            (0, o._Z)(u, "sc_allowed_workspaces_pref_override") === "on"
            ? !0
            : r({
                slackConnectAllowedWorkspacesPref: (0, i.a)(u),
                teamIds: l,
              });
        }
        _(c, "areSomeTargetWorkspacesAllowedToHaveSharedChannels");
      },
      2801540778: (W, A, e) => {
        "use strict";
        e.d(A, {
          z: () => i,
        });
        var t = e(6839188756),
          n = e(8847766420),
          s = e(1890276164);
        function i(d, o) {
          if (!d || !o) return !1;
          const a = (0, t.ZT)(o);
          if ((0, n.Kc)(d) === a || (0, n.ZT)(d) === a) return !1;
          const r = (0, n.jV)(d);
          return r && r === o.enterprise_id ? !1 : (0, s.R)(d, o.id);
        }
        _(i, "isTeamExternal");
      },
      958961878: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => I,
          w2: () => T,
        });
        var t = e(8161242485),
          n = e(3202757386),
          s = e(4096483543),
          i = e(6564475562),
          d = e(2249017398),
          o = e(2615100822),
          a = e(5731054235),
          r = e(6089972488);
        const u = _(() => (0, n.A)(), "isDarkModeFeatureEnabled");
        var l = e(571104883),
          m = e(506684971),
          v = e.n(m);
        const E = _(() => {
            var y;
            const M =
                (0, l.y3)() ||
                ((y = window.matchMedia) === null || y === void 0
                  ? void 0
                  : y.call(window, "(prefers-color-scheme)").media) !==
                  "not all",
              p =
                (0, l.cX)() &&
                (0, r.Z)((0, r.P)(v().osversion), (0, r.P)("10.14")) >= 0,
              O = (0, l.jy)(),
              C = (0, l.j9)() && (0, l.dY)("4.36.136"),
              h = p || O || C,
              D =
                (0, l.y3)() ||
                (0, s.A)() ||
                (0, i.A)() ||
                (0, d.A)() ||
                (0, o.A)() ||
                (0, a.A)();
            return (0, n.A)() && M && h && D;
          }, "computeSystemSyncIsSupportedOnBoot"),
          T = E(),
          g = (0, t.Ay)((y) => !!T && !!u(y));
        g.meta = {
          name: "createSelector",
          key: "createSelectorgetSystemSyncIsSupported",
          description: (y) => !!T && !!u(y),
        };
        const I = g,
          f = {
            computeSystemSyncIsSupportedOnBoot: E,
          };
      },
      677609895: (W, A, e) => {
        "use strict";
        e.d(A, {
          X: () => d,
        });
        var t = e(2384831516),
          n = e(5510392579),
          s = e(5597672932),
          i = e(3677514771);
        const d = (0, t.Mz)((o) => {
          const a = (0, i.Yc)(o);
          return (0, n.p2)(o, a.id) || (0, s.x)(o, "all_users_can_purchase");
        });
        d.meta = {
          name: "createSelector",
          key: "createSelectorgetCanCurrentUserUpgradeSlack",
          description: (o) => {
            const a = (0, i.Yc)(o);
            return (0, n.p2)(o, a.id) || (0, s.x)(o, "all_users_can_purchase");
          },
        };
      },
      4400471894: (W, A, e) => {
        "use strict";
        e.d(A, {
          i: () => d,
        });
        var t = e(8276911661),
          n = e(5795074931),
          s = e(7224980887),
          i = e(3769619294);
        const d = _((o, a) => {
          const r = (0, t.cA)(o);
          return (0, n.u8)(o) && (0, s.n5)(r)
            ? !0
            : (0, i.V)(o, "who_can_at_channel", a);
        }, "canNonAdminsAtChannelOrGroupBySettings");
      },
      4746276247: (W, A, e) => {
        "use strict";
        e.d(A, {
          g: () => n,
        });
        var t = e(3769619294);
        const n = _(
          (s, i) => (0, t.V)(s, "who_can_at_everyone", i),
          "canNonAdminsAtMentionEveryoneBySettings"
        );
      },
      317660850: (W, A, e) => {
        "use strict";
        e.d(A, {
          D: () => d,
        });
        var t = e(3559837422),
          n = e(5169892262),
          s = e(4761125736),
          i = e(6693783993);
        const d = _(
          (o) =>
            (0, s._Z)(o, "light_read_emoji_only_admins_pref_migration") === "on"
              ? (0, i.eq)(o)
              : !(0, t.sV)(o) && (0, n.Cr)(o, "emoji_only_admins"),
          "canUserAddEmoji"
        );
      },
      324756633: (W, A, e) => {
        "use strict";
        e.d(A, {
          S: () => c,
        });
        var t = e(9101533895),
          n = e(4400471894),
          s = e(201941576),
          i = e(7112191091),
          d = e(4761125736),
          o = e(6693783993),
          a = e(1407713935);
        const r = _(
          (u) =>
            (0, d._Z)(u, "light_read_who_can_at_channel_pref_migration") ===
            "on",
          "shouldUsePermissions"
        );
        function c(u, l) {
          const m = ((0, t.gT)(u, l) && (0, t.OL)(u, l)) || void 0;
          return r(u)
            ? ((0, a.yz)(m)
                ? (0, o.E2)(u)
                : (0, o.E2)(u, {
                    channelId: l,
                  })) &&
                !(0, s.i)(u, m == null ? void 0 : m.id, {
                  allowToAdmins: !0,
                })
            : (0, i.yG)(u, m)
            ? !0
            : (0, n.i)(u, l) &&
              !(0, s.i)(u, m == null ? void 0 : m.id, {
                allowToAdmins: !0,
              });
        }
        _(c, "canUserAtChannelInChannelById");
      },
      641827819: (W, A, e) => {
        "use strict";
        e.d(A, {
          W: () => c,
        });
        var t = e(4746276247),
          n = e(9101533895),
          s = e(201941576),
          i = e(6113051341),
          d = e(5795074931),
          o = e(4761125736),
          a = e(6693783993);
        const r = _(
            (u) =>
              (0, o._Z)(u, "light_read_who_can_at_everyone_pref_migration") ===
              "on",
            "shouldUsePermissions"
          ),
          c = _((u, l) => {
            const m = ((0, n.gT)(u, l) && (0, n.OL)(u, l)) || void 0;
            return !l || !m || !(0, i.N)(m)
              ? !1
              : r(u)
              ? (0, d.u8)(u)
                ? (0, a._7)(u, {
                    channelId: l,
                  }) &&
                  !(0, s.i)(u, m == null ? void 0 : m.id, {
                    allowToAdmins: !0,
                  })
                : (0, a._7)(u, {
                    channelId: l,
                  })
              : (0, d.u8)(u)
              ? (0, t.g)(u, l) &&
                !(0, s.i)(u, m == null ? void 0 : m.id, {
                  allowToAdmins: !0,
                })
              : (0, t.g)(u, l);
          }, "canUserAtEveryoneInChannelById");
      },
      1507833885: (W, A, e) => {
        "use strict";
        e.d(A, {
          MM: () => d,
          Uq: () => o,
          _t: () => a,
        });
        var t = e(3385422400),
          n = e(5962670951),
          s = e(241752795),
          i = e(1340402138);
        const d = _(
            (r) => ((0, s.HV)(r) || (0, n.R)(r)) && !(0, i.R)(r),
            "canUserCreateChannelsInSomeWorkspace"
          ),
          o = (0, t.Mz)(
            s.y5,
            n.S,
            (r, c) => c,
            (r, c, u) => u.some((l) => r.includes(l) || c.includes(l))
          ),
          a = (0, t.Mz)(
            s.y5,
            n.S,
            (r, c) => c,
            (r, c, u) => u.every((l) => r.includes(l) || c.includes(l))
          );
      },
      5962670951: (W, A, e) => {
        "use strict";
        e.d(A, {
          R: () => i,
          S: () => d,
        });
        var t = e(3078708518),
          n = e(6693783993);
        const s = _((o) => !(0, t.A)(o), "isPermittedToPrecondition"),
          i = _(
            (o) => (s(o) ? (0, n.lM)(o) : !1),
            "canUserCreatePrivateChannelsInSomeWorkspace"
          ),
          d = _(
            (o) => (s(o) ? (0, n.f$)(o) : []),
            "getWorkspaceIdsOnWhichUserCanCreatePrivateChannels"
          );
      },
      241752795: (W, A, e) => {
        "use strict";
        e.d(A, {
          HV: () => l,
          YD: () => v,
          y5: () => m,
        });
        var t = e(3078708518),
          n = e(1407713935),
          s = e(6495946979),
          i = e(1190344069),
          d = e(7304011293),
          o = e(3307632080),
          a = e(7112191091),
          r = e(4761125736),
          c = e(6693783993);
        const u = _((E) => !(0, t.A)(E), "isPermittedToPrecondition"),
          l = _(
            (E) => (u(E) ? (0, c.F5)(E) : !1),
            "canUserCreatePublicChannelsInSomeWorkspace"
          ),
          m = _(
            (E) => (u(E) ? (0, c.qm)(E) : []),
            "getWorkspaceIdsOnWhichUserCanCreatePublicChannels"
          ),
          v = _((E, T) => {
            const g =
              (0, r._Z)(
                E,
                "convert_private_to_public_channel_permission_creation"
              ) === "on";
            if (!(0, n.Zp)(T) || !u(E) || (0, o.A)(E, T)) return !1;
            const I = (0, c.Mz)(E, {
              channelId: T.id,
            });
            return (g && ((I && (0, s.bl)(T)) || (0, a.yG)(E, T))) ||
              ((0, i.hm)(E) && (0, n.rI)(T) && (0, d.O)(E, T.id))
              ? !0
              : !!(0, a.yG)(E, T);
          }, "canUserCreatePublicChannelFromPrivateChannel");
      },
      1612857492: (W, A, e) => {
        "use strict";
        e.d(A, {
          i: () => c,
          q: () => r,
        });
        var t = e(9884588328),
          n = e(6495946979),
          s = e(7112191091),
          i = e(1407713935),
          d = e(9101533895),
          o = e(6693783993),
          a = e(8250322877);
        const r = _((u, l) => {
            if (!(0, i.jq)(l)) return !1;
            const m = (0, t.FB)(l);
            return (
              (0, a.D)(u, l) &&
              ((0, s.S4)(u, l) ||
                ((0, n.bl)(l) &&
                  (0, o.MN)(u, {
                    channelId: m,
                  })))
            );
          }, "canUserInviteExternalUsersToChannel"),
          c = _((u, l) => {
            const v = (0, d.OL)(u, l, !1);
            return v ? r(u, v) : !1;
          }, "canUserInviteExternalUsersToChannelById");
      },
      9183417278: (W, A, e) => {
        "use strict";
        e.d(A, {
          Q: () => c,
          e: () => u,
        });
        var t = e(9884588328),
          n = e(6495946979),
          s = e(1407713935),
          i = e(7112191091),
          d = e(9101533895),
          o = e(4761125736),
          a = e(6693783993),
          r = e(8250322877);
        const c = _((l, m) => {
            const v = (0, o._Z)(l, "invite_to_channel_permission") === "on";
            if (!(0, s.jq)(m)) return !1;
            const E = (0, t.FB)(m),
              T = (0, r.D)(l, m);
            return v && (0, s.Zp)(m)
              ? T &&
                  ((0, i.S4)(l, m) ||
                    ((0, n.bl)(m) &&
                      (0, a.oo)(l, {
                        channelId: E,
                      })))
              : T;
          }, "canUserInviteInternalUsersToChannel"),
          u = _((l, m) => {
            const E = (0, d.OL)(l, m, !1);
            return E ? c(l, E) : !1;
          }, "canUserInviteInternalUsersToChannelById");
      },
      8250322877: (W, A, e) => {
        "use strict";
        e.d(A, {
          D: () => v,
          X: () => E,
        });
        var t = e(1340402138),
          n = e(9884588328),
          s = e(1407713935),
          i = e(6007206761),
          d = e(5373179915),
          o = e(6495946979),
          a = e(2350349607),
          r = e(7112191091),
          c = e(3559837422),
          u = e(9101533895),
          l = e(4761125736),
          m = e(6693783993);
        const v = _((T, g) => {
            const I = (0, l._Z)(T, "invite_to_channel_permission") === "on";
            if (!(0, s.jq)(g)) return !1;
            const f = (0, n.FB)(g);
            return (0, c.AB)(T) ||
              (0, i.F)(g) ||
              !(0, a.V)(g) ||
              ((0, t.R)(T) && (0, d.R)(T, g))
              ? !1
              : I && (0, s.Zp)(g)
              ? (0, r.S4)(T, g) ||
                ((0, o.bl)(g) &&
                  ((0, m.oo)(T, {
                    channelId: f,
                  }) ||
                    (0, m.MN)(T, {
                      channelId: f,
                    })))
              : (0, r.S4)(T, g) || (0, o.bl)(g);
          }, "canUserInviteToChannel"),
          E = _((T, g) => {
            const f = (0, u.OL)(T, g, !1);
            return f ? v(T, f) : !1;
          }, "canUserInviteToChannelById");
      },
      8904182388: (W, A, e) => {
        "use strict";
        e.d(A, {
          CE: () => E,
          Vj: () => M,
          VJ: () => y,
        });
        var t = e(1407713935),
          n = e(6007206761),
          s = e(6841796315),
          i = e(9101533895);
        const d = {
            InvalidDm: Symbol("invalid_dm"),
            ArchivedChannel: Symbol("archived_channel"),
            RequiredChannel: Symbol("required_channel"),
          },
          o = {
            ok: !1,
            reason: d.ArchivedChannel,
          },
          a = {
            ok: !1,
            reason: d.InvalidDm,
          },
          r = {
            ok: !1,
            reason: d.RequiredChannel,
          };
        function c(p, O) {
          const C = (0, i.gT)(p, O) ? (0, i.OL)(p, O) : null;
          return (0, n.F)(C)
            ? o
            : (0, t.LI)(C) || (0, t.yz)(C)
            ? a
            : (0, t.gx)(C)
            ? r
            : s.O;
        }
        _(c, "isChannelKickableWithReason");
        function u(p, O) {
          return c(p, O).ok;
        }
        _(u, "isChannelKickable");
        var l = e(641744444),
          m = e(3559837422),
          v = e(6693783993);
        const E = {
            ...d,
            InvalidParams: Symbol("invalid_params"),
            UserIsRestricted: Symbol("user_is_restricted"),
            RestrictedPublicChannel: Symbol("restricted_public_channel"),
            RestrictedPrivateChannel: Symbol("restricted_private_channel"),
          },
          T = {
            ok: !1,
            reason: E.InvalidParams,
          },
          g = {
            ok: !1,
            reason: E.UserIsRestricted,
          },
          I = {
            ok: !1,
            reason: E.RestrictedPublicChannel,
          },
          f = {
            ok: !1,
            reason: E.RestrictedPrivateChannel,
          };
        function y(p, O) {
          const C = (0, i.gT)(p, O) ? (0, i.OL)(p, O) : null;
          if (!(0, t.jq)(C)) return T;
          if ((0, m.sV)(p)) return g;
          const h = c(p, O);
          if (!h.ok)
            return {
              ok: !1,
              reason: h.reason,
            };
          const D = (0, v.ou)(p, {
              channelId: O,
            }),
            P = (0, v.sX)(p, {
              channelId: O,
            }),
            S = (0, t.rW)(C) ? "public" : "private",
            b = S === "private" ? l.Po : l.LI,
            K = S === "private" ? l.tU : l.H7;
          return !(b(p) || K(p)) && !(S === "private" ? P : D)
            ? S === "private"
              ? f
              : I
            : s.O;
        }
        _(y, "canUserKickFromChannelWithReason");
        function M(p, O) {
          return y(p, O).ok;
        }
        _(M, "canUserKickFromChannel");
      },
      641744444: (W, A, e) => {
        "use strict";
        e.d(A, {
          Po: () => I,
          tU: () => y,
          LI: () => g,
          H7: () => f,
        });
        var t = e(7174777686),
          n = e(8276911661),
          s = e(5597672932),
          i = e(3677514771),
          d = e(5455782105),
          o = e(9113979368),
          a = e(7224980887),
          r = e(8170643398),
          c = e(3559837422),
          u = e(5510392579),
          l = e(766806);
        const m = _((M, p) => {
          let { prefName: O } = p;
          if ((0, o.A)(O)) return !1;
          const C = (0, n.cA)(M);
          if ((0, r.QR)(C) || (0, c.sV)(M)) return !1;
          const { type: h, user: D } = (0, l.SI)(M, O) || {};
          if ((0, t.A)(D, C.id)) return !0;
          switch (h == null ? void 0 : h[0]) {
            case "PRIMARY_OWNER":
              return (0, a.nA)(C);
            case "ORG_OWNERS":
              return (0, a.rr)(C);
            case "ORG_ADMINS_AND_OWNERS":
              return (0, a.n5)(C);
            default:
              return (0, u.$G)(M);
          }
        }, "checkChannelMgmtPrefCascade");
        var v = e(6839188756),
          E = e(4761125736),
          T = e(6693783993);
        const g = _(
            (M) =>
              (0, d.k)(M)
                ? (0, E._Z)(
                    M,
                    "light_read_who_can_manage_public_channels_pref_migration"
                  ) === "on"
                  ? (0, T.fl)(M)
                  : m(M, {
                      prefName: "who_can_manage_public_channels",
                    })
                : !1,
            "canUserManagePublicChannelsInOrgDash"
          ),
          I = _(
            (M) =>
              (0, d.k)(M)
                ? (0, E._Z)(
                    M,
                    "light_read_who_can_manage_private_channels_pref_migration"
                  ) === "on"
                  ? (0, T.$5)(M)
                  : m(M, {
                      prefName: "who_can_manage_private_channels",
                    })
                : !1,
            "canUserManagePrivateChannelsInOrgDash"
          ),
          f = _((M) => {
            const p = (0, i.H7)(M);
            return (0, v.Ny)(p) ? (0, u.h3)(M) : !1;
          }, "canUserManagePublicChannelsInTeamSite"),
          y = _((M) => {
            const p = (0, i.H7)(M),
              O =
                (0, E._Z)(
                  M,
                  "light_read_who_can_manage_private_channels_pref_migration"
                ) === "on";
            if (
              !(0, v.Ny)(p) ||
              ((0, v.NB)(p) && !(0, s.x)(M, "has_compliance_export"))
            )
              return !1;
            if (O) return (0, T.Ny)(M);
            const C = (0, s.x)(
              M,
              "who_can_manage_private_channels_at_workspace_level"
            );
            if (!C) return !1;
            const h = (0, n.cA)(M);
            if ((0, t.A)(C.user, h.id)) return (0, u.h3)(M);
            const D = C.type;
            switch (D && D.length !== 0 ? D[0] : null) {
              case "NO_ONE":
                return !1;
              case "WORKSPACE_PRIMARY_OWNER":
                return (0, u.$G)(M);
              case "WORKSPACE_OWNERS":
                return (0, u.p2)(M);
              default:
                return !1;
            }
          }, "canUserManagePrivateChannelsInTeamSite");
      },
      5343157203: (W, A, e) => {
        "use strict";
        e.d(A, {
          C: () => E,
          E: () => T,
        });
        var t = e(7530630315),
          n = e(235108050),
          s = e(9087248458),
          i = e(5455782105),
          d = e(7876109014),
          o = e(5510392579),
          a = e(3559837422),
          r = e(8847766420),
          c = e(5795074931),
          u = e(4761125736),
          l = e(6693783993),
          m = e(766806),
          v = e(598369692);
        const E = _((g) => {
          if ((0, a.sV)(g)) return !1;
          const I = (0, r.jV)(g);
          if ((0, o.V7)(g, I) || (0, o.PY)(g, I)) return !0;
          const f = (0, r.ZT)(g),
            y = (0, t.A)(f, (0, r.kN)(g));
          return (0, n.A)(y).some(
            (p) => !!((0, o.$G)(g, p) || (0, o.h3)(g, p))
          );
        }, "isCurrentUserAnyAdminOrOwner");
        function T(g) {
          if (
            (0, u._Z)(
              g,
              "light_read_who_can_manage_shared_channels_pref_migration"
            ) === "on"
          )
            return (0, l.Tg)(g);
          const f = (0, m.SI)(g, "who_can_manage_shared_channels");
          if (!f) return !0;
          if (!(0, i.k)(g) || (0, a.sV)(g)) return !1;
          const y = (0, c.WR)(g);
          if ((0, d.v)(f, "user") && f.user.includes(y)) return !0;
          if ((0, d.v)(f, "subteam")) {
            const p = (0, v.QF)(g);
            if ((0, s.A)(f.subteam, p).length > 0) return !0;
          }
          const M = f == null ? void 0 : f.type;
          return M != null && M.includes("regular")
            ? !0
            : M != null && M.includes("admin")
            ? E(g)
            : M != null && M.includes("owner")
            ? (0, o.PY)(g)
            : !1;
        }
        _(T, "canUserManageOrgSharedChannels");
      },
      7563681762: (W, A, e) => {
        "use strict";
        e.d(A, {
          JJ: () => D,
          a_: () => E,
          be: () => C,
          rY: () => h,
        });
        var t = e(1407713935),
          n = e(918457931),
          s = e(7112191091),
          i = e(641744444),
          d = e(5343157203),
          o = e(6025726268),
          a = e(3559837422),
          r = e(6841796315),
          c = e(5795074931),
          u = e(9101533895),
          l = e(4761125736),
          m = e(3490825458),
          v = e(6693783993);
        const E = {
            InvalidChannelType: Symbol("invalid_channel_type"),
            InvalidDm: Symbol("invalid_dm"),
            InvalidParams: Symbol("invalid_params"),
            OrgSharedSettings: Symbol("org_shared_settings"),
            OwnerRequired: Symbol("owner_required"),
            RestrictedUser: Symbol("restricted_user"),
            RestrictedAction: Symbol("restricted_action"),
            UserHasNoPermissions: Symbol("user_has_no_permissions"),
          },
          T = {
            ok: !1,
            reason: E.InvalidParams,
          },
          g = {
            ok: !1,
            reason: E.InvalidDm,
          },
          I = {
            ok: !1,
            reason: E.InvalidChannelType,
          },
          f = {
            ok: !1,
            reason: E.RestrictedUser,
          },
          y = {
            ok: !1,
            reason: E.OrgSharedSettings,
          },
          M = {
            ok: !1,
            reason: E.OwnerRequired,
          },
          p = {
            ok: !1,
            reason: E.UserHasNoPermissions,
          },
          O = _((P, S) => {
            const b =
              (0, l._Z)(
                P,
                "light_read_who_can_manage_shared_channels_pref_migration"
              ) === "on";
            if (!(0, t.jq)(S)) return T;
            if ((0, t.LI)(S) || (0, t.yz)(S)) return g;
            if ((0, t.rI)(S)) return I;
            const K = (0, c.TZ)(P),
              x = (0, m.s)(P),
              B = (0, m.R)(P);
            if (!K)
              return (x &&
                (((0, t.Zp)(S) && (0, i.Po)(P)) ||
                  ((0, t.rW)(S) && (0, i.LI)(P)))) ||
                (B &&
                  (((0, t.Zp)(S) && (0, i.tU)(P)) ||
                    ((0, t.rW)(S) && (0, i.H7)(P))))
                ? r.O
                : p;
            if (b)
              return (0, v.bT)(P, {
                channelId: S.id,
              })
                ? r.O
                : p;
            const U = (0, d.E)(P) || (0, v.LN)(P);
            return (0, n.t)(S) && !U
              ? y
              : (0, o.M)(P, S) ||
                (0, v.bT)(P, {
                  channelId: S.id,
                })
              ? r.O
              : (0, a.sV)(P) || (0, a.AB)(P)
              ? f
              : (0, s.S4)(P, S)
              ? r.O
              : M;
          }, "canUserRenameChannelWithReason"),
          C = _((P, S) => {
            const K = (0, u.OL)(P, S, !1);
            return K ? O(P, K) : T;
          }, "canUserRenameChannelWithReasonById"),
          h = _((P, S) => O(P, S).ok, "canUserRenameChannel"),
          D = _((P, S) => C(P, S).ok, "canUserRenameChannelById");
      },
      9416626: (W, A, e) => {
        "use strict";
        e.d(A, {
          NG: () => P,
          iz: () => D,
          u9: () => v,
        });
        var t = e(9884588328),
          n = e(1407713935),
          s = e(6007206761),
          i = e(6495946979),
          d = e(918457931),
          o = e(2585735826),
          a = e(340763958),
          r = e(9846841407),
          c = e(7112191091),
          u = e(5343157203),
          l = e(4761125736),
          m = e(6693783993);
        const v = {
            ChannelNotFound: Symbol("channel_not_found"),
            ChannelTypeNotSupported: Symbol("channel_type_not_supported"),
            CantArchiveGeneral: Symbol("cant_archive_general"),
            NotInChannel: Symbol("not_in_channel"),
            AlreadyArchived: Symbol("already_archived"),
            NotAllowedHomeExternallyShared: Symbol(
              "not_allowed_home_ext_shared"
            ),
            AwayExternallyShared: Symbol("away_ext_shared"),
            UserHasNoPermissions: Symbol("user_has_no_permissions"),
            DefaultOrgWideChannel: Symbol("default_org_wide_channel"),
            WhoCanManagePref: Symbol("who_can_manage_shared_channels"),
          },
          E = {
            ok: !1,
            reason: v.ChannelNotFound,
          },
          T = {
            ok: !1,
            reason: v.ChannelTypeNotSupported,
          },
          g = {
            ok: !1,
            reason: v.CantArchiveGeneral,
          },
          I = {
            ok: !1,
            reason: v.NotInChannel,
          },
          f = {
            ok: !1,
            reason: v.AlreadyArchived,
          },
          y = {
            ok: !1,
            reason: v.NotAllowedHomeExternallyShared,
          },
          M = {
            ok: !1,
            reason: v.AwayExternallyShared,
          },
          p = {
            ok: !1,
            reason: v.UserHasNoPermissions,
          },
          O = {
            ok: !1,
            reason: v.DefaultOrgWideChannel,
          },
          C = {
            ok: !1,
            reason: v.WhoCanManagePref,
          },
          h = {
            ok: !0,
          },
          D = _((S, b) => {
            const K =
                (0, l._Z)(S, "restrict_channel_permission_archive_channel") ===
                "on",
              x =
                (0, l._Z)(
                  S,
                  "light_read_who_can_manage_shared_channels_pref_migration"
                ) === "on";
            if (!(0, n.jq)(b)) return E;
            if ((0, n.LI)(b) || (0, n.yz)(b)) return T;
            if ((0, n.gx)(b)) return g;
            if ((0, s.F)(b)) return f;
            if ((0, r.b)(S, b)) return M;
            if (!(0, c.S4)(S, b) && !(0, i.bl)(b)) return I;
            const U = (0, t.FB)(b);
            if (K && (0, a.ju)(b) && !(0, r.b)(S, b) && !(0, o.R)(S, b))
              return y;
            const R = (0, m.Om)(S, {
              channelId: U,
            });
            return !x &&
              (0, d.t)(b) &&
              !(0, u.E)(S) &&
              !(0, m.LN)(S, {
                channelId: U,
              })
              ? C
              : R
              ? h
              : p;
          }, "canUserSeeArchiveChannelOptionWithReasons"),
          P = _((S, b) => D(S, b).ok, "canUserSeeArchiveChannelOption");
      },
      591259428: (W, A, e) => {
        "use strict";
        e.d(A, {
          P: () => g,
          X: () => T,
        });
        var t = e(9101533895),
          n = e(4761125736),
          s = e(6495946979),
          i = e(2912967402),
          d = e(1407713935),
          o = e(6007206761),
          a = e(3559837422),
          r = e(340763958),
          c = e(4827886670),
          u = e(6693783993);
        const l = {
            ok: !0,
          },
          m = {
            ok: !1,
            reason: i.CM,
          },
          v = {
            ok: !1,
            reason: i.Jr,
          },
          E = {
            ok: !1,
            reason: i.oP,
          },
          T = _((I, f) => {
            const y = (0, t.gT)(I, f) && (0, t.OL)(I, f);
            return y
              ? (0, d.JM)(y) && (0, r.ju)(y)
                ? v
                : (0, o.F)(y)
                ? E
                : (0, n._Z)(I, "channel_manager_enhancements") === "on" &&
                  (0, u.ig)(I, {
                    channelId: f,
                  })
                ? l
                : !(0, s.bl)(y) ||
                  !(0, c.c)(I, y) ||
                  (0, a.sV)(I) ||
                  (0, a.AB)(I)
                ? E
                : l
              : m;
          }, "canUserSetTopicForChannelWithReasonById"),
          g = _((I, f) => T(I, f).ok, "canUserSetTopicForChannelById");
      },
      3307632080: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => i,
          G: () => s,
        });
        var t = e(6545221113),
          n = e(8847766420);
        const s = _((d, o) => {
            if (!d || !o) return !1;
            const a = (0, n.Kc)(d);
            return (0, t.A)(d, a, o);
          }, "isExternalLimited"),
          i = s;
      },
      4919351998: (W, A, e) => {
        "use strict";
        e.d(A, {
          XT: () => c,
          Xw: () => n,
          gU: () => d,
          l0: () => a,
          xf: () => s,
        });
        var t = e(8234448831);
        const n = new RegExp(
          "^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$",
          "i"
        );
        function s(u) {
          const l = typeof u == "string" && u.match(n);
          return (l && l.length === 1 && l[0] === u) || !1;
        }
        _(s, "isEmail");
        function i(u) {
          const { pathname: l, protocol: m } = parseUrl(u);
          return m === "mailto:" && s(l);
        }
        _(i, "isEmailUrl");
        function d(u) {
          const { pathname: l, protocol: m } = u;
          return m === "mailto:" && s(l);
        }
        _(d, "isEmailUrlFromUrlObject");
        const o = /^[\w.-]+(?:\.[\w.-]+)+[\w\-.]+$/i;
        function a(u) {
          const l = typeof u == "string" && u.match(o);
          return (l && l.length === 1 && l[0] === u) || !1;
        }
        _(a, "isDomain");
        function r(u) {
          return u.includes("@slack-bots.com");
        }
        _(r, "isSlackBotEmail");
        function c(u) {
          let { csv: l, min: m = 0, max: v = 10 } = u;
          const E = l.split(/\s*,\s*/).length;
          return {
            minViolation: E < m,
            maxViolation: E > v,
          };
        }
        _(c, "validateCSV");
      },
      8049923572: (W, A, e) => {
        "use strict";
        e.d(A, {
          BM: () => l,
          IN: () => a,
        });
        var t = e(5824283093),
          n = e(5950652755),
          s = e(5460331959),
          i = e(1641606663),
          d = e(4761125736);
        function o() {
          return (
            (o =
              Object.assign ||
              function (m) {
                for (var v = 1; v < arguments.length; v++) {
                  var E = arguments[v];
                  for (var T in E)
                    Object.prototype.hasOwnProperty.call(E, T) && (m[T] = E[T]);
                }
                return m;
              }),
            o.apply(this, arguments)
          );
        }
        _(o, "_extends");
        const a = _(
          (m) => (0, d._Z)(m, "sk_responsive_menus") === "on",
          "isSkResponsiveMenusEnabled"
        );
        function r(m) {
          let v =
            arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : 250;
          const { windowRef: E } = (0, t.useContext)(i.Mn),
            T = _((I) => {
              !Array.isArray(I) ||
                !I.length ||
                requestAnimationFrame(() => m(I));
            }, "observer"),
            g = E.deref();
          return new g.ResizeObserver((0, n.A)(T, v));
        }
        _(r, "useResizeObserver");
        const c = _(() => {
          var m, v, E;
          const { windowRef: T } = (0, t.useContext)(i.Mn),
            g = (0, t.useRef)(
              (m = T.deref()) === null || m === void 0
                ? void 0
                : m.document.body
            ),
            I =
              ((v = g.current) === null || v === void 0
                ? void 0
                : v.clientWidth) || 0,
            f =
              ((E = g.current) === null || E === void 0
                ? void 0
                : E.clientHeight) || 0,
            [y, M] = (0, t.useState)(I),
            [p, O] = (0, t.useState)(f),
            C = r(() => {
              var h, D;
              M(
                ((h = g.current) === null || h === void 0
                  ? void 0
                  : h.clientWidth) || 0
              ),
                O(
                  ((D = g.current) === null || D === void 0
                    ? void 0
                    : D.clientHeight) || 0
                );
            }, 100);
          return (
            (0, t.useEffect)(() => {
              const h = g.current;
              return (
                h && C.observe(h),
                () => {
                  T && h && C.unobserve(h);
                }
              );
            }, [C, T]),
            {
              width: y,
              height: p,
            }
          );
        }, "useWindowSize");
        function u(m) {
          return (v) => {
            const E = c();
            return t.createElement(
              m,
              o({}, v, {
                windowSize: E,
              })
            );
          };
        }
        _(u, "withWindowSize"), (u.displayName = "withWindowSize");
        function l(m) {
          return (v) =>
            v.experimentSkResponsiveMenusGroupOn
              ? t.createElement(s.A, null, (E) => {
                  let { measureRef: T, width: g, height: I } = E;
                  return t.createElement(
                    m,
                    o({}, v, {
                      measureRef: T,
                      containerSize: {
                        width: g,
                        height: I,
                      },
                    })
                  );
                })
              : t.createElement(m, o({}, v));
        }
        _(l, "withContainerSize"), (l.displayName = "withContainerSize");
      },
      581167618: (W, A, e) => {
        "use strict";
        e.d(A, {
          AO: () => v,
          A_: () => m,
          Ay: () => I,
          QE: () => l,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(6105929840),
          i = e(1610251172),
          d = e(2201208793),
          o = e(4882164428),
          a = e(8683010724),
          r = e(1224315998),
          c = e(735940183);
        const u = new c.Ay("sk_banner");
        var l;
        (function (f) {
          (f.default = "default"),
            (f.boxed = "boxed"),
            (f.inlineBoxed = "inline_boxed"),
            (f.nestedBox = "nested_box"),
            (f.inline = "inline"),
            (f.custom = "custom");
        })(l || (l = {}));
        var m;
        (function (f) {
          (f.default = "default"),
            (f.info = "info"),
            (f.success = "success"),
            (f.warning = "warning"),
            (f.error = "error");
        })(m || (m = {}));
        var v;
        (function (f) {
          (f.left = "left"), (f.center = "center"), (f.right = "right");
        })(v || (v = {}));
        const E = {
            elementName: "close",
            elementType: r.ElementType.X,
            action: r.UiAction.CLOSE,
            onClick: {
              enableClogAction: !0,
            },
          },
          T = new Map([
            ["default", "slack-pillow"],
            ["info", "info-circle"],
            ["success", "check-circle-o-large"],
            ["error", "warning"],
            ["warning", "warning"],
          ]),
          g = _((f) => {
            let {
              align: y = v.left,
              className: M,
              heading: p,
              icon: O,
              customIcon: C,
              id: h,
              level: D = m.default,
              type: P = l.boxed,
              children: S,
              "data-qa": b,
              isIconVisible: K = !0,
              showCloseButton: x = !1,
              onClose: B,
              ariaLabelForCloseBtn: U,
              closeBackgroundStyle: R,
            } = f;
            const G = (0, o.f)(d.j.Alert),
              [H, F] = (0, t.useState)(!1),
              V = (0, n.A)(
                "c-alert",
                `c-alert--${P}`,
                `c-alert--level_${D}`,
                `c-alert--align_${y}`,
                {
                  "c-alert--multiline": !!p,
                },
                M,
                G
              ),
              X = T.get(D) || "slack-pillow",
              q = (C || X) && P !== l.inline && P !== l.custom,
              oe = P === l.nestedBox ? "inherit" : void 0,
              z = P !== l.custom && p,
              Ae = (0, t.useCallback)(() => {
                F(!0), B == null || B();
              }, [B]);
            return H
              ? null
              : t.createElement(
                  "div",
                  {
                    className: V,
                    id: h,
                    "data-qa": b,
                    "data-qa-alert": !0,
                    "data-qa-alert-level": D,
                    "data-qa-alert-type": P,
                    "data-qa-alert-align": y,
                  },
                  K &&
                    q &&
                    (C ||
                      t.createElement(i.A, {
                        type: O || X,
                        className: "c-alert__icon",
                        size: oe,
                        inline: !0,
                        "data-qa-alert-icon": !0,
                        "data-qa-alert-icon-type": O || X,
                      })),
                  t.createElement(
                    "span",
                    {
                      className: "c-alert__message",
                      "data-qa-alert-message": !0,
                    },
                    z &&
                      t.createElement(
                        "strong",
                        {
                          className: "c-alert__heading",
                          "data-qa-alert-heading": !0,
                        },
                        p
                      ),
                    S
                  ),
                  x &&
                    t.createElement(
                      "div",
                      {
                        className: "c-alert__close",
                        "data-qa": "alert_close_btn",
                      },
                      t.createElement(
                        s.A,
                        {
                          onClick: Ae,
                          backgroundStyle: R,
                          "aria-label": U ?? u.t("Dismiss"),
                          autoClogProps: E,
                          size: "small",
                        },
                        t.createElement(a.A, {
                          name: "close",
                          size: "20",
                        })
                      )
                    )
                );
          }, "Alert");
        (g.displayName = "Alert"), (g.displayName = "Alert");
        const I = g;
      },
      3824874166: (W, A, e) => {
        "use strict";
        e.d(A, {
          RG: () => P,
          f1: () => K,
          fp: () => b,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(7715417323),
          i = e(1030162945),
          d = e(8822892075),
          o;
        (function (x) {
          (x.BaseHeart = "mask__base-heart"),
            (x.SmallHeart = "mask__small-heart"),
            (x.BaseSingleChannelGuestDnd =
              "mask__base-single-channel-guest-dnd"),
            (x.BaseSingleChannelGuest = "mask__base-single-channel-guest"),
            (x.SmallSingleChannelGuestDnd =
              "mask__small-single-channel-guest-dnd"),
            (x.SmallSingleChannelGuest = "mask__small-single-channel-guest"),
            (x.BaseGuestDnd = "mask__base-guest-dnd"),
            (x.BaseGuest = "mask__base-guest"),
            (x.SmallGuestDnd = "mask__small-guest-dnd"),
            (x.SmallGuest = "mask__small-guest"),
            (x.BaseMemberDnd = "mask__base-member-dnd"),
            (x.BaseMember = "mask__base-member"),
            (x.SmallMemberDnd = "mask__small-member-dnd"),
            (x.SmallMember = "mask__small-member"),
            (x.NoAccess = "mask__base-no-access");
        })(o || (o = {}));
        function a(x) {
          let {
            size: B = "base",
            userType: U = "member",
            isDnd: R = !1,
            hasNoAccess: G = !1,
          } = x;
          return G
            ? t.createElement(
                "svg",
                {
                  className: "sr-only",
                },
                t.createElement(
                  "clipPath",
                  {
                    id: o.NoAccess,
                    clipPathUnits: "objectBoundingBox",
                  },
                  t.createElement("path", {
                    d: "M1,0 H0 V1 H0.542 V0.825 C0.542,0.745,0.587,0.676,0.653,0.642 C0.662,0.481,0.795,0.353,0.958,0.353 C0.972,0.353,0.986,0.354,1,0.356 V0",
                  })
                )
              )
            : t.createElement(
                "svg",
                {
                  className: "sr-only",
                },
                U === "slackbot" &&
                  (B === "base"
                    ? t.createElement(
                        "clipPath",
                        {
                          id: o.BaseHeart,
                          clipPathUnits: "objectBoundingBox",
                        },
                        t.createElement("path", {
                          d: "M0,0 H1 V0.673 C0.986,0.669,0.971,0.667,0.954,0.667 C0.929,0.667,0.907,0.673,0.889,0.682 C0.87,0.673,0.849,0.667,0.824,0.667 C0.764,0.667,0.719,0.697,0.694,0.736 C0.672,0.77,0.667,0.807,0.667,0.832 C0.667,0.854,0.669,0.894,0.696,0.942 C0.707,0.962,0.721,0.981,0.739,1 H0 V0",
                        })
                      )
                    : t.createElement(
                        "clipPath",
                        {
                          id: o.SmallHeart,
                          clipPathUnits: "objectBoundingBox",
                        },
                        t.createElement("path", {
                          d: "M1,0 H0 V1 H0.801 C0.75,0.958,0.714,0.915,0.69,0.872 C0.653,0.807,0.65,0.753,0.65,0.723 C0.65,0.689,0.658,0.64,0.687,0.594 C0.721,0.541,0.781,0.5,0.862,0.5 C0.896,0.5,0.925,0.508,0.95,0.521 C0.965,0.513,0.982,0.507,1,0.504 V0",
                        })
                      )),
                U === "ura" &&
                  (B === "base"
                    ? R
                      ? t.createElement(
                          "clipPath",
                          {
                            id: o.BaseSingleChannelGuestDnd,
                            clipPathUnits: "objectBoundingBox",
                          },
                          t.createElement("path", {
                            d: "M1,0 H0 V1 H0.688 C0.673,0.958,0.68,0.907,0.718,0.87 L0.825,0.763 C0.821,0.752,0.819,0.741,0.819,0.729 C0.819,0.672,0.866,0.625,0.924,0.625 H1 V0",
                          })
                        )
                      : t.createElement(
                          "clipPath",
                          {
                            id: o.BaseSingleChannelGuest,
                            clipPathUnits: "objectBoundingBox",
                          },
                          t.createElement("path", {
                            d: "M1,0 H0 V1 H0.688 C0.673,0.958,0.68,0.907,0.718,0.87 L0.87,0.718 C0.907,0.68,0.958,0.673,1,0.688 V0",
                          })
                        )
                    : R
                    ? t.createElement(
                        "clipPath",
                        {
                          id: o.SmallSingleChannelGuestDnd,
                          clipPathUnits: "objectBoundingBox",
                        },
                        t.createElement("path", {
                          d: "M1,0 H0 V1 H0.707 C0.657,0.937,0.652,0.841,0.719,0.774 L0.864,0.63 C0.859,0.615,0.856,0.6,0.856,0.584 C0.856,0.507,0.919,0.444,0.997,0.444 H1 V0",
                        })
                      )
                    : t.createElement(
                        "clipPath",
                        {
                          id: o.SmallSingleChannelGuest,
                          clipPathUnits: "objectBoundingBox",
                        },
                        t.createElement("path", {
                          d: "M1,0 H0 V1 H0.707 C0.657,0.937,0.652,0.841,0.719,0.774 L0.924,0.569 C0.947,0.546,0.973,0.532,1,0.525 V0",
                        })
                      )),
                (U === "ra" || U === "external") &&
                  (B === "base"
                    ? R
                      ? t.createElement(
                          "clipPath",
                          {
                            id: o.BaseGuestDnd,
                            clipPathUnits: "objectBoundingBox",
                          },
                          t.createElement("path", {
                            d: "M1,0 H0 V1 H0.704 C0.698,0.985,0.694,0.969,0.694,0.951 V0.826 C0.694,0.754,0.753,0.695,0.825,0.694 C0.84,0.654,0.878,0.625,0.924,0.625 H1 V0",
                          })
                        )
                      : t.createElement(
                          "clipPath",
                          {
                            id: o.BaseGuest,
                            clipPathUnits: "objectBoundingBox",
                          },
                          t.createElement("path", {
                            d: "M1,0 H0 V1 H0.704 C0.698,0.985,0.694,0.969,0.694,0.951 V0.826 C0.694,0.754,0.754,0.694,0.826,0.694 H0.951 C0.969,0.694,0.985,0.698,1,0.704 V0",
                          })
                        )
                    : R
                    ? t.createElement(
                        "clipPath",
                        {
                          id: o.SmallGuestDnd,
                          clipPathUnits: "objectBoundingBox",
                        },
                        t.createElement("path", {
                          d: "M1,0 H0 V1 H0.73 C0.704,0.969,0.688,0.929,0.688,0.884 V0.716 C0.688,0.617,0.767,0.538,0.866,0.538 H1 V0",
                        })
                      )
                    : t.createElement(
                        "clipPath",
                        {
                          id: o.SmallGuest,
                          clipPathUnits: "objectBoundingBox",
                        },
                        t.createElement("path", {
                          d: "M1,0 H0 V1 H0.73 C0.704,0.969,0.688,0.929,0.688,0.884 V0.716 C0.688,0.617,0.767,0.538,0.866,0.538 H1 V0",
                        })
                      )),
                U === "member" &&
                  (B === "base"
                    ? R
                      ? t.createElement(
                          "clipPath",
                          {
                            id: o.BaseMemberDnd,
                            clipPathUnits: "objectBoundingBox",
                          },
                          t.createElement("path", {
                            d: "M1,0 H0 V1 H0.713 C0.692,0.968,0.681,0.93,0.681,0.889 C0.681,0.795,0.742,0.716,0.827,0.69 C0.843,0.652,0.88,0.625,0.924,0.625 H1 V0",
                          })
                        )
                      : t.createElement(
                          "clipPath",
                          {
                            id: o.BaseMember,
                            clipPathUnits: "objectBoundingBox",
                          },
                          t.createElement("path", {
                            d: "M1,0 H0 V1 H0.713 C0.692,0.968,0.681,0.93,0.681,0.889 C0.681,0.774,0.774,0.681,0.889,0.681 C0.93,0.681,0.968,0.692,1,0.713 V0",
                          })
                        )
                    : R
                    ? t.createElement(
                        "clipPath",
                        {
                          id: o.SmallMemberDnd,
                          clipPathUnits: "objectBoundingBox",
                        },
                        t.createElement("path", {
                          d: "M1,0 H0 V1 H0.752 C0.701,0.949,0.669,0.878,0.669,0.8 C0.669,0.674,0.752,0.567,0.867,0.531 C0.888,0.48,0.938,0.444,0.997,0.444 H1 V0",
                        })
                      )
                    : t.createElement(
                        "clipPath",
                        {
                          id: o.SmallMember,
                          clipPathUnits: "objectBoundingBox",
                        },
                        t.createElement("path", {
                          d: "M1,0 H0 V1 H0.752 C0.701,0.949,0.669,0.878,0.669,0.8 C0.669,0.645,0.795,0.519,0.95,0.519 C0.967,0.519,0.984,0.52,1,0.523 V0",
                        })
                      ))
              );
        }
        _(a, "AvatarMasks");
        var r = e(9270432170),
          c = e(9332393661),
          u = e(2036354333),
          l = e(1610251172),
          m = e(9742374352),
          v = e(3501104594),
          E = e(698013937),
          T = e(2855755676),
          g = e(1563996154),
          I = e(82287009),
          f = e(735940183),
          y = e(485355941),
          M = e(1060768686),
          p = e.n(M),
          O = e(2979422297),
          C = e.n(O);
        function h() {
          return (
            (h =
              Object.assign ||
              function (x) {
                for (var B = 1; B < arguments.length; B++) {
                  var U = arguments[B];
                  for (var R in U)
                    Object.prototype.hasOwnProperty.call(U, R) && (x[R] = U[R]);
                }
                return x;
              }),
            h.apply(this, arguments)
          );
        }
        _(h, "_extends");
        const D = new f.Ay("avatar"),
          P = {
            xlarge: 72,
            large: 56,
            medium: 36,
            small: 24,
            verySmall: 20,
            tiny: 16,
          },
          S = t.memo((x) => {
            let { botEmoji: B, canRenderEmoji: U } = x;
            return B
              ? U
                ? t.createElement(i.Ay, {
                    className: "c-avatar__emoji",
                    text: B,
                    emojiSize: i.lw.LARGE,
                    stopAnimations: !0,
                    forceDisplay: !0,
                  })
                : t.createElement("img", {
                    className: "c-avatar__image c-avatar__image--fallback",
                    src: p(),
                    srcSet: `${C()} 2x`,
                    alt: "",
                  })
              : null;
          });
        function b(x) {
          let {
            isExternal: B,
            teamId: U,
            team: R,
            showTooltip: G,
            badgeIconType: H,
            badgeIconClassName: F,
            allowTeamInitials: V = !0,
          } = x;
          if (H) {
            const X = F
              ? {
                  [F]: !!F,
                }
              : {};
            return () =>
              t.createElement(l.A, {
                className: (0, n.A)("c-avatar__icon c-avatar__nonteam_icon", {
                  ...X,
                }),
                type: H,
              });
          }
          return B && U
            ? () =>
                t.createElement(E.A, {
                  className: "c-avatar__icon c-avatar__team_icon",
                  id: U,
                  team: R,
                  size: 16,
                  showTooltip: G,
                  allowTeamInitials: V,
                  ariaHidden: !0,
                })
            : () => null;
        }
        _(b, "getCustomBadgeIconRenderer"),
          (b.displayName = "getCustomBadgeIconRenderer");
        const K = _((x) => {
          let {
            size: B,
            userId: U,
            isAdHocMember: R,
            botId: G,
            botProfile: H = void 0,
            imageUrl: F,
            imageUrl2x: V,
            additionalOverlay: X,
            onClick: q = void 0,
            className: oe,
            teamId: z,
            isExternal: Ae = !1,
            isRestricted: ae = !1,
            isUltraRestricted: de = !1,
            isInToken: ve = !1,
            isDeleted: Se = !1,
            tokenSize: Ee = void 0,
            memberOrBotName: be = void 0,
            showTooltip: Ce = !1,
            showCard: Z = !1,
            showBadge: $ = !0,
            showPresence: N = !1,
            badgeIconType: L = void 0,
            badgeIconClassName: w = void 0,
            isInteractive: k = !0,
            clogLinkClick: J = s.A,
            tabIndex: ee = 0,
            ariaHidden: ne = void 0,
            team: pe = void 0,
            botEmoji: Me = void 0,
            canRenderEmoji: ke = void 0,
            renderCustomBadge: ge = void 0,
            autoClogProps: fe = void 0,
            openProfile: re = s.A,
            showMemberProfileInWindow: le = s.A,
            propagateClickEvent: Re = !1,
            fromQuipDoc: ye = !1,
            allowTeamInitials: Te = !0,
            disableLink: De = !1,
            isUserHidden: Ue = !1,
            onLoad: Ke = s.A,
            onError: Ze = s.A,
            navigate: Q,
            resetIA: ie,
            userType: Ve,
            isDnd: xe,
            isSlackbot: je,
            hasNoAccess: Fe,
            "data-qa": He,
            "data-stringify-ignore": Oe,
          } = x;
          const Ye = (0, t.useCallback)(
              (fn) => (
                fn.preventDefault(),
                k
                  ? (Re || fn.stopPropagation(),
                    J(),
                    ye ||
                      ((0, y.Cz)(fn)
                        ? le(U)
                        : Q && U
                        ? Q(
                            (0, d.Fo)({
                              memberId: U,
                            })
                          )
                        : re({
                            memberId: U,
                            serviceId: G,
                            botProfile: H,
                          })),
                    q ? q(fn) : null)
                  : null
              ),
              [U, G, H, J, ye, q, k, Q, re, Re, le]
            ),
            at = _(
              () => (U ? `/team/${U}` : G && !De ? `/services/${G}` : ""),
              "getHrefAttr"
            ),
            _t = _(() => (V ? `${V} 2x` : ""), "getSrcSetAttribute"),
            pt = _(() => {
              if (X) {
                const fn = X > 9 ? "9+" : `+${X}`;
                return t.createElement(
                  "div",
                  {
                    className: "c-avatar__additional_overlay",
                  },
                  fn
                );
              }
              return null;
            }, "renderAdditionalOverlay");
          pt.displayName = "renderAdditionalOverlay";
          const Qe = _((fn) => {
            let { tooltipText: ln, className: it } = fn,
              Tt = t.createElement("span", {
                className: "c-avatar__badge_inner",
              });
            Ce &&
              (Tt = t.createElement(
                g.Ay,
                {
                  tip: ln,
                },
                Tt
              ));
            const Ct = (0, n.A)("c-avatar__badge", it);
            return t.createElement(
              "span",
              {
                className: Ct,
              },
              Tt
            );
          }, "renderBadgeElement");
          Qe.displayName = "renderBadgeElement";
          const ct = _(() => {
            const fn = Ee ? T.n[Ee] : B;
            if (ge !== void 0 && fn >= 32) {
              const ln = ge();
              if (ln) return ln;
            }
            if (ge === void 0 && fn >= 32) {
              const ln = b({
                isExternal: Ae,
                teamId: z,
                team: pe,
                showTooltip: Ce,
                badgeIconType: L,
                badgeIconClassName: w,
                allowTeamInitials: Te,
              })();
              if (ln) return ln;
            }
            return N
              ? t.createElement(v.A, {
                  memberId: U,
                  inline: !1,
                  className: "c-avatar__presence",
                  inheritIconSize: !0,
                  hasNoAccess: Fe,
                })
              : de && fn >= 32
              ? Qe({
                  tooltipText: _(
                    () =>
                      D.rt(
                        "Single-Channel Guests <span>see a partial directory and can only access messages and files from the channel they belong to.</span>",
                        null,
                        (it) => {
                          let { text: Tt } = it;
                          return t.createElement(
                            "span",
                            {
                              className: "c-avatar__tooltip_detail",
                            },
                            Tt
                          );
                        }
                      ),
                    "tooltipText"
                  ),
                  className: "c-avatar__badge--ultra_restricted",
                })
              : ae && fn >= 32
              ? Qe({
                  tooltipText: _(
                    () =>
                      D.rt(
                        "Multi-Channel Guests <span>see only a partial directory and can only access messages and files from selected channels.</span>",
                        null,
                        (it) => {
                          let { text: Tt } = it;
                          return t.createElement(
                            "span",
                            {
                              className: "c-avatar__tooltip_detail",
                            },
                            Tt
                          );
                        }
                      ),
                    "tooltipText"
                  ),
                  className: "c-avatar__badge--restricted",
                })
              : null;
          }, "renderBadgeOrPresence");
          ct.displayName = "renderBadgeOrPresence";
          const Pt = _(() => {
            let fn = F || V;
            return Ee
              ? (Ee === "large" && V && (fn = V),
                t.createElement(c.A, {
                  image: fn,
                  classes: "c-base_icon--token",
                  srcSet: _t(),
                  size: T.n[Ee],
                  ariaHidden: !0,
                  ariaRole: "img",
                  widthOnly: !0,
                  onLoad: Ke,
                  onError: Ze,
                  resetIA: ie,
                }))
              : null;
          }, "renderTokenAvatar");
          Pt.displayName = "renderTokenAvatar";
          const zt = _(
            () =>
              F || V
                ? Ee || ve
                  ? Pt()
                  : t.createElement(c.A, {
                      image: F || V,
                      size: B,
                      srcSet: _t(),
                      ariaHidden: !0,
                      widthOnly: !0,
                      onLoad: Ke,
                      onError: Ze,
                      resetIA: ie,
                    })
                : null,
            "renderImageTag"
          );
          zt.displayName = "renderImageTag";
          const an = _((fn) => {
              let { fallback: ln = null } = fn,
                it = ln;
              return (F || V) && (it = zt()), it;
            }, "renderImageOrFallback"),
            Qt = Me
              ? t.createElement(S, {
                  botEmoji: Me,
                  canRenderEmoji: ke,
                })
              : null,
            tn = B > 26 ? "base" : "small",
            Ht = Ve === "member",
            Kt = Ve === "ra" || Ve === "external",
            qt = Ve === "ura",
            Tn = t.useMemo(
              () =>
                N
                  ? Fe
                    ? o.NoAccess
                    : je && tn === "base"
                    ? o.BaseHeart
                    : je && tn === "small"
                    ? o.SmallHeart
                    : Ht && tn === "base" && xe
                    ? o.BaseMemberDnd
                    : Ht && tn === "base"
                    ? o.BaseMember
                    : Ht && tn === "small" && xe
                    ? o.SmallMemberDnd
                    : Ht && tn === "small"
                    ? o.SmallMember
                    : Kt && tn === "base" && xe
                    ? o.BaseGuestDnd
                    : Kt && tn === "base"
                    ? o.BaseGuest
                    : Kt && tn === "small" && xe
                    ? o.SmallGuestDnd
                    : Kt && tn === "small"
                    ? o.SmallGuest
                    : qt && tn === "base" && xe
                    ? o.BaseSingleChannelGuestDnd
                    : qt && tn === "base"
                    ? o.BaseSingleChannelGuest
                    : qt && tn === "small" && xe
                    ? o.SmallSingleChannelGuestDnd
                    : qt && tn === "small"
                    ? o.SmallSingleChannelGuest
                    : ""
                  : "",
              [N, xe, tn, Kt, Ht, qt, je, Fe]
            ),
            Mt = (0, n.A)(oe, "c-avatar", {
              "c-avatar--no_image": !(F || V || Qt),
              "c-avatar--interactive": k && !R && !De,
              "c-avatar--ad_hoc_member": R,
              "c-avatar--deleted_member": Se,
              "c-avatar--resetIA": ie,
            }),
            Jt = Ee ? T.n[Ee] : B,
            dn = {
              height: `${Jt}px`,
              width: `${Jt}px`,
            };
          let rn;
          G && (rn = k && at());
          const gn =
              be && (k || rn)
                ? D.t("View {name}\u2019s Profile", {
                    name: be,
                  })
                : void 0,
            Zt = an({
              fallback: Qt,
            }),
            Vt = {
              ...dn,
              "--avatar-image-size": `${Jt}px`,
            },
            Sn = je ? "slackbot" : Ve,
            ze = N || $;
          let Ot = t.createElement(
            t.Fragment,
            null,
            N &&
              Ve &&
              t.createElement(a, {
                isDnd: xe,
                userType: Sn,
                hasNoAccess: Fe,
                size: tn,
              }),
            Ue
              ? t.createElement(r.A, {
                  className: oe,
                  size: Jt,
                })
              : Zt,
            ze && ct(),
            pt()
          );
          return (
            rn
              ? (Ot = t.createElement(
                  m.A,
                  {
                    href: rn,
                    target: "_blank",
                    rel: "noopener noreferrer",
                    style: dn,
                    className: Mt,
                    onClick: Ye,
                    tabIndex: ee,
                    "aria-hidden": ne,
                    "aria-label": gn,
                    autoClogProps: fe,
                    "data-qa": He,
                    "data-stringify-ignore": Oe,
                  },
                  Ot
                ))
              : k && !De
              ? (Ot = t.createElement(
                  u.A,
                  {
                    style: dn,
                    className: Mt,
                    "data-qa": He,
                    "data-stringify-ignore": Oe,
                    "aria-hidden": ne,
                    "aria-label": gn,
                    tabIndex: ee,
                    onClick: Ye,
                    autoClogProps: fe,
                  },
                  Ot
                ))
              : (Ot = t.createElement(
                  "span",
                  h(
                    {
                      style: Vt,
                      className: Mt,
                    },
                    Tn
                      ? {
                          "data-mask": Tn,
                        }
                      : {},
                    {
                      "data-qa": He,
                      "data-stringify-ignore": Oe,
                      "aria-hidden": ne,
                    }
                  ),
                  Ot
                )),
            k && Z && B >= P.medium
              ? (0, I.yN)({
                  memberId: U,
                  serviceId: G,
                  botProfile: H,
                  children: Ot,
                })
              : Ot
          );
        }, "BaseAvatar");
        K.displayName = "BaseAvatar";
      },
      1912114396: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => U,
        });
        var t = e(5824283093),
          n = e(6122756707),
          s = e(8642919232),
          i = e(8981514155),
          d = e(5267010247),
          o = e(8822892075),
          a = e(3275490582),
          r = e(3244118357),
          c = e(6052448919),
          u = e(8170643398),
          l = e(3534324375),
          m = e(4562579337),
          v = e(6536982570),
          E = e(3824874166),
          T = e(3339229351),
          g = e(4724591729),
          I = e(6415587347),
          f = e(92812954),
          y = e(6045540917),
          M = e(8847766420),
          p = e(9786721596),
          O = e(2562405183),
          C = e(8677230210),
          h = e(6273556946),
          D = e(3829348308),
          P = e(4761125736),
          S = e(5761207079),
          b = e(3677514771);
        function K() {
          return (
            (K =
              Object.assign ||
              function (R) {
                for (var G = 1; G < arguments.length; G++) {
                  var H = arguments[G];
                  for (var F in H)
                    Object.prototype.hasOwnProperty.call(H, F) && (R[F] = H[F]);
                }
                return R;
              }),
            K.apply(this, arguments)
          );
        }
        _(K, "_extends");
        const x = (0, t.forwardRef)((R, G) => {
            const H = (0, n.wA)();
            t.useImperativeHandle(
              G,
              () => ({
                props: R,
              }),
              [R]
            );
            const {
              user: F,
              userId: V,
              botId: X,
              botProfile: q,
              size: oe,
              icons: z,
              emoji: Ae,
              team: ae,
              slackbotFeels: de,
              isUnknown: ve,
              showPresence: Se,
              isExternal: Ee,
              hasNoAccess: be,
            } = R;
            let Ce = null,
              Z = null,
              $,
              N,
              L,
              w,
              k,
              J = Ae,
              ee,
              ne;
            const {
                member: pe,
                bot: Me,
                memberIsHuman: ke,
              } = (0, O.Z2)((Oe) =>
                (0, C.Od)(Oe, {
                  userId: V,
                  botId: X,
                  botProfile: q,
                })
              ),
              { currentTab: ge, channelId: fe } = (0, t.useContext)(i.d),
              re = F || V || ve,
              le = re ? F || pe : void 0,
              Re = le && !le.isUnknown && !le.is_unknown,
              ye = (0, O.d4)(
                (Oe) => (0, P._Z)(Oe, "bot_team_id_from_member") === "on"
              );
            if (Re) {
              var Te;
              X || (ee = Me == null ? void 0 : Me.id);
              let Oe;
              ye
                ? (Oe = (0, v.dQ)(le))
                : (Oe = (0, m.A)(le) ? (0, v.D5)(le) : (0, v.dQ)(le));
              const Ye = (0, I.Ay)({
                size: oe,
                teamOrEnterpriseId: Oe,
                memberId: le == null ? void 0 : le.id,
                avatarHash:
                  le == null || (Te = le.profile) === null || Te === void 0
                    ? void 0
                    : Te.avatar_hash,
                slackbotFeels: de,
              });
              (Ce = Ye == null ? void 0 : Ye.imageUrl),
                (Z = Ye == null ? void 0 : Ye.imageUrl2x),
                ($ = Ee || (le == null ? void 0 : le.isExternal)),
                (N = le == null ? void 0 : le.is_restricted),
                (L = le.is_ultra_restricted),
                (w = le.id),
                (k = (0, u.oy)(le));
            }
            ne = (0, O.d4)((Oe) => (Re && $ ? (0, v.Ux)(Oe, le) : void 0));
            let De = re ? void 0 : z || (q && q.icons);
            if (!re) {
              if (Me) {
                De = De || Me.icons;
                const Oe = (0, g.Cu)() ? h.O : h.U;
                (Me == null ? void 0 : Me.app_id) === Oe &&
                  (De = (Me == null ? void 0 : Me.icons) || De);
              }
              if ((!J && De && (J = De.emoji), !J)) {
                const Oe = (0, I.Ay)({
                  size: oe,
                  botImages: De,
                  isBot: !0,
                });
                (Ce = Oe.imageUrl), (Z = Oe.imageUrl2x);
              }
            }
            (ne = (0, O.d4)((Oe) =>
              re
                ? ne
                : (ae == null ? void 0 : ae.id) ||
                  (0, c.s)(Oe, {
                    bot: Me,
                    botProfile: q,
                    botId: X,
                  }) ||
                  void 0
            )),
              ($ = (0, O.d4)((Oe) =>
                re ? $ : ne ? ne !== (0, M.Kc)(Oe) : !1
              ));
            const Ue = (0, O.d4)((Oe) => {
                if (Re) return (0, l.sE)(Oe, le);
                if (!re) return (0, r.Hg)(Me);
              }),
              Ke = (0, O.d4)((Oe) => {
                let Ye =
                  J &&
                  ne &&
                  (0, D.ux)(Oe, {
                    text: J,
                    teamId: ne,
                  });
                if (!Ye && J && ne === (0, M.Kc)(Oe)) {
                  const at = (0, b.H7)(Oe),
                    _t = at && at.id;
                  _t &&
                    _t !== ne &&
                    (Ye = (0, D.ux)(Oe, {
                      text: J,
                      teamId: _t,
                    }));
                }
                return Ye;
              }),
              Ze = (0, O.d4)((Oe) => (Se ? (0, f.d)(Oe, V) : void 0)),
              Q = (0, O.d4)((Oe) => (Se ? (0, y.h)(Oe, V) : !1));
            var ie;
            const Ve = (ie = V ?? w) !== null && ie !== void 0 ? ie : "",
              xe = (0, O.d4)((Oe) => (Ve ? (0, S.a)(Oe, Ve) : !1)),
              je = (0, t.useCallback)((Oe) => H((0, p.U)(Oe)), [H]),
              Fe = (0, t.useCallback)((Oe) => H((0, s.A)(Oe)), [H]),
              He = (0, t.useCallback)(
                (Oe) =>
                  H(
                    ge && fe ? (0, d.o)((0, o.sL)(Oe, fe, ge.id)) : (0, d.o)(Oe)
                  ),
                [H, ge, fe]
              );
            return t.createElement(
              E.f1,
              K({}, R, {
                userId: V,
                imageUrl: Ce || void 0,
                imageUrl2x: Z || void 0,
                botEmoji: J,
                canRenderEmoji: !!Ke,
                teamId: ne,
                isRestricted: N,
                isUltraRestricted: L,
                isDeleted: k,
                memberOrBotName: Ue,
                botId: ee || X,
                disableLink: !ke && (!Me || (0, u.v3)(Me)),
                isExternal: $,
                isUserHidden: xe,
                userType: Ze,
                isDnd: Q,
                isSlackbot: V === T.Q$,
                size: oe,
                openProfile: je,
                showMemberProfileInWindow: Fe,
                navigate: He,
                hasNoAccess: be,
                showPresence: Se,
              })
            );
          }),
          B = (0, a.A)(t.memo(x));
        B.displayName = "ConnectedAvatar";
        const U = B;
      },
      4775127335: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => s,
          RG: () => n.RG,
          f1: () => n.f1,
          fp: () => n.fp,
        });
        var t = e(1912114396),
          n = e(3824874166);
        const s = t.A;
      },
      9270432170: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(8683010724);
        function i(o) {
          let { className: a = "", size: r, "data-qa": c } = o;
          return t.createElement(
            "span",
            {
              className: (0, n.A)(a, "c-hidden_user_avatar", {
                "c-hidden_user_avatar--small": r === 16,
              }),
              style: {
                width: `${r}px`,
                height: `${r}px`,
              },
              "data-qa": c,
            },
            t.createElement(
              "span",
              {
                className: "c-hidden_user_avatar--icon",
              },
              t.createElement(s.A, {
                size: r <= 24 ? "16" : "24",
                name: "user-hide",
              })
            )
          );
        }
        _(i, "HiddenUserAvatar"), (i.displayName = "HiddenUserAvatar");
        const d = t.memo(i);
      },
      9332393661: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => E,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(3398586081),
          i = e(7715417323),
          d = e(1610251172);
        const o = (0, s.A)((T) => ({
          height: `${T}px`,
          width: `${T}px`,
        }));
        function a(T) {
          let {
            icon: g,
            classes: I = null,
            size: f = 20,
            ariaHidden: y = void 0,
            ariaRole: M = "img",
            ariaLabel: p = void 0,
          } = T;
          const O = (0, n.A)("c-base_font_icon", I);
          return t.createElement(
            "div",
            {
              className: O,
              style: o(f),
              "aria-hidden": y,
              role: M,
              "aria-label": p,
            },
            t.createElement(d.A, {
              type: g,
            })
          );
        }
        _(a, "BaseFontIcon"), (a.displayName = "BaseFontIcon");
        const r = a;
        var c = e(796111729);
        const u = (0, c.Wo)(),
          l = (0, s.A)((T) => ({
            height: `${T}px`,
            width: `${T}px`,
          })),
          m = (0, s.A)((T) => ({
            width: `${T}px`,
          }));
        function v(T) {
          let {
            image: g = void 0,
            size: I = 20,
            srcSet: f = "",
            classes: y = void 0,
            icon: M = void 0,
            ariaHidden: p = !1,
            ariaRole: O = "img",
            ariaLabel: C = void 0,
            widthOnly: h = !1,
            onLoad: D = i.A,
            onError: P = i.A,
            resetIA: S,
            "data-qa": b,
          } = T;
          g && M && u.warn("BaseIcon: cannot pass in both image and icon!"),
            !p &&
              !C &&
              u.warn(
                "BaseIcon: if ariaHidden is false, we must have an ariaLabel for a11y!"
              );
          const K = (0, n.A)("c-base_icon", y, {
            "c-base_icon--unknown": !g && !M,
            "c-base_icon--image": g,
            "c-base_icon--resetIA": S,
          });
          if (M)
            return t.createElement(r, {
              icon: M,
              classes: K,
              size: I,
              ariaHidden: p,
              ariaRole: O,
              ariaLabel: C,
            });
          const x = t.createElement("img", {
            src: g,
            srcSet: f,
            className: K,
            style: h ? m(I) : l(I),
            "aria-hidden": p,
            role: O,
            "aria-label": C,
            alt: "",
            onLoad: D,
            onError: P,
            "data-qa": b,
          });
          return h
            ? t.createElement(
                "span",
                {
                  className: (0, n.A)("c-base_icon__width_only_container", {
                    "c-base_icon--resetIA": S,
                  }),
                  style: l(I),
                },
                x
              )
            : x;
        }
        _(v, "BaseIcon"), (v.displayName = "BaseIcon");
        const E = v;
      },
      4302969948: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => $,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(7715417323),
          i = e(4481313819),
          d = e(307717037),
          o = e(2208015175),
          a = e(2664504268),
          r = e(4250078557),
          c = e(3207321841),
          u = e(5602423845),
          l = e(348699080),
          m = e(7937864072),
          v = e(5204962244),
          E = e(6308822),
          T = e(1224315998),
          g = e(735940183),
          I = e(2562405183),
          f = e(2047021170);
        const y = new g.Ay("slack_kit_video"),
          p = (0, t.forwardRef)((N, L) => {
            let {
              src: w,
              vtt: k,
              videoPoster: J,
              title: ee,
              label: ne,
              autoPlay: pe = !0,
              enableMediaCaptions: Me,
              onLoadedMetadata: ke,
              isLoading: ge,
              setIsLoading: fe,
              isPlaying: re,
              setIsPlaying: le,
              duration: Re,
              setDuration: ye,
              setElapsed: Te,
              enableControls: De = !1,
              controlsList: Ue,
              shiftCaptionsUp: Ke,
              setHasError: Ze,
              videoContainerClassName: Q,
            } = N;
            const ie = (0, m.A)(),
              Ve = (0, u.A)(),
              xe = (0, t.useRef)(null),
              je = (0, v.d)(a.A),
              [Fe, He] = (0, t.useState)(!1),
              Oe = (0, t.useRef)(),
              Ye = (0, t.useRef)(0),
              [at, _t] = (0, t.useState)(null),
              pt = (0, I.d4)((Vt) => (0, f.ty)(Vt, "media_muted"));
            var Qe;
            const ct =
                (Qe = (0, I.d4)((Vt) => (0, f.ty)(Vt, "media_volume"))) !==
                  null && Qe !== void 0
                  ? Qe
                  : 1,
              Pt = (0, I.d4)((Vt) => (0, f.ty)(Vt, "media_playback_speed")),
              zt = (0, t.useRef)({});
            (0, t.useEffect)(() => {
              xe.current &&
                at &&
                (zt.current = {
                  file_src: at,
                  media_type: "video",
                  duration_ms: Re * 1e3,
                  playback_session: je,
                  title: ee,
                });
            }, [je, at, ee, Re]),
              (0, t.useEffect)(() => {
                fetch(w)
                  .then((Vt) => Vt.blob())
                  .then((Vt) => {
                    const Sn = URL.createObjectURL(Vt);
                    _t(Sn);
                  })
                  .catch((Vt) => {
                    ie.error(`Video player err: ${Vt}`), Ze(!0);
                  });
              }, [ie, Ze, _t, w]);
            const an = (0, t.useRef)(!1),
              Qt = (0, t.useCallback)(() => {
                !an.current &&
                  Fe &&
                  (Oe.current &&
                    ((Ye.current += Date.now() - Oe.current),
                    (Oe.current = void 0)),
                  Ve.track(
                    T.EventId.SK_VIDEO_PLAYER,
                    (0, d.A)({}, zt.current, {
                      contexts: {
                        ui_context: {
                          action: "impression",
                          ui_properties: {
                            element_type: "video",
                            element_name: "playback_finished",
                          },
                        },
                      },
                      closed_captions: Me ? "on" : "off",
                      playback_speed: `${Pt ?? 1}x`,
                      duration_watched_ms: Ye.current,
                    })
                  ),
                  (an.current = !0),
                  (Ye.current = 0));
              }, [Ve, Fe, Me, Pt]),
              tn = (0, t.useRef)(Qt);
            (tn.current = Qt), (0, l.A)(() => () => tn.current(), []);
            const Ht = (0, t.useCallback)(() => {
              Qt();
            }, [Qt]);
            (0, t.useEffect)(() => {
              if (!xe.current) return;
              const Vt = _(() => {
                  re && le(!1), fe(!0);
                }, "onWaiting"),
                Sn = _(() => {
                  fe(!1),
                    le(!0),
                    Ve.track(
                      T.EventId.SK_VIDEO_PLAYER,
                      (0, d.A)({}, zt.current, {
                        contexts: {
                          ui_context: {
                            action: "click",
                            ui_properties: {
                              element_type: "button",
                              element_name: "play",
                            },
                          },
                        },
                      })
                    ),
                    Fe ||
                      (He(!0),
                      Ve.track(
                        T.EventId.SK_VIDEO_PLAYER,
                        (0, d.A)({}, zt.current, {
                          contexts: {
                            ui_context: {
                              action: "impression",
                              ui_properties: {
                                element_name: "media",
                              },
                            },
                          },
                        })
                      )),
                    (Oe.current = Date.now());
                }, "onPlay"),
                ze = _(() => {
                  le(!1),
                    fe(!1),
                    Ve.track(
                      T.EventId.MEDIA_PLAYER,
                      (0, d.A)({}, zt.current, {
                        contexts: {
                          ui_context: {
                            action: "click",
                            ui_properties: {
                              element_type: "button",
                              element_name: "pause",
                            },
                          },
                        },
                      })
                    ),
                    Oe.current &&
                      ((Ye.current += Date.now() - Oe.current),
                      (Oe.current = void 0));
                }, "onPause"),
                Ot = xe.current,
                fn = _(() => {
                  if (!Ot.buffered) return;
                  const Tt = Ot.duration || 0;
                  ye(Tt);
                }, "onProgress"),
                ln = _(() => {
                  fe(!1);
                  const Tt = Ot.duration;
                  ye(Tt), Te(Ot.currentTime);
                }, "onTimeUpdate"),
                it = _(() => {
                  const Tt = Ot.playbackRate;
                  c.Cv.includes(Tt) && (Ot.playbackRate = Tt);
                }, "handleRateChange");
              return (
                Ot.addEventListener("waiting", Vt),
                Ot.addEventListener("progress", fn),
                Ot.addEventListener("timeupdate", ln),
                Ot.addEventListener("play", Sn),
                Ot.addEventListener("playing", Sn),
                Ot.addEventListener("pause", ze),
                Ot.addEventListener("ratechange", it),
                Ot.addEventListener("ended", Ht),
                () => {
                  Ot.addEventListener("waiting", Vt),
                    Ot.removeEventListener("progress", fn),
                    Ot.removeEventListener("timeupdate", ln),
                    Ot.removeEventListener("play", Sn),
                    Ot.removeEventListener("playing", Sn),
                    Ot.removeEventListener("pause", ze),
                    Ot.removeEventListener("ratechange", it),
                    Ot.removeEventListener("ended", Ht);
                }
              );
            }, [xe, ge, re, ye, fe, Te, le, Fe, He, Ht, Ve]),
              (0, t.useEffect)(() => {
                var Vt;
                const Sn =
                  (Vt = xe.current) === null || Vt === void 0
                    ? void 0
                    : Vt.textTracks[0];
                Sn && (Sn.mode = Me ? "showing" : "hidden");
              }, [Me]),
              (0, t.useEffect)(() => {
                if (Me) {
                  var Vt, Sn;
                  const ze =
                    (Vt = xe.current) === null || Vt === void 0
                      ? void 0
                      : Vt.textTracks[0];
                  if (!ze) return;
                  const Ot =
                    ((Sn = xe.current) === null || Sn === void 0
                      ? void 0
                      : Sn.clientWidth) < 500
                      ? 50
                      : 80;
                  (ze.mode = "hidden"),
                    Ke
                      ? (0, o.A)(ze == null ? void 0 : ze.cues, (fn) => {
                          (fn.text.match(/\n/g) || []).length >= 2 ||
                          fn.text.length > Ot
                            ? (fn.line = -6)
                            : (fn.line = -5);
                        })
                      : (0, o.A)(ze == null ? void 0 : ze.cues, (fn) => {
                          fn.line = "auto";
                        }),
                    (ze.mode = "showing");
                }
              }, [Me, Ke]);
            const Kt = (0, t.useCallback)(
                function (Vt) {
                  let Sn =
                    arguments.length > 1 && arguments[1] !== void 0
                      ? arguments[1]
                      : !0;
                  xe != null &&
                    xe.current &&
                    ((xe.current.currentTime = Vt), Sn && xe.current.play());
                },
                [xe]
              ),
              qt = (0, t.useCallback)(() => {
                xe != null &&
                  xe.current &&
                  (xe.current.paused ? xe.current.play() : xe.current.pause());
              }, [xe]),
              Tn = (0, t.useCallback)(() => {
                var Vt;
                xe != null &&
                  xe.current &&
                  ((Vt = xe.current) === null || Vt === void 0 || Vt.pause());
              }, [xe]),
              Mt = (0, t.useCallback)(
                (Vt) => {
                  xe != null && xe.current && (xe.current.muted = Vt);
                },
                [xe]
              ),
              Jt = (0, t.useCallback)(
                (Vt) => {
                  xe != null && xe.current && (xe.current.volume = Vt);
                },
                [xe]
              ),
              dn = (0, t.useCallback)(
                (Vt) => {
                  xe != null &&
                    xe.current &&
                    c.Cv.includes(Vt) &&
                    (xe.current.playbackRate = Vt);
                },
                [xe]
              );
            (0, t.useImperativeHandle)(L, () => ({
              setCurrentTime: Kt,
              togglePlayPause: qt,
              setMuted: Mt,
              setVolume: Jt,
              setPlaybackRate: dn,
              pause: Tn,
            })),
              (0, t.useEffect)(() => {
                pt && Mt(pt), ct && Jt(ct), Pt && !De && dn(Pt);
              });
            const rn = (0, t.useCallback)(() => {
                var Vt;
                const Sn =
                  (Vt = xe.current) === null || Vt === void 0
                    ? void 0
                    : Vt.error;
                Sn &&
                  (Ze(!0),
                  ie.error(`error code: ${Sn.code}, msg: ${Sn.message}`));
              }, [xe, ie, Ze]),
              gn = (0, t.useCallback)(() => {
                fe(!1);
              }, [fe]),
              Zt = (0, n.A)("c-video_player-video-container", Q);
            return t.createElement(
              "div",
              {
                className: Zt,
                "data-media-focus-container": !0,
                tabIndex: -1,
              },
              ge &&
                t.createElement(
                  "div",
                  {
                    className: "c-video_player-video-container_spinner",
                  },
                  t.createElement(E.A, {
                    color: "white",
                  })
                ),
              t.createElement(
                "video",
                {
                  preload: "auto",
                  autoPlay: pe,
                  "aria-label": ne,
                  className: "c-video_player-video",
                  controls: De && !ge ? !0 : void 0,
                  controlsList: De ? Ue : void 0,
                  title: ee,
                  ref: xe,
                  poster: J,
                  disablePictureInPicture: !0,
                  onLoadedMetadata: ke,
                  onCanPlay: gn,
                  onError: rn,
                },
                at &&
                  t.createElement("source", {
                    src: at,
                    type: "video/mp4",
                  }),
                y.t("Your browser does not support the video tag"),
                k &&
                  t.createElement(r.A, {
                    vtt: k,
                    enableMediaCaptions: Me,
                  })
              )
            );
          });
        var O = e(5460331959),
          C = e(3118200703),
          h = e(8371678613),
          D = e(3242899446),
          P = e(4916948857),
          S = e(3749524846),
          b = e(6084388622),
          K = e(6122756707),
          x = e(9362126998),
          B = e(2036354333),
          U = e(5946832122),
          R = e(8683010724),
          G = e(2312625946),
          H = e(387484329);
        const F = new g.Ay("video_player"),
          V = _((N) => {
            let {
              vtt: L,
              isInlinePlayer: w,
              className: k,
              backgroundStyle: J,
            } = N;
            const ee = (0, K.wA)(),
              ne = (0, I.d4)((re) => (0, f.ty)(re, "enable_media_captions")),
              pe = (0, I.d4)(x.y0),
              Me = (0, t.useCallback)(() => {
                ee(
                  (0, H.AZ)({
                    pref: "enable_media_captions",
                    value: !ne,
                  })
                );
              }, [ee, ne]),
              ke =
                ne && L
                  ? F.t("Turn off captions", {
                      fallbackHash: "c344bd39683fc6566ab53b0d886e93230fd21cbf",
                      fallbackHashNs: "stories_av",
                    })
                  : F.t("Turn on captions", {
                      fallbackHash: "6761b8af97254fcb93590208ff4ee1f03481c900",
                      fallbackHashNs: "stories_av",
                    }),
              ge = F.t("Display captions", {
                fallbackHash: "6761b8af97254fcb93590208ff4ee1f03481c900",
                fallbackHashNs: "stories_av",
              });
            if (!pe) return null;
            const fe = ne
              ? t.createElement(R.A, {
                  name: "closed-caption",
                  variation: "filled",
                  size: "inherit",
                })
              : t.createElement(R.A, {
                  name: "closed-caption",
                  size: "inherit",
                });
            return t.createElement(
              G.Ay,
              {
                tip: ke,
                position: "top",
                delay: G.n1,
                hideFromScreenReader: !0,
              },
              w
                ? t.createElement(
                    B.A,
                    {
                      className: (0, n.A)(
                        "c-video_controls_overlay__controls__button c-video_controls_overlay__controls__caption"
                      ),
                      "aria-label": ge,
                      "aria-pressed": ne,
                      onClick: Me,
                    },
                    fe
                  )
                : t.createElement(
                    U.A,
                    {
                      "aria-label": ge,
                      "aria-pressed": ne,
                      icon: ne ? "cc-filled" : "cc",
                      onClick: Me,
                      size: "medium",
                      className: k,
                      backgroundStyle: J,
                    },
                    "CC"
                  )
            );
          }, "VideoCaptionsButton");
        V.displayName = "VideoCaptionsButton";
        const X = V;
        var q = e(5874162200),
          oe = e(9446966957);
        function z() {
          return (
            (z =
              Object.assign ||
              function (N) {
                for (var L = 1; L < arguments.length; L++) {
                  var w = arguments[L];
                  for (var k in w)
                    Object.prototype.hasOwnProperty.call(w, k) && (N[k] = w[k]);
                }
                return N;
              }),
            z.apply(this, arguments)
          );
        }
        _(z, "_extends");
        const Ae = new g.Ay("video_scrubber"),
          ae = _((N) => {
            let { elapsed: L, duration: w, setTime: k } = N;
            const J = (0, t.useRef)(null);
            (0, t.useEffect)(() => {
              var Me;
              (Me = J.current) === null ||
                Me === void 0 ||
                Me.toggleAttribute("data-no-drag-on-mouse-move", !0);
            }, [J]);
            const ee = (0, t.useCallback)(
                (Me) =>
                  t.createElement(
                    "div",
                    z(
                      {
                        className:
                          "c-video_player_controls_scrubber c-video_player_controls_overlay__hover",
                        ref: J,
                      },
                      Me
                    )
                  ),
                []
              ),
              ne = (0, t.useCallback)(
                (Me) =>
                  t.createElement(
                    "div",
                    z(
                      {
                        className: "c-video_player_controls_scrubber__track",
                      },
                      Me
                    )
                  ),
                []
              ),
              pe = (0, t.useCallback)(
                (Me) =>
                  t.createElement(
                    "div",
                    z(
                      {
                        className: "c-video_player_controls_scrubber__elapsed",
                      },
                      Me
                    )
                  ),
                []
              );
            return t.createElement(oe.A, {
              value: L,
              max: w,
              onChange: k,
              renderContainer: ee,
              renderTrack: ne,
              renderInner: pe,
              "aria-label": Ae.t("Time scrubber", {
                currentTime: (0, q.A)(L),
                totalTime: (0, q.A)(w),
                fallbackHash: "638b3954642581b284074f5e0f0f6dd701690df1",
                fallbackHashNs: "stories_av",
              }),
              "aria-valuetext": (0, q.A)(L),
            });
          }, "VideoControlsScrubber");
        ae.displayName = "VideoControlsScrubber";
        const de = ae;
        var ve = e(2024014560);
        const Se = new g.Ay("slack_kit_video"),
          Ee = _((N) => {
            let {
              onClickOverlay: L,
              showControls: w = !0,
              duration: k,
              elapsed: J,
              setTime: ee,
              isPlaying: ne,
              isLoading: pe,
              videoRef: Me,
              vtt: ke,
              setShiftCaptionsUp: ge = s.A,
              onFullscreenButtonClicked: fe,
              isFullScreen: re,
            } = N;
            const le = (0, t.useContext)(S.A),
              [Re, ye] = (0, t.useState)(!1),
              [Te, De] = (0, t.useState)(!1),
              Ue = (0, t.useRef)(null),
              Ke = (0, t.useRef)(null),
              Ze = ne
                ? Se.t("Pause", {
                    fallbackHash: "781961bc81c25697841ecce5d4d9dad9f6b261c6",
                    fallbackHashNs: "stories_av",
                  })
                : Se.t("Play", {
                    fallbackHash: "5d12bd53552cafc41ca6146c04870df2e1574e13",
                    fallbackHashNs: "stories_av",
                  }),
              Q = (0, t.useCallback)(
                (_t) => {
                  var pt, Qe;
                  const ct = _t.target,
                    Pt = !!(
                      le &&
                      ((!((pt = Ue.current) === null || pt === void 0) &&
                        pt.contains(ct)) ||
                        (!((Qe = Ke.current) === null || Qe === void 0) &&
                          Qe.contains(ct)))
                    );
                  De(Pt);
                },
                [le]
              ),
              ie = (0, t.useCallback)(
                (_t) => {
                  var pt, Qe;
                  const ct = _t.relatedTarget,
                    Pt = !!(
                      le &&
                      ((!((pt = Ue.current) === null || pt === void 0) &&
                        pt.contains(ct)) ||
                        (!((Qe = Ke.current) === null || Qe === void 0) &&
                          Qe.contains(ct)))
                    );
                  De(Pt);
                },
                [le]
              ),
              {
                mouseIsOverElement: Ve,
                onMouseLeave: xe,
                onMouseEnter: je,
                onMouseMove: Fe,
                onMouseOver: He,
              } = (0, P.A)(),
              Oe = (0, t.useCallback)(() => {
                je();
              }, [je]);
            (0, t.useEffect)(() => {
              ge(Ve);
            }, [Ve, ge]);
            const Ye = (() =>
                J
                  ? (0, ve.A)(J * 1e3)
                  : k
                  ? (0, ve.A)(k * 1e3)
                  : Se.t("Video", {
                      fallbackHash: "bc17c1f0179a888f2a7e8389f67d4f2cf5cf4531",
                      fallbackHashNs: "call_buttons",
                    }))(),
              at = pe
                ? t.createElement(E.A, {
                    size: "medium",
                    color: "white",
                    className:
                      "c-video_player_controls_overlay__controls__spinner",
                    noMargin: !0,
                  })
                : t.createElement(R.A, {
                    name: ne ? "pause" : "play",
                    variation: "filled",
                    inline: !0,
                  });
            return w
              ? t.createElement(O.A, null, (_t) => {
                  let { measureRef: pt, width: Qe } = _t;
                  const ct = Qe || 360,
                    Pt = !!(ct && ct <= 330);
                  return t.createElement(
                    "div",
                    {
                      className: (0, n.A)(
                        "c-video_player_controls_overlay",
                        "c-video_player_controls_overlay--controls",
                        {
                          "c-video_player_controls_overlay--active": Te,
                          "p-video_player_controls_overlay--vertical_volume_active":
                            Re,
                        }
                      ),
                      onFocus: Q,
                      onBlur: ie,
                      onMouseEnter: Oe,
                      onMouseLeave: xe,
                      onMouseMove: Fe,
                      onMouseOver: He,
                      "data-prevent-fade": "true",
                      role: "group",
                      ref: pt,
                    },
                    t.createElement(b.Nm, {
                      className: "c-video_player_controls_overlay__button",
                      onClick: L,
                      tabIndex: -1,
                      "aria-hidden": "true",
                    }),
                    t.createElement(
                      "div",
                      {
                        className:
                          "c-video_player_controls_overlay__controls_container",
                        ref: Ue,
                      },
                      t.createElement(de, {
                        elapsed: J,
                        duration: k,
                        setTime: ee,
                      }),
                      t.createElement(
                        "div",
                        {
                          className:
                            "c-video_player_controls_overlay--controls",
                        },
                        t.createElement(
                          b.Nm,
                          {
                            className: (0, n.A)(
                              "c-video_player_controls_overlay__controls__pill",
                              {
                                "c-video_player_controls_overlay__controls__pill--playing":
                                  ne,
                              }
                            ),
                            "aria-label": Ze,
                            "aria-pressed": ne,
                            onClick: L,
                          },
                          at,
                          t.createElement(
                            "div",
                            {
                              className:
                                "c-video_player_controls_overlay__time",
                            },
                            Ye
                          )
                        ),
                        t.createElement(D.A, {
                          className: "c-video_player_media_volume_slider",
                          isInlinePlayer: !0,
                          useVerticalVolume: Pt,
                          setIsVerticalVolumeActive: ye,
                          videoRef: Me,
                        }),
                        t.createElement(
                          "div",
                          {
                            className:
                              "c-video_player_controls--right-controls",
                          },
                          t.createElement(h.A, {
                            isInlinePlayer: !0,
                            videoRef: Me,
                          }),
                          ke &&
                            t.createElement(X, {
                              vtt: ke,
                              isInlinePlayer: !0,
                            })
                        )
                      )
                    ),
                    t.createElement(
                      "div",
                      {
                        className:
                          "c-video_player_controls_overlay__corner c-video_controls_overlay__hover",
                        ref: Ke,
                      },
                      !re &&
                        fe &&
                        t.createElement(C.A, {
                          classPrefix: "c-video_player",
                          onClick: fe,
                        })
                    )
                  );
                })
              : null;
          }, "VideoOverlay");
        Ee.displayName = "VideoOverlay";
        const be = Ee,
          Ce = new g.Ay("slack_kit_video"),
          Z = _((N) => {
            let {
              className: L,
              styleProps: w,
              title: k,
              label: J,
              src: ee,
              vtt: ne,
              enableMediaCaptions: pe = !1,
              autoPlay: Me,
              videoPoster: ke,
              enableControls: ge = !1,
              controlsList: fe,
              bubbleErrorOrLoadingStateToParent: re = s.A,
              videoContainerClassName: le,
            } = N;
            const Re = (0, t.useRef)(null),
              [ye, Te] = (0, t.useState)(!1),
              [De, Ue] = (0, t.useState)(!1),
              [Ke, Ze] = (0, t.useState)(!0),
              [Q, ie] = (0, t.useState)(0),
              [Ve, xe] = (0, t.useState)(0),
              [je, Fe] = (0, t.useState)(!1),
              He =
                (0, I.d4)((_t) => (0, f.ty)(_t, "enable_media_captions")) || pe;
            (0, t.useEffect)(() => {
              re &&
                re({
                  hasError: De,
                  isLoading: Ke,
                });
            }, [De, Ke, re]);
            const Oe = (0, t.useCallback)(
                (_t) => {
                  if (Re != null && Re.current) {
                    var pt;
                    (pt = Re.current) === null ||
                      pt === void 0 ||
                      pt.setCurrentTime(_t, !1);
                  } else ie(_t);
                },
                [Re, ie]
              ),
              Ye = (0, t.useCallback)((_t, pt) => {
                pt && xe(pt);
              }, []),
              at = (0, t.useCallback)(
                (_t) => {
                  var pt;
                  _t.stopPropagation(),
                    (pt = Re.current) === null ||
                      pt === void 0 ||
                      pt.togglePlayPause();
                },
                [Re]
              );
            return t.createElement(
              i.A,
              {
                clogImpression: !0,
                eventId: T.EventId.SK_VIDEO_PLAYER,
              },
              t.createElement(
                "div",
                {
                  className: (0, n.A)("c-video_player", L),
                  style: w,
                },
                t.createElement(p, {
                  title: k,
                  label: J,
                  src: ee,
                  vtt: ne,
                  ref: Re,
                  autoPlay: Me,
                  videoPoster: ke,
                  enableControls: ge,
                  controlsList: fe,
                  setIsLoading: Ze,
                  isLoading: Ke,
                  isPlaying: ye,
                  setIsPlaying: Te,
                  duration: Ve,
                  setDuration: xe,
                  setElapsed: ie,
                  onLoadedMetadata: Ye,
                  enableMediaCaptions: He,
                  shiftCaptionsUp: je,
                  setHasError: Ue,
                  videoContainerClassName: le,
                }),
                De &&
                  t.createElement(
                    "div",
                    {
                      className: "c-video_player__error_overlay",
                    },
                    t.createElement(
                      "p",
                      null,
                      Ce.t("Error loading video. Please try again later.")
                    )
                  ),
                t.createElement(be, {
                  onClickOverlay: at,
                  elapsed: Q,
                  duration: Ve,
                  showControls: !ge,
                  setTime: Oe,
                  isPlaying: ye,
                  isLoading: Ke,
                  videoRef: Re,
                  vtt: ne,
                  setShiftCaptionsUp: Fe,
                  onFullscreenButtonClicked: s.A,
                  isFullScreen: !1,
                })
              )
            );
          }, "VideoPlayer");
        Z.displayName = "VideoPlayer";
        const $ = t.memo(Z);
      },
      9574544148: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => I,
        });
        var t = e(5824283093),
          n = e(1649982175),
          s = e(3297051565),
          i = e.n(s),
          d = e(9262712126),
          o = e(8921478798),
          a = e(3534324375),
          r = e(735940183),
          c = e(9391594207),
          u = e(5761207079);
        function l() {
          return (
            (l =
              Object.assign ||
              function (f) {
                for (var y = 1; y < arguments.length; y++) {
                  var M = arguments[y];
                  for (var p in M)
                    Object.prototype.hasOwnProperty.call(M, p) && (f[p] = M[p]);
                }
                return f;
              }),
            l.apply(this, arguments)
          );
        }
        _(l, "_extends");
        const m = new r.Ay("files"),
          v = {
            name: i().string.isRequired,
            isChannelFiles: i().bool,
            showMemberNameIfHidden: i().bool,
          },
          E = {
            isChannelFiles: !1,
            showMemberNameIfHidden: !1,
          },
          T = _((f) => {
            const y = (0, n.A)(f, [
              "id",
              "name",
              "dispatch",
              "firstName",
              "skipPrefCompliance",
              "isChannelFiles",
              "showMemberNameIfHidden",
            ]);
            let M = f.name;
            if (f.isChannelFiles) {
              const p = f.name;
              M = m.t("Shared by {memberName}", {
                memberName: p,
              });
            }
            return t.createElement("span", l({}, y), M);
          }, "MemberName");
        (T.displayName = "MemberName"), (T.propTypes = v), (T.defaultProps = E);
        const g = _((f, y) => {
            const {
              id: M,
              member: p,
              skipPrefCompliance: O,
              showMemberNameIfHidden: C,
            } = y;
            if (O)
              return {
                name: (0, d.wg)(p),
              };
            let h;
            return (
              !C && (0, u.a)(f, M)
                ? (h = m.t("Name hidden"))
                : (h = p
                    ? (0, a.sE)(f, p, !1, !1, O, !1)
                    : (0, o.I)(f, M, !1, !1, !1, !1)),
              {
                name: h,
              }
            );
          }, "mapStateToProps"),
          I = (0, c.N)(g)(T);
      },
      6496493732: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => T,
        });
        var t = e(5824283093),
          n = e(7715417323),
          s = e(7968796288),
          i = e(6084388622),
          d = e(4979382452),
          o = e(4636370173),
          a = e(2465132699),
          r = e(8523371695),
          c = e(3606117573),
          u = e(8029613601),
          l = e(4947127560),
          m = e(735940183);
        const v = new m.Ay("generic_dialog"),
          E = _((g) => {
            let {
              title: I,
              children: f,
              submitButtonType: y = "primary",
              submitButtonText: M = v.t("Confirm"),
              submitButtonIsDisabled: p = !1,
              submitButtonIsLoading: O = !1,
              showCancelButton: C = !0,
              showCloseButton: h = !0,
              showSubmitButton: D = !0,
              cancelButtonText: P = v.t("Cancel"),
              onSubmit: S = n.A,
              onCancel: b = n.A,
              onClose: K = n.A,
              "data-qa": x = "dialog",
              className: B,
              overlayClassName: U,
              submitAutoClogProps: R,
              cancelAutoClogProps: G,
              shouldReturnFocusAfterClose: H = !0,
            } = g;
            const F = (0, s.A)(),
              V = (0, s.A)();
            return t.createElement(
              d.A,
              {
                describedby: V,
                labelledby: F,
                closeModal: K,
                role: "dialog",
                className: B,
                overlayClassName: U,
                dataQa: x,
                shouldReturnFocusAfterClose: H,
                showCloseButton: h,
              },
              t.createElement(
                u.A,
                null,
                t.createElement(l.A, {
                  id: F,
                  title: I,
                  "data-qa": `${x}_header`,
                })
              ),
              t.createElement(
                o.A,
                null,
                t.createElement(
                  a.A,
                  {
                    id: V,
                    "data-qa": `${x}_body`,
                  },
                  f
                )
              ),
              (C || D) &&
                t.createElement(
                  r.A,
                  {
                    "data-qa": `${x}_footer`,
                  },
                  t.createElement(
                    c.A,
                    null,
                    C &&
                      t.createElement(
                        i.Ay,
                        {
                          type: "outline",
                          onClick: b,
                          "data-qa": `${x}_cancel`,
                          autoClogProps: G,
                        },
                        P
                      ),
                    D &&
                      t.createElement(
                        i.lV,
                        {
                          type: y,
                          onClick: S,
                          loading: O,
                          disabled: p,
                          "data-qa": `${x}_go`,
                          autoClogProps: R,
                        },
                        M
                      )
                  )
                )
            );
          }, "DialogModalProps");
        E.displayName = "DialogModalProps";
        const T = E;
      },
      51460783: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => o,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(1596328926);
        function i() {
          return (
            (i =
              Object.assign ||
              function (a) {
                for (var r = 1; r < arguments.length; r++) {
                  var c = arguments[r];
                  for (var u in c)
                    Object.prototype.hasOwnProperty.call(c, u) && (a[u] = c[u]);
                }
                return a;
              }),
            i.apply(this, arguments)
          );
        }
        _(i, "_extends");
        function d(a) {
          const { children: r, className: c } = a;
          return r
            ? t.createElement(
                "span",
                i(
                  {
                    className: (0, n.A)(c, "c-base_entity__metadata"),
                  },
                  (0, s.A)(a)
                ),
                r
              )
            : null;
        }
        _(d, "BaseEntityMetadata"), (d.displayName = "BaseEntityMetadata");
        const o = d;
      },
      161084047: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => o,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(1596328926);
        function i() {
          return (
            (i =
              Object.assign ||
              function (a) {
                for (var r = 1; r < arguments.length; r++) {
                  var c = arguments[r];
                  for (var u in c)
                    Object.prototype.hasOwnProperty.call(c, u) && (a[u] = c[u]);
                }
                return a;
              }),
            i.apply(this, arguments)
          );
        }
        _(i, "_extends");
        function d(a) {
          const { children: r, className: c } = a;
          return r
            ? t.createElement(
                "span",
                i(
                  {
                    className: (0, n.A)(c, "c-base_entity__subtext"),
                  },
                  (0, s.A)(a)
                ),
                r
              )
            : null;
        }
        _(d, "BaseEntitySubtext"), (d.displayName = "BaseEntitySubtext");
        const o = d;
      },
      3534100833: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => a,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(8011352381),
          i = e(1596328926);
        function d() {
          return (
            (d =
              Object.assign ||
              function (r) {
                for (var c = 1; c < arguments.length; c++) {
                  var u = arguments[c];
                  for (var l in u)
                    Object.prototype.hasOwnProperty.call(u, l) && (r[l] = u[l]);
                }
                return r;
              }),
            d.apply(this, arguments)
          );
        }
        _(d, "_extends");
        function o(r) {
          const {
            children: c = null,
            className: u = "",
            multiline: l = !1,
            inline: m = !1,
            breakWords: v = !0,
            withTruncationTooltip: E = !1,
          } = r;
          if (!c) return null;
          const T = l ? 2 : 1;
          return m
            ? t.createElement(
                "span",
                d(
                  {
                    className: (0, n.A)(u, "c-base_entity__text"),
                  },
                  (0, i.A)(r)
                ),
                c
              )
            : t.createElement(
                "span",
                d(
                  {
                    className: (0, n.A)(u, "c-base_entity__text"),
                  },
                  (0, i.A)(r)
                ),
                t.createElement(
                  s.A,
                  {
                    lines: T,
                    breakWords: v,
                    withTooltip: E,
                  },
                  c
                )
              );
        }
        _(o, "BaseEntityText"), (o.displayName = "BaseEntityText");
        const a = o;
      },
      1464713483: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => u,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(7715417323),
          i = e(3877384923),
          d = e(1596328926);
        function o() {
          return (
            (o =
              Object.assign ||
              function (l) {
                for (var m = 1; m < arguments.length; m++) {
                  var v = arguments[m];
                  for (var E in v)
                    Object.prototype.hasOwnProperty.call(v, E) && (l[E] = v[E]);
                }
                return l;
              }),
            o.apply(this, arguments)
          );
        }
        _(o, "_extends");
        const a = _(
            (l, m, v, E) => !(l !== i.ny.medium || !v || E || m),
            "shouldVerticallyCenter"
          ),
          r = {
            className: "c-base_entity__avatar",
          },
          c = _((l) => {
            const {
                size: m,
                style: v = i.pI.normal,
                text: E = null,
                className: T = "",
                subtext: g = null,
                avatar: I = s.A,
                metadata: f = null,
                forwardedRef: y = null,
              } = l,
              M = I(r),
              p = !!M;
            return t.createElement(
              "div",
              o(
                {
                  className: (0, n.A)(
                    T,
                    "c-base_entity",
                    `c-base_entity--${m}`,
                    {
                      "c-base_entity--has-avatar": p,
                      "c-base_entity--dim": v === i.pI.dim,
                      "c-base_entity--vertically-center": a(m, g, p, f),
                    }
                  ),
                },
                (0, d.A)(l),
                {
                  ref: y,
                }
              ),
              M,
              t.createElement(
                "div",
                {
                  className: "c-base_entity__text-contents",
                },
                E,
                g,
                f
              )
            );
          }, "BaseEntity");
        c.displayName = "BaseEntity";
        const u = c;
      },
      5273017660: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => d,
          CG: () => i.A,
          Q: () => n.A,
          sT: () => s.A,
        });
        var t = e(1464713483),
          n = e(51460783),
          s = e(161084047),
          i = e(3534100833);
        const d = t.A;
      },
      2671211451: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => l,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(7715417323),
          i = e(8011352381),
          d = e(3877384923),
          o = e(1596328926);
        function a() {
          return (
            (a =
              Object.assign ||
              function (m) {
                for (var v = 1; v < arguments.length; v++) {
                  var E = arguments[v];
                  for (var T in E)
                    Object.prototype.hasOwnProperty.call(E, T) && (m[T] = E[T]);
                }
                return m;
              }),
            a.apply(this, arguments)
          );
        }
        _(a, "_extends");
        const r = _((m) => {
          let {
            children: v,
            truncate: E = !1,
            truncateWidth: T,
            withTruncationTooltip: g = !1,
          } = m;
          const I = (0, t.useMemo)(
            () => ({
              maxWidth: T || void 0,
            }),
            [T]
          );
          if (!E) return t.createElement("span", null, v);
          let f;
          return (
            T
              ? (f = t.createElement(
                  "span",
                  {
                    className: "c-base_inline_entity__inline_wrapper",
                    style: I,
                  },
                  v
                ))
              : (f = t.createElement(
                  "span",
                  null,
                  t.createElement(
                    i.A,
                    {
                      lines: 1,
                      withTooltip: g,
                    },
                    v
                  )
                )),
            f
          );
        }, "MaybeTruncate");
        r.displayName = "MaybeTruncate";
        const c = {
          className: "c-base_inline_entity__avatar",
          "data-qa": "base_inline_entity__avatar",
        };
        let u = _(
          class extends t.Component {
            render() {
              const {
                  className: v,
                  avatar: E = s.A,
                  primaryContent: T,
                  secondaryContent: g,
                  style: I = d.pI.normal,
                  truncate: f = !1,
                  truncateWidth: y,
                  withTruncationTooltip: M = !1,
                } = this.props,
                p = E(c),
                O = !!p;
              return t.createElement(
                "span",
                a(
                  {
                    className: (0, n.A)(v, "c-base_inline_entity", {
                      "c-base_inline_entity--has_avatar": O,
                      "c-base_inline_entity--truncate_block": f && !y,
                      "c-base_inline_entity--truncate_inline": f && y,
                      "c-base_inline_entity--dim": I === d.pI.dim,
                      "c-base_inline_entity--highlight-dark":
                        I === d.pI.highlightDark,
                      "c-base_inline_entity--highlight-dim":
                        I === d.pI.highlightDim,
                      "c-base_inline_entity--highlight-light":
                        I === d.pI.highlightLight,
                    }),
                  },
                  (0, o.A)(this.props)
                ),
                t.createElement(
                  r,
                  {
                    truncate: f,
                    truncateWidth: y,
                    withTruncationTooltip: M,
                  },
                  p,
                  t.createElement(
                    "span",
                    {
                      className: "c-base_inline_entity__primary_content",
                    },
                    T
                  ),
                  g &&
                    t.createElement(
                      "span",
                      {
                        className: "c-base_inline_entity__secondary_content",
                      },
                      g
                    )
                )
              );
            }
          },
          "BaseInlineEntity"
        );
        u.displayName = "BaseInlineEntity";
        const l = u;
      },
      2828836153: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => a,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(3877384923),
          i = e(1596328926);
        function d() {
          return (
            (d =
              Object.assign ||
              function (r) {
                for (var c = 1; c < arguments.length; c++) {
                  var u = arguments[c];
                  for (var l in u)
                    Object.prototype.hasOwnProperty.call(u, l) && (r[l] = u[l]);
                }
                return r;
              }),
            d.apply(this, arguments)
          );
        }
        _(d, "_extends");
        let o = _(
          class extends t.Component {
            render() {
              const {
                className: c,
                ariaLabel: u,
                primaryContent: l,
                secondaryContent: m,
                size: v = s.ny.medium,
                style: E = s.pI.normal,
                padding: T = s.FK.normal,
              } = this.props;
              return t.createElement(
                "div",
                d(
                  {
                    className: (0, n.A)(
                      c,
                      "c-base_list_entity",
                      `c-base_list_entity--${v}`,
                      {
                        "c-base_list_entity--dim": E === s.pI.dim,
                        "c-base_list_entity--highlight-dark":
                          E === s.pI.highlightDark,
                        "c-base_list_entity--highlight-dim":
                          E === s.pI.highlightDim,
                        "c-base_list_entity--highlight-light":
                          E === s.pI.highlightLight,
                        "c-base_list_entity--no-pad": T === s.FK.none,
                      }
                    ),
                  },
                  (0, i.A)(this.props),
                  {
                    "aria-label": u,
                  }
                ),
                t.createElement(
                  "div",
                  {
                    className: "c-base_list_entity__primary_content",
                  },
                  l
                ),
                m &&
                  t.createElement(
                    "div",
                    {
                      className: "c-base_list_entity__secondary_content",
                    },
                    m
                  )
              );
            }
          },
          "BaseListEntity"
        );
        o.displayName = "BaseListEntity";
        const a = o;
      },
      3877384923: (W, A, e) => {
        "use strict";
        e.d(A, {
          FK: () => s,
          P: () => d,
          RG: () => t,
          ny: () => i,
          pI: () => n,
        });
        const t = {
            xxlarge: 102,
            xlarge: 72,
            large: 56,
            medium: 36,
            small: 20,
            inline: 14,
          },
          n = {
            normal: "normal",
            dim: "dim",
            highlightDark: "highlight-dark",
            highlightDim: "highlight-dim",
            highlightLight: "highlight-light",
          },
          s = {
            normal: "12px",
            none: "0",
          },
          i = {
            small: "small",
            medium: "medium",
          },
          d = {
            true: !0,
            bestOnly: "best_only",
            false: !1,
          };
      },
      3989454579: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => v,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(7715417323),
          i = e(5617110048),
          d = e(3753517560),
          o = e(2201208793),
          a = e(4882164428),
          r = e(1224315998),
          c = e(2595238443),
          u = e(8869734951);
        function l() {
          return (
            (l =
              Object.assign ||
              function (E) {
                for (var T = 1; T < arguments.length; T++) {
                  var g = arguments[T];
                  for (var I in g)
                    Object.prototype.hasOwnProperty.call(g, I) && (E[I] = g[I]);
                }
                return E;
              }),
            l.apply(this, arguments)
          );
        }
        _(l, "_extends");
        const m = t.forwardRef((E, T) => {
          let {
            className: g,
            isRequired: I = !1,
            "aria-disabled": f,
            indeterminate: y = !1,
            checked: M,
            hasKeyboardFocus: p,
            unstyled: O,
            autoClogProps: C,
            onChange: h,
            focusOnMount: D,
            ...P
          } = E;
          const S = (0, t.useRef)(null),
            [b, K] = (0, t.useState)(!1);
          (0, t.useEffect)(() => {
            if (y && M == null)
              throw new Error(
                "The indeterminate prop is only supported for the controlled Checkbox. Please provide the checked prop."
              );
            S.current && (S.current.indeterminate = y);
          }, [M, y]),
            (0, t.useEffect)(() => {
              if (D) {
                var F;
                (F = S.current) === null || F === void 0 || F.focus();
              }
            }, [D]);
          const x = (0, t.useCallback)(
              (F) => {
                M === void 0 && C && K(F.target.checked), h == null || h(F);
              },
              [C, M, h]
            ),
            B = (0, a.f)(o.j.Checkbox),
            U = O
              ? (0, n.A)("c-input_unstyled_checkbox", g, B, {
                  "c-input_unstyled_checkbox--focus-visible": p,
                  "c-input_unstyled_checkbox--checked": M,
                })
              : (0, n.A)("c-input_checkbox", g, B, {
                  "c-input_checkbox--focus-visible": p,
                  "c-input_checkbox--disabled": f,
                }),
            R = t.createElement(
              "input",
              l({}, P, (0, c.A)(P), {
                "aria-disabled": f,
                "aria-checked": y ? "mixed" : void 0,
                checked: M,
                type: "checkbox",
                required: I,
                className: U,
                ref: (0, u.P)(S, T),
                onChange: f ? s.A : x,
              })
            ),
            G = M !== void 0 ? M : b,
            H = (0, t.useMemo)(
              () => ({
                onChange: {
                  action: G ? r.UiAction.UNCHECK : r.UiAction.CHECK,
                },
              }),
              [G]
            );
          return C
            ? t.createElement(
                i.A,
                {
                  autoClogProps: C,
                  actionProps: H,
                  elementType: r.ElementType.CHECKBOX,
                },
                R
              )
            : R;
        });
        m.displayName = "Checkbox";
        const v = (0, d.A)(m);
      },
      5797272849: (W, A, e) => {
        "use strict";
        e.d(A, {
          E: () => t,
        });
        const t = {
          small: "c-form--small",
          large: "c-form--large",
        };
      },
      3391133100: (W, A, e) => {
        "use strict";
        e.d(A, {
          Es: () => s,
          Yk: () => d,
          r7: () => a,
          r9: () => i,
          zI: () => o,
        });
        var t = e(735940183);
        const n = new t.Ay("form_inputs");
        function s(r, c) {
          return `${r}_${c}`;
        }
        _(s, "getInputBuddyId");
        function i() {
          return Math.random().toString(36).substring(2, 10);
        }
        _(i, "getRandomId");
        const d = _((r) => {
            const c = r.filter((u) => u);
            if (c.length !== 0) return c.join(" ");
          }, "makeAriaComboIds"),
          o = _(
            (r) =>
              n.t(
                "You can\u2019t enter more than {maxCharacterLimit, plural, =1 {# character} other {# characters}}.",
                {
                  maxCharacterLimit: r,
                }
              ),
            "getMaximumCharacterErrorText"
          ),
          a = _(
            (r) =>
              n.t(
                "You must enter at least {minCharacterLimit, plural, =1 {# character} other {# characters}}.",
                {
                  minCharacterLimit: r,
                }
              ),
            "getMinimumCharacterErrorText"
          );
      },
      2660476100: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => s,
        });
        var t = e(5824283093),
          n = e(5255740490);
        function s(i) {
          let { children: d, className: o, id: a } = i;
          return d
            ? t.createElement(
                "div",
                {
                  className: (0, n.A)("c-hint", o),
                  id: a,
                },
                d
              )
            : null;
        }
        _(s, "Hint");
      },
      7138682671: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => c,
          Q: () => o,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(735940183);
        function i() {
          return (
            (i =
              Object.assign ||
              function (u) {
                for (var l = 1; l < arguments.length; l++) {
                  var m = arguments[l];
                  for (var v in m)
                    Object.prototype.hasOwnProperty.call(m, v) && (u[v] = m[v]);
                }
                return u;
              }),
            i.apply(this, arguments)
          );
        }
        _(i, "_extends");
        const d = new s.Ay("app_dialog"),
          o = {
            block: "block",
            inline: "inline",
          };
        var a;
        let r = _(
          class extends (a = t.Component) {
            getCursor() {
              const { cursor: l, htmlFor: m, isDisabled: v } = this.props;
              return v ? null : typeof l > "u" && m ? "pointer" : l;
            }
            renderOptionalTextMaybe() {
              const { optional: l } = this.props,
                m = d.t("(optional)");
              return l
                ? t.createElement(
                    "span",
                    {
                      className: "c-label__optional_tag",
                      "data-qa-label-optional-tag": !0,
                    },
                    m
                  )
                : null;
            }
            renderSubtextMaybe() {
              const { subtext: l } = this.props;
              return l
                ? t.createElement(
                    "span",
                    {
                      className: "c-label__subtext",
                      "data-qa-label-subtext": !0,
                    },
                    l
                  )
                : null;
            }
            render() {
              const {
                  className: l,
                  cursor: m,
                  htmlFor: v,
                  optional: E,
                  subtext: T,
                  text: g,
                  type: I,
                  isDisabled: f,
                  dataQaLabel: y,
                  ...M
                } = this.props,
                p = (0, n.A)("c-label", l, {
                  "c-label--block": I === o.block,
                  "c-label--inline": I === o.inline,
                  "c-label--with_subtext": T,
                  "c-label--pointer": this.getCursor() === "pointer",
                  "c-label--disabled": f,
                  "c-label--with_formatted_text": typeof g != "string",
                });
              return t.createElement(
                "label",
                i({}, M, {
                  htmlFor: v,
                  className: p,
                  "data-qa-label": y,
                  "data-qa-label-type": I,
                }),
                t.createElement(
                  "span",
                  {
                    className: "c-label__text",
                    "data-qa-label-text": !0,
                  },
                  g,
                  this.renderOptionalTextMaybe(),
                  this.renderSubtextMaybe()
                ),
                t.createElement(
                  "span",
                  {
                    className: "c-label__children",
                    "data-qa-label-children": !0,
                  },
                  this.props.children
                )
              );
            }
          },
          "Label"
        );
        (r.displayName = "Label"),
          (r.defaultProps = {
            children: null,
            className: null,
            cursor: void 0,
            htmlFor: null,
            optional: !1,
            subtext: null,
            type: "block",
            isDisabled: !1,
            dataQaLabel: "true",
          });
        const c = r;
      },
      5375115868: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => r,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(5617110048),
          i = e(1224315998);
        function d() {
          return (
            (d =
              Object.assign ||
              function (c) {
                for (var u = 1; u < arguments.length; u++) {
                  var l = arguments[u];
                  for (var m in l)
                    Object.prototype.hasOwnProperty.call(l, m) && (c[m] = l[m]);
                }
                return c;
              }),
            d.apply(this, arguments)
          );
        }
        _(d, "_extends");
        const o = {
          onChange: {
            action: i.UiAction.CLICK,
          },
        };
        let a = _(
          class extends t.PureComponent {
            componentDidMount() {
              const { focusOnMount: u, autoFocus: l } = this.props;
              (u || l) && this.focus();
            }
            componentDidUpdate() {
              const { autoFocus: u } = this.props;
              u && this.focus();
            }
            focus() {
              var u;
              (u = this.inputRef.current) === null || u === void 0 || u.focus();
            }
            render() {
              const {
                  className: u,
                  autoClogProps: l,
                  autoFocus: m,
                  focusOnMount: v,
                  ...E
                } = this.props,
                T = (0, n.A)("c-input_radio", u),
                g = t.createElement(
                  "input",
                  d({}, E, {
                    className: T,
                    ref: this.inputRef,
                    type: "radio",
                  })
                );
              return l
                ? t.createElement(
                    s.A,
                    {
                      autoClogProps: l,
                      actionProps: o,
                      elementType: i.ElementType.RADIO,
                    },
                    g
                  )
                : g;
            }
            constructor(u) {
              super(u), (this.inputRef = t.createRef());
            }
          },
          "Radio"
        );
        (a.displayName = "Radio"),
          (a.defaultProps = {
            autoFocus: !1,
          });
        const r = a;
      },
      9205344153: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => T,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(3708320478),
          i = e(5166368300),
          d = e(2322735331),
          o = e(3514889545),
          a = e(735940183);
        const r = new a.Ay("form_inputs"),
          c = {
            inline: "inline",
            multiline: "multiline",
          },
          u = _((g, I) => g > I, "isCurrentCountInvalid"),
          l = _((g, I) => I - g, "getCharacterCount"),
          m = _(
            (g, I, f) => (!f || g >= f ? l(g, I) : ""),
            "getCharacterCountDisplay"
          ),
          v = _((g) => g.toString().length, "getCharacterCountLength");
        let E = _(
          class extends t.Component {
            getSnapshotBeforeUpdate(I) {
              if (I.currentCount !== this.props.currentCount) {
                this.updateCharactersRemainingMessage(
                  this.props.currentCount,
                  this.props.maxCharacterLimit
                );
                const f = l(
                    this.props.currentCount,
                    this.props.maxCharacterLimit
                  ),
                  y = v(f);
                (this.shouldReadCharactersRemainingMessage = !1),
                  this.state.characterCountLength !== y &&
                    this.setCharacterCountLength(y);
              }
              return null;
            }
            componentDidUpdate(I, f) {
              this.props.type === c.inline &&
                f.characterCountLength !== this.state.characterCountLength &&
                this.measureCountWidth();
            }
            onBlur() {
              (this.shouldReadCharactersRemainingMessage = !0),
                this.setState(() => ({
                  hasFocus: !1,
                }));
            }
            onFocus() {
              this.setState(() => ({
                hasFocus: !0,
              }));
            }
            getCharacterCountWidth() {
              return this.characterCountWidth || this.measureCountWidth();
            }
            setCharacterCountLength(I) {
              this.setState(() => ({
                characterCountLength: I,
              }));
            }
            setCharactersRemainingMessage(I, f) {
              const y = this.makeCharactersRemainingMessage(I, f);
              this.setState(() => ({
                charactersRemainingMessage: y,
              }));
            }
            setCharactersRemainingRef(I) {
              this.charactersRemainingElement = I;
            }
            makeCharactersRemainingMessage(I, f) {
              const y = l(I, f);
              return r.t(
                "{count, plural, =1 {# character} other {# characters}} remaining",
                {
                  count: y,
                }
              );
            }
            measureCountWidth() {
              const I =
                (this.charactersRemainingElement &&
                  this.charactersRemainingElement.offsetWidth) ||
                0;
              return (this.characterCountWidth = I), I;
            }
            renderCharactersRemaining() {
              if (!this.state.hasFocus) return null;
              const {
                  currentCount: I,
                  maxCharacterLimit: f,
                  counterMinimumCharacters: y,
                } = this.props,
                M = m(I, f, y);
              return t.createElement(
                "div",
                {
                  "aria-hidden": "true",
                  className: "c-input_character_count__characters-remaining",
                  ref: this.setCharactersRemainingRef,
                },
                M
              );
            }
            render() {
              const {
                  className: I,
                  currentCount: f,
                  maxCharacterLimit: y,
                  children: M,
                  isDisabled: p,
                  size: O,
                  type: C,
                  id: h,
                } = this.props,
                D = (0, n.A)(I, "c-input_character_count", {
                  "c-input_character_count--multiline": C === c.multiline,
                  "c-input_character_count--large": O === i.F.large,
                  "c-input_character_count--small": O === i.F.small,
                  "c-input_character_count--invalid":
                    this.state.hasFocus && u(f, y),
                  "c-input_character_count--disabled": p,
                }),
                P =
                  this.shouldReadCharactersRemainingMessage &&
                  t.createElement(
                    "div",
                    {
                      id: h,
                      hidden: !0,
                    },
                    this.state.charactersRemainingMessage
                  );
              let S;
              return (
                this.shouldReadCharactersRemainingMessage ||
                  (S = t.createElement(s.A, {
                    assertive: !0,
                    message: this.state.charactersRemainingMessage,
                  })),
                t.createElement(
                  "div",
                  {
                    role: "presentation",
                    className: D,
                    "data-qa": "input_character_count",
                    onFocus: this.onFocus,
                    onBlur: this.onBlur,
                  },
                  M,
                  this.renderCharactersRemaining(),
                  S,
                  P
                )
              );
            }
            constructor(I) {
              super(I);
              const f = this.makeCharactersRemainingMessage(
                I.currentCount,
                I.maxCharacterLimit
              );
              (this.state = {
                characterCountLength: 0,
                charactersRemainingMessage: f,
                hasFocus: !1,
              }),
                (this.characterCountWidth = 0),
                (this.shouldReadCharactersRemainingMessage = !0),
                (0, d.v)(this, [
                  "setCharactersRemainingRef",
                  "setCharactersRemainingMessage",
                  "onFocus",
                  "onBlur",
                ]),
                (this.updateCharactersRemainingMessage = (0, o.A)(
                  this.setCharactersRemainingMessage,
                  1500
                ));
            }
          },
          "CharacterCount"
        );
        (E.displayName = "CharacterCount"),
          (E.defaultProps = {
            className: void 0,
            currentCount: 0,
            isDisabled: !1,
            type: c.inline,
            size: i.F.medium,
            counterMinimumCharacters: 0,
            id: void 0,
          });
        const T = E;
      },
      2219904496: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => P,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(2003990933),
          i = e(7715417323),
          d = e(581167618),
          o = e(3391133100),
          a = e(2660476100),
          r = e(9205344153),
          c = e(5166368300),
          u = e(1610251172);
        const l = {
            small: "small",
            medium: "medium",
            large: "large",
          },
          m = _((S) => {
            let { size: b, icon: K, children: x } = S;
            const B = (0, n.A)("c-input_text_icon", {
                "c-input_text_icon--small": b === l.small,
                "c-input_text_icon--large": b === l.large,
              }),
              U = (0, n.A)("c-input_text_icon__icon", {
                "c-input_text_icon__icon--small": b === l.small,
                "c-input_text_icon__icon--large": b === l.large,
              });
            return t.createElement(
              "div",
              {
                className: B,
              },
              t.createElement(u.A, {
                type: K,
                className: U,
                size: "inherit",
              }),
              x
            );
          }, "TextInputIcon");
        m.displayName = "TextInputIcon";
        const v = t.memo(m);
        let E = _(
          class extends t.PureComponent {
            getOverlayText() {
              return this.props.value || this.props.placeholder;
            }
            renderOverlay() {
              const { size: b, prefix: K, suffix: x } = this.props,
                B = (0, n.A)(
                  "c-input_text_overlay",
                  {
                    "c-input_text_overlay--large": b === c.F.large,
                  },
                  this.props.className
                );
              return t.createElement(
                "div",
                {
                  className: B,
                  "data-overlay-prefix": K,
                  "data-overlay-suffix": x,
                  "aria-hidden": "true",
                  "data-qa": "text_overlay_suffix",
                },
                this.getOverlayText()
              );
            }
            render() {
              const { children: b, suffix: K } = this.props;
              return t.createElement(
                "div",
                {
                  className: "position_relative",
                  "aria-describedby": `Text input with ${K} appended to the text value.`,
                },
                this.renderOverlay(),
                b
              );
            }
          },
          "TextInputOverlay"
        );
        (E.displayName = "TextInputOverlay"),
          (E.defaultProps = {
            className: "",
            placeholder: "",
            size: c.F.medium,
            value: "",
            prefix: "",
            suffix: "",
          });
        const T = E;
        var g = e(434544446),
          I = e.n(g),
          f = e(647040695);
        function y(S, b) {
          const K = M(S);
          return b && K.length
            ? K.replace((0, f.A)(), "E").replace(I()(), "E").length
            : K.length;
        }
        _(y, "getTextLength");
        function M(S) {
          return S == null ? "" : typeof S == "string" ? S : String(S);
        }
        _(M, "coerceValueToString");
        var p = e(9665283624),
          O = e(2322735331);
        function C() {
          return (
            (C =
              Object.assign ||
              function (S) {
                for (var b = 1; b < arguments.length; b++) {
                  var K = arguments[b];
                  for (var x in K)
                    Object.prototype.hasOwnProperty.call(K, x) && (S[x] = K[x]);
                }
                return S;
              }),
            C.apply(this, arguments)
          );
        }
        _(C, "_extends");
        const h = 12;
        let D = _(
          class extends t.PureComponent {
            componentDidMount() {
              this.maybeFocusAndSelectOnMount(this.props);
            }
            componentDidUpdate(b, K) {
              (this.props.value !== b.value ||
                this.state.isFocused !== K.isFocused) &&
                this.getTextStyle(),
                this.props.value !== b.value &&
                  !this.state.everReceivedUserInput &&
                  this.setEverReceivedUserInput(),
                this.maybeFocusAndSelectOnMount(b);
            }
            onBlur(b) {
              const { onBlur: K } = this.props;
              this.setState(() => ({
                isFocused: !1,
              })),
                K && K(b);
            }
            onFocus(b) {
              const { onFocus: K } = this.props;
              this.setState(() => ({
                isFocused: !0,
                everFocused: !0,
              })),
                K && K(b);
            }
            getPrefixStyle() {
              const { size: b, prefix: K } = this.props;
              if (!K) return;
              let x;
              const U = document.createElement("canvas").getContext("2d");
              return (
                U &&
                  (b === c.F.medium
                    ? ((U.font = "15px Slack-Lato"),
                      (x = U.measureText(K).width + h))
                    : b === c.F.small
                    ? ((U.font = "13px Slack-Lato"),
                      (x = U.measureText(K).width + h))
                    : ((U.font = "18px Slack-Lato"),
                      (x = U.measureText(K).width + h))),
                {
                  paddingLeft: x,
                }
              );
            }
            getTextStyle() {
              var b;
              const { maxCharacterLimit: K } = this.props;
              if (!K) {
                this.setTextStyle({});
                return;
              }
              const B = {
                paddingRight:
                  (b = this.characterCount) === null || b === void 0
                    ? void 0
                    : b.getCharacterCountWidth(),
              };
              this.setTextStyle(B);
            }
            setTextStyle(b) {
              this.setState(() => ({
                textStyle: b,
              }));
            }
            setEverReceivedUserInput() {
              this.setState(() => ({
                everReceivedUserInput: !0,
              }));
            }
            focus() {
              this.input.current && this.input.current.focus();
            }
            maybeFocusAndSelectOnMount(b) {
              const { focusOnMount: K, forceSelectAll: x } = this.props;
              (this.state.everFocused && K && b && b.focusOnMount === K) ||
                !this.input ||
                !this.input.current ||
                !K ||
                (this.props.focusOnMount && this.props.preventScrollOnFocus
                  ? this.input.current.focus({
                      preventScroll: !0,
                    })
                  : this.input.current.focus(),
                x && this.input.current.select());
            }
            getIsInputLengthTooShort() {
              const {
                  emojisShouldCountAsSingleCharacter: b,
                  isRequired: K,
                  minCharacterLimit: x,
                  value: B,
                } = this.props,
                { everReceivedUserInput: U } = this.state;
              if (!U || x == null) return !1;
              const R = y(B, b);
              return !K && R === 0 ? !1 : R < x;
            }
            getIsInputLengthTooLong() {
              const {
                maxCharacterLimit: b,
                value: K,
                emojisShouldCountAsSingleCharacter: x,
              } = this.props;
              return b == null ? !1 : y(K, x) > b;
            }
            renderDeprecatedErrorMaybe() {
              const {
                errorLevel: b,
                errorText: K,
                errorType: x,
                minCharacterLimit: B,
                maxCharacterLimit: U,
              } = this.props;
              return K
                ? t.createElement(
                    d.Ay,
                    {
                      id: this.state.errorId,
                      level: b,
                      type: x,
                      className: "margin_bottom_100",
                      "data-qa": "form_text_input_alert_on_error_text",
                    },
                    K
                  )
                : this.getIsInputLengthTooLong()
                ? t.createElement(
                    d.Ay,
                    {
                      id: this.state.errorId,
                      level: d.A_.error,
                      type: x,
                      className: "margin_bottom_100",
                    },
                    (0, o.zI)(U)
                  )
                : this.getIsInputLengthTooShort()
                ? t.createElement(
                    d.Ay,
                    {
                      id: this.state.errorId,
                      level: d.A_.error,
                      type: x,
                      className: "margin_bottom_100",
                    },
                    (0, o.r7)(B)
                  )
                : null;
            }
            renderErrorMaybe() {
              const {
                errorText: b,
                minCharacterLimit: K,
                maxCharacterLimit: x,
              } = this.props;
              return b
                ? t.createElement(
                    p.A,
                    {
                      id: this.state.errorId,
                      className: "margin_bottom_100",
                      "data-qa": "form-text-inline-alert",
                    },
                    b
                  )
                : this.getIsInputLengthTooLong()
                ? t.createElement(
                    p.A,
                    {
                      id: this.state.errorId,
                      className: "margin_bottom_100",
                      "data-qa": "form-text-max-char-alert",
                    },
                    (0, o.zI)(x)
                  )
                : this.getIsInputLengthTooShort()
                ? t.createElement(
                    p.A,
                    {
                      id: this.state.errorId,
                      className: "margin_bottom_100",
                      "data-qa": "form-text-max-char-alert",
                    },
                    (0, o.r7)(K)
                  )
                : null;
            }
            renderHintMaybe() {
              const { hintText: b } = this.props;
              return b
                ? t.createElement(
                    a.A,
                    {
                      id: this.state.hintId,
                      "data-qa": "form-text-hint",
                    },
                    b
                  )
                : null;
            }
            renderTextInput() {
              const {
                  className: b,
                  errorId: K,
                  errorLevel: x,
                  errorText: B,
                  errorType: U,
                  hintId: R,
                  hintText: G,
                  id: H,
                  isRequired: F,
                  isInvalid: V,
                  labelId: X,
                  name: q,
                  onBlur: oe,
                  onChange: z,
                  onCopy: Ae,
                  forceSelectAll: ae,
                  onFocus: de,
                  size: ve,
                  prefix: Se,
                  suffix: Ee,
                  maxCharacterLimit: be,
                  minCharacterLimit: Ce,
                  emojisShouldCountAsSingleCharacter: Z,
                  counterMinimumCharacters: $,
                  icon: N,
                  focusOnMount: L,
                  useInlineAlert: w,
                  showError: k,
                  inputRef: J,
                  preventScrollOnFocus: ee,
                  ariaDescribedById: ne,
                  autoComplete: pe,
                  type: Me,
                  readOnly: ke,
                  ...ge
                } = this.props,
                fe =
                  !!B ||
                  this.getIsInputLengthTooLong() ||
                  this.getIsInputLengthTooShort() ||
                  V,
                re = (0, n.A)(
                  {
                    [`c-input_text--with_${x}`]: fe,
                    "c-input_text--with_hint": G,
                    "c-input_text--with_icon": N,
                  },
                  b
                ),
                le = (0, o.Yk)([X, fe ? this.state.errorId : null]),
                Re = (0, o.Yk)([
                  ne,
                  this.state.hintId,
                  this.characterCounterId,
                ]),
                ye = {
                  ...this.state.textStyle,
                  ...this.getPrefixStyle(),
                };
              return t.createElement(
                c.A,
                C({}, ge, {
                  style: ye,
                  onFocus: this.onFocus,
                  onBlur: this.onBlur,
                  ariaDescribedby: Re,
                  isInvalid: fe,
                  ariaLabelledby: le,
                  ariaRequired: F,
                  className: re,
                  id: H,
                  name: q,
                  onChange: z,
                  onCopy: Ae,
                  forceSelectAll: ae,
                  ref: this.input,
                  size: ve,
                  autoComplete: pe,
                  type: Me,
                  readOnly: ke ?? void 0,
                })
              );
            }
            renderWrappedTextMaybe() {
              const {
                prefix: b,
                suffix: K,
                value: x,
                placeholder: B,
                maxCharacterLimit: U,
                counterMinimumCharacters: R,
                size: G,
                isDisabled: H,
                icon: F,
              } = this.props;
              let V = this.renderTextInput();
              if (U) {
                const X = y(x, this.props.emojisShouldCountAsSingleCharacter);
                V = t.createElement(
                  r.A,
                  {
                    id: this.characterCounterId,
                    currentCount: X,
                    isDisabled: H,
                    maxCharacterLimit: U,
                    counterMinimumCharacters: R,
                    size: G,
                    ref: (q) => {
                      this.characterCount = q;
                    },
                  },
                  V
                );
              }
              return (
                (b || K) &&
                  (V = t.createElement(
                    T,
                    {
                      className: F && "c-input_text_overlay--icon",
                      placeholder: B,
                      size: G,
                      prefix: b,
                      suffix: K,
                      value: x ?? void 0,
                    },
                    V
                  )),
                F &&
                  (V = t.createElement(
                    v,
                    {
                      icon: F,
                      size: G,
                    },
                    V
                  )),
                V
              );
            }
            render() {
              const b = this.props.useInlineAlert
                ? this.renderErrorMaybe()
                : this.renderDeprecatedErrorMaybe();
              return t.createElement(
                "div",
                {
                  "data-qa-formtext": !0,
                  onMouseEnter: this.props.onMouseEnter,
                  onMouseLeave: this.props.onMouseLeave,
                },
                this.renderWrappedTextMaybe(),
                this.props.showError && b,
                this.renderHintMaybe()
              );
            }
            constructor(b) {
              super(b), (0, O.v)(this, ["onFocus", "onBlur", "getPrefixStyle"]);
              const { id: K } = b;
              (this.state = {
                errorId: (0, s.A)(this.props, "errorId", (0, o.Es)(K, "error")),
                everReceivedUserInput: !1,
                hintId: (0, s.A)(this.props, "hintId", (0, o.Es)(K, "hint")),
                isFocused: !1,
                everFocused: !1,
                textStyle: {},
              }),
                b.maxCharacterLimit &&
                  (this.characterCounterId = (0, o.Es)(K, "character-count")),
                (this.input = b.inputRef || t.createRef());
            }
          },
          "FormTextInput"
        );
        (D.displayName = "FormTextInput"),
          (D.defaultProps = {
            className: null,
            errorId: void 0,
            errorLevel: d.A_.error,
            errorText: null,
            errorType: d.QE.nestedBox,
            useInlineAlert: !1,
            hintId: void 0,
            hintText: null,
            isDisabled: !1,
            isInvalid: !1,
            isRequired: !1,
            labelId: null,
            maxCharacterLimit: null,
            minCharacterLimit: null,
            counterMinimumCharacters: 0,
            emojisShouldCountAsSingleCharacter: !1,
            onBlur: i.A,
            onChange: i.A,
            onCopy: i.A,
            forceSelectAll: !1,
            readOnly: !1,
            onFocus: i.A,
            placeholder: void 0,
            size: c.F.medium,
            prefix: void 0,
            suffix: null,
            value: "",
            icon: void 0,
            focusOnMount: !1,
            preventScrollOnFocus: !1,
            showError: !0,
            inputRef: void 0,
            ariaDescribedById: void 0,
            onMouseEnter: i.A,
            onMouseLeave: i.A,
            autoComplete: "off",
            type: void 0,
            spellCheck: !1,
            min: 0,
            max: 0,
            autoCorrect: void 0,
            ariaLabel: void 0,
            width: 0,
            autoClogProps: void 0,
            autoFocus: !1,
            role: void 0,
            onPaste: i.A,
            onKeyDown: i.A,
            onCompositionStart: i.A,
            onCompositionEnd: i.A,
          });
        const P = D;
      },
      8472205500: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => g,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(2003990933),
          i = e(7715417323),
          d = e(5617110048),
          o = e(581167618),
          a = e(3391133100),
          r = e(2660476100),
          c = e(9205344153),
          u = e(8452232783),
          l = e(9665283624),
          m = e(2322735331),
          v = e(1224315998);
        function E() {
          return (
            (E =
              Object.assign ||
              function (I) {
                for (var f = 1; f < arguments.length; f++) {
                  var y = arguments[f];
                  for (var M in y)
                    Object.prototype.hasOwnProperty.call(y, M) && (I[M] = y[M]);
                }
                return I;
              }),
            E.apply(this, arguments)
          );
        }
        _(E, "_extends");
        const T = {
          onChange: {
            action: v.UiAction.ENTER_TEXT,
          },
        };
        let g = _(
          class extends t.PureComponent {
            componentDidMount() {
              if ((this.getTextStyle(), this.props.focusOnMount)) {
                var f;
                (f = this.input.current) === null || f === void 0 || f.focus();
              }
            }
            componentDidUpdate(f, y) {
              if (
                ((this.props.value !== f.value ||
                  this.state.isFocused !== y.isFocused) &&
                  this.getTextStyle(),
                this.props.value !== f.value &&
                  !this.state.everReceivedUserInput &&
                  this.setEverReceivedUserInput(),
                this.props.focusOnMount &&
                  f.focusOnMount !== this.props.focusOnMount &&
                  !this.state.isFocused)
              ) {
                var M;
                (M = this.input.current) === null || M === void 0 || M.focus();
              }
            }
            onBlur() {
              const { onBlur: f } = this.props;
              this.setFocus(!1), f && f();
            }
            onFocus() {
              const { onFocus: f } = this.props;
              this.setFocus(!0), f && f();
            }
            getTextStyle() {
              var f;
              const { maxCharacterLimit: y } = this.props;
              if (!y) {
                this.setTextStyle({});
                return;
              }
              const p = {
                paddingRight:
                  (f = this.characterCount) === null || f === void 0
                    ? void 0
                    : f.getCharacterCountWidth(),
              };
              this.setTextStyle(p);
            }
            setCharacterCountRef(f) {
              this.characterCount = f;
            }
            setEverReceivedUserInput() {
              this.setState(() => ({
                everReceivedUserInput: !0,
              }));
            }
            setFocus(f) {
              this.setState(() => ({
                isFocused: f,
              }));
            }
            setInputRef(f) {
              this.input = f;
            }
            setTextStyle(f) {
              this.setState(() => ({
                textStyle: f,
              }));
            }
            blur() {
              this.input.current && this.input.current.blur();
            }
            focus() {
              this.input.current && this.input.current.focus();
            }
            getIsInputLengthTooShort() {
              const {
                  isRequired: f,
                  minCharacterLimit: y,
                  value: M,
                } = this.props,
                { everReceivedUserInput: p } = this.state;
              return !p || y == null || (!f && M.length === 0)
                ? !1
                : M.length < y;
            }
            getIsInputLengthTooLong() {
              const { maxCharacterLimit: f, value: y } = this.props;
              return f == null ? !1 : y.length > f;
            }
            renderDeprecatedErrorMaybe() {
              const {
                showError: f,
                errorLevel: y,
                errorText: M,
                errorType: p,
                isRequired: O,
                maxCharacterLimit: C,
                minCharacterLimit: h,
                value: D,
              } = this.props;
              return f
                ? M
                  ? t.createElement(
                      o.Ay,
                      {
                        id: this.state.errorId,
                        level: y,
                        type: p,
                        className: "margin_bottom_100",
                      },
                      M
                    )
                  : !O && D.length === 0
                  ? null
                  : this.getIsInputLengthTooLong()
                  ? t.createElement(
                      o.Ay,
                      {
                        id: this.state.errorId,
                        level: o.A_.error,
                        type: p,
                        className: "margin_bottom_100",
                      },
                      (0, a.zI)(C)
                    )
                  : this.getIsInputLengthTooShort() && !this.state.isFocused
                  ? t.createElement(
                      o.Ay,
                      {
                        id: this.state.errorId,
                        level: o.A_.error,
                        type: p,
                        className: "margin_bottom_100",
                      },
                      (0, a.r7)(h)
                    )
                  : null
                : null;
            }
            renderErrorMaybe() {
              const {
                showError: f,
                errorText: y,
                isRequired: M,
                maxCharacterLimit: p,
                minCharacterLimit: O,
                value: C,
              } = this.props;
              return f
                ? y
                  ? t.createElement(
                      l.A,
                      {
                        "data-qa": "form-text-area-inline-alert",
                        id: this.state.errorId,
                      },
                      y
                    )
                  : !M && C.length === 0
                  ? null
                  : this.getIsInputLengthTooLong()
                  ? t.createElement(
                      l.A,
                      {
                        id: this.state.errorId,
                        "data-qa": "form-text-area-max-char-alert",
                      },
                      (0, a.zI)(p)
                    )
                  : this.getIsInputLengthTooShort() && !this.state.isFocused
                  ? t.createElement(
                      l.A,
                      {
                        id: this.state.errorId,
                        "data-qa": "form-text-area-min-char-alert",
                      },
                      (0, a.r7)(O)
                    )
                  : null
                : null;
            }
            renderHintMaybe() {
              const { hintText: f } = this.props;
              return f
                ? t.createElement(
                    r.A,
                    {
                      id: this.state.hintId,
                    },
                    f
                  )
                : null;
            }
            renderTextArea() {
              const {
                  className: f,
                  showError: y,
                  errorId: M,
                  errorLevel: p,
                  errorText: O,
                  errorType: C,
                  hintId: h,
                  hintText: D,
                  useInlineAlert: P,
                  id: S,
                  isRequired: b,
                  isInvalid: K,
                  labelId: x,
                  name: B,
                  onChange: U,
                  onFocus: R,
                  onBlur: G,
                  maxCharacterLimit: H,
                  minCharacterLimit: F,
                  focusOnMount: V,
                  autoClogProps: X,
                  ariaDescribedById: q,
                  inputRef: oe,
                  ...z
                } = this.props,
                { textStyle: Ae } = this.state,
                ae =
                  !!O ||
                  this.getIsInputLengthTooLong() ||
                  this.getIsInputLengthTooShort() ||
                  K,
                de = (0, n.A)(
                  {
                    [`c-input_textarea--with_${p}`]: ae,
                    "c-input_textarea--with_hint": D,
                    "c-input_textarea--with_character_count": !!H,
                    "c-input_text--with_inline_alert": P,
                  },
                  f
                ),
                ve = (0, a.Yk)([x, ae ? this.state.errorId : void 0]),
                Se = (0, a.Yk)([q, this.state.hintId, this.characterCounterId]),
                Ee = t.createElement(
                  u.A,
                  E({}, z, {
                    ref: this.setInputRef,
                    style: Ae,
                    ariaDescribedby: Se,
                    isInvalid: ae,
                    ariaLabelledby: ve,
                    ariaRequired: b,
                    className: de,
                    id: S,
                    "data-qa": z["data-qa"] || S,
                    name: B,
                    onChange: U,
                    onFocus: this.onFocus,
                    onBlur: this.onBlur,
                  })
                );
              return X
                ? t.createElement(
                    d.A,
                    {
                      autoClogProps: X,
                      actionProps: T,
                      elementType: v.ElementType.TEXTAREA,
                    },
                    Ee
                  )
                : Ee;
            }
            renderWrappedTextareaMaybe() {
              const {
                value: f,
                maxCharacterLimit: y,
                size: M,
                isDisabled: p,
              } = this.props;
              let O = this.renderTextArea();
              return (
                y &&
                  (O = t.createElement(
                    c.A,
                    {
                      id: this.characterCounterId,
                      ref: this.setCharacterCountRef,
                      currentCount: f == null ? void 0 : f.length,
                      isDisabled: p,
                      maxCharacterLimit: y,
                      type: "multiline",
                      size: M,
                    },
                    O
                  )),
                O
              );
            }
            render() {
              const f = this.props.useInlineAlert
                ? this.renderErrorMaybe()
                : this.renderDeprecatedErrorMaybe();
              return t.createElement(
                "div",
                {
                  "data-qa-formtextarea": !0,
                  className: "c-input_textarea__wrapper",
                },
                this.renderWrappedTextareaMaybe(),
                f,
                this.renderHintMaybe()
              );
            }
            constructor(f) {
              super(f);
              const { id: y } = this.props;
              (0, m.v)(this, [
                "onFocus",
                "onBlur",
                "setInputRef",
                "setCharacterCountRef",
              ]),
                (this.state = {
                  errorId: (0, s.A)(
                    this.props,
                    "errorId",
                    (0, a.Es)(y, "error")
                  ),
                  hintId: (0, s.A)(this.props, "hintId", (0, a.Es)(y, "hint")),
                  isFocused: !1,
                  everReceivedUserInput: !1,
                  textStyle: {},
                }),
                this.props.maxCharacterLimit &&
                  (this.characterCounterId = (0, a.Es)(y, "character-count")),
                (this.input = t.createRef());
            }
          },
          "FormTextareaInput"
        );
        (g.displayName = "FormTextareaInput"),
          (g.defaultProps = {
            className: null,
            showError: !0,
            errorId: void 0,
            errorLevel: o.A_.error,
            errorText: null,
            errorType: o.QE.nestedBox,
            useInlineAlert: !1,
            hintText: null,
            hintId: void 0,
            isDisabled: !1,
            isRequired: !1,
            isInvalid: !1,
            labelId: null,
            onChange: i.A,
            onFocus: i.A,
            onBlur: i.A,
            placeholder: void 0,
            size: u.F.medium,
            value: "",
            maxCharacterLimit: null,
            minCharacterLimit: null,
            focusOnMount: !1,
            autoClogProps: void 0,
            type: void 0,
            ariaDescribedById: void 0,
            role: void 0,
            inputRef: void 0,
          });
      },
      5166368300: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => l,
          F: () => r,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(7715417323),
          i = e(5617110048),
          d = e(5797272849),
          o = e(1224315998);
        function a() {
          return (
            (a =
              Object.assign ||
              function (m) {
                for (var v = 1; v < arguments.length; v++) {
                  var E = arguments[v];
                  for (var T in E)
                    Object.prototype.hasOwnProperty.call(E, T) && (m[T] = E[T]);
                }
                return m;
              }),
            a.apply(this, arguments)
          );
        }
        _(a, "_extends");
        const r = {
          small: "small",
          medium: "medium",
          large: "large",
        };
        var c;
        let u = _(
          class extends (c = t.Component) {
            componentDidMount() {
              if (this.props.focusOnMount) {
                var v;
                (v = this.props.refToForward.current) === null ||
                  v === void 0 ||
                  v.focus();
              }
            }
            onChange(v) {
              this.props.onChange && this.props.onChange(v.target.value);
            }
            onCopy() {
              this.props.onCopy && this.props.onCopy();
            }
            onClick(v) {
              this.props.readOnly &&
                this.props.forceSelectAll &&
                v.currentTarget.select();
            }
            blur() {
              var v;
              (v = this.props.refToForward.current) === null ||
                v === void 0 ||
                v.blur();
            }
            focus() {
              var v;
              (v = this.props.refToForward.current) === null ||
                v === void 0 ||
                v.focus();
            }
            render() {
              const {
                  ariaDescribedby: v,
                  isInvalid: E,
                  ariaLabelledby: T,
                  ariaRequired: g,
                  className: I,
                  id: f,
                  isDisabled: y,
                  name: M,
                  placeholder: p,
                  size: O,
                  type: C,
                  refToForward: h,
                  ariaLabel: D,
                  forceSelectAll: P,
                  focusOnMount: S,
                  autoClogProps: b,
                  autoComplete: K,
                  ...x
                } = this.props,
                B = (0, n.A)(
                  "c-input_text",
                  {
                    "c-input_text--large": O === r.large,
                    "c-input_text--small": O === r.small,
                    "c-input_text--with_error": E,
                    "c-input_text--with_inline_alert": E,
                    [d.E.small]: O === r.small,
                    [d.E.large]: O === r.large,
                  },
                  I
                ),
                U = t.createElement(
                  "input",
                  a({}, x, {
                    "aria-describedby": x["aria-describedby"] || v,
                    "aria-invalid": x["aria-invalid"] || E,
                    "aria-labelledby": x["aria-labelledby"] || T,
                    "aria-required": x["aria-required"] || g,
                    "aria-label": x["aria-label"] || D,
                    autoComplete: K,
                    className: B,
                    disabled: y,
                    id: f,
                    name: M,
                    onChange: this.onChange,
                    onCopy: this.onCopy,
                    onClick: this.onClick,
                    placeholder: p,
                    ref: h,
                    type: C,
                  })
                );
              return b
                ? t.createElement(
                    i.A,
                    {
                      autoClogProps: b,
                      actionProps: {
                        onChange: {
                          action: o.UiAction.ENTER_TEXT,
                        },
                        onCopy: {
                          action: o.UiAction.COPY_TO_CLIPBOARD,
                        },
                      },
                      elementType: o.ElementType.INPUT,
                    },
                    U
                  )
                : U;
            }
            constructor(v) {
              super(v),
                (this.onChange = this.onChange.bind(this)),
                (this.onCopy = this.onCopy.bind(this)),
                (this.onClick = this.onClick.bind(this));
            }
          },
          "TextInput"
        );
        (u.displayName = "TextInput"),
          (u.defaultProps = {
            ariaDescribedby: "",
            isInvalid: !1,
            ariaLabelledby: "",
            ariaRequired: !1,
            ariaLabel: "",
            className: null,
            isDisabled: !1,
            onChange: s.A,
            onCopy: s.A,
            forceSelectAll: !1,
            readOnly: !1,
            placeholder: "",
            size: "medium",
            value: "",
            type: "text",
            focusOnMount: !1,
            autoComplete: "off",
          });
        const l = t.forwardRef((m, v) =>
          t.createElement(
            u,
            a({}, m, {
              refToForward: v || t.createRef(),
            })
          )
        );
      },
      8452232783: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => m,
          F: () => r,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(7715417323),
          i = e(5617110048),
          d = e(5797272849),
          o = e(1224315998);
        function a() {
          return (
            (a =
              Object.assign ||
              function (v) {
                for (var E = 1; E < arguments.length; E++) {
                  var T = arguments[E];
                  for (var g in T)
                    Object.prototype.hasOwnProperty.call(T, g) && (v[g] = T[g]);
                }
                return v;
              }),
            a.apply(this, arguments)
          );
        }
        _(a, "_extends");
        const r = {
            small: "small",
            medium: "medium",
            large: "large",
          },
          c = {
            onBlur: {
              action: o.UiAction.SAVE,
            },
          };
        var u;
        let l = _(
          class extends (u = t.Component) {
            componentDidMount() {
              var E;
              this.props.focusOnMount &&
                !((E = this.textAreaRef) === null || E === void 0) &&
                E.current &&
                this.textAreaRef.current.focus();
            }
            onChange(E) {
              this.props.onChange(E.target.value);
            }
            render() {
              const {
                  ariaDescribedby: E,
                  isInvalid: T,
                  ariaLabelledby: g,
                  ariaRequired: I,
                  className: f,
                  placeholder: y,
                  id: M,
                  isDisabled: p,
                  name: O,
                  resize: C,
                  size: h,
                  focusOnMount: D,
                  autoClogProps: P,
                  ...S
                } = this.props,
                b = (0, n.A)(
                  "c-input_textarea",
                  {
                    "c-input_textarea--large": h === r.large,
                    "c-input_textarea--small": h === r.small,
                    "c-input_textarea--resize_none": C === "none",
                    "c-input_textarea--resize_both": C === "both",
                    "c-input_textarea--resize_h": C === "horizontal",
                    "c-input_textarea--with_error": T,
                    "c-input_textarea--with_inline_alert": T,
                    [d.E.small]: h === r.small,
                    [d.E.large]: h === r.large,
                  },
                  f
                ),
                K = t.createElement(
                  "textarea",
                  a({}, S, {
                    "aria-describedby": E,
                    "aria-invalid": T,
                    "aria-labelledby": g,
                    "aria-required": I,
                    className: b,
                    disabled: p,
                    id: M,
                    name: O,
                    onChange: this.onChange,
                    onFocus: this.props.onFocus,
                    onBlur: this.props.onBlur,
                    placeholder: y,
                    ref: this.textAreaRef,
                    value: this.props.value,
                    style: this.props.style,
                    maxLength: this.props.maxLength,
                  })
                );
              return P
                ? t.createElement(
                    i.A,
                    {
                      autoClogProps: P,
                      actionProps: c,
                      elementType: o.ElementType.TEXTAREA,
                    },
                    K
                  )
                : K;
            }
            constructor(E) {
              super(E),
                (this.onChange = this.onChange.bind(this)),
                (this.textAreaRef = t.createRef());
            }
          },
          "TextareaInput"
        );
        (l.displayName = "TextareaInput"),
          (l.defaultProps = {
            ariaDescribedby: "",
            isInvalid: !1,
            ariaLabelledby: "",
            ariaRequired: !1,
            className: null,
            isDisabled: !1,
            onChange: s.A,
            onFocus: s.A,
            onBlur: s.A,
            placeholder: "",
            resize: null,
            size: r.medium,
            style: void 0,
            maxLength: void 0,
            value: "",
            focusOnMount: !1,
            autoClogProps: void 0,
          });
        const m = l;
      },
      4967176632: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
        });
        var t = e(5824283093),
          n = e(3564666345);
        function s() {
          return (
            (s =
              Object.assign ||
              function (o) {
                for (var a = 1; a < arguments.length; a++) {
                  var r = arguments[a];
                  for (var c in r)
                    Object.prototype.hasOwnProperty.call(r, c) && (o[c] = r[c]);
                }
                return o;
              }),
            s.apply(this, arguments)
          );
        }
        _(s, "_extends");
        function i(o) {
          let {
            className: a = void 0,
            initialValues: r,
            initialErrors: c = void 0,
            validate: u = void 0,
            validationSchema: l = void 0,
            validateOnBlur: m = !0,
            validateOnChange: v = !0,
            validateOnMount: E = !1,
            onReset: T = void 0,
            onSubmit: g,
            children: I,
            ...f
          } = o;
          const y = T
            ? {
                onReset: T,
              }
            : {};
          return t.createElement(
            n.l1,
            s(
              {
                initialValues: r,
                initialErrors: c,
                validate: u,
                validationSchema: l,
                validateOnBlur: m,
                validateOnChange: v,
                validateOnMount: E,
                onSubmit: g,
              },
              y,
              f
            ),
            (M) => {
              let { handleSubmit: p, handleReset: O, ...C } = M;
              return t.createElement(
                "form",
                {
                  className: a,
                  onSubmit: p,
                  onReset: O,
                },
                I({
                  ...C,
                })
              );
            }
          );
        }
        _(i, "Form"), (i.displayName = "Form");
        const d = i;
      },
      3155323475: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => i,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(9665283624);
        function i(d) {
          let { className: o, errors: a } = d;
          var r;
          return a && a.length > 0
            ? t.createElement(
                t.Fragment,
                null,
                a.map((c) =>
                  (0, t.isValidElement)(c.message)
                    ? t.cloneElement(c.message, {
                        key: c.id,
                        id: c.id,
                        className: (0, n.A)(o, "c-field_input__helpers"),
                      })
                    : (r =
                        !!c.message &&
                        t.createElement(
                          s.A,
                          {
                            className: (0, n.A)(o, "c-field_input__helpers"),
                            key: c.id,
                            id: c.id,
                          },
                          c.message
                        )) !== null && r !== void 0
                    ? r
                    : null
                )
              )
            : null;
        }
        _(i, "FieldErrors");
      },
      7811786890: (W, A, e) => {
        "use strict";
        e.d(A, {
          DQ: () => u,
          IM: () => o,
          T$: () => c,
          Wz: () => v,
          Zr: () => E,
          m4: () => i,
          mw: () => d,
        });
        var t = e(9746734072),
          n = e(6313685253),
          s = e(9113979368);
        const i = {
            email: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
            phone: /^[0-9._+-]{8,15}$/i,
          },
          d = _((T) => {
            const g = typeof T == "boolean",
              I = typeof T == "string",
              f = g && !T,
              y = I && (!T || !T.trim()),
              M = (0, t.A)(T) && !T.length;
            return f || y || M || T === null ? "Required" : null;
          }, "required"),
          o = _(
            (T, g) => (I) => (i[T] || T).test(I) ? null : g,
            "regexPattern"
          ),
          a = o(i.email, "Please enter a valid email address."),
          r = o(i.phone, "Please enter a valid phone number."),
          c = _(
            (T) => (g) =>
              !g || g.length < T ? `Minimum of ${T} characters` : null,
            "minCharacterCount"
          ),
          u = _(
            (T) => (g) => g.length > T ? `Max character limit is ${T}` : null,
            "maxCharacterCount"
          ),
          l = _(
            (T) => (g) => {
              let I = null;
              return (
                T.forEach((f) => {
                  g === f && (I = `Cannot use ${g}`);
                }),
                I
              );
            },
            "tokenNotAllowed"
          ),
          m = _(
            (T) => (g) => {
              let I = null,
                f;
              return (
                g &&
                  g.length &&
                  (g.includes(",")
                    ? ((f = g.split(",").filter((y) => !!T.includes(y))),
                      (I = `Cannot use ${f}`))
                    : T.includes(g) && ((f = g), (I = `Cannot use ${f}`))),
                I
              );
            },
            "tokensNotAllowed"
          ),
          v = _(
            (T) => (g) => {
              const I = (0, n.A)(
                T,
                (f, y, M) => {
                  const p = y.map((O) => O(g[M], g)).filter(Boolean);
                  return p.length > 0 && (f[M] = p), f;
                },
                {}
              );
              return (0, s.A)(I) ? void 0 : I;
            },
            "createValidation"
          ),
          E = _(
            (T) => (g) => {
              const I = T.map((f) => f(g)).filter(Boolean);
              return (0, s.A)(I) ? void 0 : I;
            },
            "createValidate"
          );
      },
      9665283624: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => o,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(8683010724);
        function i() {
          return (
            (i =
              Object.assign ||
              function (a) {
                for (var r = 1; r < arguments.length; r++) {
                  var c = arguments[r];
                  for (var u in c)
                    Object.prototype.hasOwnProperty.call(c, u) && (a[u] = c[u]);
                }
                return a;
              }),
            i.apply(this, arguments)
          );
        }
        _(i, "_extends");
        let d = _(
          class extends t.PureComponent {
            render() {
              const { children: r, className: c, id: u, ...l } = this.props,
                m = (0, n.A)("c-inline_alert", c);
              return t.createElement(
                "div",
                i({}, l, {
                  className: m,
                  id: u,
                  "data-qa-error": !0,
                }),
                t.createElement(s.A, {
                  name: "info",
                }),
                t.createElement(
                  "span",
                  {
                    className: "c-inline_alert__text",
                  },
                  r
                )
              );
            }
          },
          "InlineAlert"
        );
        (d.displayName = "InlineAlert"),
          (d.defaultProps = {
            className: "",
            id: "",
          });
        const o = d;
      },
      440635146: (W, A, e) => {
        "use strict";
        e.d(A, {
          ed: () => E,
          tc: () => u,
          zG: () => T,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(1610251172),
          i = e(8214116048),
          d = e(571104883),
          o = e(735940183);
        const a = new o.Ay("keyboard_key");
        var r;
        (function (g) {
          (g.ArrowUp = "\u2191"),
            (g.ArrowDown = "\u2193"),
            (g.ArrowLeft = "\u2190"),
            (g.ArrowRight = "\u2192");
        })(r || (r = {}));
        var c;
        (function (g) {
          (g.CmdOrCtrl = "CmdOrCtrl"), (g.OptOrAlt = "OptOrAlt");
        })(c || (c = {}));
        const u = {
            ...r,
            ...c,
          },
          l = Object.values(r).map((g) => g.toString()),
          m = {
            Cmd: "cmd-small",
            [r.ArrowUp]: "caret-up",
            [r.ArrowDown]: "caret-down",
            [r.ArrowLeft]: "caret-left",
            [r.ArrowRight]: "caret-right",
          },
          v = _(
            (g) =>
              g === c.CmdOrCtrl
                ? (0, d.cX)()
                  ? "Cmd"
                  : "Ctrl"
                : g === c.OptOrAlt
                ? (0, d.cX)()
                  ? "Option"
                  : "Alt"
                : g,
            "getKeyForOS"
          ),
          E = _(
            (g) =>
              ((
                {
                  "\u2191": a.t("up arrow"),
                  "\u2193": a.t("down arrow"),
                  "\u2190": a.t("left arrow"),
                  "\u2192": a.t("right arrow"),
                  Ctrl: a.t("control"),
                  "\u2318": a.t("command"),
                  Cmd: a.t("command"),
                  Option: a.t("option"),
                  Alt: a.t("alt"),
                  ".": a.t("period"),
                  ",": a.t("comma"),
                  "[": a.t("left bracket"),
                  "]": a.t("right bracket"),
                  "+": a.t("plus"),
                  "-": a.t("minus"),
                  Esc: a.t("escape"),
                  Strg: "Steuerung",
                }[g] || String(g)
              ).toLowerCase()),
            "getNameForKey"
          ),
          T = _((g) => {
            let {
              label: I,
              className: f,
              slim: y = !1,
              theme: M = i.Sx.Light,
              tooltip: p = !1,
            } = g;
            const O = String(I),
              C = l.includes(O),
              h = v(O),
              D = m[h],
              P = (0, n.A)(f, {
                "c-keyboard_key": !0,
                "c-keyboard_key__arrow_key": C,
                "c-keyboard_key--slim": y,
                "c-keyboard_key--dark": M === i.Sx.Dark,
                "c-keyboard_key__tooltip": p,
              }),
              S = E(h);
            return t.createElement(
              "div",
              {
                role: "img",
                "aria-label": S,
                className: P,
              },
              D
                ? t.createElement(s.A, {
                    type: D,
                    size: y ? "inherit" : 20,
                    inline: y,
                  })
                : h
            );
          }, "KeyboardKey");
        T.displayName = "KeyboardKey";
      },
      9194155027: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => a,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(440635146),
          i = e(571104883);
        const d = _(
          () =>
            (0, i.cX)()
              ? t.createElement(
                  "span",
                  {
                    "data-qa": "keyboard-keys-tip-key-delimiter",
                    className: "c-keyboard_keys--delimiter",
                  },
                  "\xA0"
                )
              : t.createElement(
                  "span",
                  {
                    "data-qa": "keyboard-keys-tip-key-delimiter",
                    className: "c-keyboard_keys--delimiter",
                  },
                  "+"
                ),
          "Delimiter"
        );
        d.displayName = "Delimiter";
        const o = _((r) => {
          let {
            isInline: c = !1,
            title: u,
            mainKey: l,
            modifier: m,
            modifiers: v,
            className: E,
            useSlimModifiers: T,
          } = r;
          const g = (0, n.A)(
              "c-keyboard_keys",
              {
                "c-keyboard_keys--inline": c,
                "c-keyboard_key__tooltip_text": !(m || v),
              },
              E
            ),
            I = (0, n.A)("c-keyboard_keys--title", {
              "c-keyboard_keys--title-inline": c,
            }),
            f = m ? [m] : v,
            y =
              f == null
                ? void 0
                : f.map((M) =>
                    t.createElement(
                      t.Fragment,
                      {
                        key: `${M}_key`,
                      },
                      t.createElement(s.zG, {
                        label: M,
                        tooltip: !0,
                        slim: T,
                      }),
                      t.createElement(d, null)
                    )
                  );
          return t.createElement(
            t.Fragment,
            null,
            t.createElement(
              "span",
              {
                className: I,
                "aria-hidden": "true",
              },
              u
            ),
            t.createElement(
              "span",
              {
                className: g,
              },
              y,
              t.createElement(s.zG, {
                label: l,
                tooltip: !0,
              })
            )
          );
        }, "KeyboardKeysTooltip");
        o.displayName = "KeyboardKeysTooltip";
        const a = o;
      },
      9742374352: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => l,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(5617110048),
          i = e(3753517560),
          d = e(6538933722),
          o = e(1224315998),
          a = e(2907415594);
        function r() {
          return (
            (r =
              Object.assign ||
              function (m) {
                for (var v = 1; v < arguments.length; v++) {
                  var E = arguments[v];
                  for (var T in E)
                    Object.prototype.hasOwnProperty.call(E, T) && (m[T] = E[T]);
                }
                return m;
              }),
            r.apply(this, arguments)
          );
        }
        _(r, "_extends");
        const c = {
            onClick: {
              action: o.UiAction.CLICK,
            },
          },
          u = t.forwardRef(
            _(function (v, E) {
              let {
                autoClogProps: T,
                className: g,
                href: I,
                invert: f = !1,
                children: y,
                hasKeyboardFocus: M = !1,
                ...p
              } = v;
              const O = (0, n.A)(
                  "c-link",
                  {
                    "c-link--focus-visible": M,
                    "c-link--invert": f,
                  },
                  g
                ),
                C =
                  p.target === "_blank" ||
                  (I == null ? void 0 : I.startsWith("mailto:")),
                h = t.createElement(
                  "a",
                  r({}, (0, a.A)(p), {
                    className: O,
                    href: I,
                    ref: E,
                  }),
                  y,
                  C && t.createElement(d.A, null)
                );
              return T
                ? t.createElement(
                    s.A,
                    {
                      autoClogProps: T,
                      actionProps: c,
                      elementType: o.ElementType.LINK,
                    },
                    h
                  )
                : h;
            }, "BaseLink")
          );
        u.displayName = "BaseLink";
        const l = (0, i.A)(u);
      },
      9163962844: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => n,
          r: () => t.rY,
        });
        var t = e(2762351398);
        const n = t.Ay;
      },
      2762351398: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => r,
          rY: () => d,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(2312625946);
        function i() {
          return (
            (i =
              Object.assign ||
              function (c) {
                for (var u = 1; u < arguments.length; u++) {
                  var l = arguments[u];
                  for (var m in l)
                    Object.prototype.hasOwnProperty.call(l, m) && (c[m] = l[m]);
                }
                return c;
              }),
            i.apply(this, arguments)
          );
        }
        _(i, "_extends");
        const d = {
            transparent: "transparent",
            black: "black",
            red: "red",
            white: "white",
            blue: "blue",
            minGray: "min_gray",
            minGrayDarken: "min_gray_darken",
            themed: "themed",
          },
          o = _((c, u) => (c > u ? `${u}+` : String(c)), "getCountText"),
          a = _((c) => {
            let {
              className: u,
              count: l,
              maxCount: m = 9,
              style: v = "black",
              toolTipText: E = "",
            } = c;
            if (!l || l < 0) return null;
            const T = E ? s.Ay : t.Fragment,
              g = E
                ? {
                    tip: E,
                  }
                : {};
            return t.createElement(
              T,
              i({}, g),
              t.createElement(
                "span",
                {
                  "aria-hidden": "true",
                  className: (0, n.A)(
                    u,
                    "c-mention_badge",
                    `c-mention_badge--${v}`,
                    {
                      "c-mention_badge--max": l > m,
                    },
                    E && "c-mention_badge--default"
                  ),
                  "data-qa": "mention_badge",
                },
                o(l, m)
              )
            );
          }, "MentionBadge");
        a.displayName = "MentionBadge";
        const r = t.memo(a);
      },
      3514831633: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => r,
          Dr: () => s.A,
          YJ: () => t.YJ,
          a: () => n.A,
          bX: () => d.Ay,
          c$: () => i.Ay,
          cQ: () => o.A,
        });
        var t = e(5152183509),
          n = e(8383646472),
          s = e(8245211418),
          i = e(7417231112),
          d = e(8184841524),
          o = e(7433650413),
          a = e(101973425);
        const r = t.Ay;
      },
      8383646472: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => y,
        });
        var t = e(5824283093),
          n = e(2141441167),
          s = e(862210999),
          i = e(3297051565),
          d = e.n(i),
          o = e(1658558415),
          a = e(4902318931),
          r = e(6308822),
          c = e(5152183509),
          u = e(8245211418),
          l = e(7417231112),
          m = e(8184841524),
          v = e(8773153312),
          E = e(1959847761);
        function T() {
          return (
            (T =
              Object.assign ||
              function (M) {
                for (var p = 1; p < arguments.length; p++) {
                  var O = arguments[p];
                  for (var C in O)
                    Object.prototype.hasOwnProperty.call(O, C) && (M[C] = O[C]);
                }
                return M;
              }),
            T.apply(this, arguments)
          );
        }
        _(T, "_extends");
        const g = {
            type: d().oneOf((0, n.A)(v.A)),
            label: d().node,
            description: d().oneOfType([d().string, d().element]),
            children: d().element,
            key: d().string,
            click: d().func,
            danger: d().bool,
            dataQa: d().string,
            checked: d().bool,
            indeterminate: d().bool,
            ariaHidden: d().bool,
            target: d().string,
            href: d().string,
            download: d().string,
            action: d().func,
            payload: d().object,
            autoClogProps: d().object,
          },
          I = {
            template: d().arrayOf(
              d().shape({
                ...g,
                renderSubmenu: d().func,
                template: d().arrayOf(d().shape(g)),
                submenu: d().arrayOf(d().shape(g)),
                checked: d().bool,
              })
            ).isRequired,
          };
        let f = _(
          class _r extends t.PureComponent {
            render() {
              const { template: p, ...O } = this.props,
                C = p.map((h, D) => {
                  if (!h) return null;
                  if (h.type === v.A.separator)
                    return t.createElement(
                      m.Ay,
                      T({}, h, {
                        key: h.key || `separator-${D}`,
                      })
                    );
                  if (h.type === v.A.sub_separator)
                    return t.createElement(
                      m.Ay,
                      T({}, h, {
                        className: "c-menu_separator__li--sub",
                        key: h.key || `separator-${D}`,
                      })
                    );
                  if (h.type === v.A.header)
                    return t.createElement(l.Ay, {
                      key: h.key || `header-${D}`,
                      label: h.label,
                      className: h.className,
                    });
                  if (h.type === v.A.loading)
                    return t.createElement(r.A, {
                      key: h.key || "loading",
                      size: "large",
                    });
                  const P = {
                      children: h.children,
                      className: h.className,
                      classNameListItem: h.classNameListItem,
                      label: h.label,
                      description: h.description,
                      icon: h.icon,
                      badgeCount: h.badgeCount,
                      badgeLabel: h.badgeLabel,
                      badgeClassName: h.badgeClassName,
                      shortcut: h.shortcut,
                      showEnter: h.showEnter,
                      onSelected: h.click,
                      target: h.target,
                      href: h.href,
                      download: h.download,
                      danger: h.danger,
                      type: h.type,
                      "data-qa": h.dataQa,
                      disabled: h.disabled,
                      showOfflineIcon: h.showOfflineIcon,
                      showLinkIndicatorIcon: h.showLinkIndicatorIcon,
                      checked: h.checked,
                      indeterminate: h.indeterminate,
                      width: h.submenuWidth,
                      autoClogProps: h.autoClogProps,
                      megaphoneSpaceName: h.megaphoneSpaceName,
                      megaphoneNotificationName: h.megaphoneNotificationName,
                      onMount: h.onMount,
                      onUnmount: h.onUnmount,
                      ariaDescribedBy: h.ariaDescribedBy,
                      ariaRole: h.ariaRole,
                      ariaLabel: h.ariaLabel,
                    },
                    S = h.key || h.label;
                  if (h.type === v.A.submenu) {
                    const K = (0, s.A)(h.renderSubmenu)
                      ? h.renderSubmenu
                      : (x) =>
                          t.createElement(
                            _r,
                            T(
                              {
                                template: h.template || h.submenu,
                              },
                              x,
                              {
                                width: h.submenuWidth,
                              }
                            )
                          );
                    return t.createElement(
                      E.A,
                      T({}, P, {
                        label: h.label,
                        renderSubmenu: K,
                        key: S,
                      })
                    );
                  }
                  if (h.type === v.A.custom)
                    return h.ariaHidden === !1 && !(0, o.A)()
                      ? h.children
                      : t.createElement(
                          "div",
                          {
                            "aria-hidden":
                              h.ariaHidden === !1 ? "false" : "true",
                            key: h.key,
                            "data-qa": h.dataQa,
                          },
                          h.children
                        );
                  if (h.type === v.A.subheaderChild)
                    return t.createElement(
                      u.A,
                      T(
                        {
                          key: S,
                          type: v.A.subheaderChild,
                        },
                        P
                      )
                    );
                  const b = t.createElement(
                    u.A,
                    T(
                      {
                        key: S,
                      },
                      P
                    )
                  );
                  return h.megaphoneSpaceName && h.megaphoneNotificationName
                    ? t.createElement(a.Ay, {
                        key: S,
                        spaceName: h.megaphoneSpaceName,
                        notifications: {
                          [h.megaphoneNotificationName]: {
                            component: () => b,
                          },
                        },
                      })
                    : b;
                });
              return t.createElement(c.Ay, T({}, O), C);
            }
          },
          "MenuFromTemplate"
        );
        (f.displayName = "MenuFromTemplate"), (f.propTypes = I);
        const y = f;
      },
      7417231112: (W, A, e) => {
        "use strict";
        e.d(A, {
          $b: () => c,
          Ay: () => a,
          a6: () => r,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(7715417323);
        function i() {
          return (
            (i =
              Object.assign ||
              function (u) {
                for (var l = 1; l < arguments.length; l++) {
                  var m = arguments[l];
                  for (var v in m)
                    Object.prototype.hasOwnProperty.call(m, v) && (u[v] = m[v]);
                }
                return u;
              }),
            i.apply(this, arguments)
          );
        }
        _(i, "_extends");
        const d = "_isSlackMenuItemHeader";
        function o(u) {
          let { for: l, label: m, className: v, onMouseEnter: E = s.A } = u;
          return t.createElement(
            "div",
            i(
              {},
              l && {
                id: c(l),
              },
              {
                "aria-hidden": "true",
                className: (0, n.A)("c-menu_item__header", v),
                onMouseEnter: E,
                "data-qa": "menu-item-header",
              }
            ),
            m
          );
        }
        _(o, "MenuItemHeader"), (o.displayName = "MenuItemHeader"), (o[d] = !0);
        const a = o;
        function r(u) {
          return !!(u != null && u[d]);
        }
        _(r, "isMenuItemHeader");
        function c(u) {
          return `${u}-label`;
        }
        _(c, "getMenuItemHeaderIdForGroup");
      },
      8245211418: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => p,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(3078252698),
          i = e(7715417323),
          d = e(8049923572),
          o = e(6084388622),
          a = e(7420598276),
          r = e(1610251172),
          c = e(2762351398),
          u = e(8773153312),
          l = e(101973425),
          m = e(8683010724),
          v = e(1224315998),
          E = e(571104883),
          T = e(735940183),
          g = e(9391594207);
        const I = new T.Ay("menu");
        let f = _(
          class extends t.Component {
            componentDidMount() {
              this.props.onMount && this.props.onMount();
            }
            componentWillUnmount() {
              this.props.onUnmount && this.props.onUnmount();
            }
            onSelected(C) {
              var h, D;
              (D = (h = this.props).menuCallbackBefore) === null ||
                D === void 0 ||
                D.call(h, C),
                this.props.onSelected(C),
                this.props.menuCallback(this.props.menuCallbackId, C);
            }
            determineMenuRole() {
              const { type: C, ariaRole: h } = this.props;
              if (h) return h;
              switch (C) {
                case u.A.radio:
                  return "menuitemradio";
                case u.A.checkbox:
                  return "menuitemcheckbox";
                default:
                  return "menuitem";
              }
            }
            renderBadgeMaybe() {
              const {
                badgeLabel: C,
                badgeCount: h,
                badgeClassName: D,
                badgeVariant: P,
                highlighted: S,
              } = this.props;
              return h
                ? t.createElement(c.Ay, {
                    count: h,
                    style: S ? c.rY.white : c.rY.red,
                  })
                : C
                ? t.createElement(
                    a.A,
                    {
                      className: D,
                      variant: P,
                    },
                    C
                  )
                : null;
            }
            renderAdditionalIconMaybe() {
              const { additionalIcon: C } = this.props;
              return C
                ? t.createElement(
                    "div",
                    {
                      className: "c-menu_item__additional-icon",
                      "data-qa": "menu_item_additional_icon",
                      role: "presentation",
                    },
                    C
                  )
                : null;
            }
            renderCaret() {
              return !this.props.withSubmenu || this.props.disabled
                ? null
                : t.createElement(
                    "div",
                    {
                      className: "c-menu_item__submenu-indicator",
                      "data-qa": "menu_item_submenu_indicator",
                      role: "presentation",
                    },
                    t.createElement(m.A, {
                      name: this.props.showFullCarat
                        ? "caret-right-full"
                        : "caret-right",
                    })
                  );
            }
            renderEnterMaybe() {
              const { showEnter: C, highlighted: h } = this.props;
              return !C || !h
                ? null
                : t.createElement(r.A, {
                    legacy: !0,
                    type: "enter",
                    className: "c-menu_item__enter",
                    "data-qa": "menu_item_enter",
                    role: "presentation",
                  });
            }
            renderCheckmarkMaybe() {
              const { type: C, checked: h, indeterminate: D } = this.props,
                P = C === u.A.radio || C === u.A.checkbox;
              return P && D
                ? t.createElement(r.A, {
                    className: "c-menu_item__checkbox_dash",
                    "data-qa": "menu_item_checkbox_dash",
                    type: "form-checkbox-dash",
                    size: "inherit",
                    inline: !0,
                  })
                : P && h
                ? t.createElement(
                    "div",
                    {
                      className: "c-menu_item__checkmark",
                    },
                    t.createElement(m.A, {
                      name: "check",
                      size: "16",
                      inline: !0,
                      "data-qa": "menu_item_checkmark",
                    })
                  )
                : null;
            }
            renderIconMaybe() {
              const { icon: C } = this.props;
              return C
                ? t.createElement(
                    "div",
                    {
                      className: "c-menu_item__icon",
                      "data-qa": "menu_item_icon",
                      role: "presentation",
                    },
                    C
                  )
                : null;
            }
            renderLinkIconMaybe() {
              const { href: C, showLinkIndicatorIcon: h } = this.props;
              return h === !1 || (h !== !0 && !C)
                ? null
                : t.createElement(
                    "div",
                    {
                      className: "c-menu_item__link_icon",
                      "data-qa": "menu_item_link_icon",
                      role: "presentation",
                    },
                    t.createElement(m.A, {
                      name: "new-window",
                      "data-qa": "menu_item_link_indicator",
                    })
                  );
            }
            renderShortcutMaybe() {
              const {
                shortcut: C,
                containerSize: h,
                experimentSkResponsiveMenusGroupOn: D,
                isResponsive: P,
              } = this.props;
              if (!C || (D && P && h && h.width < 300)) return null;
              if (!(0, s.A)(C) && "label" in C) {
                const { label: S } = C;
                if (S && (0, s.A)(S))
                  return t.createElement(
                    "div",
                    {
                      className: "c-menu_item__shortcut",
                    },
                    S
                  );
              }
              return t.createElement(
                "div",
                {
                  className: "c-menu_item__shortcut",
                },
                C
              );
            }
            render() {
              const {
                  autoClogProps: C,
                  children: h,
                  className: D,
                  classNameListItem: P,
                  danger: S,
                  link: b,
                  description: K,
                  disabled: x,
                  showOfflineIcon: B,
                  highlighted: U,
                  label: R,
                  onMouseEnter: G,
                  onMouseLeave: H,
                  href: F,
                  target: V,
                  download: X,
                  type: q,
                  withSubmenu: oe,
                  standaloneHoverEffect: z,
                  checked: Ae,
                  indeterminate: ae,
                  measureRef: de,
                  containerSize: ve,
                  experimentSkResponsiveMenusGroupOn: Se,
                  isResponsive: Ee,
                  ariaDescribedBy: be,
                  ariaLabelledBy: Ce,
                  ariaLabel: Z,
                  disableHoverStyling: $,
                } = this.props,
                N = (0, n.A)(D, "c-menu_item__button", {
                  "c-menu_item__button--highlighted": U && !x && !$,
                  "c-menu_item__button--danger": S,
                  "c-menu_item__button--link": b,
                  "c-menu_item__button--disabled": x,
                  "c-menu_item__button--with_submenu": oe,
                  "c-menu_item--button--subheader_child":
                    q === u.A.subheaderChild,
                  "c-menu_item__button--checked":
                    (q === u.A.radio || q === u.A.checkbox) && (Ae || ae),
                  "c-menu_item--compact": q === u.A.compactItem,
                  "c-menu_item--standalone": z,
                }),
                L = (0, n.A)(P, "c-menu_item__li", {
                  "c-menu_item__li--highlighted": U && !$,
                }),
                w = (0, n.A)(P, "c-menu_item__label", {
                  "c-menu_item__label--with_description": K,
                }),
                k = oe ? "true" : void 0,
                J = K
                  ? t.createElement(
                      "div",
                      {
                        className: "c-menu_item__description",
                      },
                      K
                    )
                  : "",
                ee = this.props.activeMenuId,
                ne = this.props.featureSubmenuRoleDescription
                  ? I.t("submenu")
                  : void 0,
                pe = (0, E.cX)() && oe ? ne : void 0;
              return t.createElement(
                "div",
                {
                  ref: de,
                  className: L,
                  onMouseEnter: G,
                  onMouseLeave: H,
                  "data-qa": `${this.props["data-qa"]}-wrapper`,
                },
                t.createElement(
                  o.Nm,
                  {
                    autoClogProps: {
                      ...C,
                      elementType: v.ElementType.MENU_ITEM,
                    },
                    ref: this.buttonRef,
                    id: ee,
                    className: N,
                    disabled: x,
                    onClick: this.onSelected,
                    href: F,
                    target: V,
                    download: X,
                    "data-qa": this.props["data-qa"],
                    role: this.determineMenuRole(),
                    checked: Ae,
                    "aria-checked": ae ? "mixed" : Ae,
                    "aria-haspopup": k,
                    tabIndex: -1,
                    "aria-roledescription": pe,
                    "aria-describedby": be,
                    "aria-labelledby": Ce,
                    "aria-label": Z,
                  },
                  this.renderCheckmarkMaybe(),
                  this.renderIconMaybe(),
                  t.createElement(
                    "div",
                    {
                      className: w,
                    },
                    R,
                    h,
                    !(Se && Ee && ve && ve.width < 300) && J
                  ),
                  this.renderShortcutMaybe(),
                  this.renderBadgeMaybe(),
                  this.renderAdditionalIconMaybe(),
                  this.renderCaret(),
                  this.renderEnterMaybe(),
                  this.renderLinkIconMaybe(),
                  B &&
                    t.createElement(
                      "div",
                      {
                        className:
                          "c-menu_item__icon c-menu_item__icon--offline",
                        "data-qa": "menu_item_icon",
                        role: "presentation",
                      },
                      t.createElement(r.A, {
                        type: "cloud-offline-small",
                      })
                    )
                )
              );
            }
            constructor(C) {
              super(C),
                (this.onSelected = this.onSelected.bind(this)),
                (this.buttonRef = t.createRef());
            }
          },
          "MenuItem"
        );
        (f.displayName = "MenuItem"),
          (f.defaultProps = {
            children: void 0,
            highlighted: !1,
            onMouseEnter: i.A,
            onMouseLeave: i.A,
            onSelected: i.A,
            menuCallback: i.A,
            menuCallbackBefore: i.A,
            menuCallbackId: null,
            className: "",
            classNameListItem: "",
            label: "",
            description: "",
            danger: !1,
            link: !1,
            disabled: !1,
            showOfflineIcon: !1,
            href: null,
            showLinkIndicatorIcon: void 0,
            icon: null,
            shortcut: void 0,
            badgeCount: void 0,
            badgeLabel: void 0,
            badgeClassName: void 0,
            badgeVariant: void 0,
            showEnter: !1,
            target: void 0,
            download: void 0,
            type: u.A.default,
            withSubmenu: !1,
            "data-qa": "menu_item_button",
            activeMenuId: void 0,
            standaloneHoverEffect: void 0,
            autoClogProps: void 0,
            checked: void 0,
            indeterminate: void 0,
            featureSubmenuRoleDescription: !1,
            group: void 0,
            experimentSkResponsiveMenusGroupOn: !1,
            isResponsive: !0,
            ariaDescribedBy: void 0,
            ariaLabel: void 0,
            onMount: i.A,
            onUnmount: i.A,
            showFullCarat: !1,
            disableHoverStyling: !1,
          });
        const y = {
            MenuItem: f,
          },
          M = _(
            (O) => ({
              experimentSkResponsiveMenusGroupOn: (0, d.IN)(O),
            }),
            "mapStateToProps"
          ),
          p = (0, l.Ay)((0, g.N)(M)((0, d.BM)(f)));
      },
      8184841524: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => d,
          Ex: () => s,
          HP: () => o,
        });
        var t = e(5824283093),
          n = e(5255740490);
        const s = "_isSlackMenuSeparator";
        function i(a) {
          let {
            className: r,
            noPadding: c,
            noPaddingAbove: u,
            noPaddingBelow: l,
            noFirstChild: m,
            noLastChild: v,
            dataQa: E = "menu_separator__separator",
          } = a;
          const T = (0, n.A)(
            "c-menu_separator__li",
            {
              padding_0: c,
              padding_top_0: u,
              padding_bottom_0: l,
              "c-menu_separator__li--no_first_child": m,
              "c-menu_separator__li--no_last_child": v,
            },
            r
          );
          return t.createElement(
            "div",
            {
              className: T,
            },
            t.createElement("hr", {
              className: "c-menu_separator__separator",
              "data-qa": E,
            })
          );
        }
        _(i, "MenuSeparator"), (i.displayName = "MenuSeparator"), (i[s] = !0);
        const d = i;
        function o(a) {
          return !!(a != null && a[s]);
        }
        _(o, "isMenuSeparator");
      },
      7433650413: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => o,
        });
        var t = e(5824283093),
          n = e(5249175977),
          s = e(2689960678);
        function i() {
          return (
            (i =
              Object.assign ||
              function (a) {
                for (var r = 1; r < arguments.length; r++) {
                  var c = arguments[r];
                  for (var u in c)
                    Object.prototype.hasOwnProperty.call(c, u) && (a[u] = c[u]);
                }
                return a;
              }),
            i.apply(this, arguments)
          );
        }
        _(i, "_extends");
        const d = _((a) => {
          const {
              renderMenu: r,
              onPopoverOpen: c,
              onPopoverClose: u,
              isDisabled: l = !1,
              closeOnSelect: m = !0,
              onTriggerClose: v,
              onMenuItemSelected: E,
              onMenuKeyDown: T,
              ...g
            } = a,
            I = _(() => {
              c && c();
            }, "onOpenProp"),
            f = _((M) => {
              const { onClose: p, ...O } = M,
                C = _((S, b) => {
                  p && p(S), u && u(S);
                }, "onCloseProp"),
                P = r({
                  ...M,
                  onTriggerClose: _((S) => {
                    p && p(S), v && v(S);
                  }, "onTriggerClose"),
                  onMenuItemSelected: _((S, b) => {
                    m && (p && p(b), u && u(b)), E && E(S, b);
                  }, "onMenuItemSelected"),
                  onMenuKeyDown: T,
                });
              return P
                ? t.createElement(
                    n.AM,
                    i(
                      {
                        shouldFade: !1,
                        onClose: C,
                        onOpen: I,
                      },
                      O
                    ),
                    P
                  )
                : !1;
            }, "renderPopover");
          if (((f.displayName = "renderPopover"), l))
            return typeof a.children == "function"
              ? a.children(s.t0)
              : a.children;
          const y = a.isContextMenu
            ? s.t0
            : {
                ...g.triggerProps,
                "aria-haspopup": "menu",
              };
          return t.createElement(
            n.Wv,
            i({}, g, {
              triggerProps: y,
              renderPopover: f,
            }),
            a.children
          );
        }, "MenuTrigger");
        d.displayName = "MenuTrigger";
        const o = d;
      },
      8773153312: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => n,
          y: () => t,
        });
        const t = {
            default: "default",
            compactItem: "compact_item",
            separator: "separator",
            sub_separator: "sub_separator",
            submenu: "submenu",
            header: "header",
            loading: "loading",
            custom: "custom",
            subheaderChild: "subheader_child",
            radio: "radio",
            checkbox: "checkbox",
          },
          n = t;
      },
      5152183509: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => G,
          YJ: () => x,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(3078252698),
          i = e(9746734072),
          d = e(8424846741),
          o = e(7715417323),
          a = e(4481313819),
          r = e(4244379358),
          c = e(8049923572);
        const u = _((H) => {
          let { "aria-labelledby": F, "aria-owns": V } = H;
          return V
            ? t.createElement("div", {
                className: "offscreen",
                role: "group",
                "aria-owns": V,
                "aria-labelledby": F,
              })
            : null;
        }, "MenuItemGroup");
        u.displayName = "MenuItemGroup";
        const l = u;
        var m = e(7417231112),
          v = e(8184841524),
          E = e(101973425),
          T = e(1959847761),
          g = e(1224315998);
        function I(H) {
          return t.isValidElement(H) && "children" in H.props;
        }
        _(I, "hasChildren");
        function f(H) {
          return (
            H != null &&
            typeof H == "object" &&
            "type" in H &&
            H.type === t.Fragment
          );
        }
        _(f, "isFragment");
        function y(H) {
          return H instanceof Array
            ? H.map(y)
            : f(H) && I(H)
            ? y(H.props.children)
            : H;
        }
        _(y, "defragment");
        function M(H) {
          return t.Children.toArray(y(H));
        }
        _(M, "flattenChildren");
        var p = e(796111729),
          O = e(3821598679),
          C = e(9391594207);
        function h() {
          return (
            (h =
              Object.assign ||
              function (H) {
                for (var F = 1; F < arguments.length; F++) {
                  var V = arguments[F];
                  for (var X in V)
                    Object.prototype.hasOwnProperty.call(V, X) && (H[X] = V[X]);
                }
                return H;
              }),
            h.apply(this, arguments)
          );
        }
        _(h, "_extends");
        function D(H) {
          const F = H && H.type;
          return !!F && (0, E.l0)(F);
        }
        _(D, "isMenuItem");
        function P(H) {
          const F = H && H.type;
          return !!F && (0, T.e)(F);
        }
        _(P, "isSubmenu");
        function S(H) {
          const F = H && H.type;
          return F && (0, v.HP)(F);
        }
        _(S, "isSeparator");
        function b(H) {
          const F = H && H.type;
          return F && (0, m.a6)(F);
        }
        _(b, "isMenuItemHeader");
        let K = 0;
        function x() {
          return K > 0;
        }
        _(x, "isMenuVisible");
        const B = {
          ArrowUp: "selectprevious",
          Up: "selectprevious",
          ArrowDown: "selectnext",
          Down: "selectnext",
          ArrowLeft: "closesubmenu",
          Left: "closesubmenu",
          ArrowRight: "opensubmenu",
          Right: "opensubmenu",
          Escape: "closemenu",
          Enter: "select",
          " ": "select",
          Home: "selectfirst",
          End: "selectlast",
        };
        let U = _(
          class extends t.Component {
            componentDidMount() {
              this.focus(), (K += 1);
            }
            componentDidUpdate(F) {
              this.props.kbNavActive && !F.kbNavActive && this.activateKBNav();
            }
            componentWillUnmount() {
              (K -= 1), this.props.onUnmount && this.props.onUnmount();
            }
            onMenuNavigation(F) {
              const V = this.getIndexOfNextMenuItemInDirection(F);
              this.setState(() => ({
                highlightedMenuItemIndex: V,
                highlightedMenuItemKbNavActive: !1,
                isKeyboardHighlight: !0,
              }));
            }
            onMouseEnterMenuItem(F) {
              const V = this.state.highlightCanChangeOnMouseMovement
                ? F
                : this.state.highlightedMenuItemIndex;
              if (
                (this.setState(() => ({
                  highlightedMenuItemIndex: V,
                  contingentHighlightedMenuItemIndex: F,
                  highlightedMenuItemKbNavActive: !1,
                  isKeyboardHighlight: !1,
                })),
                !!this.state.highlightCanChangeOnMouseMovement &&
                  document.activeElement !== this.ariaMenuNode)
              ) {
                var X;
                (X = this.ariaMenuNode) === null || X === void 0 || X.focus();
              }
            }
            getAllMenuItemIndices() {
              const F = [];
              return (
                M(this.props.children)
                  .filter(t.isValidElement)
                  .forEach((V, X) => {
                    (D(V) || P(V)) && F.push(X);
                  }),
                F
              );
            }
            getIndexOfNextMenuItemInDirection(F) {
              const V = this.getAllMenuItemIndices(),
                X = V.indexOf(this.state.highlightedMenuItemIndex),
                q = V.length - 1;
              if (F === "selectnext") {
                const z = X < q ? X + 1 : 0;
                return V[z];
              }
              const oe = X - 1 >= 0 ? X - 1 : q;
              return V[oe];
            }
            getSelectedMenuItem() {
              const { highlightedMenuItemIndex: F } = this.state;
              if (!(F < 0) && this.menuChildren) return this.menuChildren[F];
            }
            focus() {
              const { kbNavActive: F, isSubmenu: V } = this.props;
              if (!F) return;
              if (!V) {
                this.ariaMenuNode && this.ariaMenuNode.focus();
                return;
              }
              const X = this.getAllMenuItemIndices();
              if (!X.length) {
                var q;
                (q = this.ariaMenuNode) === null || q === void 0 || q.focus();
                return;
              }
              this.setState(
                () => ({
                  highlightedMenuItemIndex: X[0],
                }),
                () => {
                  var oe;
                  (oe = this.ariaMenuNode) === null ||
                    oe === void 0 ||
                    oe.focus();
                }
              );
            }
            registerKeyboardShortcutForMenuItem(F, V) {
              if (!F || !V) return;
              const { label: X, key: q } = F;
              (0, s.A)(X) &&
                ((0, s.A)(q) || (0, i.A)(q)) &&
                (0, d.A)(q).forEach((oe) => {
                  this.keyboardShortcutsMap[oe] = V;
                });
            }
            renderMenuItem(F, V) {
              const X = this.onMouseEnterMenuItem.bind(this, V),
                {
                  highlightedMenuItemIndex: q,
                  highlightedMenuItemKbNavActive: oe,
                  isKeyboardHighlight: z,
                } = this.state,
                {
                  onMenuItemSelectedBefore: Ae,
                  stripTerminalSeparators: ae,
                  isResponsive: de,
                } = this.props;
              b(F) &&
                F.props.for &&
                (this.menuGroups || (this.menuGroups = {}),
                (this.menuGroups[F.props.for] = {
                  key: F.props.for,
                  "aria-labelledby": (0, m.$b)(F.props.for),
                  "aria-owns": [],
                  index: V,
                }));
              const ve = {
                  ...F.props,
                  onMouseEnter: X,
                  key: V,
                },
                Se = `${this.activeMenuId}-${V}`,
                { shortcut: Ee } = F.props;
              if (
                (Ee && this.registerKeyboardShortcutForMenuItem(Ee, Se),
                D(F) || P(F))
              ) {
                const $ = q === V;
                if (((ve.activeMenuId = Se), $ && z)) {
                  var be, Ce, Z;
                  (Ce =
                    (be = this.ariaMenuNode) === null || be === void 0
                      ? void 0
                      : be.querySelector(`#${ve.activeMenuId}`)) === null ||
                    Ce === void 0 ||
                    (Z = Ce.scrollIntoView) === null ||
                    Z === void 0 ||
                    Z.call(Ce);
                }
                (ve.menuCallbackBefore = Ae),
                  (ve.menuCallback = this.onMenuItemSelected),
                  ve.menuCallbackId || (ve.menuCallbackId = V),
                  (ve.highlighted = q === V),
                  (ve.isKeyboardHighlight = ve.highlighted && z),
                  ve.group &&
                    (this.menuGroups || (this.menuGroups = {}),
                    this.menuGroups[ve.group] ||
                      (this.menuGroups[ve.group] = {
                        key: ve.group,
                        "aria-owns": [],
                        index: V,
                      }),
                    this.menuGroups[ve.group]["aria-owns"].push(
                      ve.activeMenuId
                    ));
              }
              if (
                (P(F) &&
                  ((ve.isOpen =
                    (ve.highlighted && !z) || (ve.highlighted && oe)),
                  (ve.kbNavActive = ve.highlighted && oe),
                  (ve.returnKBNav = this.activateKBNav),
                  (ve.preventHighlightChange = this.preventHighlightChange),
                  (ve.allowHighlightChange = this.allowHighlightChange)),
                S(F) && ae)
              )
                if (!this.menuChildren)
                  (0, p.Wo)().warn(
                    "Menu.renderMenuItem called without this.menuChildren"
                  );
                else {
                  const $ = this.menuChildren[V - 1];
                  if (S($)) return null;
                  (ve.noFirstChild = !0), (ve.noLastChild = !0);
                }
              return D(F) && (ve.isResponsive = de), t.cloneElement(F, ve);
            }
            renderMenuGroups() {
              return this.menuGroups
                ? Object.values(this.menuGroups)
                    .filter((F) => F["aria-owns"].length > 0)
                    .map((F) => ({
                      group: t.createElement(l, {
                        key: F.key,
                        "aria-labelledby": F["aria-labelledby"],
                        "aria-owns": F["aria-owns"].join(" "),
                      }),
                      index: F.index,
                    }))
                    .sort((F, V) => V.index - F.index)
                : [];
            }
            renderMenuItems() {
              this.menuChildren = M(this.props.children).filter(
                t.isValidElement
              );
              const F = this.menuChildren.map(this.renderMenuItem, this);
              return (
                this.renderMenuGroups().forEach((X) => {
                  let { group: q, index: oe } = X;
                  F.splice(oe, 0, q);
                }),
                F
              );
            }
            renderMenu() {
              const {
                  noMargin: F,
                  menuClassNames: V,
                  "data-qa": X,
                  isUnstyled: q,
                  isResponsive: oe,
                  experimentSkResponsiveMenusGroupOn: z,
                } = this.props,
                Ae = (0, n.A)("c-menu__items", {
                  "c-menu__items--no_margin": F,
                }),
                ae =
                  this.state.highlightedMenuItemIndex !== -1
                    ? `${this.activeMenuId}-${this.state.highlightedMenuItemIndex}`
                    : null,
                de = (0, n.A)(
                  {
                    "c-menu": !q,
                    "c-menu--responsive": oe && z,
                  },
                  V
                );
              return t.createElement(
                "div",
                {
                  className: de,
                  "data-qa": X,
                  style: {
                    width: this.props.width,
                  },
                },
                t.createElement(
                  "div",
                  {
                    className: "c-menu__items_scroller",
                  },
                  t.createElement(
                    "div",
                    {
                      "aria-activedescendant": ae ?? void 0,
                      ref: this.setAriaMenuRef,
                      className: Ae,
                      onKeyDown: this.onMenuKeyDown,
                      onMouseLeave: this.onMouseLeaveMenu,
                      "data-qa": "menu_items",
                      role: "menu",
                      "aria-label": this.props["aria-label"],
                      "aria-describedby": this.props["aria-describedby"],
                      "aria-labelledby": this.props["aria-labelledby"],
                      tabIndex: -1,
                      "no-bootstrap": 1,
                    },
                    this.renderMenuItems()
                  )
                )
              );
            }
            render() {
              const F = this.renderMenu(),
                { autoClogProps: V } = this.props;
              return V
                ? t.createElement(
                    a.A,
                    h(
                      {
                        elementType: g.ElementType.MENU,
                      },
                      V
                    ),
                    F
                  )
                : F;
            }
            constructor(F) {
              super(F),
                (this.activeMenuId = `menu-${(0, O.A)()}`),
                (this.menuChildren = []),
                (this.keyboardShortcutsMap = {}),
                (this.menuGroups = {}),
                (this.onMenuItemSelected = (V, X) => {
                  this.props.onMenuItemSelected &&
                    this.props.onMenuItemSelected(V, X);
                }),
                (this.onMenuKeyDown = (V) => {
                  var X;
                  const {
                    kbNavActive: q,
                    onMenuKeyDown: oe,
                    onCloseSubmenu: z,
                    onTriggerClose: Ae,
                    windowRef: ae,
                  } = this.props;
                  if (!q) return;
                  const { key: de } = V,
                    ve = B[de],
                    Se =
                      (X = this.keyboardShortcutsMap) === null || X === void 0
                        ? void 0
                        : X[de],
                    Ee = this.getSelectedMenuItem(),
                    be = Ee && P(Ee),
                    Ce = this.getAllMenuItemIndices();
                  (ve || Se) && (V.stopPropagation(), V.preventDefault()),
                    (ve === "selectnext" || ve === "selectprevious") &&
                      this.onMenuNavigation(ve),
                    ve === "closesubmenu" && (z == null || z(V)),
                    (ve === "select" || ve === "opensubmenu") &&
                      be &&
                      this.setState(() => ({
                        highlightedMenuItemKbNavActive: !0,
                      })),
                    ve === "closemenu" && (Ae == null || Ae(V)),
                    ve === "selectfirst" &&
                      this.setState(() => ({
                        highlightedMenuItemIndex: Ce[0],
                        highlightedMenuItemKbNavActive: !1,
                        isKeyboardHighlight: !0,
                      })),
                    ve === "selectlast" &&
                      this.setState(() => ({
                        highlightedMenuItemIndex: Ce[Ce.length - 1],
                        highlightedMenuItemKbNavActive: !1,
                        isKeyboardHighlight: !0,
                      }));
                  const Z = `${this.activeMenuId}-${this.state.highlightedMenuItemIndex}`;
                  if (ve === "select" && Z && !be) {
                    var $, N;
                    (N =
                      ($ = ae.deref()) === null || $ === void 0
                        ? void 0
                        : $.document.getElementById(Z)) === null ||
                      N === void 0 ||
                      N.click(),
                      Ae == null || Ae(V);
                  }
                  if (Se) {
                    var L, w;
                    (w =
                      (L = ae.deref()) === null || L === void 0
                        ? void 0
                        : L.document.getElementById(Se)) === null ||
                      w === void 0 ||
                      w.click(),
                      Ae == null || Ae(V);
                  }
                  oe == null ||
                    oe(V, {
                      isCurrentItemSubmenu: be,
                      closeMenu: Ae,
                      selectedMenuItem: Ee,
                    });
                }),
                (this.onMouseLeaveMenu = () => {
                  const V = this.state.highlightCanChangeOnMouseMovement
                    ? -1
                    : this.state.highlightedMenuItemIndex;
                  this.setState(() => ({
                    highlightedMenuItemIndex: V,
                    contingentHighlightedMenuItemIndex: -1,
                  }));
                }),
                (this.setAriaMenuRef = (V) => {
                  this.ariaMenuNode = V;
                }),
                (this.activateKBNav = () => {
                  var V;
                  (V = this.ariaMenuNode) === null || V === void 0 || V.focus(),
                    this.setState((X) => ({
                      highlightedMenuItemKbNavActive: !1,
                      highlightedMenuItemIndex:
                        X.highlightedMenuItemIndex === -1
                          ? this.getIndexOfNextMenuItemInDirection("selectnext")
                          : X.highlightedMenuItemIndex,
                    }));
                }),
                (this.allowHighlightChange = () => {
                  this.setState((V) => ({
                    highlightedMenuItemIndex:
                      V.contingentHighlightedMenuItemIndex,
                    highlightCanChangeOnMouseMovement: !0,
                  })),
                    this.props.allowHighlightChange &&
                      this.props.allowHighlightChange();
                }),
                (this.preventHighlightChange = () => {
                  this.setState(() => ({
                    highlightCanChangeOnMouseMovement:
                      !!this.props.resetHighlightOnChange,
                  })),
                    this.props.preventHighlightChange &&
                      this.props.preventHighlightChange();
                }),
                (this.state = {
                  highlightedMenuItemIndex: -1,
                  contingentHighlightedMenuItemIndex: -1,
                  highlightedMenuItemKbNavActive: !1,
                  highlightCanChangeOnMouseMovement: !0,
                  isKeyboardHighlight: !1,
                });
            }
          },
          "Menu"
        );
        (U.displayName = "Menu"),
          (U.defaultProps = {
            menuClassNames: void 0,
            onMenuItemSelected: o.A,
            onMenuItemSelectedBefore: o.A,
            onTriggerClose: o.A,
            onCloseSubmenu: o.A,
            width: void 0,
            noMargin: !1,
            kbNavActive: !0,
            stripTerminalSeparators: !1,
            preventHighlightChange: o.A,
            allowHighlightChange: o.A,
            resetHighlightOnChange: !1,
            "data-qa": "menu",
            "aria-label": void 0,
            onMenuKeyDown: o.A,
            onUnmount: o.A,
            isSubmenu: !1,
            isUnstyled: !1,
            autoClogProps: void 0,
            experimentSkResponsiveMenusGroupOn: !1,
            isResponsive: !0,
          });
        const R = _(
            (H) => ({
              experimentSkResponsiveMenusGroupOn: (0, c.IN)(H),
            }),
            "mapStateToProps"
          ),
          G = (0, r.A)(
            (0, C.N)(R, null, null, {
              forwardRef: !0,
            })(U)
          );
      },
      101973425: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => c,
          KJ: () => o,
          LN: () => a,
          l0: () => r,
        });
        var t = e(2208015175),
          n = e(3297051565),
          s = e.n(n),
          i = e(4724591729),
          d = e(796111729);
        const o = "_isSlackMenuItem",
          a = {
            menuCallback: s().func,
            menuCallbackId: s().number,
            highlighted: s().bool,
          };
        function r(u) {
          return !!u[o];
        }
        _(r, "isMenuItem");
        function c(u) {
          if ((0, i.Cu)()) {
            const l = u.propTypes || {};
            let m;
            Object.defineProperty(u, "propTypes", {
              get: () => m,
              set: (v) => {
                const E = u.displayName || u.name || "Component";
                (0, t.A)(a, (T, g) => {
                  const I = v[g];
                  I &&
                    I !== T &&
                    I !== T.isRequired &&
                    (0, d.Wo)().warn(
                      `${E}'s ${g} prop type doesn't match menu item`
                    );
                }),
                  (m = {
                    ...a,
                    ...v,
                  });
              },
            }),
              (u.propTypes = l);
          }
          return (u[o] = !0), u;
        }
        _(c, "wrapMenuItem");
      },
      9285382326: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => n,
        });
        var t = e(6162189146);
        const n = t.A;
      },
      6162189146: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => u,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(7026348746),
          i = e(8683010724),
          d = e(2312625946),
          o = e(653780586),
          a = e(735940183);
        const r = new a.Ay("channel_token"),
          c = _((l) => {
            let {
              type: m = o.A.Unknown,
              subtler: v = !1,
              size: E = o.o.Small,
              width: T = "random",
              invert: g = !1,
              showHash: I = !0,
              omitNonExistentTooltip: f = !1,
            } = l;
            const y = (0, n.A)("c-missing_channel", {
                "c-missing_channel--unknown": m === o.A.Unknown,
                "c-missing_channel--nonexistent": m === o.A.Nonexistent,
                "c-missing_channel--subtler": v,
                "c-missing_channel--medium": E === o.o.Medium,
                "c-missing_channel--unknown_inverted": m === o.A.Unknown && g,
                "c-missing_channel--non_existent_inverted":
                  m === o.A.Nonexistent && g,
              }),
              M = (0, n.A)("c-missing_channel--medium_hash", {
                "c-missing_channel--subtler": v,
              });
            let p;
            if (m === o.A.Unknown) p = r.t("Loading...");
            else if (m === o.A.Nonexistent)
              p = r.t(
                "You don\u2019t have access to this channel (ex. it\u2019s private or in a workspace you\u2019re not a part of), so its name isn\u2019t shown",
                {
                  fallbackHash: "b63975b75ce4c6d6e1e8b8057209fc25f351bbcf",
                }
              );
            else return null;
            if (m === o.A.Nonexistent) {
              const O = t.createElement(
                "span",
                {
                  className: "c-missing_channel--private",
                },
                t.createElement(i.A, {
                  name: "lock",
                }),
                t.createElement("span", null, r.t("private channel"))
              );
              return f
                ? O
                : t.createElement(
                    d.Ay,
                    {
                      tip: p,
                    },
                    O
                  );
            }
            return E === o.o.Medium
              ? t.createElement(
                  "div",
                  null,
                  t.createElement(
                    "div",
                    {
                      className: "c-missing_channel--medium-top",
                    },
                    I &&
                      t.createElement(
                        "span",
                        {
                          className: M,
                        },
                        t.createElement(i.A, {
                          name: "channel",
                        })
                      ),
                    t.createElement(s.A, {
                      tooltip: p,
                      isNonExistent: !1,
                      size: T,
                      className: y,
                    })
                  ),
                  t.createElement(s.A, {
                    tooltip: p,
                    isNonExistent: !1,
                    size: T,
                    className: y,
                  })
                )
              : t.createElement(s.A, {
                  tooltip: p,
                  isNonExistent: !1,
                  size: T,
                  className: y,
                });
          }, "MissingChannel");
        c.displayName = "MissingChannel";
        const u = t.memo(c);
      },
      8028620372: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(653780586);
        const i = _((o) => {
          let {
            className: a,
            isNonExistent: r = !1,
            size: c,
            subtler: u = !1,
            invert: l = !1,
            dataQa: m,
          } = o;
          const { Unknown: v, Nonexistent: E } = s.A,
            T = r ? E : v,
            g = (0, t.useMemo)(
              () => ({
                height: c,
                width: c,
              }),
              [c]
            );
          return t.createElement("span", {
            className: (0, n.A)(a, "c-missing_icon", `c-missing_icon--${T}`, {
              "c-missing_icon--unknown_inverted": T === v && l,
              "c-missing_icon--non_existent_inverted": T === E && l,
              "c-missing_icon--subtler": u,
            }),
            style: g,
            "data-qa": m,
          });
        }, "MissingIcon");
        i.displayName = "MissingIcon";
        const d = i;
      },
      7576317051: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => n,
        });
        var t = e(3229001818);
        const n = t.A;
      },
      3229001818: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => c,
        });
        var t = e(5824283093),
          n = e(7026348746),
          s = e(653780586),
          i = e(735940183);
        const d = new i.Ay("member_token"),
          { Unknown: o, Nonexistent: a } = s.A,
          r = _((u) => {
            let {
              type: l = o,
              subtler: m = !1,
              className: v,
              "data-qa": E,
            } = u;
            const T = l === o ? d.t("Loading\u2026") : d.t("Private user info");
            return t.createElement(n.A, {
              className: v ?? "",
              isNonExistent: l === a,
              subtler: m,
              tooltip: T,
              "data-qa": E,
            });
          }, "MissingMember");
        r.displayName = "MissingMember";
        const c = t.memo(r);
      },
      4816967449: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => m,
        });
        var t = e(5824283093),
          n = e(7026348746),
          s = e(653780586),
          i = e(735940183);
        const d = new i.Ay("user_group_token"),
          { Unknown: o, Nonexistent: a } = s.A,
          { Small: r, Medium: c } = s.o,
          u = _((v) => {
            let {
              invert: E = !1,
              size: T = r,
              type: g = o,
              subtler: I = !1,
            } = v;
            const f =
              g === o ? d.t("Loading...") : d.t("Private user group info");
            if (T === c) {
              const y = "\xA0\xA0\xB7\xA0\xA0";
              return t.createElement(
                "div",
                {
                  className: "p-browse_page_user_group_entity--missing",
                },
                t.createElement(
                  "div",
                  null,
                  t.createElement(n.A, {
                    tooltip: f,
                    isNonExistent: g === a,
                    size: "small",
                    invert: E,
                  }),
                  " ",
                  t.createElement(n.A, {
                    tooltip: f,
                    isNonExistent: g === a,
                    size: "small",
                    invert: E,
                  })
                ),
                t.createElement(
                  "div",
                  null,
                  t.createElement(n.A, {
                    tooltip: f,
                    isNonExistent: g === a,
                    size: "small",
                    invert: E,
                  }),
                  y,
                  t.createElement(n.A, {
                    tooltip: f,
                    isNonExistent: g === a,
                    size: "large",
                    invert: E,
                  })
                )
              );
            }
            return t.createElement(n.A, {
              tooltip: f,
              isNonExistent: g === a,
              size: "random",
              subtler: I,
              invert: E,
            });
          }, "MissingUserGroup");
        u.displayName = "MissingUserGroup";
        const m = u;
      },
      4376397139: (W, A, e) => {
        "use strict";
        e.d(A, {
          j: () => o,
          A: () => r,
        });
        var t = e(5824283093),
          n = e(6105929840),
          s = e(735940183);
        const i = new s.Ay("generic_dialog");
        function d(c) {
          let { onClick: u, ...l } = c;
          return t.createElement(n.A, {
            className: "c-multi_pane_modal__back",
            icon: "chevron-large-left",
            onClick: u,
            "aria-label": i.t("Back", {
              fallbackHash: "b52b36b7269fbfc58ec24bb724691951a3decbe8",
              fallbackHashNs: "member_actions",
            }),
            "data-qa": l["data-qa"],
          });
        }
        _(d, "ModalBackButton"), (d.displayName = "ModalBackButton");
        const o = t.memo(d);
        var a = e(1427522952);
        const r = a.A;
      },
      1427522952: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => a,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(7937864072),
          i = e(4979382452);
        function d() {
          return (
            (d =
              Object.assign ||
              function (r) {
                for (var c = 1; c < arguments.length; c++) {
                  var u = arguments[c];
                  for (var l in u)
                    Object.prototype.hasOwnProperty.call(u, l) && (r[l] = u[l]);
                }
                return r;
              }),
            d.apply(this, arguments)
          );
        }
        _(d, "_extends");
        function o(r) {
          let {
            defaultPane: c,
            panes: u,
            forceFullRerenderOnPageChange: l = !0,
            ...m
          } = r;
          const v = (0, s.A)(),
            [E, T] = (0, t.useState)({
              pane: c,
            }),
            g = (0, t.useCallback)(
              (y, M) =>
                T({
                  pane: y,
                  props: M,
                }),
              []
            ),
            { render: I, modalProps: f } = u[E.pane];
          return (
            I || v.error("MULTI_PANE_MODAL", `Unknown pane "${E.pane}"`),
            t.createElement(
              i.A,
              d({}, m, f, {
                className: (0, n.A)(
                  m.className,
                  f == null ? void 0 : f.className,
                  "c-multi_pane_modal"
                ),
              }),
              l
                ? t.createElement(
                    t.Fragment,
                    {
                      key: E.pane,
                    },
                    I({
                      switchPane: g,
                      ...E.props,
                    })
                  )
                : I({
                    switchPane: g,
                    ...E.props,
                  })
            )
          );
        }
        _(o, "MultiPaneModal"), (o.displayName = "MultiPaneModal");
        const a = o;
      },
      3501104594: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => I,
        });
        var t = e(5824283093),
          n = e(7715417323),
          s = e(348699080),
          i = e(1251589538);
        function d() {
          return (
            (d =
              Object.assign ||
              function (f) {
                for (var y = 1; y < arguments.length; y++) {
                  var M = arguments[y];
                  for (var p in M)
                    Object.prototype.hasOwnProperty.call(M, p) && (f[p] = M[p]);
                }
                return f;
              }),
            d.apply(this, arguments)
          );
        }
        _(d, "_extends");
        const o = (0, t.memo)((f) => {
          let {
            addMemberToPresenceSubscription: y = n.A,
            memberId: M,
            removeMemberFromPresenceSubscription: p = n.A,
            renderDoublePresence: O = !1,
            firstElementExtraClassName: C = "",
            ...h
          } = f;
          return (
            (0, s.A)(() => (y(M), () => p(M)), [M]),
            O
              ? t.createElement(
                  t.Fragment,
                  null,
                  t.createElement(
                    i.Ay,
                    d({}, h, {
                      className: `${h.className || ""} ${C}`,
                    })
                  ),
                  t.createElement(i.Ay, d({}, h))
                )
              : t.createElement(i.Ay, d({}, h))
          );
        });
        o.displayName = "PresenceWithSubscriptions";
        const a = o;
        var r = e(3339229351),
          c = e(92812954),
          u = e(6045540917),
          l = e(9391594207),
          m = e(5241075893),
          v = e(5795074931),
          E = e(9290914927);
        const T = _((f, y) => {
            const M = (0, E.gd)(f, y.memberId),
              p = (0, c.d)(f, y.memberId),
              O = (0, u.h)(f, y.memberId),
              C = (0, v.WR)(f) === y.memberId;
            return {
              ...y,
              userType: p,
              isDnd: O,
              isSelf: C,
              isSlackbot: y.memberId === r.Q$,
              isActive: M === "active",
            };
          }, "mapStateToProps"),
          g = _(
            (f) => ({
              addMemberToPresenceSubscription: (y) =>
                f(
                  (0, m.xz)({
                    memberId: y,
                  })
                ),
              removeMemberFromPresenceSubscription: (y) =>
                f(
                  (0, m.Fd)({
                    memberId: y,
                  })
                ),
            }),
            "mapDispatchToProps"
          ),
          I = (0, l.N)(T, g)(a);
      },
      9828955991: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => s,
        });
        var t = e(3501104594),
          n = e(1251589538);
        const s = t.A;
      },
      1251589538: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => l,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(2036354333),
          i = e(8683010724),
          d = e(1563996154),
          o = e(735940183);
        function a() {
          return (
            (a =
              Object.assign ||
              function (m) {
                for (var v = 1; v < arguments.length; v++) {
                  var E = arguments[v];
                  for (var T in E)
                    Object.prototype.hasOwnProperty.call(E, T) && (m[T] = E[T]);
                }
                return m;
              }),
            a.apply(this, arguments)
          );
        }
        _(a, "_extends");
        const r = new o.Ay("presence");
        function c(m, v) {
          return m
            ? v
              ? r.t("Active, notifications snoozed")
              : r.t("Active")
            : v
            ? r.t("Away, notifications snoozed")
            : r.t("Away");
        }
        _(c, "getPresenceText");
        const u = _((m) => {
          let {
              inheritIconSize: v = !1,
              inline: E = !0,
              isActive: T = !1,
              isDnd: g = !1,
              isSelf: I = !1,
              isSlackbot: f = !1,
              invert: y = !1,
              userType: M = "member",
              focusable: p = !1,
              showText: O = !1,
              resetIA: C = !1,
              hasNoAccess: h = !1,
              className: D,
            } = m,
            P = T
              ? {
                  name: "status-member",
                  variation: "filled",
                }
              : {
                  name: "status-member",
                };
          const S = (0, n.A)(D, "c-presence", {
              "c-presence--active": T && !y,
              "c-presence--resetIA": C,
              "c-presence--away": !T && !y,
              "c-presence--inverted": y,
              "is-inline": E,
              block: !E,
            }),
            b = c(T, g);
          h
            ? (P = {
                name: "lock",
                variation: "filled",
              })
            : M === "member"
            ? g
              ? (P = T
                  ? {
                      name: "status-member-dnd",
                      variation: "filled",
                    }
                  : {
                      name: "status-member-dnd",
                    })
              : f &&
                (P = {
                  name: "status-slackbot",
                  variation: "filled",
                })
            : M === "ra" || M === "external"
            ? g
              ? (P = T
                  ? {
                      name: "status-guest-dnd",
                      variation: "filled",
                    }
                  : {
                      name: "status-guest-dnd",
                    })
              : (P = T
                  ? {
                      name: "status-guest",
                      variation: "filled",
                    }
                  : {
                      name: "status-guest",
                    })
            : M === "ura" &&
              (g
                ? (P = T
                    ? {
                        name: "status-single-channel-guest-dnd",
                        variation: "filled",
                      }
                    : {
                        name: "status-single-channel-guest-dnd",
                      })
                : (P = T
                    ? {
                        name: "status-single-channel-guest",
                        variation: "filled",
                      }
                    : {
                        name: "status-single-channel-guest",
                      }));
          const K = t.createElement(
            "span",
            {
              className: S,
            },
            t.createElement(
              i.A,
              a({}, P, {
                title: b,
                "aria-label": b,
                "aria-hidden": "false",
                size: v ? "inherit" : "20",
                inline: E,
                "data-qa": "presence_indicator",
                "data-qa-type": P.name,
                "data-qa-presence-self": I,
                "data-qa-presence-active": T,
                "data-qa-presence-dnd": g,
              })
            )
          );
          return p
            ? t.createElement(
                t.Fragment,
                null,
                t.createElement(
                  d.Ay,
                  {
                    tip: b,
                  },
                  t.createElement(s.A, null, K)
                ),
                O &&
                  t.createElement(
                    "span",
                    {
                      className: "padding_left_50",
                      "aria-hidden": "true",
                    },
                    b
                  )
              )
            : t.createElement(
                t.Fragment,
                null,
                K,
                O &&
                  t.createElement(
                    "span",
                    {
                      className: "padding_left_50",
                      "aria-hidden": "true",
                    },
                    b
                  )
              );
        }, "Presence");
        u.displayName = "Presence";
        const l = t.memo(u);
      },
      5846524816: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => R,
        });
        var t = e(5824283093),
          n = e(2664504268),
          s = e(5255740490),
          i = e(7715417323),
          d = e(3398586081),
          o = e(5617110048),
          a = e(3391133100),
          r = e(2660476100),
          c = e(3155323475),
          u = e(45851552),
          l = e(5404505308),
          m = e(6696292586),
          v = e(4244379358),
          E = e(1162627626),
          T = e(7193040700),
          g = e(8683010724),
          I = e(2322735331),
          f = e(735940183);
        function y() {
          return (
            (y =
              Object.assign ||
              function (G) {
                for (var H = 1; H < arguments.length; H++) {
                  var F = arguments[H];
                  for (var V in F)
                    Object.prototype.hasOwnProperty.call(F, V) && (G[V] = F[V]);
                }
                return G;
              }),
            y.apply(this, arguments)
          );
        }
        _(y, "_extends");
        const M = new f.Ay("select");
        let p = _(
          class extends t.Component {
            componentDidMount() {
              const { focusOnMount: H = !1 } = this.props;
              H && this.onClick();
            }
            onKeyDown(H) {
              const {
                shiftKey: F,
                ctrlKey: V,
                metaKey: X,
                altKey: q,
                key: oe,
              } = H;
              if (!(F || V || X)) {
                if (oe === "Escape" && !q) {
                  this.onEsc(H);
                  return;
                }
                if (oe === " " && !q) {
                  this.onSpacebar(H);
                  return;
                }
                if (oe === "Enter" && !q) {
                  this.onEnter(H);
                  return;
                }
                if (oe === "ArrowUp" && q) {
                  this.onAltArrowUp(H);
                  return;
                }
                if (oe === "ArrowUp" && !q) {
                  this.onArrowUp(H);
                  return;
                }
                if (oe === "ArrowDown") {
                  this.onArrowDown(H);
                  return;
                }
                if (oe === "Home" && !q) {
                  this.onHome(H);
                  return;
                }
                if (oe === "End" && !q) {
                  this.onEnd(H);
                  return;
                }
                oe === "Tab" && !q && this.onTab();
              }
            }
            onEsc(H) {
              const { selectState: F, setSelectState: V } = this.props,
                { isExpanded: X } = F;
              X &&
                (H.stopPropagation(),
                V(() => ({
                  activeRowIndex: void 0,
                  activeOption: void 0,
                  initialActiveOption: void 0,
                  isExpanded: !1,
                })));
            }
            onArrowUp(H) {
              const { selectState: F, setSelectState: V } = this.props,
                { isExpanded: X, options: q } = F;
              if (X) return;
              H.preventDefault(),
                H.stopPropagation(),
                this.updateOptionsListPosition();
              const oe = (0, u.A)(q, (Ae) => (0, E.oj)(Ae), 0),
                z = q[oe];
              V(() => ({
                initialActiveOption: z,
                isExpanded: !0,
              }));
            }
            onAltArrowUp(H) {
              const { selectState: F } = this.props,
                { isExpanded: V } = F;
              if (!V) return;
              const X = this.props.listRef.current;
              X && (H.stopPropagation(), H.preventDefault(), X.onEnter(H));
            }
            onArrowDown(H) {
              const { selectState: F, setSelectState: V } = this.props,
                { isExpanded: X } = F;
              X ||
                (H.preventDefault(),
                H.stopPropagation(),
                this.updateOptionsListPosition(),
                V(() => ({
                  isExpanded: !0,
                })));
            }
            onHome(H) {
              const { selectState: F, setSelectState: V } = this.props,
                { isExpanded: X, options: q } = F;
              if (X) return;
              H.preventDefault(),
                H.stopPropagation(),
                this.updateOptionsListPosition();
              const oe = (0, u.A)(q, (Ae) => (0, E.oj)(Ae), 0),
                z = q[oe];
              V(() => ({
                initialActiveOption: z,
                isExpanded: !0,
              }));
            }
            onEnd(H) {
              const { selectState: F, setSelectState: V } = this.props,
                { isExpanded: X, options: q } = F;
              if (X) return;
              H.preventDefault(),
                H.stopPropagation(),
                this.updateOptionsListPosition();
              const oe = (0, l.A)(q, (Ae) => (0, E.oj)(Ae)),
                z = q[oe];
              V(() => ({
                initialActiveOption: z,
                isExpanded: !0,
              }));
            }
            onEnter(H) {
              const { selectState: F } = this.props,
                { isExpanded: V } = F;
              V || (H.stopPropagation(), this.onClick());
            }
            onSpacebar(H) {
              const { selectState: F } = this.props,
                { isExpanded: V } = F;
              V || (H.preventDefault(), H.stopPropagation(), this.onClick());
            }
            onTab() {
              const { setSelectState: H } = this.props;
              H(() => ({
                isExpanded: !1,
              }));
            }
            onClick() {
              const {
                onClick: H = i.A,
                setSelectState: F,
                selectState: V,
              } = this.props;
              this.updateOptionsListPosition(),
                H && H(),
                F(() => ({
                  isExpanded: !V.isExpanded,
                }));
            }
            updateOptionsListPosition() {
              const { selectState: H } = this.props,
                { isExpanded: F } = H;
              if (!F && this.measurePopoverEvent) {
                var V;
                (V = this.props.windowRef.deref()) === null ||
                  V === void 0 ||
                  V.dispatchEvent(this.measurePopoverEvent);
              }
            }
            renderContent(H) {
              const {
                  renderSelectedOption: F,
                  selectState: V,
                  textSelect: X = !1,
                  textSelectLabel: q = void 0,
                  selectDataQa: oe = void 0,
                  placeholderText: z = void 0,
                } = this.props,
                { selectedOption: Ae } = V,
                ae = Ae
                  ? F(Ae)
                  : t.createElement(
                      "span",
                      {
                        className: "c-select_button__placeholder",
                      },
                      z || M.t("Please select an option")
                    ),
                de =
                  X && q
                    ? t.createElement(
                        "span",
                        {
                          className: "c-select_button--text-select-label",
                        },
                        q
                      )
                    : void 0;
              return t.createElement(
                "div",
                {
                  id: H,
                  "data-qa": oe ? `${oe}-button-content` : null,
                  className: "c-select_button__content",
                  role: "none",
                },
                de,
                ae
              );
            }
            render() {
              const {
                  ariaLabelledBy: H = void 0,
                  ariaDescribedBy: F = void 0,
                  ariaLabel: V = void 0,
                  ariaControls: X = void 0,
                  selectState: q,
                  size: oe,
                  width: z,
                  textSelect: Ae = !1,
                  selectDataQa: ae = void 0,
                  classPrefix: de = void 0,
                  onBlur: ve = i.A,
                  onMouseEnter: Se = void 0,
                  onMouseLeave: Ee = void 0,
                  refToForward: be,
                } = this.props,
                {
                  isDisabled: Ce,
                  isExpanded: Z,
                  isInvalid: $,
                  selectId: N,
                  activeRowIndex: L,
                } = q,
                w = (0, s.A)("c-select_button", `c-select_button--${oe}`, {
                  "c-select_button--disabled": Ce,
                  "c-select_button--expanded": Z,
                  "c-select_button--text-select": Ae,
                  "c-select_button--invalid": $,
                  [`${de}__select_button`]: de,
                }),
                k = Ae
                  ? {}
                  : {
                      width: z,
                    },
                J = (0, a.Es)(N, "button"),
                ee = `${J}-option`,
                ne = (0, m.A)(L) && Z ? (0, a.Es)(N, `option_${L}`) : void 0;
              return t.createElement(
                "div",
                {
                  tabIndex: 0,
                  className: w,
                  style: k,
                  "data-qa": ae ? `${ae}-button` : null,
                  id: J,
                  ref: be,
                  role: "combobox",
                  "aria-disabled": Ce ? !0 : void 0,
                  "aria-labelledby": H,
                  "aria-describedby": F,
                  "aria-label": V,
                  "aria-invalid": $,
                  "aria-activedescendant": ne,
                  "aria-expanded": Z,
                  "aria-haspopup": "listbox",
                  "aria-controls": X,
                  onBlur: ve,
                  onMouseEnter: Se,
                  onMouseLeave: Ee,
                  onClick: this.onClick,
                  onKeyDown: this.onKeyDown,
                },
                this.renderContent(ee),
                t.createElement(
                  "div",
                  {
                    className: `c-select_button__icon c-select_button__icon--${oe}`,
                  },
                  t.createElement(g.A, {
                    name: "caret-down",
                    size: oe === T.hu.SMALL ? "inherit" : "20",
                  })
                )
              );
            }
            constructor(H) {
              super(H),
                (0, I.v)(this, [
                  "updateOptionsListPosition",
                  "onKeyDown",
                  "onClick",
                ]);
              const { measurePopoverEventName: F = null } = this.props;
              F && (this.measurePopoverEvent = new Event(F));
            }
          },
          "SelectButton"
        );
        p.displayName = "SelectButton";
        const O = (0, v.A)(p),
          C = t.forwardRef((G, H) =>
            t.createElement(
              O,
              y({}, G, {
                refToForward: H,
              })
            )
          );
        var h = e(4640201401),
          D = e(3650946343),
          P = e(1224315998);
        function S() {
          return (
            (S =
              Object.assign ||
              function (G) {
                for (var H = 1; H < arguments.length; H++) {
                  var F = arguments[H];
                  for (var V in F)
                    Object.prototype.hasOwnProperty.call(F, V) && (G[V] = F[V]);
                }
                return G;
              }),
            S.apply(this, arguments)
          );
        }
        _(S, "basic_select_extends");
        const b = 10,
          K = {
            onOptionSelected: {
              action: P.UiAction.SELECT,
            },
          },
          x = _(
            (G) =>
              G.map((H) => {
                let { id: F } = H;
                return F;
              }),
            "getIdsFromHintOrErrors"
          );
        let B = _(
          class extends t.Component {
            onHome(H) {
              const F = this.listRef.current;
              if (
                !F ||
                ((F.isMouseMoveEnabled = !1), !F.shouldInterceptKeyEvent(H))
              )
                return;
              const { isExpanded: V } = this.props.selectState;
              V && H.preventDefault(), F.movePrevious(0);
            }
            onEnd(H) {
              const F = this.listRef.current;
              if (
                !F ||
                ((F.isMouseMoveEnabled = !1), !F.shouldInterceptKeyEvent(H))
              )
                return;
              const { isExpanded: V } = this.props.selectState;
              V && H.preventDefault();
              const X = F.getOptionsList();
              if (!X) return;
              const q = X.length - 1;
              F.moveNext(q);
            }
            onPageUp(H) {
              const F = this.listRef.current;
              if (
                !F ||
                ((F.isMouseMoveEnabled = !1), !F.shouldInterceptKeyEvent(H))
              )
                return;
              const { isExpanded: V, activeRowIndex: X } =
                this.props.selectState;
              V && H.preventDefault();
              const q = X ? Math.floor(X / b) : 0,
                oe = q > 1 ? (q - 1) * b : 0;
              F.movePrevious(oe);
            }
            onPageDown(H) {
              const F = this.listRef.current;
              if (
                !F ||
                ((F.isMouseMoveEnabled = !1), !F.shouldInterceptKeyEvent(H))
              )
                return;
              const { activeRowIndex: V, isExpanded: X } =
                this.props.selectState;
              X && H.preventDefault();
              const q = F.getOptionsList();
              if (!q) return;
              const oe = q.length,
                z = Math.ceil(oe / b),
                Ae = V ? Math.floor(V / b) : 0,
                ae = Ae === z - 1 ? oe - 1 : (Ae + 1) * b;
              F.moveNext(ae);
            }
            renderOptionsList() {
              const {
                  ariaLabel: H,
                  onOptionSelected: F,
                  onOptionsListClose: V,
                  renderOption: X,
                  resultsInPopover: q,
                  overlayClassName: oe,
                  listClassName: z,
                  selectState: Ae,
                  setSelectState: ae,
                  width: de,
                  classPrefix: ve,
                  minOptionsListWidth: Se,
                  optionsRowHeight: Ee,
                  maxListHeight: be,
                  onScrollablePage: Ce,
                  dynamicHeight: Z,
                  forceMaxHeight: $,
                  includePadding: N,
                  includeDividers: L,
                  preventScroll: w,
                  autoClogProps: k,
                } = this.props,
                { isDisabled: J } = Ae;
              if (J) return null;
              const ee = q
                ? t.createElement(h.A, {
                    id: this.listId,
                    selectOptionsListRef: this.listRef,
                    className: z,
                    selectState: Ae,
                    setSelectState: ae,
                    renderOption: X,
                    ariaLabel: H,
                    onOptionSelected: F,
                    onOptionsListClose: V,
                    width: de,
                    inputRef: this.inputContainerRef,
                    measurePopoverEventName: this.measurePopoverEventName,
                    classPrefix: ve,
                    selectDataQa: this.fallbackDataQa,
                    minOptionsListWidth: Se,
                    optionsRowHeight: Ee,
                    popoverProps: oe
                      ? {
                          overlayClassName: oe,
                        }
                      : void 0,
                    shouldAlwaysHaveActiveRow: !0,
                    maxListHeight: be,
                    onScrollablePage: Ce,
                    dynamicHeight: Z,
                    forceMaxHeight: $,
                    includePadding: N,
                    includeDividers: L,
                    preventScroll: w,
                    keyCommandShortcuts: this.keyCommandShortcuts,
                    shouldTokenizeOnSpace: !0,
                  })
                : t.createElement(E.Ay, {
                    id: this.listId,
                    ref: this.listRef,
                    className: z,
                    selectState: Ae,
                    setSelectState: ae,
                    renderOption: X,
                    ariaLabel: H,
                    onOptionSelected: F,
                    onOptionsListClose: V,
                    width: de,
                    inputRef: this.inputContainerRef,
                    classPrefix: ve,
                    selectDataQa: this.fallbackDataQa,
                    optionsRowHeight: Ee,
                    maxListHeight: be,
                    shouldAlwaysHaveActiveRow: !0,
                    dynamicHeight: Z,
                    forceMaxHeight: $,
                    includePadding: N,
                    includeDividers: L,
                    preventScroll: w,
                    keyCommandShortcuts: this.keyCommandShortcuts,
                    shouldTokenizeOnSpace: !0,
                  });
              return k
                ? t.createElement(
                    o.A,
                    {
                      autoClogProps: k,
                      actionProps: K,
                      elementType: P.ElementType.DROPDOWN,
                    },
                    ee
                  )
                : ee;
            }
            render() {
              const {
                  resultsInPopover: H,
                  selectState: F,
                  setSelectState: V,
                  className: X,
                  textSelect: q,
                  textSelectLabel: oe,
                  focusOnMount: z,
                  onBlur: Ae,
                  ariaLabel: ae,
                  ariaLabelledBy: de,
                  ariaDescribedBy: ve,
                  buttonRef: Se,
                  errors: Ee,
                  hints: be,
                  size: Ce,
                  renderSelectedOption: Z,
                } = this.props,
                { isInvalid: $ } = F,
                N = (0, D.A)(Ee),
                L = (0, D.A)(be);
              let w;
              Ee && (w = N ? x(Ee) : void 0);
              let k;
              be && (k = L ? x(be) : void 0);
              const J = (0, a.Yk)([ve, w, k]);
              return t.createElement(
                "div",
                {
                  className: (0, s.A)(X, "c-basic-select"),
                  "data-qa": this.fallbackDataQa,
                  ref: this.inputContainerRef,
                },
                t.createElement(
                  C,
                  S({}, this.props, {
                    size: Ce,
                    renderSelectedOption: Z,
                    selectDataQa: this.fallbackDataQa,
                    selectState: F,
                    setSelectState: V,
                    measurePopoverEventName: H
                      ? this.measurePopoverEventName
                      : void 0,
                    textSelect: q,
                    textSelectLabel: oe,
                    focusOnMount: z,
                    onBlur: Ae,
                    ariaLabel: ae,
                    ariaLabelledBy: de,
                    ariaDescribedBy: J,
                    "aria-invalid": $,
                    ariaControls: this.listId,
                    ref: Se,
                    listRef: this.listRef,
                  })
                ),
                N &&
                  Ee &&
                  t.createElement(c.A, {
                    errors: Ee,
                  }),
                L &&
                  be &&
                  be.map((ne) => {
                    let { id: pe, message: Me } = ne;
                    return t.createElement(
                      r.A,
                      {
                        key: pe,
                        id: pe,
                      },
                      Me
                    );
                  }),
                this.renderOptionsList()
              );
            }
            constructor(H) {
              super(H),
                (0, I.v)(this, [
                  "renderOptionsList",
                  "onHome",
                  "onEnd",
                  "onPageUp",
                  "onPageDown",
                ]),
                (this.inputContainerRef = t.createRef()),
                (this.listRef = t.createRef());
              const { selectId: F } = H.selectState;
              (this.measurePopoverEventName = `measureSelectPopover--${F}`),
                (this.fallbackDataQa = H.selectDataQa || F),
                (this.keyCommandShortcuts = [
                  {
                    keys: ["home"],
                    handler: this.onHome,
                  },
                  {
                    keys: ["end"],
                    handler: this.onEnd,
                  },
                  {
                    keys: ["pageup"],
                    handler: this.onPageUp,
                  },
                  {
                    keys: ["pagedown"],
                    handler: this.onPageDown,
                  },
                ]),
                (this.listId = (0, n.A)());
            }
          },
          "ControlledBasicSelect"
        );
        (B.displayName = "ControlledBasicSelect"),
          (B.defaultProps = {
            renderOption: (G) => G.label,
            renderSelectedOption: (G) => G.label,
            size: T.hu.MEDIUM,
            width: 225,
            optionsRowHeight: T.bJ,
            errors: [],
            hints: [],
            ariaLabelledBy: void 0,
            ariaDescribedBy: void 0,
            placeholderText: void 0,
            selectDataQa: void 0,
            resultsInPopover: !0,
            overlayClassName: void 0,
            listClassName: void 0,
            onClick: i.A,
            onOptionSelected: i.A,
            onOptionsListClose: i.A,
            className: void 0,
            classPrefix: void 0,
            textSelect: !1,
            textSelectLabel: void 0,
            minOptionsListWidth: void 0,
            focusOnMount: !1,
            onBlur: i.A,
            maxListHeight: void 0,
            autoClogProps: void 0,
            onScrollablePage: !1,
            buttonRef: void 0,
            dynamicHeight: !1,
            forceMaxHeight: !1,
            includePadding: !0,
            includeDividers: !0,
          });
        let U = _(
          class extends t.Component {
            static getDerivedStateFromProps(H, F) {
              const { selectedOption: V } = H,
                { selectedOption: X } = F;
              return !X || (V !== void 0 && V !== X)
                ? {
                    selectedOption: V,
                  }
                : null;
            }
            setSelectState(H, F) {
              return this.setState(H, F);
            }
            render() {
              const {
                  isDisabled: H,
                  isInvalid: F,
                  isRequired: V,
                  errors: X,
                } = this.props,
                q = F || (0, D.A)(X),
                oe = (0, d.A)(() => ({
                  ...this.state,
                  isDisabled: H,
                  isInvalid: q,
                  isRequired: V,
                }));
              return t.createElement(
                B,
                S({}, this.props, {
                  selectState: oe(),
                  setSelectState: this.setSelectState,
                })
              );
            }
            constructor(H) {
              super(H),
                (this.state = {
                  activeRowIndex: void 0,
                  isDisabled: H.isDisabled,
                  isExpanded: H.isExpanded,
                  isInvalid: H.isInvalid,
                  isRequired: H.isRequired,
                  options: H.options,
                  selectId: H.selectId,
                  selectedOption: H.selectedOption,
                  selectType: T.US.BASIC,
                }),
                (0, I.v)(this, ["setSelectState"]);
            }
          },
          "BasicSelect"
        );
        (U.displayName = "BasicSelect"),
          (U.defaultProps = {
            isDisabled: !1,
            isExpanded: !1,
            isRequired: !0,
            isInvalid: !1,
            errors: [],
            hints: [],
            onOptionSelected: i.A,
            onOptionsListClose: i.A,
            selectedOption: void 0,
            selectId: `basic-select-${(0, a.r9)()}`,
            maxListHeight: void 0,
            autoClogProps: void 0,
          });
        const R = U;
      },
      5536692738: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => d,
          HH: () => s.A,
          P2: () => i.A,
          Z1: () => n.A,
        });
        var t = e(5846524816),
          n = e(2727264612),
          s = e(8274994582),
          i = e(320706952);
        const d = t.A;
      },
      7090824688: (W, A, e) => {
        "use strict";
        e.d(A, {
          $c: () => S,
          Ay: () => D,
          Gn: () => b,
          h7: () => P,
          xn: () => K,
          yW: () => C,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(7715417323),
          i = e(3398586081),
          d = e(5617110048),
          o = e(3391133100),
          a = e(2660476100),
          r = e(3155323475),
          c = e(868047630),
          u = e(1162627626),
          l = e(4640201401),
          m = e(9573786552),
          v = e(2742076544),
          E = e(3239909785),
          T = e(7193040700),
          g = e(3650946343),
          I = e(7772530643),
          f = e(2322735331),
          y = e(1224315998);
        function M() {
          return (
            (M =
              Object.assign ||
              function (x) {
                for (var B = 1; B < arguments.length; B++) {
                  var U = arguments[B];
                  for (var R in U)
                    Object.prototype.hasOwnProperty.call(U, R) && (x[R] = U[R]);
                }
                return x;
              }),
            M.apply(this, arguments)
          );
        }
        _(M, "_extends");
        const p = {
            onOptionSelected: {
              action: y.UiAction.SELECT,
            },
          },
          O = _(
            (x) =>
              x.map((B) => {
                let { id: U } = B;
                return U;
              }),
            "getIdsFromHintOrErrors"
          );
        let C = _(
          class extends t.Component {
            renderOptionsList(B) {
              var U;
              const {
                  selectState: R,
                  setSelectState: G,
                  renderOption: H,
                  emptyStateMessage: F,
                  enableLoadingState: V,
                  width: X,
                  maxOptionsListHeight: q,
                  inputRef: oe,
                  resultsInPopover: z,
                  isLoading: Ae,
                  classPrefix: ae,
                  optionsRowHeight: de,
                  onOptionsListOpen: ve,
                  onOptionsListClose: Se,
                  overlayClassName: Ee,
                  onScrollablePage: be,
                  onOptionSelected: Ce,
                  shouldOptionBeSelected: Z,
                  shouldTokenizeOnComma: $,
                  shouldTokenizeOnSpace: N,
                  autoClogProps: L,
                  dynamicHeight: w,
                  shouldAllowUnselectInMultiSelectMode: k,
                  stayExpandedAfterSelection: J,
                  optionsListFooterBannerContent: ee,
                  offsetY: ne,
                  offsetX: pe,
                } = this.props,
                { isDisabled: Me, loadInBackground: ke } = R;
              if (Me) return null;
              const ge = {
                key: `${R.selectId}-popover`,
              };
              Ee && (ge.overlayClassName = Ee), ne && (ge.offsetY = ne);
              const fe =
                (U = this.additionalInfoContainerRef) === null || U === void 0
                  ? void 0
                  : U.current;
              B && fe && (ge.offsetY = -fe.offsetHeight),
                pe && (ge.offsetX = pe);
              const re = z
                ? t.createElement(l.A, {
                    selectState: R,
                    setSelectState: G,
                    renderOption: H,
                    emptyStateMessage: F,
                    enableLoadingState: V,
                    width: X,
                    maxListHeight: q,
                    multiSelectMode: !0,
                    inputRef: oe,
                    inputContainerRef: this.inputContainerRef,
                    measurePopoverEventName: this.measurePopoverEventName,
                    isLoading: Ae && !ke,
                    classPrefix: ae,
                    selectDataQa: this.fallbackDataQa,
                    optionsRowHeight: de,
                    onOpen: ve,
                    onOptionsListClose: Se,
                    popoverProps: ge,
                    onScrollablePage: be,
                    onOptionSelected: Ce,
                    shouldOptionBeSelected: Z,
                    shouldTokenizeOnComma: $,
                    shouldTokenizeOnSpace: N,
                    autoClogProps: L,
                    dynamicHeight: w,
                    shouldAllowUnselectInMultiSelectMode: k,
                    stayExpandedAfterSelection: J,
                    footerBannerContent: ee,
                  })
                : t.createElement(u.Ay, {
                    selectState: R,
                    setSelectState: G,
                    renderOption: H,
                    emptyStateMessage: F,
                    enableLoadingState: V,
                    width: X,
                    maxListHeight: q,
                    multiSelectMode: !0,
                    classPrefix: ae,
                    selectDataQa: this.fallbackDataQa,
                    optionsRowHeight: de,
                    onOptionsListClose: Se,
                    onOptionSelected: Ce,
                    shouldOptionBeSelected: Z,
                    shouldTokenizeOnComma: $,
                    shouldTokenizeOnSpace: N,
                    dynamicHeight: w,
                    footerBannerContent: ee,
                  });
              return L
                ? t.createElement(
                    d.A,
                    {
                      elementType: y.ElementType.DROPDOWN,
                      actionProps: p,
                      autoClogProps: L,
                    },
                    re
                  )
                : re;
            }
            render() {
              const {
                selectState: B,
                setSelectState: U,
                inputRef: R,
                maxHeight: G,
                placeholderText: H,
                size: F,
                width: V,
                isLoading: X,
                focusOnMount: q,
                resultsInPopover: oe,
                onSelectedItemsChange: z,
                onKeyDown: Ae,
                onKeyUp: ae,
                className: de,
                classPrefix: ve,
                onFilterQueryChange: Se,
                onFilterQueryPaste: Ee,
                processOptions: be,
                onBlur: Ce,
                onOptionsListClosedBlur: Z,
                onOptionsListClose: $,
                expandOnFocus: N,
                ariaLabel: L,
                ariaLabelledBy: w,
                ariaDescribedBy: k,
                onTokenSelect: J,
                onInputFocused: ee,
                forceRealName: ne,
                autoClogProps: pe,
                errors: Me,
                hints: ke,
                disableIdParsing: ge,
                customizeTokenProps: fe,
                iconType: re,
                isTokenEditable: le,
                ignoreSelectAllTokensAfterMount: Re,
                disableCloseOnTab: ye,
                throttleForceRenderSelectContainer: Te,
                forceRenderSelectContainerThrottleRate: De,
              } = this.props;
              let Ue;
              Me && (Ue = (0, g.A)(Me));
              let Ke;
              ke && (Ke = (0, g.A)(ke));
              let Ze;
              Me && (Ze = Ue ? O(Me) : void 0);
              let Q;
              ke && (Q = Ke ? O(ke) : void 0);
              const ie = (0, o.Yk)([k, Ze, Q]),
                Ve = !!((Ue && Me) || (Ke && ke));
              return t.createElement(
                "div",
                {
                  className: (0, n.A)(de, "c-multi-select"),
                  "data-qa": this.fallbackDataQa,
                  ref: this.inputContainerRef,
                },
                t.createElement(c.A, {
                  selectState: B,
                  setSelectState: U,
                  size: F,
                  width: V,
                  maxHeight: G,
                  placeholderText: H,
                  isLoading: X,
                  inputRef: R,
                  focusOnMount: q,
                  measurePopoverEventName: oe && this.measurePopoverEventName,
                  onSelectedItemsChange: z,
                  selectDataQa: this.fallbackDataQa,
                  onKeyDown: Ae,
                  onKeyUp: ae,
                  classPrefix: ve,
                  onFilterQueryChange: Se,
                  onFilterQueryPaste: Ee,
                  processOptions: be,
                  onBlur: Ce,
                  onOptionsListClosedBlur: Z,
                  onOptionsListClose: $,
                  expandOnFocus: N,
                  ariaLabel: L,
                  ariaLabelledBy: w,
                  ariaDescribedBy: ie,
                  onTokenSelect: J,
                  onInputFocused: ee,
                  forceRealName: ne,
                  autoClogProps: pe,
                  customizeTokenProps: fe,
                  iconType: re,
                  disableIdParsing: ge,
                  isTokenEditable: le,
                  ignoreSelectAllTokensAfterMount: Re,
                  disableCloseOnTab: ye,
                  throttleForceRenderSelectContainer: Te,
                  forceRenderSelectContainerThrottleRate: De,
                }),
                t.createElement(
                  "div",
                  {
                    className: "flow_root",
                    ref: this.additionalInfoContainerRef,
                  },
                  Ue &&
                    Me &&
                    t.createElement(r.A, {
                      errors: Me,
                    }),
                  Ke &&
                    ke &&
                    ke.map((xe) => {
                      let { id: je, message: Fe, className: He } = xe;
                      return t.createElement(
                        a.A,
                        {
                          key: je,
                          id: je,
                          className: He,
                        },
                        Fe
                      );
                    })
                ),
                this.renderOptionsList(Ve)
              );
            }
            constructor(B) {
              super(B),
                (0, f.v)(this, ["renderOptionsList"]),
                (this.inputContainerRef = t.createRef()),
                (this.additionalInfoContainerRef = t.createRef());
              const { selectId: U } = B.selectState;
              (this.measurePopoverEventName = `measureSelectPopover--${U}`),
                (this.fallbackDataQa = B.selectDataQa || U);
            }
          },
          "ControlledMultiSelect"
        );
        (C.displayName = "ControlledMultiSelect"),
          (C.defaultProps = {
            renderOption: (x) => x.label,
            size: T.hu.MEDIUM,
            width: 300,
            optionsRowHeight: T.bJ,
            maxHeight: void 0,
            maxOptionsListHeight: void 0,
            errors: [],
            hints: [],
            placeholderText: "",
            prefix: void 0,
            emptyStateMessage: void 0,
            isLoading: !1,
            resultsInPopover: !0,
            overlayClassName: void 0,
            offsetY: void 0,
            offsetX: void 0,
            enableLoadingState: !0,
            selectDataQa: void 0,
            focusOnMount: !1,
            onSelectedItemsChange: s.A,
            onKeyDown: s.A,
            onKeyUp: s.A,
            className: void 0,
            classPrefix: void 0,
            onFilterQueryChange: s.A,
            onFilterQueryPaste: s.A,
            processOptions: s.A,
            onBlur: s.A,
            onOptionsListClosedBlur: s.A,
            ariaLabelledBy: void 0,
            ariaDescribedBy: void 0,
            expandOnFocus: !1,
            onTokenSelect: s.A,
            onInputFocused: s.A,
            forceRealName: void 0,
            onOptionsListOpen: s.A,
            onOptionsListClose: s.A,
            onScrollablePage: !1,
            onOptionSelected: s.A,
            shouldOptionBeSelected: s.A,
            shouldTokenizeOnComma: !1,
            shouldTokenizeOnSpace: !1,
            autoClogProps: void 0,
            dynamicHeight: !1,
            customizeTokenProps: {},
            iconType: void 0,
            disableIdParsing: !1,
            isTokenEditable: !1,
            ignoreSelectAllTokensAfterMount: !1,
            optionsListFooterBannerContent: void 0,
            throttleForceRenderSelectContainer: !1,
            forceRenderSelectContainerThrottleRate: void 0,
          });
        let h = _(
          class extends t.Component {
            setSelectState(B, U) {
              this.setState((R) => {
                let G = B();
                const { filter: H, options: F } = this.props;
                return (
                  G.filterQuery !== void 0 &&
                    G.filterQuery !== R.filterQuery &&
                    H &&
                    (G = H(F, G)),
                  G
                );
              }, U);
            }
            render() {
              const {
                  isDisabled: B,
                  isInvalid: U,
                  isRequired: R,
                  customControlledMultiSelectComponent: G,
                  errors: H,
                } = this.props,
                F = U || (0, g.A)(H),
                V = G ?? C,
                X = (0, i.A)(() => ({
                  ...this.state,
                  isDisabled: B,
                  isInvalid: F,
                  isRequired: R,
                }));
              return t.createElement(
                V,
                M({}, this.props, {
                  selectState: X(),
                  setSelectState: this.setSelectState,
                  inputRef: this.inputRef,
                })
              );
            }
            constructor(B) {
              super(B),
                (this.state = {
                  filterQuery: "",
                  options: B.options,
                  isDisabled: B.isDisabled,
                  isExpanded: B.isExpanded,
                  isInvalid: B.isInvalid,
                  isRequired: B.isRequired,
                  selectId: B.selectId,
                  selectedOptions: B.selectedOptions || [],
                  shouldRefocusInputAfterSelection: !!B.showConfirmDialog,
                  selectedTokenIndexes: B.selectedTokenIndexes || [],
                }),
                (this.inputRef = t.createRef()),
                (0, f.v)(this, ["setSelectState"]);
            }
          },
          "MultiSelect"
        );
        (h.displayName = "MultiSelect"),
          (h.defaultProps = {
            selectedOptions: null,
            isDisabled: !1,
            isExpanded: !1,
            isInvalid: !1,
            isRequired: !0,
            className: void 0,
            errors: [],
            hints: [],
            filter: I.k,
            selectId: `multi-select-${(0, o.r9)()}`,
            customControlledMultiSelectComponent: null,
            showConfirmDialog: void 0,
            autoClogProps: void 0,
            selectedTokenIndexes: [],
          });
        const D = h,
          P = (0, E.A)(C),
          S = (0, E.A)((0, m.A)(C)),
          b = (0, m.A)(C),
          K = (0, v.A)(C);
      },
      630868093: (W, A, e) => {
        "use strict";
        e.d(A, {
          AM: () => b,
          Ay: () => P,
          Fw: () => h,
          JJ: () => C,
          mH: () => K,
          uR: () => S,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(7715417323),
          i = e(3398586081),
          d = e(5617110048),
          o = e(3391133100),
          a = e(2660476100),
          r = e(3155323475),
          c = e(581574686),
          u = e(1162627626),
          l = e(4640201401),
          m = e(9573786552),
          v = e(2742076544),
          E = e(3239909785),
          T = e(7193040700),
          g = e(3650946343),
          I = e(7772530643),
          f = e(2322735331),
          y = e(1224315998);
        function M() {
          return (
            (M =
              Object.assign ||
              function (x) {
                for (var B = 1; B < arguments.length; B++) {
                  var U = arguments[B];
                  for (var R in U)
                    Object.prototype.hasOwnProperty.call(U, R) && (x[R] = U[R]);
                }
                return x;
              }),
            M.apply(this, arguments)
          );
        }
        _(M, "_extends");
        const p = {
            onOptionSelected: {
              action: y.UiAction.SELECT,
            },
          },
          O = _(
            (x) =>
              x.map((B) => {
                let { id: U } = B;
                return U;
              }),
            "getIdsFromHintOrErrors"
          );
        let C = _(
          class extends t.Component {
            maybeRenderOptionsList() {
              const {
                selectState: B,
                setSelectState: U,
                renderOption: R,
                width: G,
                inputRef: H,
                ariaLabel: F,
                resultsInPopover: V,
                overlayClassName: X,
                offsetY: q,
                offsetX: oe,
                onOptionSelected: z,
                className: Ae,
                classPrefix: ae,
                optionsRowHeight: de,
                onOpen: ve,
                emptyStateMessage: Se,
                minOptionsListWidth: Ee,
                maxOptionsListHeight: be,
                isLoading: Ce,
                onOptionsListClose: Z,
                onScrollablePage: $,
                enableLoadingState: N,
                autoClogProps: L,
                shouldAllowUnselectInSingleSelectMode: w,
                shouldOptionBeSelected: k,
                optionsListFooterBannerContent: J,
              } = this.props;
              if (V && (!this.props.inputRef || !this.props.inputRef.current))
                return null;
              const ee = {
                key: `${B.selectId}-popover`,
              };
              X && (ee.overlayClassName = X),
                q && (ee.offsetY = q),
                oe && (ee.offsetX = oe);
              const ne = V
                ? t.createElement(l.A, {
                    selectState: B,
                    setSelectState: U,
                    renderOption: R,
                    width: G,
                    inputRef: H,
                    ariaLabel: F,
                    onOptionSelected: z,
                    popoverProps: ee,
                    measurePopoverEventName: this.measurePopoverEventName,
                    className: Ae,
                    classPrefix: ae,
                    selectDataQa: this.fallbackDataQa,
                    optionsRowHeight: de,
                    onOpen: ve,
                    emptyStateMessage: Se,
                    minOptionsListWidth: Ee,
                    maxListHeight: be,
                    isLoading: Ce,
                    onOptionsListClose: Z,
                    onScrollablePage: $,
                    enableLoadingState: N,
                    autoClogProps: L,
                    dropdownContainer: this.dropdownContainer,
                    shouldAllowUnselectInSingleSelectMode: w,
                    shouldOptionBeSelected: k,
                    footerBannerContent: J,
                  })
                : t.createElement(u.Ay, {
                    selectState: B,
                    setSelectState: U,
                    renderOption: R,
                    width: G,
                    inputRef: H,
                    ariaLabel: F,
                    onOptionSelected: z,
                    classPrefix: ae,
                    selectDataQa: this.fallbackDataQa,
                    emptyStateMessage: Se,
                    maxListHeight: be,
                    optionsRowHeight: de,
                    onOptionsListClose: Z,
                    enableLoadingState: N,
                    shouldAllowUnselectInSingleSelectMode: w,
                    shouldOptionBeSelected: k,
                    footerBannerContent: J,
                  });
              return t.createElement(
                d.A,
                {
                  elementType: y.ElementType.DROPDOWN,
                  actionProps: p,
                  autoClogProps: L,
                },
                ne
              );
            }
            render() {
              const {
                  renderSelectedOption: B,
                  className: U,
                  classPrefix: R,
                  placeholderText: G,
                  size: H,
                  width: F,
                  selectState: V,
                  setSelectState: X,
                  inputRef: q,
                  focusOnMount: oe,
                  showDropdownIcon: z,
                  isLoading: Ae,
                  resultsInPopover: ae,
                  isDisabled: de,
                  isRequired: ve,
                  onFocus: Se,
                  onEsc: Ee,
                  ariaLabelledBy: be,
                  ariaDescribedBy: Ce,
                  inputIcon: Z,
                  maxCharacterLimit: $,
                  onOptionsListClose: N,
                  ariaLabel: L,
                  expandOnClick: w,
                  searchOnClick: k,
                  autoClogProps: J,
                  errors: ee,
                  hints: ne,
                  expandOnFocus: pe,
                  hideSelectedOptionOnDropdownOpen: Me,
                  retainPreviousSelectionOnDelete: ke,
                } = this.props,
                { isInvalid: ge } = V,
                fe = (0, g.A)(ee),
                re = (0, g.A)(ne);
              let le;
              ee && (le = fe ? O(ee) : void 0);
              let Re;
              ne && (Re = re ? O(ne) : void 0);
              const ye = (0, o.Yk)([Ce, le, Re]),
                Te = ge || fe;
              return t.createElement(
                "div",
                {
                  className: (0, n.A)(U, "c-search-select"),
                  "data-qa": this.fallbackDataQa,
                },
                t.createElement(c.Ay, {
                  selectState: {
                    ...V,
                    isInvalid: Te,
                    isRequired: ve,
                    isDisabled: de,
                  },
                  setSelectState: X,
                  renderSelectedOption: B,
                  placeholderText: G,
                  size: H,
                  width: F,
                  selectDataQa: this.fallbackDataQa,
                  inputRef: q,
                  focusOnMount: oe,
                  showDropdownIcon: z,
                  isLoading: Ae,
                  resultsInPopover: ae,
                  measurePopoverEventName: ae
                    ? this.measurePopoverEventName
                    : void 0,
                  classPrefix: R,
                  onBlur: this.onBlur,
                  onFocus: Se,
                  onEsc: Ee,
                  "aria-label": L,
                  ariaLabelledBy: be,
                  ariaDescribedBy: ye,
                  icon: Z,
                  maxCharacterLimit: $,
                  onOptionsListClose: N,
                  expandOnClick: w,
                  autoClogProps: J,
                  searchOnClick: k,
                  expandOnFocus: pe,
                  hideSelectedOptionOnDropdownOpen: Me,
                  retainPreviousSelectionOnDelete: ke,
                }),
                fe &&
                  ee &&
                  t.createElement(r.A, {
                    errors: ee,
                  }),
                re &&
                  ne &&
                  ne.map((De) => {
                    let { id: Ue, message: Ke, className: Ze } = De;
                    return (
                      Ke &&
                      t.createElement(
                        a.A,
                        {
                          key: Ue,
                          id: Ue,
                          className: Ze,
                        },
                        Ke
                      )
                    );
                  }),
                this.maybeRenderOptionsList()
              );
            }
            constructor(B) {
              super(B),
                (this.onBlur = (R) => {
                  if (this.dropdownContainer) {
                    const G = this.dropdownContainer.current;
                    if (
                      G &&
                      G.contains(R.relatedTarget) &&
                      !this.props.isInvalidStateControlled
                    ) {
                      this.props.setSelectState(() => ({
                        isInvalid: !1,
                      }));
                      return;
                    }
                  }
                  this.props.onBlur && this.props.onBlur(R);
                });
              const { selectId: U } = B.selectState;
              (this.measurePopoverEventName = `measureSelectPopover--${U}`),
                (this.fallbackDataQa = B.selectDataQa || U),
                (this.dropdownContainer = t.createRef());
            }
          },
          "ControlledSearchSelect"
        );
        (C.displayName = "ControlledSearchSelect"),
          (C.defaultProps = {
            autoClogProps: void 0,
            className: void 0,
            classPrefix: void 0,
            renderOption: (x) => x.label,
            renderSelectedOption: (x) => x.label,
            resultsInPopover: !0,
            overlayClassName: void 0,
            offsetY: void 0,
            offsetX: void 0,
            size: T.hu.MEDIUM,
            width: 360,
            optionsRowHeight: T.bJ,
            errors: [],
            hints: [],
            ariaLabel: null,
            ariaLabelledBy: void 0,
            ariaDescribedBy: void 0,
            placeholderText: void 0,
            onOptionSelected: s.A,
            selectDataQa: void 0,
            showDropdownIcon: !0,
            focusOnMount: !1,
            isLoading: !1,
            isDisabled: !1,
            isInvalid: !1,
            isRequired: !0,
            onBlur: s.A,
            onFocus: s.A,
            onEsc: s.A,
            onOpen: s.A,
            onOptionsListClose: s.A,
            emptyStateMessage: void 0,
            minOptionsListWidth: void 0,
            maxOptionsListHeight: void 0,
            inputIcon: void 0,
            maxCharacterLimit: void 0,
            onScrollablePage: !1,
            expandOnClick: !0,
            enableLoadingState: !0,
            searchOnClick: !1,
            shouldAllowUnselectInSingleSelectMode: !0,
            shouldOptionBeSelected: s.A,
            isInvalidStateControlled: !1,
          });
        const h = (0, m.A)(C);
        let D = _(
          class extends t.Component {
            setSelectState(B, U) {
              this.setState((R) => {
                let G = B();
                const { filter: H, options: F } = this.props;
                return (
                  G.filterQuery !== void 0 &&
                    G.filterQuery !== R.filterQuery &&
                    H &&
                    (G = H(F, G)),
                  G
                );
              }, U);
            }
            render() {
              const {
                  isRequired: B,
                  isInvalid: U,
                  isDisabled: R,
                  showConfirmDialog: G,
                } = this.props,
                H = G ? h : C,
                F = (0, i.A)(() => ({
                  ...this.state,
                  isInvalid: U,
                  isRequired: B,
                  isDisabled: R,
                }));
              return t.createElement(
                H,
                M({}, this.props, {
                  selectState: F(),
                  setSelectState: this.setSelectState,
                  inputRef: this.inputRef,
                })
              );
            }
            constructor(B) {
              super(B),
                (this.state = {
                  filterQuery: "",
                  displayQuery: "",
                  options: B.options,
                  selectId: B.selectId,
                  isExpanded: B.isExpanded,
                  isInvalid: B.isInvalid,
                  isDisabled: B.isDisabled,
                  selectedOption: B.selectedOption,
                }),
                (this.inputRef = this.props.inputRef
                  ? this.props.inputRef
                  : t.createRef()),
                (0, f.v)(this, ["setSelectState"]);
            }
          },
          "SearchSelect"
        );
        (D.displayName = "SearchSelect"),
          (D.defaultProps = {
            autoClogProps: void 0,
            isDisabled: !1,
            isExpanded: !1,
            isInvalid: !1,
            isRequired: !0,
            errors: [],
            hints: [],
            filter: I.k,
            onOptionSelected: s.A,
            selectId: `search-select-${(0, o.r9)()}`,
            selectedOption: void 0,
            showConfirmDialog: void 0,
            inputIcon: void 0,
            maxCharacterLimit: void 0,
            inputRef: void 0,
          });
        const P = D,
          S = (0, E.A)(C),
          b = (0, E.A)((0, m.A)(C)),
          K = (0, v.A)(C);
      },
      2727264612: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => a,
        });
        var t = e(5824283093),
          n = e(6044196829),
          s = e(8683010724),
          i = e(735940183);
        const d = new i.Ay("form_inputs"),
          o = _((r) => {
            let { onCtaClick: c, errorCopy: u, ctaCopy: l } = r;
            return t.createElement(
              "div",
              {
                className: "c-multi_select_helper_text",
              },
              t.createElement(
                "span",
                {
                  className:
                    "c-multi_select_helper_text__icon_container c-multi_select_helper_text__icon_container--error",
                },
                t.createElement(s.A, {
                  name: "warning",
                  inline: !0,
                })
              ),
              t.createElement(
                "span",
                null,
                u || d.t("Selected entries contain errors."),
                t.createElement(
                  n.A,
                  {
                    onClick: c,
                    className: "margin_left_25",
                  },
                  l || d.t("Delete all errors")
                )
              )
            );
          }, "MultiSelectErrorText");
        o.displayName = "MultiSelectErrorText";
        const a = o;
      },
      868047630: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => x,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(8571983633),
          i = e(6696292586),
          d = e(3398586081),
          o = e(5950652755),
          a = e(7715417323),
          r = e(6422693406),
          c = e(5617110048),
          u = e(9797002255),
          l = e(4244379358),
          m = e(6308822),
          v = e(5797272849),
          E = e(3391133100),
          T = e(1610251172),
          g = e(7193040700),
          I = e(561151542),
          f = e(2322735331),
          y = e(1224315998),
          M = e(571104883),
          p = e(4757466470);
        function O() {
          return (
            (O =
              Object.assign ||
              function (B) {
                for (var U = 1; U < arguments.length; U++) {
                  var R = arguments[U];
                  for (var G in R)
                    Object.prototype.hasOwnProperty.call(R, G) && (B[G] = R[G]);
                }
                return B;
              }),
            O.apply(this, arguments)
          );
        }
        _(O, "_extends");
        const C = {
            onChange: {
              action: y.UiAction.ENTER_TEXT,
            },
          },
          h = {
            onClick: {
              action: y.UiAction.CLICK,
            },
          },
          D = new Array(95).fill("").map((B, U) => String.fromCharCode(U + 32)),
          P = _(
            (B) =>
              t.createElement(
                "span",
                O(
                  {
                    className: "c-multi_select_input__space",
                  },
                  B
                ),
                "\xA0"
              ),
            "makeSpace"
          ),
          S = 1e3,
          b = {
            leading: !0,
            trailing: !1,
          };
        let K = _(
          class extends t.PureComponent {
            componentDidMount() {
              (this.inputHeight = this.getInputHeight()),
                this.props.focusOnMount && this.focus(),
                this.attachMutationObserver();
            }
            componentDidUpdate(U) {
              var R;
              const G = U.selectState,
                {
                  selectState: H,
                  onTokenSelect: F,
                  onSelectedItemsChange: V,
                  setSelectState: X,
                  hasKeyboardFocus: q,
                  isTokenEditable: oe,
                } = this.props,
                { selectedOptions: z, isExpanded: Ae, isDisabled: ae } = H,
                de = this.getSelectedTokenIndexes();
              if (
                (this.doesMutationObserverExist() ||
                  (this.attachMutationObserver(), this.focus()),
                this.props.focusOnMount &&
                  U.focusOnMount !== this.props.focusOnMount &&
                  this.focus(),
                ((R = H.filterQuery) === null || R === void 0
                  ? void 0
                  : R.length) &&
                  H.filterQuery !== G.filterQuery &&
                  this.caretPosInFilterQuery !== -1 &&
                  this.updateCaretPosInFilterQuery(),
                this.possiblyRepositionOptionsList(G),
                this.haveSelectedTokens() &&
                  !(0, p.Ay)(G.selectedTokenIndexes, de) &&
                  z &&
                  (de == null ||
                    de.forEach((Ce) => {
                      F && F(z[Ce]);
                    }),
                  Ae &&
                    X(() => ({
                      isExpanded: !1,
                    })),
                  this.scrollSelectedTokenIntoView()),
                G.isDisabled && !ae && this.moveCursorAndScrollToFilterQuery(),
                !(0, p.Ay)(G.selectedOptions, z, 3))
              ) {
                if (V && typeof z < "u") {
                  if (oe) {
                    var Ee;
                    const { isCurrentlyEditingToken: Ce } = this.state;
                    if (
                      (((Ee = G.selectedOptions) === null || Ee === void 0
                        ? void 0
                        : Ee.length) || 0) < z.length
                    ) {
                      if (Ce) {
                        const Z = z.pop();
                        Z && z.splice(this.state.editTokenIndex, 0, Z),
                          this.setTokenState(!1, 0);
                      }
                    } else Ce && z.length === 0 && this.setTokenState(!1, 0);
                  }
                  V(z);
                }
                this.scrollFilterQueryIntoView();
              }
              (this.inputHeight = this.getInputHeight()),
                q &&
                  !U.hasKeyboardFocus &&
                  (0, s.A)(H.activeRowIndex) &&
                  !this.allTokensAreSelected() &&
                  this.selectAllTokens();
            }
            componentWillUnmount() {
              this.doesMutationObserverExist() && this.removeMutationObserver(),
                this.updateQueryTimer && clearTimeout(this.updateQueryTimer),
                this.forceRenderSelectContainerThrottled.cancel &&
                  this.forceRenderSelectContainerThrottled.cancel();
            }
            onBlur(U) {
              const {
                  selectState: R,
                  setSelectState: G,
                  hideFilterQueryOnBlur: H,
                  onBlur: F,
                  onOptionsListClosedBlur: V,
                } = this.props,
                { selectedOptions: X, filterQuery: q, isExpanded: oe } = R,
                z = H && q && !oe;
              this.setState(() => ({
                focused: !1,
              })),
                this.deselectAllTokens(),
                z &&
                  G(() => ({
                    filterQuery: "",
                  })),
                (this.caretPosInFilterQuery = -1),
                (this.mouseDownOnToken = !1),
                F && F(U, X),
                !oe && V && V();
            }
            onChange() {
              this.state.composing || this.onFilterQueryChanged();
            }
            setTokenState(U, R) {
              this.props.isTokenEditable &&
                this.setState(() => ({
                  isCurrentlyEditingToken: U,
                  editTokenIndex: R,
                }));
            }
            onFilterQueryChanged() {
              const {
                  setSelectState: U,
                  selectState: R,
                  onFilterQueryChange: G,
                } = this.props,
                H = this.filterQueryRef.current,
                F = H == null ? void 0 : H.textContent,
                V = R.filterQuery !== F;
              if (this.backspaceWasPressed && !V) {
                this.backspaceWasPressed = !1;
                return;
              }
              const X = F ? F.length > 0 : !1;
              this.saveCaretPosInFilterQuery(),
                U(() => ({
                  filterQuery: F,
                  isExpanded: X,
                })),
                G && G(F);
            }
            onFocus(U) {
              this.setState(() => ({
                focused: !0,
              }));
              const {
                expandOnFocus: R,
                onInputFocused: G,
                setSelectState: H,
                onFocus: F,
              } = this.props;
              R &&
                H(() => ({
                  isExpanded: !0,
                })),
                this.mouseDownOnToken ||
                  this.moveCursorAndScrollToFilterQuery(),
                G && G(U),
                (this.mouseDownOnToken = !1),
                F && F(U);
            }
            onCaretSelectionChange() {
              this.isCaretOutSideFilterQuery()
                ? this.updateCaretPosInFilterQuery()
                : this.saveCaretPosInFilterQuery();
            }
            onRangeSelectionChange() {
              var U;
              const R =
                  (U = this.props.windowRef.deref()) === null || U === void 0
                    ? void 0
                    : U.getSelection(),
                G = R == null ? void 0 : R.getRangeAt(0),
                H = this.getTokensAsArray(),
                { selectState: F } = this.props,
                { filterQuery: V } = F,
                X = H.reduce(
                  (ve, Se, Ee) =>
                    R != null && R.containsNode(Se) ? [...ve, Ee] : ve,
                  []
                ),
                q = X.length > 0;
              if (!V && !q && !(R != null && R.isCollapsed)) {
                (this.ignoreSelectionChange = !0),
                  R == null || R.collapseToEnd();
                return;
              }
              if (this.isEntireFilterQuerySelected() && !q) {
                var oe;
                (this.ignoreSelectionChange = !0),
                  G == null ||
                    G.setStartBefore(
                      (oe = this.filterQueryRef.current) === null ||
                        oe === void 0
                        ? void 0
                        : oe.firstChild
                    );
                return;
              }
              const z = X[0],
                Ae = X[X.length - 1],
                ae = H[z],
                de = H[Ae];
              if (!V && q) {
                (this.ignoreSelectionChange = !0),
                  G == null || G.setStartBefore(ae),
                  (this.ignoreSelectionChange = !0),
                  G == null || G.setEndAfter(de),
                  this.setSelectedTokenIndexes(X);
                return;
              }
              this.isEntireFilterQuerySelected() &&
                q &&
                ((this.ignoreSelectionChange = !0),
                G == null || G.setStartBefore(ae),
                this.setSelectedTokenIndexes(X));
            }
            onSelectionChange() {
              var U;
              if (this.ignoreSelectionChange) {
                this.ignoreSelectionChange = !1;
                return;
              }
              const R =
                (U = this.props.windowRef.deref()) === null || U === void 0
                  ? void 0
                  : U.getSelection();
              let G = null;
              if (R) {
                const { type: H } = R;
                G = H;
              }
              G === "Caret" && this.onCaretSelectionChange(),
                G === "Range" && this.onRangeSelectionChange();
            }
            onKeyDown(U) {
              if (this.state.composing) return;
              const {
                  key: R,
                  ctrlKey: G,
                  metaKey: H,
                  altKey: F,
                  shiftKey: V,
                } = U,
                { selectState: X, onKeyDown: q } = this.props,
                oe = (0, M.cX)() ? H : G,
                z =
                  R === "Delete" && (((0, M.cX)() && F) || ((0, M.uF)() && oe));
              (R === "Backspace" || z) && this.onBackspace(U),
                !z && R === "Delete" && this.onDelete(U),
                R === "Escape" && this.onEscape(U),
                (R === "Home" ||
                  (H && !V && R === "ArrowLeft") ||
                  (H && !V && R === "ArrowUp")) &&
                  this.onHome(U),
                (R === "End" ||
                  (H && !V && R === "ArrowRight") ||
                  (H && !V && R === "ArrowDown")) &&
                  this.onEnd(U),
                !H &&
                  R === "ArrowLeft" &&
                  !this.leftArrowKeyWasPressed &&
                  ((this.leftArrowKeyWasPressed = !0), this.onLeftArrow(U)),
                !H && R === "ArrowRight" && this.onRightArrow(U),
                R === "Tab" && this.onTab(U),
                (R === "ArrowUp" || R === "ArrowDown") && U.preventDefault(),
                R === "Enter" && U.preventDefault(),
                !oe && D.includes(R) && this.onCharacterKey(),
                q &&
                  q(U, {
                    hasActiveRowIndex: (0, i.A)(X.activeRowIndex),
                    isExpanded: !!X.isExpanded,
                  });
            }
            onHome(U) {
              U.preventDefault();
              const { selectState: R } = this.props,
                { selectedOptions: G } = R;
              G != null && G.length
                ? this.setSelectedTokenIndexes([0], {
                    initiator: U.type,
                  })
                : this.moveCursorToFilterQuery({
                    cursorAtStart: !0,
                  });
            }
            onEnd(U) {
              U.preventDefault();
              const { selectState: R } = this.props,
                { selectedTokenIndexes: G } = R;
              G != null && G.length && this.deselectAllTokens(),
                this.moveCursorAndScrollToFilterQuery();
            }
            onKeyUp(U) {
              const { selectState: R, onKeyUp: G } = this.props,
                H = this.getSelectedTokenIndexes(),
                F = this.getTokensAsArray();
              this.shouldMoveCursorToFilterQuery &&
                (this.moveCursorToFilterQuery({
                  cursorAtStart: !0,
                }),
                (this.shouldMoveCursorToFilterQuery = !1)),
                this.updateSelectionOnKeyUp &&
                  H != null &&
                  H.length &&
                  (this.selectTextInNode(F[H[0]]),
                  (this.updateSelectionOnKeyUp = !1)),
                this.leftArrowKeyWasPressed &&
                  (this.leftArrowKeyWasPressed = !1),
                G &&
                  G(U, {
                    hasActiveRowIndex: (0, i.A)(R.activeRowIndex),
                  });
            }
            onInputContainerMouseDown(U) {
              U.preventDefault(),
                this.haveSelectedTokens() && this.deselectAllTokens(),
                this.state.focused
                  ? this.moveCursorAndScrollToFilterQuery()
                  : this.focus();
            }
            onPaste(U) {
              if (!U || !U.clipboardData) return;
              const { selectState: R } = this.props,
                { filterQuery: G } = R,
                { onFilterQueryPaste: H, setSelectState: F } = this.props;
              U.preventDefault();
              const V = U.clipboardData.getData("text"),
                X = this.caretPosInFilterQuery || 0,
                q = G || "",
                oe = (G == null ? void 0 : G.length) || 0,
                z = X <= oe ? X : oe,
                Ae = q.slice(0, z) + V + q.slice(z);
              F(() => ({
                filterQuery: Ae,
              })),
                H && H(U);
            }
            onCharacterKey() {
              if (!this.haveSelectedTokens()) return;
              const { setSelectState: U } = this.props,
                { selectState: R } = this.props,
                { filterQuery: G, selectedOptions: H } = R,
                F = this.getSelectedTokenIndexes(),
                V =
                  H == null
                    ? void 0
                    : H.filter(
                        (oe, z) => (F == null ? void 0 : F.indexOf(z)) === -1
                      ),
                X = this.getSelectedFilterQueryText(),
                q = G == null ? void 0 : G.replace(X, "");
              U(() => ({
                selectedOptions: V,
                selectedTokenIndexes: [],
                filterQuery: q,
              })),
                this.moveCursorToFilterQuery();
            }
            onBackspace(U) {
              const { setSelectState: R } = this.props,
                { selectState: G, isTokenEditable: H } = this.props,
                { filterQuery: F } = G;
              if (
                ((this.ignoreSelectionChange = !0),
                this.allTokensAreSelected() &&
                  (this.isEntireFilterQuerySelected() || !F))
              ) {
                U.preventDefault(),
                  R(() => ({
                    selectedOptions: [],
                    selectedTokenIndexes: [],
                    filterQuery: "",
                    isExpanded: !1,
                  }));
                return;
              }
              if (H && (F == null ? void 0 : F.length) === 1) {
                U.preventDefault(),
                  R(() => ({
                    filterQuery: "",
                    isExpanded: !1,
                  })),
                  this.setTokenState(!1, 0),
                  this.moveCursorToFilterQuery();
                return;
              }
              if (this.isEntireFilterQuerySelected()) {
                U.preventDefault(),
                  R(() => ({
                    filterQuery: "",
                    isExpanded: !1,
                  }));
                return;
              }
              const X = this.getTokensAsArray().length,
                q = this.getSelectedTokenIndexes(),
                oe = this.isCaretAtStartOfFilterQuery();
              if (((this.backspaceWasPressed = !0), oe && X === 0)) {
                U.preventDefault();
                return;
              }
              if (!oe && !this.haveSelectedTokens() && F) return;
              if ((U.preventDefault(), !this.haveSelectedTokens())) {
                this.setSelectedTokenIndexes([X - 1], {
                  initiator: U.type,
                });
                return;
              }
              q == null ||
                q.forEach((de) => {
                  this.removeToken(de, "backspaceKey");
                });
              const z = q && q[0],
                Ae = z === 0;
              let ae = null;
              z && (ae = Ae ? [0] : [z - 1]),
                ae != null &&
                  ae.length &&
                  this.setSelectedTokenIndexes(ae, {
                    initiator: U.type,
                  });
            }
            onDelete(U) {
              const { setSelectState: R } = this.props;
              if (
                ((this.ignoreSelectionChange = !0),
                this.isEntireFilterQuerySelected())
              ) {
                U.preventDefault(),
                  R(() => ({
                    filterQuery: "",
                    isExpanded: !1,
                  }));
                return;
              }
              const H = this.getTokensAsArray().length,
                F = this.getSelectedTokenIndexes();
              if (
                H === 0 ||
                !this.haveSelectedTokens() ||
                (U.preventDefault(),
                F == null ||
                  F.forEach((oe) => {
                    this.removeToken(oe, "deleteKey");
                  }),
                !(F != null && F.length))
              )
                return;
              const X = F[F.length - 1] === H - 1,
                q = (F == null ? void 0 : F.length) === H;
              (X || q) &&
                (this.moveCursorToFilterQuery({
                  cursorAtStart: !0,
                }),
                this.deselectAllTokens());
            }
            onEscape(U) {
              const {
                selectState: R,
                setSelectState: G,
                onOptionsListClose: H,
              } = this.props;
              R.isExpanded &&
                (U.stopPropagation(),
                H && H(),
                G(() => ({
                  isExpanded: !1,
                })));
            }
            onLeftArrow(U) {
              var R;
              const H = this.getTokensAsArray().length,
                F = this.getSelectedTokenIndexes(),
                V = (F == null ? void 0 : F.length) && F[0],
                X =
                  (R = this.props.windowRef.deref()) === null || R === void 0
                    ? void 0
                    : R.getSelection();
              let q = null,
                oe = null;
              if (X) {
                const { type: Se, anchorOffset: Ee } = X;
                (q = Se), (oe = Ee);
              }
              const z = q === "Caret",
                Ae = q === "Range";
              if (
                U.shiftKey &&
                Ae &&
                this.isRangeSelectionOfFilterQueryComplete(oe)
              ) {
                U.preventDefault();
                return;
              }
              const ae = z && this.isCaretAtStartOfFilterQuery();
              if (H === 0 && ae) {
                U.preventDefault();
                return;
              }
              if (H === 0) return;
              if (
                this.props.isTokenEditable &&
                this.state.isCurrentlyEditingToken &&
                ae
              ) {
                U.preventDefault();
                return;
              }
              if (this.allTokensAreSelected()) {
                this.setSelectedTokenIndexes([0], {
                  initiator: U.type,
                });
                return;
              }
              if (!this.haveSelectedTokens() && ae) {
                this.setSelectedTokenIndexes([H - 1], {
                  initiator: U.type,
                });
                return;
              }
              if (Ae && this.haveSelectedTokens() && V === 0) {
                U.preventDefault();
                return;
              }
              this.haveSelectedTokens() &&
                typeof V == "number" &&
                this.setSelectedTokenIndexes([V - 1], {
                  initiator: U.type,
                });
            }
            onRightArrow(U) {
              var R;
              const G =
                  (R = this.props.windowRef.deref()) === null || R === void 0
                    ? void 0
                    : R.getSelection(),
                H = (G == null ? void 0 : G.type) === "Range",
                V = this.getTokensAsArray().length,
                X = this.getSelectedTokenIndexes(),
                q = (X == null ? void 0 : X.length) && X[0];
              if (typeof q != "number") return;
              if (
                (!(H && this.haveSelectedTokens() && q < V - 1) &&
                  this.haveSelectedTokens()) ||
                this.allTokensAreSelected()
              ) {
                U.preventDefault(),
                  (this.shouldMoveCursorToFilterQuery = !0),
                  this.deselectAllTokens();
                return;
              }
              this.haveSelectedTokens() &&
                typeof q == "number" &&
                this.setSelectedTokenIndexes([q + 1], {
                  initiator: U.type,
                });
            }
            onTab(U) {
              const { shiftKey: R } = U,
                {
                  expandOnFocus: G,
                  selectState: H,
                  onOptionsListClose: F,
                  setSelectState: V,
                  disableCloseOnTab: X,
                } = this.props;
              X ||
                (F && F(),
                (R || (G && (0, s.A)(H.activeRowIndex))) &&
                  V(() => ({
                    isExpanded: !1,
                  })));
            }
            onTokenMouseDown(U, R) {
              const { focused: G, isCurrentlyEditingToken: H } = this.state,
                { selectState: F, isTokenEditable: V } = this.props;
              if (F.isDisabled) return;
              if (
                (U.preventDefault(),
                (this.mouseDownOnToken = !0),
                U.stopPropagation(),
                V && !H)
              ) {
                this.onTokenEdit(R);
                return;
              }
              G || this.focus();
              const X = this.getTokensAsArray();
              this.selectTextInNode(X[R]);
              const q = this.getSelectedTokenIndexes();
              R !== (q == null ? void 0 : q[0]) &&
                this.setSelectedTokenIndexes([R]);
            }
            onTokenEdit(U) {
              const {
                  selectState: R,
                  setSelectState: G,
                  processOptions: H,
                } = this.props,
                { selectedOptions: F } = R;
              this.setTokenState(!0, U);
              let V = "";
              F &&
                F[U] &&
                (typeof F[U].label == "string" && F[U].label !== F[U].value
                  ? (V = F[U].label)
                  : (V = F[U].value)),
                this.removeToken(U, "editToken"),
                this.updateFilterQueryValue(V),
                H &&
                  H([], V).then((X) => {
                    G(() => ({
                      isExpanded: !0,
                      options: X,
                      filterQuery: V,
                    }));
                  });
            }
            onTokenRemoveMouseDown(U, R) {
              const {
                focused: G,
                isCurrentlyEditingToken: H,
                editTokenIndex: F,
              } = this.state;
              U.preventDefault(),
                (this.mouseDownOnToken = !0),
                U.stopPropagation(),
                G || this.focus(),
                this.moveCursorToFilterQuery(),
                this.props.isTokenEditable &&
                  H &&
                  R < F &&
                  this.setTokenState(!0, F - 1),
                this.removeToken(R, "iconClick");
            }
            onFilterQueryMouseDown(U) {
              var R;
              this.state.focused &&
                !((R = this.filterQueryRef.current) === null || R === void 0) &&
                R.textContent &&
                U.stopPropagation(),
                this.haveSelectedTokens() && this.deselectAllTokens();
            }
            updateFilterQueryValue(U) {
              const { onFilterQueryChange: R } = this.props;
              this.updateQueryTimer = setTimeout(() => {
                R && R(U),
                  this.moveCursorToFilterQuery(),
                  clearTimeout(this.updateQueryTimer);
              });
            }
            onPlaceholderMouseDown() {
              this.focus();
            }
            onSelectAll(U) {
              var R;
              const { setSelectState: G } = this.props;
              U.preventDefault(),
                G(() => ({
                  selectedTokenIndexes: [],
                  isExpanded: !1,
                }));
              const H =
                (R = this.filterQueryRef) === null || R === void 0
                  ? void 0
                  : R.current;
              H != null && H.textContent && this.selectTextInNode(H);
            }
            onCompositionStart() {
              this.setState(() => ({
                composing: !0,
              }));
            }
            onCompositionEnd() {
              this.setState(() => ({
                composing: !1,
              })),
                this.onFilterQueryChanged();
            }
            onCut() {
              const { selectState: U } = this.props,
                { filterQuery: R, selectedOptions: G } = U,
                H = this.getSelectedTokenIndexes(),
                F =
                  G == null
                    ? void 0
                    : G.filter(
                        (q, oe) => (H == null ? void 0 : H.indexOf(oe)) === -1
                      ),
                V = this.getSelectedFilterQueryText(),
                X = R == null ? void 0 : R.replace(V, "");
              this.selectStateAfterMutation = {
                selectedTokenIndexes: [],
                selectedOptions: F,
                filterQuery: X,
                isExpanded: !1,
              };
            }
            onNodeAdded(U) {
              const { nodeName: R } = U;
              (R === "B" || R === "I") &&
                (this.removeMutationObserver(),
                this.runForceRenderSelectContainer());
            }
            onNodeRemoved(U) {
              const { setSelectState: R } = this.props;
              if (this.selectStateAfterMutation) {
                (this.caretPosInFilterQuery = 0),
                  this.removeMutationObserver(),
                  this.runForceRenderSelectContainer(!0),
                  R(() => this.selectStateAfterMutation),
                  (this.selectStateAfterMutation = null);
                return;
              }
              U === this.filterQueryRef.current &&
                (this.removeMutationObserver(),
                this.runForceRenderSelectContainer(!0));
            }
            onMutation(U) {
              U.forEach((R) => {
                R.addedNodes.forEach(this.onNodeAdded),
                  R.removedNodes.forEach(this.onNodeRemoved);
              });
            }
            getAriaPlaceholderText() {
              const { selectState: U, placeholderText: R } = this.props,
                { filterQuery: G, selectedOptions: H } = U;
              if (!G && !(H && H.length > 0)) return R;
            }
            getAriaActiveDescendant() {
              const { selectState: U } = this.props,
                { selectId: R, activeRowIndex: G } = U;
              return (0, i.A)(G) ? (0, E.Es)(R, `option_${G}`) : void 0;
            }
            getInputHeight() {
              const { inputRef: U } = this.props,
                R = U == null ? void 0 : U.current;
              return R ? R.offsetHeight : null;
            }
            getTokensAsArray() {
              var U, R;
              const G =
                (U = this.props.inputRef) === null ||
                U === void 0 ||
                (R = U.current) === null ||
                R === void 0
                  ? void 0
                  : R.querySelectorAll(".c-token");
              return Array.prototype.slice.call(G);
            }
            getSelectedFilterQueryText() {
              var U;
              const { selectState: R } = this.props,
                { filterQuery: G } = R;
              if ((G == null ? void 0 : G.length) === 0) return "";
              const H =
                  (U = this.props.windowRef.deref()) === null || U === void 0
                    ? void 0
                    : U.getSelection(),
                F = H == null ? void 0 : H.toString();
              if (
                !(H == null
                  ? void 0
                  : H.containsNode(this.filterQueryRef.current, !0))
              )
                return "";
              const X =
                F == null
                  ? void 0
                  : F.split(`
`);
              return X != null && X.length ? X[X.length - 1].trim() : "";
            }
            setSelectedTokenIndexes(U) {
              let { initiator: R } =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : {};
              R === "keydown" &&
                ((this.updateSelectionOnKeyUp = !0),
                (this.ignoreSelectionChange = !0));
              const { setSelectState: G } = this.props;
              G(() => ({
                selectedTokenIndexes: U,
              }));
            }
            getSelectedTokenIndexes() {
              const { selectState: U } = this.props,
                { selectedTokenIndexes: R } = U;
              return R || [];
            }
            allTokensAreSelected() {
              const U = this.getSelectedTokenIndexes(),
                R = this.getTokensAsArray();
              return U != null && U.length
                ? U.length > 0 && U.length === R.length
                : !1;
            }
            attachMutationObserver() {
              var U;
              if (
                ((this.mutationObserver = new MutationObserver(
                  this.onMutation
                )),
                !((U = this.props.inputRef) === null || U === void 0) &&
                  U.current)
              ) {
                var R;
                this.mutationObserver.observe(
                  (R = this.props.inputRef) === null || R === void 0
                    ? void 0
                    : R.current,
                  {
                    subtree: !0,
                    childList: !0,
                  }
                );
              }
            }
            deselectAllTokens() {
              this.setSelectedTokenIndexes([]);
            }
            determineCaretPosInFilterQuery() {
              const { selectState: U } = this.props,
                { filterQuery: R } = U;
              if (this.caretPosInFilterQuery === -1 || !R) return 0;
              const G = R == null ? void 0 : R.length;
              return typeof this.caretPosInFilterQuery == "number" &&
                this.caretPosInFilterQuery > G
                ? G
                : this.caretPosInFilterQuery;
            }
            doesMutationObserverExist() {
              return !!this.mutationObserver;
            }
            removeMutationObserver() {
              var U;
              (U = this.mutationObserver) === null ||
                U === void 0 ||
                U.disconnect(),
                (this.mutationObserver = null);
            }
            focus() {
              var U;
              const R =
                (U = this.props.inputRef) === null || U === void 0
                  ? void 0
                  : U.current;
              R == null || R.focus();
            }
            forceRenderSelectContainer() {
              this.setState(() => ({
                selectContainerKey: Date.now(),
              }));
            }
            runForceRenderSelectContainer(U) {
              const { isLoading: R, throttleForceRenderSelectContainer: G } =
                this.props;
              G
                ? (U &&
                    this.forceRenderSelectContainerThrottled.cancel &&
                    this.forceRenderSelectContainerThrottled.cancel(),
                  R || this.forceRenderSelectContainerThrottled())
                : this.forceRenderSelectContainer();
            }
            haveSelectedTokens() {
              var U;
              return !!(
                !(
                  (U = this.getSelectedTokenIndexes()) === null || U === void 0
                ) && U.length
              );
            }
            isCaretAtStartOfFilterQuery() {
              var U;
              if (this.isCaretOutSideFilterQuery()) return !1;
              const { selectState: R } = this.props,
                { filterQuery: G } = R;
              if (!G) return !0;
              const H =
                (U = this.props.windowRef.deref()) === null || U === void 0
                  ? void 0
                  : U.getSelection();
              let F = null;
              if (H) {
                const { anchorOffset: V } = H;
                F = V;
              }
              return F === 0;
            }
            isCaretOutSideFilterQuery() {
              var U, R;
              const G =
                (U = this.props.windowRef.deref()) === null || U === void 0
                  ? void 0
                  : U.getSelection();
              let H = null;
              if (G) {
                const { anchorNode: F } = G;
                H = F;
              }
              return !(
                !((R = this.filterQueryRef.current) === null || R === void 0) &&
                R.contains(H)
              );
            }
            isRangeSelectionOfFilterQueryComplete(U) {
              const R = this.getSelectedFilterQueryText();
              if (!R) return !1;
              const { selectState: G } = this.props,
                H = G.filterQuery;
              return !H || !U
                ? !1
                : R.substr(0, U) === (H == null ? void 0 : H.substr(0, U));
            }
            isEntireFilterQuerySelected() {
              const { selectState: U } = this.props,
                R = this.getSelectedFilterQueryText();
              return !!R && R === U.filterQuery;
            }
            moveCursorAndScrollToFilterQuery() {
              this.scrollFilterQueryIntoView(), this.moveCursorToFilterQuery();
            }
            moveCursorToFilterQuery() {
              let { cursorAtStart: U } =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : {
                      cursorAtStart: !1,
                    };
              var R, G, H, F;
              const V = document.createRange(),
                X =
                  (R = this.props.windowRef.deref()) === null || R === void 0
                    ? void 0
                    : R.getSelection();
              X == null || X.removeAllRanges();
              const q =
                  (G = this.filterQueryRef) === null || G === void 0
                    ? void 0
                    : G.current,
                oe = (q == null ? void 0 : q.firstChild) || q,
                z = U
                  ? 0
                  : (F =
                      q == null || (H = q.textContent) === null || H === void 0
                        ? void 0
                        : H.trim()) === null || F === void 0
                  ? void 0
                  : F.length;
              oe !== null && typeof z == "number" && V.setStart(oe, z),
                V.collapse(!0),
                X == null || X.addRange(V);
            }
            possiblyRepositionOptionsList(U) {
              if (!this.measurePopoverEvent) return;
              const { selectState: R } = this.props,
                G = R.isExpanded && !U.isExpanded,
                H = this.getInputHeight(),
                F = this.inputHeight !== H;
              if (G || F) {
                var V;
                (V = this.props.windowRef.deref()) === null ||
                  V === void 0 ||
                  V.dispatchEvent(this.measurePopoverEvent);
              }
            }
            removeToken(U, R) {
              const {
                  selectState: G,
                  setSelectState: H,
                  isTokenEditable: F,
                } = this.props,
                { selectedOptions: V, pendingQueries: X, filterQuery: q } = G,
                oe = X ? X.length : 0,
                z = V && V[U] && V[U].queryId,
                ae =
                  z && oe
                    ? X == null
                      ? void 0
                      : X.filter((de) => {
                          let { queryId: ve } = de;
                          return ve !== z;
                        })
                    : X;
              H(() => ({
                selectedOptions:
                  V == null ? void 0 : V.filter((de, ve) => ve !== U),
                selectedTokenIndexes: [],
                removalInitiator: R,
                removedItemIndex: U,
                pendingQueries: ae,
              })),
                F &&
                  this.state.isCurrentlyEditingToken &&
                  this.updateFilterQueryValue(q);
            }
            saveCaretPosInFilterQuery() {
              var U;
              const R =
                (U = this.props.windowRef.deref()) === null || U === void 0
                  ? void 0
                  : U.getSelection();
              this.caretPosInFilterQuery = R == null ? void 0 : R.anchorOffset;
            }
            scrollFilterQueryIntoView() {
              const U = this.filterQueryRef.current;
              U &&
                U != null &&
                U.scrollIntoView &&
                (U == null ||
                  U.scrollIntoView({
                    block: "nearest",
                  }));
            }
            scrollSelectedTokenIntoView() {
              const U = this.getSelectedTokenIndexes();
              if (!this.haveSelectedTokens()) return;
              const R = this.getTokensAsArray();
              if (!(U != null && U.length)) return;
              const G = U[U.length - 1],
                H = R[G];
              H &&
                H.scrollIntoView &&
                H.scrollIntoView({
                  block: "nearest",
                });
            }
            selectAllTokens() {
              var U;
              if (this.state.ignoreSelectAllTokensAfterMount) {
                this.setState(() => ({
                  ignoreSelectAllTokensAfterMount: !1,
                }));
                return;
              }
              const R = this.getTokensAsArray();
              if (R.length === 0) return;
              const G = R[0],
                H = R[R.length - 1],
                F =
                  (U = this.props.windowRef.deref()) === null || U === void 0
                    ? void 0
                    : U.getSelection(),
                V = document.createRange();
              F == null || F.removeAllRanges(),
                V.setStartBefore(G),
                V.setEndAfter(H),
                F == null || F.addRange(V);
            }
            selectTextInNode(U) {
              var R;
              if (!U) return;
              const G =
                  (R = this.props.windowRef.deref()) === null || R === void 0
                    ? void 0
                    : R.getSelection(),
                H = document.createRange();
              (this.ignoreSelectionChange = !0),
                G == null || G.removeAllRanges();
              const F = (0, M.cX)() ? U : U.querySelector(".c-token__content");
              H.selectNode(F),
                (this.ignoreSelectionChange = !0),
                G == null || G.addRange(H);
            }
            updateCaretPosInFilterQuery() {
              var U, R;
              const G =
                (U = this.filterQueryRef) === null || U === void 0
                  ? void 0
                  : U.current;
              if (!G) return;
              const H = document.createRange(),
                F =
                  (R = this.props.windowRef.deref()) === null || R === void 0
                    ? void 0
                    : R.getSelection();
              F == null || F.removeAllRanges();
              const V = this.determineCaretPosInFilterQuery();
              typeof V == "number" &&
                H.setStart((G == null ? void 0 : G.firstChild) || G, V),
                H.collapse(!0),
                F == null || F.addRange(H);
            }
            renderFilterQuery() {
              const {
                  selectState: U,
                  isTokenEditable: R,
                  size: G,
                } = this.props,
                { filterQuery: H, isDisabled: F } = U,
                { isCurrentlyEditingToken: V, editTokenIndex: X } = this.state,
                q = F ? void 0 : this.onFilterQueryMouseDown,
                oe = (0, n.A)({
                  "c-multi_select_input__filter_query": !0,
                  [`c-multi_select_input__${G}_filter_query--edit`]: R && V,
                });
              return t.createElement(
                "span",
                {
                  className: oe,
                  ref: this.filterQueryRef,
                  onMouseDown: q,
                  key: X,
                },
                H
              );
            }
            renderInput() {
              const {
                  selectState: U,
                  selectDataQa: R,
                  inputRef: G,
                  ariaLabelledBy: H,
                  ariaLabel: F,
                  autoClogProps: V,
                  iconType: X,
                  isTokenEditable: q,
                } = this.props,
                {
                  selectId: oe,
                  isDisabled: z,
                  isExpanded: Ae,
                  isInvalid: ae,
                } = U,
                de = z ? void 0 : 0,
                ve = z ? void 0 : this.getAriaActiveDescendant(),
                Se = !z,
                Ee = Se,
                be = z ? void 0 : this.onFocus,
                Ce = z ? void 0 : this.onBlur,
                Z = z ? void 0 : this.onChange,
                $ = z ? void 0 : this.onPaste,
                N = z ? void 0 : this.onKeyDown,
                L = z ? void 0 : this.onKeyUp,
                w = z ? void 0 : this.onSelectionChange,
                k = z ? void 0 : this.onCut,
                J = z ? void 0 : this.onCompositionStart,
                ee = z ? void 0 : this.onCompositionEnd,
                ne = (0, n.A)({
                  "c-multi_select_input__input": !0,
                  "c-multi_select_input__input--with-icon": !!X,
                }),
                pe = t.createElement(
                  "div",
                  {
                    role: "combobox",
                    "aria-disabled": z,
                    "aria-autocomplete": "list",
                    "aria-expanded": Ae,
                    "aria-controls": (0, E.Es)(oe, "listbox"),
                    "aria-activedescendant": ve,
                    "aria-labelledby": H,
                    "aria-label": F,
                    "aria-placeholder": this.getAriaPlaceholderText(),
                    "aria-invalid": ae,
                    id: oe,
                    className: ne,
                    tabIndex: de,
                    contentEditable: Se,
                    suppressContentEditableWarning: Ee,
                    "data-qa": R ? `${R}-input` : void 0,
                    ref: G,
                    onFocus: be,
                    onBlur: Ce,
                    onInput: Z,
                    onCompositionStart: J,
                    onCompositionEnd: ee,
                    onPaste: $,
                    onKeyDown: N,
                    onKeyUp: L,
                    onSelect: w,
                    onCut: k,
                    "aria-multiline": !1,
                  },
                  P(),
                  q && this.state.isCurrentlyEditingToken
                    ? this.renderEditableTokens()
                    : t.createElement(
                        t.Fragment,
                        null,
                        this.renderTokens(),
                        this.renderFilterQuery()
                      ),
                  P({
                    contentEditable: !1,
                  })
                );
              return V
                ? t.createElement(
                    c.A,
                    {
                      autoClogProps: V,
                      actionProps: C,
                      elementType: y.ElementType.INPUT,
                    },
                    pe
                  )
                : pe;
            }
            renderLoadingIndicator() {
              const { isLoading: U, size: R } = this.props;
              return U
                ? t.createElement(m.A, {
                    className: "c-multi_select_input__spinner",
                    color: "blue",
                    size: R === g.hu.LARGE ? g.hu.LARGE : g.hu.MEDIUM,
                  })
                : null;
            }
            renderPlaceholder() {
              const {
                  selectState: U,
                  placeholderText: R,
                  iconType: G,
                } = this.props,
                { filterQuery: H, selectedOptions: F, isDisabled: V } = U;
              if (this.state.composing || H || (F && F.length > 0)) return null;
              const X = V ? void 0 : this.onPlaceholderMouseDown,
                q = (0, n.A)({
                  "c-multi_select_input__placeholder": !0,
                  "c-multi_select_input__placeholder--with-icon": !!G,
                });
              return t.createElement(
                "div",
                {
                  "aria-hidden": "true",
                  className: q,
                  onMouseDown: X,
                },
                R
              );
            }
            renderToken(U, R) {
              let {
                icon: G,
                svgIcon: H,
                value: F,
                label: V,
                hoverText: X,
                isLoading: q,
                isError: oe,
                isMemberError: z,
                isTeamError: Ae,
                isUnknown: ae,
                emailTeam: de,
              } = U;
              const {
                  forceRealName: ve,
                  size: Se,
                  selectState: Ee,
                  customizeTokenProps: be,
                  disableIdParsing: Ce,
                } = this.props,
                Z = this.getSelectedTokenIndexes(),
                $ = (Z == null ? void 0 : Z.indexOf(R)) !== -1,
                {
                  isDisabled: N,
                  restrictedSelectedTokenIndexes: L,
                  disabledSelectedTokenIndexes: w,
                  invalidSelectedTokenIndexes: k,
                } = Ee,
                J = !!L && (L == null ? void 0 : L.indexOf(R)) !== -1,
                ee = !!w && (w == null ? void 0 : w.indexOf(R)) !== -1,
                ne = !!k && (k == null ? void 0 : k.indexOf(R)) !== -1,
                pe = N || ee,
                Me = pe ? void 0 : (fe) => this.onTokenMouseDown(fe, R),
                ke = pe ? void 0 : () => this.renderTokenRemoveIcon(R),
                ge = Se;
              return t.createElement(
                t.Fragment,
                null,
                t.createElement(
                  I.A,
                  O(
                    {
                      "data-qa": "multi_select_token_wrapper",
                      className: "c-multi_select_input__token",
                    },
                    Me
                      ? {
                          onMouseDown: Me,
                        }
                      : {},
                    {
                      isDisabled: pe,
                      entityId: F,
                      label: V,
                      hoverText: X,
                      isLoading: q,
                      isError: oe,
                      isMemberError: z,
                      isTeamError: Ae,
                      isUnknown: ae,
                    },
                    Se
                      ? {
                          size: ge,
                        }
                      : {},
                    {
                      isSelected: $,
                    },
                    ke
                      ? {
                          renderIcon: ke,
                        }
                      : {},
                    {
                      forceRealName: ve,
                      icon: G,
                      svgIcon: H,
                      tabIndex: -1,
                      contentEditable: !1,
                    },
                    be,
                    {
                      disableIdParsing: Ce,
                    },
                    de
                      ? {
                          emailTeam: de,
                        }
                      : {},
                    {
                      isRestricted: J,
                      isInvalid: ne,
                    }
                  )
                ),
                "\xA0"
              );
            }
            renderTokenRemoveIcon(U) {
              return t.createElement(
                c.A,
                {
                  actionProps: h,
                  elementType: y.ElementType.BUTTON,
                },
                t.createElement(T.A, {
                  type: "times-medium",
                  className: "c-multi_select_input__remove_token",
                  id: "multi_select_input__remove_token",
                  "data-qa": "token_remove_icon",
                  "aria-hidden": "true",
                  onMouseDown: (0, d.A)((R) => {
                    this.onTokenRemoveMouseDown(R, U);
                  }),
                })
              );
            }
            renderTokens() {
              const { selectedOptions: U } = this.props.selectState;
              return U == null
                ? void 0
                : U.map((R, G) =>
                    t.createElement(
                      t.Fragment,
                      {
                        key: R.key || R.value,
                      },
                      this.renderToken(R, G)
                    )
                  );
            }
            renderEditableTokens() {
              const { isCurrentlyEditingToken: U, editTokenIndex: R } =
                  this.state,
                G = this.renderTokens() || [],
                H = this.renderFilterQuery();
              return U ? G.splice(R, 0, H) : G == null || G.push(H), G;
            }
            renderIcon() {
              const { iconType: U } = this.props;
              return U
                ? t.createElement(T.A, {
                    type: U,
                    inline: !0,
                  })
                : null;
            }
            render() {
              const {
                  maxHeight: U,
                  width: R,
                  selectState: G,
                  classPrefix: H,
                  size: F,
                } = this.props,
                { isDisabled: V, isInvalid: X, selectedOptions: q } = G,
                oe = q == null ? void 0 : q.length,
                z = (0, n.A)("c-multi_select_input", {
                  "c-multi_select_input--disabled": V,
                  "c-multi_select_input--focused": this.state.focused && !V,
                  "c-multi_select_input--large": F === g.hu.LARGE,
                  "c-multi_select_input--invalid": X,
                  "c-multi_select_input--initial": !oe,
                  [`${H}__multi_select_input`]: H,
                  [v.E.large]: F === g.hu.LARGE,
                }),
                Ae = V ? void 0 : this.onInputContainerMouseDown;
              return t.createElement(
                "div",
                {
                  className: z,
                  style: {
                    width: R,
                    maxHeight: U,
                  },
                  onMouseDown: Ae,
                  key: this.state.selectContainerKey,
                },
                this.renderIcon(),
                this.renderInput(),
                this.renderLoadingIndicator(),
                this.renderPlaceholder()
              );
            }
            constructor(U) {
              super(U),
                (0, f.v)(this, [
                  "onFocus",
                  "onBlur",
                  "onChange",
                  "onPaste",
                  "onKeyDown",
                  "onKeyUp",
                  "onInputContainerMouseDown",
                  "onFilterQueryMouseDown",
                  "onPlaceholderMouseDown",
                  "onSelectionChange",
                  "onCut",
                  "onMutation",
                  "onNodeRemoved",
                  "onNodeAdded",
                  "onCompositionStart",
                  "onCompositionEnd",
                ]);
              var R;
              (this.state = {
                composing: !1,
                focused: !1,
                selectContainerKey: Date.now(),
                isCurrentlyEditingToken: !1,
                editTokenIndex: 0,
                ignoreSelectAllTokensAfterMount:
                  (R = U.ignoreSelectAllTokensAfterMount) !== null &&
                  R !== void 0
                    ? R
                    : !1,
              }),
                (this.caretPosInFilterQuery = -1),
                (this.ignoreSelectionChange = !1),
                (this.updateSelectionOnKeyUp = !1),
                U.measurePopoverEventName &&
                  (this.measurePopoverEvent = new Event(
                    U.measurePopoverEventName
                  ));
              var G;
              (this.forceRenderSelectContainerThrottled = (0, o.A)(
                this.forceRenderSelectContainer,
                (G = U.forceRenderSelectContainerThrottleRate) !== null &&
                  G !== void 0
                  ? G
                  : S,
                b
              )),
                (this.filterQueryRef = t.createRef());
            }
          },
          "MultiSelectInput"
        );
        (K.displayName = "MultiSelectInput"),
          (K.defaultProps = {
            inputRef: t.createRef(),
            maxHeight: 96,
            placeholderText: void 0,
            onKeyDown: a.A,
            onKeyUp: a.A,
            size: g.hu.MEDIUM,
            width: 300,
            isLoading: !1,
            classPrefix: void 0,
            selectDataQa: void 0,
            focusOnMount: !1,
            measurePopoverEventName: null,
            onSelectedItemsChange: a.A,
            onFilterQueryChange: a.A,
            onFilterQueryPaste: a.A,
            ariaLabelledBy: void 0,
            ariaLabel: void 0,
            expandOnFocus: !1,
            onTokenSelect: a.A,
            onInputFocused: a.A,
            forceRealName: void 0,
            onOptionsListClose: a.A,
            processOptions: (B) => r.S.resolve(B),
            isTokenEditable: !1,
            hideFilterQueryOnBlur: !0,
            autoClogProps: void 0,
            customizeTokenProps: {},
            iconType: void 0,
            disableIdParsing: !1,
            hasKeyboardFocus: !1,
            onFocus: a.A,
            onBlur: a.A,
            onOptionsListClosedBlur: a.A,
            ignoreSelectAllTokensAfterMount: !1,
            throttleForceRenderSelectContainer: !1,
            forceRenderSelectContainerThrottleRate: S,
          });
        const x = (0, l.A)((0, u.A)(K));
      },
      8274994582: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => o,
        });
        var t = e(5824283093),
          n = e(6308822),
          s = e(735940183);
        const i = new s.Ay("form_inputs"),
          o = _((a) => {
            let { count: r, clientTheme: c, spinnerSize: u = "large" } = a;
            return t.createElement(
              "div",
              {
                className:
                  "c-multi_select_helper_text c-multi_select_helper_text--loading",
              },
              t.createElement(
                "span",
                {
                  className: "c-multi_select_helper_text__icon_container",
                },
                t.createElement(n.A, {
                  color: c === "dark" ? "white" : "blue",
                  size: u,
                  inline: !0,
                })
              ),
              i.t("Loading {count, plural, =1 {# entry} other {# entries}}", {
                count: r,
              })
            );
          }, "MultiSelectLoadingText");
      },
      320706952: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => o,
        });
        var t = e(5824283093),
          n = e(8683010724),
          s = e(735940183);
        const i = new s.Ay("form_inputs"),
          o = _((a) => {
            let { count: r } = a;
            return t.createElement(
              "div",
              {
                className: "c-multi_select_helper_text",
              },
              t.createElement(
                "span",
                {
                  className:
                    "c-multi_select_helper_text__icon_container c-multi_select_helper_text__icon_container--unknown",
                },
                t.createElement(n.A, {
                  name: "emoji-missing",
                  variation: "filled",
                  inline: !0,
                })
              ),
              i.t(
                "{count, plural, =1 {# entry has} other {# entries have}} multiple matches. Select entry to resolve.",
                {
                  count: r,
                }
              )
            );
          }, "MultiSelectUnknownText");
      },
      581574686: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => C,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(6696292586),
          i = e(7715417323),
          d = e(1641606663),
          o = e(6308822),
          a = e(3391133100),
          r = e(2219904496),
          c = e(5166368300),
          u = e(7193040700),
          l = e(8683010724),
          m = e(2322735331),
          v = e(735940183),
          E = e(7640408795);
        function T() {
          return (
            (T =
              Object.assign ||
              function (h) {
                for (var D = 1; D < arguments.length; D++) {
                  var P = arguments[D];
                  for (var S in P)
                    Object.prototype.hasOwnProperty.call(P, S) && (h[S] = P[S]);
                }
                return h;
              }),
            T.apply(this, arguments)
          );
        }
        _(T, "_extends");
        const g = new v.Ay("select"),
          I = 1e4,
          f = {
            ArrowLeft: !0,
            ArrowRight: !0,
          },
          y = {
            ArrowUp: !0,
            ArrowDown: !0,
          },
          M = {
            Backspace: !0,
            Delete: !0,
          };
        let p = _(
          class extends t.Component {
            componentDidMount() {
              const {
                  inputRef: D,
                  focusOnMount: P,
                  expandOnFocus: S,
                } = this.props,
                b = D && D.current;
              P &&
                (!this.state.hasFocus && b && b.focus(),
                S && this.showOptionsList());
            }
            componentDidUpdate(D, P) {
              const {
                  inputRef: S,
                  selectState: b,
                  focusOnMount: K,
                } = this.props,
                { selectedOption: x } = b,
                { selectState: B } = D,
                { selectedOption: U } = B,
                R = S && S.current,
                { hasFocus: G, focusedViaMouse: H } = this.state;
              x &&
                G &&
                !H &&
                (x !== U || !P.hasFocus) &&
                setTimeout(() => {
                  R == null || R.select();
                }, 50),
                K &&
                  D.focusOnMount !== K &&
                  (this.state.hasFocus || R == null || R.focus());
            }
            componentWillUnmount() {
              this.blurTimeout && clearTimeout(this.blurTimeout);
            }
            onClick(D) {
              const {
                  inputRef: P,
                  selectState: S,
                  onClick: b,
                  expandOnClick: K,
                  searchOnClick: x,
                } = this.props,
                { isDisabled: B, isExpanded: U, selectedOption: R } = S;
              if (B) return;
              const G = P && P.current;
              this.state.hasFocus ||
                (this.setState(() => ({
                  focusedViaMouse: !0,
                })),
                G == null || G.focus()),
                (K || R) &&
                  !U &&
                  this.showOptionsList({
                    searchOnClick: x,
                  }),
                b && b(D);
            }
            onBlur(D) {
              const { onBlur: P } = this.props;
              this.setState(
                () => ({
                  hasFocus: !1,
                  focusedViaMouse: !1,
                  cursorVisible: !1,
                }),
                () => {
                  P && P(D);
                }
              );
            }
            onFocus(D) {
              const { onFocus: P } = this.props;
              this.setState(
                () => ({
                  hasFocus: !0,
                }),
                () => {
                  P && P(D);
                }
              );
            }
            onInputChanged(D) {
              const {
                  selectState: P,
                  setSelectState: S,
                  expandOnClick: b,
                  retainPreviousSelectionOnDelete: K,
                } = this.props,
                { isExpanded: x, selectedOption: B } = P;
              if (this.backspaceOrDeletePressed && D.length === 0 && B) {
                S(() => ({
                  filterQuery: D,
                  displayQuery: D,
                  ...(K
                    ? {}
                    : {
                        selectedOption: null,
                      }),
                }));
                return;
              }
              x
                ? !b &&
                  !D &&
                  S(() => ({
                    isExpanded: !1,
                  }))
                : this.showOptionsList(),
                S(() => ({
                  filterQuery: D,
                  displayQuery: D,
                }));
            }
            onKeyPressedEnter(D) {
              this.props.selectState.isExpanded
                ? D.preventDefault()
                : (this.showOptionsList(), D.stopPropagation());
            }
            onKeyPressedEscape(D) {
              const {
                selectState: P,
                setSelectState: S,
                resultsInPopover: b,
                onEsc: K,
                onOptionsListClose: x,
              } = this.props;
              P.isExpanded &&
                b &&
                (D.stopPropagation(),
                K && K(),
                x && x(),
                S(() => ({
                  isExpanded: !1,
                })));
            }
            onKeyPressedTab() {
              const {
                setSelectState: D,
                onOptionsListClose: P,
                selectState: S,
              } = this.props;
              P && P();
              const { activeRowIndex: b, initialActiveOption: K } = S;
              typeof b != "number" &&
                !K &&
                D(() => ({
                  isExpanded: !1,
                }));
            }
            onUpOrDownPressed(D) {
              D.preventDefault(),
                this.props.selectState.isExpanded ||
                  (this.showOptionsList(), D.stopPropagation());
            }
            onWrapperKeyDown(D) {
              const { key: P } = D;
              if (y[P]) {
                this.onUpOrDownPressed(D);
                return;
              }
              if (P === "Enter") {
                this.onKeyPressedEnter(D);
                return;
              }
              if (P === "Escape") {
                this.onKeyPressedEscape(D);
                return;
              }
              P === "Tab" && this.onKeyPressedTab();
            }
            onInputKeyDown(D) {
              const { key: P } = D,
                S = M[P],
                b = f[P],
                K = S || b || (0, E.A)(D);
              this.setState(() => ({
                cursorVisible: K,
              })),
                (this.backspaceOrDeletePressed = S);
            }
            maybeRenderIconOrLoading() {
              const {
                showDropdownIcon: D,
                isLoading: P,
                size: S,
                expandOnClick: b,
              } = this.props;
              return P
                ? t.createElement(o.A, {
                    className: "c-select_input__spinner",
                    color: "blue",
                    size: S === u.hu.LARGE ? "large" : "medium",
                  })
                : !D || !b
                ? null
                : t.createElement(
                    "span",
                    {
                      className: "c-select_input__icon",
                    },
                    t.createElement(l.A, {
                      name: "caret-down",
                      size: "20",
                    })
                  );
            }
            showOptionsList() {
              let D =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : {};
              const { searchOnClick: P } = D;
              this.updateOptionsListPosition(),
                this.props.setSelectState(() => ({
                  isExpanded: !0,
                  searchOnClick: P,
                }));
            }
            updateOptionsListPosition() {
              const { selectState: D } = this.props,
                { isExpanded: P } = D;
              if (!P && this.measurePopoverEvent) {
                var S;
                (S = this.context.windowRef.deref()) === null ||
                  S === void 0 ||
                  S.dispatchEvent(this.measurePopoverEvent);
              }
            }
            renderInputContent() {
              const {
                  selectState: D,
                  renderSelectedOption: P,
                  classPrefix: S,
                  selectDataQa: b,
                  hideSelectedOptionOnDropdownOpen: K,
                } = this.props,
                { isExpanded: x, selectedOption: B } = D;
              if (this.state.cursorVisible || !B || (x && (K || D.filterQuery)))
                return null;
              const U = (0, n.A)("c-select_input__content", {
                [`${S}__select_input_content`]: S,
              });
              return t.createElement(
                "div",
                {
                  className: U,
                  "data-qa": b ? `${b}-input-content` : null,
                },
                t.createElement(
                  "span",
                  {
                    className: "c-select_input__content_text",
                  },
                  P && P(B)
                )
              );
            }
            renderTextInput() {
              const {
                  selectDataQa: D,
                  inputRef: P,
                  classPrefix: S,
                  ariaLabelledBy: b,
                  ariaDescribedBy: K,
                  icon: x,
                  maxCharacterLimit: B,
                  size: U,
                  selectState: R,
                  autoClogProps: G,
                  hideSelectedOptionOnDropdownOpen: H,
                } = this.props,
                {
                  activeRowIndex: F,
                  filterQuery: V,
                  isDisabled: X,
                  isExpanded: q,
                  isInvalid: oe,
                  isRequired: z,
                  selectedOption: Ae,
                  selectId: ae = "",
                } = R;
              let de;
              V || (!q && Ae) || (Ae && q && !H)
                ? (de = null)
                : (de =
                    this.props.placeholderText ||
                    g.t("Please select an option"));
              const ve = q && (0, s.A)(F) ? (0, a.Es)(ae, `option_${F}`) : null,
                Se = !this.state.cursorVisible && Ae && !q,
                Ee = (0, n.A)("c-select_input", {
                  "c-select_input--offscreen": Se,
                  "c-select_input--invalid": oe,
                  [`${S}__select_input`]: S,
                }),
                be = (0, a.Yk)([K, (0, a.Es)(ae, "initial-focus")]),
                Z =
                  !this.state.focusedViaMouse &&
                  this.state.hasFocus &&
                  !this.state.cursorVisible &&
                  H
                    ? V || (Ae && Ae.label)
                    : V,
                $ = {
                  spellCheck: !1,
                  className: Ee,
                  id: ae,
                  name: ae,
                  "aria-activedescendant": ve,
                  "aria-autocomplete": "list",
                  "aria-expanded": q,
                  "aria-owns": (0, a.Es)(ae, "listbox"),
                  "aria-required": z,
                  "aria-label": this.props["aria-label"],
                  "aria-labelledby": b,
                  "aria-describedby": be,
                  isInvalid: oe,
                  autoComplete: "off",
                  isDisabled: X,
                  onChange: this.onInputChanged,
                  placeholder: de,
                  value: Z || "",
                  "data-qa": D ? `${D}-input` : null,
                  onFocus: this.onFocus,
                  onBlur: this.onBlur,
                  onKeyDown: this.onInputKeyDown,
                  role: "combobox",
                  autoClogProps: G,
                };
              return x || B
                ? t.createElement(
                    r.A,
                    T({}, $, {
                      icon: x,
                      size: U,
                      maxCharacterLimit: B,
                      showError: !1,
                      type: "text",
                      inputRef: P,
                      isInvalid: oe,
                    })
                  )
                : t.createElement(
                    c.A,
                    T({}, $, {
                      ref: P,
                    })
                  );
            }
            render() {
              const {
                  icon: D,
                  size: P,
                  selectDataQa: S,
                  width: b,
                  classPrefix: K,
                  showDropdownIcon: x,
                  selectState: B,
                } = this.props,
                { isInvalid: U } = B,
                R = (0, n.A)("c-select_input__wrapper", {
                  [`c-select_input--${P}`]: P,
                  "c-select_input--with_icon_right": x,
                  "c-select_input--with_icon_left": !!D,
                  "c-select_input--invalid": U,
                  [`${K}__select_input_wrapper`]: K,
                }),
                G = (0, n.A)("c-select_input__input_container", {
                  [`${K}__select_input_container`]: K,
                });
              return t.createElement(
                "div",
                {
                  role: "presentation",
                  className: R,
                  style: {
                    width: b,
                  },
                  onClick: this.onClick,
                  onKeyDown: this.onWrapperKeyDown,
                  "data-qa": S ? `${S}-wrapper` : null,
                },
                t.createElement(
                  "div",
                  {
                    className: G,
                  },
                  this.renderTextInput(),
                  this.renderInputContent()
                ),
                t.createElement(
                  "div",
                  {
                    className: "c-select_input__icon_container",
                  },
                  this.maybeRenderIconOrLoading()
                )
              );
            }
            constructor(D) {
              super(D),
                (0, m.v)(this, [
                  "onClick",
                  "onFocus",
                  "onBlur",
                  "onUpOrDownPressed",
                  "onKeyPressedEnter",
                  "onKeyPressedEscape",
                  "onKeyPressedTab",
                  "onWrapperKeyDown",
                  "onInputKeyDown",
                  "onInputChanged",
                  "showOptionsList",
                  "updateOptionsListPosition",
                ]),
                (this.selectInputRef = t.createRef()),
                (this.backspaceOrDeletePressed = !1),
                (this.measurePopoverEvent = void 0),
                (this.blurTimeout = void 0),
                (this.state = {
                  hasFocus: !1,
                  focusedViaMouse: !1,
                  cursorVisible: !1,
                }),
                D.measurePopoverEventName &&
                  (this.measurePopoverEvent = new Event(
                    D.measurePopoverEventName
                  ));
            }
          },
          "SelectInput"
        );
        (p.displayName = "SelectInput"),
          (p.defaultProps = {
            autoClogProps: void 0,
            inputRef: null,
            onClick: i.A,
            placeholderText: void 0,
            width: 360,
            selectDataQa: void 0,
            showDropdownIcon: !0,
            icon: void 0,
            maxCharacterLimit: void 0,
            focusOnMount: !1,
            isLoading: !1,
            classPrefix: void 0,
            onFocus: i.A,
            onBlur: i.A,
            onEsc: i.A,
            resultsInPopover: !0,
            ariaLabelledBy: void 0,
            ariaDescribedBy: void 0,
            onOptionsListClose: i.A,
            expandOnClick: !0,
            searchOnClick: !1,
            expandOnFocus: !0,
            hideSelectedOptionOnDropdownOpen: !0,
          }),
          (p.contextType = d.Mn);
        const O = {
            SelectInput: p,
          },
          C = p;
      },
      1162627626: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => L,
          oj: () => $,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(45851552),
          i = e(6696292586),
          d = e(2003990933),
          o = e(5404505308),
          a = e(7715417323),
          r = e(3478664464),
          c = e(166097325),
          u = e(1699044291),
          l = e(3398586081),
          m = e(9268023148),
          v = e(9636077426),
          E = e(6882609392),
          T = e(3652828077),
          g = e(1641606663),
          I = e(6308822),
          f = e(3391133100),
          y = e(7193040700),
          M = e(1398359918),
          p = e(8786006583),
          O = e(3821598679);
        function C(w) {
          let k =
            arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
          return (0, M.A)(w, (ee, ne) => {
            if (ee.type === "divider")
              return {
                type: "divider",
              };
            if (ee.options) {
              const { options: pe, label: Me, ...ke } = ee,
                ge = `${ee.label.toLowerCase()}${y.Sx}${(0, O.A)()}`,
                fe = [
                  {
                    type: "heading",
                    label: ee.label,
                    group: ge,
                    optionsCount: (ee.options && ee.options.length) || 0,
                    extras: ke,
                  },
                ].concat(
                  ee.options.map((re, le) => {
                    const Re = {
                      type: "option",
                      option: re,
                      optgroup: ge,
                    };
                    return (
                      le === 0 && (Re.isFirstChild = !0),
                      le === ee.options.length - 1 && (Re.isLastChild = !0),
                      Re
                    );
                  })
                );
              if (k) {
                if (
                  (w[ne - 1] &&
                    w[ne - 1].value &&
                    !w[ne - 1].options &&
                    fe.unshift({
                      type: "divider",
                    }),
                  (0, p.A)(w) === ee)
                )
                  return fe;
                fe.push({
                  type: "divider",
                });
              }
              return fe;
            }
            return {
              type: "option",
              option: ee,
            };
          });
        }
        _(C, "formatOptions");
        var h = e(2322735331),
          D;
        (function (w) {
          (w[(w.ELEMENT = 1)] = "ELEMENT"),
            (w[(w.ATTRIBUTE = 2)] = "ATTRIBUTE"),
            (w[(w.TEXT = 3)] = "TEXT"),
            (w[(w.CDATA_SECTION = 4)] = "CDATA_SECTION"),
            (w[(w.ENTITY_REFERENCE = 5)] = "ENTITY_REFERENCE"),
            (w[(w.ENTITY = 6)] = "ENTITY"),
            (w[(w.PROCESSING_INSTRUCTION = 7)] = "PROCESSING_INSTRUCTION"),
            (w[(w.COMMENT = 8)] = "COMMENT"),
            (w[(w.DOCUMENT = 9)] = "DOCUMENT"),
            (w[(w.DOCUMENT_TYPE = 10)] = "DOCUMENT_TYPE"),
            (w[(w.DOCUMENT_FRAGMENT = 11)] = "DOCUMENT_FRAGMENT"),
            (w[(w.NOTATION = 12)] = "NOTATION");
        })(D || (D = {}));
        const P = new Set(["INPUT", "TEXTAREA", "SELECT"]),
          S = new Set([...P, "BUTTON"]),
          b = "http://www.w3.org/1999/xhtml",
          K = "http://www.w3.org/2000/svg";
        function x(w) {
          return (w == null ? void 0 : w.nodeType) === D.TEXT;
        }
        _(x, "isTextNode");
        function B(w) {
          return (w == null ? void 0 : w.nodeType) === D.ELEMENT;
        }
        _(B, "isElement");
        function U(w) {
          return B(w) && w.namespaceURI === b;
        }
        _(U, "isHtmlElement");
        function R(w) {
          return B(w) && w.namespaceURI === K;
        }
        _(R, "isSvgElement");
        function G(w) {
          return U(w) || R(w);
        }
        _(G, "isHtmlOrSvgElement");
        function H(w) {
          return U(w) || R(w);
        }
        _(H, "isElementCssInlineStyle");
        function F(w) {
          return X(w, "a");
        }
        _(F, "isAnchorElement");
        function V(w) {
          return U(w) && S.has(w.tagName);
        }
        _(V, "isInteractiveElement");
        function X(w, k) {
          return U(w) && w.localName === k;
        }
        _(X, "isHtmlElementWithTagName");
        function q(w) {
          return x(w) ? w : null;
        }
        _(q, "asTextNode");
        function oe(w) {
          return B(w) ? w : null;
        }
        _(oe, "asElement");
        function z(w) {
          return U(w) ? w : null;
        }
        _(z, "asHtmlElement");
        function Ae(w, k) {
          const J = w;
          return J.hasAttribute && J.hasAttribute(k);
        }
        _(Ae, "hasAttribute");
        function ae(w, k) {
          return Ae(w, `data-${k}`);
        }
        _(ae, "hasData");
        var de = e(735940183),
          ve = e(8359728598),
          Se = e(6979898962),
          Ee = e(4757466470);
        function be() {
          return (
            (be =
              Object.assign ||
              function (w) {
                for (var k = 1; k < arguments.length; k++) {
                  var J = arguments[k];
                  for (var ee in J)
                    Object.prototype.hasOwnProperty.call(J, ee) &&
                      (w[ee] = J[ee]);
                }
                return w;
              }),
            be.apply(this, arguments)
          );
        }
        _(be, "_extends");
        const Ce = new de.Ay("select"),
          Z = _((w) => {
            var k;
            return (
              w.type !== "heading" &&
              w.type !== "divider" &&
              !(
                !(w == null || (k = w.option) === null || k === void 0) &&
                k.nonInteractive
              )
            );
          }, "isKeyboardNavigableOption"),
          $ = _((w) => {
            var k;
            return (
              !w.isDisabled &&
              !(
                !(w == null || (k = w.option) === null || k === void 0) &&
                k.nonInteractive
              )
            );
          }, "isSelectableOption");
        let N = _(
          class extends Se.B {
            componentDidMount() {
              this.initKeyCommands();
              const {
                  focusOnMount: k = !1,
                  selectState: J,
                  setSelectState: ee,
                  shouldIncludeActiveOption: ne = !1,
                } = this.props,
                { selectType: pe } = J;
              pe === y.US.BASIC && k && this.onOpen();
              const Me = this.getInitalActiveRowIndex(),
                ke = this.list.current;
              ee(() => ({
                activeRowIndex: Me,
                ...(ne
                  ? {
                      activeOption: this.getOptionFromList(Me),
                    }
                  : null),
              })),
                Me !== -1 && ke && ke.scrollToRow(Me),
                this.removeAriaAttrsFromGridNode();
            }
            componentWillUnmount() {
              const { focusOnMount: k = !1, preventScroll: J = !1 } =
                  this.props,
                { selectType: ee } = this.props.selectState;
              this.keyCommands && this.keyCommands.reset(),
                k &&
                  ee === y.US.BASIC &&
                  this.previousFocus &&
                  this.getCurrentActiveElement() !== this.previousFocus &&
                  this.previousFocus.focus({
                    preventScroll: J,
                  });
            }
            componentDidUpdate(k) {
              var J;
              const {
                  selectState: ee,
                  setSelectState: ne,
                  shouldIncludeActiveOption: pe = !1,
                  dynamicHeight: Me = !1,
                  optionsShallowEqualComparisonDepth: ke = 4,
                  shouldRerenderOnOptionChange: ge = !1,
                } = this.props,
                { filterQuery: fe, options: re, initialActiveOption: le } = ee,
                Re = !(0, Ee.Ay)(k.selectState.options, re, ke),
                ye = fe !== k.selectState.filterQuery;
              if (Re || ye) {
                const Ue =
                  typeof le < "u"
                    ? this.getActiveRowIndex()
                    : this.getFirstSelectableRowIndex();
                ne(() => ({
                  activeRowIndex: Ue,
                  ...(pe
                    ? {
                        activeOption: this.getOptionFromList(Ue),
                      }
                    : null),
                }));
                const Ke = Ue || Ue === 0;
                this.list.current &&
                  Ke &&
                  (this.list.current.forceUpdateGrid(),
                  this.list.current.scrollToRow(Ue));
              }
              if (Re && !ye && ge) {
                var Te;
                (Te = this.list.current) === null ||
                  Te === void 0 ||
                  Te.recomputeRowHeights();
              }
              if (
                Me &&
                (ee == null ? void 0 : ee.options) !==
                  ((J = k.selectState) === null || J === void 0
                    ? void 0
                    : J.options)
              ) {
                var De;
                (De = this.cellMeasurerCache) === null ||
                  De === void 0 ||
                  De.clearAll(),
                  this.list.current && this.list.current.recomputeRowHeights();
              }
              this.removeAriaAttrsFromGridNode();
            }
            getInitalActiveRowIndex() {
              const { selectState: k, multiSelectMode: J = !1 } = this.props,
                { selectedOption: ee, initialActiveOption: ne } = k;
              return J || !ee
                ? this.getFirstSelectableRowIndex()
                : ne
                ? this.getActiveRowIndex()
                : (0, s.A)(this.getOptionsList(), (pe) => {
                    var Me;
                    return (
                      Z(pe) &&
                      (pe == null || (Me = pe.option) === null || Me === void 0
                        ? void 0
                        : Me.value) === ee.value
                    );
                  });
            }
            getActiveRowIndex() {
              const { selectState: k } = this.props,
                { initialActiveOption: J } = k;
              if (!J) return;
              const ee = (0, s.A)(this.getOptionsList(), (ne) => {
                var pe;
                return (
                  Z(ne) &&
                  (ne == null || (pe = ne.option) === null || pe === void 0
                    ? void 0
                    : pe.value) === J.value
                );
              });
              if (ee >= 0) return ee;
            }
            getCurrentActiveElement() {
              var k, J;
              return (J =
                (k = this.context.windowRef.deref()) === null || k === void 0
                  ? void 0
                  : k.document.activeElement) !== null && J !== void 0
                ? J
                : null;
            }
            getFirstSelectableRowIndex() {
              const {
                  selectState: k,
                  multiSelectMode: J = !1,
                  customOptionCompare: ee,
                  shouldAlwaysHaveActiveRow: ne = !1,
                } = this.props,
                { filterQuery: pe } = k,
                Me = this.getOptionsList();
              let ke;
              if ((pe || ne) && Me.length) {
                const ge = (0, s.A)(
                  Me,
                  (fe) => Z(fe) && !this.isOptionSelected(k, fe.option, J, ee),
                  0
                );
                ge !== -1 && (ke = ge);
              }
              return ke;
            }
            getRowHeight(k) {
              var J;
              const {
                optionsRowHeight: ee = y.bJ,
                headingRowHeight: ne = null,
                dividerRowHeight: pe = y.r3,
              } = this.props;
              return k.option && (0, i.A)(k.option.height)
                ? Number(k.option.height)
                : k.type && k.type === "divider"
                ? pe
                : k.type === "heading" &&
                  (0, i.A)(
                    (J = k.extras) === null || J === void 0 ? void 0 : J.height
                  )
                ? Number(k.extras.height)
                : k.type && k.type === "heading" && ne !== null
                ? ne
                : ee;
            }
            getClassName(k, J) {
              const { unstyled: ee = !1 } = this.props;
              return ee && J ? (0, n.A)(J) : (0, n.A)(J, k);
            }
            getOptionFromList(k) {
              const J = this.getOptionsList();
              return (0, d.A)(J, `[${k}].option`, null);
            }
            getOptionsList() {
              const {
                  multiSelectMode: k = !1,
                  selectState: J,
                  includeDividers: ee = !0,
                } = this.props,
                {
                  options: ne,
                  isRequired: pe,
                  selectedOption: Me,
                  filterQuery: ke,
                  minQueryLength: ge,
                } = J;
              let fe = [];
              return (
                ge && ge > 0 && Me && !ke && (fe = [Me]),
                ne && (!k && Me && !pe ? (fe = [y.az, ...ne]) : (fe = ne)),
                (fe = [...this.formatOptions(fe, ee)]),
                fe
              );
            }
            getDataQaTag(k, J) {
              const { selectDataQa: ee = void 0, selectState: ne } = this.props,
                { isRequired: pe } = ne,
                Me = k.value ? k.value : k.label;
              let ke = "";
              typeof Me == "string" &&
                (ke = Me.replace(/[^\w\s]/g, "")
                  .replace(/\s/g, "_")
                  .toLowerCase());
              const ge = pe ? J : J - 1;
              return k.value
                ? `${ee}_option_${ge}`
                : `${ee}_option_header_${ke}`;
            }
            getNextActiveRowIndex(k) {
              const J = this.getOptionsList();
              if (J && !J.length) return -1;
              const ee = J.length - 1;
              if (k === ee) return -1;
              const ne = (0, i.A)(k) ? k + 1 : 0,
                pe = (0, s.A)(J, Z, ne);
              return pe !== -1 && J[pe] ? pe : -1;
            }
            getPreviousActiveRowIndex(k) {
              if (k === 0) return -1;
              const J = this.getOptionsList();
              if (J && !J.length) return -1;
              const ee = J.length - 1,
                ne = (0, i.A)(k) ? k - 1 : ee,
                pe = (0, o.A)(J, Z, ne);
              return pe !== -1 && J[pe] ? pe : -1;
            }
            getArialabelForItem(k) {
              var J, ee, ne, pe;
              const { isFirstChild: Me, isLastChild: ke, optgroup: ge } = k;
              if (!ge) return null;
              const fe = Ce.t("First item in group {group}, {value}", {
                  group: ge && ge.split(y.Sx).slice(0, -1).join("-"),
                  value:
                    typeof ((J = k.option) === null || J === void 0
                      ? void 0
                      : J.label) == "string"
                      ? (ee = k.option) === null || ee === void 0
                        ? void 0
                        : ee.label
                      : "",
                }),
                re = Ce.t("Last item in group {group}, {value}", {
                  group: ge && ge.split(y.Sx).slice(0, -1).join("-"),
                  value:
                    typeof ((ne = k.option) === null || ne === void 0
                      ? void 0
                      : ne.label) == "string"
                      ? (pe = k.option) === null || pe === void 0
                        ? void 0
                        : pe.label
                      : "",
                });
              return Me ? fe : ke ? re : null;
            }
            getEmptyStateMessage() {
              const { emptyStateMessage: k, selectState: J } = this.props,
                { filterQuery: ee, minQueryLength: ne } = J;
              if (k) return k(ee);
              if (ne) {
                if (!ee) return Ce.t("Type to search\u2026");
                if (ee.length < ne) return Ce.t("Keep typing\u2026");
              }
              return Ce.t("No items");
            }
            getContainerStyle() {
              return {
                position: "relative",
                overflow: "visible",
              };
            }
            getListStyle(k) {
              return {
                padding: k ? y.Hy : void 0,
                boxSizing: "content-box",
              };
            }
            onArrowDown(k) {
              if (
                ((this.isMouseMoveEnabled = !1),
                !this.shouldInterceptKeyEvent(k))
              )
                return;
              const { isExpanded: J, activeRowIndex: ee } =
                this.props.selectState;
              J && k.preventDefault();
              const ne = this.getNextActiveRowIndex(ee);
              (0, i.A)(ne) && ne !== -1 && this.moveNext(ne);
            }
            onArrowUp(k) {
              if (
                ((this.isMouseMoveEnabled = !1),
                !this.shouldInterceptKeyEvent(k))
              )
                return;
              const { isExpanded: J, activeRowIndex: ee } =
                this.props.selectState;
              J && k.preventDefault();
              const ne = this.getPreviousActiveRowIndex(ee);
              (0, i.A)(ne) && ne !== -1 && this.movePrevious(ne);
            }
            onEsc(k) {
              const { shouldIncludeActiveOption: J = !1 } = this.props;
              if (
                !this.props.selectState.isExpanded ||
                !this.shouldInterceptKeyEvent(k)
              )
                return;
              k.preventDefault();
              const { onOptionsListClose: ee = a.A } = this.props;
              ee && ee(),
                this.props.setSelectState(() => ({
                  isExpanded: !1,
                  activeRowIndex: void 0,
                  ...(J
                    ? {
                        activeOption: null,
                      }
                    : null),
                  filterQuery: "",
                  displayQuery: "",
                }));
            }
            onEnter(k) {
              if (
                this.props.shouldDisableKeyPressedEnter ||
                !this.shouldInterceptKeyEvent(k)
              )
                return;
              k.preventDefault();
              const { activeRowIndex: J, initialActiveOption: ee } =
                  this.props.selectState,
                ne = this.getOptionsList();
              let pe;
              typeof J == "number" && (pe = (ne[J] && ne[J].option) || ne[J]),
                (pe = pe || ee),
                !(pe && !$(pe)) && (this.onOptionSelected(pe), this.onClose(k));
            }
            onTab(k) {
              const { selectState: J, disableSelectOnTab: ee = !1 } =
                this.props;
              if (ee || !this.shouldInterceptKeyEvent(k) || !J.isExpanded)
                return;
              const { onKeyPressedTab: ne = a.A } = this.props;
              if (ne && ne !== a.A) {
                ne(event);
                return;
              }
              const { activeRowIndex: pe, initialActiveOption: Me } = J,
                ke = this.getOptionsList();
              let ge;
              typeof pe == "number" &&
                (ge = (ke[pe] && ke[pe].option) || ke[pe]),
                (ge = ge || Me),
                ge && k.preventDefault(),
                !(ge && !$(ge)) && this.onOptionSelected(ge);
            }
            onShiftTab(k) {
              if (!this.shouldInterceptKeyEvent(k)) return;
              const { onKeyPressedShiftTab: J = a.A } = this.props;
              J && J !== a.A && J(k);
            }
            onMouseEnteredOption(k) {
              const { shouldIncludeActiveOption: J = !1 } = this.props;
              this.isMouseMoveEnabled &&
                (this.props.setSelectState(() => ({
                  activeRowIndex: k,
                  ...(J
                    ? {
                        activeOption: this.getOptionFromList(k),
                      }
                    : null),
                })),
                this.list.current && this.list.current.forceUpdateGrid());
            }
            onMouseLeftOption() {
              const { shouldAlwaysHaveActiveRow: k = !1 } = this.props;
              !this.isMouseMoveEnabled || k || this.clearActive();
            }
            onOptionClicked(k) {
              this.onOptionSelected(k, !0);
            }
            onScroll(k) {
              const { onScroll: J = a.A } = this.props;
              J && J(k);
            }
            onOptionSelected(k) {
              let J =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : !1;
              const {
                onOptionSelected: ee = a.A,
                onOptionUnselected: ne = a.A,
                selectState: pe,
                setSelectState: Me,
                multiSelectMode: ke = !1,
                inputRef: ge,
                customOptionCompare: fe,
                shouldIncludeActiveOption: re = !1,
                shouldOptionBeSelected: le,
                shouldAllowUnselectInMultiSelectMode: Re = !1,
                shouldAllowUnselectInSingleSelectMode: ye = !0,
                stayExpandedAfterSelection: Te = !1,
              } = this.props;
              if (k && $(k)) {
                if (le && le(k) === !1) {
                  Me(
                    () => ({
                      activeRowIndex: void 0,
                      filterQuery: "",
                      isExpanded: !1,
                    }),
                    () => {
                      ee(k);
                    }
                  );
                  return;
                }
                if (k.value === y.yk) this.onClearSelectedOption();
                else if (ke) {
                  const {
                    selectedOptions: De,
                    shouldRefocusInputAfterSelection: Ue,
                  } = pe;
                  if (!this.isOptionSelected(pe, k, ke, fe) && De)
                    Me(
                      () => ({
                        selectedOptions: [...De, k],
                        activeRowIndex: void 0,
                        ...(re
                          ? {
                              activeOption: null,
                            }
                          : null),
                        filterQuery: "",
                        isExpanded: Te,
                      }),
                      () => {
                        ee && ee(k);
                      }
                    );
                  else if (Re) {
                    const Ze = (0, r.A)(
                      De,
                      [k],
                      (Q, ie) => Q.value === ie.value
                    );
                    Me(
                      () => ({
                        selectedOptions: Ze,
                        activeRowIndex: void 0,
                        ...(re
                          ? {
                              activeOption: null,
                            }
                          : null),
                        filterQuery: "",
                        isExpanded: Te,
                      }),
                      () => {
                        ne && ne(k);
                      }
                    );
                  }
                  !Ue &&
                    !k.fromUnknown &&
                    ge &&
                    ge.current &&
                    ge.current.focus();
                } else {
                  const De = {
                    isExpanded: !1,
                    filterQuery: "",
                    displayQuery: "",
                    selectedOption: ye ? null : pe.selectedOption,
                  };
                  !(0, c.A)(pe.selectedOption, k) && (De.selectedOption = k),
                    Me(
                      () => ({
                        ...De,
                      }),
                      () => {
                        ee && ee(k, J);
                      }
                    ),
                    pe.shouldRefocusInputAfterSelection &&
                      ge &&
                      ge.current &&
                      ge.current.focus();
                }
              }
            }
            onOpen() {
              const { focusOnMount: k = !1, selectState: J } = this.props,
                { selectType: ee } = J;
              (!k && ee !== y.US.BASIC) ||
                ((this.previousFocus = this.getCurrentActiveElement()),
                this.listBody &&
                  this.listBody.current &&
                  this.listBody.current.focus());
            }
            onClose(k) {
              k.key === "Escape" && this.onEsc(k);
              const { focusOnMount: J = !1, preventScroll: ee = !1 } =
                  this.props,
                { selectType: ne } = this.props.selectState;
              (!J && ne !== y.US.BASIC) ||
                (this.previousFocus &&
                  this.getCurrentActiveElement() !== this.previousFocus &&
                  this.previousFocus.focus({
                    preventScroll: ee,
                  }));
            }
            onClearSelectedOption() {
              const {
                  selectState: k,
                  setSelectState: J,
                  onOptionSelected: ee = a.A,
                  multiSelectMode: ne = !1,
                  onMultiSelectClear: pe = void 0,
                } = this.props,
                { selectedOption: Me, selectedOptions: ke } = k;
              let ge = !1;
              Me
                ? (J(
                    () => ({
                      selectedOption: null,
                      isExpanded: !1,
                      filterQuery: "",
                      displayQuery: "",
                    }),
                    () => {
                      ee &&
                        ee({
                          value: null,
                        });
                    }
                  ),
                  (ge = !0))
                : ne &&
                  ke &&
                  ke.length &&
                  (J(
                    () => ({
                      selectedOptions: [],
                      isExpanded: !1,
                      filterQuery: "",
                      displayQuery: "",
                    }),
                    () => {
                      pe && pe();
                    }
                  ),
                  (ge = !0)),
                this.list.current && ge && this.list.current.forceUpdateGrid();
            }
            clearDynamicRowHeight(k) {
              var J;
              (J = this.cellMeasurerCache) === null ||
                J === void 0 ||
                J.clear(k, 0),
                this.list.current && this.list.current.recomputeRowHeights(k);
            }
            clearActive() {
              const { shouldIncludeActiveOption: k = !1 } = this.props;
              this.props.setSelectState(() => ({
                activeRowIndex: void 0,
                ...(k
                  ? {
                      activeOption: null,
                    }
                  : null),
              })),
                this.list.current && this.list.current.forceUpdateGrid();
            }
            enableMouseMove() {
              this.isMouseMoveEnabled = !0;
            }
            focusNode(k) {
              k && this.getCurrentActiveElement() !== k && k.focus();
            }
            isFirstItemUnselectable() {
              const k = this.getOptionsList();
              return !Z(k[0]);
            }
            initKeyCommands() {
              var k;
              if (this.keyCommands) return;
              const {
                  shouldTokenizeOnComma: J,
                  shouldTokenizeOnSpace: ee,
                  keyCommandShortcuts: ne,
                } = this.props,
                pe = ["enter"];
              J && pe.push("comma"), ee && pe.push("space");
              const Me = [
                  {
                    keys: ["down"],
                    handler: this.onArrowDown,
                  },
                  {
                    keys: pe,
                    handler: this.onEnter,
                    filter: (ge) =>
                      ge.code.toLowerCase() === "comma" && ge.key !== ",",
                  },
                  {
                    keys: ["up"],
                    handler: this.onArrowUp,
                  },
                  {
                    keys: ["tab"],
                    handler: this.onTab,
                  },
                  {
                    keys: ["shift+tab"],
                    handler: this.onShiftTab,
                  },
                ],
                ke = ne ? Me.concat(ne) : Me;
              (this.keyCommands = new E.A(
                (k = this.context.windowRef.deref()) === null || k === void 0
                  ? void 0
                  : k.document
              )),
                this.keyCommands.bindAll(ke);
            }
            isOptionSelected(k, J, ee, ne) {
              let { selectedOptions: pe, selectedOption: Me } = k;
              return (ee && (!pe || (pe && !pe.length))) || (!ee && !Me)
                ? !1
                : ee
                ? !ne && J
                  ? pe && pe.some((ke) => ke.value === J.value)
                  : pe &&
                    pe.some((ke) =>
                      ne({
                        selectedOption: ke,
                        listOption: J,
                      })
                    )
                : Me && J && Me.value === J.value;
            }
            isOptionActive(k, J, ee) {
              let { activeRowIndex: ne } = k;
              if (!ne && ne !== 0) return !1;
              const Me = J[ne];
              return (Me && Me.option ? Me.option : Me) === ee;
            }
            moveNext(k) {
              const { setSelectState: J, shouldIncludeActiveOption: ee = !1 } =
                  this.props,
                ne = this.getOptionFromList(k);
              if (!ne) return;
              const pe = this.list.current;
              if (!pe) return;
              J(() => ({
                activeRowIndex: k,
                ...(ee
                  ? {
                      activeOption: ne,
                    }
                  : null),
                displayQuery: ne == null ? void 0 : ne.value,
              })),
                this.debouncedEnableMouseMove(),
                pe.forceUpdateGrid();
              const Me = k === 1 && this.isFirstItemUnselectable() ? 0 : k;
              pe.scrollToRow(Me);
            }
            movePrevious(k) {
              const { setSelectState: J, shouldIncludeActiveOption: ee = !1 } =
                  this.props,
                ne = this.getOptionFromList(k);
              if (!ne) return;
              const pe = this.list.current;
              if (!pe) return;
              const Me = this.getOptionsList();
              if (!Me) return;
              if (
                (J(() => ({
                  activeRowIndex: k,
                  ...(ee
                    ? {
                        activeOption: ne,
                      }
                    : null),
                  displayQuery: ne == null ? void 0 : ne.value,
                })),
                this.debouncedEnableMouseMove(),
                pe.forceUpdateGrid(),
                (ne == null ? void 0 : ne.height) !== 0)
              ) {
                pe.scrollToRow(k);
                return;
              }
              const ke = (0, u.A)(Me.slice(0, k)).findIndex((ge) => {
                var fe;
                return (
                  (ge == null || (fe = ge.option) === null || fe === void 0
                    ? void 0
                    : fe.height) !== 0
                );
              });
              pe.scrollToRow(k - ke - 1);
            }
            shouldInterceptKeyEvent(k) {
              return !k.target || !B(k.target)
                ? !1
                : !!(
                    Ae(k.target, "aria-autocomplete") ||
                    Ae(k.target, "aria-haspopup") ||
                    (this.listBody.current &&
                      this.listBody.current.contains(k.target))
                  );
            }
            removeAriaAttrsFromGridNode() {
              const k = this.listBody.current,
                J = k && k.querySelector(".ReactVirtualized__Grid");
              J &&
                (J.removeAttribute("aria-label"),
                J.removeAttribute("aria-readonly"));
            }
            renderEmptyState() {
              const {
                unstyled: k = !1,
                width: J,
                isLoading: ee = !1,
                selectDataQa: ne = void 0,
                includeWrapper: pe = !0,
              } = this.props;
              if (ee) return t.createElement(t.Fragment, null);
              const Me = this.getEmptyStateMessage();
              if (Me === null) return t.createElement(t.Fragment, null);
              const ke = k || !pe ? +J : +J - y.$_;
              return t.createElement(
                "div",
                {
                  "data-qa": ne ? `${ne}-empty-state` : null,
                  className: this.getClassName(
                    "c-select_options_list__empty_state"
                  ),
                  style: {
                    width: ke,
                  },
                },
                t.createElement(
                  "div",
                  {
                    role: "alert",
                    className: this.getClassName(
                      "c-select_options_list__option c-select_options_list__option--empty-state"
                    ),
                  },
                  Me
                )
              );
            }
            renderList() {
              const {
                  maxListHeight: k,
                  width: J,
                  includePadding: ee,
                  unstyled: ne = !1,
                  useSlackScrollbar: pe,
                  dynamicHeight: Me = !1,
                  forceMaxHeight: ke,
                  includeWrapper: ge = !0,
                  classPrefix: fe = void 0,
                } = this.props,
                re = this.getOptionsList(),
                le = k || y.CK,
                Re = re
                  .map((Ke) => this.getRowHeight(Ke) || 0)
                  .reduce((Ke, Ze) => Ke + Ze, 0),
                ye = ke || Re >= le ? le : Re,
                Te = ne || !ge ? +J : +J - y.$_,
                De = (0, n.A)("c-select_options_list__virtual_list", {
                  "c-select_options_list__virtual_list--slack_scrollbar": pe,
                  [`${fe}__virtual_list`]: !!fe,
                }),
                Ue =
                  Me && this.cellMeasurerCache
                    ? this.cellMeasurerCache.rowHeight
                    : (Ke) => {
                        let { index: Ze } = Ke;
                        return this.getRowHeight(re[Ze]);
                      };
              return this.cellMeasurerCache
                ? t.createElement(T.O, {
                    className: De,
                    containerRole: "presentation",
                    containerStyle: this.getContainerStyle(),
                    style: this.getListStyle(ee),
                    height: ye,
                    deferredMeasurementCache: this.cellMeasurerCache,
                    noRowsRenderer: this.renderEmptyState,
                    onScroll: this.debouncedOnScroll,
                    ref: this.list,
                    rowCount: re ? re.length : 0,
                    rowHeight: Ue,
                    rowRenderer: this.renderRow,
                    tabIndex: null,
                    role: "presentation",
                    "no-bootstrap": 1,
                    width: Te,
                  })
                : t.createElement(T.O, {
                    className: De,
                    containerRole: "presentation",
                    containerStyle: this.getContainerStyle(),
                    style: this.getListStyle(ee),
                    height: ye,
                    noRowsRenderer: this.renderEmptyState,
                    onScroll: this.debouncedOnScroll,
                    ref: this.list,
                    rowCount: re ? re.length : 0,
                    rowHeight: Ue,
                    rowRenderer: this.renderRow,
                    tabIndex: null,
                    role: "presentation",
                    "no-bootstrap": 1,
                    width: Te,
                  });
            }
            renderListBody() {
              const { enableLoadingState: k = !0, isLoading: J = !1 } =
                this.props;
              if (J && k) return this.renderLoadingState();
              const ee = this.getOptionsList();
              return !ee || (ee && !ee.length)
                ? this.renderEmptyState()
                : this.renderList();
            }
            renderLoadingState() {
              const { width: k } = this.props,
                J = Ce.t("Loading results\u2026");
              return t.createElement(
                "div",
                {
                  className: this.getClassName(
                    "c-select_options_list__loading_state"
                  ),
                  style: {
                    width: k,
                  },
                },
                t.createElement(I.A, {
                  size: "medium",
                  inline: !0,
                }),
                t.createElement("div", null, J)
              );
            }
            renderRow(k) {
              let { index: J, key: ee, style: ne, parent: pe } = k;
              var Me;
              const {
                  classPrefix: ke = void 0,
                  selectState: ge,
                  multiSelectMode: fe = !1,
                  customOptionCompare: re,
                  unstyled: le = !1,
                  dynamicHeight: Re = !1,
                  hideOptionsListCheckbox: ye = !1,
                } = this.props,
                { selectId: Te } = ge,
                De = this.getOptionsList();
              let Ue;
              De[J].option ? (Ue = De[J].option) : (Ue = De[J]);
              const { isPlaceholder: Ke } = Ue,
                { activeRowIndex: Ze } = ge,
                { selectedOption: Q, selectedOptions: ie } = ge;
              let Ve;
              typeof Ze == "number" &&
                (Ve = this.isOptionActive(
                  {
                    activeRowIndex: Ze,
                  },
                  De,
                  Ue
                ));
              const xe = this.isOptionSelected(
                  {
                    selectedOptions: ie,
                    selectedOption: Q,
                  },
                  Ue,
                  fe,
                  re
                ),
                je = Ue.value === y.yk,
                Fe = De[J].type === "heading",
                He = !!De[J].optgroup,
                Oe = De[J].type === "divider",
                Ye = !!Ue.isDisabled,
                at = !!Ue.nonInteractive,
                _t = xe && !Fe && !Oe,
                pt = Fe || at || Oe,
                Qe = De.filter(Z),
                ct = (0, s.A)(Qe, (Tn) => Tn.option === Ue, 0),
                Pt = ke ? `${ke}__option` : "",
                zt = (0, n.A)(
                  "c-select_options_list__option",
                  Pt,
                  (0, d.A)(Ue, "overrides.className", !1),
                  {
                    "c-select_options_list__option--active":
                      Ve && (0, d.A)(Ue, "overrides.useHoverStyles", !0),
                    "c-select_options_list__option--placeholder": Ke,
                    "c-select_options_list__option--selected": _t,
                    "c-select_options_list__option--disabled": Ye,
                    "c-select_options_list__group_header": Fe,
                    "c-select_options_list__group_option": He,
                    "c-select_options_list__divider": Oe,
                    "c-select_options_list__clear_option": je,
                  }
                );
              let an = je
                ? Ue.label
                : t.createElement("hr", {
                    className: this.getClassName("c-select_options__divider"),
                  });
              !Oe &&
                !je &&
                (an = this.props.renderOption(Ue, {
                  index: J,
                  isActive: Ve,
                  isGroupHeader: Fe,
                  isClearOption: je,
                  isSelected: xe && !Fe && !Oe,
                  clearDynamicRowHeight: this.clearDynamicRowHeight,
                }));
              let Qt;
              if (
                le ||
                (!((Me = Ue.overrides) === null || Me === void 0) &&
                  Me.unstyled)
              )
                Qt = an;
              else {
                var tn;
                Qt = t.createElement(
                  "span",
                  {
                    "data-qa": Ue.value,
                    className: this.getClassName(
                      "c-select_options_list__option_label",
                      {
                        normal_wrap:
                          (tn = Ue.extras) === null || tn === void 0
                            ? void 0
                            : tn.forceHeaderWrap,
                      }
                    ),
                  },
                  an
                );
              }
              const Ht = Qe.length,
                Kt = ct === -1 ? void 0 : ct + 1,
                qt = t.createElement(
                  "div",
                  be(
                    {
                      "aria-hidden": pt ? "true" : null,
                      "aria-selected": xe,
                      "aria-label": Fe ? null : this.getArialabelForItem(De[J]),
                      className: this.getClassName(zt, Pt),
                      "data-qa": Oe ? void 0 : this.getDataQaTag(Ue, J),
                      id: (0, f.Es)(Te, `option_${J}`),
                      key: ee,
                    },
                    ne
                      ? {
                          style: ne,
                        }
                      : {},
                    {
                      onClick:
                        Ye || at
                          ? (0, l.A)(() => this.onOptionSelected(Ue))
                          : (0, l.A)(() => {
                              this.onOptionClicked(Ue);
                            }),
                      onMouseEnter:
                        Ye || at
                          ? a.A
                          : (0, l.A)(() => {
                              this.onMouseEnteredOption(J);
                            }),
                      onMouseLeave: Ye || at ? a.A : this.onMouseLeftOption,
                      role: "option",
                      tabIndex: -1,
                      "data-is-active": Ve ? "true" : void 0,
                      ref: Ve ? this.currentRow : null,
                      optgroup: He ? De[J].optgroup : void 0,
                      "aria-disabled": Ye || null,
                      "aria-setsize": Ht,
                      "aria-posinset": Kt,
                    }
                  ),
                  _t &&
                    !ye &&
                    t.createElement("span", {
                      className: "c-select_options_list__selected",
                      "aria-hidden": "true",
                    }),
                  Qt
                );
              return !Re || !this.cellMeasurerCache
                ? qt
                : t.createElement(
                    v.dl,
                    {
                      cache: this.cellMeasurerCache,
                      columnIndex: 0,
                      rowIndex: J,
                      key: ee,
                      parent: pe,
                    },
                    qt
                  );
            }
            render() {
              const {
                  className: k,
                  ariaLabel: J,
                  classPrefix: ee = void 0,
                  multiSelectMode: ne = !1,
                  selectDataQa: pe = void 0,
                  selectState: Me,
                  dropdownContainer: ke = void 0,
                  footerBannerContent: ge,
                } = this.props,
                {
                  isExpanded: fe,
                  activeRowIndex: re,
                  selectId: le,
                  selectType: Re,
                } = Me,
                ye = (0, n.A)("c-select_options_list", {
                  [`${ee}_options_list`]: ee,
                }),
                Te =
                  Re === y.US.BASIC && fe && (0, i.A)(re)
                    ? (0, f.Es)(le, `option_${re}`)
                    : void 0,
                De = t.createElement(
                  "div",
                  {
                    className: ye,
                    ref: this.listBody,
                    "data-qa": pe ? `${pe}-options-list` : null,
                    id: (0, f.Es)(le, "listbox"),
                    "aria-activedescendant": Te,
                    "aria-label": J,
                    "aria-multiselectable": !!ne,
                    role: "listbox",
                    tabIndex: -1,
                    onMouseMove: this.enableMouseMove,
                  },
                  this.renderListBody()
                ),
                { includeWrapper: Ue = !0 } = this.props;
              if (!Ue) return De;
              const Ke = (0, n.A)("c-select_options_list__wrapper", {
                [`${k}`]: k,
                [`${ee}_options_list_wrapper`]: ee,
              });
              return t.createElement(
                "div",
                be(
                  {
                    className: this.getClassName(Ke),
                    "data-qa": pe
                      ? `${pe}-options-list-wrapper`
                      : "sk-select-options-list-wrapper",
                  },
                  ke
                    ? {
                        ref: ke,
                      }
                    : {}
                ),
                De,
                ge &&
                  t.createElement(
                    "div",
                    {
                      className: "c-select_options_list__footer_banner",
                    },
                    ge
                  )
              );
            }
            constructor(k) {
              super(k),
                (this.isMouseMoveEnabled = !1),
                (0, h.v)(this, [
                  "getOptionsList",
                  "getOptionFromList",
                  "onClearSelectedOption",
                  "onArrowDown",
                  "onArrowUp",
                  "onEnter",
                  "onTab",
                  "onShiftTab",
                  "onMouseLeftOption",
                  "onScroll",
                  "renderRow",
                  "clearDynamicRowHeight",
                  "initKeyCommands",
                ]),
                (this.listBody = t.createRef()),
                (this.list = t.createRef()),
                (this.currentRow = t.createRef()),
                (this.keyCommands = void 0),
                (this.previousFocus = null),
                (this.cellMeasurerCache = void 0),
                (this.formatOptions = (0, ve.A)(C)),
                (this.enableMouseMove = this.enableMouseMove.bind(this)),
                (this.debouncedEnableMouseMove = (0, m.A)(
                  this.enableMouseMove,
                  200
                )),
                (this.debouncedOnScroll = (0, m.A)(
                  this.onScroll.bind(this),
                  200
                )),
                (y.az.label = Ce.t("Clear selection"));
              const { optionsRowHeight: J = y.bJ, dynamicHeight: ee = !1 } = k;
              ee &&
                (this.cellMeasurerCache = new v.jS({
                  defaultHeight: J,
                  fixedWidth: !0,
                }));
            }
          },
          "SelectOptionsList"
        );
        (N.displayName = "SelectOptionsList"), (N.contextType = g.Mn);
        const L = N;
      },
      4640201401: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => M,
        });
        var t = e(5824283093),
          n = e(7715417323),
          s = e(9268023148),
          i = e(5617110048),
          d = e(1641606663),
          o = e(5249175977),
          a = e(1162627626),
          r = e(7193040700),
          c = e(2322735331),
          u = e(1224315998),
          l = e(4806483452);
        function m() {
          return (
            (m =
              Object.assign ||
              function (p) {
                for (var O = 1; O < arguments.length; O++) {
                  var C = arguments[O];
                  for (var h in C)
                    Object.prototype.hasOwnProperty.call(C, h) && (p[h] = C[h]);
                }
                return p;
              }),
            m.apply(this, arguments)
          );
        }
        _(m, "_extends");
        const v = {
            onClose: {
              action: u.UiAction.CLOSE,
            },
            onOpen: {
              action: u.UiAction.OPEN,
            },
          },
          E = 50,
          T = 50,
          g = 12,
          I = 4,
          f = 32;
        let y = _(
          class extends t.Component {
            componentDidMount() {
              this.maybeInstallListener(), this.measureOptionsListAndSetState();
            }
            componentDidUpdate() {
              this.maybeInstallListener();
            }
            componentWillUnmount() {
              this.maybeUninstallListener();
            }
            isMouseEvent(O) {
              return (O == null ? void 0 : O.type) === "click";
            }
            didClickInput(O) {
              const { inputRef: C } = this.props;
              if (!(C != null && C.current) || !this.isMouseEvent(O)) return;
              const h = O.clientX,
                D = O.clientY,
                P = C.current.getBoundingClientRect();
              return h > P.left && h < P.right && D > P.top && D < P.bottom;
            }
            onClose(O) {
              var C;
              const {
                selectState: h,
                inputRef: D,
                onOptionsListClose: P,
                setSelectState: S,
              } = this.props;
              if (h.isExpanded) {
                if (O instanceof KeyboardEvent) {
                  var b;
                  (b = this.optionsListRef.current) === null ||
                    b === void 0 ||
                    b.onClose(O);
                }
                D == null ||
                  (C = D.current) === null ||
                  C === void 0 ||
                  C.focus(),
                  P == null || P(this.didClickInput(O)),
                  S(() => ({
                    isExpanded: !1,
                    activeRowIndex: void 0,
                    filterQuery: "",
                    displayQuery: "",
                  }));
              }
            }
            getOptionsListBounds() {
              const { inputRef: O, inputContainerRef: C = null } = this.props,
                h = C || O;
              return h && h.current ? h.current.getBoundingClientRect() : null;
            }
            getPopoverPosition(O) {
              let { top: C, bottom: h } = O;
              var D;
              const P = C,
                S =
                  (((D = this.context.windowRef.deref()) === null ||
                  D === void 0
                    ? void 0
                    : D.innerHeight) || 0) - h,
                { selectState: b, maxListHeight: K = r.CK } = this.props,
                { options: x } = b;
              let B = 0;
              const U = _(
                (G) =>
                  G.map((H) => this.getRowHeight(H)).reduce((H, F) => H + F, 0),
                "calculateRowHeight"
              );
              if (x) {
                const G = [];
                x.forEach((H) => {
                  if (H.options) {
                    G.push(H.label), H.options.forEach((F) => G.push(F));
                    return;
                  }
                  G.push(H);
                }),
                  (B = U(G));
              }
              const R = Math.min(B, K);
              return S < R && S < P ? "top-left" : "bottom-left";
            }
            getRowHeight(O) {
              const { optionsRowHeight: C = r.bJ } = this.props;
              return O.type && O.type === "divider" ? r.r3 : C;
            }
            maybeInstallListener() {
              var O, C;
              if (this.listenerInstalled) return;
              (O = this.context.windowRef.deref()) === null ||
                O === void 0 ||
                O.addEventListener("resize", this.onResize),
                (C = this.context.windowRef.deref()) === null ||
                  C === void 0 ||
                  C.addEventListener("scroll", this.onScroll);
              const { measurePopoverEventName: h = null } = this.props;
              if (h) {
                var D;
                (D = this.context.windowRef.deref()) === null ||
                  D === void 0 ||
                  D.addEventListener(h, this.measureOptionsListAndSetState);
              }
              this.listenerInstalled = !0;
            }
            maybeUninstallListener() {
              const { measurePopoverEventName: O = null } = this.props;
              if (this.listenerInstalled) {
                var C, h;
                if (
                  (this.onResize.cancel(),
                  this.onScroll.cancel(),
                  (C = this.context.windowRef.deref()) === null ||
                    C === void 0 ||
                    C.removeEventListener("resize", this.onResize),
                  (h = this.context.windowRef.deref()) === null ||
                    h === void 0 ||
                    h.removeEventListener("scroll", this.onScroll),
                  O)
                ) {
                  var D;
                  (D = this.context.windowRef.deref()) === null ||
                    D === void 0 ||
                    D.removeEventListener(
                      O,
                      this.measureOptionsListAndSetState
                    );
                }
                this.listenerInstalled = !1;
              }
            }
            measureOptionsListAndSetState() {
              this.listenerInstalled &&
                this.setState(() => ({
                  optionsListBounds: this.getOptionsListBounds(),
                }));
            }
            render() {
              var O, C;
              const {
                  popoverProps: h = {},
                  selectState: D,
                  minOptionsListWidth: P = null,
                  onOpen: S = n.A,
                  onScrollablePage: b = !1,
                  autoClogProps: K = void 0,
                  maxListHeight: x = r.CK,
                  shouldAllowUnselectInSingleSelectMode: B,
                  shouldAllowUnselectInMultiSelectMode: U,
                  stayExpandedAfterSelection: R,
                  selectOptionsListRef: G,
                } = this.props,
                { selectId: H } = D,
                F = this.state.optionsListBounds || {
                  width: 0,
                  bottom: 0,
                  left: 0,
                },
                V = this.getPopoverPosition({
                  top: F.top,
                  bottom: F.bottom,
                }),
                X = V === "top-left",
                q =
                  ((O = this.context.windowRef.deref()) === null || O === void 0
                    ? void 0
                    : O.innerWidth) || 0;
              let oe = F.width;
              P && F.width < P && (oe = P);
              const z = F.left - g + oe;
              let Ae = 0;
              P && z > q && (Ae = P - F.width);
              const de =
                  (X
                    ? F.top
                    : (((C = this.context.windowRef.deref()) === null ||
                      C === void 0
                        ? void 0
                        : C.innerHeight) || 0) - F.bottom) - f,
                ve = Math.min(de, x),
                Se = {
                  ...this.props,
                  autoClogProps: K,
                  width: oe + g * 2,
                  maxListHeight: ve,
                  shouldAllowUnselectInSingleSelectMode: B,
                  shouldAllowUnselectInMultiSelectMode: U,
                  stayExpandedAfterSelection: R,
                },
                { pageYOffset: Ee } = this.context.windowRef.deref() || {},
                be = {
                  top: F.top + Ee + I,
                  bottom: F.bottom + Ee - I,
                  left: F.left - (g + Ae),
                  width: oe,
                };
              let Ce;
              if (b) {
                var Z;
                Ce = {
                  height:
                    (Z = this.context.windowRef.deref()) === null ||
                    Z === void 0
                      ? void 0
                      : Z.document.body.scrollHeight,
                };
              }
              return t.createElement(
                i.A,
                m(
                  {
                    elementType: u.ElementType.DROPDOWN,
                    actionProps: v,
                  },
                  K
                    ? {
                        autoClogProps: K,
                      }
                    : {}
                ),
                t.createElement(
                  o.AM,
                  m(
                    {
                      position: V,
                      allowanceX: -g,
                      ref: this.popover,
                    },
                    h,
                    {
                      onClose: this.onClose,
                      isOpen: !!D.isExpanded,
                      key: `${H}-popover`,
                      shouldFocusAfterRender: !1,
                      targetBounds: be,
                      ariaHideApp: !1,
                      onOpen: S,
                    },
                    typeof Ce < "u"
                      ? {
                          overlayStyle: Ce,
                        }
                      : {},
                    {
                      shouldPropagateOnClose: !0,
                    }
                  ),
                  t.createElement(
                    a.Ay,
                    m({}, Se, {
                      ref: (0, l.A)(this.optionsListRef, G),
                    })
                  )
                )
              );
            }
            constructor(O) {
              super(O),
                (this.popover = t.createRef()),
                (this.optionsListRef = t.createRef()),
                (this.state = {
                  optionsListBounds: null,
                }),
                (0, c.v)(this, ["measureOptionsListAndSetState", "onClose"]),
                (this.onResize = (0, s.A)(
                  this.measureOptionsListAndSetState,
                  E,
                  {
                    maxWait: E,
                  }
                )),
                (this.onScroll = (0, s.A)(
                  this.measureOptionsListAndSetState,
                  T,
                  {
                    maxWait: T,
                  }
                )),
                (this.listenerInstalled = null);
            }
          },
          "SelectPopoverOptionsList"
        );
        (y.displayName = "SelectPopoverOptionsList"),
          (y.contextType = d.Mn),
          (y.defaultProps = {
            includePadding: !0,
            window,
          });
        const M = y;
      },
      9573786552: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => o,
        });
        var t = e(5824283093),
          n = e(166097325),
          s = e(3297051565),
          i = e.n(s);
        function d() {
          return (
            (d =
              Object.assign ||
              function (a) {
                for (var r = 1; r < arguments.length; r++) {
                  var c = arguments[r];
                  for (var u in c)
                    Object.prototype.hasOwnProperty.call(c, u) && (a[u] = c[u]);
                }
                return a;
              }),
            d.apply(this, arguments)
          );
        }
        _(d, "_extends");
        function o(a) {
          const r = {
              showConfirmDialog: i().func,
              setSelectState: i().func.isRequired,
              selectedOptions: i().array,
              selectedOption: i().object,
            },
            c = {
              selectedOptions: [],
              selectedOption: null,
              showConfirmDialog: void 0,
            };
          let u = _(
            class extends t.Component {
              setSelectState(m, v) {
                const E = m();
                (E.selectedOptions &&
                  !(0, n.A)(E.selectedOptions, this.selectedOptions)) ||
                (E.selectedOption &&
                  !(0, n.A)(E.selectedOption, this.selectedOption))
                  ? (this.props.setSelectState(() => ({
                      isExpanded: !1,
                    })),
                    this.props.showConfirmDialog({
                      onGo: () => {
                        this.props.setSelectState(m, v),
                          (this.selectedOptions =
                            E.selectedOptions || this.selectedOptions),
                          (this.selectedOption =
                            E.selectedOption || this.selectedOption);
                      },
                    }))
                  : (this.props.setSelectState(m, v),
                    (this.selectedOptions =
                      E.selectedOptions || this.selectedOptions),
                    (this.selectedOption =
                      E.selectedOption || this.selectedOption));
              }
              render() {
                const { showConfirmDialog: m } = this.props,
                  v = m ? this.setSelectState : this.props.setSelectState;
                return t.createElement(
                  a,
                  d({}, this.props, {
                    setSelectState: v,
                  })
                );
              }
              constructor(m) {
                super(m),
                  (this.setSelectState = this.setSelectState.bind(this)),
                  (this.selectedOptions = m.selectedOptions),
                  (this.selectedOption = m.selectedOption);
              }
            },
            "ConfirmSelectWrapper"
          );
          return (
            (u.displayName = "ConfirmSelectWrapper"),
            (u.propTypes = r),
            (u.defaultProps = c),
            u
          );
        }
        _(o, "withConfirm");
      },
      2742076544: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => u,
        });
        var t = e(5824283093),
          n = e(166097325),
          s = e(9113979368),
          i = e(7715417323),
          d = e(9268023148),
          o = e(6422693406),
          a = e(796111729);
        function r() {
          return (
            (r =
              Object.assign ||
              function (l) {
                for (var m = 1; m < arguments.length; m++) {
                  var v = arguments[m];
                  for (var E in v)
                    Object.prototype.hasOwnProperty.call(v, E) && (l[E] = v[E]);
                }
                return l;
              }),
            r.apply(this, arguments)
          );
        }
        _(r, "_extends");
        const c = (0, a.Wo)();
        function u(l) {
          let m = _(
            class extends t.Component {
              componentDidMount() {
                const {
                    searchOnClick: E,
                    disableSearchOnMount: T,
                    expandOnFocus: g,
                    minQueryLength: I,
                  } = this.props,
                  { filterQuery: f } = this.state;
                if ((!E && !T) || g) {
                  const y = !I || (f && f.length >= I);
                  f !== void 0 && y && this.search(f);
                }
              }
              componentDidUpdate(E) {
                const {
                    isInvalid: T,
                    selectedOption: g,
                    selectedOptions: I,
                    isDisabled: f,
                    minQueryLength: y,
                  } = this.props,
                  M = {};
                E.isInvalid !== T && (M.isInvalid = T),
                  E.isDisabled !== f && (M.isDisabled = f),
                  (0, n.A)(E.selectedOption, g) || (M.selectedOption = g),
                  (0, n.A)(E.selectedOptions, I) || (M.selectedOptions = I),
                  (0, n.A)(E.minQueryLength, y) || (M.minQueryLength = y),
                  (0, s.A)(M) || this.setSelectState(() => M);
              }
              componentWillUnmount() {
                this.searchPromise &&
                  this.searchPromise.cancel &&
                  this.searchPromise.cancel();
              }
              setSelectState(E, T) {
                const g = E();
                ((g.filterQuery !== void 0 &&
                  g.filterQuery !== this.state.filterQuery) ||
                  g.searchOnClick) &&
                  (this.searchPromise &&
                    this.searchPromise.cancel &&
                    this.searchPromise.cancel(),
                  !this.state.minQueryLength ||
                  (g.filterQuery &&
                    g.filterQuery.length >= this.state.minQueryLength)
                    ? (this.setState(() => ({
                        isLoading: !0,
                        searchOnClick: !1,
                      })),
                      this.search(g.filterQuery))
                    : this.setState(() => ({
                        isLoading: !1,
                        options: [],
                      }))),
                  this.setState(() => g, T);
              }
              search(E) {
                const {
                  search: T,
                  onSearch: g = i.A,
                  onSearchError: I = i.A,
                  selectId: f,
                  processOptions: y = _(
                    (M) => o.S.resolve(M),
                    "processOptions"
                  ),
                } = this.props;
                g(E),
                  (this.searchPromise = T(E)
                    .then((M) => {
                      y(M, E).then((p) => {
                        this.setSelectState(() => ({
                          options: p,
                        })),
                          this.setState(() => ({
                            isLoading: !1,
                          }));
                      });
                    })
                    .catch((M) => {
                      this.setState(() => ({
                        isLoading: !1,
                      })),
                        c.error(
                          `Error when searching for select id: ${f}, error: ${M}`
                        ),
                        I(M);
                    }));
              }
              render() {
                const E = this.props.inputRef || this.inputRef;
                return t.createElement(
                  l,
                  r({}, this.props, {
                    selectState: this.state,
                    setSelectState: this.setSelectState,
                    inputRef: E,
                    isLoading: this.state.isLoading,
                  })
                );
              }
              constructor(E) {
                super(E),
                  (this.inputRef = t.createRef()),
                  (this.searchPromise = null),
                  (this.setSelectState = this.setSelectState.bind(this)),
                  (this.state = {
                    filterQuery: "",
                    displayQuery: "",
                    options: [],
                    isExpanded: E.isExpanded,
                    expandOnFocus: E.expandOnFocus,
                    selectId: E.selectId,
                    selectedOptions: E.selectedOptions || [],
                    selectedOption: E.selectedOption || null,
                    isRequired: E.isRequired,
                    isLoading: !1,
                    isDisabled: E.isDisabled,
                    isInvalid: E.isInvalid,
                    searchOnClick: E.searchOnClick,
                    minQueryLength: E.minQueryLength,
                  }),
                  (this.search = (0, d.A)(this.search, E.debounceWaitPeriod));
              }
            },
            "CustomSearchWrapper"
          );
          return (
            (m.displayName = "CustomSearchWrapper"),
            (m.defaultProps = {
              isRequired: !0,
              selectedOptions: null,
              selectedOption: null,
              isExpanded: !1,
              expandOnFocus: !1,
              isDisabled: !1,
              isInvalid: !1,
              debounceWaitPeriod: 50,
              minQueryLength: 0,
              onSearch: i.A,
              onSearchError: i.A,
              searchOnClick: !1,
              disableSearchOnMount: !1,
              processOptions: (v) => o.S.resolve(v),
              shouldAllowUnselectInMultiSelectMode: !1,
              disableIdParsing: !1,
              autoClogProps: void 0,
            }),
            m
          );
        }
        _(u, "withCustomSearch");
      },
      3239909785: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => Ae,
        });
        var t = e(9706240641),
          n = e(5824283093),
          s = e(7715417323),
          i = e(166097325),
          d = e(9113979368),
          o = e(9524650809),
          a = e(235108050),
          r = e(362134992),
          c = e(2208015175),
          u = e(8086952004),
          l = e(4360875129),
          m = e(2394306156),
          v = e(9746734072),
          E = e(2101927269),
          T = e(8840779375),
          g = e(9268023148),
          I = e(5950652755),
          f = e(3297051565),
          y = e.n(f),
          M = e(6422693406),
          p = e(3309235745),
          O = e(145735569),
          C = e(3708320478),
          h = e(6543729974),
          D = e(2170574487);
        function P(ae) {
          return [
            ...ae.filter((de) => !de.isError && !de.isUnknown),
            ...ae.filter((de) => !de.isError && de.isUnknown),
            ...ae.filter((de) => de.isError),
          ];
        }
        _(P, "sortTokens");
        var S = e(9236644324),
          b = e(56548687),
          K = e(796111729),
          x = e(735940183),
          B = e(4327331459),
          U = e(3707193570),
          R = e(4862221402),
          G = e(9868740303),
          H = e(4342685672),
          F = e(4757466470),
          V = e(9391594207),
          X = e(8847766420);
        function q() {
          return (
            (q =
              Object.assign ||
              function (ae) {
                for (var de = 1; de < arguments.length; de++) {
                  var ve = arguments[de];
                  for (var Se in ve)
                    Object.prototype.hasOwnProperty.call(ve, Se) &&
                      (ae[Se] = ve[Se]);
                }
                return ae;
              }),
            q.apply(this, arguments)
          );
        }
        _(q, "_extends");
        const oe = (0, K.Wo)(),
          z = new x.Ay("form_inputs");
        function Ae(ae) {
          const de = {
              searcherOptions: y().object.isRequired,
              selectId: y().string.isRequired,
              inputRef: y().object,
              isRequired: y().bool,
              selectedOptions: y().array,
              selectedOption: y().object,
              isExpanded: y().bool,
              isDisabled: y().bool,
              isInvalid: y().bool,
              focusOnMount: y().bool,
              searchOnPaste: y().bool,
              expandOnFocus: y().bool,
              expandOnClick: y().bool,
              searchBatchSize: y().number,
              debounceWaitPeriod: y().number,
              onFilterQueryPaste: y().func,
              onInputFocused: y().func,
              onSearch: y().func,
              onSearchError: y().func,
              onSearchResolved: y().func,
              onOptionsListClose: y().func,
              splitPastedQuery: y().func,
              processOptions: y().func,
              processSelectedOptions: y().func,
              clogger: y().object.isRequired,
              search: y().func.isRequired,
              teamId: y().string.isRequired,
              useSearcherSessions: y().bool,
              showConfirmDialog: y().func,
              restrictedSelectedTokenIndexes: y().array,
              disabledSelectedTokenIndexes: y().array,
              invalidSelectedTokenIndexes: y().array,
              useBulkSearch: y().bool,
            },
            ve = {
              isRequired: !0,
              selectedOptions: null,
              selectedOption: null,
              inputRef: null,
              isExpanded: !1,
              isDisabled: !1,
              isInvalid: !1,
              focusOnMount: !1,
              searchOnPaste: !1,
              expandOnFocus: void 0,
              expandOnClick: void 0,
              searchBatchSize: 1,
              debounceWaitPeriod: 50,
              onFilterQueryPaste: s.A,
              onInputFocused: s.A,
              onSearch: s.A,
              onSearchError: s.A,
              onSearchResolved: s.A,
              onOptionsListClose: s.A,
              splitPastedQuery: D.I,
              processOptions: (Ce) => M.K.resolve(Ce),
              processSelectedOptions: void 0,
              useSearcherSessions: !1,
              showConfirmDialog: void 0,
              restrictedSelectedTokenIndexes: [],
              disabledSelectedTokenIndexes: [],
              invalidSelectedTokenIndexes: [],
              useBulkSearch: !1,
            };
          let Se = _(
            class extends n.Component {
              componentDidMount() {
                this.props.focusOnMount &&
                  this.setState(() => ({
                    isLoading: !0,
                  })),
                  this.searchQuery(this.state.filterQuery);
              }
              componentDidUpdate(Z, $) {
                const {
                    isDisabled: N,
                    isInvalid: L,
                    selectedOptions: w,
                    selectedOption: k,
                    searchOnPaste: J,
                    expandOnFocus: ee,
                    expandOnClick: ne,
                    restrictedSelectedTokenIndexes: pe,
                    disabledSelectedTokenIndexes: Me,
                    invalidSelectedTokenIndexes: ke,
                  } = this.props,
                  ge = {};
                if (
                  (Z.isInvalid !== L && (ge.isInvalid = L),
                  Z.isDisabled !== N && (ge.isDisabled = N),
                  (0, i.A)(Z.selectedOptions, w) || (ge.selectedOptions = w),
                  (0, i.A)(Z.selectedOption, k) || (ge.selectedOption = k),
                  ((Z.expandOnFocus && !ee) || (Z.expandOnClick && !ne)) &&
                    (ge.isExpanded = !1),
                  this.wasUnknownTokenResolved(
                    this.state.selectedOptions,
                    $.selectedOptions
                  ))
                ) {
                  var re, le;
                  const Ke = this.getNextUnknownTokenIndex();
                  (ge.selectedTokenIndexes = [Ke]),
                    (re = this.inputRef) === null ||
                      re === void 0 ||
                      (le = re.current) === null ||
                      le === void 0 ||
                      le.focus();
                }
                Z.restrictedSelectedTokenIndexes !== pe &&
                  (ge.restrictedSelectedTokenIndexes = pe),
                  Z.disabledSelectedTokenIndexes !== Me &&
                    (ge.disabledSelectedTokenIndexes = Me),
                  Z.invalidSelectedTokenIndexes !== ke &&
                    (ge.invalidSelectedTokenIndexes = ke);
                const {
                  isLoading: Re,
                  pendingQueries: ye,
                  selectedOptions: Te,
                  pendingEscapeQueries: De,
                  filterQuery: Ue,
                } = this.state;
                if (J && !Re) {
                  if (!(0, d.A)(ye))
                    (ge.isLoading = !0),
                      (ge.loadInBackground = !0),
                      this.searchQueryObjects(ye);
                  else if ($.isLoading) {
                    if ((this.updateDisabled(!1), De.length > 0 && Ue === "")) {
                      const Ke = (0, x.jd)(
                          De.map((xe) => xe.query),
                          {
                            noConj: !0,
                          }
                        ).join(""),
                        Ze = De[0],
                        { options: Q } = Ze,
                        ie = _(
                          (xe) =>
                            xe.map((je) => {
                              const { query: Fe, options: He, ...Oe } = je,
                                Ye = He
                                  ? {
                                      options: ie(He),
                                    }
                                  : {};
                              return {
                                ...Oe,
                                ...Ye,
                                query: Ke,
                              };
                            }),
                          "getUpdatedOptions"
                        ),
                        Ve = {
                          ...Ze,
                          options: ie(Q),
                          query: Ke,
                        };
                      (ge.pendingEscapeQueries = []),
                        (ge.options = Ve.options),
                        (ge.filterQuery = Ke),
                        (ge.isExpanded = !0),
                        (ge.isLoading = !1);
                    }
                    if (Te.length) {
                      const Ke = Te.filter(
                          (Q) => Q.isError || Q.isUnknown
                        ).length,
                        Ze = Ke
                          ? z.t(
                              "Loading complete. There {count, plural, =1 {is # unknown entry} other {are # unknown entries}}.",
                              {
                                count: Ke,
                              }
                            )
                          : z.t("Loading complete.");
                      this.updateAriaTextThrottled.cancel &&
                        this.updateAriaTextThrottled.cancel(),
                        this.updateAriaTextThrottled(Ze);
                    }
                  }
                }
                (0, d.A)(ge) || this.setSelectState(() => ge);
              }
              componentWillUnmount() {
                this.updateAriaText.cancel && this.updateAriaText.cancel(),
                  this.searchPromise &&
                    this.searchPromise.cancel &&
                    this.searchPromise.cancel(),
                  (this._isMounted = !1);
              }
              onFilterQueryPaste(Z) {
                var $ = this;
                return (0, t.coroutine)(function* () {
                  const {
                    searchOnPaste: N,
                    searcherOptions: L,
                    splitPastedQuery: w,
                    processOptions: k,
                  } = $.props;
                  if (!N || (!Z && !Z.clipboardData)) return;
                  Z.preventDefault();
                  const J = Z.clipboardData.getData("text/plain")
                      ? "text/plain"
                      : "Text",
                    ee = (0, S.i_)(Z),
                    ne = ee.text,
                    pe = w(ne, {
                      ...L,
                      fromMetadata: ee.text !== Z.clipboardData.getData(J),
                    });
                  $.props.onFilterQueryPaste(pe);
                  const Me = [],
                    ke = [];
                  yield M.K.all(
                    pe.map((ge) => {
                      const fe = $.getQueryId();
                      return (0, B.A)(ge) || (0, R.A)(ge) || (0, U.Ay)(ge)
                        ? k([
                            {
                              key: fe,
                              pasted: !0,
                              fromMetadata: !0,
                              value: ge,
                              label: ee.members ? ee.members[ge] : ge,
                            },
                          ]).then(
                            (re) => (re[0] && ke.push(re[0]), M.K.resolve())
                          )
                        : (Me.push({
                            query: ge,
                            queryId: fe,
                            pasted: !0,
                          }),
                          ke.push({
                            label: ge,
                            queryId: fe,
                            isLoading: !0,
                            key: fe,
                            pasted: !0,
                          }),
                          M.K.resolve());
                    })
                  ),
                    $.setSelectState((ge) => ({
                      pendingQueries: ge.pendingQueries.concat(Me),
                      selectedOptions: ge.selectedOptions.concat(ke),
                    })),
                    $.updateDisabled(!(0, d.A)(Me)),
                    $.updateAriaTextThrottled.cancel &&
                      $.updateAriaTextThrottled.cancel();
                })();
              }
              onInputFocused() {
                this.props.onInputFocused(),
                  !(this.props.expandOnClick || this.shouldExpandOnFocus()) &&
                    this.setState(() => ({
                      isExpanded: !1,
                      options: [],
                    }));
              }
              onOptionsListClose(Z) {
                const {
                  isLoading: $,
                  isExpanded: N,
                  filterQuery: L,
                } = this.state;
                !$ && N && L.length > 0 && this.clogSearcherResults(),
                  this.props.onOptionsListClose(Z);
              }
              onTokenSelect(Z) {
                var $ = this;
                return (0, t.coroutine)(function* () {
                  if (!($.props.expandOnClick || $.shouldExpandOnFocus())) {
                    if (Z && !Z.isUnknown)
                      $.setState(() => ({
                        isExpanded: !1,
                        options: [],
                      }));
                    else if (Z) {
                      const N = yield $.props.processOptions(
                        Z.resultOptions.map((L) => ({
                          ...L,
                          fromUnknown: !0,
                        })),
                        Z.label
                      );
                      ($.lastShownSearchDetails = Z.searcher),
                        $.setState(() => ({
                          isExpanded: !0,
                          options: N,
                        }));
                    }
                  }
                })();
              }
              getQueryId() {
                return (0, o.A)("query__");
              }
              setSelectState(Z, $) {
                var N = this;
                return (0, t.coroutine)(function* () {
                  var L;
                  const { processSelectedOptions: w } = N.props;
                  let k = Z(N.state);
                  const { selectedOption: J, selectedOptions: ee } = N.state;
                  k.filterQuery !== void 0 &&
                    k.filterQuery !== N.state.filterQuery &&
                    ((k.isLoading = !0),
                    (k.loadInBackground = !1),
                    N.searchQuery(k.filterQuery));
                  const { searchOnPaste: ne } = N.props;
                  if (ne && k.selectedOptions) {
                    const Me = k.selectedOptions.map((ge) => {
                        let { key: fe } = ge;
                        return fe;
                      }),
                      ke = (0, a.A)(
                        (0, r.A)(
                          Me.filter(
                            (ge) => Me.indexOf(ge) !== Me.lastIndexOf(ge)
                          )
                        )
                      );
                    (0, c.A)(ke, (ge) => {
                      const fe = (0, u.A)(k.selectedOptions, (le) => {
                          let { key: Re, isUnknown: ye } = le;
                          return Re === ge && !ye;
                        }),
                        re = (0, r.A)(
                          k.selectedOptions.map((le) =>
                            le.key === ge ? (le.isUnknown ? fe : null) : le
                          )
                        );
                      k.selectedOptions = re;
                    });
                  }
                  if (
                    k.selectedOptions !== void 0 &&
                    !(0, i.A)(k.selectedOptions, ee)
                  ) {
                    const Me = k.selectedOptions.filter((ge) => {
                        let { isLoading: fe, isUnknown: re } = ge;
                        return !fe && !re;
                      }),
                      [ke] = (0, l.A)(Me, ee, "value");
                    ke && N.clogSearcherResults(ke);
                  }
                  k.selectedOption !== void 0 &&
                    k.selectedOption !== null &&
                    ((L = k.selectedOption) === null || L === void 0
                      ? void 0
                      : L.value) !== (J == null ? void 0 : J.value) &&
                    N.clogSearcherResults(k.selectedOption);
                  const pe = !!k.removalInitiator;
                  if (k.selectedOptions && !pe && w) {
                    if (((k = (0, m.A)(k)), k.isLoading !== void 0)) {
                      const Me = k.isLoading;
                      N.setState(() => ({
                        isLoading: Me,
                      })),
                        delete k.isLoading;
                    }
                    k.selectedOptions = yield w(k.selectedOptions);
                  }
                  N.setState(() => k, $);
                })();
              }
              getNextUnknownTokenIndex() {
                return this.state.selectedOptions.findIndex(
                  (Z) => Z.isUnknown && Z.queryId
                );
              }
              wasUnknownTokenResolved(Z, $) {
                const N = Z.filter((w) => w.isUnknown).length,
                  L = $.filter((w) => w.isUnknown).length;
                return N < L;
              }
              shouldExpandOnFocus() {
                const { expandOnFocus: Z } = this.props,
                  { selectedOptions: $ } = this.state,
                  N = (0, h.A)($);
                return Z && !N;
              }
              clogSearcherResults(Z) {
                if (this.lastShownSearchDetails === null) return;
                const {
                    clogger: $,
                    selectId: N,
                    useSearcherSessions: L,
                    teamId: w,
                  } = this.props,
                  { query: k, results: J } = this.lastShownSearchDetails,
                  ee = {
                    source: N,
                    query: k,
                    results: J,
                  };
                Z
                  ? ((ee.selectedItemId = Z.value),
                    L
                      ? (0, G.A)({
                          teamId: w,
                          key: N,
                        }).clogSearcherAccept({
                          clogger: $,
                          data: ee,
                        })
                      : (0, p.DC)({
                          clogger: $,
                          data: ee,
                        }))
                  : L
                  ? (0, G.A)({
                      teamId: w,
                      key: N,
                    }).clogSearcherReject({
                      clogger: $,
                      data: ee,
                    })
                  : (0, p.Yb)({
                      clogger: $,
                      data: ee,
                    });
              }
              processSearchResults(Z) {
                const {
                    searchOnPaste: $,
                    onSearchResolved: N,
                    searcherOptions: L,
                  } = this.props,
                  { escapeHatchEnabled: w, escapeHatchKeys: k } = L,
                  J = this.state.selectedOptions.slice(0);
                $ &&
                  Z.forEach((ee) => {
                    let { queryId: ne, options: pe, searcher: Me } = ee;
                    const ke = J.findIndex((re) => re.queryId === ne),
                      ge = J[ke];
                    let fe = null;
                    if (ge) {
                      this.lastShownSearchDetails = Me;
                      let re;
                      pe.length === 1
                        ? ((re = pe[0]),
                          w &&
                            Me &&
                            Me.results &&
                            Me.results.length === 0 &&
                            Me.pasted &&
                            k &&
                            k[re.key] &&
                            this.setState((Re) => ({
                              pendingEscapeQueries: [
                                ...Re.pendingEscapeQueries,
                                {
                                  query: Me.query,
                                  options: [re],
                                },
                              ],
                            })),
                          this.clogSearcherResults(re))
                        : pe.length
                        ? (re = {
                            isUnknown: !0,
                          })
                        : ((re = {
                            isError: !0,
                          }),
                          this.clogSearcherResults()),
                        (fe = {
                          ...ge,
                          ...re,
                          resultOptions: pe,
                          searcher: Me,
                          isLoading: !1,
                        }),
                        (J[ke] = fe);
                    }
                    N({
                      result: pe,
                      selectedOption: fe,
                    });
                  }),
                  this.setState((ee) => {
                    if ((0, F.Ay)(ee.selectedOptions, J, 2)) {
                      const { options: ne, searcher: pe } = Z[0];
                      return (
                        (this.lastShownSearchDetails = pe),
                        ee.loadInBackground
                          ? null
                          : {
                              options: ne,
                            }
                      );
                    }
                    return {
                      selectedOptions: P(J),
                    };
                  });
              }
              runBatchedSearch(Z) {
                const $ = Z.slice(0, this.props.searchBatchSize);
                if (Z.length > 1 && this.props.useBulkSearch) {
                  const L = $.some((k) => !!k.pasted),
                    w = $.some((k) => !!k.initial);
                  return this.runSingleSearch({
                    query: $,
                    pasted: L,
                    initial: w,
                  });
                }
                const N = $.map((L) => {
                  let { query: w, queryId: k, pasted: J, initial: ee } = L;
                  return this.runSingleSearch({
                    query: w,
                    queryId: k,
                    pasted: J,
                    initial: ee,
                  });
                });
                return M.K.all(N);
              }
              runSingleSearch(Z) {
                let { query: $, queryId: N, pasted: L, initial: w } = Z;
                const {
                  onSearch: k,
                  onSearchError: J,
                  processOptions: ee,
                  searcherOptions: ne,
                  selectId: pe,
                  useSearcherSessions: Me,
                  teamId: ke,
                  useBulkSearch: ge,
                } = this.props;
                let fe,
                  re,
                  le = !1;
                const Re = N || this.getQueryId(),
                  ye = new Map();
                if (
                  ((0, v.A)($) && ge
                    ? ((fe = $.map(
                        (Ue) => (
                          ye.set(Ue.queryId, Ue.query),
                          {
                            query: (0, D.t)(Ue.query, ne),
                            queryId: Ue.queryId,
                          }
                        )
                      )),
                      (le = !0))
                    : (re = (0, D.t)($, ne)),
                  re && k($) === !1)
                )
                  return ee([], re).then((Ue) => ({
                    queryId: Re,
                    options: Ue,
                    searcher: this.lastShownSearchDetails,
                  }));
                let Te;
                Me && (!L || le)
                  ? (Te = (0, G.A)({
                      teamId: ke,
                      key: w ? Re : pe,
                    }).search({
                      query: le ? fe : re,
                      options: {
                        ...ne,
                        sort: {
                          source: pe,
                          ...ne.sort,
                        },
                        returnMetadata: !0,
                      },
                    }))
                  : (Te = this.props.search({
                      query: le ? fe : re,
                      options: {
                        ...ne,
                        sort: {
                          source: pe,
                          ...ne.sort,
                        },
                        returnMetadata: !0,
                      },
                    }));
                var De = this;
                return Te.then(
                  (function () {
                    var Ue = (0, t.coroutine)(function* (Ke) {
                      De.lastShownSearchDetails = {
                        query: le ? fe : re,
                        results: Ke,
                      };
                      const Ze = (Ke || []).map((Ve, xe) => {
                          var je;
                          return {
                            key: le ? Ve.queryId : `${Re}_${xe}`,
                            value: Ve.item.id,
                            label:
                              Ve.name ||
                              ((je = Ve.item) === null || je === void 0
                                ? void 0
                                : je.name) ||
                              (le ? ye.get(Ve.queryId) : $),
                            entity: Ve.item,
                            matchData: Ve.subqueryScoresByMember,
                          };
                        }),
                        { selectedOption: Q } = De.state;
                      re === "" &&
                        Q &&
                        ((0, u.A)(Ze, ["value", Q.value]) || Ze.unshift(Q));
                      const ie = yield ee(Ze, $, {
                        pasted: L,
                      });
                      return {
                        queryId: Re,
                        options: ie,
                        searcher: {
                          ...De.lastShownSearchDetails,
                          pasted: L,
                        },
                      };
                    });
                    return function (Ke) {
                      return Ue.apply(this, arguments);
                    };
                  })()
                ).catch((Ue) => {
                  oe.error(
                    `Error when searching for select id: ${pe}, error: ${Ue}`
                  ),
                    J(Ue);
                  const Ke = [];
                  return {
                    queryId: Re,
                    options: Ke,
                    searcher: {
                      query: le ? fe : re,
                      results: Ke,
                      pasted: L,
                      isError: !0,
                    },
                  };
                });
              }
              searchQuery(Z) {
                this._isMounted &&
                  this.searchQueryObjects([
                    {
                      query: Z,
                    },
                  ]);
              }
              searchQueryObjects(Z) {
                if ((0, d.A)(Z)) return;
                if (
                  (this.searchPromise &&
                    this.searchPromise.cancel &&
                    this.searchPromise.cancel(),
                  !this.props.searchOnPaste)
                ) {
                  const { query: N, queryId: L } = Z[0];
                  this.searchPromise = this.runSingleSearch({
                    query: N,
                    queryId: L,
                  }).then((w) => {
                    let { options: k } = w;
                    this.setSelectState(() => ({
                      options: k,
                    })),
                      this.setState(() => ({
                        isLoading: !1,
                      }));
                  });
                  return;
                }
                this.searchPromise = this.runBatchedSearch(Z).then((N) => {
                  let L = N;
                  this.props.useBulkSearch &&
                    (L = this.generateBulkSearchResultsArray(L)),
                    this.processSearchResults(L);
                  const w = L.map((k) => {
                    let { queryId: J } = k;
                    return J;
                  });
                  this.setState((k) => ({
                    pendingQueries: k.pendingQueries.filter((ee) => {
                      let { queryId: ne } = ee;
                      return !w.includes(ne);
                    }),
                    isLoading: !1,
                  }));
                });
                const $ = z.t(
                  "Loading {count, plural, =1 {# more entry} other {# more entries}}",
                  {
                    count: Z.length,
                  }
                );
                this.updateAriaTextThrottled($);
              }
              updateAriaText(Z) {
                this.setState(($) =>
                  $.ariaText === Z
                    ? null
                    : {
                        ariaText: Z,
                      }
                );
              }
              updateDisabled(Z) {
                this.setState(($) =>
                  $.isDisabled === Z
                    ? null
                    : {
                        isDisabled: Z,
                      }
                );
              }
              generateBulkSearchResultsArray(Z) {
                var $;
                if (
                  !(
                    !(Z == null || ($ = Z.options) === null || $ === void 0) &&
                    $.length
                  )
                )
                  return Z.splice(0);
                const { options: N, searcher: L } = Z,
                  { pasted: w, query: k, results: J } = L;
                return k.map((ne) => ({
                  options: N.filter((pe) => pe.key === ne.queryId),
                  queryId: ne.queryId,
                  searcher: {
                    pasted: w,
                    query: ne.query,
                    results: J.filter((pe) => pe.queryId === ne.queryId),
                  },
                }));
              }
              render() {
                return n.createElement(
                  n.Fragment,
                  null,
                  n.createElement(
                    ae,
                    q({}, this.props, {
                      expandOnFocus: this.shouldExpandOnFocus(),
                      inputRef: this.inputRef,
                      selectState: this.state,
                      setSelectState: this.setSelectState,
                      onOptionsListClose: this.onOptionsListClose,
                      onFilterQueryPaste: this.onFilterQueryPaste,
                      onTokenSelect: this.onTokenSelect,
                      onInputFocused: this.onInputFocused,
                      isLoading: this.state.isLoading,
                    })
                  ),
                  n.createElement(C.A, {
                    message: this.state.ariaText,
                  })
                );
              }
              constructor(Z) {
                super(Z),
                  (this.searchPromise = null),
                  (this.setSelectState = this.setSelectState.bind(this)),
                  (this.onOptionsListClose =
                    this.onOptionsListClose.bind(this)),
                  (this.onFilterQueryPaste =
                    this.onFilterQueryPaste.bind(this)),
                  (this.onTokenSelect = this.onTokenSelect.bind(this)),
                  (this.onInputFocused = this.onInputFocused.bind(this));
                const { selectedOptions: $, searchOnPaste: N } = Z,
                  L = (0, E.A)($, (k) => (0, O.iC)(k));
                let w = [];
                N &&
                  (w = (0, r.A)(
                    (0, T.A)(L, (k) =>
                      !k.label || !k.queryId
                        ? null
                        : {
                            query: k.label,
                            queryId: k.queryId,
                            initial: !0,
                          }
                    )
                  )),
                  (this.state = {
                    filterQuery: "",
                    options: [],
                    isExpanded: Z.isExpanded,
                    selectId: Z.selectId,
                    selectedOptions: Z.selectedOptions || [],
                    selectedOption: Z.selectedOption || null,
                    isRequired: Z.isRequired,
                    isLoading: !1,
                    isDisabled: Z.isDisabled,
                    isInvalid: Z.isInvalid,
                    pendingQueries: w || [],
                    loadInBackground: !1,
                    ariaText: "",
                    shouldRefocusInputAfterSelection: !!Z.showConfirmDialog,
                    pendingEscapeQueries: [],
                    selectedTokenIndexes: [],
                    restrictedSelectedTokenIndexes:
                      Z.restrictedSelectedTokenIndexes || [],
                    disabledSelectedTokenIndexes:
                      Z.disabledSelectedTokenIndexes || [],
                    invalidSelectedTokenIndexes:
                      Z.invalidSelectedTokenIndexes || [],
                  }),
                  (this.searchQuery = (0, g.A)(
                    this.searchQuery,
                    Z.debounceWaitPeriod
                  )),
                  (this.updateAriaTextThrottled = (0, I.A)(
                    this.updateAriaText,
                    3e4
                  )),
                  (this.lastShownSearchDetails = null),
                  (this.inputRef = Z.inputRef || n.createRef()),
                  (this._isMounted = !0);
              }
            },
            "SearcherSelectWrapper"
          );
          (Se.displayName = "SearcherSelectWrapper"),
            (Se.propTypes = de),
            (Se.defaultProps = ve);
          const Ee = _(
              (Ce) => ({
                clogger: (0, b.e)({
                  state: Ce,
                }),
                teamId: (0, X.JY)(Ce),
                useSearcherSessions: (0, H.nK)(Ce),
              }),
              "mapStateToProps"
            ),
            be = {
              search: function () {
                for (
                  var Ce = arguments.length, Z = new Array(Ce), $ = 0;
                  $ < Ce;
                  $++
                )
                  Z[$] = arguments[$];
                return (0, p.$P)(...Z);
              },
            };
          return (0, V.N)(Ee, be)(Se);
        }
        _(Ae, "withSearcher");
      },
      2602118042: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => o,
        });
        var t = e(5824283093),
          n = e(5846524816);
        function s() {
          return (
            (s =
              Object.assign ||
              function (a) {
                for (var r = 1; r < arguments.length; r++) {
                  var c = arguments[r];
                  for (var u in c)
                    Object.prototype.hasOwnProperty.call(c, u) && (a[u] = c[u]);
                }
                return a;
              }),
            s.apply(this, arguments)
          );
        }
        _(s, "_extends");
        const i = {
          textSelectLabel: void 0,
          minOptionsListWidth: null,
          ariaLabel: "",
        };
        function d(a) {
          return t.createElement(
            n.A,
            s({}, a, {
              textSelect: !0,
            })
          );
        }
        _(d, "TextSelect"),
          (d.displayName = "TextSelect"),
          (d.defaultProps = i);
        const o = d;
      },
      2864323261: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => s,
        });
        var t = e(2825917518);
        const n = _(function (i) {
          let d =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : {},
            o =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : [],
            a = arguments.length > 3 ? arguments[3] : void 0;
          if (!a) return o;
          const { label: r, options: c } = a,
            u = new t.A(i, {
              fuzzyLimit: 3,
              ...d,
            });
          if (!c) isFinite(u.normalizeAndScore(r)) && o.push(a);
          else {
            const l = [];
            c.forEach((m) => {
              const { label: v } = m;
              isFinite(u.normalizeAndScore(v)) && l.push(m);
            }),
              l.length &&
                o.push({
                  label: a.label,
                  options: l,
                });
          }
          return o;
        }, "findMatches");
        function s(i, d) {
          let o =
            arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          return d ? i.reduce((a, r) => n(d, o, a, r), []) : i;
        }
        _(s, "defaultFilter");
      },
      6543729974: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => i,
        });
        var t = e(9113979368),
          n = e(1703559452),
          s = e(145735569);
        function i() {
          let d =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
          return (0, t.A)(d) ? !1 : (0, n.A)(d, (o) => (0, s.hH)(o));
        }
        _(i, "__WEBPACK_DEFAULT_EXPORT__");
      },
      3650946343: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
        });
        var t = e(9113979368),
          n = e(2101927269),
          s = e(4724591729),
          i = e(796111729);
        function d() {
          let o =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
          if ((0, t.A)(o)) return !1;
          const a = (0, n.A)(
            o,
            (r) => (
              r &&
                !r.message &&
                (0, s.Cu)() &&
                (0, i.Wo)({
                  label: "Invalid Error or Hint Object",
                }).error(
                  `The following error or hint object is invalid: { id: ${r.id}, message: ${r.message}}`
                ),
              r && !!r.message
            )
          );
          return !(0, t.A)(a);
        }
        _(d, "__WEBPACK_DEFAULT_EXPORT__");
      },
      2170574487: (W, A, e) => {
        "use strict";
        e.d(A, {
          I: () => a,
          t: () => r,
        });
        var t = e(3044566667);
        const n = [
            ",",
            "\uFF0C",
            "\u3001",
            ";",
            "\uFF1B",
            "|",
            "\uFF5C",
            "\\t",
            "\\n",
            "\\r",
          ],
          s = new RegExp(`[${n}]`),
          i = new RegExp(`<(${t.gy})>`, "i"),
          d = new RegExp(`\\((${t.gy})\\)`, "i"),
          o = /(?=\s+[@\uFF20])/g;
        function a(c) {
          let u =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : {},
            l = [];
          return (
            u.entities &&
            u.entities.members &&
            u.entities.members.matchEmailField &&
            (i.test(c) || d.test(c))
              ? (l = c.match(new RegExp(t.tN.CONTAINS_EMAIL, "gi")))
              : s.test(c)
              ? (l = c.split(s))
              : u.fromMetadata
              ? (l = c.split(/\s+/))
              : u.entities &&
                u.entities.members &&
                o.test(c) &&
                (l = c.split(o)),
            (!l || !l.length) && (l = c.split(/\s+/)),
            l.map((m) => m.trim()).filter((m) => Boolean(m))
          );
        }
        _(a, "defaultSplitQuery");
        function r(c) {
          let u =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : {},
            l = c;
          return (
            u.entities &&
              u.entities.members &&
              u.entities.members.matchEmailField &&
              t.tN.CONTAINS_EMAIL.test(c) &&
              (l = c.match(t.tN.CONTAINS_EMAIL)[0]),
            l
          );
        }
        _(r, "parseQueryForSearch");
      },
      7772530643: (W, A, e) => {
        "use strict";
        e.d(A, {
          k: () => n,
        });
        var t = e(2864323261);
        const n = _(function (i, d) {
            let o =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : {};
            return d.filterQuery === void 0
              ? d
              : {
                  ...d,
                  options: (0, t.A)(i, d.filterQuery, o),
                };
          }, "defaultFilter"),
          s = _((i, d) => i.reduce((o, a) => a(o), d), "applyTransforms");
      },
      1959847761: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => s,
          e: () => n.ex,
        });
        var t = e(1211063534),
          n = e(5139334449);
        const s = t.A;
      },
      1211063534: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => f,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(5950652755),
          i = e(7715417323),
          d = e(1641606663),
          o = e(8245211418),
          a = e(5139334449),
          r = e(3256698098);
        function c() {
          return (
            (c =
              Object.assign ||
              function (y) {
                for (var M = 1; M < arguments.length; M++) {
                  var p = arguments[M];
                  for (var O in p)
                    Object.prototype.hasOwnProperty.call(p, O) && (y[O] = p[O]);
                }
                return y;
              }),
            c.apply(this, arguments)
          );
        }
        _(c, "_extends");
        const u = 1,
          l = 10,
          m = 10,
          v = 2,
          E = 12,
          T = 50;
        let g = _(
          class extends t.PureComponent {
            componentDidMount() {
              if (this.state.isOpen) {
                var M;
                (M = this.context.windowRef.deref()) === null ||
                  M === void 0 ||
                  M.document.addEventListener("mousemove", this.onMouseMove);
              }
            }
            static getDerivedStateFromProps(M, p) {
              return M.isOpen !== p.passedIsOpen
                ? {
                    isOpen: M.isOpen,
                    passedIsOpen: M.isOpen,
                  }
                : null;
            }
            componentDidUpdate(M) {
              if (M.isOpen !== this.props.isOpen)
                if (this.state.isOpen) {
                  var p;
                  this.forceUpdate(),
                    (p = this.context.windowRef.deref()) === null ||
                      p === void 0 ||
                      p.document.addEventListener(
                        "mousemove",
                        this.onMouseMove
                      );
                } else {
                  var O;
                  (O = this.context.windowRef.deref()) === null ||
                    O === void 0 ||
                    O.document.removeEventListener(
                      "mousemove",
                      this.onMouseMove
                    );
                }
              this.state.isOpen || (this.initialTriggerBounds = void 0);
            }
            componentWillUnmount() {
              var M;
              (M = this.context.windowRef.deref()) === null ||
                M === void 0 ||
                M.document.removeEventListener("mousemove", this.onMouseMove);
            }
            onMouseMove(M) {
              const p = {
                  x: M.clientX,
                  y: M.clientY,
                },
                O = this.mouseProgressingTowardsSubmenu(p);
              O !== this.state.mouseProgressingTowardsSubmenu &&
                (O
                  ? this.props.preventHighlightChange()
                  : this.state.highlightChangePrevented ||
                    this.props.allowHighlightChange()),
                this.setState(() => ({
                  mouseCoordinates: p,
                  mouseProgressingTowardsSubmenu: O,
                }));
            }
            onSubmenuItemSelected(M, p) {
              this.props.menuCallback(this.props.menuCallbackId, p);
            }
            getContentBounds() {
              return this.submenuContainer
                ? this.submenuContainer.getBoundingClientRect()
                : void 0;
            }
            getSubmenuContainerStyle() {
              const M = this.getContentBounds(),
                p = this.getTriggerBounds(),
                O = {
                  ...this.props.submenuStyle,
                },
                C = this.context.windowRef.deref();
              if (
                (M == null ? void 0 : M.width) === void 0 ||
                (p == null ? void 0 : p.left) === void 0 ||
                !C
              )
                return O;
              const h = p.right + M.width > C.innerWidth,
                D = p.left > M.width,
                P = this.props.forceLeft || (h && D);
              h && !D
                ? (O.left = C.innerWidth - M.width - l)
                : P
                ? (O.left = p.left - M.width + v)
                : (O.left = p.right - v);
              const b = p.top - E,
                K = b + M.height > C.innerHeight - m;
              return (O.top = K ? C.innerHeight - m - M.height : b), O;
            }
            getTriggerBounds() {
              return (
                this.initialTriggerBounds ||
                  (this.initialTriggerBounds = this.trigger
                    ? this.trigger.getBoundingClientRect()
                    : void 0),
                this.initialTriggerBounds || void 0
              );
            }
            setSubmenuRef(M) {
              this.submenuContainer = M;
            }
            setTriggerRef(M) {
              this.trigger = M;
            }
            allowHighlightChange() {
              this.setState((M) => ({
                ...M,
                highlightChangePrevented: !1,
              }));
            }
            closeSubmenu() {
              this.props.returnKBNav(),
                this.setState(
                  () => ({
                    isOpen: !1,
                  }),
                  () => {
                    var M;
                    (M = this.context.windowRef.deref()) === null ||
                      M === void 0 ||
                      M.document.removeEventListener(
                        "mousemove",
                        this.onMouseMove
                      );
                  }
                );
            }
            mouseProgressingTowardsSubmenu(M) {
              const { mouseCoordinates: p } = this.state,
                O = this.getContentBounds();
              if (O) {
                const { left: C, right: h, top: D, bottom: P } = O;
                if (M.x >= C && M.x <= h && M.y >= D && M.y <= P) return !0;
                if (p) {
                  const b = Math.abs(h - p.x) > Math.abs(C - p.x),
                    K = {
                      x: b ? C : h,
                      y: D - u,
                    },
                    x = {
                      x: b ? C : h,
                      y: P + u,
                    },
                    B = {
                      x: b ? p.x - u : p.x + u,
                      y: p.y,
                    };
                  return (0, r._i)(M, B, K, x);
                }
              }
              return !1;
            }
            preventHighlightChange() {
              this.setState((M) => ({
                ...M,
                highlightChangePrevented: !0,
              }));
            }
            renderSubmenu() {
              if (!this.state.isOpen || this.props.disabled) return null;
              const M = this.props.renderSubmenu({
                  onTriggerClose: this.closeSubmenu,
                  onCloseSubmenu: this.closeSubmenu,
                  onMenuItemSelected: this.onSubmenuItemSelected,
                  kbNavActive: this.props.kbNavActive,
                  preventHighlightChange: this.preventHighlightChange,
                  allowHighlightChange: this.allowHighlightChange,
                  isSubmenu: !0,
                }),
                p = this.getSubmenuContainerStyle(),
                O = (0, n.A)("c-submenu__container", {
                  "c-submenu__container--legacy":
                    !this.props.renderLegacySubmenu,
                });
              return t.createElement(
                "div",
                {
                  role: "presentation",
                  className: O,
                  ref: this.setSubmenuRef,
                  style: p,
                  "data-qa": "submenu_container",
                },
                M
              );
            }
            render() {
              const { menuCallback: M, menuCallbackId: p, ...O } = this.props;
              return t.createElement(
                "div",
                {
                  role: "presentation",
                  className: "c-submenu",
                  "data-qa": "submenu_trigger_wrapper",
                  ref: this.setTriggerRef,
                },
                t.createElement(
                  o.A,
                  c({}, O, {
                    withSubmenu: !0,
                  })
                ),
                this.renderSubmenu()
              );
            }
            constructor(M) {
              super(M),
                (this.state = {
                  isOpen: !1,
                  passedIsOpen: !1,
                  mouseCoordinates: void 0,
                  mouseProgressingTowardsSubmenu: !1,
                  highlightChangePrevented: !1,
                }),
                (this.closeSubmenu = this.closeSubmenu.bind(this)),
                (this.setSubmenuRef = this.setSubmenuRef.bind(this)),
                (this.setTriggerRef = this.setTriggerRef.bind(this)),
                (this.onMouseMove = (0, s.A)(this.onMouseMove.bind(this), T)),
                (this.onSubmenuItemSelected =
                  this.onSubmenuItemSelected.bind(this)),
                (this.preventHighlightChange =
                  this.preventHighlightChange.bind(this)),
                (this.allowHighlightChange =
                  this.allowHighlightChange.bind(this));
            }
          },
          "Submenu"
        );
        (g.displayName = "Submenu"),
          (g.defaultProps = {
            isOpen: !1,
            menuCallback: i.A,
            menuCallbackId: null,
            kbNavActive: !1,
            returnKBNav: i.A,
            preventHighlightChange: i.A,
            allowHighlightChange: i.A,
            renderLegacySubmenu: !0,
            forceLeft: !1,
            submenuStyle: void 0,
            disabled: !1,
            showFullCarat: !1,
            icon: null,
          }),
          (g.contextType = d.Mn);
        const I = {
            Submenu: g,
            SUBMENU_OVERLAP: v,
            MENU_VERTICAL_MARGIN: E,
            ALLOWANCE_X: l,
            ALLOWANCE_Y: m,
          },
          f = (0, a.Ay)(g);
      },
      5139334449: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => u,
          ex: () => c,
        });
        var t = e(2208015175),
          n = e(3297051565),
          s = e.n(n),
          i = e(101973425),
          d = e(4724591729),
          o = e(796111729);
        const a = "_isSlackSubmenuItem",
          r = {
            ...i.LN,
            kbNavActive: s().bool,
            stealKBNav: s().func,
            returnKBNav: s().func,
            preventHighlightChange: s().func,
            allowHighlightChange: s().func,
          };
        function c(l) {
          return !!l[a];
        }
        _(c, "isSubmenu");
        function u(l) {
          if ((0, d.Cu)()) {
            const m = l.propTypes || {};
            let v;
            Object.defineProperty(l, "propTypes", {
              get: () => v,
              set: (E) => {
                const T = l.displayName || l.name || "Component";
                (0, t.A)(r, (g, I) => {
                  const f = E[I];
                  f &&
                    f !== g &&
                    f !== g.isRequired &&
                    (0, o.Wo)().warn(
                      `${T}'s ${I} prop type doesn't match submenu`
                    );
                }),
                  (v = {
                    ...r,
                    ...E,
                  });
              },
            }),
              (l.propTypes = m);
          }
          return (l[a] = !0), (l[i.KJ] = !0), l;
        }
        _(u, "wrapSubmenu");
      },
      4525741652: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
        });
        var t = e(5824283093),
          n = e(5255740490);
        function s() {
          return (
            (s =
              Object.assign ||
              function (o) {
                for (var a = 1; a < arguments.length; a++) {
                  var r = arguments[a];
                  for (var c in r)
                    Object.prototype.hasOwnProperty.call(r, c) && (o[c] = r[c]);
                }
                return o;
              }),
            s.apply(this, arguments)
          );
        }
        _(s, "_extends");
        const d = (0, t.forwardRef)((o, a) => {
          let {
            tabContent: r,
            fullHeight: c,
            className: u,
            role: l = "tabpanel",
            ...m
          } = o;
          const v = (0, n.A)(
            u,
            "c-tabs__tab_panel",
            "c-tabs__tab_panel--active",
            {
              "c-tabs__tab_panel--full_height": c,
            }
          );
          return t.createElement(
            "div",
            s(
              {
                role: l,
                className: v,
                "data-qa": "tabs_content_container",
                ref: a,
              },
              m
            ),
            r
          );
        });
      },
      6130762911: (W, A, e) => {
        "use strict";
        e.d(A, {
          T: () => s,
        });
        var t = e(5824283093);
        const n = {
            isSelected: !1,
            hasMouseHover: !1,
            hasKeyboardFocus: !1,
            isUserAttentionOnTab: !1,
          },
          s = (0, t.createContext)(n);
      },
      2598612765: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => C,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(8628145494),
          i = e(9268023148),
          d = e(4980558152),
          o = e(2309855086),
          a = e(5914783706),
          r = e(3749524846),
          c = e(9332393661),
          u = e(6084388622),
          l = e(1610251172),
          m = e(8683010724),
          v = e(6130762911),
          E = e(7239742441),
          T = e(698347924);
        function g(h) {
          return /\.(jpe?g|png|gif|bmp)$/i.test(h);
        }
        _(g, "hasImageExtention");
        const I = g;
        function f() {
          return (
            (f =
              Object.assign ||
              function (h) {
                for (var D = 1; D < arguments.length; D++) {
                  var P = arguments[D];
                  for (var S in P)
                    Object.prototype.hasOwnProperty.call(P, S) && (h[S] = P[S]);
                }
                return h;
              }),
            f.apply(this, arguments)
          );
        }
        _(f, "_extends");
        const y = _((h) => {
          let { icon: D, svgIcon: P, customIcon: S, className: b } = h;
          return t.createElement(
            "div",
            {
              className: b,
              "data-qa": "tabs_item_render_icon",
            },
            !S &&
              D &&
              !P &&
              t.createElement(l.A, {
                type: D,
                size: "inherit",
                inline: !0,
              }),
            !S && P && !D && t.createElement(m.A, f({}, P)),
            S && S
          );
        }, "TabsItemIcon");
        y.displayName = "TabsItemIcon";
        const M = _(
            (h) =>
              h >= 1e4
                ? (0, E.$k)(h, {
                    precision: 4,
                    decimal_places: 0,
                    lowercase: !0,
                  })
                : (0, T.Ay)(h),
            "formatNumber"
          ),
          p = _((h) => {
            let { shouldFormatCount: D, titleCount: P, maxTitleCount: S } = h;
            if (!P) return P;
            const b = S && P > S;
            let K = b ? S : P;
            return D && (K = M(K)), b ? `${K}+` : K;
          }, "formatCount"),
          O = (0, t.forwardRef)((h, D) => {
            let {
              label: P,
              onClick: S,
              title: b,
              isSelected: K,
              isFocused: x,
              focusOnMount: B,
              fullWidth: U,
              titleCount: R,
              maxTitleCount: G,
              icon: H,
              svgIcon: F,
              customIcon: V,
              formatCount: X,
              isLoading: q,
              isCountLoading: oe,
              isDisabled: z,
              iconPosition: Ae = "right",
              className: ae = "",
              contextMenuAriaLabel: de,
              contextMenuTemplate: ve,
              ariaRole: Se = "tab",
              ariaHaspopup: Ee = !1,
              ...be
            } = h;
            const Ce = (0, o.A)(D),
              [Z, $] = (0, t.useState)(!1),
              N = (0, t.useContext)(r.A),
              L = (0, n.A)(ae, "c-tabs__tab", "js-tab", {
                "c-tabs__tab--active": K,
                "c-tabs__tab--full_width": U,
              }),
              w = P || b,
              k =
                typeof w == "string" && I(w)
                  ? t.createElement(c.A, {
                      classes: "c-tabs__tab_image",
                      image: w,
                      ariaHidden: !0,
                    })
                  : w,
              J = be.id,
              ee = (0, t.useCallback)(
                (De) => {
                  S && S(J, De);
                },
                [J, S]
              ),
              ne = p({
                shouldFormatCount: X,
                titleCount: R,
                maxTitleCount: G,
              }),
              pe = (0, s.A)(x) ? K : x,
              Me = (0, a.A)(pe);
            (0, t.useEffect)(() => {
              if (!pe) return;
              const De = (0, s.A)(Me);
              if ((De && B) || (!De && !Me)) {
                var Ue;
                (Ue = Ce.current) === null || Ue === void 0 || Ue.focus();
              }
            }, [pe, Me, B, Ce]);
            const ke = (0, t.useCallback)(() => ve, [ve]),
              ge = (0, i.A)(() => $(!0), 25),
              fe = (0, i.A)(() => $(!1), 25),
              re = (0, t.useCallback)(() => {
                fe.cancel(), ge();
              }, [ge, fe]),
              le = (0, t.useCallback)(() => {
                ge.cancel(), fe();
              }, [ge, fe]),
              Re = N && (x ?? !1),
              ye = (0, t.useMemo)(
                () => ({
                  isSelected: K ?? !1,
                  hasMouseHover: Z,
                  hasKeyboardFocus: Re,
                  isUserAttentionOnTab: K || Z || Re,
                }),
                [Re, Z, K]
              );
            let Te = t.createElement(
              u.Nm,
              f({}, be, {
                onClick: ee,
                onMouseOver: re,
                onMouseOut: le,
                role: Se,
                className: L,
                "aria-selected": K,
                "aria-haspopup": Ee,
                tabIndex: pe ? 0 : -1,
                disabled: z,
                ref: Ce,
              }),
              q
                ? t.createElement("span", {
                    className: "c-tabs__tab_placeholder",
                    "data-qa": "tabs_item_placeholder",
                  })
                : t.createElement(
                    t.Fragment,
                    null,
                    (!!H || !!F || !!V) &&
                      Ae === "left" &&
                      t.createElement(y, {
                        icon: H,
                        svgIcon: F,
                        customIcon: V,
                        className: "c-tabs__tab_icon--left",
                      }),
                    t.createElement(
                      "span",
                      {
                        className: "c-tabs__tab_content",
                      },
                      k
                    ),
                    Number.isFinite(R) &&
                      t.createElement(
                        "span",
                        {
                          className: "c-tabs__tab_count",
                          "data-qa": "tabs_item_render_count",
                        },
                        ne
                      ),
                    oe &&
                      t.createElement("span", {
                        className: "c-tabs__tab_count_placeholder",
                        "data-qa": "tabs_item_render_count_placeholder",
                      }),
                    (!!H || !!F || !!V) &&
                      Ae === "right" &&
                      t.createElement(y, {
                        icon: H,
                        svgIcon: F,
                        customIcon: V,
                        className: "c-tabs__tab_icon--right",
                      })
                  )
            );
            return (
              ve &&
                (Te = t.createElement(
                  d.A,
                  {
                    getTemplate: ke,
                    desktopAppOnly: !1,
                    showSlackKitContextMenuOnDesktop: !0,
                    width: "auto",
                    menuAriaLabel: de,
                  },
                  Te
                )),
              t.createElement(
                v.T.Provider,
                {
                  value: ye,
                },
                Te
              )
            );
          });
        O.displayName = "TabsItem";
        const C = O;
      },
      3214129289: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => z,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(7715417323),
          i = e(3514831633),
          d = e(8773153312),
          o = e(8683010724),
          a = e(2598612765),
          r = e(2312625946);
        const c = {
            name: "ellipsis-horizontal",
            variation: "filled",
          },
          l = (0, t.forwardRef)((Ae, ae) => {
            let {
              renderMenu: de,
              position: ve,
              label: Se,
              id: Ee,
              isSelected: be,
              isFocused: Ce,
            } = Ae;
            return t.createElement(
              i.cQ,
              {
                renderMenu: de,
                position: ve || "bottom-left",
              },
              t.createElement(
                r.Ay,
                {
                  tip: Se,
                  position: "top",
                  offsetY: 6,
                },
                t.createElement(a.A, {
                  id: Ee,
                  "aria-label": Se,
                  isSelected: be,
                  isFocused: Ce,
                  className: "c-tabs__tab_overflow",
                  svgIcon: c,
                  ref: ae,
                })
              )
            );
          });
        var m = e(5238395322);
        const v = 53,
          E = 27;
        function T(Ae) {
          const ae = Ae.ownerDocument.defaultView;
          if (!ae) return Ae.offsetWidth;
          const de = ae.getComputedStyle(Ae),
            ve =
              parseFloat(de.getPropertyValue("margin-left")) +
              parseFloat(de.getPropertyValue("margin-right"));
          return Ae.offsetWidth + ve;
        }
        _(T, "getWidth");
        function g(Ae) {
          const ae = Ae.ownerDocument.defaultView;
          if (!ae) return Ae.offsetHeight;
          const de = ae.getComputedStyle(Ae),
            ve =
              parseFloat(de.getPropertyValue("margin-top")) +
              parseFloat(de.getPropertyValue("margin-bottom"));
          return Ae.offsetHeight + ve;
        }
        _(g, "getHeight");
        const I = _((Ae, ae) => {
          let {
            outerElement: de,
            innerElement: ve,
            threshold: Se,
            totalTabsLength: Ee,
            childElements: be,
            containerSize: Ce,
            isHorizontal: Z,
          } = Ae;
          if (!de || !ve || !be || Ee === 0) return;
          const $ = Ce - Se,
            N = Z ? T : g,
            L = Array.from(be).map((ne) => N(ne));
          if ((0, m.A)(L) < $ && L.length === Ee) {
            ae(Ee);
            return;
          }
          let k = Z ? v : E,
            J = $,
            ee = 1;
          L.forEach((ne) => {
            (k += ne), k < $ && ne <= J && (ee += 1), (J -= ne);
          }),
            ae(ee);
        }, "recalculateVisibleTabs");
        var f = e(4525741652),
          y = e(8214116048),
          M = e(3078252698);
        const O = _((Ae) => (0, M.A)(Ae), "isReactNodeAString");
        var C = e(2322735331),
          h = e(1224315998),
          D = e(4806483452),
          P = e(4724591729),
          S = e(3688641936),
          b = e(796111729),
          K = e(8873262110),
          x = e(735940183),
          B = e(3821598679);
        function U() {
          return (
            (U =
              Object.assign ||
              function (Ae) {
                for (var ae = 1; ae < arguments.length; ae++) {
                  var de = arguments[ae];
                  for (var ve in de)
                    Object.prototype.hasOwnProperty.call(de, ve) &&
                      (Ae[ve] = de[ve]);
                }
                return Ae;
              }),
            U.apply(this, arguments)
          );
        }
        _(U, "_extends");
        const R = new x.Ay("slack-kit"),
          G = 85,
          H = 52,
          F = ["ArrowLeft"],
          V = ["ArrowRight"],
          X = F.concat("ArrowUp"),
          q = V.concat("ArrowDown");
        let oe = _(
          class extends t.PureComponent {
            setVisibleTabs(ae) {
              this.setState(() => ({
                numOfVisibleTabsShown: ae,
              }));
            }
            onResize() {
              var ae, de, ve, Se, Ee, be, Ce, Z, $, N;
              const L = this.props.orientation === y.t4.Horizontal,
                w = L
                  ? (ae = this.tabsContainerRef) === null ||
                    ae === void 0 ||
                    (de = ae.current) === null ||
                    de === void 0
                    ? void 0
                    : de.clientWidth
                  : (ve = this.tabsContainerRef) === null ||
                    ve === void 0 ||
                    (Se = ve.current) === null ||
                    Se === void 0
                  ? void 0
                  : Se.clientHeight;
              if (!w) return;
              const k = L ? G : H,
                J = {
                  outerElement:
                    (Ee = this.tabsContainerRef) === null ||
                    Ee === void 0 ||
                    (be = Ee.current) === null ||
                    be === void 0
                      ? void 0
                      : be.getBoundingClientRect(),
                  innerElement:
                    (Ce = this.lastVisibleTabRef) === null ||
                    Ce === void 0 ||
                    (Z = Ce.current) === null ||
                    Z === void 0
                      ? void 0
                      : Z.getBoundingClientRect(),
                  totalTabsLength: this.props.tabs.length,
                  numOfVisibleTabsShown: this.state.numOfVisibleTabsShown,
                  childElements:
                    ($ = this.tabsContainerRef) === null ||
                    $ === void 0 ||
                    (N = $.current) === null ||
                    N === void 0
                      ? void 0
                      : N.children,
                };
              I(
                {
                  ...J,
                  threshold: k,
                  containerSize: w,
                  isHorizontal: L,
                },
                this.setVisibleTabs
              ),
                this.setState(
                  () => ({
                    isResizeCalculationCompleted: !0,
                  }),
                  () => {
                    var ee, ne;
                    return (ne = (ee = this.props).onTabsResized) === null ||
                      ne === void 0
                      ? void 0
                      : ne.call(ee);
                  }
                );
            }
            componentDidMount() {
              this._isMounted = !0;
              const { maxSize: ae } = this.props;
              if (ae && !this.resizeListener) {
                var de;
                (this.resizeListener = (0, K.A)(this.onResize)),
                  this.resizeListener.observe(
                    (de = this.tabsContainerRef) === null || de === void 0
                      ? void 0
                      : de.current
                  );
              }
            }
            componentDidUpdate(ae, de) {
              var ve;
              const {
                defaultTabId: Se,
                tabs: Ee,
                manualTabActivation: be,
              } = this.props;
              var Ce;
              ((Ce =
                (ve = ae.tabs) === null || ve === void 0
                  ? void 0
                  : ve.length) !== null && Ce !== void 0
                ? Ce
                : 0) !== Ee.length && this.updateSelectedTab(),
                Se !== ae.defaultTabId && Se && this.selectTab(Se, void 0);
              const Z =
                  de.numOfVisibleTabsShown !== this.state.numOfVisibleTabsShown,
                $ = de.selectedTabId !== this.state.selectedTabId && !be;
              (Z || $) && this.updateFocusedTabIndex(),
                this.focusWhenVisible &&
                  ((this.focusWhenVisible = !1), this.focus());
            }
            componentWillUnmount() {
              if (((this._isMounted = !1), this.resizeListener)) {
                var ae;
                (ae = this.resizeListener) === null ||
                  ae === void 0 ||
                  ae.disconnect(),
                  (this.resizeListener = null);
              }
            }
            onFocus(ae) {
              const { focusedTabIndex: de } = this.state,
                ve = this.getTabIndexById(ae.target.id);
              ve !== de && this.focusTab(ve);
              const { onFocus: Se } = this.props;
              Se == null || Se(ae);
            }
            onBlur(ae) {
              const { onBlur: de } = this.props;
              de == null || de(ae);
            }
            onKeyDown(ae) {
              const de = ae.key;
              if (ae.shiftKey || ae.metaKey || ae.ctrlKey || ae.altKey) return;
              const Se = this.props.orientation === "vertical",
                Ee = Se ? q : V,
                be = Se ? X : F;
              if (!["Home", "End"].concat(Ee, be).includes(de)) return;
              const Z = Ee.includes(de),
                $ = be.includes(de);
              ae.preventDefault(),
                Z && this.onNextArrow(ae),
                $ && this.onPreviousArrow(ae),
                de === "Home" && this.onHome(ae),
                de === "End" && this.onEnd(ae);
            }
            isSelectedTabVisible() {
              return this.getVisibleTabIds().includes(this.state.selectedTabId);
            }
            getHiddenTabs() {
              const { tabs: ae } = this.props,
                { numOfVisibleTabsShown: de } = this.state;
              return ae.slice(de, ae.length);
            }
            getVisibleTabs() {
              var ae, de;
              const { tabs: ve, maxSize: Se } = this.props;
              if (!!!Se) return ve;
              const be =
                ((ae = this) === null ||
                ae === void 0 ||
                (de = ae.state) === null ||
                de === void 0
                  ? void 0
                  : de.numOfVisibleTabsShown) || ve.length;
              return ve.length === be
                ? ve
                : ve.slice(0, be).concat({
                    id: this.overflowTabId,
                  });
            }
            getVisibleTabIds() {
              return this.getVisibleTabs().map((ae) => {
                let { id: de } = ae;
                return de;
              });
            }
            getTabById(ae) {
              var de;
              return (de = this.props.tabs) === null || de === void 0
                ? void 0
                : de.find((ve) => ve.id === ae);
            }
            getTabIndexById(ae) {
              return this.getVisibleTabIds().indexOf(ae);
            }
            onHome(ae) {
              if (this.state.focusedTabIndex === 0) return;
              const {
                  onTabWillChange: de,
                  manualTabActivation: ve,
                  onTabChange: Se,
                } = this.props,
                Ee = this.getVisibleTabIds(),
                be = 0;
              if ((this.focusTab(be), ve)) return;
              const Ce = Ee[be];
              Ce !== this.overflowTabId &&
                (de == null ? void 0 : de(Ce)) !== !1 &&
                this.setState(
                  () => ({
                    selectedTabId: Ce,
                  }),
                  () => {
                    Se == null || Se(Ce, ae);
                  }
                );
            }
            onEnd(ae) {
              const de = this.getVisibleTabIds(),
                ve = de.length - 1;
              if (this.state.focusedTabIndex === ve) return;
              const {
                onTabWillChange: Se,
                manualTabActivation: Ee,
                onTabChange: be,
              } = this.props;
              if ((this.focusTab(ve), Ee)) return;
              const Ce = de[ve];
              Ce !== this.overflowTabId &&
                (Se == null ? void 0 : Se(Ce)) !== !1 &&
                this.setState(
                  () => ({
                    selectedTabId: Ce,
                  }),
                  () => (be == null ? void 0 : be(Ce, ae))
                );
            }
            onNextArrow(ae) {
              const {
                  onTabWillChange: de,
                  manualTabActivation: ve,
                  onTabChange: Se,
                } = this.props,
                Ee = this.getVisibleTabIds(),
                be = this.getTabIndexById(ae.target.id),
                Ce = be >= Ee.length - 1 ? 0 : be + 1;
              if ((this.focusTab(Ce), ve)) return;
              const Z = Ee[Ce];
              Z !== this.overflowTabId &&
                (de == null ? void 0 : de(Z)) !== !1 &&
                this.setState(
                  () => ({
                    selectedTabId: Z,
                  }),
                  () => (Se == null ? void 0 : Se(Z, ae))
                );
            }
            onPreviousArrow(ae) {
              const {
                  onTabWillChange: de,
                  manualTabActivation: ve,
                  onTabChange: Se,
                } = this.props,
                Ee = this.getVisibleTabIds(),
                be = this.getTabIndexById(ae.target.id),
                Ce = be === 0 ? Ee.length - 1 : be - 1;
              if ((this.focusTab(Ce), ve)) return;
              const Z = Ee[Ce];
              Z !== this.overflowTabId &&
                (de == null ? void 0 : de(Z)) !== !1 &&
                this.setState(
                  () => ({
                    selectedTabId: Z,
                  }),
                  () => (Se == null ? void 0 : Se(Z, ae))
                );
            }
            getNextTabId() {
              const {
                  defaultTabId: ae,
                  tabs: de,
                  currentTabId: ve,
                } = this.props,
                Se = ae ? this.getTabIndexById(ae) : void 0,
                Ee = ve ? this.getTabIndexById(ve) : void 0;
              return ve && Ee ? ve : ae && Se ? ae : de[0].id;
            }
            updateSelectedTab() {
              if (!this._isMounted || !this.props.tabs.length) return;
              const ae = this.getNextTabId();
              ae !== this.state.selectedTabId &&
                this.setState(() => ({
                  selectedTabId: ae,
                }));
            }
            focus() {
              if (this.isHidden) return (this.focusWhenVisible = !0), !1;
              this.focusWhenVisible = !1;
              const { current: ae } = this.focusedTabRef;
              if (ae) return ae.focus(), !0;
              const de = this.props.currentTabId || this.state.selectedTabId,
                ve = this.getTabIndexById(de) || 0;
              return this.focusTab(ve), !0;
            }
            focusTab(ae) {
              this.setState(() => ({
                focusedTabIndex: ae,
              }));
            }
            selectTab(ae, de) {
              const { onTabWillChange: ve, onTabChange: Se } = this.props,
                Ee = this.getTabById(ae);
              if (!Ee) return null;
              if ((ve == null ? void 0 : ve(ae)) !== !1) {
                if (Ee.isExternalLink) {
                  var be;
                  return (be = Ee.onClick) === null || be === void 0
                    ? void 0
                    : be.call(Ee, ae, de);
                }
                return (
                  this.setState(
                    () => ({
                      selectedTabId: ae,
                    }),
                    () => {
                      if (
                        (Se == null || Se(ae, de),
                        this.props.focusOnFirstFocusableChildOnChange)
                      ) {
                        const Ce = this.panelRef && this.panelRef.current,
                          Z = (0, S.Fp)(Ce);
                        Z == null || Z.focus();
                      }
                    }
                  ),
                  null
                );
              }
            }
            updateFocusedTabIndex() {
              const ae = this.isSelectedTabVisible()
                ? this.state.selectedTabId
                : this.overflowTabId;
              this.setState(() => ({
                focusedTabIndex: this.getVisibleTabIds().indexOf(ae),
              }));
            }
            onTabClick(ae, de) {
              var ve;
              const Se = this.getTabById(ae);
              Se &&
                (Se.isExternalLink || this.selectTab(Se.id, de),
                Se == null ||
                  (ve = Se.onClick) === null ||
                  ve === void 0 ||
                  ve.call(Se, Se.id, de));
            }
            get isHidden() {
              return (
                !!this.props.maxSize && !this.state.isResizeCalculationCompleted
              );
            }
            renderOverflowTabLabel(ae) {
              const de = R.t("More\u2026", {
                fallbackHash: "4ac8baf107e91d808d6840701812f4abed7fa3b5",
                fallbackHashNs: "mentions",
              });
              if (this.isSelectedTabVisible()) return de;
              const ve = this.getTabById(ae);
              if (!ve) return de;
              const Se = ve["aria-label"] || ve.label || ve.title;
              return !Se || !O(Se)
                ? de
                : R.t("More: {selectedTabLabel}", {
                    selectedTabLabel: Se,
                    fallbackHash: "4ac8baf107e91d808d6840701812f4abed7fa3b5",
                    fallbackHashNs: "mentions",
                  });
            }
            renderTabsItem(ae, de) {
              const {
                  tabs: ve,
                  fullWidthMenu: Se,
                  orientation: Ee,
                  iconPosition: be,
                  focusOnMount: Ce,
                } = this.props,
                Z = this.state.focusedTabIndex === de,
                $ = Z ? this.focusedTabRef : void 0,
                N = ae.autoClogProps
                  ? {
                      ...this.autoClogProps,
                      ...ae.autoClogProps,
                      elementType: h.ElementType.TAB,
                    }
                  : this.autoClogProps,
                L = de === ve.length - 1 ? this.lastVisibleTabRef : void 0,
                w = L ? (0, D.A)($, L) : $,
                k = this.props.currentTabId || this.state.selectedTabId,
                J = k === ae.id;
              return ae.id === this.overflowTabId
                ? t.createElement(l, {
                    renderMenu: this.renderOverflowMenu,
                    position: "bottom-left",
                    label: this.renderOverflowTabLabel(k),
                    isSelected: !this.isSelectedTabVisible(),
                    isFocused: Z,
                    ref: w,
                    id: ae.id,
                    key: ae.id,
                  })
                : t.createElement(a.A, {
                    key: ae.id,
                    id: ae.id,
                    icon: ae.icon,
                    svgIcon: ae.svgIcon,
                    customIcon: ae.customIcon,
                    label: ae.label || ae.title,
                    onClick: this.onTabClick,
                    autoClogProps: N,
                    isSelected: J,
                    isFocused: Z,
                    focusOnMount: Ce,
                    isDisabled: ae.isDisabled,
                    fullWidth: Se || Ee === "vertical",
                    titleCount: ae.titleCount,
                    maxTitleCount: ae.maxTitleCount,
                    "aria-label": ae["aria-label"],
                    "aria-describedby": ae["aria-describedby"],
                    "data-qa": ae["data-qa"] || "tabs_item",
                    "aria-haspopup": ae["aria-haspopup"],
                    ref: w,
                    formatCount: this.props.formatCount,
                    isLoading: ae.isLoading,
                    isCountLoading: ae.isCountLoading,
                    iconPosition: be,
                    className: ae.className,
                    contextMenuAriaLabel: ae.contextMenuAriaLabel,
                    contextMenuTemplate: ae.contextMenuTemplate,
                  });
            }
            renderTabsItems() {
              return this.getVisibleTabs().map((de, ve) => {
                typeof de.label != "string" &&
                  !t.isValidElement(de.label) &&
                  typeof de.title != "string" &&
                  !t.isValidElement(de.title) &&
                  !de["aria-label"] &&
                  ((0, P.Cu)() || (0, P.b3)()) &&
                  (0, b.Wo)().error(
                    "Tabs requires either a label of type string, or an aria-label."
                  );
                const Se = this.renderTabsItem(de, ve);
                return de.renderWrapper
                  ? t.createElement(
                      t.Fragment,
                      {
                        key: de.id,
                      },
                      de.renderWrapper(Se)
                    )
                  : Se;
              });
            }
            renderOverflowMenu(ae) {
              var de;
              const { selectedTabId: ve } = this.state,
                Se =
                  (de = this.getHiddenTabs()) === null || de === void 0
                    ? void 0
                    : de.map((Ee) => ({
                        label: Ee.label || Ee.title,
                        id: Ee.id,
                        click: (be) => this.onTabClick(Ee.id, be),
                        key: Ee.id,
                        type: d.A.radio,
                        checked: Ee.id === ve,
                        icon: Ee.svgIcon
                          ? t.createElement(
                              o.A,
                              U(
                                {
                                  size: "18",
                                },
                                Ee.svgIcon
                              )
                            )
                          : null,
                        className: "c-tabs__tab_overflow_menu_item",
                      }));
              return t.createElement(
                i.a,
                U(
                  {
                    width: "200px",
                  },
                  ae,
                  {
                    template: Se,
                  }
                )
              );
            }
            renderTabPanelLabel(ae) {
              const de = this.getTabById(ae);
              if (!de) return;
              const ve = de["aria-label"] || de.label || de.title;
              if (O(ve)) return ve;
            }
            render() {
              var ae;
              const {
                  fullHeight: de,
                  fullWidthMenu: ve,
                  className: Se,
                  orientation: Ee,
                  tabMenuClassnames: be,
                  tabPanelClassnames: Ce,
                  ariaLabel: Z,
                  currentTabId: $,
                  maxSize: N,
                } = this.props,
                L = $ || this.state.selectedTabId;
              var w;
              const k =
                  (w =
                    (ae = this.getTabById(L)) === null || ae === void 0
                      ? void 0
                      : ae.content) !== null && w !== void 0
                    ? w
                    : "",
                J = (0, n.A)(Se, {
                  "c-tabs__tab_container--full_height": de,
                  "c-tabs__tab_container--vertical": Ee === "vertical",
                  "c-tabs__tab_menu--overflow_ellipsis": !!N,
                }),
                ee = (0, n.A)(be, "c-tabs__tab_menu", {
                  "c-tabs__tab_menu--full_width": ve,
                  "c-tabs__tab_menu--vertical": Ee === "vertical",
                  "c-tabs__tab_menu--hidden": this.isHidden,
                }),
                ne = (0, n.A)(Ce, {
                  "c-tabs__tab_panel--vertical": Ee === "vertical",
                });
              return t.createElement(
                "div",
                {
                  className: J,
                  "data-qa": "tabs_full_height_class",
                },
                t.createElement(
                  "div",
                  {
                    role: "tablist",
                    className: ee,
                    "data-qa": "tabs_full_width_class",
                    onKeyDown: this.onKeyDown,
                    onFocus: this.onFocus,
                    onBlur: this.onBlur,
                    "aria-orientation": Ee,
                    "aria-label": Z,
                    ref: this.tabsContainerRef,
                  },
                  this.renderTabsItems()
                ),
                k &&
                  t.createElement(f.A, {
                    tabContent: k,
                    fullHeight: de,
                    ref: this.panelRef,
                    className: ne,
                    "aria-label": this.renderTabPanelLabel(L),
                  })
              );
            }
            constructor(ae) {
              var de;
              super(ae),
                (0, C.v)(this, [
                  "onKeyDown",
                  "onFocus",
                  "onBlur",
                  "onTabClick",
                  "onResize",
                  "renderOverflowMenu",
                  "setVisibleTabs",
                ]),
                (this.focusedTabRef = t.createRef()),
                (this.panelRef = t.createRef()),
                (this.tabsContainerRef = t.createRef()),
                (this.lastVisibleTabRef = t.createRef()),
                (this.resizeListener = null),
                (this._isMounted = !1),
                (this.focusWhenVisible = !1),
                ae.autoClogProps &&
                  (this.autoClogProps = {
                    ...ae.autoClogProps,
                    elementType: h.ElementType.TAB,
                  });
              const ve =
                  ae.currentTabId ||
                  ae.defaultTabId ||
                  ((de = ae.tabs[0]) === null || de === void 0
                    ? void 0
                    : de.id),
                Se = this.getTabIndexById(ve);
              (this.state = {
                selectedTabId: ve,
                focusedTabIndex: Se !== -1 ? Se : 0,
                numOfVisibleTabsShown: this.getVisibleTabs().length,
                isResizeCalculationCompleted: !1,
              }),
                (this.overflowTabId = `sk-overflow-tab-${(0, B.A)()}`);
            }
          },
          "Tabs"
        );
        (oe.displayName = "Tabs"),
          (oe.defaultProps = {
            onTabChange: s.A,
            orientation: "horizontal",
            iconPosition: "right",
            manualTabActivation: !1,
            focusOnFirstFocusableChildOnChange: !0,
          });
        const z = oe;
      },
      4275787242: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => i,
        });
        var t = e(5824283093),
          n = e(3708320478),
          s = e(5733135148);
        const i = _((d) => {
          let {
            children: o,
            duration: a,
            svgIconProps: r,
            toastClasses: c,
            position: u,
            offsetX: l,
            offsetY: m,
            showCloseButton: v,
            onCloseComplete: E,
            shouldAutoFade: T,
            shouldSkipToastDismissal: g,
            closeButtonClasses: I,
            svgIconClassName: f,
            announceContentAsAssertive: y,
          } = d;
          return t.createElement(
            s.Ay,
            {
              fadeDelay: a,
              svgIconClassName: f,
              svgIconProps: r,
              toastClasses: c,
              offsetX: l,
              offsetY: m,
              position: u,
              showCloseButton: v,
              onCloseComplete: E,
              shouldAutoFade: T,
              shouldSkipToastDismissal: g,
              closeButtonClasses: I,
            },
            t.createElement(
              n.z,
              {
                assertive: y,
              },
              o
            )
          );
        }, "Toast");
        (i.displayName = "Toast"),
          (i.defaultProps = {
            duration: 6e3,
          });
      },
      2855755676: (W, A, e) => {
        "use strict";
        e.d(A, {
          F: () => t,
          n: () => n,
        });
        const t = {
            small: "small",
            medium: "medium",
            large: "large",
          },
          n = {
            small: 22,
            medium: 26,
            large: 32,
          };
      },
      561151542: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => H,
          L: () => R,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(7715417323),
          i = e(126225536),
          d = e(1030162945),
          o = e(7969928607),
          a = e(3631789182),
          r = e(923114964),
          c = e(4236440541),
          u = e(2907956722),
          l = e(1407713935),
          m = e(4559887502),
          v = e(8798294025),
          E = e(6839188756),
          T = e(6308822),
          g = e(1610251172),
          I = e(7193040700),
          f = e(3267847539),
          y = e(8683010724),
          M = e(5484624422),
          p = e(2312625946),
          O = e(82287009),
          C = e(8040098042),
          h = e(6112179660),
          D = e(4327331459),
          P = e(3707193570),
          S = e(4862221402),
          b = e(9391594207),
          K = e(2235302340),
          x = e(9101533895),
          B = e(3677514771);
        function U() {
          return (
            (U =
              Object.assign ||
              function (F) {
                for (var V = 1; V < arguments.length; V++) {
                  var X = arguments[V];
                  for (var q in X)
                    Object.prototype.hasOwnProperty.call(X, q) && (F[q] = X[q]);
                }
                return F;
              }),
            U.apply(this, arguments)
          );
        }
        _(U, "_extends");
        let R = _(
          class extends t.Component {
            renderChannelToken(V) {
              const {
                channel: X,
                showMemberCounts: q,
                isSelected: oe,
                channelHasNonUniqueName: z,
              } = this.props;
              let Ae;
              return (
                (0, l.LI)(X)
                  ? (Ae = t.createElement(r.Ay, {
                      id: (0, v.e)(X),
                      className: "c-token_channel",
                    }))
                  : (0, l.yz)(X)
                  ? (Ae = t.createElement(c.A, {
                      mpim: X,
                      className: "c-token_channel",
                      isActive: oe,
                    }))
                  : (Ae = t.createElement(a.A, {
                      channel: X,
                      className: "c-token_channel",
                      displayFormerNames: !1,
                      showFilledIcon: !0,
                      showMemberCounts: q,
                      showTeamForLocalChannel: z,
                    })),
                t.createElement(
                  "span",
                  {
                    className: V,
                    "data-qa": "token_channel",
                  },
                  Ae
                )
              );
            }
            renderContent() {
              const {
                isLoading: V,
                isUnknown: X,
                isError: q,
                isMemberError: oe,
                isTeamError: z,
                isInvalid: Ae,
                channel: ae,
                memberId: de,
                teamName: ve,
                userGroupId: Se,
                channelSection: Ee,
                contentInnerClassName: be,
                emailTeam: Ce,
              } = this.props;
              let Z = (0, n.A)("c-token_content__inner", be);
              return V && !Ae
                ? ((Z += " c-token_content__inner--loading"),
                  this.renderLoadingToken(Z))
                : X
                ? ((Z += " c-token_content__inner--unknown"),
                  this.renderUnknownToken(Z))
                : q
                ? ((Z += " c-token_content__inner--error"),
                  this.renderErrorToken(Z))
                : Ce
                ? ((Z += " c-token_content__inner--email_with_team_icon"),
                  this.renderEmailTokenWithTeamIcon(Z))
                : de && oe
                ? ((Z += " c-token_content__inner--error"),
                  this.renderMemberErrorToken(Z))
                : de
                ? ((Z += " c-token_content__inner--member"),
                  this.renderMemberToken())
                : ae
                ? this.renderChannelToken(Z)
                : ve && z
                ? ((Z += " c-token_content__inner--error"),
                  this.renderTeamErrorToken(Z))
                : ve
                ? ((Z += " c-token_content__inner--team"),
                  this.renderTeamToken(Z))
                : Ee
                ? ((Z += " c-token_content__inner--channel_section"),
                  this.renderChannelSectionToken(Z))
                : Se
                ? ((Z += " c-token_content__inner--usergroup"),
                  this.renderUserGroupToken(Z))
                : this.renderPlainToken(Z);
            }
            renderErrorToken(V) {
              const { label: X } = this.props;
              return t.createElement(
                "div",
                {
                  className: "inline_flex",
                },
                t.createElement(
                  "span",
                  {
                    className: "c-token__error_icon_container",
                  },
                  t.createElement(y.A, {
                    size: "18",
                    name: "warning",
                    "data-qa": "token_error_icon",
                  })
                ),
                t.createElement(
                  "span",
                  {
                    className: (0, n.A)(V, "c-token_content__label"),
                    "data-qa": "token_error",
                  },
                  X
                )
              );
            }
            renderLoadingToken(V) {
              const { size: X, label: q } = this.props;
              return t.createElement(
                "div",
                {
                  className: "inline_flex",
                },
                t.createElement(
                  "span",
                  {
                    className: "c-token__loading_icon_container",
                  },
                  t.createElement(
                    T.A,
                    U(
                      {},
                      X
                        ? {
                            size: X,
                          }
                        : {},
                      {
                        "data-qa": "token_loading_icon",
                      }
                    )
                  )
                ),
                t.createElement(
                  "span",
                  {
                    className: (0, n.A)(V, "c-token_content__label"),
                    "data-qa": "token_loading",
                  },
                  q
                )
              );
            }
            renderMemberToken() {
              const {
                forceRealName: V,
                isDisabled: X,
                memberId: q,
                size: oe,
              } = this.props;
              return t.createElement(r.Ay, {
                id: q,
                isDeactivated: X,
                showPresence: !1,
                showTooltip: !1,
                useShortMode: !0,
                forceRealName: V,
                showStatus: !1,
                className: "c-token--member c-token__avatar margin_right_25",
                "data-qa": "token_member",
                tokenSize: oe,
              });
            }
            renderMemberErrorToken(V) {
              const {
                forceRealName: X,
                isDisabled: q,
                memberId: oe,
                size: z,
              } = this.props;
              return t.createElement(r.Ay, {
                id: oe,
                isDeactivated: q,
                showPresence: !1,
                showTooltip: !1,
                useShortMode: !0,
                forceRealName: X,
                showStatus: !1,
                className: (0, n.A)(V, "c-token--member c-token__avatar"),
                "data-qa": "token_member",
                tokenSize: z,
              });
            }
            renderIcon() {
              const { icon: V, svgIcon: X } = this.props;
              return X
                ? t.createElement(
                    "span",
                    {
                      className: "c-token_content__icon",
                    },
                    t.createElement(
                      y.A,
                      U(
                        {
                          "data-qa": "token_plain_icon",
                          inline: !0,
                          size: "inherit",
                        },
                        X
                      )
                    )
                  )
                : V
                ? t.createElement(g.A, {
                    "data-qa": "token_plain_icon",
                    size: "inherit",
                    className: "c-token_content__icon",
                    type: V,
                    inline: !0,
                  })
                : null;
            }
            renderPlainToken(V) {
              const { label: X } = this.props;
              return t.createElement(
                "span",
                {
                  className: V,
                },
                this.renderIcon(),
                t.createElement(
                  "span",
                  {
                    className: "c-token_content__label",
                    "data-qa": "token_plain_label",
                  },
                  t.createElement(o.A, {
                    text: X,
                    inputIsEscaped: !0,
                    emojiSize: d.lw.MEDIUM,
                  })
                )
              );
            }
            renderEmailTokenWithTeamIcon(V) {
              const { icon: X, label: q, emailTeam: oe } = this.props;
              return t.createElement(
                "span",
                {
                  className: V,
                },
                X &&
                  t.createElement(g.A, {
                    "data-qa": "token_email_with_team_icon_icon",
                    size: "inherit",
                    className: "c-token_content__icon margin_right_50",
                    type: X,
                    inline: !0,
                  }),
                t.createElement(
                  "span",
                  {
                    className: "c-token_content__label margin_right_25",
                    "data-qa": "token_email_with_team_icon_content_label",
                  },
                  t.createElement(o.A, {
                    text: q,
                    inputIsEscaped: !0,
                    emojiSize: d.lw.MEDIUM,
                  })
                ),
                oe &&
                  t.createElement(
                    "span",
                    {
                      className: "c-member__secondary_content",
                    },
                    t.createElement(M.A, {
                      team: oe,
                      "data-qa": "token_email_with_team_icon",
                      size: r.Cg,
                      className: "c-member__team_icon",
                    })
                  )
              );
            }
            renderTeamToken(V) {
              const { teamId: X, teamName: q } = this.props;
              return t.createElement(
                "div",
                {
                  className: "inline_flex",
                },
                t.createElement(M.A, {
                  id: X,
                  size: 26,
                  className: "c-token__team_icon",
                  "data-qa": "token_team_icon",
                }),
                t.createElement(
                  "span",
                  {
                    className: (0, n.A)(V, "c-token_content__label"),
                    "data-qa": "token_team_name",
                  },
                  q
                )
              );
            }
            renderTeamErrorToken(V) {
              const { teamId: X, teamName: q } = this.props;
              return t.createElement(
                "div",
                {
                  className: "inline_flex",
                },
                t.createElement(M.A, {
                  id: X,
                  size: 26,
                  className: "c-token__team_icon",
                  "data-qa": "token_team_icon_error",
                }),
                t.createElement(
                  "span",
                  {
                    className: (0, n.A)(V, "c-token_content__label"),
                    "data-qa": "token_team_name_error",
                  },
                  q
                )
              );
            }
            renderChannelSectionToken(V) {
              const { channelSection: X } = this.props;
              return X
                ? t.createElement(
                    "span",
                    {
                      className: (0, n.A)(V, "c-token_content__label"),
                    },
                    t.createElement(i.A, {
                      channelSection: X,
                    })
                  )
                : null;
            }
            renderUnknownToken(V) {
              const { label: X } = this.props;
              return t.createElement(
                "div",
                {
                  className: "inline_flex",
                },
                t.createElement(
                  "span",
                  {
                    className: "c-token__unknown_icon_container",
                  },
                  t.createElement(y.A, {
                    size: "18",
                    name: "emoji-missing",
                    variation: "filled",
                    "data-qa": "token_unknown_icon",
                  })
                ),
                t.createElement(
                  "span",
                  {
                    className: (0, n.A)(V, "c-token_content__label"),
                    "data-qa": "token_unknown",
                  },
                  X
                )
              );
            }
            renderUserGroupToken(V) {
              const { userGroupId: X } = this.props;
              return t.createElement(u.A, {
                id: X,
                showDescription: !1,
                className: (0, n.A)(V, "c-token_content__label"),
              });
            }
            render() {
              const {
                  isDisabled: V,
                  isInvalid: X,
                  isError: q,
                  memberId: oe,
                  isMemberError: z,
                  isTeamError: Ae,
                  isUnknown: ae,
                  isLoading: de,
                  isSelected: ve,
                  size: Se,
                  hoverText: Ee,
                  tabIndex: be,
                  contentEditable: Ce,
                  className: Z,
                  onMouseDown: $,
                  enableProfileHoverCard: N,
                  customizeProfileHoverCardProps: L,
                  isRestricted: w,
                } = this.props,
                k = (0, n.A)("c-token", Z, `c-token--${Se}`, {
                  "c-token--selected": ve,
                  "c-token--disabled": V,
                  "c-token--invalid": X,
                  "c-token--restricted": w,
                  "c-token--error": q || z || Ae,
                  "c-token--unknown": ae,
                  "c-token--loading": de,
                }),
                J = this.renderContent();
              let ee = J;
              Ee && J
                ? (ee = t.createElement(
                    p.Ay,
                    {
                      tip: Ee,
                    },
                    J
                  ))
                : oe &&
                  N &&
                  (ee = (0, O.yN)({
                    ...(L || {}),
                    memberId: oe,
                    children: J,
                  }));
              const ne = this.props.renderIcon(this.props);
              return t.createElement(
                "span",
                {
                  className: k,
                  "data-id": this.props["data-id"],
                  "data-qa": this.props["data-qa"],
                  tabIndex: be,
                  contentEditable: Ce,
                  onMouseDown: $,
                },
                t.createElement(
                  "span",
                  {
                    className: "c-token__content",
                    "data-qa": "token_content",
                  },
                  ee
                ),
                ne
              );
            }
          },
          "Token"
        );
        (R.displayName = "Token"),
          (R.defaultProps = {
            "data-qa": "select_token",
            isDisabled: !1,
            isInvalid: !1,
            isError: !1,
            isUnknown: !1,
            isLoading: !1,
            isSelected: !1,
            size: I.hu.MEDIUM,
            renderIcon: s.A,
            forceRealName: !1,
            contentEditable: !1,
            channelHasNonUniqueName: !1,
          });
        const G = _((F, V) => {
            const { entityId: X, disableIdParsing: q } = V;
            let oe;
            (0, D.A)(X) && !q && (oe = X);
            let z, Ae;
            if (((0, P.Ay)(X) || (0, P.JV)(X)) && !q) {
              const be = (0, B._J)(F, X);
              be && ((z = X), (Ae = (0, E.F1)(be)));
            }
            let ae;
            (0, h.A)(X) && !q && (ae = (0, K.xe)(F, X));
            let de;
            (0, S.A)(X) && !q && (de = X);
            const ve = (0, x.OL)(F, X),
              Se = (0, x.MS)(F);
            let Ee;
            return (
              (0, C.A)(X) && ve && (Ee = (0, m.i)(Se, ve)),
              {
                channel: ve,
                memberId: oe,
                teamName: Ae,
                teamId: z,
                userGroupId: de,
                channelSection: ae,
                channelHasNonUniqueName: Ee,
              }
            );
          }, "mapStateToProps"),
          H = (0, f.nM)((0, b.N)(G, null)(R));
      },
      2312625946: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => S,
          PK: () => I,
          Ws: () => C,
          YU: () => l.Y,
          n1: () => f,
        });
        var t = e(5824283093),
          n = e(862210999),
          s = e(7418219258),
          i = e(4505564445),
          d = e(1293324111),
          o = e(1641606663),
          a = e(7331519201),
          r = e(348699080),
          c = e(8427910566),
          u = e(5249175977),
          l = e(1926356522),
          m = e(8214116048),
          v = e(2689960678),
          E = e(8869734951),
          T = e(3821598679);
        function g() {
          return (
            (g =
              Object.assign ||
              function (K) {
                for (var x = 1; x < arguments.length; x++) {
                  var B = arguments[x];
                  for (var U in B)
                    Object.prototype.hasOwnProperty.call(B, U) && (K[U] = B[U]);
                }
                return K;
              }),
            g.apply(this, arguments)
          );
        }
        _(g, "_extends");
        const I = 300,
          f = 60,
          y = 3,
          M = 3;
        let p = _(
          class {
            track(x) {
              this.instance && x !== this.instance && this.instance.hide(),
                (this.instance = x);
            }
            stopTracking(x) {
              x === this.instance && (this.instance = void 0);
            }
            hideActive() {
              this.instance && (this.instance.hide(), (this.instance = void 0));
            }
          },
          "TooltipManager"
        );
        const O = new p();
        function C() {
          O.hideActive();
        }
        _(C, "hideVisibleTooltip");
        function h(K) {
          const x = _(
            (B) =>
              ((B == null ? void 0 : B.offsetWidth) || 0) <
                ((B == null ? void 0 : B.scrollWidth) || 0) ||
              ((B == null ? void 0 : B.offsetHeight) || 0) <
                ((B == null ? void 0 : B.scrollHeight) || 0),
            "retIsTruncated"
          );
          if (K != null && K.querySelector) {
            const B = K.querySelector(".c-truncate");
            if (B) return x(B);
          }
          return x(K);
        }
        _(h, "isElementTruncated");
        function D(K, x) {
          return (
            K.width.toFixed(2) === (x == null ? void 0 : x.width.toFixed(2)) &&
            K.height.toFixed(2) ===
              (x == null ? void 0 : x.height.toFixed(2)) &&
            K.left.toFixed(2) === (x == null ? void 0 : x.left.toFixed(2)) &&
            K.right.toFixed(2) === (x == null ? void 0 : x.right.toFixed(2)) &&
            K.top.toFixed(2) === (x == null ? void 0 : x.top.toFixed(2)) &&
            K.bottom.toFixed(2) === (x == null ? void 0 : x.bottom.toFixed(2))
          );
        }
        _(D, "areBoundsEqual");
        const P = t.forwardRef((K, x) => {
          let {
            children: B,
            position: U = m.yX.Top,
            delay: R = 150,
            shouldFade: G = !0,
            tip: H,
            tipClassName: F,
            tipArrowOffset: V,
            "data-qa": X,
            status: q = l.Y.Info,
            offsetX: oe = 0,
            offsetY: z = 0,
            zIndex: Ae = "menu",
            shouldForceVisible: ae = !1,
            shouldOnlyShowWhenTruncated: de = !1,
            onShow: ve,
            onHide: Se,
            onClick: Ee,
            maxWidth: be,
            hideFromScreenReader: Ce = !1,
            automaticallyPositionTip: Z = !0,
            tipAnchorRef: $,
            ...N
          } = K;
          const L = t.Children.only(B),
            { windowRef: w } = (0, t.useContext)(o.Mn),
            k = (0, t.useRef)(),
            J = (0, t.useRef)(null),
            ee = (0, t.useRef)(),
            ne = (0, t.useRef)(!1),
            [pe, Me] = (0, t.useState)(!1),
            [ke, ge] = (0, t.useState)(!1),
            [fe, re] = (0, t.useState)(!1),
            [le, Re] = (0, t.useState)(),
            ye = (0, t.useContext)(c.A),
            Te = h(ee.current),
            De = Te || !de,
            Ue = ae || pe || ke,
            Ke = !!le && De,
            Ze = (0, t.useMemo)(() => (0, E.P)(J, x), [x]),
            Q = (0, t.useCallback)(
              (Kt, qt) =>
                Z
                  ? {
                      top: Kt,
                      left: qt,
                    }
                  : void 0,
              [Z]
            ),
            ie = (0, t.useMemo)(() => `sk-tooltip-${(0, T.A)()}`, []),
            Ve = (0, t.useCallback)(() => {
              re(!0);
            }, []),
            [xe, je] = (0, a.i)(Ve),
            Fe = (0, t.useMemo)(
              () => ({
                id: ie,
                hide: () => {
                  je(), ne.current && re(!1), Se == null || Se();
                },
              }),
              [ie, je, Se]
            ),
            He = (0, t.useCallback)(() => {
              je(), O.stopTracking(Fe);
            }, [Fe, je]),
            Oe = (0, t.useCallback)(() => {
              ae || ye ? re(!0) : xe(R),
                ve == null ||
                  ve({
                    isTruncated: Te,
                  }),
                O.track(Fe);
            }, [ae, ye, ve, Te, Fe, xe, R]),
            Ye = (0, t.useCallback)(() => {
              He(), fe && (re(!1), Se == null || Se());
            }, [He, fe, Se]),
            at = (0, t.useCallback)(
              (Kt) => {
                L.props.onKeyDown && L.props.onKeyDown(Kt),
                  Kt.which === i._f &&
                    fe &&
                    ye &&
                    (Kt.nativeEvent.stopImmediatePropagation(),
                    Kt.stopPropagation(),
                    re(!1));
              },
              [re, fe, ye, L.props]
            ),
            _t = (0, t.useCallback)(
              (Kt) => {
                L.props.onMouseEnter && L.props.onMouseEnter(Kt),
                  Me(!0),
                  fe || (k.current = Kt);
              },
              [L.props, fe]
            ),
            pt = (0, t.useCallback)(
              (Kt) => {
                L.props.onFocus && L.props.onFocus(Kt), ye && ge(!0);
              },
              [L.props, ye]
            ),
            Qe = (0, t.useCallback)(
              (Kt) => {
                L.props.onMouseLeave && L.props.onMouseLeave(Kt),
                  Me(!1),
                  (k.current = void 0);
              },
              [L.props]
            ),
            ct = (0, t.useCallback)(
              (Kt) => {
                L.props.onBlur && L.props.onBlur(Kt), ge(!1);
              },
              [L.props]
            );
          (0, t.useEffect)(
            _(function () {
              ee.current || (ee.current = (0, s.findDOMNode)(J.current));
            }, "syncChildDOMNodeRef")
          ),
            (0, t.useEffect)(() => {
              const Kt = w.deref(),
                qt = _((Tn) => {
                  Tn.which === i._f && Ye();
                }, "hoverEscHide");
              if (Kt)
                return pe
                  ? (Kt.addEventListener("keydown", qt),
                    () => {
                      Kt.removeEventListener("keydown", qt);
                    })
                  : () => {
                      Kt.removeEventListener("keydown", qt);
                    };
            }, [pe, w, Ye]),
            (0, t.useEffect)(
              () => (
                (ne.current = !0),
                () => {
                  ne.current = !1;
                }
              ),
              []
            ),
            (0, r.A)(
              _(function () {
                let qt = ee.current;
                if (
                  ($ != null &&
                    $.current &&
                    (qt = (0, s.findDOMNode)($.current)),
                  Ue && qt)
                ) {
                  const Tn = le,
                    Mt = qt.getClientRects();
                  let Jt = Mt[0];
                  if (k.current) {
                    const Vt = k.current,
                      Sn = Array.from(Mt).find(
                        (ze) =>
                          Vt.clientY >= ze.top &&
                          Vt.clientY <= ze.bottom &&
                          Vt.clientX >= ze.left &&
                          Vt.clientX <= ze.right
                      );
                    Sn && (Jt = Sn);
                  }
                  if (!Jt) return;
                  const dn = w.deref(),
                    rn = dn ? dn.scrollX || dn.pageXOffset : 0,
                    gn = dn ? dn.scrollY || dn.pageYOffset : 0,
                    Zt = {
                      height: Jt.height,
                      width: Jt.width,
                      left: Jt.left + rn,
                      right: Jt.right + rn,
                      top: Jt.top + gn,
                      bottom: Jt.bottom + gn,
                    };
                  D(Zt, Tn) || Re(Zt);
                }
              }, "maybeCalculateContentBounds"),
              [Ue, $]
            ),
            (0, r.A)(
              _(function () {
                Ke && Ue ? Oe() : Ye();
              }, "showOrHideTooltip"),
              [Ke, Ue]
            );
          const Pt = L.props["aria-label"],
            zt = (0, t.useMemo)(
              () =>
                Pt === H || Ce
                  ? v.t0
                  : {
                      "aria-describedby": fe ? ie : void 0,
                    },
              [Pt, Ce, fe, H, ie]
            ),
            an = (0, t.useMemo)(
              () =>
                t.cloneElement(L, {
                  ...N,
                  ...L.props,
                  ...zt,
                  onClick: Ee || L.props.onClick,
                  onFocus: pt,
                  onBlur: ct,
                  onKeyDown: at,
                  onMouseEnter: _t,
                  onMouseLeave: Qe,
                  "data-sk": "tooltip_parent",
                }),
              [zt, L, ct, Ee, pt, at, _t, Qe, N]
            ),
            Qt = (0, t.useMemo)(() => {
              if (V) return V;
              if (le) return le.width / 2;
            }, [le, V]),
            tn = (0, t.useMemo)(
              () => ({
                position: U,
                arrowOffset: Qt,
                status: q,
                className: F,
                "data-qa": X,
                maxWidth: be,
              }),
              [X, be, U, q, F, Qt]
            ),
            Ht = (0, t.useMemo)(
              () =>
                fe
                  ? t.createElement(
                      u.AM,
                      {
                        isOpen: fe,
                        position: U,
                        targetBounds: le,
                        overlayClassName: "c-popover c-popover--no-pointer",
                        offsetX: oe,
                        offsetY: z,
                        allowanceX: y,
                        allowanceY: M,
                        key: "tooltip-popover",
                        zIndex: Ae,
                        shouldFocusAfterRender: !1,
                        shouldFade: G,
                        ariaHideApp: !1,
                        tryOppositePosition: !0,
                        id: ie,
                        ariaRole: "tooltip",
                        dataAttributes: {
                          qa: "tooltip-popover",
                        },
                        disableOverlaysContextProvider: !0,
                      },
                      (Kt) => {
                        let {
                          position: qt,
                          top: Tn,
                          left: Mt,
                          targetBounds: Jt,
                        } = Kt;
                        const dn = (0, n.A)(H)
                          ? H({
                              hasKeyboardFocus: ye,
                            })
                          : H;
                        return t.createElement(
                          l.A,
                          g({}, tn, {
                            position: qt,
                            tipBounds: Q(Tn, Mt),
                            targetBounds: Jt,
                          }),
                          dn
                        );
                      }
                    )
                  : null,
              [fe, le, U, oe, z, Ae, G, H, ye, tn, Q, ie]
            );
          return t.createElement(
            t.Fragment,
            null,
            t.createElement(
              d.V,
              {
                ref: Ze,
              },
              an
            ),
            Ht
          );
        });
        P.displayName = "Tooltip";
        const S = P;
        Object.defineProperty(
          {
            isElementTruncated: h,
            areBoundsEqual: D,
          },
          "isElementTruncated",
          {
            get: () => h,
            set: (K) => {
              h = K;
            },
          }
        );
      },
      5184226701: (W, A, e) => {
        "use strict";
        e.d(A, {
          BD: () => t,
          Cz: () => i,
          LH: () => d,
          LX: () => o,
          T0: () => n,
          UC: () => s,
        });
        const t = {
            SharedChannel: "shared_channel",
            SingleChannelGuest: "ultra_restricted",
            MultiChannelGuest: "restricted",
            Member: "regular",
            ExternalSharedWorkspaceMember: "external_shared_workspace_member",
          },
          n = {
            User: "user_invite",
            UserGroup: "user_group_invite",
            Email: "email_invite",
            Member: "member",
          },
          s = {
            OpenConfirmationScreen: "add_to_channel_open_confirmation_screen",
          },
          i = {
            OpenInviteTypeExternal:
              "comprehensible_invites_open_invite_type_external",
            InviteTypeExternalDefaultActionDisallowed:
              "comprehensible_invites_invite_type_external_default_action_disallowed",
            OpenSharedChannelNoteExternal:
              "comprehensible_invites_open_shared_channel_note_external",
            OpenSharedChannelExternalLimitedExternal:
              "comprehensible_invites_open_shared_channel_external_limited_external",
            OpenInviteTypeInternal:
              "comprehensible_invites_open_invite_type_internal",
            InviteTypeInternalDefaultActionDisallowed:
              "comprehensible_invites_invite_type_internal_default_action_disallowed",
            OpenSharedChannelNoteInternal:
              "comprehensible_invites_open_shared_channel_note_internal",
            OpenSharedChannelExternalLimitedInternal:
              "comprehensible_invites_open_shared_channel_external_limited_internal",
          };
        class d {
          constructor(r) {
            (this.ok = r.ok),
              (this.invitee = r.email),
              (this.inviteeType = n.Email),
              (this.accessType = r.inviteType || t.Member),
              (this.error = r.error);
          }
        }
        _(d, "InviteResult");
        function o(a) {
          return (
            a === t.Member ||
            a === t.MultiChannelGuest ||
            a === t.SingleChannelGuest
          );
        }
        _(o, "isBaseInviteType");
      },
      9536443280: (W, A, e) => {
        "use strict";
        e.d(A, {
          D: () => t,
        });
        var t;
        (function (n) {
          (n[(n.available = 0)] = "available"),
            (n[(n.processing = 1)] = "processing"),
            (n[(n.none = 2)] = "none");
        })(t || (t = {}));
      },
      8178126019: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ao: () => o.k,
          FQ: () => d.q,
          IU: () => r,
          Jg: () => s.G,
          RW: () => n.jB,
          YB: () => u,
          fe: () => t.T,
          iV: () => c,
          mF: () => i.I,
          on: () => a,
          qU: () => n.Sv,
        });
        var t = e(1614054140),
          n = e(4349526263),
          s = e(5216556985),
          i = e(8485081141),
          d = e(6515569951),
          o = e(2164700852);
        const a = {
          Generic: "generic",
          InternalInviteNotMember: "internal_not_member",
          InternalInviteNotMemberCanRequest: "internal_not_member_can_request",
          InternalInviteNoAccess: "internal_no_access",
          InternalInviteWasPreviouslyConnected:
            "internal_was_previously_connected",
          InternalInviteWasPreviouslyConnectedButNotMember:
            "internal_was_previously_connected_but_not_member",
          InvalidRecipientTeam: "invalid_recipient_team",
        };
        function r(l) {
          return !!l && !!l.channel;
        }
        _(r, "isSharedChannelInvite");
        function c(l) {
          return !!l && !r(l) && !u(l);
        }
        _(c, "isDirectMessageInvite");
        function u(l) {
          return !!l && !!l.shared_workspace;
        }
        _(u, "isSharedWorkspaceInvite");
      },
      266169032: (W, A, e) => {
        "use strict";
        e.d(A, {
          M: () => t,
        });
        const t = {
          shareChannelCreate: "share_channel_create",
          channelInviteModal: "channel_invite_modal",
          scdmFreeStartTrialBanner: "scdm_free_start_trial_banner",
          messageLimitTrialOfferModal: "message_limit_trial_offer_modal",
          huddlesTrialEntryPointModal: "huddles_trial_entry_point_modal",
          slackConnectTrialEntryPointModal:
            "slack_connect_trial_entry_point_modal",
          canvasTrialOfferModal: "canvas_trial_offer_modal",
          workflowBuilderFreemiumTrialOfferModal:
            "unlimited_workflows_trial_offer_modal",
        };
      },
      1305633231: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => $,
        });
        var t = e(6696292586),
          n = e(498506970),
          s = e(1835177371),
          i = e(8276911661),
          d = e(9101533895),
          o = e(8847766420),
          a = e(3037015781),
          r = e(9884588328),
          c = e(6495946979),
          u = e(9262712126),
          l = e(1407713935),
          m = e(5577180258),
          v = e(4282439381),
          E = e(6188550180),
          T = e(8389327410),
          g = e(8193414630),
          I = e(2756015265),
          f = e(972463850),
          y = e(4695291896),
          M = e(6345573615),
          p = e(8525228540);
        function O(N) {
          if (N <= 0) return "";
          let L = "",
            w = N;
          for (; w > 0; )
            (w -= 1),
              (L = String.fromCharCode("a".charCodeAt(0) + (w % 26)) + L),
              (w = Math.floor(w / 26));
          return L;
        }
        _(O, "convertNumberToLetterIncrement");
        const C = [
          "",
          "c",
          "cc",
          "ccc",
          "cd",
          "d",
          "dc",
          "dcc",
          "dccc",
          "cm",
          "",
          "x",
          "xx",
          "xxx",
          "xl",
          "l",
          "lx",
          "lxx",
          "lxxx",
          "xc",
          "",
          "i",
          "ii",
          "iii",
          "iv",
          "v",
          "vi",
          "vii",
          "viii",
          "ix",
        ];
        function h(N) {
          if (N <= 0) return "";
          const L = N.toString().split("");
          let w = "";
          for (let ee = 2; ee >= 0; ee--) {
            const ne = parseInt(L.pop() || "0", 10);
            w = (C[ne + ee * 10] || "") + w;
          }
          const k = L.join("") || "0",
            J = parseInt(k, 10) + 1;
          return Array(J).join("m") + w;
        }
        _(h, "convertNumberToRomanNumeral");
        var D = e(735940183),
          P = e(5597384299),
          S = e(8983164438),
          b = e(6795568989),
          K = e(3695531806),
          x = e(8393662842),
          B = e(937317117),
          U = e(3574134525);
        const R = new D.Ay("channel_token"),
          G = new D.Ay("emoji"),
          H = _((N, L) => L.text || "", "textToText"),
          F = _((N, L) => `@${L.range}`, "broadcastToText"),
          V = _((N, L) => L.value || "", "colorToText"),
          X = _((N, L, w) => {
            let { linkFormat: k } = w;
            const { text: J = "", url: ee = "" } = L;
            if (!J && !ee) return "";
            if (!J) return ee;
            switch (k) {
              case "default":
                return J;
              case "prefer_url":
                return ee;
              case "bracket":
                return `[ ${J}: ${ee} ]`;
              default:
                (0, g.Kh)(k);
            }
          }, "linkToText"),
          q = _((N, L) => {
            const w = (0, i.nv)(N, L.user_id);
            return `@${(0, u.Gt)(w) || L.user_id}`;
          }, "userToText"),
          oe = _((N, L) => {
            const w = (0, s.lJ)(N, L.usergroup_id);
            if (w === !1)
              return (0, y.A)({
                userGroupHandle: "",
                isUnknown: !0,
                isNonExistent: !0,
              });
            const k = (0, a.lv)(w);
            var J;
            return (0, y.A)({
              userGroupHandle: k
                ? ""
                : (J = w.handle) !== null && J !== void 0
                ? J
                : "",
              isUnknown: (0, a.mX)(w),
              isNonExistent: (0, a.lv)(w),
            });
          }, "userGroupToText"),
          z = _((N, L) => {
            const w = (0, d.OL)(N, L.channel_id);
            var k;
            const J =
                (k = (0, r.SB)(N, w, {
                  publicChannelIncludeHashSign: !1,
                  imIncludeAtSign: !1,
                })) !== null && k !== void 0
                  ? k
                  : "",
              ee = (0, a.mX)(w),
              ne = (0, a.lv)(w),
              pe = (0, l.Zp)(w),
              Me = (0, c.bl)(w);
            return ne || (pe && !Me)
              ? `#${R.t("private-channel")}`
              : (0, M.A)({
                  channelName: J,
                  isUnknown: ee,
                  isNonExistent: ne,
                });
          }, "channelToText"),
          Ae = _((N, L, w) => {
            let { convertEmoji: k } = w;
            const J = (0, E.A)(L, {
                state: N,
                localize: !1,
              }),
              ee = (0, p.bR)({
                state: N,
                locale: (0, D.Yp)(),
                name: J,
              });
            return k === "phrase"
              ? (0, I.A)(ee || "", {
                  state: N,
                }) || ""
              : k === "unicode" && L != null && L.unicode && (0, b.d)(L.unicode)
              ? (0, K.z)({
                  codePointLikeString: L.unicode,
                }) || ""
              : k === "unicode" && !(L != null && L.unicode)
              ? (0, f.A)(N, {
                  messageText: J,
                  teamId: (0, o.ZT)(N),
                })
              : ee ?? "";
          }, "emojiToText"),
          ae = _((N, L) => {
            const w = (0, B.Lp)(N, L.file_id);
            return (0, x.SB)(w) || L.file_id;
          }, "fileToText"),
          de = _((N, L, w) => {
            let { convertEmoji: k } = w;
            const J = (0, E.A)(
                {
                  ...L,
                  type: T.Lv.EMOJI,
                },
                {
                  state: N,
                  localize: !1,
                }
              ),
              ee = (0, p.bR)({
                state: N,
                locale: (0, D.Yp)(),
                name: J,
              });
            if (k === "phrase") {
              var ne;
              return (ne = (0, I.U)(ee || "", L.size || 0, {
                state: N,
              })) !== null && ne !== void 0
                ? ne
                : "";
            }
            var pe;
            const Me =
              (pe =
                k === "unicode"
                  ? (0, f.A)(N, {
                      messageText: J,
                      teamId: (0, o.ZT)(N),
                    })
                  : ee) !== null && pe !== void 0
                ? pe
                : "";
            return (0, v.x)(N)
              ? G.t(
                  "{size} {emojiName} {size, plural, =1 {emoji} other {emojis}}",
                  {
                    emojiName: Me,
                    size: L.size,
                  }
                )
              : `${L.size} ${Me} emojis`;
          }, "emojiGroupToText"),
          ve = _(
            (N, L) =>
              !L.timestamp && L.fallback
                ? L.fallback
                : (0, P.Yq)(L.timestamp, L.format, {
                    ...(L.fallback && {
                      fallbackString: L.fallback,
                    }),
                  }),
            "dateToText"
          ),
          Se = _((N, L) => {
            const w = N.workflowBuilder.workflowEditor.variables.list,
              k = (0, U.x)(w, L.id);
            return k ? `@${k.label}` : L.id;
          }, "workflowTokenToText"),
          Ee = {
            [T.Lv.TEXT]: H,
            [T.Lv.USER]: q,
            [T.Lv.USERGROUP]: oe,
            [T.Lv.CHANNEL]: z,
            [T.Lv.BROADCAST]: F,
            [T.Lv.DATE]: ve,
            [T.Lv.COLOR]: V,
            [T.Lv.LINK]: X,
            [T.Lv.EMOJI]: Ae,
            [T.Lv.FILE]: ae,
            [T.Lv.CANVAS]: ae,
            [T.Lv._EMOJI_GROUP]: de,
            [T.Lv.WORKFLOWTOKEN]: Se,
          };
        function be(N) {
          let { indent: L } = N;
          return !(0, t.A)(L) || L % 3 === 0
            ? "\u2022"
            : L % 3 === 1
            ? "\u25E6"
            : L % 3 === 2
            ? "\u25A0"
            : "\u2022";
        }
        _(be, "getUnorderedListCharacter");
        function Ce(N) {
          let { indent: L, incr: w } = N;
          return !(0, t.A)(L) || L % 3 === 0
            ? w
            : L % 3 === 1
            ? O(w)
            : L % 3 === 2
            ? h(w)
            : w;
        }
        _(Ce, "getOrderedListCharacter");
        function Z(N, L) {
          return (0, v.x)(N) ? (0, m.A)((0, n.A)(L)) : L;
        }
        _(Z, "maybeGroupEmojies");
        function $(N, L) {
          let { convertEmoji: w = "text", linkFormat: k = "default" } =
            arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          if (!L || !L.length) return "";
          const J = _((pe) => {
              if (!pe || !pe.elements) return "";
              const Me = [];
              return (
                pe.elements.forEach((ke) => {
                  if (!ke || !ke.type) return;
                  const ge = Ee[ke.type];
                  var fe;
                  const re =
                    (fe =
                      ge == null
                        ? void 0
                        : ge(N, ke, {
                            convertEmoji: w,
                            linkFormat: k,
                          })) !== null && fe !== void 0
                      ? fe
                      : "";
                  Me.push(re);
                }),
                Me.join("")
              );
            }, "convertSection"),
            ee = [];
          return (
            Z(N, L[0].elements).forEach((pe) => {
              if (!(!pe || !pe.type))
                if ((0, S.C)(pe)) {
                  const Me = pe.offset || 0,
                    ke = pe.indent || 0;
                  let ge = 1 + Me;
                  pe.elements.forEach((fe) => {
                    const re = J(fe);
                    if (pe.style === "ordered") {
                      const le = Ce({
                        indent: ke,
                        incr: ge,
                      });
                      ee.push(`${le}. ${re}.`), (ge += 1);
                    } else {
                      const le = be({
                        indent: ke,
                      });
                      ee.push(`${le} ${re}.`);
                    }
                  });
                } else ee.push(J(pe));
            }),
            ee.join(`
`)
          );
        }
        _($, "convertRichTextToPlainText");
      },
      6188550180: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => o,
        });
        var t = e(8389327410),
          n = e(8525228540),
          s = e(735940183),
          i = e(3829348308),
          d = e(6795568989);
        function o(a, r) {
          let { state: c, localize: u } = r;
          if (!a || a.type !== t.Lv.EMOJI) return "";
          const l = a.skinTone || a.skin_tone,
            m = a.unicode;
          let v;
          return (
            !m && l
              ? (v = `:${a.name}::skin-tone-${l}:`)
              : !l && !m
              ? (v = `:${a.name}:`)
              : m && (0, d.d)(m) && (v = `:${(0, i.qJ)(c, m)}:`),
            u
              ? (0, n.bR)({
                  state: c,
                  locale: (0, s.Yp)(),
                  name: v,
                }) || ""
              : v
          );
        }
        _(o, "getEmojiElementAsText");
      },
      411655882: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => i,
        });
        var t = e(362134992),
          n = e(9671714094),
          s = e(8933111773);
        function i() {
          return (0, t.A)(
            Object.entries(n.N)
              .filter((d) => {
                let [o, a] = d;
                return a.is_enabled_by_default;
              })
              .map((d) => {
                let [o, a] = d;
                return (0, s.A)(o);
              })
          );
        }
        _(i, "getAllBroadcastKeywords");
      },
      2229186: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => T,
        });
        var t = e(362134992),
          n = e(9101533895),
          s = e(6113051341),
          i = e(1407713935),
          d = e(2350349607),
          o = e(9884588328),
          a = e(641827819),
          r = e(324756633),
          c = e(8933111773),
          u = e(2035393855),
          l = e(1190344069),
          m = e(9548888903),
          v = e(9280052135),
          E = e(3339229351);
        function T(g, I) {
          const f = (0, n.OL)(g, I),
            y = (0, v.l)(g);
          if (!f) return [];
          const M = [];
          if (
            ((0, a.W)(g, I) && M.push((0, c.A)("BKeveryone")),
            ((0, d.V)(f) || (0, i.yz)(f)) &&
              (!(0, s.N)(f) || (0, a.W)(g, I)) &&
              (0, r.S)(g, I) &&
              (M.push((0, c.A)("BKchannel")), M.push((0, c.A)("BKhere"))),
            (0, l.hm)(g) && (0, i.U_)(f))
          )
            switch ((0, u.dM)(f)) {
              case m.hM.Account:
                M.push((0, c.A)("BKsf:accountteam", (0, o.SB)(g, f), !0));
                break;
              case m.hM.Opportunity:
                M.push((0, c.A)("BKsf:dealteam", (0, o.SB)(g, f), !0));
                break;
              default:
                break;
            }
          if (y) {
            const p = (0, n.Pu)(g, E.Q$);
            (f == null ? void 0 : f.id) === (p == null ? void 0 : p.id) &&
              M.push((0, c.A)("BKassistant:einstein", null, !1, !0));
          }
          return (0, t.A)(M);
        }
        _(T, "getBroadcastKeywordsForUser");
      },
      3342113153: (W, A, e) => {
        "use strict";
        e.d(A, {
          Kx: () => v,
          Zo: () => T,
          _E: () => g,
          cv: () => E,
          e3: () => m,
          gi: () => c,
          zU: () => u,
        });
        var t = e(735940183),
          n = e(9101533895),
          s = e(1835177371),
          i = e(8276911661),
          d = e(4761125736),
          o = e(5605150493);
        const a = new t.Ay("channel_modal"),
          r = new t.Ay("ui_validation"),
          c = {
            hasNameRequiredWarning: !1,
            hasMaxLengthWarning: !1,
            hasSpecialsWarning: !1,
            hasPunctuationWarning: !1,
            hasNameTakenWarning: !1,
            hasUnknownWarning: !1,
            hasRestriction: !1,
          };
        function u() {
          return 80;
        }
        _(u, "getMaxLength");
        const l = /[ .,;'`~!@#$%^&*+=)(\\/:"<>?|\u2018\u2019{}[\]]/;
        function m(I) {
          return I ? l.test(I.trim()) : !1;
        }
        _(m, "hasSpecialCharacters");
        function v(I) {
          return I ? I.replace(new RegExp(l, "g"), "") : "";
        }
        _(v, "replaceSpecialCharacters");
        function E(I) {
          let f =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : "",
            y =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : f,
            M =
              arguments.length > 3 && arguments[3] !== void 0
                ? arguments[3]
                : 80,
            p =
              arguments.length > 4 && arguments[4] !== void 0
                ? arguments[4]
                : !1;
          const O = !f.trim(),
            C = (0, o.A)(f) > M,
            h = m(f),
            D = /^[-|_]+$/.test(f),
            P = /[A-Z]/.test(f);
          let S = !1;
          return (
            f !== y &&
              I &&
              !p &&
              (S = !!((0, n.Os)(I, f) || (0, i.MV)(I, f) || (0, s.xw)(I, f))),
            {
              hasNameRequiredWarning: O,
              hasMaxLengthWarning: C,
              hasSpecialsWarning: h,
              hasPunctuationWarning: D,
              hasLowercaseWarning: P,
              hasNameTakenWarning: S,
            }
          );
        }
        _(E, "channelNameValidation");
        function T(I) {
          let f =
            arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          const {
            maxChannelNameLength: y,
            workspaceName: M,
            experimentFriendlyChannelNamesGroupOn: p,
          } = f;
          if (I) {
            if (I.hasNameRequiredWarning)
              return a.t(
                "Give your channel a name to continue. You can always change the name later."
              );
            if (I.hasMaxLengthWarning)
              return r.t(
                "Channel names can\u2019t be longer than {maxLength} characters.",
                {
                  maxLength: y,
                }
              );
            if (I.hasSpecialsWarning)
              return p
                ? a.t(
                    "Channel names can\u2019t contain the punctuation you included."
                  )
                : a.t(
                    "Channel names can\u2019t contain spaces or punctuation. Use dashes to separate words."
                  );
            if (I.hasPunctuationWarning)
              return a.t(
                "Channel names can\u2019t contain spaces or punctuation. Use dashes to separate words."
              );
            if (I.hasNameTakenWarning)
              return M
                ? r.t(
                    "That name is already taken by a channel, username, or user group in {workspaceName}.",
                    {
                      workspaceName: M,
                    }
                  )
                : a.t(
                    "That name is already taken by a channel, username, or user group in this workspace."
                  );
            if (I.hasRestriction)
              return a.t(
                "Your organization\u2019s settings have changed and may limit who can create channels. Contact an Admin or channel Owner to add people."
              );
            if (I.hasUnknownWarning)
              return a.t(
                "For some weird reason, that didn\u2019t work. Please try again to continue."
              );
          }
        }
        _(T, "getErrorStringFromChannelNameErrors");
        const g = _(
          (I) => (0, d._Z)(I, "friendly_channel_names") === "on",
          "isFriendlyChannelNamesEnabled"
        );
      },
      755982243: (W, A, e) => {
        "use strict";
        e.d(A, {
          w: () => s,
        });
        var t = e(3193155968);
        function n(i) {
          var d;
          return (d = i.ownerDocument) === null || d === void 0
            ? void 0
            : d.defaultView;
        }
        _(n, "getWindowForElement");
        function s(i) {
          return !t.TQ.includes(i);
        }
        _(s, "shouldViewNavigateInContext");
      },
      1236965385: (W, A, e) => {
        "use strict";
        e.d(A, {
          $A: () => o,
          ce: () => d,
          hO: () => s,
        });
        var t = e(5824283093),
          n = e(1224315998);
        const s = _(
            (a) => ({
              action: n.UiAction.IMPRESSION,
              uiPage: window.location.href,
              ...a,
            }),
            "getAuthImpressionTrackParams"
          ),
          i = _(
            (a) => ({
              action: n.UiAction.CLICK,
              uiPage: window.location.href,
              ...a,
            }),
            "getAuthClickTrackParams"
          ),
          d = _(
            (a) => ({
              uiPage: window.location.href,
              ...a,
            }),
            "getAuthTrackParams"
          );
        function o() {
          let a =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
          const r = (0, t.useRef)(null),
            c = (0, t.useCallback)(
              (m) => (v) => {
                if (
                  ((r.current = {
                    track: v,
                  }),
                  a)
                ) {
                  var E;
                  r == null ||
                    (E = r.current) === null ||
                    E === void 0 ||
                    E.track(s(m));
                }
              },
              [r, a]
            ),
            u = (0, t.useCallback)(
              (m) => () => {
                var v;
                r == null ||
                  (v = r.current) === null ||
                  v === void 0 ||
                  v.track(i(m));
              },
              [r]
            ),
            l = (0, t.useCallback)(
              (m) => () => {
                var v;
                r == null ||
                  (v = r.current) === null ||
                  v === void 0 ||
                  v.track(d(m));
              },
              [r]
            );
          return {
            trackClog: r,
            trackClogAuthRef: c,
            clogAuthLoginClick: u,
            clogAuthLoginAction: l,
          };
        }
        _(o, "useAuthClogger");
      },
      6089229811: (W, A, e) => {
        "use strict";
        e.d(A, {
          LC: () => n,
          av: () => s,
          ev: () => t,
        });
        const t = {
            NONE: "none",
            OPTIONAL_ID_ONLY: "optional_id_only",
            EXTENSIVE: "extensive",
            OPTIONAL_AND_REGIONAL_IDS: "optional_and_regional_ids",
          },
          n = {
            AE_TRN: "ae_trn",
            AU_ABN: "au_abn",
            CA_BN: "ca_bn",
            CA_GST_HST: "ca_gst_hst",
            CA_QST: "ca_qst",
            CH_VAT: "ch_vat",
            CL_TIN: "cl_tin",
            ES_CIF: "es_cif",
            EU_VAT: "eu_vat",
            GE_VAT: "ge_vat",
            HK_BR: "hk_br",
            ID_NPWP: "id_npwp",
            IN_GST: "in_gst",
            JP_CN: "jp_cn",
            KR_BRN: "kr_brn",
            MX_RFC: "mx_rfc",
            MY_ITN: "my_itn",
            MY_SST: "my_sst",
            NO_VAT: "no_vat",
            NZ_GST: "nz_gst",
            RU_INN: "ru_inn",
            SA_VAT: "sa_vat",
            SG_GST: "sg_gst",
            SG_UEN: "sg_uen",
            TH_VAT: "th_vat",
            TR_TIN: "tr_tin",
            TW_VAT: "tw_vat",
            UNKNOWN: "unknown",
            ZA_VAT: "za_vat",
            UA_VAT: "ua_vat",
            KE_PIN: "ke_pin",
            EG_TIN: "eg_tin",
          },
          s = 20;
      },
      3246555800: (W, A, e) => {
        "use strict";
        e.d(A, {
          FL: () => a,
          HC: () => E,
          Je: () => m,
          KV: () => T,
          L$: () => c,
          P7: () => l,
          RL: () => u,
          Y3: () => d,
          b6: () => r,
          jM: () => g,
          zb: () => o,
        });
        var t = e(6089229811),
          n = e(8086952004);
        function s(I, f, y, M) {
          if (y && M) {
            var p, O;
            return I == null ||
              (p = I[f]) === null ||
              p === void 0 ||
              (O = p.regional_overrides) === null ||
              O === void 0
              ? void 0
              : O[y];
          }
          return I == null ? void 0 : I[f];
        }
        _(s, "getTaxConfig");
        function i(I, f, y) {
          let M =
            arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
          const p = s(I, f, y, M);
          var O;
          return (O = p == null ? void 0 : p.tax_id_form_variant) !== null &&
            O !== void 0
            ? O
            : t.ev.NONE;
        }
        _(i, "getTaxUiFormType");
        function d(I, f, y) {
          let M =
            arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
          return i(I, f, y, M) === t.ev.EXTENSIVE;
        }
        _(d, "shouldShowMultipartTaxUI");
        function o(I, f, y) {
          let M =
            arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
          const p = i(I, f, y, M);
          return (
            p === t.ev.EXTENSIVE ||
            p === t.ev.OPTIONAL_ID_ONLY ||
            p === t.ev.OPTIONAL_AND_REGIONAL_IDS
          );
        }
        _(o, "shouldShowTaxIdInputField");
        function a(I, f, y) {
          let M =
            arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !0;
          return i(I, f, y, M) === t.ev.OPTIONAL_AND_REGIONAL_IDS;
        }
        _(a, "shouldCollectRegionalTaxId");
        function r(I, f, y) {
          let M =
            arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
          const p = i(I, f, y, M);
          return (
            p === t.ev.OPTIONAL_ID_ONLY || p === t.ev.OPTIONAL_AND_REGIONAL_IDS
          );
        }
        _(r, "isTaxIdOptional");
        function c(I, f, y) {
          let M =
            arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
          const p = s(I, f, y, M);
          var O;
          return (O = p == null ? void 0 : p.stripe_tax_id_type) !== null &&
            O !== void 0
            ? O
            : null;
        }
        _(c, "getTaxIdType");
        function u(I, f, y) {
          let M =
            arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
          const p = s(I, f, y, M);
          return p == null ? void 0 : p.tax_name;
        }
        _(u, "getTaxName");
        function l(I, f, y) {
          let M =
            arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
          const p = s(I, f, y, M);
          var O;
          const C =
            (O = p == null ? void 0 : p.tax_id_max_length) !== null &&
            O !== void 0
              ? O
              : 0;
          return Number.isInteger(C) && C > 0 ? C : t.av;
        }
        _(l, "getTaxIdMaxLength");
        function m(I, f, y) {
          let M =
            arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
          const p = s(I, f, y, M);
          var O;
          const C =
            (O = p == null ? void 0 : p.tax_id_examples) !== null &&
            O !== void 0
              ? O
              : [];
          var h;
          return (h = C[0]) !== null && h !== void 0 ? h : "";
        }
        _(m, "getTaxIdExample");
        function v(I, f, y, M) {
          var p;
          const O = s(I, f, y, M),
            C =
              O == null ||
              (p = O.tax_id_validation_regex) === null ||
              p === void 0
                ? void 0
                : p.replace(/\//g, "");
          return C ? new RegExp(C, "i") : null;
        }
        _(v, "getTaxIdValidator");
        function E(I, f, y, M) {
          let p =
            arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !1;
          const O = v(I, f, y, p);
          return !O || (!M && r(I, f, y, p)) ? !0 : M && O ? O.test(M) : !1;
        }
        _(E, "isTaxIdValid");
        function T(I, f, y) {
          let M =
            arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
          const p = s(I, f, y, M);
          return !!(p != null && p.should_ask_is_vat_registered);
        }
        _(T, "shouldAskIsVatRegistered");
        function g(I, f) {
          return (0, n.A)(I, (y) => y.iso_code === f);
        }
        _(g, "getCountryByCode");
      },
      3044566667: (W, A, e) => {
        "use strict";
        e.d(A, {
          gy: () => n,
          tN: () => s,
          zQ: () => t,
        });
        const t = {
            EMPTY: "empty",
            INVALID: "invalid",
            INVALID_DOMAIN: "invalid_domain",
            TOO_MANY: "too_many",
          },
          n =
            "[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?",
          s = {
            EMAIL: new RegExp(`^${n}$`, "i"),
            CONTAINS_EMAIL: new RegExp(`${n}`, "i"),
            DOMAIN:
              /^@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
          };
      },
      2756015265: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => c,
          U: () => r,
        });
        var t = e(735940183),
          n = e(5799716058),
          s = e(8525228540),
          i = e(9907843289),
          d = e(4282439381);
        const o = new t.Ay("emoji");
        function a(u, l) {
          const m = (0, t.Yp)();
          return (0, s.WX)({
            state: u,
            locale: m,
            text: l,
          });
        }
        _(a, "getLocalizedEmojiName");
        function r(u, l, m) {
          let { state: v } = m;
          const E = a(v, u),
            T = (0, d.x)(v),
            g = E && (0, n.Y)(E, l, T);
          return E
            ? (0, i.DU)()
              ? g
              : ` ${g} `
            : T
            ? o.t(
                "{size} {emojiName} {size, plural, =1 {emoji} other {emojis}}",
                {
                  emojiName: u,
                  size: l,
                }
              )
            : `${l} ${u} emojis`;
        }
        _(r, "convertEmojiGroupNameToPhrase");
        function c(u, l) {
          let { state: m } = l;
          const v = a(m, u),
            E = v && (0, n.A)(v);
          return v ? ((0, i.DU)() ? E : ` ${E} `) : u;
        }
        _(c, "convertEmojiNameToPhrase");
      },
      6818330210: (W, A, e) => {
        "use strict";
        e.d(A, {
          H: () => s,
        });
        var t = e(9113979368),
          n = e(9936232041);
        function s(i, d) {
          if (!d || (0, t.A)(d))
            return {
              name: i,
            };
          const o = (0, n.A)(i);
          if (!o)
            return {
              name: i,
            };
          const { name: a, skinTone: r } = o,
            c = d[a];
          if (!c || (0, t.A)(c))
            return {
              name: i,
            };
          const u = c.display_alias,
            l = u ?? a,
            m = r ? `:${l}::skin-tone-${r}:` : `:${l}:`,
            v = c.display_url;
          return {
            name: m,
            url: v,
          };
        }
        _(s, "getEmojiDisplayInfoFromMap");
      },
      2354051480: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => s,
        });
        var t = e(3339229351);
        let n;
        const s = _(() => {
          if (n) return n;
          const i = Object.keys(t.dq).map((d) =>
            d.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&")
          );
          return (
            (n = new RegExp(
              `(^|\\s)(${i.join("|")})(?=$|[\\s|\\?\\.,!])`,
              "g"
            )),
            n
          );
        }, "__WEBPACK_DEFAULT_EXPORT__");
      },
      7854655276: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => i,
        });
        var t = e(3078252698),
          n = e(735940183);
        const s = new n.Ay("emoji");
        function i(d) {
          const o = (0, t.A)(d) ? d : d.toString(),
            a = {
              1: () => s.t("No skin tone"),
              2: () => s.t("light skin tone"),
              3: () => s.t("medium-light skin tone"),
              4: () => s.t("medium skin tone"),
              5: () => s.t("medium-dark skin tone"),
              6: () => s.t("dark skin tone"),
            },
            r = {
              "2-3": () =>
                s.t("left light skin tone and right medium-light skin tone"),
              "2-4": () =>
                s.t("left light skin tone and right medium skin tone"),
              "2-5": () =>
                s.t("left light skin tone and right medium-dark skin tone"),
              "2-6": () => s.t("left light skin tone and right dark skin tone"),
              "3-2": () =>
                s.t("left medium-light skin tone and right light skin tone"),
              "3-4": () =>
                s.t("left medium-light skin tone and right medium skin tone"),
              "3-5": () =>
                s.t(
                  "left medium-light skin tone and right medium-dark skin tone"
                ),
              "3-6": () =>
                s.t("left medium-light skin tone and right dark skin tone"),
              "4-2": () =>
                s.t("left medium skin tone and right light skin tone"),
              "4-3": () =>
                s.t("left medium skin tone and right medium-light skin tone"),
              "4-5": () =>
                s.t("left medium skin tone and right medium-dark skin tone"),
              "4-6": () =>
                s.t("left medium skin tone and right dark skin tone"),
              "5-2": () =>
                s.t("left medium-dark skin tone and right light skin tone"),
              "5-3": () =>
                s.t(
                  "left medium-dark skin tone and right medium-light skin tone"
                ),
              "5-4": () =>
                s.t("left medium-dark skin tone and right medium skin tone"),
              "5-6": () =>
                s.t("left medium-dark skin tone and right dark skin tone"),
              "6-2": () => s.t("left dark skin tone and right light skin tone"),
              "6-3": () =>
                s.t("left dark skin tone and right medium-light skin tone"),
              "6-4": () =>
                s.t("left dark skin tone and right medium skin tone"),
              "6-5": () =>
                s.t("left dark skin tone and right medium-dark skin tone"),
            },
            c = r[o] ? r[o]() : null;
          return c || (a[o] && a[o]());
        }
        _(i, "__WEBPACK_DEFAULT_EXPORT__");
      },
      5799716058: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => a,
          Y: () => o,
        });
        var t = e(735940183),
          n = e(9936232041),
          s = e(7854655276);
        const i = /_|-/g,
          d = new t.Ay("emoji"),
          o = _(function (r, c) {
            let u =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : !1;
            if (!r || !c) return null;
            const { name: l, skinTone: m } = (0, n.A)(r) || {};
            if (!l)
              return u
                ? d.t(
                    "{size} {emojiName} {size, plural, =1 {emoji} other {emojis}}",
                    {
                      emojiName: r,
                      size: c,
                    }
                  )
                : `${c} ${r} emojis`;
            const v = l.replace(i, " "),
              E = u
                ? d.t(
                    "{size} {emojiName} {size, plural, =1 {emoji} other {emojis}}",
                    {
                      emojiName: v,
                      size: c,
                    }
                  )
                : `${c} ${v} emojis`;
            if (!m) return E;
            const T = (0, s.A)(m);
            return T === ""
              ? E
              : u
              ? d.t(
                  "{size} {emojiName} {size, plural, =1 {emoji} other {emojis}} with {skinToneDescription}",
                  {
                    emojiName: v,
                    size: c,
                    skinToneDescription: T,
                  }
                )
              : `${c} ${v} emojis with ${T}`;
          }, "makePhraseForEmojiGroup");
        function a(r) {
          let c =
            arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
          if (!r) return r;
          const { name: u, skinTone: l } = (0, n.A)(r) || {};
          if (!u) return r;
          const m = u.replace(i, " "),
            v = d.t("{emojiPhrase} emoji", {
              emojiPhrase: m,
            });
          if (!l) return v === "" ? m : v;
          const E = (0, s.A)(l);
          return E === ""
            ? v === ""
              ? m
              : v
            : c
            ? d.t("React with {emojiPhrase} emoji {skinToneDescription}", {
                emojiPhrase: m,
                skinToneDescription: E,
              })
            : d.t("{emojiPhrase} emoji with {skinToneDescription}", {
                emojiPhrase: m,
                skinToneDescription: E,
              });
        }
        _(a, "__WEBPACK_DEFAULT_EXPORT__");
      },
      3259512346: (W, A, e) => {
        "use strict";
        e.d(A, {
          s: () => s,
        });
        var t = e(6089972488),
          n = e(571104883);
        function s(i) {
          let d =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : window.process &&
                  window.process.versions &&
                  window.process.versions.electron,
            o =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : window.navigator.userAgent;
          if (!(0, n.y3)(o) || !d) return !1;
          const a = (0, t.P)(i),
            r = (0, t.P)(d);
          return (0, t.Z)(r, a) >= 0;
        }
        _(s, "isElectronAndAtLeastVersion");
      },
      665229739: (W, A, e) => {
        "use strict";
        e.d(A, {
          U: () => s,
        });
        var t = e(4761125736);
        const n = "files_explorer_prototype";
        function s(i) {
          return (0, t._Z)(i, n) === "on";
        }
        _(s, "isFilesExplorerPrototypeEnabled");
      },
      1033764764: (W, A, e) => {
        "use strict";
        e.d(A, {
          UK: () => r,
          Z$: () => i,
          hZ: () => o,
        });
        const t = ["B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"],
          n = ["B", "kB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
          s = _(function (u, l, m) {
            let v =
                arguments.length > 3 && arguments[3] !== void 0
                  ? arguments[3]
                  : 2,
              E =
                arguments.length > 4 && arguments[4] !== void 0
                  ? arguments[4]
                  : !0;
            if (u === 0) return 0;
            if (l === m) return parseFloat(u.toFixed(v));
            const T = E ? 1024 : 1e3,
              g = E ? t : n,
              I = g.findIndex((y) => y.toLowerCase() === l.toLowerCase()),
              f = g.findIndex((y) => y.toLowerCase() === m.toLowerCase());
            if (I === -1)
              throw new Error(
                `Unknown currentType '${l}' passed to convertToSize`
              );
            if (f === -1)
              throw new Error(
                `Unknown desiredType '${m}' passed to convertToSize`
              );
            return I < f
              ? parseFloat((u / T ** (f - I)).toFixed(v))
              : parseFloat((u * T ** (I - f)).toFixed(v));
          }, "convertToSize"),
          i = _(function (u) {
            let l =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : "B",
              m =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : 2,
              v =
                arguments.length > 3 && arguments[3] !== void 0
                  ? arguments[3]
                  : !0;
            if (u === 0)
              return {
                size: 0,
                type: "B",
              };
            const E = v ? 1024 : 1e3,
              T = v ? t : n;
            let g = Math.log(u) / Math.log(E);
            g < 1 &&
              (g = -Math.floor(Math.log(Math.abs(g)) / Math.log(10) + 1));
            const I = T.findIndex((y) => y.toLowerCase() === l.toLowerCase()),
              f = Math.max(Math.min(I + Math.floor(g), T.length - 1), 0);
            if (I === -1)
              throw new Error(
                `Unknown currentType '${l}' passed to convertToSize`
              );
            return {
              size: s(u, l, T[f], m, v),
              type: T[f],
            };
          }, "convertToOptimumSize"),
          d = _(function (u) {
            let l =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : 2;
            return s(u, "B", "KB", l, !1);
          }, "convertBytesToKilobytes"),
          o = _(function (u) {
            let l =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : 2;
            return s(u, "B", "MB", l, !1);
          }, "convertBytesToMegabytes"),
          a = _(function (u) {
            let l =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : 2;
            return s(u, "B", "GB", l, !1);
          }, "convertBytesToGigabytes"),
          r = _(function (u) {
            let l =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : 2;
            return s(u, "KB", "MB", l, !1);
          }, "convertKilobytesToMegabytes"),
          c = _(function (u) {
            let l =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : 2;
            return s(u, "KB", "GB", l, !1);
          }, "convertKilobytesToGigabytes");
      },
      6333950786: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => U,
        });
        var t = e(6249041335),
          n = e(5342516244),
          s = e(1842363787),
          i = e(8847766420),
          d = e(6533394955),
          o = e(2047021170),
          a = e(6866036454),
          r = e(1317368584),
          c = e(3829348308),
          u = e(735940183),
          l = e(9846149684),
          m = e(8207536819),
          v = e(4862221402),
          E = e(8040098042),
          T = e(2414816894),
          g = e(1707481146),
          I = e(6106767915);
        function f(R, G, H) {
          const F = [];
          return {
            text: R.replace(l.Y, (X, q, oe) => {
              let z;
              if (
                ((0, T.A)(q)
                  ? (z = `<!${(0, I.A)(q)}>`)
                  : (0, g.A)(q)
                  ? (z = G ? (0, m.A)(oe) : oe)
                  : (0, v.A)(q)
                  ? (z = `<!subteam^${q}|${oe}>`)
                  : (0, E.A)(q)
                  ? (z = H ? `<#${q}|${oe.substr(1)}>` : void 0)
                  : (z = `<@${q}>`),
                !z)
              )
                return X;
              const ae = `mention-${F.length + 1}-${Date.now()}`;
              return (
                F.push({
                  mention: z,
                  placeholder: ae,
                }),
                ae
              );
            }),
            mentions: F,
          };
        }
        _(f, "replaceFormatMentions");
        const y =
          /(^|\n)>(?![\W_](?:<|>|[|/\\[\]{}()Dpb](?=\s|$)))(([^\n]*)(\n>[^\n]*)*)/g;
        function M(R) {
          const G = [];
          let H = 0;
          return {
            text: R.replace(y, (V) => {
              H += 1;
              const X = `quoted-text-placeholder-${Date.now()}-${H}`;
              return (
                G.push({
                  match: V,
                  placeholder: X,
                }),
                X
              );
            }),
            quotedSections: G,
          };
        }
        _(M, "replaceQuotedText");
        var p = e(2354051480),
          O = e(3339229351);
        const C = /[-[\]{}()*+?.,\\^$|#\s]/g,
          h = /\n?(6\)|7\))/,
          D = _((R) => {
            let G = 0;
            const H = [];
            let F = R.replace((0, p.A)(), (V, X, q, oe) => {
              const z = G;
              G = oe + V.length;
              const Ae = q.indexOf("(") !== -1,
                ae = q.indexOf(")") !== -1;
              if (((Ae || ae) && H.indexOf(q) === -1 && H.push(q), ae && !Ae)) {
                const de = R.substring(z, oe);
                if (de.indexOf("(") !== -1 && de.indexOf(")") === -1) return V;
              }
              if (
                V ===
                `
8)`
              ) {
                const de = R.substring(0, oe);
                if (h.test(de)) return V;
              }
              return O.dq[q] ? `${X}:${O.dq[q]}:` : V;
            });
            if (H.length) {
              const V = H.map((q) => q.replace(C, "\\$&")),
                X = new RegExp(`(\\(.+)(${V.join("|")})(.+\\))`, "g");
              F = F.replace(X, (q, oe, z, Ae) =>
                O.dq[z] ? `${oe}:${O.dq[z]}:${Ae}` : q
              );
            }
            return F;
          }, "replace_emoticons_with_colons");
        var P = e(8525228540),
          S = e(9421999304),
          b = e(4797500022),
          K = e(9599231336);
        const x =
            /(^|\s|\{|\[|\(|&gt;|&lt;|\*|_|\/|"|\u201C|\u2018|')#([^~`!@#$%^&*()+=[\]{}\\|;:'"\u201D\u2019,.<>/?\s]+)/g,
          B = /(^|\S)( +)(\n|$)/gm;
        function U(R, G) {
          let { isInternalMessage: H } =
            arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          if (!R || !G) return "";
          const F = !H,
            V = (0, r.A)(R),
            X = (0, o.ty)(R, "convert_emoticons"),
            q = (0, a.A)(R),
            oe = (0, K.P)(R),
            z = !0;
          let Ae = G,
            ae = [];
          (Ae = (0, n.A)(Ae)),
            (Ae = (0, s.kW)(ae, Ae, {
              replace_pre: !0,
              replace_code: !0,
            }));
          const de = f(Ae, F, z);
          if (((Ae = de.text), (Ae = Ae.replace(B, "$1$3")), X && !oe)) {
            const Se = M(Ae);
            (Ae = Se.text),
              (Ae = D(Ae)),
              Se.quotedSections.forEach((Ee) => {
                Ae = Ae.replace(Ee.placeholder, () => Ee.match);
              });
          }
          if (
            (F &&
              (Ae = (0, s.wx)(Ae, "CLEAN", {
                jumbomoji: V,
                allow_intra_word_formatting: !0,
              })),
            de.mentions.forEach((Se) => {
              Ae = Ae.replace(Se.placeholder, () => Se.mention);
            }),
            !u.EZ)
          ) {
            const Se = (0, i.ZT)(R);
            Ae = (0, d.dispatchForTeamId)(
              Se,
              (0, P.Z_)({
                text: Ae,
                locale: (0, S.JK)(),
              })
            );
          }
          const ve = (0, c.CK)(R);
          return (
            (ae = ae.map((Se) => {
              const Ee = {
                  ...Se,
                },
                be = (0, l.A)(Ee.str, {
                  highlightWords: q,
                  shouldRenderEmojiAsText: oe,
                  emojiNames: ve,
                  locale: (0, u.Yp)(),
                  useChannelTagging: z,
                });
              return (
                (Ee.str = (0, b.A)(be)),
                F &&
                  (Ee.str = (0, s.wx)(Ee.str, "CLEAN", {
                    jumbomoji: V,
                    allow_intra_word_formatting: !0,
                  })),
                Ee
              );
            })),
            (Ae = (0, s.Ki)(ae, Ae)),
            (0, t.A)(Ae)
          );
        }
        _(U, "clean_message_text_with_state");
      },
      972463850: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => o,
        });
        var t = e(3297051565),
          n = e.n(t),
          s = e(647040695),
          i = e(3829348308);
        const d = _(function (a) {
            let { messageText: r, teamId: c } =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : {};
            if (!r || !c) return "";
            const u = (0, s.A)();
            return r.replace(u, (l) => {
              const m = (0, i.Zc)(a, {
                text: l,
                teamId: c,
              });
              return m || l;
            });
          }, "replaceTextEmojiWithNative"),
          o = d;
        d.propTypes = {
          messageText: n().string,
          teamId: n().string,
        };
      },
      5342516244: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => t,
        });
        const t = _(
          (n) =>
            n
              ? n
                  .replace(/\u00A0/g, " ")
                  .replace(
                    /\u000D/g,
                    `
`
                  )
                  .replace(
                    /\u000A/g,
                    `
`
                  )
              : "",
          "__WEBPACK_DEFAULT_EXPORT__"
        );
      },
      3802883493: (W, A, e) => {
        "use strict";
        e.d(A, {
          TU: () => s,
        });
        const t =
            "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
          n = 10;
        function s(u, l) {
          let m =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : t,
            v =
              arguments.length > 3 && arguments[3] !== void 0
                ? arguments[3]
                : n;
          if (
            (u !== null && c(u, m, v),
            l !== null && c(l, m, v),
            u !== null && l !== null && u >= l)
          )
            throw new Error(`${u} >= ${l}`);
          if (u === null) {
            if (l === null) {
              const p = 5 * 10 ** (v - 1);
              return a(p, v);
            }
            const M = o(l, v);
            return M.toString() < l && l.slice(v + 1) !== ""
              ? a(M, v)
              : a(M - 1, v);
          }
          if (l === null) {
            const M = o(u, v);
            return a(M + 1, v);
          }
          const E = o(u, v),
            T = o(l, v),
            g = u.slice(v + 1),
            I = l.slice(v + 1);
          if (E === T) {
            const M = d(g, I, m);
            return `${a(E, v)}.${M}`;
          }
          const f = E + 1;
          if (f < T) return a(f, v);
          const y = d(g, null, m);
          return `${a(E, v)}.${y}`;
        }
        _(s, "generateKeyBetween");
        function i(u, l, m) {
          let v =
              arguments.length > 3 && arguments[3] !== void 0
                ? arguments[3]
                : t,
            E =
              arguments.length > 4 && arguments[4] !== void 0
                ? arguments[4]
                : n;
          if (m === 0) return [];
          if (m === 1) return [s(u, l, v, E)];
          if (l === null) {
            let I = s(u, l, v, E);
            const f = [I];
            for (let y = 0; y < m - 1; y++) (I = s(I, l, v, E)), f.push(I);
            return f;
          }
          if (u === null) {
            let I = s(u, l, v, E);
            const f = [I];
            for (let y = 0; y < m - 1; y++) (I = s(u, I, v, E)), f.push(I);
            return f.reverse(), f;
          }
          const T = Math.floor(m / 2),
            g = s(u, l, v, E);
          return [...i(u, g, T, v, E), g, ...i(g, l, m - T - 1, v, E)];
        }
        _(i, "generateNKeysBetween");
        function d(u, l, m) {
          const v = m[0];
          if (l !== null && u >= l) throw new Error(`${u} >= ${l}`);
          if (u.slice(-1) === v || (l && l.slice(-1) === v))
            throw new Error("trailing zero");
          if (l) {
            let g = 0;
            for (; (u[g] || v) === l[g]; ) g += 1;
            if (g > 0) return l.slice(0, g) + d(u.slice(g), l.slice(g), m);
          }
          const E = u ? m.indexOf(u[0]) : 0,
            T = l !== null ? m.indexOf(l[0]) : m.length;
          if (T - E > 1) {
            const g = Math.round(0.5 * (E + T));
            return m[g];
          }
          return l && l.length > 1
            ? l.slice(0, 1)
            : m[E] + d(u.slice(1), null, m);
        }
        _(d, "midpoint");
        function o(u, l) {
          const m = u.slice(0, l);
          return Number(m);
        }
        _(o, "getIntegerPart");
        function a(u, l) {
          if (u >= 10 ** l)
            throw new Error(`Integer overflow at ${u} for fixed length ${l}`);
          if (u < 0)
            throw new Error(`Integer underflow at ${u} for fixed length ${l}`);
          return u.toString().padStart(l, "0");
        }
        _(a, "formatInteger");
        function r(u, l) {
          const m = u.length;
          if (m < l)
            throw new Error("Invalid integer portion, length too short");
          if (m === l) {
            const v = u.indexOf(".");
            if (v >= 0)
              throw new Error(
                `Unexpected . at position ${v} in string of exact length ${l}`
              );
            const E = Number(u);
            if (isNaN(E))
              throw new Error(
                `Invalid integer portion - not a valid integer ${u}`
              );
          } else if (u[l] !== ".")
            throw new Error(
              `Expected . after int_fixed length ${l} and got ${u[l]}`
            );
        }
        _(r, "validateIntegerLength");
        function c(u, l, m) {
          if ((r(u, m), m !== u.length && u.slice(m).endsWith(l[0])))
            throw new Error(`Fractional portion must not end with ${l[0]}`);
        }
        _(c, "validateOrderKey");
      },
      3256698098: (W, A, e) => {
        "use strict";
        e.d(A, {
          _i: () => i,
        });
        function t(o, a, r, c) {
          let u =
            arguments.length > 4 && arguments[4] !== void 0
              ? arguments[4]
              : 1e-15;
          const l = [c.x - a.x, c.y - a.y],
            m = [r.x - a.x, r.y - a.y],
            v = [o.x - a.x, o.y - a.y],
            E = l[0] * l[0] + l[1] * l[1],
            T = l[0] * m[0] + l[1] * m[1],
            g = l[0] * v[0] + l[1] * v[1],
            I = m[0] * m[0] + m[1] * m[1],
            f = m[0] * v[0] + m[1] * v[1],
            y = 1 / (E * I - T * T),
            M = (I * g - T * f) * y,
            p = (E * f - T * g) * y;
          return M >= -u && p >= -u && M + p < 1 + u;
        }
        _(t, "isPointInTriangle");
        function n(o, a, r) {
          const c = (r.x - a.x) ** 2 + (r.y - a.y) ** 2,
            u = ((o.x - a.x) * (r.x - a.x) + (o.y - a.y) * (r.y - a.y)) / c;
          return u < 0
            ? (o.x - a.x) ** 2 + (o.y - a.y) ** 2
            : u <= 1
            ? (a.x - o.x) ** 2 + (a.y - o.y) ** 2 - u ** 2 * c
            : (o.x - r.x) ** 2 + (o.y - r.y) ** 2;
        }
        _(n, "distanceSquarePointToSegment");
        function s(o, a, r, c) {
          let u =
            arguments.length > 4 && arguments[4] !== void 0
              ? arguments[4]
              : 1e-15;
          const l = Math.min(a.x, Math.min(r.x, c.x)) - u,
            m = Math.max(a.x, Math.max(r.x, c.x)) + u,
            v = Math.min(a.y, Math.min(r.y, c.y)) - u,
            E = Math.max(a.y, Math.max(r.y, c.y)) + u;
          return o.x > l && o.x < m && o.y > v && o.y < E;
        }
        _(s, "pointInTriangleBoundingBox");
        function i(o, a, r, c) {
          let u =
            arguments.length > 4 && arguments[4] !== void 0
              ? arguments[4]
              : 1e-15;
          if (!s(o, a, r, c, u)) return !1;
          const l = u ** 2;
          return (
            t(o, a, r, c, 0) ||
            n(o, a, r) <= l ||
            n(o, r, c) <= l ||
            n(o, c, a) <= l
          );
        }
        _(i, "accurateIsPointInTriangle");
        var d = {
          accurateIsPointInTriangle: i,
          isPointInTriangle: t,
        };
      },
      2595238443: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => s,
        });
        var t = e(1516013259),
          n = e(2774532222);
        const s = _(
          (i) => (0, t.A)(i, (d, o) => (0, n.A)(o, "aria-")),
          "__WEBPACK_DEFAULT_EXPORT__"
        );
      },
      1596328926: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => s,
        });
        var t = e(1516013259),
          n = e(2774532222);
        function s(i) {
          return (0, t.A)(i, (d, o) => (0, n.A)(o, "data-"));
        }
        _(s, "getDataProps");
      },
      8556787853: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ac: () => v,
          Ay: () => l,
          lF: () => m,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(7174777686),
          i = e(2047021170),
          d = e(2364576462),
          o = e(3339229351),
          a = e(6839188756),
          r = e(3677514771),
          c = e(9397223697);
        const u = _((E, T, g) => {
          const I = g ? E * 2 : E,
            f = g ? T * 2 : T,
            M = I > o.QI || f > o.Jo ? Math.min(o.QI / I, o.Jo / f) : 1,
            p = Math.floor(I * M),
            O = Math.floor(f * M);
          return {
            width: p,
            height: O,
          };
        }, "getConstrainedMediaDimensions");
        function l(E) {
          let {
            url: T,
            width: g,
            height: I,
            rotate: f,
            renderSvg: y,
            stopAnimations: M,
            sizeForRetina: p,
            convertIco: O,
            isEmoji: C,
          } = arguments.length > 1 && arguments[1] !== void 0
            ? arguments[1]
            : {};
          if (!T) return null;
          const h = (0, a.Uz)((0, r.H7)(E));
          if (!h || T.indexOf(h) === 0 || T.indexOf("/img/") === 0) return T;
          if (T.indexOf("https://") === 0 && !C) {
            const x = (0, d.yz)(T, !0),
              B = (0, c.QL)();
            if ((0, s.A)(B, x)) {
              if (M && x === "slack-imgs.com") {
                const U = new URL(T),
                  R = U.searchParams.has("o1")
                    ? `${U.searchParams.get("o1")}.gu`
                    : "gu";
                return U.searchParams.set("o1", R), U.href;
              }
              return T;
            }
          }
          const D = new URL(h);
          D.searchParams.set("c", o.lW);
          const { width: P, height: S } = g && I ? u(g, I, p) : {},
            b = [];
          return (
            P && S && (b.push(`wi${P}`), b.push(`he${S}`), b.push("si")),
            f && b.push("ro"),
            y && b.push("sv2"),
            (M || !(0, i.ty)(E, "a11y_animations")) && b.push("gu"),
            O && b.push("ip"),
            b.length && D.searchParams.set("o1", b.join(".")),
            D.searchParams.set("url", T),
            D.href
          );
        }
        _(l, "getImgProxyUrl");
        const m = (function () {
            var E = (0, t.coroutine)(function* (T) {
              const g = new URL(T);
              try {
                return !!(yield fetch(
                  `https://${g.hostname}/?url=${g.searchParams.get("url")}`,
                  {
                    method: "HEAD",
                    mode: "cors",
                  }
                )).headers.get("x-slack-animated");
              } catch (I) {
                if (I) return !1;
              }
              return !1;
            });
            return _(function (g) {
              return E.apply(this, arguments);
            }, "isImageAnimated");
          })(),
          v = _((E) => E.replace(".gu", ""), "getAnimatedImgUrl");
      },
      6415587347: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => is,
        });
        var t = e(4063699741),
          n = e.n(t),
          s = e(7129884748),
          i = e.n(s),
          d = e(4840951141),
          o = e.n(d),
          a = e(9241168512),
          r = e.n(a),
          c = e(9602720019),
          u = e.n(c),
          l = e(9777215928),
          m = e.n(l),
          v = e(9833689275),
          E = e.n(v),
          T = e(2981982679),
          g = e.n(T),
          I = e(9267813754),
          f = e.n(I),
          y = e(3963460214),
          M = e.n(y),
          p = e(9948433110),
          O = e.n(p),
          C = e(2295488157),
          h = e.n(C),
          D = e(5908867676),
          P = e.n(D),
          S = e(4948097913),
          b = e.n(S),
          K = e(5156772208),
          x = e.n(K),
          B = e(3333214639),
          U = e.n(B),
          R = e(9825918216),
          G = e.n(R),
          H = e(1302153452),
          F = e.n(H),
          V = e(474239361),
          X = e.n(V),
          q = e(350135845),
          oe = e.n(q),
          z = e(7428983508),
          Ae = e.n(z),
          ae = e(1001408479),
          de = e.n(ae),
          ve = e(7331486018),
          Se = e.n(ve),
          Ee = e(669259003),
          be = e.n(Ee),
          Ce = e(1889110914),
          Z = e.n(Ce),
          $ = e(7183565897),
          N = e.n($),
          L = e(4814900690),
          w = e.n(L),
          k = e(3710970638),
          J = e.n(k),
          ee = e(1023719767),
          ne = e.n(ee),
          pe = e(4165874747),
          Me = e.n(pe),
          ke = e(3431559584),
          ge = e.n(ke),
          fe = e(2261459203),
          re = e.n(fe),
          le = e(7272988726),
          Re = e.n(le),
          ye = e(2200759559),
          Te = e.n(ye),
          De = e(451984622),
          Ue = e.n(De),
          Ke = e(77360885),
          Ze = e.n(Ke),
          Q = e(7523979550),
          ie = e.n(Q),
          Ve = e(4245237474),
          xe = e.n(Ve),
          je = e(1957386787),
          Fe = e.n(je),
          He = e(8390767423),
          Oe = e.n(He),
          Ye = e(983107878),
          at = e.n(Ye),
          _t = e(3224273568),
          pt = e.n(_t),
          Qe = e(2979422297),
          ct = e.n(Qe),
          Pt = e(4923972147),
          zt = e.n(Pt),
          an = e(1060768686),
          Qt = e.n(an),
          tn = e(5098468056),
          Ht = e.n(tn),
          Kt = e(6906793909),
          qt = e.n(Kt),
          Tn = e(3708998647),
          Mt = e.n(Tn),
          Jt = e(2256285620),
          dn = e.n(Jt),
          rn = e(2316786074),
          gn = e.n(rn),
          Zt = e(3783723764),
          Vt = e(8840779375),
          Sn = e(2604971659),
          ze = e(4103274853),
          Ot = e(2208015175),
          fn = e(3339229351),
          ln = e(397660785),
          it = e(6363331542);
        function Tt(ss) {
          return (0, Zt.A)(
            (0, Vt.A)((0, Sn.A)(ss), (jn) => parseInt(jn, 10)),
            null,
            "desc"
          );
        }
        _(Tt, "makeOrderedIconSizes");
        function Ct(ss) {
          return (0, ze.A)(ss, (jn) => Tt(jn));
        }
        _(Ct, "makeOrderedNamedIconSizes");
        const Rt = {
            24: gn(),
            32: Mt(),
            36: Ht(),
            72: zt(),
            192: pt(),
          },
          Yt = {
            24: dn(),
            32: qt(),
            36: Qt(),
            72: ct(),
            192: at(),
          },
          bn = {
            fancy: {
              20: Oe(),
              24: Fe(),
              32: xe(),
              36: ie(),
              48: Ze(),
              72: Ue(),
              192: Te(),
              360: Re(),
              512: re(),
              1024: ge(),
            },
            frowny: {
              20: Me(),
              24: ne(),
              32: J(),
              36: w(),
              48: N(),
              72: Z(),
              192: be(),
              360: Se(),
              512: de(),
              1024: Ae(),
            },
            neutral: {
              20: oe(),
              24: X(),
              32: F(),
              36: G(),
              48: U(),
              72: x(),
              192: b(),
              360: P(),
              512: h(),
              1024: O(),
            },
            sad_surprise: {
              20: M(),
              24: f(),
              32: g(),
              36: E(),
              48: m(),
              72: u(),
              192: r(),
              360: o(),
              512: i(),
              1024: n(),
            },
          },
          Wn = 24,
          hn = Tt(Yt),
          Bn = Ct(bn),
          Rn = "image_";
        function zn(ss) {
          const jn = [];
          return (
            (0, Ot.A)(ss, (Yn, Qn) => {
              if (Qn.indexOf(Rn) !== 0) return;
              const es = Qn.slice(Rn.length);
              jn.unshift(parseInt(es, 10));
            }),
            jn
          );
        }
        _(zn, "getSizeOptionsFromProfile");
        function is(ss) {
          let {
              size: jn,
              teamOrEnterpriseId: Yn,
              memberId: Qn,
              avatarHash: es,
              emoji: Et,
              isBot: gt = !1,
              botImages: Ft = !1,
              slackbotFeels: nn = null,
              isUserHidden: Dn = !1,
            } = ss,
            bt,
            In,
            xn = !1;
          if (!jn || (!gt && !Dn && (!Yn || !Qn || !es) && !Et)) return {};
          if (Et)
            return {
              emoji: Et,
              isDefault: !1,
            };
          if (Dn) {
            const Nt = (0, it.A)(jn, hn),
              At = (0, it.A)(jn * 2, hn);
            (bt = Rt[Nt || Wn]), (In = Rt[At || Wn]), (xn = !0);
          } else if (Qn === fn.Q$ && nn && bn[nn]) {
            const Nt = (0, it.A)(jn, Bn[nn]),
              At = (0, it.A)(jn * 2, Bn[nn]);
            (bt = bn[nn][Nt || Wn]), (In = bn[nn][At || Wn]);
          } else if (!gt || (Yn && Qn && es)) {
            const Nt = (0, it.A)(jn),
              At = (0, it.A)(jn * 2),
              te = (0, ln.Z)(Yn);
            (bt = `${te}${Yn}-${Qn}-${es}-${Nt}`),
              (In = `${te}${Yn}-${Qn}-${es}-${At}`);
          } else if (Ft) {
            const Nt = zn(Ft),
              At = (0, it.A)(jn, Nt),
              te = (0, it.A)(jn * 2, Nt);
            (bt = Ft[Rn + At]), (In = Ft[Rn + te]);
          }
          if (gt && !bt && !In && !Et) {
            const Nt = (0, it.A)(jn, hn),
              At = (0, it.A)(jn * 2, hn);
            (bt = Yt[Nt || Wn]), (In = Yt[At || Wn]), (xn = !0);
          }
          return {
            imageUrl: bt,
            imageUrl2x: In,
            emoji: Et,
            isDefault: xn,
          };
        }
        _(is, "getMemberProfileImage");
      },
      92812954: (W, A, e) => {
        "use strict";
        e.d(A, {
          d: () => i,
        });
        var t = e(8276911661),
          n = e(3792998666),
          s = e(5096647761);
        function i(d, o) {
          if (!o) return "member";
          const a = (0, t.nv)(d, o);
          let r = "member";
          return (
            (0, s.g)(a)
              ? (r = "external")
              : (0, n.Ez)(a) && !(0, n.Yd)(a)
              ? (r = "ra")
              : (0, n.Yd)(a) && (r = "ura"),
            r
          );
        }
        _(i, "getMemberType");
      },
      8873262110: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => s,
        });
        var t = e(6061527706),
          n = e(5950652755);
        function s(i) {
          let d =
            arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : 250;
          const o = _((a) => {
            !Array.isArray(a) || !a.length || requestAnimationFrame(() => i(a));
          }, "observer");
          return new t.A((0, n.A)(o, d));
        }
        _(s, "getResizeObserver");
      },
      3695531806: (W, A, e) => {
        "use strict";
        e.d(A, {
          z: () => n,
        });
        var t = e(6795568989);
        const n = _((s) => {
          let { codePointLikeString: i } = s;
          if (!(0, t.d)(i)) return;
          const d = 16;
          return i
            .split("-")
            .map((o) => String.fromCodePoint(parseInt(o, d)))
            .join("");
        }, "getUnicodeFromCodePointLikeString");
      },
      8958249318: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => t,
        });
        function t() {
          var n, s;
          return (s =
            (n = window.navigator) === null || n === void 0
              ? void 0
              : n.userAgent) !== null && s !== void 0
            ? s
            : "no-ua";
        }
        _(t, "getUserAgent");
      },
      5770715593: (W, A, e) => {
        "use strict";
        e.d(A, {
          C9: () => a,
          Gl: () => d,
          VQ: () => o,
          XU: () => n,
          dL: () => s,
          rU: () => i,
          x_: () => r,
        });
        var t = e(4761125736);
        const n = _((c) => {
            var u;
            return (u = (0, t._Z)(c, "help_shareables_tm") === "on") !== null &&
              u !== void 0
              ? u
              : !1;
          }, "isHelpShareablesTmExperimentOn"),
          s = _((c) => {
            var u;
            return (u =
              (0, t._Z)(c, "help_articles_in_search") === "treatment") !==
              null && u !== void 0
              ? u
              : !1;
          }, "isHelpArticlesInSearchExperimentTreatment"),
          i = _((c) => {
            var u;
            return (u = (0, t._Z)(c, "help_smarticles") === "on") !== null &&
              u !== void 0
              ? u
              : !1;
          }, "isHelpSmarticlesExperimentOn"),
          d = _((c) => {
            var u;
            return (u = (0, t._Z)(c, "help_navigation") === "on") !== null &&
              u !== void 0
              ? u
              : !1;
          }, "isHelpNavigationExperimentOn"),
          o = _((c) => {
            var u;
            return (u = (0, t._Z)(c, "help_tour") === "treatment") !== null &&
              u !== void 0
              ? u
              : !1;
          }, "isHelpTourExperimentTreatment"),
          a = _((c) => {
            var u;
            return (u = (0, t._Z)(c, "help_tips") === "on") !== null &&
              u !== void 0
              ? u
              : !1;
          }, "isHelpTipsExperimentOn"),
          r = _((c) => {
            var u;
            return (u =
              (0, t._Z)(c, "help_slider_a11y_translations") === "on") !==
              null && u !== void 0
              ? u
              : !1;
          }, "isHelpSliderA11yTranslationsExperimentOn");
      },
      1251564078: (W, A, e) => {
        "use strict";
        e.d(A, {
          v: () => n,
        });
        var t = e(9907843289);
        function n(s) {
          const i = (0, t.Yp)().toLowerCase();
          return i === "en-us" ? s : `/intl/${i}${s}`;
        }
        _(n, "getLocalizedPath");
      },
      4240442510: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => i,
        });
        var t = e(3193155968),
          n = e(735940183);
        const s = new n.Ay("view");
        function i(d) {
          let {
              tab: o,
              experimentFilesExplorerPrototypeGroupOn: a,
              experimentAskSlackViewGroupOn: r,
            } = d,
            c;
          switch (o) {
            case t.k6.Home:
              c = s.t("Home");
              break;
            case t.k6.DMs:
              c = s.t("DMs");
              break;
            case t.k6.Activity:
              c = s.t("Activity");
              break;
            case t.k6.Later:
              c = s.t("Later");
              break;
            case t.k6.SalesHome:
              c = s.t("Sales");
              break;
            case t.k6.Search:
              c = s.t("Search");
              break;
            case t.k6.Canvases:
              c = s.t("Canvases", {
                fallbackHash: "e2d397a06197e996f48faa9c0abfd3a2a80d15de",
                fallbackHashNs: "search",
              });
              break;
            case t.k6.Files:
              c = s.t("Files", {
                ns: "search",
              });
              break;
            case t.k6.FilesPrototype:
              c = a ? s.t("Docs") : "Docs";
              break;
            case t.k6.Channels:
              c = s.t("Channels", {
                ns: "search",
              });
              break;
            case t.k6.People:
              c = s.t("People", {
                ns: "search",
              });
              break;
            case t.k6.Platform:
              c = s.t("Automations", {
                fallbackHash: "4186e4384191cd367f88423e6488c26e96a3807d",
                fallbackHashNs: "search",
              });
              break;
            case t.k6.ExternalConnections:
            case t.k6.ExternalConnectionsTemp:
              c = s.t("External");
              break;
            case t.k6.Huddles:
              c = s.t("Huddles", {
                fallbackHash: "cfed893a3dc774c76cbd9efb20d641aad32eff33x`",
                fallbackHashNs: "search",
              });
              break;
            case t.k6.Assistant:
              c = r ? s.t("Ask Slack") : "Ask Slack";
              break;
            case t.k6.Browse:
              c = s.t("More");
              break;
            case t.k6.Lists:
              c = s.t("Lists");
              break;
            case t.k6.Todos:
              c = "To-dos";
              break;
            case t.k6.Solutions:
              c = s.t("Templates");
              break;
            case t.k6.Agents:
              c = "Agentforce";
              break;
            case t.k6.SlackKitPlayground:
              c = "Slack Kit Playground";
              break;
            case t.k6.BBM:
              c = "";
              break;
            default:
              c = "";
              break;
          }
          return c;
        }
        _(i, "getTabLabel");
      },
      6910192640: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => O,
          o: () => M,
        });
        var t = e(8956161330),
          n = e(2384831516),
          s = e(3193155968),
          i = e(1552255081),
          d = e(6642124196),
          o = e(920478515),
          a = e(1340402138),
          r = e(6470070112),
          c = e(9280052135),
          u = e(665229739),
          l = e(7244076749),
          m = e(4626613428),
          v = e(2711189973),
          E = e(5332875232),
          T = e(5624319675),
          g = e(1439563189),
          I = e(537208959);
        const f = !1,
          y = {
            [s.k6.Home]: (C) => !(0, a.R)(C),
            [s.k6.Activity]: (C) => (0, m.Ty)(C) && !(0, I.Dj)(C),
            [s.k6.DMs]: (C) => (0, m.Ty)(C),
            [s.k6.FilesPrototype]: (C) => (0, u.U)(C) && (0, m.Ty)(C),
            [s.k6.SlackKitPlayground]: (C) => (0, l.b)() && (0, m.Ty)(C),
            [s.k6.Solutions]: (C) => (0, g.g)(C),
            [s.k6.Agents]: (C) => (0, T.m)(C) && (0, m.Ty)(C),
            [s.k6.Later]: (C) => (0, o.Bp)(C),
            [s.k6.Assistant]: (C) => (0, c.l)(C) && (0, m.Ty)(C),
            [s.k6.Canvases]: (C) => (0, i.F)(C) && !(0, a.R)(C) && !(0, u.U)(C),
            [s.k6.Files]: (C) => !(0, a.R)(C) && (0, m.Ty)(C),
            [s.k6.Channels]: (C) => !(0, a.R)(C) && (0, m.Ty)(C),
            [s.k6.Platform]: () => !0,
            [s.k6.People]: (C) => !(0, a.R)(C) && (0, m.Ty)(C),
            [s.k6.Huddles]: (C) =>
              (0, r.Wd)(C) && !(0, E.LS)(C) && !(0, a.R)(C),
            [s.k6.SalesHome]: (C) => (0, t.hx)(C),
            [s.k6.Lists]: (C) =>
              (0, d.teamHasFullListsAccess)(C) && !(0, a.R)(C) && !(0, u.U)(C),
            [s.k6.Todos]: (C) => (0, d.isTodosEnabled)(C),
            [s.k6.ExternalConnections]: (C) => (0, v.y)(C, f),
            [s.k6.ExternalConnectionsTemp]: (C) => !(0, v.y)(C, f),
          },
          M = _((C) => (0, n.Mz)((h) => y[C](h)), "makeSelectVisibleTab"),
          O = _((C, h) => M(h)(C), "getTabVisibility");
      },
      505908973: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => R,
        });
        var t = e(6644049054),
          n = e(352142497),
          s = e(5657872960),
          i = e(6642124196),
          d = e(3559837422),
          o = e(6839188756),
          a = e(3677514771),
          r = e(8956161330),
          c = e(1552255081),
          u = e(7274827479),
          l = e(4761125736),
          m = e(418103123),
          v = e(1190344069),
          E = e(9889493721),
          T = e(7069714209),
          g = e(665229739),
          I = e(9280052135),
          f = e(7244076749),
          y = e(2711189973),
          M = e(5332875232),
          p = e(2052624953),
          O = e(9132066222),
          C = e(8646192222),
          h = e(3875705815),
          D = e(6695353875),
          P = e(1439563189),
          S = e(3937186022),
          b = e(8005333273),
          K = e(5624319675);
        const x = !1,
          B = {
            [n.D.KeyboardShortcuts]: () => !0,
            [n.D.WhatsNew]: () => !0,
            [n.D.RecentCanvases]: () => !1,
            [n.D.CanvasesSharedWithYou]: (G) =>
              (0, l._Z)(G, "canvas_collection_prototype") === "on" &&
              (0, c.F)(G),
            [n.D.CanvasesCreatedByYou]: (G) =>
              (0, l._Z)(G, "canvas_collection_prototype") === "on" &&
              (0, c.F)(G),
            [n.D.BrowseCanvases]: (G) => (0, c.F)(G),
            [n.D.RecentFiles]: () => !0,
            [n.D.FilesCreatedByYou]: () => !0,
            [n.D.FilesSharedWithYou]: () => !0,
            [n.D.BrowseExternalWorkspace]: T.U,
            [n.D.BrowseChannels]: () => !0,
            [n.D.BrowsePeople]: () => !0,
            [n.D.ExternalOrganizations]: (G) => (0, y.y)(G, x),
            [n.D.ExternalOrganization]: (G) => (0, y.y)(G, x),
            [n.D.ExternalPeople]: () => !1,
            [n.D.SlackConnectChannels]: () => !1,
            [n.D.SlackConnectInvitations]: (G) => (0, y.y)(G, x),
            [n.D.BrowseUserGroups]: (G) =>
              !(0, d.sV)(G) && (0, o.qR)((0, a.H7)(G)),
            [n.D.SlackConnect]: (G) => (0, t.A)(G),
            [n.D.Channel]: () => !0,
            [n.D.AppSpace]: () => !0,
            [n.D.RecentPlatform]: (G) => (0, E.MA)(G),
            [n.D.BrowseWorkflowsManagedByYou]: (G) => (0, E.EH)(G),
            [n.D.BrowseYourWorkflowTemplates]: (G) => (0, E.M7)(G),
            [n.D.BrowseShortcuts]: (G) => (0, E.S0)(G),
            [n.D.BrowseWorkflowTemplates]: (G) => (0, E.fh)(G),
            [n.D.BrowseApps]: (G) => (0, E.pr)(G),
            [n.D.OrgDirectory]: () => !0,
            [n.D.Page]: () => !0,
            [n.D.Threads]: () => !0,
            [n.D.Thread]: () => !0,
            [n.D.Profile]: () => !0,
            [n.D.FileDetails]: () => !0,
            [n.D.Help]: () => !0,
            [n.D.UserGroup]: () => !0,
            [n.D.Feedback]: () => !0,
            [n.D.List]: (G) => (0, i.isListsEnabled)(G),
            [n.D.ListRecord]: (G) => (0, i.isListsEnabled)(G),
            [n.D.ListRecordDetails]: (G) => (0, i.isListsEnabled)(G),
            [n.D.ListRecordThread]: (G) => (0, i.isListsEnabled)(G),
            [n.D.ListRecordHistory]: (G) => (0, i.isListsEnabled)(G),
            [n.D.ListHistory]: (G) => (0, i.isListsHistoryEnabled)(G),
            [n.D.DeletedLists]: (G) => (0, i.isListsEnabled)(G),
            [n.D.Tasks]: (G) => (0, i.isTodosEnabled)(G),
            [n.D.AssignedTasks]: (G) => (0, i.isTodosEnabled)(G),
            [n.D.Reminders]: (G) => (0, i.isTodosEnabled)(G),
            [n.D.Saved]: (G) => (0, i.isTodosEnabled)(G),
            [n.D.ComposeList]: () => !0,
            [n.D.Compose]: () => !0,
            [n.D.QuipCommentThread]: () => !0,
            [n.D.QuipCommentStream]: () => !0,
            [n.D.QuipActivityHistory]: () => !0,
            [n.D.QuipAutomationsOverview]: () => !0,
            [n.D.Quip]: () => !0,
            [n.D.Canvas]: () => !0,
            [n.D.ChannelCanvas]: () => !0,
            [n.D.CanvasBrowser]: (G) => (0, c.F)(G),
            [n.D.DeletedCanvases]: (G) => (0, c.F)(G),
            [n.D.PaidBenefits]: () => !0,
            [n.D.Setup]: () => !0,
            [n.D.SearchEmpty]: () => !0,
            [n.D.AboutWorkspace]: () => !1,
            [n.D.Unknown]: () => !0,
            [n.D.MorePeopleSidebar]: () => !0,
            [n.D.MoreCanvasesSidebar]: () => !0,
            [n.D.MoreSolutionsSidebar]: (G) => (0, P.g)(G),
            [n.D.AppPopout]: () => !0,
            [n.D.ChannelList]: () => !0,
            [n.D.BrowseFiles]: () => !0,
            [n.D.BrowseFilesPrototype]: (G) => (0, g.U)(G),
            [n.D.SlackKitPlayground]: () => (0, f.b)(),
            [n.D.Solutions]: (G) => (0, P.g)(G),
            [n.D.Agents]: (G) => (0, K.m)(G),
            [n.D.SolutionsFiltered]: (G) => (0, P.g)(G),
            [n.D.BrowseYourSolutions]: (G) => (0, b.n)(G),
            [n.D.BrowseYourCompanySolutions]: (G) => (0, b.n)(G),
            [n.D.BrowseLists]: (G) => (0, i.teamHasFullListsAccess)(G),
            [n.D.DmsList]: () => !0,
            [n.D.BrowseList]: () => !0,
            [n.D.ActivityList]: () => !0,
            [n.D.LaterList]: (G) => (0, s.c)(G),
            [n.D.Search]: () => !0,
            [n.D.MoreFilesSidebar]: () => !0,
            [n.D.MoreListsSidebar]: () => !0,
            [n.D.MoreTodosSidebar]: () => !0,
            [n.D.FilesPrototypeSidebar]: (G) => (0, g.U)(G),
            [n.D.MoreChannelsSidebar]: () => !1,
            [n.D.Inbox]: () => !1,
            [n.D.MorePlatformSidebar]: () => !0,
            [n.D.MoreHuddlesSidebar]: () => !0,
            [n.D.MoreExternalConnectionsSidebar]: (G) => (0, y.y)(G, x),
            [n.D.HelpBrowser]: () => !0,
            [n.D.Huddle]: () => !0,
            [n.D.BrowseHuddles]: (G) => (0, M.LS)(G),
            [n.D.KeyboardShortcutsBrowser]: () => !0,
            [n.D.WhatsNewBrowser]: () => !0,
            [n.D.FeedbackBrowser]: () => !0,
            [n.D.ExternalWorkspaceAllowedOrgPane]: () => !1,
            [n.D.ExternalWorkspaceSidebar]: () => !1,
            [n.D.ExternalWorkspacePeopleBrowser]: () => !1,
            [n.D.ExternalWorkspaceChannelBrowser]: () => !1,
            [n.D.PostEvent]: () => !1,
            [n.D.AiSummaryDetails]: (G) => (0, u._z)(G),
            [n.D.DailyDigest]: (G) => (0, u.sS)(G),
            [n.D.MoreAiSummarySidebar]: (G) => (0, u.M1)(G),
            [n.D.SearchSummary]: (G) => (0, u.lQ)(G),
            [n.D.AssistantList]: (G) => (0, I.l)(G),
            [n.D.Today]: (G) => (0, m._)(G),
            [n.D.WorkObject]: (G) => (0, S.H)(G),
            [n.D.Record]: (G) => (0, v.hm)(G),
            [n.D.RecordChannelCreate]: (G) => (0, v.hm)(G),
            [n.D.RecordChannelRelatedList]: () => !0,
            [n.D.SalesAdministration]: () => !0,
            [n.D.SalesBulkGrid]: () => !0,
            [n.D.SalesHome]: (G) => (0, r.hx)(G),
            [n.D.SalesLogActivity]: () => !0,
            [n.D.SalesCreateRecord]: () => !0,
            [n.D.SalesListViewBrowser]: () => !0,
            [n.D.SalesSidebar]: () => !0,
            [n.D.SalesNotifications]: () => !0,
            [n.D.AssistantThread]: () => !0,
            [n.D.ChannelFiles]: (G) =>
              (0, l._Z)(G, "channel_canvas_in_bbar") === "on",
            [n.D.AiApp]: (G) => (0, p.wP)(G),
            [n.D.AboutAiApp]: (G) => (0, p.wP)(G),
            [n.D.WorkflowDetails]: (G) =>
              (0, l._Z)(G, "workflow_progress_fe") === "on",
            [n.D.WorkflowEditor]: (G) => (0, l._Z)(G, "wfb_in_client") === "on",
            [n.D.BookmarksFolder]: (G) => (0, O.U6)(G),
            [n.D.ActionItems]: (G) => (0, u.FV)(G),
            [n.D.BBMMain]: (G) => (0, C.mL)(G) && (0, h.V)(G),
            [n.D.BBMWorkspaceSwitcher]: (G) => (0, C.mL)(G) && (0, h.V)(G),
            [n.D.SearchInChannel]: (G) => (0, D.k8)(G),
            [n.D.HuddleTranscriptDetails]: (G) => (0, M.Bd)(G),
            [n.D.HuddlePageCanvas]: () => !0,
            [n.D.BBMMore]: (G) => (0, C.mL)(G) && (0, h.V)(G),
          },
          R = _((G, H) => B[H](G), "getViewTypeVisibility");
      },
      4900557724: (W, A, e) => {
        "use strict";
        e.d(A, {
          BB: () => r,
          GP: () => c,
          Uf: () => u,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(3398586081),
          i = e(7715417323),
          d = e(6422693406);
        const o = {
            didTimeout: !0,
            timeRemaining: () => 0,
          },
          a = (0, s.A)(
            () => !!(window.requestIdleCallback && window.cancelIdleCallback)
          );
        function r(m, v) {
          return a()
            ? window.requestIdleCallback(m, v)
            : window.setTimeout(() => m(o));
        }
        _(r, "requestIdleCallback");
        function c(m) {
          return a() ? window.cancelIdleCallback(m) : window.clearTimeout(m);
        }
        _(c, "cancelIdleCallback");
        function u(m) {
          return new d.S(function (v, E) {
            let T =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : i.A;
            const g = r(
              (function () {
                var I = (0, t.coroutine)(function* (f) {
                  try {
                    const y = yield d.S.resolve(m(f));
                    v(y);
                  } catch (y) {
                    E(y);
                  }
                });
                return function (f) {
                  return I.apply(this, arguments);
                };
              })()
            );
            T(() => {
              c(g);
            });
          });
        }
        _(u, "awaitIdleCallback");
        const l = {
          IDLE_DEADLINE_FALLBACK: o,
        };
      },
      5731054235: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => s,
        });
        var t = e(9636997165);
        let n = null;
        function s() {
          if (n === null) {
            var i, d;
            n =
              (document == null ||
              (i = document.documentElement) === null ||
              i === void 0 ||
              (d = i.dataset) === null ||
              d === void 0
                ? void 0
                : d.app) === t.u.APP_POPOUTS;
          }
          return n;
        }
        _(s, "isAppPopouts");
      },
      8800777280: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => t,
        });
        function t(n, s) {
          return !n || !s ? !1 : s(n) ? !0 : t(n.parentElement || void 0, s);
        }
        _(t, "isContainedBy");
      },
      6045540917: (W, A, e) => {
        "use strict";
        e.d(A, {
          h: () => i,
        });
        var t = e(8276911661),
          n = e(8170643398),
          s = e(3986753718);
        function i(d, o) {
          if (!o) return !1;
          const a = (0, t.nv)(d, o);
          return !(0, n.zU)(a) && !!o && !!(0, s.t6)(d, o);
        }
        _(i, "isDnd");
      },
      7640408795: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => t,
        });
        function t(n) {
          var s;
          return !n || n.metaKey || n.ctrlKey
            ? !1
            : ((s = n.key) === null || s === void 0 ? void 0 : s.length) === 1;
        }
        _(t, "isPrintableKeyEvent");
      },
      6605261507: (W, A, e) => {
        "use strict";
        e.d(A, {
          Dl: () => i,
          Mk: () => n,
          qF: () => s,
        });
        var t = e(1269024372);
        const n = ["about", "canvas"],
          s = ["app", "about", "settings", "chat"];
        function i(d) {
          return (
            n.indexOf(d) !== -1 ||
            s.indexOf(d) !== -1 ||
            Object.keys(t.e).indexOf(d) !== -1
          );
        }
        _(i, "isValidTabRoute");
      },
      5587260451: (W, A, e) => {
        "use strict";
        e.d(A, {
          L: () => t,
          c: () => n,
        });
        const t = ["invitations", "contacts"];
        function n(s) {
          return t.includes(s);
        }
        _(n, "isValidViewName");
      },
      2249017398: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => s,
        });
        var t = e(9636997165);
        let n = null;
        function s() {
          if (n === null) {
            var i, d;
            n =
              (document == null ||
              (i = document.documentElement) === null ||
              i === void 0 ||
              (d = i.dataset) === null ||
              d === void 0
                ? void 0
                : d.app) === t.u.WORKFLOW_BUILDER;
          }
          return n;
        }
        _(s, "isWorkflowBuilder");
      },
      1466694191: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => n,
        });
        const t =
          /^(quip|Qp):F[A-Z0-9]{8,}-(Qpv:[a-z0-9:]{8,}&Qpvs:[0-9]{1,})?$/;
        function n(s) {
          return s ? t.test(s) : !1;
        }
        _(n, "looksLikeQuipHistoryId");
      },
      8305125093: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => n,
        });
        const t = /^Wt[A-Z0-9]{7,}$/;
        function n(s) {
          return t.test(s);
        }
        _(n, "looksLikeWorkflowTemplateId");
      },
      1269024372: (W, A, e) => {
        "use strict";
        e.d(A, {
          e: () => n,
          k: () => s,
        });
        var t = e(352142497);
        const n = {
          recent: t.D.RecentPlatform,
          "workflows-managed-by-you": t.D.BrowseWorkflowsManagedByYou,
          workflows: t.D.BrowseShortcuts,
          "all-workflows": t.D.BrowseShortcuts,
          templates: t.D.BrowseWorkflowTemplates,
          apps: t.D.BrowseApps,
        };
        function s(i) {
          return n[i];
        }
        _(s, "maybeGetAutomationsTab");
      },
      264208541: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ey: () => o,
          Hn: () => a,
          gs: () => r,
          mw: () => u,
          nS: () => c,
        });
        var t = e(8665296019),
          n = e(1033764764),
          s;
        let i = !!(
          !(
            window == null ||
            (s = window.performance) === null ||
            s === void 0
          ) && s.memory
        );
        function d() {
          return i ? window.performance.memory.jsHeapSizeLimit : null;
        }
        _(d, "getMemoryLimit");
        function o() {
          return i ? window.performance.memory.totalJSHeapSize : null;
        }
        _(o, "getMemoryTotal");
        function a() {
          return i ? window.performance.memory.usedJSHeapSize : null;
        }
        _(a, "getMemoryUsed");
        function r() {
          return i;
        }
        _(r, "supportsMemoryMeasurement");
        function c(m) {
          const v = m / 1e3 / 1e3;
          return `${v < 100 ? v.toPrecision(3) : Math.round(v)} MB`;
        }
        _(c, "humanizeBytes");
        function u(m, v) {
          const E = (0, t.A)(m, (T) => {
            let { memory: g } = T;
            return g[v] || 0;
          });
          return Math.ceil((0, n.UK)(E));
        }
        _(u, "sumMemoryMetricsByKey"),
          Object.defineProperties(
            {},
            {
              SUPPORTS_MEMORY_MEASUREMENT: {
                get: () => i,
                set: (m) => {
                  i = m;
                },
              },
            }
          );
      },
      8869734951: (W, A, e) => {
        "use strict";
        e.d(A, {
          N: () => t,
          P: () => s,
        });
        function t(i, d) {
          const { ref: o } = d;
          return s(i, o);
        }
        _(t, "mergeRefWithChildRef");
        function n(i) {
          return (d) => {
            typeof i == "function" ? i(d) : i && (i.current = d);
          };
        }
        _(n, "makeRefBackwardsCompatible");
        function s() {
          for (var i = arguments.length, d = new Array(i), o = 0; o < i; o++)
            d[o] = arguments[o];
          return (a) => {
            d.forEach((r) => {
              n(r)(a);
            });
          };
        }
        _(s, "mergeRefs");
      },
      5737576046: (W, A, e) => {
        "use strict";
        e.d(A, {
          Pw: () => u,
          bC: () => a,
          wn: () => c,
          zC: () => r,
        });
        var t = e(1703559452),
          n = e(1022424641),
          s = e(796111729),
          i = e(9470581768),
          d = e(8800777280);
        const o = {};
        function a(l) {
          let {
            channelId: m,
            functions: v,
            getInputInstance: E,
            threadTs: T,
            viewContext: g,
          } = l;
          if (!E) throw new Error('Missing required "getInputInstance" param');
          const I = `${g}-${m}-${T}`;
          return (
            o[I] &&
              (0, s.Ay)().warn(`Registering duplicate input (key: "${I}")`),
            (o[I] = {
              clear: () => {
                var f, y;
                (f = E()) === null ||
                  f === void 0 ||
                  (y = f.clear) === null ||
                  y === void 0 ||
                  y.call(f);
              },
              clearHistory: () => {
                var f, y;
                (f = E()) === null ||
                  f === void 0 ||
                  (y = f.clearHistory) === null ||
                  y === void 0 ||
                  y.call(f);
              },
              focus: () => {
                var f, y;
                (f = E()) === null ||
                  f === void 0 ||
                  (y = f.focus) === null ||
                  y === void 0 ||
                  y.call(f);
              },
              getContents: () => {
                var f, y;
                return (f = E()) === null ||
                  f === void 0 ||
                  (y = f.getContents) === null ||
                  y === void 0
                  ? void 0
                  : y.call(f);
              },
              getDisplayValue: () => {
                var f, y;
                return (f = E()) === null ||
                  f === void 0 ||
                  (y = f.displayValue) === null ||
                  y === void 0
                  ? void 0
                  : y.call(f);
              },
              getLength: () => {
                var f, y;
                return (f = E()) === null ||
                  f === void 0 ||
                  (y = f.getLength) === null ||
                  y === void 0
                  ? void 0
                  : y.call(f);
              },
              getSelection: () => {
                var f, y;
                return (f = E()) === null ||
                  f === void 0 ||
                  (y = f.getSelection) === null ||
                  y === void 0
                  ? void 0
                  : y.call(f);
              },
              getText: () => {
                var f, y;
                return (f = E()) === null ||
                  f === void 0 ||
                  (y = f.value) === null ||
                  y === void 0
                  ? void 0
                  : y.call(f);
              },
              hasFocus: () => {
                var f, y;
                return (f = E()) === null ||
                  f === void 0 ||
                  (y = f.hasFocus) === null ||
                  y === void 0
                  ? void 0
                  : y.call(f);
              },
              insertContentsAtCursor: function () {
                for (
                  var f = arguments.length, y = new Array(f), M = 0;
                  M < f;
                  M++
                )
                  y[M] = arguments[M];
                var p, O;
                (p = E()) === null ||
                  p === void 0 ||
                  (O = p.insertContentsAtCursor) === null ||
                  O === void 0 ||
                  O.call(p, ...y);
              },
              isEmpty: () => {
                var f, y;
                return !!(
                  !(
                    (f = E()) === null ||
                    f === void 0 ||
                    (y = f.isEmpty) === null ||
                    y === void 0
                  ) && y.call(f)
                );
              },
              isEnabled: () => {
                var f, y;
                return !!(
                  !(
                    (f = E()) === null ||
                    f === void 0 ||
                    (y = f.isEnabled) === null ||
                    y === void 0
                  ) && y.call(f)
                );
              },
              prependContents: (f) => {
                var y, M;
                (y = E()) === null ||
                  y === void 0 ||
                  (M = y.prependContents) === null ||
                  M === void 0 ||
                  M.call(y, f);
              },
              setContents: function () {
                for (
                  var f = arguments.length, y = new Array(f), M = 0;
                  M < f;
                  M++
                )
                  y[M] = arguments[M];
                var p, O;
                (p = E()) === null ||
                  p === void 0 ||
                  (O = p.setContents) === null ||
                  O === void 0 ||
                  O.call(p, ...y);
              },
              setCursor: function () {
                for (
                  var f = arguments.length, y = new Array(f), M = 0;
                  M < f;
                  M++
                )
                  y[M] = arguments[M];
                var p, O;
                (p = E()) === null ||
                  p === void 0 ||
                  (O = p.setCursor) === null ||
                  O === void 0 ||
                  O.call(p, ...y);
              },
              setCursorAtEnd: () => {
                var f, y;
                (f = E()) === null ||
                  f === void 0 ||
                  (y = f.setCursorAtEnd) === null ||
                  y === void 0 ||
                  y.call(f);
              },
              setPlaceholder: (f) => {
                var y, M;
                (y = E()) === null ||
                  y === void 0 ||
                  (M = y.setPlaceholder) === null ||
                  M === void 0 ||
                  M.call(y, f);
              },
              setText: function () {
                for (
                  var f = arguments.length, y = new Array(f), M = 0;
                  M < f;
                  M++
                )
                  y[M] = arguments[M];
                var p, O;
                (p = E()) === null ||
                  p === void 0 ||
                  (O = p.value) === null ||
                  O === void 0 ||
                  O.call(p, ...y);
              },
              ...v,
            }),
            () => {
              delete o[I];
            }
          );
        }
        _(a, "registerInputAuto");
        function r(l) {
          let { viewContext: m, channelId: v, threadTs: E } = l;
          return o[`${m}-${v}-${E || void 0}`];
        }
        _(r, "getInputProxy");
        function c(l) {
          if (!l || !(0, i.A)(l)) return null;
          let m, v, E;
          return (0, d.A)(l, (g) =>
            g.getAttribute("data-message-input")
              ? ((m = g.getAttribute("data-channel-id")),
                (v = g.getAttribute("data-thread-ts")),
                (E = g.getAttribute("data-view-context")),
                !0)
              : !1
          )
            ? r({
                viewContext: E,
                channelId: m,
                threadTs: v,
              })
            : null;
        }
        _(c, "getProxyForElement");
        function u() {
          let { channelId: l, threadTs: m } =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          const v = `${l}-${m}`,
            E = Object.keys(o);
          return (0, t.A)(E, (T) => (0, n.A)(T, v));
        }
        _(u, "isInputRegistered");
      },
      4394722864: (W, A, e) => {
        "use strict";
        e.d(A, {
          Q: () => t,
        });
        const t = _(() => null, "noopNull");
      },
      662226046: (W, A, e) => {
        "use strict";
        e.d(A, {
          R2: () => T,
          bP: () => g,
          ec: () => p,
          fU: () => M,
          p6: () => h,
          qe: () => O,
          x2: () => P,
          yj: () => D,
        });
        var t = e(6858020025),
          n = e(3783303734),
          s = e(796111729),
          i = e(571104883),
          d = e(5795074931),
          o = e(8847766420),
          a = e(2872463257),
          r = e(3855029223);
        const c = "notification:sent",
          u = "notification:received",
          l = "notification:opened",
          m = "notification:quick_reply",
          v = "notification:read_in_app",
          E = 100;
        function T(S) {
          try {
            return JSON.stringify(S);
          } catch (b) {
            return (
              (0, s.Wo)().warn(
                "encodeNotificationTracePassthrough json stringify error",
                b
              ),
              ""
            );
          }
        }
        _(T, "encodeNotificationTracePassthrough");
        function g(S) {
          try {
            const { traceId: b, parentSpanId: K } = JSON.parse(S);
            return {
              traceId: b,
              parentSpanId: K,
            };
          } catch (b) {
            return (
              (0, s.Wo)().warn(
                "decodeNotificationTracePassthrough json parse error",
                b
              ),
              {
                traceId: "",
                parentSpanId: "",
              }
            );
          }
        }
        _(g, "decodeNotificationTracePassthrough");
        function I(S) {
          let { tracer: b, name: K, parentSpanId: x, traceId: B } = S;
          return b.createSpan({
            name: K,
            samplingOptions: {
              sampleType: a.nl.ALWAYS,
            },
            options: {
              parentSpanId: x,
              traceId: B,
            },
          });
        }
        _(I, "createSpan");
        function f(S) {
          let { tracer: b, name: K, parentSpanId: x, traceId: B } = S;
          const U = I({
            tracer: b,
            name: K,
            parentSpanId: x,
            traceId: B,
          });
          return U.close(), U;
        }
        _(f, "createAndCloseSpan");
        function y(S, b) {
          let { tracer: K, message: x } = b;
          const B = f({
              tracer: K,
              name: c,
            }),
            U = (0, i.y3)() ? "desktop" : "browser",
            R = (0, d.WR)(S),
            G = (0, o.ZT)(S),
            H = (0, t.A)(x == null ? void 0 : x.ts, ".", ""),
            F = x == null ? void 0 : x.channel,
            V = `${R}-${F}-${H}`;
          return (
            B.addTags({
              platform: U,
              encoded_user_id: R,
              encoded_team_id: G,
              encoded_channel_id: F,
              message_ts: H,
              notification_id: V,
            }),
            B
          );
        }
        _(y, "createAndCloseNotificationSentSpan");
        function M(S, b) {
          let { message: K } = b;
          if (!K || !(K != null && K.ts) || !(K != null && K.channel)) return;
          const x = (0, r.E)({
            state: S,
          });
          let B, U;
          const R = [];
          if (
            (K == null ? void 0 : K.type) === "desktop_notification" &&
            K != null &&
            K.trace_ctx
          )
            (B = K.trace_ctx["x-b3-traceid"]), (U = K.trace_ctx["x-b3-spanid"]);
          else {
            const H = y(S, {
              tracer: x,
              message: K,
            });
            R.push(H), (U = H.getId()), (B = H.getTraceId());
          }
          const G = f({
            name: u,
            tracer: x,
            traceId: B,
            parentSpanId: U,
          });
          return (
            R.push(G),
            x.reportSpans(R),
            {
              traceId: B,
              parentSpanId: U,
            }
          );
        }
        _(M, "traceNotificationSentAndReceived");
        function p(S, b) {
          let { notificationTracePassthroughData: K } = b;
          if (!K) return;
          const { traceId: x, parentSpanId: B } = K,
            U = (0, r.E)({
              state: S,
            }),
            R = f({
              tracer: U,
              traceId: x,
              parentSpanId: B,
              name: l,
            });
          U.reportSpans([R]);
        }
        _(p, "traceNotificationOpened");
        function O(S, b) {
          let { notificationTracePassthroughData: K, clientMsgId: x } = b;
          if (!K || !x) return;
          const { traceId: B, parentSpanId: U } = K,
            R = (0, r.E)({
              state: S,
            }),
            G = f({
              tracer: R,
              traceId: B,
              parentSpanId: U,
              name: m,
            });
          G.addTags({
            reply_message_client_message_id: x,
          }),
            R.reportSpans([G]);
        }
        _(O, "traceNotificationQuickReply");
        let C = {};
        function h(S) {
          return !!C[S];
        }
        _(h, "messageHasPendingNotificationTrace");
        function D(S, b) {
          let { timestamp: K, notificationTracePassthroughData: x } = b;
          if (!x) return;
          (0, n.A)(C) > E &&
            ((0, s.Ay)({
              state: S,
            }).error(
              "notification-tracing-utils: notificationTracePassThroughData exceeded maximum size"
            ),
            (C = {}));
          const { traceId: B, parentSpanId: U } = x,
            R = (0, r.E)({
              state: S,
            }),
            G = I({
              tracer: R,
              traceId: B,
              parentSpanId: U,
              name: v,
            });
          C[K] = G;
        }
        _(D, "openNotificationReadSpan");
        function P(S, b) {
          let { timestamp: K } = b;
          if (!K) return;
          const x = C[K];
          if (!x) return;
          const B = (0, r.E)({
            state: S,
          });
          x.close(), B.reportSpans([x]), delete C[K];
        }
        _(P, "closeAndReportNotificationReadSpan");
      },
      1369898444: (W, A, e) => {
        "use strict";
        e.d(A, {
          M: () => d,
          W: () => i,
        });
        var t = e(2371143272),
          n = e(7002741921),
          s = e(4724591729);
        function i(o, a) {
          const r = {
              resources: [],
              frames: [],
              stacks: [],
              samples: [],
            },
            c = new Map(),
            u = new Map(),
            l = new Map();
          function m(I) {
            if (l.has(I)) return l.get(I);
            const f = r.resources.length;
            return r.resources.push(o.resources[I]), l.set(I, f), f;
          }
          _(m, "mapResource");
          function v(I) {
            if (u.has(I)) return u.get(I);
            const f = o.frames[I],
              y = r.frames.length;
            return (
              f.resourceId != null
                ? r.frames.push({
                    ...f,
                    resourceId: m(f.resourceId),
                  })
                : r.frames.push(f),
              u.set(I, y),
              y
            );
          }
          _(v, "mapFrame");
          function E(I) {
            if (c.has(I)) return c.get(I);
            const f = o.stacks[I],
              y = f.parentId ? E(f.parentId) : void 0,
              M = v(f.frameId),
              p = r.stacks.length;
            return (
              r.stacks.push(
                y != null
                  ? {
                      parentId: y,
                      frameId: M,
                    }
                  : {
                      frameId: M,
                    }
              ),
              c.set(I, p),
              p
            );
          }
          _(E, "mapStack");
          function T(I) {
            I.stackId == null
              ? r.samples.push(I)
              : r.samples.push({
                  timestamp: I.timestamp,
                  stackId: E(I.stackId),
                });
          }
          _(T, "addSample");
          let g = 0;
          for (const { start: I, end: f } of a) {
            for (; g < o.samples.length && o.samples[g].timestamp < I; ) g += 1;
            for (; g < o.samples.length && o.samples[g].timestamp <= f; )
              T(o.samples[g]), (g += 1);
          }
          return r;
        }
        _(i, "filterTrace");
        function d() {
          return (
            !(0, s.b3)() && (0, n.A)("self_profiling", "enabled") && !(0, t.b)()
          );
        }
        _(d, "isProfilingEnabled");
      },
      6979898962: (W, A, e) => {
        "use strict";
        e.d(A, {
          B: () => s,
          I: () => i.A,
        });
        var t = e(5824283093),
          n = e(4757466470);
        let s = _(
          class extends t.Component {
            shouldComponentUpdate(o, a) {
              return (
                !(0, n.Ay)(o, this.props, 2) || !(0, n.Ay)(a, this.state, 2)
              );
            }
          },
          "PureComponentDepth2"
        );
        var i = e(8993095355);
      },
      8993095355: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => s,
        });
        var t = e(5824283093),
          n = e(4757466470);
        let s = _(
          class extends t.Component {
            shouldComponentUpdate(d, o) {
              return (
                !(0, n.Ay)(d, this.props, 3) || !(0, n.Ay)(o, this.state, 3)
              );
            }
          },
          "PureComponentDepth3"
        );
      },
      7948868735: (W, A, e) => {
        "use strict";
        e.d(A, {
          F: () => s,
        });
        var t = e(6422693406),
          n = e(4615579178);
        class s extends n.l {
          fetchData() {
            return t.S.resolve();
          }
          onCacheData(d) {
            super.onCacheData(d);
            const o = 1e3 * 60 * 60 * 4;
            this.refreshTimer && clearTimeout(this.refreshTimer),
              (this.refreshTimer = null),
              (this.refreshTimer = setTimeout(() => {
                this._callCacheGet();
              }, this.timeoutMs + Math.random() * o));
          }
          getStaleWhileRevalidate(d) {
            return this.isStaleOrUndefined() &&
              (this._callCacheGet(), this.cachedData === void 0)
              ? d
              : this.cachedData;
          }
          constructor() {
            super(() => this.fetchData(), 1008e5, !1),
              (this.refreshTimer = null);
          }
        }
        _(s, "AutocompleteCache");
      },
      4256321479: (W, A, e) => {
        "use strict";
        e.d(A, {
          E: () => a,
        });
        var t = e(5276466411),
          n = e(7948868735),
          s = e(6533394955),
          i = e(474652310);
        class d extends n.F {
          handleFileDeletion(c) {
            if (this.cachedData && this.cachedData.length > 0) {
              const u = this.cachedData.filter(
                (l) => !(c != null && c.includes(l.id))
              );
              this.cachedData = u;
            }
          }
          fetchData() {
            return (0, s.dispatchForTeamId)(
              this.teamId,
              (0, t.z)({
                reason: "fetch-search-autocomplete-top-engaged-files",
              })
            ).then(
              (c) => (
                (0, s.dispatchForTeamId)(
                  this.teamId,
                  (0, i.b)({
                    files: c.files,
                  })
                ),
                c.files
              )
            );
          }
          constructor(c, u) {
            super(), (this.teamId = c), (this.timeoutMs = u);
          }
        }
        _(d, "AutocompleteTopEngagedFilesCache");
        const o = {};
        function a(r) {
          let { teamId: c } = r;
          const u = c || "_default",
            l = 36e5;
          return o[u] || (o[u] = new d(c, l)), o[u];
        }
        _(a, "getAutocompleteTopEngagedFilesCache");
      },
      1948374838: (W, A, e) => {
        "use strict";
        e.d(A, {
          X: () => d,
        });
        var t = e(2223860501),
          n = e(8847766420);
        let s = _(
          class {
            isStale() {
              return Date.now() - this.updatedDate > this.timeoutMs;
            }
            isPrefixStale() {
              return Date.now() - this.prefixUpdatedDate > this.prefixTimeoutMs;
            }
            clearIfStale() {
              this.isStale() &&
                (this.queryCache.clear(), (this.updatedDate = Date.now()));
            }
            clearPrefixIfStale() {
              this.isPrefixStale() &&
                (this.prefixQueryCache.clear(),
                (this.prefixUpdatedDate = Date.now()));
            }
            contains(a) {
              const r = this.queryCache.has(a);
              return this.clearIfStale(), r;
            }
            containsPrefixOf(a) {
              return (
                this.clearPrefixIfStale(),
                this.prefixQueryCache.containsPrefix(a)
              );
            }
            add(a) {
              return this.clearIfStale(), this.queryCache.add(a);
            }
            addAsPrefix(a) {
              return this.clearPrefixIfStale(), this.prefixQueryCache.add(a);
            }
            setRequestInFlight() {
              this.inFlightRequestStartTime = Date.now();
            }
            clearRequestInFlight() {
              delete this.inFlightRequestStartTime;
            }
            isRequestInFlight() {
              return this.inFlightRequestStartTime
                ? Date.now() - this.inFlightRequestStartTime <
                    this.inFlightRequestTimeoutMs
                : !1;
            }
            reset() {
              this.queryCache.clear(),
                (this.updatedDate = Date.now()),
                this.prefixQueryCache.clear(),
                (this.prefixUpdatedDate = Date.now()),
                this.clearRequestInFlight();
            }
            constructor() {
              (this.queryCache = new t.A()),
                (this.prefixQueryCache = new t.A()),
                (this.updatedDate = Date.now()),
                (this.prefixUpdatedDate = Date.now()),
                (this.timeoutMs = 1e3 * 60 * 60 * 8),
                (this.prefixTimeoutMs = 1e3 * 60 * 15),
                (this.inFlightRequestTimeoutMs = 400);
            }
          },
          "WorkflowTriggersAutocompleteQueryCache"
        );
        const i = {};
        function d(o) {
          const a = (0, n.ZT)(o),
            c = (0, n.jV)(o) || a || "";
          return i[c] || (i[c] = new s()), i[c];
        }
        _(d, "getWorkflowTriggersAutocompleteQueryCache");
      },
      2825917518: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => i,
          u: () => s,
        });
        var t = e(6030318713),
          n = e(9422011462);
        const s = /[- _'.\u{2019}\u{200b}()/\uFF0F]/gu;
        let i = _(
          class Ss {
            normalizeAndScore(o) {
              const a = (0, n.B)(o);
              return a === this.normalizedQuery ? 0 : this.score(a);
            }
            score(o) {
              if (
                !o ||
                this.queryNoSeparators.length > o.replace(s, "").length ||
                !Ss.containsAllLetters(o, this.queryNode) ||
                !this.queryNode
              )
                return 1 / 0;
              const r = Ss.lettersToGraph(o, this.options);
              if (!r) return 1 / 0;
              const c = Ss.searchWordBoundariesOnly(
                r,
                this.queryNode,
                this.options
              );
              if (!c) return 1 / 0;
              const u = Ss.countResult(c);
              return u > this.fuzzyLimit ? 1 / 0 : u;
            }
            static scoreOnce(o, a, r) {
              const c = (0, n.B)(a),
                u = (0, n.B)(o);
              return new Ss(c, r).score(u);
            }
            static lettersToGraph(o, a) {
              const r = o.split(""),
                c = r.shift();
              return Ss.lettersToGraphWorker(c, null, r, [], 0, a);
            }
            static lettersToGraphWorker(o, a, r, c, u) {
              let l =
                arguments.length > 5 && arguments[5] !== void 0
                  ? arguments[5]
                  : {};
              if (!o) return null;
              const m = (0, t.A)(o),
                v = Ss.makeLetterNode(o, a, c, u, m);
              if (Ss.shouldAddJump(a, v, l)) {
                const T = l.fuzzyJumpLimit || 5;
                c.length < T && c.push(v);
              }
              const E = Ss.lettersToGraphWorker(r.shift(), v, r, c, u + 1, l);
              return E && (v.next = E), v;
            }
            static shouldAddJump(o, a) {
              let r =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : {};
              return a.ignored
                ? !1
                : !!(
                    !o ||
                    (o.ignored && !a.ignored) ||
                    (r.fuzzyCJK && (o.isCJK !== a.isCJK || a.isCJK))
                  );
            }
            static makeLetterNode(o, a, r, c, u) {
              return {
                letter: o,
                ignored: o.match(s),
                next: null,
                prev: a,
                jumps: r,
                visited: !1,
                index: c,
                isCJK: u,
              };
            }
            static queryToLinkedList(o) {
              if (!o) return null;
              let a = o.split("");
              return (
                a.length > 1024 && (a = a.slice(0, 1024)),
                Ss.queryToLinkedListWorker(a, 0)
              );
            }
            static queryToLinkedListWorker(o, a) {
              if (a >= o.length) return null;
              const r = o[a],
                c = !!(r.match(s) && (a !== 0 || o.length > 1));
              return {
                letter: r,
                isSeparator: c,
                isSpace: r === " ",
                next: Ss.queryToLinkedListWorker(o, a + 1),
                index: a,
              };
            }
            static searchWordBoundariesOnly(o, a) {
              let r =
                  arguments.length > 2 && arguments[2] !== void 0
                    ? arguments[2]
                    : {},
                c = Ss.searchWordBoundariesOnlyWorker(o, a, 0, r);
              return (
                c ||
                  (c = o.jumps.reduce(
                    (u, l) =>
                      u || l === o
                        ? u
                        : Ss.searchWordBoundariesOnlyWorker(l, a, 1, r),
                    null
                  )),
                c
              );
            }
            static searchWordBoundariesOnlyWorker(o, a, r) {
              let c =
                arguments.length > 3 && arguments[3] !== void 0
                  ? arguments[3]
                  : {};
              if (!o || !a) return null;
              let u;
              if (
                (!o.visited &&
                  (o.letter === a.letter || (o.ignored && a.isSeparator)) &&
                  (u = {
                    node: o,
                    count: r,
                  }),
                !u)
              )
                return null;
              if (!a.next) return u;
              o.visited = !0;
              let l = Ss.searchWordBoundariesOnlyWorker(o.next, a.next, 0, c),
                m = a.next;
              for (; m.isSeparator && m.next; ) m = m.next;
              return (
                l ||
                  (l = o.jumps.reduce(
                    (v, E) =>
                      v ||
                      E.visited ||
                      E === o ||
                      ((c.searchForwardOnly || c.substringsOnly) &&
                        E.index < o.index) ||
                      (c.substringsOnly && E.index > o.index + 2)
                        ? v
                        : Ss.searchWordBoundariesOnlyWorker(E, m, 1, c),
                    null
                  )),
                (o.visited = !1),
                l ? ((u.next = l), u) : null
              );
            }
            static countResult(o) {
              return o ? o.count + Ss.countResult(o.next) : 0;
            }
            static containsAllLetters(o, a) {
              let r = a;
              for (; r; ) {
                if (!(r.isSeparator || o.includes(r.letter))) return !1;
                r = r.next;
              }
              return !0;
            }
            constructor(o, a = {}) {
              (this.normalizedQuery = (0, n.B)(o)),
                (this.queryNode = Ss.queryToLinkedList(this.normalizedQuery)),
                (this.options = a);
              var r;
              (this.fuzzyLimit =
                (r = this.options.fuzzyLimit) !== null && r !== void 0
                  ? r
                  : 1 / 0),
                (this.queryNoSeparators = this.normalizedQuery.replace(s, ""));
            }
          },
          "FuzzyMatcher"
        );
      },
      8170659516: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => d,
        });
        var t = e(9884588328),
          n = e(8921478798),
          s = e(8701485242),
          i = e(5795074931);
        function d(o) {
          let { state: a, mpim: r, matchData: c } = o;
          const u = (0, i.WR)(a);
          let l = [];
          if (((0, t.Ug)(r) && (l = (0, t.Ug)(r).filter((g) => u !== g)), !c))
            return l;
          const m = !1,
            v = !1,
            E = [];
          c.forEach((g) => {
            g.map((f) => ({
              name: (0, n.I)(a, f.id, m, v),
              ...f,
            }))
              .sort((f, y) =>
                f.score < y.score
                  ? 1
                  : f.score > y.score
                  ? -1
                  : (0, s.Ay)(f.name, y.name)
              )
              .filter((f) => isFinite(f.score))
              .forEach((f) => {
                l.includes(f.id) &&
                  (E.push(f.id), l.splice(l.indexOf(f.id), 1));
              });
          });
          const T = l
            .map((g) => ({
              id: g,
              name: (0, n.I)(a, g, m, v),
            }))
            .sort((g, I) => (0, s.Ay)(g.name, I.name))
            .map((g) => g.id);
          return [...E, ...T];
        }
        _(d, "getMemberDisplayOrderForSearcherMPIM");
      },
      220244708: (W, A, e) => {
        "use strict";
        e.d(A, {
          B: () => i,
        });
        var t = e(6495946979),
          n = e(8170643398),
          s = e(3730613858);
        function i(d, o, a) {
          if ((0, n.fy)(o)) return (0, t.bl)(a);
          const r = (0, s.Ql)(d, a.id, o.id);
          return !!(r.isKnown && r.isMember);
        }
        _(i, "isUserKnownToBeMemberOfChannel");
      },
      1072784641: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => ve,
        });
        var t = e(7715417323),
          n = e(5729325965),
          s = e(1703559452),
          i = e(4249070636),
          d = e(5238395322),
          o = e(8086952004),
          a = e(2003990933),
          r = e(3037015781),
          c = e(8496310524),
          u = e(7111365413),
          l = e(9884588328),
          m = e(1407713935),
          v = e(8798294025),
          E = e(395285811),
          T = e(3890290905);
        const g = _(
            (Se) => Se && (Se.displayName || Se.display_name || (0, T.Y)(Se)),
            "getEmojiDisplayName"
          ),
          I = _(
            (Se) =>
              Se
                ? (Se.aliases ? [Se, ...Se.aliases] : [Se]).map((be) => ({
                    name: (0, T.Y)(be),
                    displayName: g(be),
                  }))
                : null,
            "getAllEmojiNameObjects"
          );
        var f = e(8393662842),
          y = e(102566929),
          M = e(5455782105),
          p = e(8170643398),
          O = e(9262712126),
          C = e(6120301420),
          h = e(3212336858),
          D = e(6839188756),
          P = e(2023092677),
          S = e(1033870301),
          b = e(796111729),
          K = e(8088280230);
        const x = {
          china: ["pinching_hand", "pinching-hand"],
          dead: ["older_adult"],
          dump: ["hindu_temple"],
          fail: ["family"],
          gross: ["flag-progress-pride"],
          hi: ["shit"],
          hit: ["shit"],
          hitler: ["white_flower"],
          it: ["shit"],
          macht: ["mannlichkeitssymbol"],
          sh: ["shit"],
          shi: ["shit"],
          shoot: ["school_satchel"],
          s: ["shit"],
          sit: ["shit"],
          sith: ["person_with_headscarf"],
          war: ["man-wearing-turban"],
          whine: ["menorah_with_nine_branches"],
          worst: ["woman-wrestling"],
          wrong: ["woman-rowing-boat"],
        };
        var B = e(1917953477),
          U = e(2825917518),
          R = e(9422011462),
          G = e(8518663094),
          H = e(2332798892);
        const F = _((Se) => (Se || "").split(/\s+/)[0], "getFirstWord"),
          V = _(
            (Se) =>
              ["/", "\uFF0F"].includes((Se || "").charAt(0)) ? Se : `/${Se}`,
            "prependSlashToStr"
          ),
          X = _(
            (Se) => ((Se || "").split(/[^\S\n\r]+/g) || []).length > 1,
            "strHasSpace"
          );
        var q = e(8847766420),
          oe = e(2762206868),
          z = e(9101533895),
          Ae = e(4761125736),
          ae = e(8276911661),
          de = e(3677514771);
        let ve = _(
          class {
            filterMembers(Ee, be) {
              let Ce =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : t.A;
              return be.reduce((Z, $) => {
                if ((0, p.Zx)($) || this.shouldFilterItem($, Ce)) return Z;
                if (!this.query && this.allowEmptyQuery) {
                  const k = {
                    item: $,
                    score: 0,
                    id: $.id,
                  };
                  return (
                    this.selfFirst && (0, p.fy)($) && (k.isSelf = !0),
                    Z.push(k),
                    Z
                  );
                }
                const { score: N, scoreDetails: L } = this.scoreMember($),
                  w = {
                    item: $,
                    score: N,
                    scoreDetails: L,
                    id: $.id,
                  };
                return (
                  !this.avoidExactMatchForMembers &&
                    this.preferExactMatch &&
                    ((w.isExactMatch = this.isMemberExactMatch($)),
                    (w.exactMatchDetails = this.getMemberExactMatchDetails($))),
                  this.selfFirst && (0, p.fy)($) && (w.isSelf = !0),
                  N <= this.fuzzyLimit && Z.push(w),
                  Z
                );
              }, []);
            }
            scoreMember(Ee) {
              let be =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : this.matcher;
              const Ce = 1 / 0,
                Z = {};
              if (this.queryIsMaybeSelf && (0, p.fy)(Ee)) Z.self_score = 0;
              else {
                const w = (0, O.j_)(Ee),
                  k = (0, O.sJ)(Ee);
                (Z.real_name = w ? be.score(w) : Ce),
                  (Z.display_name = k ? be.score(k) : Ce);
              }
              if (this.shouldMatchEmail) {
                const w = (0, O.ZL)(Ee);
                Z.email = w ? this.forwardOnlyMatcher.score(w) : 1 / 0;
              }
              var $;
              const N =
                  ($ = (0, n.A)(Object.values(Z))) !== null && $ !== void 0
                    ? $
                    : Ce,
                L = Object.entries(Z).reduce((w, k) => {
                  let [J, ee] = k;
                  return isFinite(ee) && (w[J] = ee), w;
                }, {});
              return {
                score: N,
                scoreDetails: L,
              };
            }
            filterChannels(Ee, be) {
              let Ce =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : t.A;
              return be.reduce((Z, $) => {
                if (
                  (0, m.PC)($) ||
                  (0, m.Zx)($) ||
                  (0, E.jT)($) ||
                  this.shouldFilterItem($, Ce)
                )
                  return Z;
                if (!this.query && this.allowEmptyQuery)
                  return (
                    Z.push({
                      item: $,
                      score: 0,
                      id: $.id,
                    }),
                    Z
                  );
                const N = (0, R.B)(
                    (0, l.SB)(Ee, $, {
                      publicChannelIncludeHashSign: !1,
                    })
                  ),
                  L = this.matcher.score(N),
                  w = {
                    item: $,
                    score: L,
                    id: $.id,
                  };
                this.preferExactMatch &&
                  (w.isExactMatch = this.isChannelExactMatchPreNormalized(N));
                const k =
                    this.options.entities &&
                    this.options.entities.channels &&
                    this.options.entities.channels.searchPreviousNames,
                  J = $.previous_names && $.previous_names.length;
                let ee = !1;
                if (k && J) {
                  var ne;
                  const pe =
                    $ == null ||
                    (ne = $.previous_names) === null ||
                    ne === void 0
                      ? void 0
                      : ne.map((ge) => ({
                          score: this.matcher.normalizeAndScore(ge),
                          name: ge,
                        }));
                  (w.previousNameScores = pe),
                    (ee = (0, s.A)(pe, (ge) => ge.score <= this.fuzzyLimit));
                  const Me = ee && L > this.fuzzyLimit;
                  let ke;
                  if (Me) {
                    const ge = (0, i.A)(pe, "score");
                    ke = ge && ge.name;
                  }
                  w.bestPreviousNameMatch = ke;
                }
                return (
                  L <= this.fuzzyLimit || ee
                    ? Z.push(w)
                    : this.rawQuery === $.id &&
                      Z.push({
                        item: $,
                        score: 0,
                        id: $.id,
                      }),
                  Z
                );
              }, []);
            }
            filterTeams(Ee, be) {
              let Ce =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : t.A;
              return be.reduce((Z, $) => {
                if ((0, D.Zx)($) || this.shouldFilterItem($, Ce)) return Z;
                if (!this.query && this.allowEmptyQuery)
                  return (
                    Z.push({
                      item: $,
                      score: 0,
                      id: $.id,
                    }),
                    Z
                  );
                const N = this.matcher.normalizeAndScore((0, D.F1)($)),
                  L = {
                    item: $,
                    score: N,
                    id: $.id,
                  };
                return (
                  this.preferExactMatch &&
                    (L.isExactMatch = this.isTeamExactMatch($)),
                  N <= this.fuzzyLimit && Z.push(L),
                  Z
                );
              }, []);
            }
            filterUserGroups(Ee, be) {
              let Ce =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : t.A;
              return be.reduce((Z, $) => {
                if ((0, P.Zx)($) || this.shouldFilterItem($, Ce)) return Z;
                if (!this.query && this.allowEmptyQuery)
                  return (
                    Z.push({
                      item: $,
                      score: 0,
                      id: $.id,
                    }),
                    Z
                  );
                const N = this.scoreUserGroupName($),
                  L = {
                    item: $,
                    score: N,
                    id: $.id,
                  };
                return (
                  this.preferExactMatch &&
                    (L.isExactMatch = this.isUsergroupExactMatch($)),
                  N <= this.fuzzyLimit && Z.push(L),
                  Z
                );
              }, []);
            }
            scoreUserGroupName(Ee) {
              let be =
                  arguments.length > 1 && arguments[1] !== void 0
                    ? arguments[1]
                    : this.matcher,
                Ce = 1 / 0,
                Z = 1 / 0;
              const $ = (0, P.TZ)(Ee) || (0, P.ue)(Ee).toLocaleLowerCase(),
                N = (0, P.x_)(Ee, {
                  includeAtSign: !1,
                });
              return (
                (Ce = be.normalizeAndScore($)),
                N && (Z = be.normalizeAndScore(N)),
                Math.min(Ce, Z)
              );
            }
            getSubQueryMatchers() {
              return this.query
                .split(/[,| ]/)
                .filter((be) => !!be)
                .map((be) => {
                  const Ce = be.charAt(0) === "@" ? be.substring(1) : be;
                  return new U.A(Ce, {
                    fuzzyLimit: this.fuzzyLimit,
                  });
                });
            }
            filterMpims(Ee, be) {
              let Ce =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : t.A;
              return be.reduce((Z, $) => {
                if (this.shouldFilterItem($, Ce)) return Z;
                if (!this.query && this.allowEmptyQuery)
                  return (
                    Z.push({
                      item: $,
                      score: 0,
                      id: $.id,
                    }),
                    Z
                  );
                const N = (0, l.Ug)($);
                if (!N) return Z;
                const L = N.map((ke) => (0, ae.nv)(Ee, ke)).filter(
                    (ke) => !(0, p.fy)(ke) && !(0, p.Zx)(ke)
                  ),
                  w = {},
                  k = {},
                  J = [];
                let ee = 0;
                const ne = this.getSubQueryMatchers();
                for (const ke of ne) {
                  const ge = [];
                  let fe = 1 / 0;
                  for (const re of L) {
                    const { score: le, scoreDetails: Re } = this.scoreMember(
                        re,
                        ke
                      ),
                      ye = w == null ? void 0 : w[re.id];
                    le < (ye !== void 0 ? ye : 1 / 0) &&
                      ((w[re.id] = le),
                      (k[re.id] = {
                        score_details: Re,
                      })),
                      ge.push({
                        id: re.id,
                        score: le,
                      }),
                      le < fe && (fe = le);
                  }
                  J.push(ge), (ee += fe);
                }
                let pe;
                isFinite(ee)
                  ? (pe = (0, d.A)(Object.values(w).filter(isFinite)))
                  : (pe = ee);
                const Me = {
                  id: $.id,
                  item: $,
                  score: pe,
                  scoreDetailsByMember: k,
                  subqueryScoresByMember: J,
                };
                return (
                  pe <= this.fuzzyLimit
                    ? Z.push(Me)
                    : this.rawQuery === $.id &&
                      Z.push({
                        item: $,
                        score: 0,
                        id: $.id,
                      }),
                  Z
                );
              }, []);
            }
            filterIms(Ee, be) {
              let Ce =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : t.A;
              return be.reduce((Z, $) => {
                if (this.shouldFilterItem($, Ce)) return Z;
                const N = (0, v.e)($);
                if (!N) return Z;
                const L = (0, ae.nv)(Ee, N);
                if ((0, p.Zx)(L)) return Z;
                if (!this.query && this.allowEmptyQuery)
                  return (
                    Z.push({
                      item: $,
                      score: 0,
                      id: $.id,
                    }),
                    Z
                  );
                const { score: w, scoreDetails: k } = this.scoreMember(L),
                  J = {
                    item: $,
                    score: w,
                    scoreDetails: k,
                    id: $.id,
                  };
                return (
                  !this.avoidExactMatchForMembers &&
                    this.preferExactMatch &&
                    ((J.isExactMatch = this.isMemberExactMatch(L)),
                    (J.exactMatchDetails = this.getMemberExactMatchDetails(L))),
                  w <= this.fuzzyLimit
                    ? Z.push(J)
                    : this.rawQuery === $.id &&
                      Z.push({
                        item: $,
                        score: 0,
                        id: $.id,
                      }),
                  Z
                );
              }, []);
            }
            filterViews(Ee, be) {
              let Ce =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : t.A;
              return be.reduce((Z, $) => {
                if (this.shouldFilterItem($, Ce)) return Z;
                if (!this.query && this.allowEmptyQuery)
                  return (
                    Z.push({
                      item: $,
                      score: 0,
                      id: $.id,
                    }),
                    Z
                  );
                const N = this.matcher.normalizeAndScore($.name),
                  L = {
                    item: $,
                    score: N,
                    id: $.id,
                  };
                return (
                  this.preferExactMatch &&
                    (L.isExactMatch = this.isViewOrModalExact($)),
                  N <= this.fuzzyLimit && Z.push(L),
                  Z
                );
              }, []);
            }
            filterModals(Ee, be) {
              let Ce =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : t.A;
              return be.reduce((Z, $) => {
                if (this.shouldFilterItem($, Ce)) return Z;
                if (!this.query && this.allowEmptyQuery)
                  return (
                    Z.push({
                      item: $,
                      score: 0,
                      id: $.id,
                    }),
                    Z
                  );
                const N = this.matcher.normalizeAndScore($.name),
                  L = {
                    item: $,
                    score: N,
                    id: $.id,
                  };
                return (
                  this.preferExactMatch &&
                    (L.isExactMatch = this.isViewOrModalExact($)),
                  N <= this.fuzzyLimit && Z.push(L),
                  Z
                );
              }, []);
            }
            filterAppActions(Ee, be) {
              let Ce =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : t.A;
              return be.reduce((Z, $) => {
                if ((0, r.GU)($) || this.shouldFilterItem($, Ce)) return Z;
                if (!this.query && this.allowEmptyQuery)
                  return (
                    Z.push({
                      item: $,
                      score: 0,
                      id: $.id,
                    }),
                    Z
                  );
                const N = (0, c.u)($),
                  L = (0, oe.sO)(Ee, $.app_id),
                  w = !(0, r.GU)(L) && (0, u.fj)(L),
                  k = w ? [`${N} ${w}`, `${w} ${N}`] : [N],
                  J = k.map((pe) => this.matcher.normalizeAndScore(pe)),
                  ee = Math.min(...J),
                  ne = {
                    item: $,
                    score: ee,
                    id: $.id,
                  };
                return (
                  this.preferExactMatch &&
                    (ne.isExactMatch = !!(
                      this.query && k.map(R.B).includes(this.query)
                    )),
                  ee <= this.fuzzyLimit && Z.push(ne),
                  Z
                );
              }, []);
            }
            filterApps(Ee, be, Ce, Z) {
              let $ =
                arguments.length > 4 && arguments[4] !== void 0
                  ? arguments[4]
                  : t.A;
              const N = {};
              return (
                be != null &&
                  be.length &&
                  be.forEach((L) => {
                    const w = L.app_id;
                    w &&
                      !N[w] &&
                      (N[w] = {
                        id: w,
                        name: L.appName,
                      });
                  }),
                Ce != null &&
                  Ce.length &&
                  Ce.forEach((L) => {
                    const w = L == null ? void 0 : L.appId;
                    w &&
                      !N[w] &&
                      (N[w] = {
                        id: w,
                        name: L == null ? void 0 : L.appName,
                      });
                  }),
                Z != null &&
                  Z.length &&
                  Z.forEach((L) => {
                    const w = L.appId;
                    w &&
                      !N[w] &&
                      (N[w] = {
                        id: w,
                        name: L.appName,
                      });
                  }),
                this.filterShortcuts(Ee, Object.values(N), !1, $)
              );
            }
            filterShortcuts(Ee, be) {
              let Ce =
                  arguments.length > 2 && arguments[2] !== void 0
                    ? arguments[2]
                    : !1,
                Z =
                  arguments.length > 3 && arguments[3] !== void 0
                    ? arguments[3]
                    : t.A;
              return be.reduce(($, N) => {
                if ((0, r.GU)(N) || this.shouldFilterItem(N, Z)) return $;
                if (!this.query && this.allowEmptyQuery)
                  return (
                    $.push({
                      item: N,
                      score: 0,
                      id: N.id,
                    }),
                    $
                  );
                const {
                    score: L,
                    scoreDetails: w,
                    bestNameMatch: k,
                    bestNameIsExactMatch: J,
                  } = this.scoreShortcut(N, Ce),
                  ee = {
                    item: N,
                    id: N.id,
                    score: L,
                  };
                if (Ce) {
                  ee.firstWordOfRawQuery = F(this.query);
                  const ne = (0, H.A)(N, V(ee.firstWordOfRawQuery), {
                    allowPartialMatches: !1,
                  });
                  (ee.commandMatch = ne && this.isOpenedWithSlash),
                    (ee.isExactMatch = ee.commandMatch);
                }
                return (
                  (ee.scoreDetails = w),
                  (ee.bestNameMatch = k),
                  (ee.bestNameIsExactMatch = J),
                  (ee.isExactMatch = ee.isExactMatch || J),
                  (L <= this.fuzzyLimit || ee.commandMatch) && $.push(ee),
                  $
                );
              }, []);
            }
            scoreShortcut(Ee) {
              let be =
                  arguments.length > 1 && arguments[1] !== void 0
                    ? arguments[1]
                    : !1,
                Ce =
                  arguments.length > 2 && arguments[2] !== void 0
                    ? arguments[2]
                    : this.matcher;
              const Z = this.isQueryExactlySlash ? [] : Ee.aliases || [];
              let $ = (0, R.B)((0, h.fK)(Ee));
              const N = {
                name: Ce.score($),
                label: Ce.normalizeAndScore(Ee.label),
                desc: Ce.normalizeAndScore((0, h.Hv)(Ee)),
                app_name: Ce.normalizeAndScore((0, h.qA)(Ee)),
              };
              be && N.name !== void 0 && N.name > 0 && (N.name -= 1);
              let L, w, k;
              Z.forEach((pe) => {
                let Me = (0, R.B)(pe);
                !this.query.startsWith("/") &&
                  !this.query.startsWith("\uFF0F") &&
                  (Me = (0, B.O)(Me));
                const ke = Ce.score(Me);
                (Me = (0, B.O)(Me)),
                  !k && (L === void 0 || ke < L) && ((L = ke), (w = Me)),
                  this.normalizedQuery === Me && ((k = !0), (w = Me));
              }),
                L !== void 0 && isFinite(L) && (N.aliases = L);
              var J;
              const ee =
                (J = (0, n.A)(Object.values(N))) !== null && J !== void 0
                  ? J
                  : 1 / 0;
              ($ = (0, B.O)($)),
                !k &&
                  isFinite(N.name) &&
                  (L === void 0 || N.name < L) &&
                  (w = $),
                this.normalizedQuery === $ && ((k = !0), (w = $));
              const ne = Object.entries(N).reduce((pe, Me) => {
                let [ke, ge] = Me;
                return isFinite(ge) && (pe[ke] = ge), pe;
              }, {});
              return {
                score: ee,
                scoreDetails: ne,
                bestNameMatch: w,
                bestNameIsExactMatch: k,
              };
            }
            filterWorkflowTriggers(Ee, be) {
              return be.reduce((Ce, Z) => {
                if (!this.query && this.allowEmptyQuery)
                  return (
                    Ce.push({
                      item: Z,
                      score: 0,
                      id: Z.id,
                    }),
                    Ce
                  );
                const $ = this.scoreWorkflowTrigger(Z),
                  N = {
                    item: Z,
                    score: $,
                    id: Z.id,
                  };
                return (
                  this.preferExactMatch &&
                    (N.isExactMatch = this.isTriggerExactMatch(Z)),
                  $ <= this.fuzzyLimit && Ce.push(N),
                  Ce
                );
              }, []);
            }
            scoreWorkflowTrigger(Ee) {
              let be =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : this.matcher;
              var Ce;
              const Z = {
                name: be.normalizeAndScore(Ee.name),
                description: be.normalizeAndScore(Ee.description),
                appName: be.normalizeAndScore(
                  (Ce = Ee.workflow.app) === null || Ce === void 0
                    ? void 0
                    : Ce.name
                ),
              };
              var $;
              return ($ = (0, n.A)(Object.values(Z))) !== null && $ !== void 0
                ? $
                : 1 / 0;
            }
            filterBroadcastKeywords(Ee, be) {
              let Ce =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : t.A;
              return be.reduce((Z, $) => {
                if (this.shouldFilterItem($, Ce)) return Z;
                if (!this.query && this.allowEmptyQuery)
                  return (
                    Z.push({
                      item: $,
                      score: 0,
                      id: $.id,
                    }),
                    Z
                  );
                const N = this.scoreBroadcastKeyword($),
                  L = {
                    item: $,
                    score: N,
                    id: $.id,
                  };
                return (
                  this.preferExactMatch &&
                    (L.isExactMatch = this.isBroadcastKeywordExactMatch($)),
                  N <= this.fuzzyLimit && Z.push(L),
                  Z
                );
              }, []);
            }
            scoreBroadcastKeyword(Ee) {
              let be =
                  arguments.length > 1 && arguments[1] !== void 0
                    ? arguments[1]
                    : this.matcher,
                Ce = 1 / 0,
                Z = 1 / 0;
              const $ = be.normalizeAndScore(Ee.name);
              return (
                Ee.id === "BKchannel" && (Ce = be.normalizeAndScore("group")),
                Ee.ms_name !== Ee.name &&
                  (Z = be.normalizeAndScore(Ee.ms_name)),
                Math.min($, Z, Ce)
              );
            }
            filterEmoji(Ee, be) {
              let Ce =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : t.A;
              const Z = [];
              return (
                be.forEach(($) => {
                  if (this.shouldFilterItem($, Ce)) return;
                  if (!this.query && this.allowEmptyQuery) {
                    var N;
                    Z.push({
                      item: $,
                      emojiScore: 0,
                      emojiMatchIndices: [],
                      score: 0,
                      id: (N = $.id) !== null && N !== void 0 ? N : $.name,
                    });
                    return;
                  }
                  var L;
                  const w = (L = I($)) !== null && L !== void 0 ? L : [];
                  let k = 1 / 0,
                    J,
                    ee,
                    ne,
                    pe,
                    Me,
                    ke;
                  w.forEach((ye) => {
                    let { name: Te, displayName: De } = ye;
                    if (Te) {
                      const Ue = (0, R.B)(Te),
                        Ke = this.scoreEmojiName(Ue);
                      (Ke.score < k || k === 1 / 0) &&
                        ((k = Ke.score),
                        (J = Ke.matchIndices),
                        (ee = Te),
                        (ne = Te),
                        (Me = Ke.queryLengthRatio),
                        (ke = Ke.totalComboBreaks),
                        (pe =
                          this.query === Ue ||
                          (Te === "ok_hand" && this.query === "ok")));
                    }
                    if (De && De !== Te) {
                      const Ue = (0, R.B)(De),
                        Ke = this.scoreEmojiName(Ue);
                      (Ke.score < k || k === 1 / 0) &&
                        ((k = Ke.score),
                        (J = Ke.matchIndices),
                        (ee = De),
                        (ne = Te),
                        (Me = Ke.queryLengthRatio),
                        (ke = Ke.totalComboBreaks),
                        (pe = this.query === Ue));
                    }
                  });
                  const ge =
                      this.options &&
                      this.options.entities &&
                      this.options.entities.emoji &&
                      this.options.entities.emoji.matchKeywords,
                    fe = $.keywords,
                    re = !!(fe && fe.length && Array.isArray(fe));
                  fe &&
                    fe.length &&
                    !Array.isArray(fe) &&
                    (0, b.Ay)({
                      state: Ee,
                    }).error(
                      "https://slack.zendesk.com/agent/tickets/2393782",
                      `Emoji keywords for ${$.name} is not an array - ${$.keywords}`
                    );
                  let le = !1;
                  if (
                    (k === 1 / 0 &&
                      ge &&
                      re &&
                      ((le = $.keywords.some(
                        (ye) => this.matcher.normalizeAndScore(ye) < 1 / 0
                      )),
                      le && (ee = $ && ($.displayName || $.name))),
                    k !== 1 / 0 || le)
                  ) {
                    const ye = (0, o.A)(w, (Ue) => {
                        let { name: Ke } = Ue;
                        return Ke === ne;
                      }),
                      Te = ye && ye.displayName;
                    var Re;
                    const De = {
                      item: $,
                      score: k,
                      emojiScore: k,
                      emojiBestNameMatch: ee,
                      emojiBestNameMatchCanonical: ne,
                      emojiBestNameMatchLocalized: Te,
                      emojiMatchIndices: J,
                      emojiQueryLengthRatio: Me,
                      emojiTotalComboBreaks: ke,
                      id: (Re = $.id) !== null && Re !== void 0 ? Re : $.name,
                    };
                    this.preferExactMatch &&
                      ((De.isExactMatch = pe), (De.isEmojiExactMatch = pe)),
                      Z.push(De);
                  }
                }),
                Z
              );
            }
            scoreEmojiName(Ee) {
              const be = {
                score: 1 / 0,
                matchIndices: [],
                queryLengthRatio: 0,
                totalComboBreaks: null,
              };
              if (!Ee) return be;
              if (Ee === "ok_hand" && this.query === "ok")
                return {
                  score: 0,
                  matchIndices: [0, 1],
                  queryLengthRatio: 1,
                  totalComboBreaks: 0,
                };
              if (x[this.query] && x[this.query].indexOf(Ee) !== -1) return be;
              const Ce = this.query.length,
                Z = [];
              let $ = 2,
                N = 5;
              Ce < 3
                ? (($ = 0), (N = 0))
                : Ce === 3
                ? (($ = 1), (N = 1))
                : Ce === 4 && ($ = 1);
              let L = 1 / 0,
                w = 0,
                k = null,
                J = Ee.indexOf(this.query);
              if ((J === -1 && (J = Ee.indexOf(this.query[0])), J !== -1)) {
                const ee = /\s+/g,
                  ne = /[-]+/g,
                  pe = this.query.replace(ee, "").replace(ne, "_"),
                  Me = Ee.replace(ne, "_"),
                  ke = pe.split("");
                k = 0;
                let ge = 0,
                  fe = 0,
                  re = !0;
                for (let le = J; le < Me.length; le++) {
                  if (Me[le] === ke[0]) {
                    if (
                      ((re = !0),
                      Z.push(le),
                      ke.shift(),
                      fe > ge && (ge = fe),
                      (fe = 0),
                      ke.length === 0)
                    )
                      break;
                  } else re && (k += 1), (re = !1), (fe += 1);
                  if (k > $)
                    return {
                      score: L,
                      matchIndices: Z,
                      queryLengthRatio: w,
                      totalComboBreaks: k,
                    };
                  if (fe > N)
                    return {
                      score: L,
                      matchIndices: Z,
                      queryLengthRatio: w,
                      totalComboBreaks: k,
                    };
                }
                if (ke.length > 0) return be;
                (w = pe.length / Me.length), (L = 1 - w), k > 0 && (L += k);
              }
              return {
                score: L,
                matchIndices: Z,
                queryLengthRatio: w,
                totalComboBreaks: k,
              };
            }
            filterFiles(Ee, be) {
              let Ce =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : t.A;
              const Z = (0, C.hq)(Ee),
                $ = (0, q.Kc)(Ee),
                N = (0, de._J)(Ee, $),
                L = (0, M.k)(Ee),
                w = N && (0, D.qR)(N),
                k = !L && !w,
                J = (0, Ae._Z)(Ee, "native_dlp_canvas") === "on";
              return be.reduce((ee, ne) => {
                var pe, Me;
                if ((0, r.GU)(ne) || (0, f.sR)(ne)) return ee;
                const ke =
                    (pe = this.options) === null ||
                    pe === void 0 ||
                    (Me = pe.entities) === null ||
                    Me === void 0
                      ? void 0
                      : Me.files,
                  ge =
                    !!(ke != null && ke.includeChannelCanvases) ||
                    !!(ke != null && ke.onlyChannelCanvases);
                if (ne && (0, f.aD)(ne) && !ge) return ee;
                const fe = ne && (0, f.CA)(ne),
                  re = ne == null ? void 0 : ne.user_team,
                  le = re ? (0, de._J)(Ee, re) : null;
                var Re;
                const Te =
                  ((Re = (0, D.Ss)(le ?? void 0)) !== null && Re !== void 0
                    ? Re
                    : re) !== $;
                if (
                  (fe && (Te || k)) ||
                  (J && (0, f.Sp)(ne)) ||
                  (ne &&
                    Z &&
                    ((ke != null && ke.onlyChannelCanvases) || k) &&
                    (0, f.wL)(ne)) ||
                  this.shouldFilterItem(ne, Ce)
                )
                  return ee;
                if (!this.query && this.allowEmptyQuery)
                  return (
                    ee.push({
                      item: ne,
                      score: 0,
                      id: ne.id,
                    }),
                    ee
                  );
                const De = this.scoreFile(Ee, ne),
                  Ue = {
                    item: ne,
                    score: De,
                    id: ne.id,
                  };
                return (
                  this.preferExactMatch &&
                    (Ue.isExactMatch = this.isFileExactMatch(ne)),
                  De <= this.fuzzyLimit && ee.push(Ue),
                  ee
                );
              }, []);
            }
            scoreFile(Ee, be) {
              let Ce =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : this.matcher;
              const Z = be.name ? Ce.normalizeAndScore(be.name) : 1 / 0,
                $ =
                  be.title && be.name !== be.title
                    ? Ce.normalizeAndScore(be.title)
                    : 1 / 0,
                L =
                  (0, Ae._Z)(Ee, "top_engaged_files_autocomplete") === "on"
                    ? (0, K.A)({
                        input: this.query,
                      }).length > 0
                    : !0,
                w =
                  be.external_url && L
                    ? Ce.normalizeAndScore(be.external_url)
                    : 1 / 0,
                k =
                  be.permalink && L
                    ? Ce.normalizeAndScore(be.permalink)
                    : 1 / 0;
              let J = 1 / 0;
              if ((0, f.aD)(be)) {
                const ee = (0, y.Iz)(be),
                  ne = (0, z.OL)(Ee, ee);
                if (ne) {
                  const pe = (0, R.B)(
                    (0, l.SB)(Ee, ne, {
                      publicChannelIncludeHashSign: !1,
                    })
                  );
                  J = this.matcher.score(pe);
                }
              }
              return Math.min(Z, $, w, k, J);
            }
            filterLists(Ee, be) {
              let Ce =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : t.A;
              return be.reduce((Z, $) => {
                if (this.shouldFilterItem($, Ce)) return Z;
                if (!this.query && this.allowEmptyQuery)
                  return (
                    Z.push({
                      item: $,
                      score: 0,
                      id: $.id,
                    }),
                    Z
                  );
                const N = this.scoreList($),
                  L = {
                    item: $,
                    score: N,
                    id: $.id,
                  };
                return (
                  this.preferExactMatch &&
                    (L.isExactMatch = this.isListExactMatch($)),
                  N <= this.fuzzyLimit && Z.push(L),
                  Z
                );
              }, []);
            }
            scoreList(Ee) {
              return (
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : this.matcher
              ).normalizeAndScore(Ee.title);
            }
            filterListRecords(Ee, be) {
              let Ce =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : t.A;
              return be.reduce((Z, $) => {
                if (this.shouldFilterItem($, Ce) || !$.name || !$.listTitle)
                  return Z;
                if (!this.query && this.allowEmptyQuery)
                  return (
                    Z.push({
                      item: $,
                      score: 0,
                      id: $.id,
                    }),
                    Z
                  );
                const N = this.scoreListRecord($),
                  L = {
                    item: $,
                    score: N,
                    id: $.id,
                  };
                return (
                  this.preferExactMatch &&
                    (L.isExactMatch = this.isListRecordExactMatch($)),
                  N <= this.fuzzyLimit && Z.push(L),
                  Z
                );
              }, []);
            }
            scoreListRecord(Ee) {
              return (
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : this.matcher
              ).normalizeAndScore(Ee.name);
            }
            filterChannelSections(Ee, be) {
              let Ce =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : t.A;
              return be.reduce((Z, $) => {
                if (this.shouldFilterItem($, Ce)) return Z;
                const N = (0, S.v2)(Ee, $),
                  L = this.matcher.normalizeAndScore(N),
                  w = {
                    item: $,
                    score: L,
                    id: $.id,
                  };
                return !this.query && this.allowEmptyQuery
                  ? (Z.push(w), Z)
                  : (L <= this.fuzzyLimit && Z.push(w), Z);
              }, []);
            }
            shouldFilterItem(Ee, be) {
              return be(Ee) === !1 || this.filter(Ee) === !1;
            }
            getMemberExactMatchDetails(Ee) {
              const be = {},
                Ce = (0, O.j_)(Ee),
                Z = (0, O.sJ)(Ee);
              return (
                (be.real_name = Ce === this.query),
                (be.display_name = Z === this.query),
                this.shouldMatchEmail &&
                  (be.email = (0, O.ZL)(Ee) === this.query),
                be
              );
            }
            isMemberExactMatch(Ee) {
              return !this.query || !this.query.length
                ? !1
                : (0, s.A)(this.getMemberExactMatchDetails(Ee), Boolean);
            }
            isChannelExactMatchPreNormalized(Ee) {
              return !this.query || !this.query.length ? !1 : Ee === this.query;
            }
            isFileExactMatch(Ee) {
              if (!this.query || !this.query.length) return !1;
              var be, Ce;
              return (
                (0, R.B)(Ee.name) === this.query ||
                (0, R.B)(Ee.title) === this.query ||
                (0, R.B)(
                  (be = Ee.external_url) !== null && be !== void 0 ? be : void 0
                ) === this.query ||
                (0, R.B)(
                  (Ce = Ee.permalink) !== null && Ce !== void 0 ? Ce : void 0
                ) === this.query
              );
            }
            isListExactMatch(Ee) {
              return !this.query || !this.query.length
                ? !1
                : (0, R.B)(Ee.title) === this.query;
            }
            isListRecordExactMatch(Ee) {
              return !this.query || !this.query.length
                ? !1
                : (0, R.B)(Ee.name) === this.query;
            }
            isTeamExactMatch(Ee) {
              return !this.query || !this.query.length
                ? !1
                : (0, R.B)((0, D.F1)(Ee)) === this.query;
            }
            isUsergroupExactMatch(Ee) {
              return !this.query || !this.query.length
                ? !1
                : (0, R.B)((0, P.x_)(Ee)) === this.query ||
                    (0, R.B)((0, P.ue)(Ee)) === this.query;
            }
            isTriggerExactMatch(Ee) {
              return !this.query || !this.query.length
                ? !1
                : (0, R.B)(Ee.name) === this.query;
            }
            isBroadcastKeywordExactMatch(Ee) {
              return !this.query || !this.query.length
                ? !1
                : (0, R.B)(Ee.name) === this.query ||
                    (0, R.B)(Ee.ms_name) === this.query;
            }
            isViewOrModalExact(Ee) {
              return !this.query || !this.query.length
                ? !1
                : (0, R.B)(Ee.name) === this.query;
            }
            filterHelpArticles(Ee, be) {
              const Z = be
                .reduce(($, N) => {
                  const L = (0, R.B)(N.title),
                    w = this.substringMatcher.normalizeAndScore(N.title);
                  return w > this.fuzzyLimit
                    ? $
                    : $.concat({
                        item: {
                          ...N,
                          id: String(N.id),
                        },
                        score: w,
                        isExactMatch: L === this.query,
                        id: String(N.id),
                      });
                }, [])
                .sort(($, N) => $.score - N.score);
              return Z.slice(0, Math.min(5, Z.length));
            }
            filterSalesListViews(Ee, be) {
              return be.reduce((Z, $) => {
                const N = $.label;
                if (!N) return Z;
                const L = (0, R.B)(N),
                  w = this.substringMatcher.normalizeAndScore(L);
                if (w > this.fuzzyLimit) return Z;
                const k = $.id;
                return Z.concat({
                  item: {
                    ...$,
                    id: k,
                    name: N,
                  },
                  score: w,
                  isExactMatch: L === this.query,
                  id: k,
                });
              }, []);
            }
            constructor({
              query: Ee = "",
              options: be = {
                entities: {},
              },
            }) {
              var Ce, Z, $, N, L, w, k, J, ee, ne, pe, Me, ke;
              (this.options = be),
                (this.rawQuery = Ee),
                (this.query = (0, R.B)(Ee));
              var ge;
              (this.fuzzyLimit =
                (ge = this.options.fuzzyLimit) !== null && ge !== void 0
                  ? ge
                  : 3),
                (this.allowEmptyQuery = !!this.options.allowEmptyQuery),
                (this.preferExactMatch = !!(
                  this.options.sort && this.options.sort.preferExactMatch
                )),
                (this.avoidExactMatchForMembers = !!(
                  !(
                    (Ce = this.options) === null ||
                    Ce === void 0 ||
                    (Z = Ce.sort) === null ||
                    Z === void 0
                  ) && Z.avoidExactMatchForMembers
                )),
                (this.selfFirst = !!(
                  !(
                    ($ = this.options) === null ||
                    $ === void 0 ||
                    (N = $.sort) === null ||
                    N === void 0
                  ) && N.selfFirst
                )),
                (this.filter = this.options.filter || t.A),
                (this.shouldMatchEmail =
                  (0, a.A)(this.options, "entities.members.matchEmailField") ||
                  (0, a.A)(this.options, "entities.channels.matchEmailField")),
                (this.queryIsMaybeSelf = (0, G.t)(Ee)),
                (this.normalizedQuery = this.query),
                !(
                  (L = this.options) === null ||
                  L === void 0 ||
                  (w = L.entities) === null ||
                  w === void 0 ||
                  (k = w.shortcuts) === null ||
                  k === void 0
                ) &&
                  k.queryStartsWithSlash &&
                  (this.query = V(this.query)),
                (this.matcher = new U.A(this.query, {
                  fuzzyLimit: this.fuzzyLimit,
                  fuzzyJumpLimit: this.options.fuzzyJumpLimit,
                  fuzzyCJK: this.options.fuzzyCJK,
                })),
                (this.forwardOnlyMatcher = new U.A(this.query, {
                  fuzzyLimit: this.fuzzyLimit,
                  fuzzyJumpLimit: this.options.fuzzyJumpLimit,
                  fuzzyCJK: this.options.fuzzyCJK,
                  searchForwardOnly: this.options.fuzzyEmailSearchForwardOnly,
                })),
                (this.substringMatcher = new U.A(this.query, {
                  fuzzyLimit: this.fuzzyLimit,
                  fuzzyJumpLimit: this.options.fuzzyJumpLimit,
                  fuzzyCJK: this.options.fuzzyCJK,
                  substringsOnly: !0,
                })),
                (this.isOpenedWithSlash = !!(
                  !(
                    (J = this.options) === null ||
                    J === void 0 ||
                    (ee = J.entities) === null ||
                    ee === void 0 ||
                    (ne = ee.shortcuts) === null ||
                    ne === void 0
                  ) && ne.isOpenedWithSlash
                )),
                (this.isQueryExactlySlash = !!(
                  !(
                    (pe = this.options) === null ||
                    pe === void 0 ||
                    (Me = pe.entities) === null ||
                    Me === void 0 ||
                    (ke = Me.shortcuts) === null ||
                    ke === void 0
                  ) && ke.isQueryExactlySlash
                ));
            }
          },
          "SearcherMatcher"
        );
      },
      6897117289: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => O,
        });
        var t = e(3367239067),
          n = e(1703559452),
          s = e(7264301376),
          i = e(129753175),
          d = e(9884588328),
          o = e(1407713935),
          a = e(6007206761),
          r = e(6495946979),
          c = e(8170643398),
          u = e(3534324375),
          l = e(6839188756),
          m = e(9190452268),
          v = e(8701485242),
          E = e(181849556),
          T = e(220244708);
        class g {
          preprocessText(h, D) {
            if (typeof h != "string")
              throw new TypeError("Input text must be a string.");
            let P = h.replace(/\s+?/g, "").toLowerCase();
            return D && (P = P.replace(/[-_]/g, "")), Array.from(P);
          }
          extractNGrams(h) {
            if (!Array.isArray(h) || h.some((K) => typeof K != "string"))
              throw new TypeError("textChars must be an array of strings.");
            const D = new Map(),
              P = h.length,
              [S, b] = this.ngramRange;
            for (let K = S; K <= b; K++)
              for (let x = 0; x <= P - K; x++) {
                const B = h.slice(x, x + K).join(""),
                  U = x + 1,
                  R = D.get(B) || [];
                R.push(U), D.set(B, R);
              }
            return D;
          }
          computeTermFrequencies(h) {
            if (!(h instanceof Map))
              throw new TypeError("ngrams must be a Map.");
            const D = new Map();
            return (
              h.forEach((P, S) => {
                if (!Array.isArray(P) || P.some((K) => typeof K != "number"))
                  throw new TypeError("Positions must be arrays of numbers.");
                const b = P.reduce((K, x) => K + 1 / x, 0);
                D.set(S, b);
              }),
              D
            );
          }
          cosineSimilarity(h, D) {
            if (!(h instanceof Map) || !(D instanceof Map))
              throw new TypeError(
                "tfQuery and tfCandidate must be Map instances."
              );
            const P = new Set([...h.keys(), ...D.keys()]);
            let S = 0,
              b = 0,
              K = 0;
            return (
              P.forEach((B) => {
                const U = h.get(B) || 0,
                  R = D.get(B) || 0;
                (S += U * R), (b += U * U), (K += R * R);
              }),
              b === 0 || K === 0 ? 0 : S / (Math.sqrt(b) * Math.sqrt(K))
            );
          }
          computeSimilarity(h, D) {
            if (typeof h != "string" || typeof D != "string") return 0;
            const S = /[-_]/.test(h),
              b = this.preprocessText(h, !1),
              K = this.preprocessText(D, !S),
              x = this.extractNGrams(b),
              B = this.extractNGrams(K),
              U = this.computeTermFrequencies(x),
              R = this.computeTermFrequencies(B);
            return this.cosineSimilarity(U, R);
          }
          constructor(h = [2, 3]) {
            if (
              !Array.isArray(h) ||
              h.length !== 2 ||
              typeof h[0] != "number" ||
              typeof h[1] != "number" ||
              h[0] > h[1] ||
              h[0] < 1
            )
              throw new Error(
                "ngramRange must be an array of two numbers where minN >= 1 and minN <= maxN."
              );
            this.ngramRange = h;
          }
        }
        _(g, "PositionAwareFuzzyMatcher");
        var I = e(5795074931),
          f = e(9101533895),
          y = e(4761125736),
          M = e(8276911661);
        const p = {
          starredChannel: 10,
          memberOfThisChannel: 25,
          archivedChannel: -50,
          deactivatedMember: -50,
          mpimWithDeactivatedMember: -50,
          channelFromAnotherTeam: -15,
          notInChannel: -25,
          userGroupOrKeyword: -25,
          fuzzyMatch: 50,
          emojiMatch: 150,
          exactMatch: 100,
          matchesPreviousName: -50,
          workflowAssociatedWithChannel: 250,
          popularEmoji: 1,
          isSelf: 250,
        };
        let O = _(
          class {
            sort(h, D) {
              var P;
              const S = (0, m.Cy)({
                state: h,
              });
              S.mark("modern-searcher-sorting-mark");
              const {
                  members: b,
                  channels: K,
                  mpims: x,
                  ims: B,
                  teams: U,
                  userGroups: R,
                  emoji: G,
                  broadcastKeywords: H,
                  views: F,
                  modals: V,
                  appActions: X,
                  channelSections: q,
                  emails: oe,
                  files: z,
                  lists: Ae,
                  listRecords: ae,
                  slashCommands: de,
                  slackGlobalActions: ve,
                  quipShortcutCommands: Se,
                  canvasAiSuggestions: Ee,
                  channelActions: be,
                  fakeGlobalActions: Ce,
                  callActions: Z,
                  apps: $,
                  helpArticles: N,
                  workflowTriggers: L,
                  salesListViews: w,
                } = D,
                k = {
                  memberChannels: [],
                  nonmemberChannels: [],
                  archivedChannels: [],
                };
              K &&
                K.reduce(
                  (ke, ge) =>
                    (0, a.F)(ge.item)
                      ? (ke.archivedChannels.push(ge), ke)
                      : ((0, r.bl)(ge.item)
                          ? ke.memberChannels.push(ge)
                          : ke.nonmemberChannels.push(ge),
                        ke),
                  k
                );
              let J = [
                  ...(b || []),
                  ...k.memberChannels,
                  ...(x || []),
                  ...(B || []),
                  ...(G || []),
                  ...(R || []),
                  ...(H || []),
                  ...(F || []),
                  ...(V || []),
                  ...(X || []),
                  ...(q || []),
                  ...(oe || []),
                  ...(z || []),
                  ...(Ae || []),
                  ...(ae || []),
                  ...(Z || []),
                  ...(be || []),
                  ...(Ce || []),
                  ...($ || []),
                  ...(N || []),
                  ...(L || []),
                  ...(w || []),
                ],
                ee = [
                  ...k.nonmemberChannels,
                  ...(U || []),
                  ...(de || []),
                  ...(ve || []),
                  ...(Se || []),
                  ...(Ee || []),
                ],
                ne = k.archivedChannels;
              const pe = this.getSortFuzzyFunction(h, {
                localeAware: !0,
              });
              this.options.flat ||
                ((J = this.precomputeMatchNames(h, J).sort(pe)),
                (ee = this.precomputeMatchNames(h, ee).sort(pe)),
                (ne = this.precomputeMatchNames(h, ne).sort(pe)));
              let Me = [...J, ...ee, ...ne];
              return (
                this.options.flat && Me.sort(pe),
                this.options.preferExactMatch &&
                  (Me = [...(0, t.A)(Me, (ge) => ge.isExactMatch), ...Me]),
                this.options.frecency &&
                  ((this.options.normalize = !0),
                  S.mark("modern-searcher-frecency-sort-mark"),
                  this.options.modelOnly
                    ? (Me = (0, E.jW)(h, {
                        query: this.query,
                        list: Me,
                        bonusPoints: this.getFrecencyBonusPointsFunction(h),
                      }))
                    : (Me = (0, E.Zh)(h, {
                        query: this.query,
                        list: Me,
                        bonusPoints: this.getFrecencyBonusPointsFunction(h),
                      })),
                  S.measureAndClear(
                    "modern-searcher-frecency-sort-mark",
                    "modern-searcher-frecency-sort"
                  )),
                this.options.selfFirst &&
                  !(!((P = Me[0]) === null || P === void 0) && P.isSelf) &&
                  (Me = [...(0, t.A)(Me, (ge) => ge.isSelf), ...Me]),
                S.measureAndClear(
                  "modern-searcher-sorting-mark",
                  "modern-searcher-sorting"
                ),
                Me
              );
            }
            precomputeMatchNames(h, D) {
              return D.map((P) => ({
                ...P,
                name: this.getNameForComparison(h, P),
              }));
            }
            getSortFuzzyFunction(h, D) {
              let { localeAware: P } = D;
              return (S, b) => {
                if ((0, o.yz)(S.item) && !(0, o.yz)(b.item)) return 1;
                if (
                  ((0, o.yz)(b.item) && !(0, o.yz)(S.item)) ||
                  ((0, o.LI)(S.item) && !(0, o.LI)(b.item))
                )
                  return -1;
                if ((0, o.LI)(b.item) && !(0, o.LI)(S.item)) return 1;
                if (!(0, o.yz)(S.item) && !(0, o.yz)(b.item)) {
                  const H = S.score - b.score;
                  if (H !== 0) return H;
                }
                if ((0, o.yz)(S.item) && (0, o.yz)(b.item)) {
                  const H = S.score - b.score;
                  if (H !== 0) return H;
                  var K, x;
                  const F =
                    ((K = (0, d.N4)(S.item)) !== null && K !== void 0 ? K : 0) -
                    ((x = (0, d.N4)(b.item)) !== null && x !== void 0 ? x : 0);
                  if (F !== 0) return F;
                }
                var B;
                const U = (B = S.name) !== null && B !== void 0 ? B : "";
                var R;
                const G = (R = b.name) !== null && R !== void 0 ? R : "";
                return P ? (0, v.Ay)(U, G) : U > G ? 1 : G > U ? -1 : 0;
              };
            }
            getFrecencyBonusPointsFunction(h) {
              return (D) => {
                var P, S;
                const { item: b } = D,
                  K =
                    (0, y._Z)(h, "position_aware_fuzzy_match") === "treatment",
                  x = {};
                if ((0, o.yz)(b)) {
                  if (
                    ((x.isMpim = 0), this.options.preferMpimsWithActiveMembers)
                  ) {
                    const B = (0, d.Ug)(b);
                    if (!B) return x;
                    const U = B.map((R) => (0, M.nv)(h, R));
                    (0, n.A)(U, (R) => (0, c.oy)(R) || (0, c.eJ)(R)) &&
                      (x.isMpimWithDeactivatedMember =
                        p.mpimWithDeactivatedMember);
                  }
                  return x;
                }
                if (
                  (D.isExactMatch
                    ? ((x.isExactMatch = p.exactMatch),
                      D.isEmojiExactMatch &&
                        (x.isEmojiExactMatch = p.exactMatch))
                    : D.emojiScore
                    ? K
                      ? (x.emojiScoreBonus =
                          this.calculateContinuousFuzzyBonusPoints(
                            D,
                            p.emojiMatch
                          ))
                      : (x.emojiScoreBonus =
                          this.calculateNormalizedFuzzyBonusPoints(
                            D,
                            "emojiScore",
                            p.emojiMatch
                          ))
                    : (0, a.F)(b) ||
                      (0, c.oy)(b) ||
                      (0, c.eJ)(b) ||
                      (K
                        ? (x.fuzzyScoreBonus =
                            this.calculateContinuousFuzzyBonusPoints(
                              D,
                              p.fuzzyMatch
                            ))
                        : (x.fuzzyScoreBonus =
                            this.calculateNormalizedFuzzyBonusPoints(
                              D,
                              "score",
                              p.fuzzyMatch
                            ))),
                  D.bestPreviousNameMatch &&
                    (x.onlyMatchesPreviousName = p.matchesPreviousName),
                  this.options.preferChannelMembers &&
                    b.presence &&
                    this.options.currentChannel &&
                    (0, T.B)(h, b, this.options.currentChannel) &&
                    (x.isMemberOfThisChannel = p.memberOfThisChannel),
                  (0, o.jq)(b) &&
                    (0, d.m2)(h, b) &&
                    (x.isStarred = p.starredChannel),
                  (0, c.NB)(b))
                ) {
                  const B = (0, f.Pu)(h, b.id);
                  B && (0, d.m2)(h, B) && (x.isStarred = p.starredChannel);
                }
                return (
                  b.is_emoji &&
                    (b.name === "thumbsup" || b.name === "point_up") &&
                    (x.isPopularEmojiVariant = p.popularEmoji),
                  this.options.selfFirst &&
                    (0, c.fy)(b) &&
                    (x.isSelf = p.isSelf),
                  this.options.preferChannelWorkflows &&
                    b.type === "channel_action" &&
                    b.channelId ===
                      ((P = this.options) === null ||
                      P === void 0 ||
                      (S = P.currentChannel) === null ||
                      S === void 0
                        ? void 0
                        : S.id) &&
                    (x.isWorkflowAssociatedWithChannel =
                      p.workflowAssociatedWithChannel),
                  ((0, o.rW)(b) || (0, o.Zp)(b)) &&
                    ((0, a.F)(b) && (x.isArchived = p.archivedChannel),
                    (0, o.rW)(b) &&
                      this.options.preferChannelsUserBelongsTo &&
                      !(0, a.F)(b) &&
                      !(0, r.bl)(b) &&
                      (x.isNotChannelMember = p.notInChannel),
                    (0, I.u8)(h) &&
                      (0, d.lo)(b) &&
                      (x.isChannelFromAnotherTeam = p.channelFromAnotherTeam)),
                  (0, c.NB)(b) &&
                    ((0, c.oy)(b) || (0, c.eJ)(b)) &&
                    (x.isDeactivatedMember = p.deactivatedMember),
                  (b.is_usergroup || b.is_broadcast_keyword) &&
                    (x.isUserGroupOrKeyword = p.userGroupOrKeyword),
                  x
                );
              };
            }
            calculateNormalizedFuzzyBonusPoints(h, D, P) {
              const S = h[D];
              if (!(0, s.A)(S)) return 0;
              const b = 0.5 ** S;
              return Math.round(P * b);
            }
            calculateContinuousFuzzyBonusPoints(h, D) {
              return (
                this.positionAwareFuzzyMatcher.computeSimilarity(
                  this.query,
                  h.item.name
                ) * D
              );
            }
            getNameForComparison(h, D) {
              let P;
              const S = D.item;
              return (
                (0, o.yz)(S)
                  ? (P = S.name_normalized)
                  : (0, o.mz)(S)
                  ? (P = (0, i.A)(
                      (0, d.SB)(h, S, {
                        publicChannelIncludeHashSign: !1,
                      })
                    ))
                  : (0, c.NB)(S)
                  ? (P = (0, u.sE)(h, S))
                  : S.is_usergroup
                  ? (P = S.handle || S.name)
                  : S.team_name
                  ? (P = (0, i.A)((0, l.F1)(S)))
                  : S.isEmail
                  ? (P = (0, i.A)(S.value))
                  : S.title
                  ? (P = S.title)
                  : (P = S.name),
                P
              );
            }
            constructor({ query: h, options: D = {} }) {
              (this.options = D),
                (this.query = h),
                (this.positionAwareFuzzyMatcher = new g([2, 3]));
            }
          },
          "SearcherSorter"
        );
      },
      9868740303: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => Me,
        });
        var t = e(8571983633),
          n = e(9746734072),
          s = e(9113979368),
          i = e(897091071),
          d = e(7715417323),
          o = e(1703559452),
          a = e(2141441167),
          r = e(5503876160),
          c = e(6422693406),
          u = e(2664504268),
          l = e(7599421656),
          m = e(3309235745),
          v = e(9552526132),
          E = e(4423055085),
          T = e(5613323535),
          g = e(1197508738),
          I = e(5455782105),
          f = e(3212336858),
          y = e(9931116838),
          M = e(411655882),
          p = e(2229186),
          O = e(1224315998),
          C = e(2689960678),
          h = e(82287009),
          D = e(9190452268),
          P = e(5770715593),
          S = e(6030318713),
          b = e(4096483543),
          K = e(6471801899),
          x = e(1917953477),
          B = e(1072784641),
          U = e(6897117289),
          R = e(8956261571),
          G = e(8847766420),
          H = e(7260478587),
          F = e(4119164726),
          V = e(6533394955),
          X = e(6451390137),
          q = e(2854654447),
          oe = e(9107158149),
          z = e(7688940281),
          Ae = e(2235302340),
          ae = e(9101533895),
          de = e(6728717861),
          ve = e(7600673124),
          Se = e(3829348308),
          Ee = e(4761125736),
          be = e(937317117),
          Ce = e(761034736),
          Z = e(4224126550),
          $ = e(9706240641),
          N = e(1031947056),
          L = e(9174292896);
        const w = (0, N.Ay)(
          "Fetch list records for lists mentions",
          (function () {
            var ke = (0, $.coroutine)(function* (ge, fe, re) {
              let { query: le } = re;
              const Re = (0, K.V3)(le);
              if (!Re) return;
              const { listTitle: ye } = Re,
                Te = (0, Z.Mr)(fe()),
                De = (0, K.xL)(Te, ye);
              if (!De) return;
              const Ue = De.id;
              yield ge(
                (0, L.D)({
                  listId: Ue,
                })
              );
            });
            return function (ge, fe, re) {
              return ke.apply(this, arguments);
            };
          })()
        );
        w.meta = {
          name: "createThunk",
          key: "createThunkfetchForMentions",
          description: "Fetch list records for lists mentions",
        };
        var k = e(4525672255),
          J = e(8276911661),
          ee = e(1835177371);
        class ne {
          search(ge) {
            let { query: fe, options: re } = ge;
            var le;
            if (
              (this.maybeStartSession(fe),
              ((0, t.A)(fe) || !fe.length) && !re.allowEmptyQuery)
            )
              return c.S.resolve(C.Ml);
            if ((0, n.A)(fe))
              return this.bulkSearch({
                queryRecords: fe,
                options: re,
              });
            const Re = (0, V.getStateByTeamId)(this.teamId),
              ye = (0, D.Cy)({
                state: Re,
              }),
              Te = (0, u.A)();
            ye.mark(`modern-searcher-search-mark-${Te}`);
            const De = (0, x.O)(fe ?? "");
            T.LI.start({
              label: T.gC.Searcher,
              id: Te,
              options: {
                teamId: (0, G.ZT)(Re),
                tags: this.getTraceTags({
                  query: De,
                  options: re,
                }),
              },
            });
            const Ue =
                (le = T.LI.get({
                  label: T.gC.Searcher,
                  id: Te,
                })) === null || le === void 0
                  ? void 0
                  : le.createChildSpan({
                      name: "searcher:search",
                    }),
              Ke = (0, m.aw)(re, m.lp, fe);
            if ((0, s.A)(Ke)) return c.S.resolve(C.Ml);
            if (
              (0, g.x)(Re) !== de.M9.ONLINE ||
              (!(re != null && re.allowEmptyQueryRemoteSearch) &&
                !De.length &&
                (0, b.A)() &&
                (0, Ee._Z)(Re, "searcher_local_empty_string") === "treatment" &&
                !re.entities.lists)
            )
              return c.S.resolve(
                this.searchLocal({
                  query: De,
                  options: Ke,
                  autoTraceId: Te,
                  parentSpanId: Ue == null ? void 0 : Ue.getId(),
                })
              );
            const Ze = this.fetchRemote({
              query: De,
              options: Ke,
              autoTraceId: Te,
              parentSpanId: Ue == null ? void 0 : Ue.getId(),
            }).then((Q) =>
              this.processFetchedEntities({
                query: De,
                data: Q,
                options: Ke,
                autoTraceId: Te,
                parentSpanId: Ue == null ? void 0 : Ue.getId(),
              })
            );
            if (Ke.tiered) {
              const Q = this.searchLocal({
                query: De,
                options: Ke,
                autoTraceId: Te,
                parentSpanId: Ue == null ? void 0 : Ue.getId(),
              });
              return (
                (Q.promise = Ze.finally(() => {
                  Ue == null || Ue.close(),
                    T.LI.stop({
                      label: T.gC.Searcher,
                      id: Te,
                    });
                })),
                c.S.resolve(Q).finally(() => {
                  ye.measureAndClear(
                    `modern-searcher-search-mark-${Te}`,
                    "modern-searcher-search-tiered"
                  );
                })
              );
            }
            return Ze.finally(() => {
              ye.measureAndClear(
                `modern-searcher-search-mark-${Te}`,
                "modern-searcher-search"
              ),
                Ue == null || Ue.close(),
                T.LI.stop({
                  label: T.gC.Searcher,
                  id: Te,
                });
            });
          }
          flattenResultsWithQueryId(ge) {
            let { returnedResults: fe, queryIds: re } = ge;
            const le = fe;
            for (let Re = 0; Re < fe.length; Re++)
              for (let ye = 0; ye < fe[Re].length; ye++)
                le[Re][ye].queryId = re[Re];
            return (0, i.A)(le);
          }
          bulkSearch(ge) {
            let { queryRecords: fe, options: re } = ge;
            const le = (0, V.getStateByTeamId)(this.teamId),
              Re = (0, D.Cy)({
                state: le,
              }),
              ye = (0, u.A)();
            Re.mark(`modern-searcher-search-mark-${ye}`);
            const Te = (0, m.aw)(re, m.lp, "");
            if ((0, s.A)(Te)) return c.S.resolve(C.Ml);
            const De = fe.map((Ve) => Ve.query),
              Ue = fe.map((Ve) => Ve.queryId),
              Ke = De.map((Ve) => (0, x.O)(Ve));
            let Ze, Q;
            if ((0, g.x)(le) !== de.M9.ONLINE)
              return (
                (Q = Ke.map((Ve) =>
                  this.searchLocal({
                    query: Ve,
                    options: Te,
                  })
                )),
                (Ze = this.flattenResultsWithQueryId({
                  returnedResults: Q,
                  queryIds: Ue,
                })),
                c.S.resolve(Ze)
              );
            const ie = this.fetchRemote({
              query: Ke,
              options: Te,
            }).then(
              (Ve) => (
                (Q = Ve.map((xe, je) =>
                  this.processFetchedEntities({
                    query: Ke[je],
                    data: xe,
                    options: Te,
                  })
                )),
                this.flattenResultsWithQueryId({
                  returnedResults: Q,
                  queryIds: Ue,
                })
              )
            );
            return Te.tiered
              ? ((Q = Ke.map((Ve) =>
                  this.searchLocal({
                    query: Ve,
                    options: Te,
                  })
                )),
                (Ze = this.flattenResultsWithQueryId({
                  returnedResults: Q,
                  queryIds: Ue,
                })),
                (Ze.promise = ie),
                c.S.resolve(Ze).finally(() => {
                  Re.measureAndClear(
                    `modern-searcher-search-mark-${ye}`,
                    "modern-searcher-search-tiered"
                  );
                }))
              : ie.finally(() => {
                  Re.measureAndClear(
                    `modern-searcher-search-mark-${ye}`,
                    "modern-searcher-search"
                  );
                });
          }
          searchLocal(ge) {
            let {
              query: fe,
              options: re,
              autoTraceId: le,
              parentSpanId: Re,
            } = ge;
            var ye;
            const Te = (0, V.getStateByTeamId)(this.teamId);
            let De = le;
            De ||
              ((De = (0, u.A)()),
              T.LI.start({
                label: T.gC.Searcher,
                id: De,
                options: {
                  teamId: (0, G.ZT)(Te),
                  tags: this.getTraceTags({
                    query: fe,
                    options: re,
                  }),
                },
              }));
            const Ue =
              (ye = T.LI.get({
                label: T.gC.Searcher,
                id: De,
              })) === null || ye === void 0
                ? void 0
                : ye.createChildSpan({
                    name: "searcher:search_local",
                    additionalSpanOptions: {
                      parentSpanId: Re,
                    },
                  });
            if (!fe.length && !re.allowEmptyQuery) return [];
            const Ke = (0, m.aw)(re, m.lp, fe);
            if ((0, s.A)(Ke)) return [];
            const Ze = (0, x.O)(fe),
              Q = this.fetchLocal({
                query: fe,
                options: Ke,
              }),
              ie = this.processFetchedEntities({
                query: Ze,
                data: Q,
                options: Ke,
                autoTraceId: De,
                parentSpanId: Ue == null ? void 0 : Ue.getId(),
              });
            return Ue == null || Ue.close(), ie;
          }
          fetchRemote(ge) {
            let {
              query: fe,
              options: re,
              autoTraceId: le,
              parentSpanId: Re,
            } = ge;
            var ye;
            const Te = (0, V.getStateByTeamId)(this.teamId),
              De =
                (ye = T.LI.get({
                  label: T.gC.Searcher,
                  id: le,
                })) === null || ye === void 0
                  ? void 0
                  : ye.createChildSpan({
                      name: "searcher:fetch_remote",
                      additionalSpanOptions: {
                        parentSpanId: Re,
                      },
                    });
            this.pendingRequests.forEach((Ye) => Ye.cancel()),
              (this.pendingRequests = []);
            const Ue = [],
              Ke = [],
              {
                channels: Ze,
                emoji: Q,
                files: ie,
                lists: Ve,
                members: xe,
                teams: je,
                userGroups: Fe,
                appActions: He,
                workflowTriggers: Oe,
              } = re.entities;
            if (xe) {
              let Ye;
              (0, n.A)(fe)
                ? (Ye = (0, V.dispatchForTeamId)(
                    this.teamId,
                    (0, m.U7)({
                      queries: fe,
                      options: re,
                    })
                  ))
                : (Ye = (0, V.dispatchForTeamId)(
                    this.teamId,
                    (0, m.QH)({
                      query: fe,
                      options: re,
                    })
                  )),
                this.pendingRequests.push(Ye),
                xe.runaway ? Ke.push(Ye) : Ue.push(Ye);
            }
            if (Ze && !(0, n.A)(fe)) {
              const Ye = (0, V.dispatchForTeamId)(
                this.teamId,
                (0, m.J6)({
                  query: fe,
                  options: re,
                })
              );
              this.pendingRequests.push(Ye),
                Ze.runaway ? Ke.push(Ye) : Ue.push(Ye);
            }
            if (Q && !(0, n.A)(fe)) {
              const Ye = (0, V.dispatchForTeamId)(
                this.teamId,
                (0, m.LR)({
                  query: fe,
                  options: re,
                })
              );
              this.pendingRequests.push(Ye),
                Q.runaway ? Ke.push(Ye) : Ue.push(Ye);
            }
            if (ie && !(0, n.A)(fe) && ((0, S.A)(fe) || fe.length > 3)) {
              const Ye = (0, V.dispatchForTeamId)(
                this.teamId,
                (0, m.cD)({
                  query: fe,
                  options: re,
                })
              );
              this.pendingRequests.push(Ye),
                ie.runaway ? Ke.push(Ye) : Ue.push(Ye);
            }
            if (Ve && !(0, n.A)(fe)) {
              const Ye = (0, V.dispatchForTeamId)(
                this.teamId,
                fe.indexOf(">") < 0
                  ? (0, k.E)({
                      query: fe,
                    })
                  : w({
                      query: fe,
                    })
              );
              this.pendingRequests.push(Ye),
                Ve.runaway ? Ke.push(Ye) : Ue.push(Ye);
            }
            if (Fe) {
              let Ye;
              (0, n.A)(fe)
                ? (Ye = (0, V.dispatchForTeamId)(
                    this.teamId,
                    (0, m.eR)({
                      queries: fe,
                      options: re,
                    })
                  ))
                : (Ye = (0, V.dispatchForTeamId)(
                    this.teamId,
                    (0, m.UC)({
                      query: fe,
                      options: re,
                    })
                  )),
                this.pendingRequests.push(Ye),
                Fe.runaway ? Ke.push(Ye) : Ue.push(Ye);
            }
            if (
              je &&
              ((0, I.k)(Te) || je.onlyExternal || je.includeExternal) &&
              !(0, n.A)(fe)
            ) {
              const Ye = (0, V.dispatchForTeamId)(
                this.teamId,
                (0, m.DF)({
                  query: fe,
                  options: re,
                })
              );
              this.pendingRequests.push(Ye),
                je.runaway ? Ke.push(Ye) : Ue.push(Ye);
            }
            if ((0, y.e)(Te) && He) {
              const Ye = (0, V.dispatchForTeamId)(this.teamId, (0, q.G)())
                .timeout(2e3)
                .catch(d.A);
              this.pendingRequests.push(Ye),
                He.runaway ? Ke.push(Ye) : Ue.push(Ye);
            }
            if (Oe && !(0, n.A)(fe)) {
              const Ye = (0, V.dispatchForTeamId)(
                this.teamId,
                (0, m.fx)({
                  query: fe,
                })
              );
              Oe.runaway ? Ke.push(Ye) : Ue.push(Ye);
            }
            return c.S.all(Ue)
              .then((Ye) => {
                let at;
                if ((0, n.A)(fe))
                  at = fe
                    .map((ct) =>
                      this.fetchLocal({
                        query: ct,
                        options: re,
                      })
                    )
                    .map((ct) => {
                      const Pt = {
                        ...ct,
                      };
                      return (Pt.remoteIds = (0, m.jl)(Ye)), Pt;
                    });
                else {
                  if (
                    ((at = this.fetchLocal({
                      query: fe,
                      options: re,
                    })),
                    (at.remoteIds = (0, m.jl)(Ye)),
                    xe && xe.onlyFromExternalWorkspaceId)
                  ) {
                    var _t, pt;
                    at.members =
                      (pt =
                        (_t = Ye.find((ct) => !!ct.members)) === null ||
                        _t === void 0
                          ? void 0
                          : _t.members) !== null && pt !== void 0
                        ? pt
                        : C.Ml;
                  }
                  const Qe = (0, o.A)((0, a.A)(at), "length");
                  if (Ke.length && !Qe)
                    return c.S.all(Ke).then(() =>
                      this.fetchLocal({
                        query: fe,
                        options: re,
                      })
                    );
                }
                return De == null || De.close(), at;
              })
              .finally(() => {
                this.pendingRequests = [];
              });
          }
          fetchLocal(ge) {
            let { query: fe, options: re } = ge;
            const le = (0, V.getStateByTeamId)(this.teamId);
            (0, m.ZD)(re);
            const Re = {},
              {
                members: ye,
                channels: Te,
                teams: De,
                userGroups: Ue,
                appActions: Ke,
                views: Ze,
                broadcastKeywords: Q,
                emoji: ie,
                files: Ve,
                lists: xe,
                channelSections: je,
                emails: Fe,
                modals: He,
                shortcuts: Oe,
                workflowTriggers: Ye,
                helpArticles: at,
                canvasAiSuggestions: _t,
              } = re.entities;
            if (
              (Te &&
                (Te.includePublic || Te.includePrivate) &&
                (Re.channels = (0, m.AC)(le, re)),
              Te && Te.includeMpims && (Re.mpims = (0, ae.FS)(le)),
              Te && Te.includeIms && (Re.ims = (0, ae._B)(le)),
              ye &&
                (Re.members = ye.onlyFromExternalWorkspaceId
                  ? C.Ml
                  : (0, J.I_)(le).filter(
                      (ct) => (0, oe.zP)(le, ct.id) && !(0, ve.y)(le, ct.id)
                    )),
              De && (Re.teams = (0, m.mi)(le, re)),
              Ue && (Re.userGroups = (0, ee.jJ)(le)),
              Ke &&
                (Re.appActions = (0, l.B)(le)
                  ? (0, X.PL)(le)
                  : (0, m.g2)(le, Ke.channel)),
              Ve && (Re.files = (0, be.Gn)(le)),
              xe &&
                (fe.indexOf(">") < 0
                  ? (Re.lists = (0, Z.C0)(le))
                  : (Re.listRecords = (0, Z.vD)(le, fe))),
              Ze && (Re.views = (0, m.mK)(le)),
              He && (Re.modals = (0, m.A$)(le)),
              Q)
            ) {
              var pt;
              const ct = Q.currentChannel ? Q.currentChannel.id : null;
              Re.broadcastKeywords =
                (!(
                  (pt = re.entities.broadcastKeywords) === null || pt === void 0
                ) &&
                  pt.includeAll) ||
                !ct
                  ? (0, M.A)()
                  : (0, p.A)(le, ct);
            }
            if (
              (ie && (Re.emoji = (0, Se.Gt)(le)),
              je && (Re.channelSections = (0, a.A)((0, Ae.jV)(le))),
              ((Oe != null && Oe.slashCommands) ||
                (Oe != null && Oe.fakeGlobalActions)) &&
                !(Oe != null && Oe.isAnnounceOnly) &&
                (Re.slashCommands = (0, l.B)(le)
                  ? (0, h.A_)(le, Oe.channel, !!Oe.threadTs, !0).map((ct) => ({
                      ...ct,
                      id: (0, f.Bs)(ct),
                      isSlashCommand: !0,
                    }))
                  : (0, m.lS)(le, Oe.channel, Oe.threadTs)),
              Oe != null &&
                Oe.slackGlobalActions &&
                (Re.slackGlobalActions = (0, h.Yk)(
                  le,
                  Oe.channel,
                  Oe.threadTs
                )),
              Oe != null &&
                Oe.quipShortcutCommands &&
                (Re.quipShortcutCommands = (0, F.Aw)(le, !!fe)),
              Oe != null &&
                Oe.channelActions &&
                (Re.channelActions = (0, z.fo)(le, Oe.channel)),
              Oe != null &&
                Oe.fakeGlobalActions &&
                (Re.fakeGlobalActions = (0, h.JL)(le, Oe.channel, Oe.threadTs)),
              Oe != null &&
                Oe.callActions &&
                (Re.callActions = (0, h.Uw)(
                  le,
                  Oe.channel,
                  Oe.threadTs,
                  Oe.isAnnounceOnly
                )),
              Ye)
            ) {
              const ct = (0, h.NJ)(le);
              Ye.includeAutomated
                ? (Re.workflowTriggers = ct)
                : (Re.workflowTriggers = ct.filter(
                    (Pt) => Pt.type === v.M.Shortcut
                  ));
            }
            Fe && (Re.emails = (0, m.FF)(fe));
            const Qe = (0, P.dL)(le);
            return (
              at &&
                Qe &&
                (Re.helpArticles = (0, Ce.Fb)(
                  le,
                  "searcher/fetch_all_articles"
                )),
              _t && (Re.canvasAiSuggestions = (0, H.rW)(le)),
              (0, m.S)(),
              Re
            );
          }
          processFetchedEntities(ge) {
            let {
              query: fe,
              data: re,
              options: le,
              autoTraceId: Re,
              parentSpanId: ye,
            } = ge;
            var Te, De, Ue;
            const Ke = (0, V.getStateByTeamId)(this.teamId),
              Ze =
                (Te = T.LI.get({
                  label: T.gC.Searcher,
                  id: Re,
                })) === null || Te === void 0
                  ? void 0
                  : Te.createChildSpan({
                      name: "searcher:process",
                      additionalSpanOptions: {
                        parentSpanId: ye,
                      },
                    });
            (0, m.ZD)(le);
            const Q = {},
              ie = new B.A({
                query: fe,
                options: le,
              }),
              Ve = (0, D.Cy)({
                state: Ke,
              });
            Ve.mark("modern-searcher-matching-mark");
            const xe =
              (De = T.LI.get({
                label: T.gC.Searcher,
                id: Re,
              })) === null || De === void 0
                ? void 0
                : De.createChildSpan({
                    name: "searcher:searcher_match",
                    additionalSpanOptions: {
                      parentSpanId: Ze == null ? void 0 : Ze.getId(),
                    },
                  });
            if (
              (re.channels &&
                (Q.channels = ie.filterChannels(
                  Ke,
                  re.channels,
                  (0, m.sr)(Ke, le.entities.channels)
                )),
              re.members &&
                (Q.members = ie.filterMembers(
                  Ke,
                  re.members,
                  (0, m.bE)(Ke, le.entities.members)
                )),
              re.emails &&
                re.members &&
                !(
                  !(Q == null || (Ue = Q.members) === null || Ue === void 0) &&
                  Ue.length
                ) &&
                (Q.emails = re.emails),
              re.mpims &&
                (Q.mpims = ie.filterMpims(
                  Ke,
                  re.mpims,
                  (0, m.AQ)(Ke, le.entities.channels)
                )),
              re.ims &&
                (Q.ims = ie.filterIms(
                  Ke,
                  re.ims,
                  (0, m.EM)(Ke, le.entities.channels)
                )),
              re.userGroups &&
                (Q.userGroups = ie.filterUserGroups(
                  Ke,
                  re.userGroups,
                  (0, m.H9)(Ke, le.entities.userGroups)
                )),
              re.teams &&
                (Q.teams = ie.filterTeams(
                  Ke,
                  re.teams,
                  (0, m.A1)(Ke, le.entities.teams)
                )),
              re.views && (Q.views = ie.filterViews(Ke, re.views)),
              re.modals && (Q.modals = ie.filterModals(Ke, re.modals)),
              re.appActions &&
                (Q.appActions = ie.filterAppActions(Ke, re.appActions)),
              re.slashCommands &&
                (Q.slashCommands = ie.filterShortcuts(
                  Ke,
                  re.slashCommands,
                  !0
                )),
              re.slackGlobalActions &&
                (Q.slackGlobalActions = ie.filterShortcuts(
                  Ke,
                  re.slackGlobalActions
                )),
              re.quipShortcutCommands &&
                (Q.quipShortcutCommands = ie.filterShortcuts(
                  Ke,
                  re.quipShortcutCommands
                )),
              re.canvasAiSuggestions &&
                (Q.canvasAiSuggestions = ie.filterShortcuts(
                  Ke,
                  re.canvasAiSuggestions
                )),
              re.channelActions &&
                (Q.channelActions = ie.filterShortcuts(Ke, re.channelActions)),
              re.fakeGlobalActions &&
                (Q.fakeGlobalActions = ie.filterShortcuts(
                  Ke,
                  re.fakeGlobalActions
                )),
              re.callActions &&
                (Q.callActions = ie.filterShortcuts(Ke, re.callActions)),
              re.workflowTriggers &&
                (Q.workflowTriggers = ie.filterWorkflowTriggers(
                  Ke,
                  re.workflowTriggers
                )),
              re.broadcastKeywords &&
                (Q.broadcastKeywords = ie.filterBroadcastKeywords(
                  Ke,
                  re.broadcastKeywords
                )),
              re.emoji && (Q.emoji = ie.filterEmoji(Ke, re.emoji)),
              re.channelSections &&
                (Q.channelSections = ie.filterChannelSections(
                  Ke,
                  re.channelSections,
                  (ct) => {
                    var Pt, zt;
                    return !!(
                      !(
                        (Pt = le.entities.channelSections) === null ||
                        Pt === void 0 ||
                        (zt = Pt.includeTypes) === null ||
                        zt === void 0
                      ) && zt[ct.type]
                    );
                  }
                )),
              re.files &&
                (Q.files = ie.filterFiles(
                  Ke,
                  re.files,
                  (0, m.Do)(Ke, le.entities.files)
                )),
              re.lists && (Q.lists = ie.filterLists(Ke, re.lists)),
              re.listRecords)
            ) {
              var je;
              const { recordQuery: ct } =
                  (je = (0, K.V3)(fe)) !== null && je !== void 0 ? je : {},
                Pt = new B.A({
                  query: ct,
                  options: le,
                });
              Q.listRecords = Pt.filterListRecords(Ke, re.listRecords);
            }
            re.helpArticles &&
              (Q.helpArticles = ie.filterHelpArticles(Ke, re.helpArticles)),
              Ve.measureAndClear(
                "modern-searcher-matching-mark",
                "modern-searcher-matching"
              ),
              xe == null || xe.close();
            const Fe = (0, m.SI)(Q, re.remoteIds || {});
            let He = (0, i.A)(Object.values(Fe));
            const Oe = 500,
              Ye = 3;
            var at;
            const _t = Math.min(
              ((at = le == null ? void 0 : le.limit) !== null && at !== void 0
                ? at
                : 1) * Ye,
              Oe
            );
            if (le.sort && !le.sort.bypassSorting) {
              var pt;
              let ct = !1;
              He.length < _t && (ct = !0);
              const Pt = new U.A({
                  query: fe,
                  options: {
                    modelOnly: ct,
                    ...le.sort,
                  },
                }),
                zt =
                  (pt = T.LI.get({
                    label: T.gC.Searcher,
                    id: Re,
                  })) === null || pt === void 0
                    ? void 0
                    : pt.createChildSpan({
                        name: "searcher:searcher_sort",
                        additionalSpanOptions: {
                          parentSpanId: Ze == null ? void 0 : Ze.getId(),
                        },
                      });
              (He = Pt.sort(Ke, Fe)), zt == null || zt.close();
            }
            if (le.sort && le.sort.frecency && !le.sort.bypassSorting) {
              var Qe;
              const ct =
                (Qe = T.LI.get({
                  label: T.gC.Searcher,
                  id: Re,
                })) === null || Qe === void 0
                  ? void 0
                  : Qe.createChildSpan({
                      name: "searcher:sorter_sort",
                      additionalSpanOptions: {
                        parentSpanId: Ze == null ? void 0 : Ze.getId(),
                      },
                    });
              (He = new R.A({
                query: fe,
                options: le.sort,
                teamId: (0, G.ZT)(Ke),
                enterpriseId:
                  (0, I.k)(Ke) && (0, G.jV)(Ke) ? (0, G.jV)(Ke) : void 0,
              }).sort(Ke, He.slice(0, _t))),
                ct == null || ct.close();
            }
            return (
              le.limit && (He = (0, r.A)(He, le.limit)),
              le.returnMetadata || (He = He.map((ct) => ct.item)),
              (0, m.S)(),
              He || []
            );
          }
          clogSearcherAccept(ge) {
            let { clogger: fe, data: re } = ge;
            const {
                source: le,
                query: Re,
                results: ye,
                selectedItemId: Te,
                displayedItemIds: De,
              } = re,
              Ue = 15;
            if (!Te) return;
            const Ke = De ? De.length : ye.length,
              Ze = De
                ? De.indexOf(Te)
                : ye.findIndex((_t) => _t.item.id === Te);
            if (Ze < 0) return;
            const Q = ye.find((_t) => _t.item.id === Te);
            if (!Q) return;
            const ie = Q.type || "other",
              Ve = (0, n.A)(Re) ? Re.map((_t) => (0, x.O)(_t)) : (0, x.O)(Re),
              xe = Q.source || "local";
            let je;
            Q.type === "mpim"
              ? (je = Q.scoreDetailsByMember)
              : Q.type === "member"
              ? (je = {
                  [Te]: {
                    is_exact_match: Q.isExactMatch,
                    exact_match_details: Q.exactMatchDetails,
                    score_details: Q.scoreDetails,
                  },
                })
              : Q.type === "emoji" &&
                (je = {
                  [Te]: {
                    is_exact_match: Q.isExactMatch,
                  },
                });
            let Fe = [];
            ye.some((_t) => _t.featureVectorRaw) &&
              (De
                ? (Fe = De.map((_t) => {
                    const pt = ye.find((Qe) => Qe.item.id === _t);
                    return (pt && pt.featureVectorRaw.serialize()) || "";
                  }))
                : (Fe = ye.map((_t) => {
                    var pt, Qe;
                    return _t == null ||
                      (pt = _t.featureVectorRaw) === null ||
                      pt === void 0 ||
                      (Qe = pt.serialize) === null ||
                      Qe === void 0
                      ? void 0
                      : Qe.call(pt);
                  })));
            let Oe;
            (0, n.A)(Ve)
              ? (Oe = Ve.reduce((_t, pt) => _t + (0, m.Cs)((0, x.O)(pt)), 0))
              : (Oe = (0, m.Cs)(Ve));
            var Ye;
            const at = {
              source: le,
              query_length: Ve.length ? Ve.length : 0,
              query_terms_length: Oe,
              results_length: Ke,
              selected_position: Ze,
              selected_type: ie,
              selected_source: xe,
              selected_match_details: je,
              feature_vector_list: Fe.slice(0, Ue),
              session_length:
                Date.now() -
                ((Ye = this.sessionTs) !== null && Ye !== void 0 ? Ye : 0),
            };
            fe.track(O.EventId.SEARCHER_ACCEPT, at), this.endSession();
          }
          clogSearcherReject(ge) {
            let { clogger: fe, data: re } = ge;
            const {
                source: le,
                query: Re,
                results: ye,
                displayedItemIds: Te,
              } = re,
              De = Te !== void 0 ? Te.length : ye.length,
              Ue = (0, n.A)(Re) ? Re.map((ie) => (0, x.O)(ie)) : (0, x.O)(Re);
            let Ke;
            (0, n.A)(Ue)
              ? (Ke = Ue.reduce((ie, Ve) => ie + (0, m.Cs)((0, x.O)(Ve)), 0))
              : (Ke = (0, m.Cs)(Ue));
            var Ze;
            const Q = {
              source: le,
              query_length: Ue.length ? Ue.length : 0,
              query_terms_length: Ke,
              results_length: De,
              session_length:
                Date.now() -
                ((Ze = this.sessionTs) !== null && Ze !== void 0 ? Ze : 0),
            };
            fe.track(O.EventId.SEARCHER_REJECT, Q), this.endSession();
          }
          maybeStartSession(ge) {
            !this.sessionId &&
              ge !== void 0 &&
              ge.length &&
              ((this.sessionTs = Date.now()), (this.sessionId = (0, u.A)()));
          }
          endSession() {
            (this.sessionTs = null), (this.sessionId = null);
          }
          getTraceTags(ge) {
            let { query: fe, options: re } = ge;
            var le;
            const Re = re.entities;
            return {
              source:
                (re == null ? void 0 : re.searchViewContext) ||
                ((le = re.sort) === null || le === void 0 ? void 0 : le.source),
              tiered: re.tiered,
              is_searcher_sessions: !0,
              entities: Object.keys(Re)
                .filter((ye) => !!Re[ye])
                .sort()
                .toString(),
              query_length: fe.length,
            };
          }
          constructor(ge) {
            (this.teamId = ge),
              (this.pendingRequests = []),
              (this.sessionId = null),
              (this.sessionTs = null);
          }
        }
        _(ne, "Searcher");
        const pe = {};
        function Me(ke) {
          let { teamId: ge, key: fe } = ke;
          if (!ge)
            throw new Error("Searcher must be instantiated with a team id");
          return (
            pe[ge] && !pe[ge][fe] && (pe[ge][fe] = new ne(ge)),
            pe[ge] || ((pe[ge] = {}), (pe[ge][fe] = new ne(ge))),
            pe[ge][fe]
          );
        }
        _(Me, "getSearcher"),
          (0, E.ul)("searcherObj", {
            search: (ke, ge) => new ne(ke).search(ge),
            searchLocal: (ke, ge) => {
              new ne(ke).searchLocal(ge);
            },
          });
      },
      4342685672: (W, A, e) => {
        "use strict";
        e.d(A, {
          In: () => s,
          KV: () => n,
          nK: () => i,
        });
        var t = e(4761125736);
        const n = "autocompleteFallback";
        function s() {
          return n;
        }
        _(s, "getModelForSorter");
        function i(d) {
          return (0, t._Z)(d, "searcher_sessions_phase_1") === "treatment";
        }
        _(i, "shouldUseSearcherSessions");
      },
      8956261571: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => $n,
        });
        var t = e(3367239067),
          n = e(1703559452),
          s = e(9816084745),
          i = e(5141066605),
          d = e(3037015781),
          o = e(9884588328),
          a = e(1407713935),
          r = e(6007206761),
          c = e(6495946979);
        function u(j) {
          var ue;
          const we =
            (ue = j.actions) === null || ue === void 0 ? void 0 : ue[0];
          if (!we) return 0;
          const ft = parseFloat(we.ts);
          return isNaN(ft) ? 0 : ft;
        }
        _(u, "getLatestActionTs");
        var l = e(8170643398),
          m = e(9262712126),
          v = e(5096647761),
          E = e(6536982570),
          T = e(9190452268),
          g = e(3879245650),
          I = e(735940183),
          f = e(4096483543),
          y = e(8040098042),
          M = e(4496040127),
          p = e(6422693406),
          O = e(1520110262),
          C = e(3707193570),
          h = e(7948868735),
          D = e(6533394955);
        const P = 0.014,
          S = 0.094,
          b = 0.148,
          K = 0.132,
          x = 0.179;
        class B extends h.F {
          fetchData() {
            return (0, C.Am)(this.teamId)
              ? (0, D.dispatchForTeamId)(this.teamId, (0, O.yp)())
                  .catch((ue) => ({
                    exception: ue,
                  }))
                  .then(
                    (ue) =>
                      new U({
                        topEmojis: ue.top_emojis,
                        topMpims: ue.top_mpims,
                        topChannels: ue.top_channels,
                        topUsers: ue.top_users,
                        emojiFeatures: ue.emoji_features,
                        mpimFeatures: ue.mpim_features,
                        channelFeatures: ue.channel_features,
                        userFeatures: ue.user_features,
                        mpimCtr: ue.mpim_ctr,
                        channelCtr: ue.channel_ctr,
                        userCtr: ue.user_ctr,
                        emojiCtr: ue.emoji_ctr,
                        otherCtr: ue.other_ctr,
                        defaultFeatureNames: ue.default_features,
                        topAppActions: ue.top_app_actions,
                        topGlobalActions: ue.top_global_actions,
                        topSlashCommands: ue.top_slash_commands,
                        topWorkflowTriggers: ue.top_workflow_triggers,
                        topChannelActions: ue.top_channel_actions,
                        appActionCtr: ue.app_action_ctr,
                        globalActionCtr: ue.global_action_ctr,
                        slashCommandCtr: ue.slash_command_ctr,
                        workflowTriggerCtr: ue.workflow_trigger_ctr,
                        channelActionCtr: ue.channel_action_ctr,
                        usersHasDmed: ue.users_has_dmed,
                      })
                  )
              : p.S.resolve(new U());
          }
          getStaleWhileRevalidate() {
            return super.getStaleWhileRevalidate(new U());
          }
          constructor(ue) {
            super(), (this.teamId = ue);
          }
        }
        _(B, "AutocompleteFeaturesCache");
        class U {
          getFeatures(ue, we) {
            const ft = this.topEntities[we],
              pn = this.featureNames[we] || this.featureNames.default,
              An = this.defaultEntityFeatures[we],
              yn = ft && ft[ue];
            if (yn && pn) {
              const xt = {};
              for (let Jn = 0; Jn < pn.length; Jn++) xt[pn[Jn]] = yn[Jn];
              const Vn = {
                team_ctr_90dd: An.team_ctr_90dd,
                user_ctr_30dd: An.user_ctr_30dd,
              };
              for (const Jn of Object.keys(An)) Vn[Jn] = xt[Jn] || An[Jn];
              return Vn;
            }
            return An;
          }
          getEntityCtr(ue) {
            return this.entityCtr[ue] || this.otherEntityCtr;
          }
          getUserDmChannelMetadata(ue) {
            return this.usersHasDmed ? this.usersHasDmed[ue] : null;
          }
          constructor({
            topEmojis: ue,
            topMpims: we,
            topChannels: ft,
            topUsers: pn,
            emojiFeatures: An,
            mpimFeatures: yn,
            channelFeatures: xt,
            userFeatures: Vn,
            mpimCtr: Jn,
            channelCtr: Je,
            userCtr: Bt,
            emojiCtr: Lt,
            otherCtr: rt,
            defaultFeatureNames: yt,
            topAppActions: ot,
            topGlobalActions: lt,
            topSlashCommands: Ge,
            topWorkflowTriggers: jt,
            topChannelActions: on,
            appActionCtr: cn,
            globalActionCtr: Wt,
            slashCommandCtr: en,
            workflowTriggerCtr: Un,
            channelActionCtr: Pn,
            usersHasDmed: Cn,
          } = {}) {
            (this.topEntities = {
              emoji: ue,
              mpim: we,
              channel: ft,
              member: pn,
              appAction: ot,
              globalAction: lt,
              slashCommand: Ge,
              workflowTrigger: jt,
              channelAction: on,
            }),
              (this.featureNames = {
                emoji: An,
                mpim: yn,
                channel: xt,
                member: Vn,
                default: yt,
              }),
              (this.otherEntityCtr = rt ?? x),
              (this.entityCtr = {
                mpim: Jn ?? P,
                channel: Je ?? b,
                member: Bt ?? K,
                emoji: Lt ?? S,
                appAction: cn ?? this.otherEntityCtr,
                globalAction: Wt ?? this.otherEntityCtr,
                slashCommand: en ?? this.otherEntityCtr,
                workflowTrigger: Un ?? this.otherEntityCtr,
                channelAction: Pn ?? this.otherEntityCtr,
              }),
              (this.defaultEntityFeatures = {});
            for (const Mn of Object.keys(this.entityCtr))
              this.defaultEntityFeatures[Mn] = {
                team_ctr_90dd: this.getEntityCtr(Mn),
                user_ctr_30dd: this.getEntityCtr(Mn),
              };
            this.usersHasDmed = Cn;
          }
        }
        _(U, "AutocompleteFeatures");
        const R = {};
        function G(j) {
          let { teamId: ue, enterpriseId: we } = j;
          const ft = we || ue || "_default";
          return R[ft] || (R[ft] = new B(ue)), R[ft];
        }
        _(G, "getAutocompleteFeaturesCache");
        var H = e(1041273904),
          F = e(5238395322),
          V = e(8571983633),
          X = e(2774532222),
          q = e(7110454183),
          oe = e(1022424641),
          z = e(8274921051),
          Ae = e(4630136761),
          ae = e(4562579337),
          de = e(796111729),
          ve = e(3051657319),
          Se = e(7715417323);
        class Ee {
          writeNumericalFeature(ue, we) {
            !ue ||
              !isFinite(ue) ||
              (this.writeIdAndType(we, z.c.NUMERICAL),
              this.ensureCapacity(4),
              this.view.setFloat32(this.offset, ue),
              (this.offset += 4));
          }
          writeBinaryFeature(ue, we) {
            ue && this.writeIdAndType(we, z.c.BINARY);
          }
          writeTextFeature(ue, we) {
            if (!ue) return;
            this.writeIdAndType(we, z.c.TEXT);
            const ft = unescape(encodeURIComponent(ue));
            this.ensureCapacity(2 + ft.length),
              this.view.setUint16(this.offset, ft.length),
              (this.offset += 2),
              (0, ve.A)(ft.length).forEach((pn) => {
                this.view.setUint8(this.offset, ft.charCodeAt(pn)),
                  (this.offset += 1);
              });
          }
          writeNullFeature() {
            (0, Se.A)();
          }
          writeIdAndType(ue, we) {
            this.ensureCapacity(2),
              this.view.setUint16(this.offset, (ue << 3) | we),
              (this.offset += 2);
          }
          ensureCapacity(ue) {
            this.offset + ue > this.buffer.byteLength &&
              this.resize(this.offset + ue);
          }
          resize(ue) {
            if (this.buffer.byteLength >= ue) return;
            const we = new ArrayBuffer(2 * this.buffer.byteLength);
            new Uint8Array(we).set(new Uint8Array(this.buffer)),
              (this.buffer = we),
              (this.view = new DataView(this.buffer));
          }
          serialize() {
            return btoa(
              String.fromCharCode(
                ...new Uint8Array(this.buffer.slice(0, this.offset))
              )
            );
          }
          constructor() {
            (this.buffer = new ArrayBuffer(256)),
              (this.view = new DataView(this.buffer)),
              (this.offset = 0);
          }
        }
        _(Ee, "BinaryFeatureVectorSerializer");
        var be = e(3395271606);
        const Ce = (0, be.A)(z.Q);
        function Z(j) {
          return Ce[j];
        }
        _(Z, "getFeatureNameFromId");
        var $ = e(9150404500);
        const N = {
          globalFeatures: [
            "ID",
            "FRECENCY",
            "RAW_FRECENCY",
            "FRECENCY_BONUS",
            "FRECENCY_LOG_HIT_COUNT",
            "FRECENCY_LOG_HIT_COUNT_SCALED",
            "FRECENCY_HIT_COUNT",
            "FRECENCY_WEIGHT_HIT_VISITS",
            "FRECENCY_WEIGHT_ITEM_VISITS",
            "FRECENCY_ITEM_COUNT",
            "FRECENCY_LOG_ITEM_COUNT",
            "FRECENCY_LOG_ITEM_COUNT_SCALED",
            "FRECENCY_HIT_VISITS_4H",
            "FRECENCY_HIT_VISITS_1D",
            "FRECENCY_HIT_VISITS_3D",
            "FRECENCY_HIT_VISITS_1W",
            "FRECENCY_HIT_VISITS_1M",
            "FRECENCY_HIT_VISITS_90D",
            "FRECENCY_ITEM_VISITS_4H",
            "FRECENCY_ITEM_VISITS_1D",
            "FRECENCY_ITEM_VISITS_3D",
            "FRECENCY_ITEM_VISITS_1W",
            "FRECENCY_ITEM_VISITS_1M",
            "FRECENCY_ITEM_VISITS_90D",
            "FUZZY_SCORE",
            "FUZZY_SCORE_50",
            "FUZZY_SCORE_25",
            "FUZZY_SCORE_ALL",
            "FUZZY_SCORE_SCALED_EXP",
            "FUZZY_SCORE_SCALED_FLIPPED",
            "FUZZY_SCORE_SCALED_SUBTRACT",
            "NAV_EXACT_MATCH",
            "NAV_EXACT_PREFIX_MATCH",
            "NAV_NORMAL_MATCH",
            "NAV_NORMAL_PREFIX_MATCH",
            "NAV_NORMAL_MATCH_NO_USER",
            "NAV_NORMAL_PREFIX_MATCH_NO_USER",
            "NAV_QUERY_LENGTH",
            "NAV_TEXT_LENGTH",
            "NAV_QUERY_RATIO_LENGTH_STRING",
            "EXACT_MATCH_LOG_RESULTS",
            "USER_ENTITY_TYPE_CTR_30DD",
            "NUM_RESULTS",
          ],
          userFeatures: [
            "TYPE_NAVIGATION_USER",
            "USER_PRIORITY",
            "USER_IS_ACTIVE",
            "USER_IS_EXTERNAL",
            "USER_IS_CURRENT_USER",
            "MEMBER_OF_CURRENT_CHANNEL",
            "CURRENT_USER_TEXTY",
            "USER_SAME_TEAM",
            "USER_IS_BOT",
            "USER_DM_IS_UNREAD",
            "USER_DM_IS_STARRED",
            "USER_DM_READ_AGE_DECAY_7D",
            "USER_DM_READ_AGE_DECAY_2H",
            "USER_DM_READ_AGE_DECAY_7D_V2",
            "USER_DM_READ_AGE_DECAY_2H_V2",
            "USER_DM_LATEST_MSG_AGE_DECAY_7D",
            "USER_DM_LATEST_MSG_AGE_DECAY_2H",
            "USER_DM_LATEST_MSG_AGE_DECAY_7D_V2",
            "USER_DM_LATEST_MSG_AGE_DECAY_2H_V2",
            "USER_DM_IS_FROZEN",
            "USER_DM_HAS_DRAFT",
            "USER_DM_NULL",
            "USER_DM_EMPTY",
            "USER_DM_NOT_OPEN",
            "USER_DM_OPEN",
            "USER_DM_LATEST_OLDER_30D",
            "USER_DM_LATEST_OLDER_90D",
            "USER_DM_EMPTY_V2",
            "USER_DM_LATEST_OLDER_30D_V2",
            "USER_DM_LATEST_OLDER_90D_V2",
            "USER_HAS_DMED",
            "USER_DM_READ_AGE_DECAY_2H_V3",
            "USER_DM_READ_AGE_DECAY_7D_V3",
            "USER_DM_READ_OLDER_7D",
            "USER_DM_READ_OLDER_30D",
            "USER_DM_READ_OLDER_90D",
            "USER_QUERY_RATIO_LENGTH_STRING",
            "NAV_NORMAL_PREFIX_MATCH_USER",
            "NAV_NORMAL_MATCH_USER",
            "USER_FIRST_NAME_NORMAL_MATCH",
            "USER_FIRST_NAME_NORMAL_PREFIX_MATCH",
            "USER_FIRST_NAME_EXACT_MATCH",
            "USER_FIRST_NAME_EXACT_PREFIX_MATCH",
            "USER_LAST_NAME_NORMAL_MATCH",
            "USER_LAST_NAME_NORMAL_PREFIX_MATCH",
            "USER_LAST_NAME_EXACT_MATCH",
            "USER_LAST_NAME_EXACT_PREFIX_MATCH",
            "USER_EMAIL_MATCH",
            "USER_EMAIL_ONLY_MATCH",
            "QUERY_IS_SELF",
            "HISTORY_AGE_DECAY_2H",
            "HISTORY_AGE_DECAY_7D",
            "HISTORY_POSITION",
            "USER_MPIM_READ_AGE_DECAY_7D",
            "USER_MPIM_READ_AGE_DECAY_2H",
            "USER_MPIM_LATEST_MSG_AGE_DECAY_7D",
            "USER_MPIM_LATEST_MSG_AGE_DECAY_2H",
            "USER_MPIM_FRECENCY_LOG_ITEM_COUNT",
            "USER_MPIM_FRECENCY_LOG_HIT_COUNT",
          ],
          channelFeatures: [
            "TYPE_NAVIGATION_CHANNEL",
            "CHANNEL_IS_MEMBER",
            "CHANNEL_PRIORITY",
            "CHANNEL_IS_STARRED",
            "CHANNEL_IS_ARCHIVED",
            "CHANNEL_IS_OTHER_TEAM",
            "CHANNEL_IS_FROZEN",
            "CHANNEL_HAS_DRAFT",
            "CHANNEL_QUERY_RATIO_LENGTH_STRING",
            "QUERY_LENGTH_DECAY_NORMAL_MATCH_CHANNEL",
            "NAV_NORMAL_MATCH_CHANNEL_LOG_RESULTS",
            "CHANNEL_IS_UNREAD",
            "CHANNEL_READ_AGE_DECAY_2H",
            "CHANNEL_READ_AGE_DECAY_7D",
            "CHANNEL_LATEST_MSG_AGE_DECAY_7D",
            "CHANNEL_LATEST_MSG_AGE_DECAY_2H",
            "CHANNEL_IS_PREVIOUS_NAME_EXACT_MATCH",
            "CHANNEL_IS_PREVIOUS_NAME_PREFIX_MATCH",
            "ONLY_MATCHES_PREVIOUS_NAME",
            "CHANNEL_TEAM_CTR_90DD",
            "CHANNEL_USER_CTR_30DD",
            "HISTORY_AGE_DECAY_2H",
            "HISTORY_AGE_DECAY_7D",
            "HISTORY_POSITION",
          ],
          mpimFeatures: [
            "TYPE_NAVIGATION_MPIM",
            "MPIM_IS_STARRED",
            "MPIM_READ_AGE_DECAY_2H",
            "MPIM_READ_AGE_DECAY_7D",
            "MPIM_LATEST_MSG_AGE_DECAY_2H",
            "MPIM_LATEST_MSG_AGE_DECAY_7D",
            "MPIM_IS_UNREAD",
            "MPIM_WITH_DEACTIVATED_USER",
            "MPIM_PRIORITY",
            "MPIM_QUERY_RATIO_LENGTH_STRING",
            "MPIM_MEMBERS",
            "MPIM_MEMBER_NAME_MATCHES",
            "MPIM_MEMBER_ALL_MATCHES",
            "MPIM_MATCHER_SCORE",
            "MPIM_MATCHER_SCORE_0",
            "MPIM_MATCHER_SCORE_1",
            "MPIM_MATCHER_SCORE_2",
            "MPIM_MATCHER_SCORE_3",
            "MPIM_TEAM_CTR_90DD",
            "MPIM_USER_CTR_30DD",
            "HISTORY_AGE_DECAY_2H",
            "HISTORY_AGE_DECAY_7D",
            "HISTORY_POSITION",
            "MPIM_USERS_MAX_LATEST_MSG_AGE_DECAY_2H",
            "MPIM_USERS_MAX_LATEST_MSG_AGE_DECAY_7D",
            "MPIM_USERS_AVG_LATEST_MSG_AGE_DECAY_2H",
            "MPIM_USERS_AVG_LATEST_MSG_AGE_DECAY_7D",
            "MPIM_USERS_MAX_MSG_READ_AGE_DECAY_2H",
            "MPIM_USERS_MAX_MSG_READ_AGE_DECAY_7D",
            "MPIM_USERS_AVG_MSG_READ_AGE_DECAY_2H",
            "MPIM_USERS_AVG_MSG_READ_AGE_DECAY_7D",
            "MPIM_USERS_PCT_NON_EMPTY_DMS",
            "MPIM_USERS_PCT_NON_NULL_DMS",
            "MPIM_USERS_ALL_INTERNAL",
          ],
          viewFeatures: ["TYPE_NAVIGATION_VIEW"],
          fileFeatures: [
            "TYPE_NAVIGATION_FILE",
            "FILE_SUGGESTION_SCORE",
            "FILE_AGE_DECAY_7D",
            "FILE_AGE_DECAY_28D",
            "FILE_AGE_DECAY_90D",
            "FILE_FROM_CURRENT_USER",
            "FILE_LOG_PUBLIC_SHARES",
            "FILE_LOG_PRIVATE_SHARES",
            "FILE_LOG_ACTIONS",
            "FILE_LATEST_ACTION_AGE_DECAY_2H",
            "FILE_LATEST_ACTION_AGE_DECAY_7D",
            "FILE_LATEST_ACTION_AGE_DECAY_90D",
            "FILE_LATEST_SHARE_AGE_DECAY_2H",
            "FILE_LATEST_SHARE_AGE_DECAY_7D",
            "FILE_LATEST_SHARE_AGE_DECAY_90D",
            "FILE_CHANNEL_CTR",
            "FILE_SUGGESTIONS_SEARCHER",
            "FILE_USER_CTR",
            "FILE_NAME_CONTAINS_QUERY_NORMALIZED",
            "FILE_IS_CANVAS",
            "FILE_HAS_DMS_WITH_CREATOR",
            "FILE_HAS_DMS_WITH_CREATOR_V2",
            "FILE_LATEST_VIEW_BY_USER_OLDER_90D",
          ],
          linkFeatures: ["TYPE_NAVIGATION_LINK"],
          modalFeatures: ["TYPE_NAVIGATION_MODAL"],
          teamFeatures: ["TYPE_NAVIGATION_TEAM"],
          emojiFeatures: [
            "EMOJI_EXACT_MATCH",
            "EMOJI_QUERY_LENGTH_RATIO",
            "EMOJI_TOTAL_COMBO_BREAKS",
            "EMOJI_COMBO_BREAK_0",
            "EMOJI_COMBO_BREAK_1",
            "EMOJI_COMBO_BREAK_2",
            "EMOJI_COMBO_BREAK_3",
            "TYPE_EMOJI",
            "FRECENCY_HIT_VISIT_DECAY_2H",
            "FRECENCY_HIT_VISIT_DECAY_7D",
            "FRECENCY_ITEM_VISIT_DECAY_2H",
            "FRECENCY_ITEM_VISIT_DECAY_7D",
            "EMOJI_TEAM_CTR_90DD",
            "EMOJI_USER_CTR_30DD",
          ],
          broadcastKeywordFeatures: [
            "IS_BROADCAST_KEYWORD",
            "HERE_KEYWORD",
            "HERE_KEYWORD_EXACT_MATCH",
            "BROADCAST_KEYWORD_NORMAL_MATCH",
          ],
          queryFeatures: [
            "TYPE_QUERY",
            "TYPE_USER_QUERY",
            "TYPE_QUERY_HISTORY",
            "ACTIVE_TOKEN_STRING",
            "ACTIVE_TOKEN_MEMBER",
            "ACTIVE_TOKEN_PHRASE",
            "ACTIVE_TOKEN_QUERY_SUGGESTION",
            "ACTIVE_TOKEN_FILTER_DURING",
            "ACTIVE_TOKEN_FILTER_FROM",
            "ACTIVE_TOKEN_FILTER_IN",
            "ACTIVE_TOKEN_FILTER_TO",
            "ACTIVE_TOKEN_FILTER_BEFORE",
            "ACTIVE_TOKEN_FILTER_HAS",
            "ACTIVE_TOKEN_FILTER_IS",
            "ACTIVE_TOKEN_FILTER_ON",
            "ACTIVE_TOKEN_FILTER_AFTER",
            "ACTIVE_TOKEN_FILTER_WITH",
            "QUERY_SUGGESTION_SCORE_V2",
            "QUERY_FRECENCY_RAW",
            "QUERY_FRECENCY_WEIGHT_HIT_VISITS",
            "QUERY_FRECENCY_HIT_COUNT",
            "QUERY_FRECENCY_WEIGHT_ITEM_VISITS",
            "QUERY_FRECENCY_ITEM_COUNT",
            "QUERY_FUZZY_SCORE",
            "QUERY_FRECENCY_BONUS",
            "QUERY_HISTORY_AGE_DECAY_30D",
            "QUERY_HISTORY_LOG_INDEX",
            "FILTER_USER_IS_ACTIVE",
            "FILTER_USER_IS_CURRENT_USER",
            "FILTER_USER_DM_IS_STARRED",
            "FILTER_USER_DM_IS_UNREAD",
            "FILTER_USER_DM_READ_AGE_DECAY_7D",
            "FILTER_USER_DM_READ_AGE_DECAY_2H",
            "FILTER_USER_DM_LATEST_MSG_AGE_DECAY_7D",
            "FILTER_USER_DM_LATEST_MSG_AGE_DECAY_2H",
            "FILTER_USER_FIRST_NAME_NORMAL_MATCH",
            "FILTER_USER_FIRST_NAME_NORMAL_PREFIX_MATCH",
            "FILTER_USER_LAST_NAME_NORMAL_MATCH",
            "FILTER_USER_LAST_NAME_NORMAL_PREFIX_MATCH",
            "FILTER_USER_PRIORITY",
            "FILTER_CHANNEL_IS_ARCHIVED",
            "FILTER_CHANNEL_IS_MEMBER",
            "FILTER_CHANNEL_IS_STARRED",
            "FILTER_CHANNEL_IS_UNREAD",
            "FILTER_CHANNEL_READ_AGE_DECAY_7D",
            "FILTER_CHANNEL_READ_AGE_DECAY_2H",
            "FILTER_CHANNEL_PRIORITY",
            "STRING_EXACT_MATCH",
            "STRING_EXACT_PREFIX_MATCH",
            "STRING_NORMAL_MATCH",
            "STRING_NORMAL_PREFIX_MATCH",
            "STRING_SAME_NUMBER_WORDS",
            "EXCESS_STRING_LENGTH",
            "SUGGESTION_TEXT_LENGTH",
            "QUERY_LENGTH",
            "QUERY_RATIO_LENGTH_STRING",
            "QUERY_TOKEN_NORMAL_MATCH",
            "QUERY_TOKEN_NORMAL_PREFIX_MATCH",
            "QUERY_LOG_HIT_COUNT",
          ],
          appActionFeatures: [
            "TYPE_APP_ACTION",
            "APP_ACTION_TEAM_CTR",
            "APP_ACTION_USER_CTR",
            "OS_APP_ACTION",
          ],
          shortcutFeatures: [
            "APP_NAME_PREFIX_MATCH",
            "SHORTCUT_ENTITY_TYPE_CTR",
            "BEST_NAME_MATCH_LOG_RESULTS",
          ],
          slashCommandFeatures: [
            "TYPE_SLASH_COMMAND",
            "SLASH_COMMAND_TEAM_CTR",
            "SLASH_COMMAND_USER_CTR",
          ],
          globalActionFeatures: [
            "TYPE_GLOBAL_ACTION",
            "IS_INVITE_WORKSPACE",
            "GLOBAL_ACTION_TEAM_CTR",
            "GLOBAL_ACTION_USER_CTR",
          ],
          channelActionFeatures: [
            "TYPE_CHANNEL_ACTION",
            "CHANNEL_ACTION_TEAM_CTR",
            "CHANNEL_ACTION_USER_CTR",
          ],
          appFeatures: ["TYPE_APP"],
          messageFeatures: ["TYPE_NAVIGATION_MESSAGE"],
          workflowTriggerFeatures: [
            "TYPE_WORKFLOW_TRIGGER",
            "WORKFLOW_TRIGGER_TEAM_CTR",
            "WORKFLOW_TRIGGER_USER_CTR",
          ],
          channelAssociatedWorkflowFeatures: ["HAS_CHANNEL_ASSOCIATION"],
        };
        var L = e(9422011462);
        function w(j, ue) {
          return dn.fromSuggestion(j, ue);
        }
        _(w, "featureVectorForSuggestion");
        function k() {
          return (0, de.Wo)({
            label: "SORTER-RANKING",
          });
        }
        _(k, "getLogger");
        function J(j) {
          return Number.isInteger(j);
        }
        _(J, "isIntegerWithType");
        const ee = 60 * 60,
          ne = 24 * ee;
        var pe,
          Me,
          ke,
          ge,
          fe,
          re,
          le,
          Re,
          ye,
          Te,
          De,
          Ue,
          Ke,
          Ze,
          Q,
          ie,
          Ve,
          xe,
          je,
          Fe,
          He,
          Oe,
          Ye,
          at,
          _t,
          pt,
          Qe,
          ct,
          Pt,
          zt,
          an,
          Qt,
          tn,
          Ht,
          Kt,
          qt,
          Tn,
          Mt;
        const Jt = {
          FRECENCY: (j) =>
            ze({
              id: z.Q.FRECENCY,
              value: fn(j),
            }),
          TYPE_NAVIGATION_CHANNEL: (j, ue) => {
            let { itemIsChannel: we } = ue;
            return ze({
              id: z.Q.TYPE_NAVIGATION_CHANNEL,
              value: we,
            });
          },
          TYPE_NAVIGATION_FILE: (j) =>
            ze({
              id: z.Q.TYPE_NAVIGATION_FILE,
              value: j.suggestionType === $.fd.FILE_NAVIGATION,
            }),
          TYPE_NAVIGATION_LINK: (j) =>
            ze({
              id: z.Q.TYPE_NAVIGATION_LINK,
              value: j.suggestionType === $.fd.LINK_NAVIGATION,
            }),
          TYPE_NAVIGATION_MODAL: (j) =>
            ze({
              id: z.Q.TYPE_NAVIGATION_MODAL,
              value: j.suggestionType === $.fd.MODAL_NAVIGATION,
            }),
          TYPE_NAVIGATION_MPIM: (j) =>
            ze({
              id: z.Q.TYPE_NAVIGATION_MPIM,
              value: !!(0, a.yz)(j.item),
            }),
          TYPE_NAVIGATION_USER: (j, ue) => {
            let { itemIsMember: we } = ue;
            return ze({
              id: z.Q.TYPE_NAVIGATION_USER,
              value: we,
            });
          },
          TYPE_QUERY: (j) =>
            ze({
              id: z.Q.TYPE_QUERY,
              value: j.suggestionType === $.fd.QUERY,
            }),
          TYPE_QUERY_HISTORY: (j) =>
            ze({
              id: z.Q.TYPE_QUERY_HISTORY,
              value: j.suggestionType === $.fd.QUERY_HISTORY,
            }),
          ACTIVE_TOKEN_FILTER_IN: (j) =>
            ze({
              id: z.Q.ACTIVE_TOKEN_FILTER_IN,
              value:
                j.lastSuggestionToken &&
                j.lastSuggestionToken.type === $.S6.FILTER_IN,
            }),
          ACTIVE_TOKEN_FILTER_FROM: (j) =>
            ze({
              id: z.Q.ACTIVE_TOKEN_FILTER_FROM,
              value:
                j.lastSuggestionToken &&
                j.lastSuggestionToken.type === $.S6.FILTER_FROM,
            }),
          ACTIVE_TOKEN_FILTER_TO: (j) =>
            ze({
              id: z.Q.ACTIVE_TOKEN_FILTER_TO,
              value:
                j.lastSuggestionToken &&
                j.lastSuggestionToken.type === $.S6.FILTER_TO,
            }),
          ACTIVE_TOKEN_FILTER_BEFORE: (j) =>
            ze({
              id: z.Q.ACTIVE_TOKEN_FILTER_BEFORE,
              value:
                j.lastSuggestionToken &&
                j.lastSuggestionToken.type === $.S6.FILTER_BEFORE,
            }),
          ACTIVE_TOKEN_FILTER_DURING: (j) =>
            ze({
              id: z.Q.ACTIVE_TOKEN_FILTER_DURING,
              value:
                j.lastSuggestionToken &&
                j.lastSuggestionToken.type === $.S6.FILTER_DURING,
            }),
          ACTIVE_TOKEN_FILTER_ON: (j) =>
            ze({
              id: z.Q.ACTIVE_TOKEN_FILTER_ON,
              value:
                j.lastSuggestionToken &&
                j.lastSuggestionToken.type === $.S6.FILTER_ON,
            }),
          ACTIVE_TOKEN_FILTER_AFTER: (j) =>
            ze({
              id: z.Q.ACTIVE_TOKEN_FILTER_AFTER,
              value:
                j.lastSuggestionToken &&
                j.lastSuggestionToken.type === $.S6.FILTER_AFTER,
            }),
          ACTIVE_TOKEN_FILTER_HAS: (j) =>
            ze({
              id: z.Q.ACTIVE_TOKEN_FILTER_HAS,
              value:
                j.lastSuggestionToken &&
                j.lastSuggestionToken.type === $.S6.FILTER_HAS,
            }),
          ACTIVE_TOKEN_FILTER_IS: (j) =>
            ze({
              id: z.Q.ACTIVE_TOKEN_FILTER_IS,
              value:
                j.lastSuggestionToken &&
                j.lastSuggestionToken.type === $.S6.FILTER_IS,
            }),
          ACTIVE_TOKEN_FILTER_WITH: (j) =>
            ze({
              id: z.Q.ACTIVE_TOKEN_FILTER_WITH,
              value:
                j.lastSuggestionToken &&
                j.lastSuggestionToken.type === $.S6.FILTER_WITH,
            }),
          ACTIVE_TOKEN_MEMBER: (j) =>
            ze({
              id: z.Q.ACTIVE_TOKEN_MEMBER,
              value:
                j.lastSuggestionToken &&
                j.lastSuggestionToken.type === $.S6.MEMBER,
            }),
          ACTIVE_TOKEN_STRING: (j) =>
            ze({
              id: z.Q.ACTIVE_TOKEN_STRING,
              value:
                j.lastSuggestionToken &&
                j.lastSuggestionToken.type === $.S6.STRING,
            }),
          ACTIVE_TOKEN_PHRASE: (j) =>
            ze({
              id: z.Q.ACTIVE_TOKEN_PHRASE,
              value:
                j.lastSuggestionToken &&
                j.lastSuggestionToken.type === $.S6.PHRASE,
            }),
          STRING_EXACT_MATCH: (j) =>
            Ot({
              id: z.Q.STRING_EXACT_MATCH,
              suggestion: j,
              extractionFunction: ss,
            }),
          STRING_EXACT_PREFIX_MATCH: (j) =>
            Ot({
              id: z.Q.STRING_EXACT_PREFIX_MATCH,
              suggestion: j,
              extractionFunction: jn,
            }),
          STRING_NORMAL_MATCH: (j) =>
            Ot({
              id: z.Q.STRING_NORMAL_MATCH,
              suggestion: j,
              extractionFunction: Yn,
            }),
          STRING_NORMAL_PREFIX_MATCH: (j) =>
            Ot({
              id: z.Q.STRING_NORMAL_PREFIX_MATCH,
              suggestion: j,
              extractionFunction: Qn,
            }),
          STRING_SAME_NUMBER_WORDS: (j) =>
            Ot({
              id: z.Q.STRING_SAME_NUMBER_WORDS,
              suggestion: j,
              extractionFunction: es,
            }),
          EXCESS_STRING_LENGTH: (j) =>
            Ot({
              id: z.Q.EXCESS_STRING_LENGTH,
              suggestion: j,
              extractionFunction: Et,
            }),
          ID: (j) =>
            ze({
              id: z.Q.ID,
              value: j.logId || j.id,
            }),
          FILE_SUGGESTION_SCORE: (j) =>
            ze({
              id: z.Q.FILE_SUGGESTION_SCORE,
              value: it(j),
            }),
          ACTIVE_TOKEN_QUERY_SUGGESTION: (j) =>
            ze({
              id: z.Q.ACTIVE_TOKEN_QUERY_SUGGESTION,
              value:
                j.lastSuggestionToken &&
                j.lastSuggestionToken.type === $.S6.API,
            }),
          QUERY_SUGGESTION_SCORE_V2: (j) =>
            ze({
              id: z.Q.QUERY_SUGGESTION_SCORE_V2,
              value: ln(j),
            }),
          TYPE_NAVIGATION_TEAM: (j) =>
            ze({
              id: z.Q.TYPE_NAVIGATION_TEAM,
              value: j && j.suggestionType === $.fd.TEAM_NAVIGATION,
            }),
          TYPE_NAVIGATION_VIEW: (j) =>
            ze({
              id: z.Q.TYPE_NAVIGATION_VIEW,
              value: j && j.suggestionType === $.fd.VIEW_NAVIGATION,
            }),
          TYPE_USER_QUERY: (j) =>
            ze({
              id: z.Q.TYPE_USER_QUERY,
              value: j && j.suggestionType === $.fd.QUERY_USER,
            }),
          NAV_EXACT_MATCH: (j) =>
            Ot({
              id: z.Q.NAV_EXACT_MATCH,
              suggestion: j,
              extractionFunction: ss,
              text: Rt(j),
            }),
          NAV_EXACT_PREFIX_MATCH: (j) =>
            Ot({
              id: z.Q.NAV_EXACT_PREFIX_MATCH,
              suggestion: j,
              extractionFunction: jn,
              text: Rt(j),
            }),
          NAV_NORMAL_MATCH: (j) =>
            Ot({
              id: z.Q.NAV_NORMAL_MATCH,
              suggestion: j,
              extractionFunction: Yn,
              text: Rt(j),
            }),
          CHANNEL_IS_PREVIOUS_NAME_EXACT_MATCH: (j, ue) => {
            let { itemIsChannel: we } = ue;
            var ft, pn;
            return Ot({
              id: z.Q.CHANNEL_IS_PREVIOUS_NAME_EXACT_MATCH,
              suggestion: j,
              extractionFunction: (An) => {
                let { text: yn, query: xt } = An;
                return yn
                  ? (0, n.A)(
                      yn.split(",").map((Vn) =>
                        ss({
                          text: Vn,
                          query: xt,
                        })
                      )
                    )
                  : !1;
              },
              text: we
                ? (ft = j.item) === null ||
                  ft === void 0 ||
                  (pn = ft.previous_names) === null ||
                  pn === void 0
                  ? void 0
                  : pn.join(",")
                : null,
            });
          },
          CHANNEL_IS_PREVIOUS_NAME_PREFIX_MATCH: (j, ue) => {
            let { itemIsChannel: we } = ue;
            var ft, pn;
            return Ot({
              id: z.Q.CHANNEL_IS_PREVIOUS_NAME_PREFIX_MATCH,
              suggestion: j,
              extractionFunction: (An) => {
                let { text: yn, query: xt } = An;
                return yn
                  ? (0, n.A)(
                      yn.split(",").map((Vn) =>
                        jn({
                          text: Vn,
                          query: xt,
                        })
                      )
                    )
                  : !1;
              },
              text: we
                ? j == null ||
                  (ft = j.item) === null ||
                  ft === void 0 ||
                  (pn = ft.previous_names) === null ||
                  pn === void 0
                  ? void 0
                  : pn.join(",")
                : null,
            });
          },
          CHANNEL_IS_ARCHIVED: (j, ue) => {
            let { itemIsChannel: we } = ue;
            return ze({
              id: z.Q.CHANNEL_IS_ARCHIVED,
              value: we && (0, r.F)(j.item),
            });
          },
          CHANNEL_IS_MEMBER: (j, ue) => {
            let { itemIsChannel: we } = ue;
            return ze({
              id: z.Q.CHANNEL_IS_MEMBER,
              value: we && (0, c.bl)(j.item),
            });
          },
          CHANNEL_IS_STARRED: (j, ue) => {
            let { itemIsChannel: we } = ue;
            return ze({
              id: z.Q.CHANNEL_IS_STARRED,
              value: we && j.isStarred,
            });
          },
          MPIM_IS_STARRED: (j) =>
            ze({
              id: z.Q.MPIM_IS_STARRED,
              value: (0, a.yz)(j.item) && j.isStarred,
            }),
          CHANNEL_IS_UNREAD: (j, ue) => {
            let { itemIsChannel: we } = ue;
            return ze({
              id: z.Q.CHANNEL_IS_UNREAD,
              value: we && (0, o.KJ)(j.item),
            });
          },
          MPIM_IS_UNREAD: (j) =>
            ze({
              id: z.Q.MPIM_IS_UNREAD,
              value: (0, a.yz)(j.item) && (0, o.KJ)(j.item),
            }),
          CHANNEL_IS_OTHER_TEAM: (j, ue) => {
            let { itemIsChannel: we } = ue;
            return ze({
              id: z.Q.CHANNEL_IS_OTHER_TEAM,
              value: we && (0, o.lo)(j.item),
            });
          },
          USER_IS_ACTIVE: (j, ue) => {
            let { itemIsMember: we } = ue;
            return ze({
              id: z.Q.USER_IS_ACTIVE,
              value: we && (0, l.ls)(j.item),
            });
          },
          USER_IS_EXTERNAL: (j, ue) => {
            let { itemIsMember: we } = ue;
            return ze({
              id: z.Q.USER_IS_EXTERNAL,
              value: we && (0, v.g)(j.item),
            });
          },
          USER_IS_BOT: (j, ue) => {
            let { itemIsMember: we } = ue;
            return ze({
              id: z.Q.USER_IS_BOT,
              value: we && (0, ae.A)(j.item),
            });
          },
          USER_SAME_TEAM: (j, ue) => {
            let { itemIsMember: we } = ue;
            return ze({
              id: z.Q.USER_SAME_TEAM,
              value: we && !!j.sameTeam,
            });
          },
          USER_IS_CURRENT_USER: (j, ue) => {
            let { isCurrentUser: we } = ue;
            return ze({
              id: z.Q.USER_IS_CURRENT_USER,
              value: we,
            });
          },
          USER_DM_IS_STARRED: (j, ue) => {
            let { itemIsMember: we } = ue;
            return ze({
              id: z.Q.USER_DM_IS_STARRED,
              value: we && j.im && j.imIsStarred,
            });
          },
          USER_DM_IS_UNREAD: (j, ue) => {
            let { itemIsMember: we } = ue;
            return ze({
              id: z.Q.USER_DM_IS_UNREAD,
              value: we && j.im && (0, o.KJ)(j.im),
            });
          },
          CHANNEL_PRIORITY: (j, ue) => {
            let { itemIsChannel: we } = ue;
            return ze({
              id: z.Q.CHANNEL_PRIORITY,
              value: we && (j == null ? void 0 : j.priority),
            });
          },
          CHANNEL_READ_AGE_DECAY_7D: (j, ue) => {
            let { itemIsChannel: we, now: ft } = ue;
            return ze({
              id: z.Q.CHANNEL_READ_AGE_DECAY_7D,
              value:
                (we &&
                  bt(
                    ft,
                    parseFloat(
                      (pe = j.lastReadTs) !== null && pe !== void 0 ? pe : ""
                    ),
                    7 * ne
                  )) ||
                0,
            });
          },
          CHANNEL_READ_AGE_DECAY_2H: (j, ue) => {
            let { itemIsChannel: we, now: ft } = ue;
            return ze({
              id: z.Q.CHANNEL_READ_AGE_DECAY_2H,
              value:
                (we &&
                  bt(
                    ft,
                    parseFloat(
                      (Me = j.lastReadTs) !== null && Me !== void 0 ? Me : ""
                    ),
                    2 * ee
                  )) ||
                0,
            });
          },
          MPIM_READ_AGE_DECAY_2H: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.MPIM_READ_AGE_DECAY_2H,
              value:
                ((0, a.yz)(j.item) &&
                  bt(
                    we,
                    parseFloat(
                      (ke = j.lastReadTs) !== null && ke !== void 0 ? ke : ""
                    ),
                    2 * ee
                  )) ||
                0,
            });
          },
          MPIM_READ_AGE_DECAY_7D: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.MPIM_READ_AGE_DECAY_7D,
              value:
                ((0, a.yz)(j.item) &&
                  bt(
                    we,
                    parseFloat(
                      (ge = j.lastReadTs) !== null && ge !== void 0 ? ge : ""
                    ),
                    7 * ne
                  )) ||
                0,
            });
          },
          USER_DM_READ_AGE_DECAY_7D: (j, ue) => {
            let { itemIsMember: we, now: ft } = ue;
            return ze({
              id: z.Q.USER_DM_READ_AGE_DECAY_7D,
              value:
                (we &&
                  j.im &&
                  bt(
                    ft,
                    parseFloat(
                      (fe = j.lastReadTs) !== null && fe !== void 0 ? fe : ""
                    ),
                    7 * ne
                  )) ||
                0,
            });
          },
          USER_DM_READ_AGE_DECAY_7D_V2: (j, ue) => {
            let { itemIsMember: we, now: ft } = ue;
            return ze({
              id: z.Q.USER_DM_READ_AGE_DECAY_7D_V2,
              value:
                (we &&
                  j.im &&
                  bt(
                    ft,
                    parseFloat(
                      (re = j.lastReadImTs) !== null && re !== void 0 ? re : ""
                    ),
                    7 * ne
                  )) ||
                0,
            });
          },
          USER_DM_READ_AGE_DECAY_7D_V3: (j, ue) => {
            let { itemIsMember: we, now: ft } = ue;
            return ze({
              id: z.Q.USER_DM_READ_AGE_DECAY_7D_V3,
              value:
                (we &&
                  bt(
                    ft,
                    parseFloat(
                      (le = is(j)) !== null && le !== void 0 ? le : ""
                    ),
                    7 * ne
                  )) ||
                0,
            });
          },
          USER_DM_READ_AGE_DECAY_2H: (j, ue) => {
            let { itemIsMember: we, now: ft } = ue;
            return ze({
              id: z.Q.USER_DM_READ_AGE_DECAY_2H,
              value:
                (we &&
                  j.im &&
                  bt(
                    ft,
                    parseFloat(
                      (Re = j.lastReadTs) !== null && Re !== void 0 ? Re : ""
                    ),
                    2 * ee
                  )) ||
                0,
            });
          },
          USER_DM_READ_AGE_DECAY_2H_V2: (j, ue) => {
            let { itemIsMember: we, now: ft } = ue;
            return ze({
              id: z.Q.USER_DM_READ_AGE_DECAY_2H_V2,
              value:
                (we &&
                  j.im &&
                  bt(
                    ft,
                    parseFloat(
                      (ye = j.lastReadImTs) !== null && ye !== void 0 ? ye : ""
                    ),
                    2 * ee
                  )) ||
                0,
            });
          },
          USER_DM_READ_AGE_DECAY_2H_V3: (j, ue) => {
            let { itemIsMember: we, now: ft } = ue;
            return ze({
              id: z.Q.USER_DM_READ_AGE_DECAY_2H_V3,
              value:
                (we &&
                  bt(
                    ft,
                    parseFloat(
                      (Te = is(j)) !== null && Te !== void 0 ? Te : ""
                    ),
                    2 * ee
                  )) ||
                0,
            });
          },
          USER_DM_NULL: (j, ue) => {
            let { itemIsMember: we } = ue;
            return ze({
              id: z.Q.USER_DM_NULL,
              value: we && !j.im,
            });
          },
          USER_DM_EMPTY: (j, ue) => {
            let { itemIsMember: we } = ue;
            return ze({
              id: z.Q.USER_DM_EMPTY,
              value:
                we &&
                j.im &&
                !parseFloat(
                  (De = j.latestTs) !== null && De !== void 0 ? De : ""
                ),
            });
          },
          USER_DM_EMPTY_V2: (j, ue) => {
            let { itemIsMember: we } = ue;
            return ze({
              id: z.Q.USER_DM_EMPTY_V2,
              value:
                we &&
                j.im &&
                !parseFloat(
                  (Ue = j.latestImTs) !== null && Ue !== void 0 ? Ue : ""
                ),
            });
          },
          USER_HAS_DMED: (j, ue) => {
            let { itemIsMember: we } = ue;
            return ze({
              id: z.Q.USER_HAS_DMED,
              value:
                we &&
                !!parseFloat((Ke = is(j)) !== null && Ke !== void 0 ? Ke : ""),
            });
          },
          USER_DM_NOT_OPEN: (j, ue) => {
            let { itemIsMember: we } = ue;
            return ze({
              id: z.Q.USER_DM_NOT_OPEN,
              value: we && j.im && !(0, o.nT)(j.im),
            });
          },
          USER_DM_OPEN: (j, ue) => {
            let { itemIsMember: we } = ue;
            return ze({
              id: z.Q.USER_DM_OPEN,
              value: we && j.im && (0, o.nT)(j.im),
            });
          },
          USER_DM_LATEST_OLDER_30D: (j, ue) => {
            let { itemIsMember: we, now: ft } = ue;
            return ze({
              id: z.Q.USER_DM_LATEST_OLDER_30D,
              value:
                we &&
                xn(
                  ft,
                  parseFloat(
                    (Ze = j.latestTs) !== null && Ze !== void 0 ? Ze : ""
                  ),
                  30 * ne
                ),
            });
          },
          USER_DM_LATEST_OLDER_30D_V2: (j, ue) => {
            let { itemIsMember: we, now: ft } = ue;
            return ze({
              id: z.Q.USER_DM_LATEST_OLDER_30D_V2,
              value:
                we &&
                xn(
                  ft,
                  parseFloat(
                    (Q = j.latestImTs) !== null && Q !== void 0 ? Q : ""
                  ),
                  30 * ne
                ),
            });
          },
          USER_DM_LATEST_OLDER_90D: (j, ue) => {
            let { itemIsMember: we, now: ft } = ue;
            return ze({
              id: z.Q.USER_DM_LATEST_OLDER_90D,
              value:
                we &&
                xn(
                  ft,
                  parseFloat(
                    (ie = j.latestTs) !== null && ie !== void 0 ? ie : ""
                  ),
                  90 * ne
                ),
            });
          },
          USER_DM_LATEST_OLDER_90D_V2: (j, ue) => {
            let { itemIsMember: we, now: ft } = ue;
            return ze({
              id: z.Q.USER_DM_LATEST_OLDER_90D_V2,
              value:
                we &&
                xn(
                  ft,
                  parseFloat(
                    (Ve = j.latestImTs) !== null && Ve !== void 0 ? Ve : ""
                  ),
                  90 * ne
                ),
            });
          },
          USER_DM_READ_OLDER_7D: (j, ue) => {
            let { itemIsMember: we, now: ft } = ue;
            return ze({
              id: z.Q.USER_DM_READ_OLDER_7D,
              value:
                we &&
                xn(
                  ft,
                  parseFloat((xe = is(j)) !== null && xe !== void 0 ? xe : ""),
                  7 * ne
                ),
            });
          },
          USER_DM_READ_OLDER_30D: (j, ue) => {
            let { itemIsMember: we, now: ft } = ue;
            return ze({
              id: z.Q.USER_DM_READ_OLDER_30D,
              value:
                we &&
                xn(
                  ft,
                  parseFloat((je = is(j)) !== null && je !== void 0 ? je : ""),
                  30 * ne
                ),
            });
          },
          USER_DM_READ_OLDER_90D: (j, ue) => {
            let { itemIsMember: we, now: ft } = ue;
            return ze({
              id: z.Q.USER_DM_READ_OLDER_90D,
              value:
                we &&
                xn(
                  ft,
                  parseFloat((Fe = is(j)) !== null && Fe !== void 0 ? Fe : ""),
                  90 * ne
                ),
            });
          },
          USER_MPIM_READ_AGE_DECAY_7D: (j, ue) => {
            let { itemIsMember: we, now: ft } = ue;
            return ze({
              id: z.Q.USER_MPIM_READ_AGE_DECAY_7D,
              value:
                (we &&
                  j.mpimFeatures &&
                  bt(ft, j.mpimFeatures.lastReadTs, 7 * ne)) ||
                0,
            });
          },
          USER_MPIM_READ_AGE_DECAY_2H: (j, ue) => {
            let { itemIsMember: we, now: ft } = ue;
            return ze({
              id: z.Q.USER_MPIM_READ_AGE_DECAY_2H,
              value:
                (we &&
                  j.mpimFeatures &&
                  bt(ft, j.mpimFeatures.lastReadTs, 2 * ee)) ||
                0,
            });
          },
          USER_MPIM_LATEST_MSG_AGE_DECAY_7D: (j, ue) => {
            let { itemIsMember: we, now: ft } = ue;
            return ze({
              id: z.Q.USER_MPIM_LATEST_MSG_AGE_DECAY_7D,
              value:
                (we &&
                  j.mpimFeatures &&
                  bt(ft, j.mpimFeatures.latestMsgTs, 7 * ne)) ||
                0,
            });
          },
          USER_MPIM_LATEST_MSG_AGE_DECAY_2H: (j, ue) => {
            let { itemIsMember: we, now: ft } = ue;
            return ze({
              id: z.Q.USER_MPIM_LATEST_MSG_AGE_DECAY_2H,
              value:
                (we &&
                  j.mpimFeatures &&
                  bt(ft, j.mpimFeatures.latestMsgTs, 2 * ee)) ||
                0,
            });
          },
          USER_MPIM_FRECENCY_LOG_ITEM_COUNT: (j, ue) => {
            let { itemIsMember: we } = ue;
            var ft;
            return ze({
              id: z.Q.USER_MPIM_FRECENCY_LOG_ITEM_COUNT,
              value:
                (we &&
                  ((ft = j.mpimFeatures) === null || ft === void 0
                    ? void 0
                    : ft.itemCount) &&
                  Math.log1p(j.mpimFeatures.itemCount)) ||
                0,
            });
          },
          USER_MPIM_FRECENCY_LOG_HIT_COUNT: (j, ue) => {
            let { itemIsMember: we } = ue;
            var ft;
            return ze({
              id: z.Q.USER_MPIM_FRECENCY_LOG_HIT_COUNT,
              value:
                (we &&
                  ((ft = j.mpimFeatures) === null || ft === void 0
                    ? void 0
                    : ft.hitCount) &&
                  Math.log1p(j.mpimFeatures.hitCount)) ||
                0,
            });
          },
          QUERY_LENGTH: (j) =>
            Ot({
              id: z.Q.QUERY_LENGTH,
              suggestion: j,
              extractionFunction: nn,
            }),
          NAV_QUERY_LENGTH: (j) =>
            Ot({
              id: z.Q.NAV_QUERY_LENGTH,
              suggestion: j,
              extractionFunction: nn,
              text: Rt(j),
            }),
          SUGGESTION_TEXT_LENGTH: (j) =>
            Ot({
              id: z.Q.SUGGESTION_TEXT_LENGTH,
              suggestion: j,
              extractionFunction: Dn,
            }),
          NAV_TEXT_LENGTH: (j) =>
            Ot({
              id: z.Q.NAV_TEXT_LENGTH,
              suggestion: j,
              extractionFunction: Dn,
              text: Rt(j),
            }),
          RAW_FRECENCY: (j) =>
            ze({
              id: z.Q.RAW_FRECENCY,
              value: j.rawFrecencyScore,
            }),
          MPIM_PRIORITY: (j) =>
            ze({
              id: z.Q.MPIM_PRIORITY,
              value: (0, a.yz)(j.item) && (j == null ? void 0 : j.priority),
            }),
          QUERY_RATIO_LENGTH_STRING: (j) =>
            Ot({
              id: z.Q.QUERY_RATIO_LENGTH_STRING,
              suggestion: j,
              extractionFunction: gt,
            }),
          NAV_QUERY_RATIO_LENGTH_STRING: (j) =>
            Ot({
              id: z.Q.NAV_QUERY_RATIO_LENGTH_STRING,
              suggestion: j,
              extractionFunction: gt,
              text: Rt(j),
            }),
          USER_QUERY_RATIO_LENGTH_STRING: (j) =>
            Ot({
              id: z.Q.USER_QUERY_RATIO_LENGTH_STRING,
              suggestion: j,
              extractionFunction: gt,
              text: Yt(j, $.fd.USER_NAVIGATION),
            }),
          CHANNEL_QUERY_RATIO_LENGTH_STRING: (j) =>
            Ot({
              id: z.Q.CHANNEL_QUERY_RATIO_LENGTH_STRING,
              suggestion: j,
              extractionFunction: gt,
              text: Yt(j, $.fd.CHANNEL_NAVIGATION),
            }),
          MPIM_QUERY_RATIO_LENGTH_STRING: (j) =>
            Ot({
              id: z.Q.MPIM_QUERY_RATIO_LENGTH_STRING,
              suggestion: j,
              extractionFunction: gt,
              text: Yt(j, $.fd.MPIM_NAVIGATION),
            }),
          MPIM_WITH_DEACTIVATED_USER: (j) =>
            ze({
              id: z.Q.MPIM_WITH_DEACTIVATED_USER,
              value: (0, a.yz)(j.item) && j.isMpimWithDeactivatedMember,
            }),
          NAV_NORMAL_PREFIX_MATCH: (j) =>
            Ot({
              id: z.Q.NAV_NORMAL_PREFIX_MATCH,
              suggestion: j,
              extractionFunction: Qn,
              text: Rt(j),
            }),
          FRECENCY_BONUS: (j) =>
            ze({
              id: z.Q.FRECENCY_BONUS,
              value: (0, F.A)(Object.values(j.bonusPointMap || {})) || 0,
            }),
          USER_FIRST_NAME_EXACT_MATCH: (j, ue) => {
            let { itemIsMember: we } = ue;
            return Ot({
              id: z.Q.USER_FIRST_NAME_EXACT_MATCH,
              suggestion: j,
              extractionFunction: ss,
              text: we && (0, l.XS)(j.item),
            });
          },
          USER_FIRST_NAME_EXACT_PREFIX_MATCH: (j, ue) => {
            let { itemIsMember: we } = ue;
            return Ot({
              id: z.Q.USER_FIRST_NAME_EXACT_PREFIX_MATCH,
              suggestion: j,
              extractionFunction: jn,
              text: we && (0, l.XS)(j.item),
            });
          },
          USER_FIRST_NAME_NORMAL_MATCH: (j, ue) => {
            let { itemIsMember: we } = ue;
            return Ot({
              id: z.Q.USER_FIRST_NAME_NORMAL_MATCH,
              suggestion: j,
              extractionFunction: Yn,
              text: we && (0, l.XS)(j.item),
            });
          },
          USER_FIRST_NAME_NORMAL_PREFIX_MATCH: (j, ue) => {
            let { itemIsMember: we } = ue;
            return Ot({
              id: z.Q.USER_FIRST_NAME_NORMAL_PREFIX_MATCH,
              suggestion: j,
              extractionFunction: Qn,
              text: we && (0, l.XS)(j.item),
            });
          },
          USER_LAST_NAME_EXACT_MATCH: (j, ue) => {
            let { itemIsMember: we } = ue;
            return Ot({
              id: z.Q.USER_LAST_NAME_EXACT_MATCH,
              suggestion: j,
              extractionFunction: ss,
              text: we && (0, l.lQ)(j.item),
            });
          },
          USER_LAST_NAME_EXACT_PREFIX_MATCH: (j, ue) => {
            let { itemIsMember: we } = ue;
            return Ot({
              id: z.Q.USER_LAST_NAME_EXACT_PREFIX_MATCH,
              suggestion: j,
              extractionFunction: jn,
              text: we && (0, l.lQ)(j.item),
            });
          },
          USER_LAST_NAME_NORMAL_MATCH: (j, ue) => {
            let { itemIsMember: we } = ue;
            return Ot({
              id: z.Q.USER_LAST_NAME_NORMAL_MATCH,
              suggestion: j,
              extractionFunction: Yn,
              text: we && (0, l.lQ)(j.item),
            });
          },
          USER_LAST_NAME_NORMAL_PREFIX_MATCH: (j, ue) => {
            let { itemIsMember: we } = ue;
            return Ot({
              id: z.Q.USER_LAST_NAME_NORMAL_PREFIX_MATCH,
              suggestion: j,
              extractionFunction: Qn,
              text: we && (0, l.lQ)(j.item),
            });
          },
          USER_EMAIL_MATCH: (j) => {
            var ue, we;
            return ze({
              id: z.Q.USER_EMAIL_MATCH,
              value:
                ((ue = j.scoreDetails) === null || ue === void 0
                  ? void 0
                  : ue.email) !== void 0
                  ? ((we = j.scoreDetails) === null || we === void 0
                      ? void 0
                      : we.email) >= 0
                  : !1,
            });
          },
          USER_EMAIL_ONLY_MATCH: (j) => {
            var ue, we;
            return ze({
              id: z.Q.USER_EMAIL_ONLY_MATCH,
              value:
                ((ue = j.scoreDetails) === null || ue === void 0
                  ? void 0
                  : ue.email) !== void 0 &&
                ((we = j.scoreDetails) === null || we === void 0
                  ? void 0
                  : we.email) >= 0 &&
                Object.keys(
                  (He = j.scoreDetails) !== null && He !== void 0 ? He : {}
                ).length === 1,
            });
          },
          USER_PRIORITY: (j, ue) => {
            let { itemIsMember: we } = ue;
            return ze({
              id: z.Q.USER_PRIORITY,
              value: (we && j.im && (j == null ? void 0 : j.priority)) || 0,
            });
          },
          ONLY_MATCHES_PREVIOUS_NAME: (j) =>
            ze({
              id: z.Q.ONLY_MATCHES_PREVIOUS_NAME,
              value: j.bestPreviousNameMatch ? 1 : null,
            }),
          FRECENCY_WEIGHT_HIT_VISITS: (j) =>
            ze({
              id: z.Q.FRECENCY_WEIGHT_HIT_VISITS,
              value: j.weightHitVisits,
            }),
          FRECENCY_HIT_VISITS_4H: (j) =>
            ze({
              id: z.Q.FRECENCY_HIT_VISITS_4H,
              value: j.hitVisits4h,
            }),
          FRECENCY_HIT_VISITS_1D: (j) =>
            ze({
              id: z.Q.FRECENCY_HIT_VISITS_1D,
              value: j.hitVisits1d,
            }),
          FRECENCY_HIT_VISITS_3D: (j) =>
            ze({
              id: z.Q.FRECENCY_HIT_VISITS_3D,
              value: j.hitVisits3d,
            }),
          FRECENCY_HIT_VISITS_1W: (j) =>
            ze({
              id: z.Q.FRECENCY_HIT_VISITS_1W,
              value: j.hitVisits1w,
            }),
          FRECENCY_HIT_VISITS_1M: (j) =>
            ze({
              id: z.Q.FRECENCY_HIT_VISITS_1M,
              value: j.hitVisits1m,
            }),
          FRECENCY_HIT_VISITS_90D: (j) =>
            ze({
              id: z.Q.FRECENCY_HIT_VISITS_90D,
              value: j.hitVisits90d,
            }),
          FRECENCY_ITEM_VISITS_4H: (j) =>
            ze({
              id: z.Q.FRECENCY_ITEM_VISITS_4H,
              value: j.itemVisits4h,
            }),
          FRECENCY_ITEM_VISITS_1D: (j) =>
            ze({
              id: z.Q.FRECENCY_ITEM_VISITS_1D,
              value: j.itemVisits1d,
            }),
          FRECENCY_ITEM_VISITS_3D: (j) =>
            ze({
              id: z.Q.FRECENCY_ITEM_VISITS_3D,
              value: j.itemVisits3d,
            }),
          FRECENCY_ITEM_VISITS_1W: (j) =>
            ze({
              id: z.Q.FRECENCY_ITEM_VISITS_1W,
              value: j.itemVisits1w,
            }),
          FRECENCY_ITEM_VISITS_1M: (j) =>
            ze({
              id: z.Q.FRECENCY_ITEM_VISITS_1M,
              value: j.itemVisits1m,
            }),
          FRECENCY_ITEM_VISITS_90D: (j) =>
            ze({
              id: z.Q.FRECENCY_ITEM_VISITS_90D,
              value: j.itemVisits90d,
            }),
          FRECENCY_HIT_COUNT: (j) =>
            ze({
              id: z.Q.FRECENCY_HIT_COUNT,
              value: j.hitCount,
            }),
          FRECENCY_WEIGHT_ITEM_VISITS: (j) =>
            ze({
              id: z.Q.FRECENCY_WEIGHT_ITEM_VISITS,
              value: j.weightItemVisits,
            }),
          FRECENCY_ITEM_COUNT: (j) =>
            ze({
              id: z.Q.FRECENCY_ITEM_COUNT,
              value: j.itemCount,
            }),
          NAV_NORMAL_MATCH_USER: (j) =>
            Ot({
              id: z.Q.NAV_NORMAL_MATCH_USER,
              suggestion: j,
              extractionFunction: (ue) => {
                let { text: we, normalizedQuery: ft } = ue;
                return (
                  Yn({
                    text: we,
                    normalizedQuery: ft,
                  }) &&
                  !Qn({
                    text: (0, l.XS)(j.item),
                    normalizedQuery: ft,
                  })
                );
              },
              text: Yt(j, $.fd.USER_NAVIGATION),
            }),
          NAV_NORMAL_PREFIX_MATCH_USER: (j) =>
            Ot({
              id: z.Q.NAV_NORMAL_PREFIX_MATCH_USER,
              suggestion: j,
              extractionFunction: (ue) => {
                let { text: we, normalizedQuery: ft } = ue;
                return (
                  Qn({
                    text: we,
                    normalizedQuery: ft,
                  }) &&
                  !Qn({
                    text: (0, l.XS)(j.item),
                    normalizedQuery: ft,
                  })
                );
              },
              text: Yt(j, $.fd.USER_NAVIGATION),
            }),
          NAV_NORMAL_MATCH_NO_USER: (j) =>
            Ot({
              id: z.Q.NAV_NORMAL_MATCH_NO_USER,
              suggestion: j,
              extractionFunction: Yn,
              text: bn(j),
            }),
          NAV_NORMAL_PREFIX_MATCH_NO_USER: (j) =>
            Ot({
              id: z.Q.NAV_NORMAL_PREFIX_MATCH_NO_USER,
              suggestion: j,
              extractionFunction: Qn,
              text: bn(j),
            }),
          CHANNEL_LATEST_MSG_AGE_DECAY_7D: (j, ue) => {
            let { itemIsChannel: we, now: ft } = ue;
            return ze({
              id: z.Q.CHANNEL_LATEST_MSG_AGE_DECAY_7D,
              value:
                (we &&
                  bt(
                    ft,
                    parseFloat(
                      (Oe = j.latestTs) !== null && Oe !== void 0 ? Oe : ""
                    ),
                    7 * ne
                  )) ||
                0,
            });
          },
          CHANNEL_LATEST_MSG_AGE_DECAY_2H: (j, ue) => {
            let { itemIsChannel: we, now: ft } = ue;
            return ze({
              id: z.Q.CHANNEL_LATEST_MSG_AGE_DECAY_2H,
              value:
                (we &&
                  bt(
                    ft,
                    parseFloat(
                      (Ye = j.latestTs) !== null && Ye !== void 0 ? Ye : ""
                    ),
                    2 * ee
                  )) ||
                0,
            });
          },
          MPIM_LATEST_MSG_AGE_DECAY_2H: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.MPIM_LATEST_MSG_AGE_DECAY_2H,
              value:
                ((0, a.yz)(j.item) &&
                  bt(
                    we,
                    parseFloat(
                      (at = j.latestTs) !== null && at !== void 0 ? at : ""
                    ),
                    2 * ee
                  )) ||
                0,
            });
          },
          MPIM_USERS_MAX_LATEST_MSG_AGE_DECAY_2H: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.MPIM_USERS_MAX_LATEST_MSG_AGE_DECAY_2H,
              value:
                ((0, a.yz)(j.item) &&
                  bt(we, j.maxLatestMsgTsOfAllMembers, 2 * ee)) ||
                0,
            });
          },
          MPIM_USERS_MAX_LATEST_MSG_AGE_DECAY_7D: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.MPIM_USERS_MAX_LATEST_MSG_AGE_DECAY_7D,
              value:
                ((0, a.yz)(j.item) &&
                  bt(we, j.maxLatestMsgTsOfAllMembers, 7 * ne)) ||
                0,
            });
          },
          MPIM_USERS_AVG_LATEST_MSG_AGE_DECAY_2H: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.MPIM_USERS_AVG_LATEST_MSG_AGE_DECAY_2H,
              value:
                ((0, a.yz)(j.item) &&
                  bt(we, j.avgLatestMsgTsOfAllMembers, 2 * ee)) ||
                0,
            });
          },
          MPIM_USERS_AVG_LATEST_MSG_AGE_DECAY_7D: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.MPIM_USERS_AVG_LATEST_MSG_AGE_DECAY_7D,
              value:
                ((0, a.yz)(j.item) &&
                  bt(we, j.avgLatestMsgTsOfAllMembers, 7 * ne)) ||
                0,
            });
          },
          MPIM_USERS_MAX_MSG_READ_AGE_DECAY_2H: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.MPIM_USERS_MAX_MSG_READ_AGE_DECAY_2H,
              value:
                ((0, a.yz)(j.item) &&
                  bt(we, j.maxLastReadTsOfAllMembers, 2 * ee)) ||
                0,
            });
          },
          MPIM_USERS_MAX_MSG_READ_AGE_DECAY_7D: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.MPIM_USERS_MAX_MSG_READ_AGE_DECAY_7D,
              value:
                ((0, a.yz)(j.item) &&
                  bt(we, j.maxLastReadTsOfAllMembers, 7 * ne)) ||
                0,
            });
          },
          MPIM_USERS_AVG_MSG_READ_AGE_DECAY_2H: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.MPIM_USERS_AVG_MSG_READ_AGE_DECAY_2H,
              value:
                ((0, a.yz)(j.item) &&
                  bt(we, j.avgLastReadTsOfAllMembers, 2 * ee)) ||
                0,
            });
          },
          MPIM_USERS_AVG_MSG_READ_AGE_DECAY_7D: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.MPIM_USERS_AVG_MSG_READ_AGE_DECAY_7D,
              value:
                ((0, a.yz)(j.item) &&
                  bt(we, j.avgLastReadTsOfAllMembers, 7 * ne)) ||
                0,
            });
          },
          MPIM_USERS_PCT_NON_EMPTY_DMS: (j) =>
            ze({
              id: z.Q.MPIM_USERS_PCT_NON_EMPTY_DMS,
              value: ((0, a.yz)(j.item) && j.pctNonEmptyDmsForAllMembers) || 0,
            }),
          MPIM_USERS_PCT_NON_NULL_DMS: (j) =>
            ze({
              id: z.Q.MPIM_USERS_PCT_NON_NULL_DMS,
              value: ((0, a.yz)(j.item) && j.pctNonNullDmsForAllMembers) || 0,
            }),
          MPIM_USERS_ALL_INTERNAL: (j) =>
            ze({
              id: z.Q.MPIM_USERS_ALL_INTERNAL,
              value: (0, a.yz)(j.item) && j.isMpimWithOnlyInternalMembers,
            }),
          MPIM_LATEST_MSG_AGE_DECAY_7D: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.MPIM_LATEST_MSG_AGE_DECAY_7D,
              value:
                ((0, a.yz)(j.item) &&
                  bt(
                    we,
                    parseFloat(
                      (_t = j.latestTs) !== null && _t !== void 0 ? _t : ""
                    ),
                    7 * ne
                  )) ||
                0,
            });
          },
          USER_DM_LATEST_MSG_AGE_DECAY_7D: (j, ue) => {
            let { itemIsMember: we, now: ft } = ue;
            return ze({
              id: z.Q.USER_DM_LATEST_MSG_AGE_DECAY_7D,
              value:
                (we &&
                  j.im &&
                  bt(
                    ft,
                    parseFloat(
                      (pt = j.latestTs) !== null && pt !== void 0 ? pt : ""
                    ),
                    7 * ne
                  )) ||
                0,
            });
          },
          USER_DM_LATEST_MSG_AGE_DECAY_7D_V2: (j, ue) => {
            let { itemIsMember: we, now: ft } = ue;
            return ze({
              id: z.Q.USER_DM_LATEST_MSG_AGE_DECAY_7D_V2,
              value:
                (we &&
                  j.im &&
                  bt(
                    ft,
                    parseFloat(
                      (Qe = j.latestImTs) !== null && Qe !== void 0 ? Qe : ""
                    ),
                    7 * ne
                  )) ||
                0,
            });
          },
          USER_DM_LATEST_MSG_AGE_DECAY_2H: (j, ue) => {
            let { itemIsMember: we, now: ft } = ue;
            return ze({
              id: z.Q.USER_DM_LATEST_MSG_AGE_DECAY_2H,
              value:
                (we &&
                  j.im &&
                  bt(
                    ft,
                    parseFloat(
                      (ct = j.latestTs) !== null && ct !== void 0 ? ct : ""
                    ),
                    2 * ee
                  )) ||
                0,
            });
          },
          USER_DM_LATEST_MSG_AGE_DECAY_2H_V2: (j, ue) => {
            let { itemIsMember: we, now: ft } = ue;
            return ze({
              id: z.Q.USER_DM_LATEST_MSG_AGE_DECAY_2H_V2,
              value:
                (we &&
                  j.im &&
                  bt(
                    ft,
                    parseFloat(
                      (Pt = j.latestImTs) !== null && Pt !== void 0 ? Pt : ""
                    ),
                    2 * ee
                  )) ||
                0,
            });
          },
          FRECENCY_LOG_HIT_COUNT: (j) =>
            ze({
              id: z.Q.FRECENCY_LOG_HIT_COUNT,
              value:
                Math.log1p(
                  (zt = j.hitCount) !== null && zt !== void 0 ? zt : 0
                ) || 0,
            }),
          FRECENCY_LOG_HIT_COUNT_SCALED: (j) =>
            ze({
              id: z.Q.FRECENCY_LOG_HIT_COUNT_SCALED,
              value: j.logHitCountScaled,
            }),
          FRECENCY_LOG_ITEM_COUNT: (j) =>
            ze({
              id: z.Q.FRECENCY_LOG_ITEM_COUNT,
              value:
                Math.log1p(
                  (an = j.itemCount) !== null && an !== void 0 ? an : 0
                ) || 0,
            }),
          FRECENCY_LOG_ITEM_COUNT_SCALED: (j) =>
            ze({
              id: z.Q.FRECENCY_LOG_ITEM_COUNT_SCALED,
              value: j.logItemCountScaled,
            }),
          QUERY_FRECENCY_RAW: (j) =>
            ze({
              id: z.Q.QUERY_FRECENCY_RAW,
              value:
                (j.suggestionType === $.fd.QUERY ||
                  j.suggestionType === $.fd.QUERY_USER) &&
                j.scoringContext.frecencyScoreRaw,
            }),
          QUERY_FRECENCY_WEIGHT_HIT_VISITS: (j) =>
            ze({
              id: z.Q.QUERY_FRECENCY_WEIGHT_HIT_VISITS,
              value:
                (j.suggestionType === $.fd.QUERY ||
                  j.suggestionType === $.fd.QUERY_USER) &&
                j.scoringContext.frecencyWeightHitVisits,
            }),
          QUERY_FRECENCY_HIT_COUNT: (j) =>
            ze({
              id: z.Q.QUERY_FRECENCY_HIT_COUNT,
              value:
                (j.suggestionType === $.fd.QUERY ||
                  j.suggestionType === $.fd.QUERY_USER) &&
                j.scoringContext.frecencyHitCount,
            }),
          QUERY_LOG_HIT_COUNT: (j) =>
            ze({
              id: z.Q.QUERY_LOG_HIT_COUNT,
              value:
                ((j.suggestionType === $.fd.QUERY ||
                  j.suggestionType === $.fd.QUERY_USER) &&
                  Nt(j.scoringContext.frecencyHitCount)) ||
                (j.suggestionType === $.fd.QUERY_HISTORY &&
                  Nt((Qt = j.count) !== null && Qt !== void 0 ? Qt : 0)) ||
                0,
            }),
          QUERY_FRECENCY_WEIGHT_ITEM_VISITS: (j) =>
            ze({
              id: z.Q.QUERY_FRECENCY_WEIGHT_ITEM_VISITS,
              value:
                (j.suggestionType === $.fd.QUERY ||
                  j.suggestionType === $.fd.QUERY_USER) &&
                j.scoringContext.frecencyWeightItemVisits,
            }),
          QUERY_FRECENCY_ITEM_COUNT: (j) =>
            ze({
              id: z.Q.QUERY_FRECENCY_ITEM_COUNT,
              value:
                (j.suggestionType === $.fd.QUERY ||
                  j.suggestionType === $.fd.QUERY_USER) &&
                j.scoringContext.frecencyItemCount,
            }),
          QUERY_FUZZY_SCORE: (j) =>
            ze({
              id: z.Q.QUERY_FUZZY_SCORE,
              value:
                (j.suggestionType === $.fd.QUERY ||
                  j.suggestionType === $.fd.QUERY_USER) &&
                j.scoringContext.fuzzyScore,
            }),
          QUERY_FRECENCY_BONUS: (j) => {
            var ue;
            return ze({
              id: z.Q.QUERY_FRECENCY_BONUS,
              value:
                ((j.suggestionType === $.fd.QUERY ||
                  j.suggestionType === $.fd.QUERY_USER) &&
                  (0, F.A)(
                    Object.values(
                      ((ue = j.scoringContext) === null || ue === void 0
                        ? void 0
                        : ue.frecencyScoreBonus) || {}
                    )
                  )) ||
                0,
            });
          },
          QUERY_HISTORY_LOG_INDEX: (j) =>
            ze({
              id: z.Q.QUERY_HISTORY_LOG_INDEX,
              value:
                (j.suggestionType === $.fd.QUERY_HISTORY && Nt(j.index)) || 0,
            }),
          QUERY_HISTORY_AGE_DECAY_30D: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.QUERY_HISTORY_AGE_DECAY_30D,
              value:
                (j.suggestionType === $.fd.QUERY_HISTORY &&
                  bt(we, j.lastUpdateTs, 30 * ne)) ||
                0,
            });
          },
          FUZZY_SCORE: (j) =>
            ze({
              id: z.Q.FUZZY_SCORE,
              value: j.score,
            }),
          FUZZY_SCORE_SCALED_EXP: (j) =>
            ze({
              id: z.Q.FUZZY_SCORE_SCALED_EXP,
              value: J(j.score) && 0.5 ** Math.min(j.score, 10),
            }),
          FUZZY_SCORE_SCALED_FLIPPED: (j) =>
            ze({
              id: z.Q.FUZZY_SCORE_SCALED_FLIPPED,
              value: J(j.score) && 10 - Math.min(j.score, 10),
            }),
          FUZZY_SCORE_SCALED_SUBTRACT: (j) =>
            ze({
              id: z.Q.FUZZY_SCORE_SCALED_SUBTRACT,
              value: J(j.score) && Math.min(j.score, 10) - 1,
            }),
          FUZZY_SCORE_50: (j) =>
            ze({
              id: z.Q.FUZZY_SCORE_50,
              value: j.bonusPointMap && j.bonusPointMap.fuzzyScoreBonus === 50,
            }),
          FUZZY_SCORE_25: (j) =>
            ze({
              id: z.Q.FUZZY_SCORE_25,
              value: j.bonusPointMap && j.bonusPointMap.fuzzyScoreBonus === 25,
            }),
          FUZZY_SCORE_ALL: (j) =>
            ze({
              id: z.Q.FUZZY_SCORE_ALL,
              value:
                j.bonusPointMap &&
                j.bonusPointMap.fuzzyScoreBonus &&
                j.bonusPointMap.fuzzyScoreBonus < 25,
            }),
          FILTER_USER_IS_ACTIVE: (j) =>
            ze({
              id: z.Q.FILTER_USER_IS_ACTIVE,
              value:
                j.lastSuggestionToken &&
                j.lastTokenMemberOrNull &&
                (0, l.ls)(j.lastTokenMemberOrNull),
            }),
          FILTER_USER_IS_CURRENT_USER: (j) =>
            ze({
              id: z.Q.FILTER_USER_IS_CURRENT_USER,
              value:
                j.lastSuggestionToken &&
                j.lastTokenMemberOrNull &&
                (0, l.fy)(j.lastTokenMemberOrNull),
            }),
          FILTER_USER_DM_IS_STARRED: (j) =>
            ze({
              id: z.Q.FILTER_USER_DM_IS_STARRED,
              value: j.lastTokenIm && j.lastTokenImIsStarred,
            }),
          FILTER_USER_DM_IS_UNREAD: (j) =>
            ze({
              id: z.Q.FILTER_USER_DM_IS_UNREAD,
              value: j.lastTokenIm && (0, o.KJ)(j.lastTokenIm),
            }),
          FILTER_USER_DM_READ_AGE_DECAY_7D: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.FILTER_USER_DM_READ_AGE_DECAY_7D,
              value:
                (j.lastTokenIm && bt(we, j.lastTokenImLastRead, 7 * ne)) || 0,
            });
          },
          FILTER_USER_DM_READ_AGE_DECAY_2H: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.FILTER_USER_DM_READ_AGE_DECAY_2H,
              value:
                (j.lastTokenIm && bt(we, j.lastTokenImLastRead, 2 * ee)) || 0,
            });
          },
          FILTER_USER_DM_LATEST_MSG_AGE_DECAY_7D: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.FILTER_USER_DM_LATEST_MSG_AGE_DECAY_7D,
              value:
                (j.lastTokenIm &&
                  bt(
                    we,
                    parseFloat(
                      (tn = j.lastTokenImLatest) !== null && tn !== void 0
                        ? tn
                        : ""
                    ),
                    7 * ne
                  )) ||
                0,
            });
          },
          FILTER_USER_DM_LATEST_MSG_AGE_DECAY_2H: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.FILTER_USER_DM_LATEST_MSG_AGE_DECAY_2H,
              value:
                (j.lastTokenIm &&
                  bt(
                    we,
                    parseFloat(
                      (Ht = j.lastTokenImLatest) !== null && Ht !== void 0
                        ? Ht
                        : ""
                    ),
                    2 * ee
                  )) ||
                0,
            });
          },
          FILTER_USER_FIRST_NAME_NORMAL_MATCH: (j) =>
            Ot({
              id: z.Q.FILTER_USER_FIRST_NAME_NORMAL_MATCH,
              suggestion: j,
              extractionFunction: Yn,
              text: Bn(j),
            }),
          FILTER_USER_FIRST_NAME_NORMAL_PREFIX_MATCH: (j) =>
            Ot({
              id: z.Q.FILTER_USER_FIRST_NAME_NORMAL_PREFIX_MATCH,
              suggestion: j,
              extractionFunction: Qn,
              text: Bn(j),
            }),
          FILTER_USER_LAST_NAME_NORMAL_MATCH: (j) =>
            Ot({
              id: z.Q.FILTER_USER_LAST_NAME_NORMAL_MATCH,
              suggestion: j,
              extractionFunction: Yn,
              text: Rn(j),
            }),
          FILTER_USER_LAST_NAME_NORMAL_PREFIX_MATCH: (j) =>
            Ot({
              id: z.Q.FILTER_USER_LAST_NAME_NORMAL_PREFIX_MATCH,
              suggestion: j,
              extractionFunction: Qn,
              text: Rn(j),
            }),
          FILTER_USER_PRIORITY: (j) =>
            ze({
              id: z.Q.FILTER_USER_PRIORITY,
              value: j.lastTokenIm && (j == null ? void 0 : j.priority),
            }),
          HERE_KEYWORD: (j) =>
            ze({
              id: z.Q.HERE_KEYWORD,
              value: j.name === "here",
            }),
          HERE_KEYWORD_EXACT_MATCH: (j) =>
            ze({
              id: z.Q.HERE_KEYWORD_EXACT_MATCH,
              value: j.name === "here" && j.query === "here",
            }),
          IS_BROADCAST_KEYWORD: (j) =>
            ze({
              id: z.Q.IS_BROADCAST_KEYWORD,
              value: !!(j.type && j.type === "broadcastKeyword"),
            }),
          BROADCAST_KEYWORD_NORMAL_MATCH: (j) =>
            ze({
              id: z.Q.BROADCAST_KEYWORD_NORMAL_MATCH,
              value: !!(
                j.type &&
                j.type === "broadcastKeyword" &&
                Yn({
                  text: (Kt = j.name) !== null && Kt !== void 0 ? Kt : "",
                  normalizedQuery: j.normalizedQuery,
                })
              ),
            }),
          EMOJI_EXACT_MATCH: (j) =>
            ze({
              id: z.Q.EMOJI_EXACT_MATCH,
              value: j.bonusPointMap && j.bonusPointMap.isEmojiExactMatch && 1,
            }),
          QUERY_TOKEN_NORMAL_MATCH: (j) =>
            Ot({
              id: z.Q.QUERY_TOKEN_NORMAL_MATCH,
              suggestion: j,
              extractionFunction: Yn,
              text: zn(j),
            }),
          QUERY_TOKEN_NORMAL_PREFIX_MATCH: (j) =>
            Ot({
              id: z.Q.QUERY_TOKEN_NORMAL_PREFIX_MATCH,
              suggestion: j,
              extractionFunction: Qn,
              text: zn(j),
            }),
          FILTER_CHANNEL_IS_ARCHIVED: (j) =>
            ze({
              id: z.Q.FILTER_CHANNEL_IS_ARCHIVED,
              value: (0, r.F)(j.lastTokenChannelOrNull),
            }),
          FILTER_CHANNEL_IS_MEMBER: (j) =>
            ze({
              id: z.Q.FILTER_CHANNEL_IS_MEMBER,
              value: (0, c.bl)(j.lastTokenChannelOrNull),
            }),
          FILTER_CHANNEL_IS_STARRED: (j) =>
            ze({
              id: z.Q.FILTER_CHANNEL_IS_STARRED,
              value: j.lastTokenChannelIsStarred,
            }),
          FILTER_CHANNEL_IS_UNREAD: (j) =>
            ze({
              id: z.Q.FILTER_CHANNEL_IS_UNREAD,
              value: (0, o.KJ)(j.lastTokenChannelOrNull),
            }),
          FILTER_CHANNEL_READ_AGE_DECAY_7D: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.FILTER_CHANNEL_READ_AGE_DECAY_7D,
              value: bt(we, j.lastTokenChannelLastRead, 7 * ne),
            });
          },
          FILTER_CHANNEL_READ_AGE_DECAY_2H: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.FILTER_CHANNEL_READ_AGE_DECAY_2H,
              value: bt(we, j.lastTokenChannelLastRead, 2 * ee),
            });
          },
          FILTER_CHANNEL_PRIORITY: (j) =>
            ze({
              id: z.Q.FILTER_CHANNEL_PRIORITY,
              value: j == null ? void 0 : j.priority,
            }),
          CHANNEL_IS_FROZEN: (j, ue) => {
            let { itemIsChannel: we } = ue;
            return ze({
              id: z.Q.CHANNEL_IS_FROZEN,
              value: we && (0, Ae.Zz)(j.item),
            });
          },
          USER_DM_IS_FROZEN: (j, ue) => {
            let { itemIsMember: we } = ue;
            return ze({
              id: z.Q.USER_DM_IS_FROZEN,
              value: we && j.im && (0, Ae.Zz)(j.im),
            });
          },
          CHANNEL_HAS_DRAFT: (j) =>
            ze({
              id: z.Q.CHANNEL_HAS_DRAFT,
              value: j.hasDraft,
            }),
          USER_DM_HAS_DRAFT: (j) =>
            ze({
              id: z.Q.USER_DM_HAS_DRAFT,
              value: j.imHasDraft,
            }),
          EMOJI_QUERY_LENGTH_RATIO: (j) =>
            ze({
              id: z.Q.EMOJI_QUERY_LENGTH_RATIO,
              value: j.emojiQueryLengthRatio,
            }),
          EMOJI_TOTAL_COMBO_BREAKS: (j) =>
            ze({
              id: z.Q.EMOJI_TOTAL_COMBO_BREAKS,
              value: j.emojiTotalComboBreaks,
            }),
          EMOJI_COMBO_BREAK_0: (j) =>
            ze({
              id: z.Q.EMOJI_COMBO_BREAK_0,
              value: j.emojiTotalComboBreaks === 0,
            }),
          EMOJI_COMBO_BREAK_1: (j) =>
            ze({
              id: z.Q.EMOJI_COMBO_BREAK_1,
              value: j.emojiTotalComboBreaks === 1,
            }),
          EMOJI_COMBO_BREAK_2: (j) =>
            ze({
              id: z.Q.EMOJI_COMBO_BREAK_2,
              value: j.emojiTotalComboBreaks === 2,
            }),
          EMOJI_COMBO_BREAK_3: (j) =>
            ze({
              id: z.Q.EMOJI_COMBO_BREAK_3,
              value: j.emojiTotalComboBreaks === 3,
            }),
          TYPE_APP_ACTION: (j) =>
            ze({
              id: z.Q.TYPE_APP_ACTION,
              value: j.suggestionType === $.fd.APP_ACTION,
            }),
          OS_APP_ACTION: (j, ue) => {
            let { source: we } = ue;
            return ze({
              id: z.Q.OS_APP_ACTION,
              value:
                (we == null ? void 0 : we.startsWith("omniswitcher")) &&
                j.suggestionType === $.fd.APP_ACTION,
            });
          },
          TYPE_APP: (j) =>
            ze({
              id: z.Q.TYPE_APP,
              value: j.suggestionType === $.fd.APP,
            }),
          TYPE_SLASH_COMMAND: (j) =>
            ze({
              id: z.Q.TYPE_SLASH_COMMAND,
              value: j.suggestionType === $.fd.SLASH_COMMAND,
            }),
          TYPE_GLOBAL_ACTION: (j) =>
            ze({
              id: z.Q.TYPE_GLOBAL_ACTION,
              value: j.suggestionType === $.fd.GLOBAL_ACTION,
            }),
          IS_INVITE_WORKSPACE: (j) =>
            ze({
              id: z.Q.IS_INVITE_WORKSPACE,
              value: j.id === "slack-invite-to-workspace",
            }),
          TYPE_CHANNEL_ACTION: (j) =>
            ze({
              id: z.Q.TYPE_CHANNEL_ACTION,
              value: j.suggestionType === $.fd.CHANNEL_ACTION,
            }),
          TYPE_WORKFLOW_TRIGGER: (j) =>
            ze({
              id: z.Q.TYPE_WORKFLOW_TRIGGER,
              value: j.suggestionType === $.fd.WORKFLOW_TRIGGER,
            }),
          TYPE_NAVIGATION_MESSAGE: (j) =>
            ze({
              id: z.Q.TYPE_NAVIGATION_MESSAGE,
              value: j.suggestionType === $.fd.MESSAGE_NAVIGATION,
            }),
          TYPE_EMOJI: (j) =>
            ze({
              id: z.Q.TYPE_EMOJI,
              value: j.suggestionType === $.fd.EMOJI,
            }),
          HAS_CHANNEL_ASSOCIATION: (j) =>
            ze({
              id: z.Q.HAS_CHANNEL_ASSOCIATION,
              value: j.associatedWithCurrentChannel,
            }),
          MEMBER_OF_CURRENT_CHANNEL: (j) =>
            ze({
              id: z.Q.MEMBER_OF_CURRENT_CHANNEL,
              value: j.isMemberOfCurrentChannel,
            }),
          QUERY_LENGTH_DECAY_NORMAL_MATCH_CHANNEL: (j) =>
            Ot({
              id: z.Q.QUERY_LENGTH_DECAY_NORMAL_MATCH_CHANNEL,
              suggestion: j,
              extractionFunction: Ft,
              text: Yt(j, $.fd.CHANNEL_NAVIGATION),
            }),
          FRECENCY_HIT_VISIT_DECAY_2H: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.FRECENCY_HIT_VISIT_DECAY_2H,
              value: bt(we, j.latestHitVisit, 2 * ee) || 0,
            });
          },
          FRECENCY_HIT_VISIT_DECAY_7D: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.FRECENCY_HIT_VISIT_DECAY_7D,
              value: bt(we, j.latestHitVisit, 7 * ne) || 0,
            });
          },
          FRECENCY_ITEM_VISIT_DECAY_2H: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.FRECENCY_ITEM_VISIT_DECAY_2H,
              value: bt(we, j.latestItemVisit, 2 * ee) || 0,
            });
          },
          FRECENCY_ITEM_VISIT_DECAY_7D: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.FRECENCY_ITEM_VISIT_DECAY_7D,
              value: bt(we, j.latestItemVisit, 7 * ne) || 0,
            });
          },
          MPIM_MEMBERS: (j) =>
            ze({
              id: z.Q.MPIM_MEMBERS,
              value: j.item.members.length,
            }),
          MPIM_MEMBER_NAME_MATCHES: (j) =>
            ze({
              id: z.Q.MPIM_MEMBER_NAME_MATCHES,
              value:
                j.scoreDetailsByMember &&
                Object.values(j.scoreDetailsByMember).filter(
                  (ue) =>
                    ((qt = ue.score_details.real_name) !== null && qt !== void 0
                      ? qt
                      : -1 / 0) >= 0 ||
                    ((Tn = ue.score_details.display_name) !== null &&
                    Tn !== void 0
                      ? Tn
                      : -1 / 0) >= 0
                ).length,
            }),
          MPIM_MEMBER_ALL_MATCHES: (j) =>
            ze({
              id: z.Q.MPIM_MEMBER_ALL_MATCHES,
              value:
                j.scoreDetailsByMember &&
                Object.keys(j.scoreDetailsByMember).length,
            }),
          MPIM_MATCHER_SCORE: (j) =>
            ze({
              id: z.Q.MPIM_MATCHER_SCORE,
              value: j.score,
            }),
          MPIM_MATCHER_SCORE_0: (j) =>
            ze({
              id: z.Q.MPIM_MATCHER_SCORE_0,
              value: j.score === 0,
            }),
          MPIM_MATCHER_SCORE_1: (j) =>
            ze({
              id: z.Q.MPIM_MATCHER_SCORE_1,
              value: j.score === 1,
            }),
          MPIM_MATCHER_SCORE_2: (j) =>
            ze({
              id: z.Q.MPIM_MATCHER_SCORE_2,
              value: j.score === 2,
            }),
          MPIM_MATCHER_SCORE_3: (j) =>
            ze({
              id: z.Q.MPIM_MATCHER_SCORE_3,
              value: j.score === 3,
            }),
          EMOJI_TEAM_CTR_90DD: (j) => {
            var ue;
            return ze({
              id: z.Q.EMOJI_TEAM_CTR_90DD,
              value:
                (ue = j.offlineFeatures) === null || ue === void 0
                  ? void 0
                  : ue.team_ctr_90dd,
            });
          },
          EMOJI_USER_CTR_30DD: (j) => {
            var ue;
            return ze({
              id: z.Q.EMOJI_USER_CTR_30DD,
              value:
                (ue = j.offlineFeatures) === null || ue === void 0
                  ? void 0
                  : ue.user_ctr_30dd,
            });
          },
          MPIM_TEAM_CTR_90DD: (j) => {
            var ue;
            return ze({
              id: z.Q.MPIM_TEAM_CTR_90DD,
              value:
                (ue = j.offlineFeatures) === null || ue === void 0
                  ? void 0
                  : ue.team_ctr_90dd,
            });
          },
          MPIM_USER_CTR_30DD: (j) => {
            var ue;
            return ze({
              id: z.Q.MPIM_USER_CTR_30DD,
              value:
                (ue = j.offlineFeatures) === null || ue === void 0
                  ? void 0
                  : ue.user_ctr_30dd,
            });
          },
          CHANNEL_TEAM_CTR_90DD: (j) => {
            var ue;
            return ze({
              id: z.Q.CHANNEL_TEAM_CTR_90DD,
              value:
                (ue = j.offlineFeatures) === null || ue === void 0
                  ? void 0
                  : ue.team_ctr_90dd,
            });
          },
          CHANNEL_USER_CTR_30DD: (j) => {
            var ue;
            return ze({
              id: z.Q.CHANNEL_USER_CTR_30DD,
              value:
                (ue = j.offlineFeatures) === null || ue === void 0
                  ? void 0
                  : ue.user_ctr_30dd,
            });
          },
          USER_ENTITY_TYPE_CTR_30DD: (j) =>
            ze({
              id: z.Q.USER_ENTITY_TYPE_CTR_30DD,
              value: j.entityTypeCtr,
            }),
          NUM_RESULTS: (j) =>
            ze({
              id: z.Q.NUM_RESULTS,
              value: j.numResults,
            }),
          QUERY_IS_SELF: (j) => {
            var ue;
            return ze({
              id: z.Q.QUERY_IS_SELF,
              value:
                ((ue = j.scoreDetails) === null || ue === void 0
                  ? void 0
                  : ue.self_score) === 0,
            });
          },
          CURRENT_USER_TEXTY: (j, ue) => {
            let { isCurrentUser: we, source: ft } = ue;
            return ze({
              id: z.Q.CURRENT_USER_TEXTY,
              value: ft === "texty-autocomplete" && we,
            });
          },
          FILE_AGE_DECAY_7D: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.FILE_AGE_DECAY_7D,
              value: j.item && bt(we, j.item.created, 7 * ne),
            });
          },
          FILE_AGE_DECAY_28D: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.FILE_AGE_DECAY_28D,
              value: j.item && bt(we, j.item.created, 28 * ne),
            });
          },
          FILE_AGE_DECAY_90D: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.FILE_AGE_DECAY_90D,
              value: j.item && bt(we, j.item.created, 90 * ne),
            });
          },
          FILE_FROM_CURRENT_USER: (j) =>
            ze({
              id: z.Q.FILE_FROM_CURRENT_USER,
              value: j.fromCurrentUser,
            }),
          NAV_NORMAL_MATCH_CHANNEL_LOG_RESULTS: (j) =>
            Ot({
              id: z.Q.NAV_NORMAL_MATCH_CHANNEL_LOG_RESULTS,
              suggestion: j,
              extractionFunction: Yn,
              text: Yt(j, $.fd.CHANNEL_NAVIGATION),
              multiplier: Nt(j.numResults),
            }),
          FILE_LOG_PUBLIC_SHARES: (j) => {
            var ue, we;
            return ze({
              id: z.Q.FILE_LOG_PUBLIC_SHARES,
              value:
                ((ue = j.item) === null ||
                ue === void 0 ||
                (we = ue.shares) === null ||
                we === void 0
                  ? void 0
                  : we.public) && Nt(Object.keys(j.item.shares.public).length),
            });
          },
          FILE_LOG_PRIVATE_SHARES: (j) => {
            var ue, we;
            return ze({
              id: z.Q.FILE_LOG_PRIVATE_SHARES,
              value:
                ((ue = j.item) === null ||
                ue === void 0 ||
                (we = ue.shares) === null ||
                we === void 0
                  ? void 0
                  : we.private) &&
                Nt(Object.keys(j.item.shares.private).length),
            });
          },
          FILE_LOG_ACTIONS: (j) => {
            var ue;
            return ze({
              id: z.Q.FILE_LOG_ACTIONS,
              value:
                ((ue = j.item) === null || ue === void 0
                  ? void 0
                  : ue.actions) && Nt(j.item.actions.length),
            });
          },
          FILE_LATEST_ACTION_AGE_DECAY_2H: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.FILE_LATEST_ACTION_AGE_DECAY_2H,
              value: bt(we, j.latestActionTs, 2 * ee),
            });
          },
          FILE_LATEST_ACTION_AGE_DECAY_7D: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.FILE_LATEST_ACTION_AGE_DECAY_7D,
              value: bt(we, j.latestActionTs, 7 * ne),
            });
          },
          FILE_LATEST_ACTION_AGE_DECAY_90D: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.FILE_LATEST_ACTION_AGE_DECAY_90D,
              value: bt(we, j.latestActionTs, 90 * ne),
            });
          },
          FILE_LATEST_SHARE_AGE_DECAY_2H: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.FILE_LATEST_SHARE_AGE_DECAY_2H,
              value: bt(we, j.latestShareTs, 2 * ee),
            });
          },
          FILE_LATEST_SHARE_AGE_DECAY_7D: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.FILE_LATEST_SHARE_AGE_DECAY_7D,
              value: bt(we, j.latestShareTs, 7 * ne),
            });
          },
          FILE_LATEST_SHARE_AGE_DECAY_90D: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.FILE_LATEST_SHARE_AGE_DECAY_90D,
              value: bt(we, j.latestShareTs, 90 * ne),
            });
          },
          FILE_CHANNEL_CTR: (j) =>
            ze({
              id: z.Q.FILE_CHANNEL_CTR,
              value: j.fileChannelCtr,
            }),
          FILE_SUGGESTIONS_SEARCHER: (j) =>
            ze({
              id: z.Q.FILE_SUGGESTIONS_SEARCHER,
              value: j.fileSuggestionsFromSearcher,
            }),
          FILE_USER_CTR: (j) =>
            ze({
              id: z.Q.FILE_USER_CTR,
              value: j.fileUserCtr,
            }),
          FILE_NAME_CONTAINS_QUERY_NORMALIZED: (j) =>
            Ot({
              id: z.Q.FILE_NAME_CONTAINS_QUERY_NORMALIZED,
              suggestion: j,
              extractionFunction: At,
              text: Yt(j, $.fd.FILE_NAVIGATION),
            }),
          FILE_IS_CANVAS: (j) =>
            ze({
              id: z.Q.FILE_IS_CANVAS,
              value: Wn(j, "quip"),
            }),
          FILE_HAS_DMS_WITH_CREATOR: (j) =>
            ze({
              id: z.Q.FILE_HAS_DMS_WITH_CREATOR,
              value: j.hasNonNullDmsWithCreator,
            }),
          FILE_HAS_DMS_WITH_CREATOR_V2: (j) =>
            ze({
              id: z.Q.FILE_HAS_DMS_WITH_CREATOR_V2,
              value: j.hasNonNullLocalOrRemoteDmsWithCreator,
            }),
          FILE_LATEST_VIEW_BY_USER_OLDER_90D: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.FILE_LATEST_VIEW_BY_USER_OLDER_90D,
              value: xn(
                we,
                parseFloat(
                  (Mt = j.lastReadTs) !== null && Mt !== void 0 ? Mt : ""
                ) / 1e3,
                90 * ne
              ),
            });
          },
          APP_NAME_PREFIX_MATCH: (j) => {
            var ue;
            return Ot({
              id: z.Q.APP_NAME_PREFIX_MATCH,
              suggestion: j,
              extractionFunction: Qn,
              text:
                (ue = j.item) === null || ue === void 0 ? void 0 : ue.appName,
            });
          },
          BEST_NAME_MATCH_LOG_RESULTS: (j) =>
            ze({
              id: z.Q.BEST_NAME_MATCH_LOG_RESULTS,
              value: j.bestNameIsExactMatch && Nt(j.numResults),
            }),
          SLASH_COMMAND_USER_CTR: (j) => {
            var ue;
            return ze({
              id: z.Q.SLASH_COMMAND_USER_CTR,
              value:
                (ue = j.offlineFeatures) === null || ue === void 0
                  ? void 0
                  : ue.user_ctr_30dd,
            });
          },
          WORKFLOW_TRIGGER_USER_CTR: (j) => {
            var ue;
            return ze({
              id: z.Q.WORKFLOW_TRIGGER_USER_CTR,
              value:
                (ue = j.offlineFeatures) === null || ue === void 0
                  ? void 0
                  : ue.user_ctr_30dd,
            });
          },
          GLOBAL_ACTION_USER_CTR: (j) => {
            var ue;
            return ze({
              id: z.Q.GLOBAL_ACTION_USER_CTR,
              value:
                (ue = j.offlineFeatures) === null || ue === void 0
                  ? void 0
                  : ue.user_ctr_30dd,
            });
          },
          CHANNEL_ACTION_USER_CTR: (j) => {
            var ue;
            return ze({
              id: z.Q.CHANNEL_ACTION_USER_CTR,
              value:
                (ue = j.offlineFeatures) === null || ue === void 0
                  ? void 0
                  : ue.user_ctr_30dd,
            });
          },
          APP_ACTION_USER_CTR: (j) => {
            var ue;
            return ze({
              id: z.Q.APP_ACTION_USER_CTR,
              value:
                (ue = j.offlineFeatures) === null || ue === void 0
                  ? void 0
                  : ue.user_ctr_30dd,
            });
          },
          SLASH_COMMAND_TEAM_CTR: (j) => {
            var ue;
            return ze({
              id: z.Q.SLASH_COMMAND_TEAM_CTR,
              value:
                (ue = j.offlineFeatures) === null || ue === void 0
                  ? void 0
                  : ue.team_ctr_90dd,
            });
          },
          WORKFLOW_TRIGGER_TEAM_CTR: (j) => {
            var ue;
            return ze({
              id: z.Q.WORKFLOW_TRIGGER_TEAM_CTR,
              value:
                (ue = j.offlineFeatures) === null || ue === void 0
                  ? void 0
                  : ue.team_ctr_90dd,
            });
          },
          GLOBAL_ACTION_TEAM_CTR: (j) => {
            var ue;
            return ze({
              id: z.Q.GLOBAL_ACTION_TEAM_CTR,
              value:
                (ue = j.offlineFeatures) === null || ue === void 0
                  ? void 0
                  : ue.team_ctr_90dd,
            });
          },
          CHANNEL_ACTION_TEAM_CTR: (j) => {
            var ue;
            return ze({
              id: z.Q.CHANNEL_ACTION_TEAM_CTR,
              value:
                (ue = j.offlineFeatures) === null || ue === void 0
                  ? void 0
                  : ue.team_ctr_90dd,
            });
          },
          APP_ACTION_TEAM_CTR: (j) => {
            var ue;
            return ze({
              id: z.Q.APP_ACTION_TEAM_CTR,
              value:
                (ue = j.offlineFeatures) === null || ue === void 0
                  ? void 0
                  : ue.team_ctr_90dd,
            });
          },
          SHORTCUT_ENTITY_TYPE_CTR: (j) =>
            ze({
              id: z.Q.SHORTCUT_ENTITY_TYPE_CTR,
              value: j.entityTypeCtr,
            }),
          EXACT_MATCH_LOG_RESULTS: (j) =>
            ze({
              id: z.Q.EXACT_MATCH_LOG_RESULTS,
              value: (j.isExactMatch ? 1 : 0) * Nt(j.numResults),
            }),
          HISTORY_AGE_DECAY_2H: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.HISTORY_AGE_DECAY_2H,
              value: bt(we, j.historyTs, 2 * ee),
            });
          },
          HISTORY_AGE_DECAY_7D: (j, ue) => {
            let { now: we } = ue;
            return ze({
              id: z.Q.HISTORY_AGE_DECAY_7D,
              value: bt(we, j.historyTs, 7 * ne),
            });
          },
          HISTORY_POSITION: (j) =>
            ze({
              id: z.Q.HISTORY_POSITION,
              value: j.historyPosition,
            }),
        };
        class dn {
          serialize() {
            const ue = new Ee();
            this.featureList.forEach((ft) =>
              Sn({
                feature: ft,
                serializer: ue,
              })
            );
            const we = ue.serialize();
            return `${this.featuresVersion}:${we}`;
          }
          valueForFeature(ue) {
            let we =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : !1;
            if (ue == null) return k().error(`Invalid feature id: ${ue}`), null;
            const ft = this.featureList.find((pn) => pn.id === ue);
            if (!(0, V.A)(ft)) return we ? Vt(ft) || "" : Zt(ft) || 0;
          }
          static fromSuggestion(ue, we) {
            const ft = Date.now() / 1e3,
              pn = !!(0, l.NB)(ue.item),
              An = !!((0, a.rW)(ue.item) || (0, a.Zp)(ue.item)),
              yn = pn && (0, l.fy)(ue.item),
              xt = {
                itemIsChannel: An,
                itemIsMember: pn,
                now: ft,
                isCurrentUser: yn,
                source: we,
              };
            return new this(
              rn(ue, we).map((Vn) => (Jt[Vn] && Jt[Vn](ue, xt)) || null)
            );
          }
          constructor(ue) {
            (this.featureList = ue), (this.featuresVersion = "v8");
          }
        }
        _(dn, "SuggestionFeatureVector");
        function rn(j, ue) {
          return ue === "slash-command-menu"
            ? [...N.globalFeatures]
            : j.suggestionType === $.fd.USER_NAVIGATION
            ? [...N.globalFeatures, ...N.userFeatures]
            : j.suggestionType === $.fd.CHANNEL_NAVIGATION
            ? [...N.globalFeatures, ...N.channelFeatures]
            : j.suggestionType === $.fd.MPIM_NAVIGATION
            ? [...N.globalFeatures, ...N.mpimFeatures]
            : j.suggestionType === $.fd.VIEW_NAVIGATION
            ? [...N.globalFeatures, ...N.viewFeatures]
            : j.suggestionType === $.fd.FILE_NAVIGATION
            ? [...N.globalFeatures, ...N.fileFeatures, ...N.queryFeatures]
            : j.suggestionType === $.fd.LINK_NAVIGATION
            ? [...N.globalFeatures, ...N.linkFeatures]
            : j.suggestionType === $.fd.MODAL_NAVIGATION
            ? [...N.globalFeatures, ...N.modalFeatures]
            : j.suggestionType === $.fd.TEAM_NAVIGATION
            ? [...N.globalFeatures, ...N.teamFeatures]
            : j.type === "emoji"
            ? [...N.globalFeatures, ...N.emojiFeatures]
            : j.type === "broadcastKeyword"
            ? [...N.globalFeatures, ...N.broadcastKeywordFeatures]
            : j.suggestionType === $.fd.QUERY ||
              j.suggestionType === $.fd.QUERY_USER
            ? [...N.globalFeatures, ...N.queryFeatures]
            : j.suggestionType === $.fd.APP_ACTION
            ? [
                ...N.globalFeatures,
                ...N.shortcutFeatures,
                ...N.appActionFeatures,
              ]
            : j.suggestionType === $.fd.SLASH_COMMAND
            ? [
                ...N.globalFeatures,
                ...N.shortcutFeatures,
                ...N.slashCommandFeatures,
              ]
            : j.suggestionType === $.fd.GLOBAL_ACTION
            ? [
                ...N.globalFeatures,
                ...N.shortcutFeatures,
                ...N.globalActionFeatures,
              ]
            : j.suggestionType === $.fd.CHANNEL_ACTION
            ? [
                ...N.globalFeatures,
                ...N.shortcutFeatures,
                ...N.channelActionFeatures,
              ]
            : j.suggestionType === $.fd.WORKFLOW_TRIGGER
            ? [
                ...N.globalFeatures,
                ...N.shortcutFeatures,
                ...N.workflowTriggerFeatures,
              ]
            : j.suggestionType === $.fd.APP
            ? [...N.globalFeatures, ...N.appFeatures]
            : j.suggestionType === $.fd.MESSAGE_NAVIGATION
            ? [...N.globalFeatures, ...N.messageFeatures]
            : j.suggestionType === $.fd.QUERY_HISTORY
            ? [...N.globalFeatures, ...N.queryFeatures]
            : N.globalFeatures;
        }
        _(rn, "getFeaturesForExtraction");
        class gn {
          constructor({ id: ue, value: we }) {
            ue == null && k().error(`Invalid feature id: ${ue}`);
            const ft = Z(ue);
            ft || k().error(`Missing feature name for id: ${ue}`),
              (this.id = ue),
              (this.name = ft),
              (this.valueOrNull = we);
          }
        }
        _(gn, "Feature");
        function Zt(j) {
          return typeof j.valueOrNull == "number" && isFinite(j.valueOrNull)
            ? j.valueOrNull
            : typeof j.valueOrNull == "boolean" && j.valueOrNull
            ? 1
            : 0;
        }
        _(Zt, "getNumericValueForFeature");
        function Vt(j) {
          return j.valueOrNull === null || j.valueOrNull === void 0
            ? ""
            : j.valueOrNull.toString();
        }
        _(Vt, "getStringValueForFeature");
        function Sn(j) {
          let { feature: ue, serializer: we } = j;
          ue.valueOrNull === null && we.writeNullFeature(),
            typeof ue.valueOrNull == "number" &&
              we.writeNumericalFeature(ue.valueOrNull, ue.id),
            typeof ue.valueOrNull == "boolean" &&
              we.writeBinaryFeature(ue.valueOrNull, ue.id),
            typeof ue.valueOrNull == "string" &&
              we.writeTextFeature(ue.valueOrNull, ue.id);
        }
        _(Sn, "serializeFeature");
        function ze(j) {
          let { id: ue, value: we } = j;
          const ft = (0, V.A)(we) ? null : we;
          return new gn({
            id: ue,
            value: ft,
          });
        }
        _(ze, "makeFeature");
        function Ot(j) {
          let {
            id: ue,
            suggestion: we,
            extractionFunction: ft,
            text: pn = Ct(we),
            multiplier: An = 1,
          } = j;
          if (!pn)
            return ze({
              id: ue,
              value: null,
            });
          const yn = ft({
              text: pn,
              query: we.query || "",
              normalizedQuery: we.normalizedQuery || "",
            }),
            xt = yn === !0 ? 1 : yn === !1 ? 0 : yn;
          return ze({
            id: ue,
            value: (xt ?? 0) * An,
          });
        }
        _(Ot, "makeTextFeature");
        function fn(j) {
          let ue = null;
          return (
            (j.suggestionType === $.fd.QUERY ||
              j.suggestionType === $.fd.QUERY_USER ||
              j.suggestionType === $.fd.CHANNEL_NAVIGATION ||
              j.suggestionType === $.fd.MPIM_NAVIGATION ||
              j.suggestionType === $.fd.USER_NAVIGATION ||
              j.suggestionType === $.fd.TEAM_NAVIGATION ||
              j.suggestionType === $.fd.VIEW_NAVIGATION ||
              j.suggestionType === $.fd.FILE_NAVIGATION) &&
              (ue = j.frecencyScore),
            ue
          );
        }
        _(fn, "getFrecencyScoreForSuggestion");
        function ln(j) {
          let ue = null;
          return (
            j.suggestionType === $.fd.QUERY &&
              j.lastSuggestionToken &&
              j.lastSuggestionToken.type === $.S6.API &&
              (ue = j.lastSuggestionToken.querySuggestionScore),
            ue
          );
        }
        _(ln, "getQuerySuggestionScoreV2");
        function it(j) {
          let ue = null;
          return (
            j.suggestionType === $.fd.FILE_NAVIGATION && (ue = j.rawScore), ue
          );
        }
        _(it, "getFileSuggestionScore");
        function Tt(j) {
          return j && j.lastSuggestionToken
            ? j.lastSuggestionToken.toString()
            : "";
        }
        _(Tt, "getLastSuggestionTokenString");
        function Ct(j) {
          return hn(j)
            ? Tt(j)
            : j.suggestionType === $.fd.FILE_NAVIGATION
            ? j.name
            : null;
        }
        _(Ct, "getTextOrNullFromQuerySuggestion");
        function Rt(j) {
          return j.isNavigational || j.isAction || j.isApp ? j.name : null;
        }
        _(Rt, "getTextOrNullFromNavigationalSuggestion");
        function Yt(j, ue) {
          return j.suggestionType === ue ? j.name : null;
        }
        _(Yt, "getTextOrNullFromSuggestionWithType");
        function bn(j) {
          return j.suggestionType === $.fd.USER_NAVIGATION || (0, V.A)(j.name)
            ? null
            : j.name;
        }
        _(bn, "getTextOrNullFromSuggestionNotUser");
        function Wn(j, ue) {
          return j.suggestionType !== $.fd.FILE_NAVIGATION
            ? !1
            : j.fileType === ue;
        }
        _(Wn, "isFileTypeMatch");
        function hn(j) {
          return j.lastSuggestionToken
            ? j.lastSuggestionToken.type === $.S6.STRING ||
                j.lastSuggestionToken.type === $.S6.PHRASE ||
                j.lastSuggestionToken.type === $.S6.API
            : !1;
        }
        _(hn, "isActiveTokenStringLike");
        function Bn(j) {
          return (
            j.lastTokenMemberOrNull &&
            j.lastTokenMemberOrNull.profile &&
            j.lastTokenMemberOrNull.profile.first_name
          );
        }
        _(Bn, "getLastTokenUserFirstName");
        function Rn(j) {
          return (
            j.lastTokenMemberOrNull &&
            j.lastTokenMemberOrNull.profile &&
            j.lastTokenMemberOrNull.profile.last_name
          );
        }
        _(Rn, "getLastTokenUserLastName");
        function zn(j) {
          return j.lastTokenMemberName || j.lastTokenChannelName || null;
        }
        _(zn, "lastTokenName");
        function is(j) {
          return j
            ? j.im && j.lastReadImTs
              ? j.lastReadImTs
              : j.remoteImMetadata && j.lastReadRemoteImMetadataTs
              ? (j.lastReadRemoteImMetadataTs / 1e6).toString()
              : null
            : null;
        }
        _(is, "lastReadFromLocalClientElseCachedRemote");
        function ss(j) {
          let { text: ue, query: we } = j;
          return ue === we;
        }
        _(ss, "isExactMatch");
        function jn(j) {
          let { text: ue, query: we } = j;
          return !!(we && ue && (0, X.A)(ue, we));
        }
        _(jn, "isPrefixMatch");
        function Yn(j) {
          let { text: ue, normalizedQuery: we } = j;
          return (0, L.B)(ue).replace(/^[@#]/g, "") === we;
        }
        _(Yn, "isNormalizedExactMatch");
        function Qn(j) {
          let { text: ue, normalizedQuery: we } = j;
          const ft = (0, L.B)(ue).replace(/^[@#]/g, "");
          return !!(ft && we && (0, X.A)(ft, we));
        }
        _(Qn, "isNormalizedPrefixMatch");
        function es(j) {
          let { text: ue, query: we } = j;
          return (
            (0, q.A)(ue).length + ((0, oe.A)(ue, " ") ? 1 : 0) ===
            (0, q.A)(we).length
          );
        }
        _(es, "stringSameNumberWordsValueFromSuggestion");
        function Et(j) {
          let { text: ue, query: we } = j;
          return Math.max(0, ue.length - we.length);
        }
        _(Et, "excessStringLengthValueFromSuggestion");
        function gt(j) {
          let { text: ue, query: we } = j;
          return ue.length > 0 ? we.length / ue.length : 0;
        }
        _(gt, "queryRatioLengthValueFromSuggestion");
        function Ft(j) {
          let { text: ue, normalizedQuery: we } = j;
          return Yn({
            text: ue,
            normalizedQuery: we,
          }) && we.length > 1
            ? 2 ** -we.length
            : null;
        }
        _(Ft, "queryLengthDecayNormalMatch");
        function nn(j) {
          let { normalizedQuery: ue } = j;
          return ue.length;
        }
        _(nn, "queryLength");
        function Dn(j) {
          let { text: ue } = j;
          return ue.length;
        }
        _(Dn, "suggestionTextLength");
        function bt(j, ue, we) {
          if (ue) {
            var ft;
            return Math.min(
              1,
              Math.exp(
                (Math.log(0.5) / we) *
                  ((ft = In(j, ue)) !== null && ft !== void 0 ? ft : 0)
              )
            );
          }
          return 0;
        }
        _(bt, "expAgeDecay");
        function In(j, ue) {
          return ue ? Math.max(0, j - ue) : null;
        }
        _(In, "age");
        function xn(j, ue, we) {
          if (!ue) return !0;
          const ft = In(j, ue);
          return !ft || ft > we;
        }
        _(xn, "ageLatestOlderOrMissing");
        function Nt(j) {
          return j > 0 ? Math.log1p(j) : 0;
        }
        _(Nt, "log1pSafe");
        function At(j) {
          let { text: ue, normalizedQuery: we } = j;
          const ft = (0, L.B)(ue).replace(/^[@#]/g, "");
          return ft && we && ft.includes(we);
        }
        _(At, "stringContainsQueryNormalized");
        class te {
          score(ue) {
            let we =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : {},
              ft = 0;
            const pn = ue.featureList.length;
            for (let An = 0; An < pn; An++)
              ft +=
                this._weightForFeature(ue.featureList[An], we.source || null) *
                (Zt(ue.featureList[An]) || 0);
            return ft;
          }
          explain(ue) {
            let we =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : {};
            const ft = we.source || null,
              pn = ue.featureList.map((xt) => ({
                id: xt.id,
                name: xt.name,
                value: xt.valueOrNull,
                weight: this._weightForFeature(xt, ft),
                globalWeight: this._globalWeightForFeature(xt),
                score: this._weightForFeature(xt, ft) * Zt(xt),
              })),
              An = pn
                .filter((xt) => xt.score)
                .sort((xt, Vn) => Vn.score - xt.score),
              yn = pn.filter((xt) => xt.value && !xt.score && xt.name !== "ID");
            return {
              score: this.score(ue, we),
              features: [...An, ...yn],
              remoteModel: this.isRemote,
            };
          }
          _globalWeightForFeature(ue) {
            return this.weights[ue.name] || 0;
          }
          _weightForFeature(ue) {
            let we =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : null,
              ft = 0;
            ue.name === "USER_IS_EXTERNAL" && (ft = -1);
            const pn = this.weights[ue.name] || 0,
              yn =
                we &&
                (we === "composer_page__destination" || we.startsWith("share"))
                  ? "WRITE"
                  : "READ",
              xt = this.weights[`${yn}_${ue.name}`] || 0;
            return pn + xt + ft;
          }
          constructor(ue, we = !1) {
            (this.isRemote = we), (this.weights = ue);
          }
        }
        _(te, "LinearModel");
        class _e extends h.F {
          fetchData() {
            return (0, D.dispatchForTeamId)(
              this.teamId,
              (0, O.ej)({
                reason: "AutocompleteModelCache",
              })
            )
              .catch((ue) => ({
                model: null,
                omniswitcherModel: null,
                exception: ue,
              }))
              .then((ue) => {
                const we = {
                  model: null,
                  omniswitcherModel: null,
                };
                if (ue.model) {
                  const ft = (0, H.A)(
                    Object.entries(ue.model).map((pn) => {
                      let [An, yn] = pn;
                      return [An.toUpperCase(), yn];
                    })
                  );
                  we.model = new te(ft, !0);
                } else return null;
                if (ue.omniswitcher_model) {
                  const ft = (0, H.A)(
                    Object.entries(ue.omniswitcher_model).map((pn) => {
                      let [An, yn] = pn;
                      return [An.toUpperCase(), yn];
                    })
                  );
                  we.omniswitcherModel = new te(ft, !0);
                } else we.omniswitcherModel = we.model;
                return we;
              });
          }
          constructor(ue) {
            super(), (this.teamId = ue);
          }
        }
        _(_e, "AutocompleteModelCache");
        let Ie = null;
        function Ne(j) {
          return Ie || (Ie = new _e(j)), Ie;
        }
        _(Ne, "getAutocompleteModelCache");
        var We = e(1917953477),
          $e = e(220244708);
        const mt = new te({
            ACTIVE_TOKEN_FILTER_AFTER: -1.3342286966503,
            ACTIVE_TOKEN_FILTER_BEFORE: -1.5840743442206,
            ACTIVE_TOKEN_FILTER_DURING: -1.5067377681356,
            ACTIVE_TOKEN_FILTER_FROM: -0.32097975590927,
            ACTIVE_TOKEN_FILTER_HAS: 0.12307720392367,
            ACTIVE_TOKEN_FILTER_IN: -0.20437151727999,
            ACTIVE_TOKEN_FILTER_ON: -0.2331890332635,
            ACTIVE_TOKEN_FILTER_TO: -0.39179992363572,
            ACTIVE_TOKEN_FILTER_WITH: -2.6491467875516,
            ACTIVE_TOKEN_MEMBER: 3.3152339724625,
            ACTIVE_TOKEN_PHRASE: 1.6227243782418,
            ACTIVE_TOKEN_STRING: 1.2377431959723,
            APP_NAME_PREFIX_MATCH: 0.41310546603391,
            CHANNEL_ACTION_TEAM_CTR: 5.3683432201332,
            CHANNEL_ACTION_USER_CTR: -3.0316210543763,
            CHANNEL_IS_ARCHIVED: -0.87858649301233,
            CHANNEL_IS_MEMBER: 0.77730174627333,
            CHANNEL_IS_OTHER_TEAM: -0.61919041941926,
            CHANNEL_IS_STARRED: 0.42983549335324,
            CHANNEL_IS_UNREAD: 0.32493583671244,
            CHANNEL_READ_AGE_DECAY_7D: 1.7862684517169,
            CURRENT_USER_TEXTY: -2.0962311707595,
            EMOJI_COMBO_BREAK_0: 0.034181103626295,
            EMOJI_COMBO_BREAK_1: -1.5404314842404,
            EMOJI_COMBO_BREAK_2: -2.2796470967609,
            EMOJI_EXACT_MATCH: 0.183283071987,
            EMOJI_QUERY_LENGTH_RATIO: 1.0690358111219,
            EMOJI_USER_CTR_30DD: 5.1931307714537,
            FILE_AGE_DECAY_7D: 0.094311459141267,
            FILE_AGE_DECAY_90D: -0.068414601197763,
            FILE_FROM_CURRENT_USER: -0.053638049001005,
            FILE_HAS_DMS_WITH_CREATOR: -0.0061128361931085,
            FILE_IS_CANVAS: 0.3,
            FILE_LATEST_ACTION_AGE_DECAY_90D: 0.22470956185502,
            FILE_LATEST_VIEW_BY_USER_OLDER_90D: -1.5,
            FILE_LOG_ACTIONS: 0.31755825349717,
            FILE_LOG_PRIVATE_SHARES: 0.63647050316634,
            FILE_LOG_PUBLIC_SHARES: -0.4105759438314,
            FILE_NAME_CONTAINS_QUERY_NORMALIZED: 1,
            FILTER_USER_DM_READ_AGE_DECAY_2H: -0.39943623618561,
            FILTER_USER_DM_READ_AGE_DECAY_7D: 0.8400841724556,
            FILTER_USER_IS_ACTIVE: 0.42798763518113,
            FILTER_USER_PRIORITY: 0.71416734958181,
            FRECENCY_BONUS: 0.0083562726103486,
            FRECENCY_LOG_HIT_COUNT_SCALED: 1.0221320483578,
            FRECENCY_LOG_ITEM_COUNT_SCALED: 0.93494415431914,
            FRECENCY_WEIGHT_HIT_VISITS: 0.010783602348951,
            FRECENCY_WEIGHT_ITEM_VISITS: 0.019341183576389,
            FUZZY_SCORE_50: 0.95744512772969,
            FUZZY_SCORE_ALL: -2.1179514334905,
            GLOBAL_ACTION_USER_CTR: 6.0311738732755,
            HERE_KEYWORD_EXACT_MATCH: 2.8669041266612,
            HISTORY_AGE_DECAY_7D: 0.66414153833523,
            IS_BROADCAST_KEYWORD: 3.4759283393419,
            MEMBER_OF_CURRENT_CHANNEL: 3.3022467998568,
            MPIM_MATCHER_SCORE_0: -0.02289922354073,
            MPIM_MATCHER_SCORE_1: -1.2162030026989,
            MPIM_MATCHER_SCORE_2: -2.3109629676003,
            MPIM_MATCHER_SCORE_3: -2.545746172366,
            MPIM_MEMBER_ALL_MATCHES: 0.040175375087294,
            MPIM_MEMBER_NAME_MATCHES: 0.071667207602181,
            MPIM_READ_AGE_DECAY_7D: 2.0911081748312,
            MPIM_USER_CTR_30DD: 10.134770283044,
            MPIM_WITH_DEACTIVATED_USER: -1.1657978882602,
            NAV_NORMAL_MATCH_CHANNEL_LOG_RESULTS: 0.49306597435127,
            NAV_NORMAL_MATCH_USER: 0.83230837935037,
            NAV_NORMAL_PREFIX_MATCH_NO_USER: 0.4852904832645,
            NAV_NORMAL_PREFIX_MATCH_USER: -0.12081821144909,
            ONLY_MATCHES_PREVIOUS_NAME: -1.248003231081,
            OS_APP_ACTION: -1.381807580371,
            QUERY_FRECENCY_BONUS: 0.011725693517502,
            QUERY_FRECENCY_RAW: 0.0071433931825349,
            QUERY_FRECENCY_WEIGHT_HIT_VISITS: 0.0047962209104509,
            QUERY_TOKEN_NORMAL_PREFIX_MATCH: 0.38593901851901,
            SLASH_COMMAND_USER_CTR: 3.2204170381454,
            STRING_EXACT_PREFIX_MATCH: -0.53245135333594,
            STRING_NORMAL_PREFIX_MATCH: -0.4692069451129,
            TYPE_APP: -2.0995766663586,
            TYPE_APP_ACTION: -0.15299090921826,
            TYPE_CHANNEL_ACTION: -0.97398280475431,
            TYPE_GLOBAL_ACTION: 0.24313716972704,
            TYPE_NAVIGATION_CHANNEL: -0.99949500941624,
            TYPE_NAVIGATION_FILE: -0.60870055140391,
            TYPE_NAVIGATION_MODAL: -1.2540608783032,
            TYPE_NAVIGATION_MPIM: -0.13640397661212,
            TYPE_NAVIGATION_TEAM: -0.74505579518249,
            TYPE_NAVIGATION_USER: 0.19845685040217,
            TYPE_NAVIGATION_VIEW: -0.06828592658814,
            TYPE_QUERY: -0.34666651828357,
            TYPE_QUERY_HISTORY: -0.89886675989568,
            TYPE_SLASH_COMMAND: -0.18074491193454,
            TYPE_USER_QUERY: 1.2730815188112,
            TYPE_WORKFLOW_TRIGGER: -1.2028127578536,
            USER_DM_EMPTY_V2: 1.4226370781581,
            USER_DM_LATEST_MSG_AGE_DECAY_7D_V2: 0.40074999941377,
            USER_DM_LATEST_OLDER_90D_V2: -1.2419114598606,
            USER_EMAIL_ONLY_MATCH: -1.2756812486684,
            USER_ENTITY_TYPE_CTR_30DD: 3.7407446891213,
            USER_FIRST_NAME_NORMAL_MATCH: 0.36402719522123,
            USER_IS_ACTIVE: 0.58279556397075,
            USER_IS_BOT: -0.76450720727465,
            USER_IS_EXTERNAL: 0.27225738168756,
            USER_LAST_NAME_NORMAL_MATCH: 0.19972040917946,
            USER_MPIM_READ_AGE_DECAY_7D: 0.56565249217787,
            USER_PRIORITY: 0.29699660378898,
            USER_SAME_TEAM: 0.17696933968657,
          }),
          Xt = new te({
            FRECENCY_LOG_ITEM_COUNT: 1,
          }),
          _n = new te({
            FRECENCY: 1,
          }),
          mn = new te({
            APP_NAME_PREFIX_MATCH: 0.3,
            TYPE_SLASH_COMMAND: -1.6,
            TYPE_GLOBAL_ACTION: 1,
            TYPE_CHANNEL_ACTION: 2,
            TYPE_WORKFLOW_TRIGGER: 1,
            TYPE_APP_ACTION: 0,
            TYPE_APP: -1,
            IS_INVITE_WORKSPACE: -2,
            BEST_NAME_MATCH_LOG_RESULTS: 0.3,
            FRECENCY_BONUS: 0.0045945271239138,
            FRECENCY_LOG_HIT_COUNT: 0.032078623014737,
            FRECENCY_LOG_HIT_COUNT_SCALED: 0.45581873094776,
            FRECENCY_LOG_ITEM_COUNT: 0.052896301981039,
            FRECENCY_LOG_ITEM_COUNT_SCALED: 0.49730870089138,
            FRECENCY_WEIGHT_HIT_VISITS: 0.0071810620916759,
            FRECENCY_WEIGHT_ITEM_VISITS: 0.011716715132603,
            FUZZY_SCORE_25: -0.2832109013491,
            FUZZY_SCORE_50: 0.25841493146403,
            FUZZY_SCORE_ALL: -1.5527553376163,
            NAV_NORMAL_PREFIX_MATCH_NO_USER: 0.38239541164536,
            RAW_FRECENCY: -0.0027578100310599,
            READ_FRECENCY_BONUS: 0.0040115607674155,
            READ_FRECENCY_LOG_HIT_COUNT: 0.038436899804508,
            READ_FRECENCY_LOG_HIT_COUNT_SCALED: 0.45560596775616,
            READ_FRECENCY_LOG_ITEM_COUNT: 0.05525020998482,
            READ_FRECENCY_LOG_ITEM_COUNT_SCALED: 0.50026628273703,
            READ_FRECENCY_WEIGHT_HIT_VISITS: 0.0073619177800187,
            READ_FRECENCY_WEIGHT_ITEM_VISITS: 0.012099980951325,
            READ_FUZZY_SCORE_25: -0.2503777797125,
            READ_FUZZY_SCORE_50: 0.24335243348473,
            READ_FUZZY_SCORE_ALL: -1.5175861934325,
            READ_NAV_NORMAL_PREFIX_MATCH_NO_USER: 0.40022884927117,
            READ_RAW_FRECENCY: -0.0031687787672375,
          }),
          Fn = new te({
            APP_NAME_PREFIX_MATCH: 0.3,
            TYPE_SLASH_COMMAND: -1.6,
            TYPE_GLOBAL_ACTION: 1,
            TYPE_CHANNEL_ACTION: 2,
            TYPE_APP_ACTION: 0,
            TYPE_APP: -1,
            IS_INVITE_WORKSPACE: -2,
            BEST_NAME_MATCH_LOG_RESULTS: 0.3,
            FRECENCY_LOG_HIT_COUNT_SCALED: 4,
            FRECENCY_BONUS: 0.0045945271239138,
            FRECENCY_LOG_HIT_COUNT: 0.032078623014737,
            FRECENCY_LOG_ITEM_COUNT: 0.052896301981039,
            FRECENCY_LOG_ITEM_COUNT_SCALED: 0.49730870089138,
            FRECENCY_WEIGHT_HIT_VISITS: 0.0071810620916759,
            FRECENCY_WEIGHT_ITEM_VISITS: 0.011716715132603,
            FUZZY_SCORE_25: -0.2832109013491,
            FUZZY_SCORE_50: 0.25841493146403,
            FUZZY_SCORE_ALL: -1.5527553376163,
            NAV_NORMAL_PREFIX_MATCH_NO_USER: 0.38239541164536,
            RAW_FRECENCY: -0.0027578100310599,
            READ_FRECENCY_BONUS: 0.0040115607674155,
            READ_FRECENCY_LOG_HIT_COUNT: 0.038436899804508,
            READ_FRECENCY_LOG_HIT_COUNT_SCALED: 0.45560596775616,
            READ_FRECENCY_LOG_ITEM_COUNT: 0.05525020998482,
            READ_FRECENCY_LOG_ITEM_COUNT_SCALED: 0.50026628273703,
            READ_FRECENCY_WEIGHT_HIT_VISITS: 0.0073619177800187,
            READ_FRECENCY_WEIGHT_ITEM_VISITS: 0.012099980951325,
            READ_FUZZY_SCORE_25: -0.2503777797125,
            READ_FUZZY_SCORE_50: 0.24335243348473,
            READ_FUZZY_SCORE_ALL: -1.5175861934325,
            READ_NAV_NORMAL_PREFIX_MATCH_NO_USER: 0.40022884927117,
            READ_RAW_FRECENCY: -0.0031687787672375,
          }),
          Kn = new te({
            ACTIVE_TOKEN_QUERY_SUGGESTION: 1,
            BM25_SCORE: 1,
            CHANNEL_IS_MEMBER: 0,
            EXCESS_STRING_LENGTH: 1,
            FRECENCY: 0.01,
            MPIM_IS_STARRED: 0,
            NAV_EXACT_MATCH: 0,
            NAV_EXACT_PREFIX_MATCH: 0,
            NAV_EXCESS_STRING_LENGTH: 2.5,
            NAV_NORMAL_MATCH: 0,
            QUERY_SUGGESTION_SCORE_V2: 3,
            STRING_EXACT_PREFIX_MATCH: 1,
            STRING_NORMAL_PREFIX_MATCH: 1,
            TYPE_NAVIGATION_CHANNEL: 4,
            TYPE_NAVIGATION_EXPERT_CHANNEL: 2,
            TYPE_NAVIGATION_MPIM: 7,
            TYPE_NAVIGATION_USER: 4,
            TYPE_QUERY: 1,
            HERE_KEYWORD_EXACT_MATCH: 5,
          }),
          dt = new te({
            FRECENCY: 0.01,
            TYPE_NAVIGATION_USER: 4,
            TYPE_NAVIGATION_CHANNEL: 4,
            QUERY_SUGGESTION_SCORE_V2: 3,
            TYPE_NAVIGATION_EXPERT_CHANNEL: 2,
            TYPE_NAVIGATION_MPIM: 7,
          }),
          se = {
            testing: Kn,
            testing_2: dt,
            frecency: _n,
            autocompleteFallback: mt,
            shortcuts1: mn,
            shortcuts3: Fn,
            emojiFrequentlyUsed: Xt,
          };
        var he = e(5795074931),
          Le = e(5267557974),
          qe = e(9101533895),
          ht = e(4761125736),
          et = e(8719147933),
          Ut = e(8276911661),
          $t = e(6562711329);
        const En = new I.Ay("search"),
          wn = "autocompleteFallback";
        let $n = _(
          class {
            sort(ue, we) {
              var ft;
              const pn = (0, T.Cy)({
                state: ue,
              });
              pn.mark("sorter-sort-mark");
              const An = this.prepSuggestions(ue, we);
              this.extractFeatures(ue, An);
              const yn = this.scoreItems(ue, An),
                xt =
                  ((ft = this.options) === null || ft === void 0
                    ? void 0
                    : ft.dryRun) === !0
                    ? yn
                    : this.sortByScore(yn);
              pn.measureAndClear("sorter-sort-mark", "sorter-sort");
              const Vn = 2,
                Jn = this.boostExactMatches(xt, Vn);
              return this.forceMatches(Jn);
            }
            boostExactMatches(ue, we) {
              const ft = ue.slice(0, we),
                pn = [],
                An = [];
              for (let yn = we; yn < ue.length; yn++) {
                const xt = ue[yn];
                xt.isExactMatch || xt.bestNameIsExactMatch
                  ? pn.push(xt)
                  : An.push(xt);
              }
              return [...ft, ...pn, ...An];
            }
            forceMatches(ue) {
              var we, ft;
              return !((we = this.options) === null || we === void 0) &&
                we.selfFirst &&
                !(!((ft = ue[0]) === null || ft === void 0) && ft.isSelf)
                ? [...(0, t.A)(ue, (An) => An.isSelf), ...ue]
                : ue;
            }
            getModels(ue, we) {
              let ft =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : !1;
              const pn = {
                model: se[ue],
                omniswitcherModel: se[ue],
              };
              if (!ft && we) {
                const yn = Ne(we).getStaleWhileRevalidate(pn);
                return yn === null || yn.model === null || yn.model === void 0
                  ? pn
                  : yn;
              }
              return pn;
            }
            getHistoryChannels(ue) {
              if ((0, ht._Z)(ue, "sq_sorter_history") !== "treatment")
                return {};
              if (!(0, f.A)()) return {};
              var we;
              const ft = [
                ...((we = (0, et.t)((0, D.getStateForClientStore)())) !==
                  null && we !== void 0
                  ? we
                  : []),
              ];
              if (!ft) return {};
              for (let An = 0; An < ft.length; An++) ft[An].position = An + 1;
              const pn = {};
              return (
                ft
                  .filter((An) =>
                    (!(0, M.VA)() && An.teamId !== this.teamId) ||
                    !An.primaryView
                      ? !1
                      : (0, y.A)(An.primaryView)
                  )
                  .forEach((An) => {
                    if (An.primaryView && !(An.primaryView in pn)) {
                      var yn;
                      pn[An.primaryView] = {
                        ts: An.ts / 1e3,
                        position:
                          (yn = An == null ? void 0 : An.position) !== null &&
                          yn !== void 0
                            ? yn
                            : -1,
                      };
                    }
                  }),
                pn
              );
            }
            prepSuggestions(ue, we) {
              var ft, pn, An;
              const yn = (0, L.B)((0, We.O)(this.query));
              if (
                !((ft = this.options) === null || ft === void 0) &&
                ft.currentChannel &&
                yn.length <= 1 &&
                !(0, a.yz)(
                  (pn = this.options) === null || pn === void 0
                    ? void 0
                    : pn.currentChannel
                ) &&
                !(0, a.LI)(
                  (An = this.options) === null || An === void 0
                    ? void 0
                    : An.currentChannel
                )
              ) {
                const ot = we
                  .filter((lt) => lt.type === "member" || (0, l.NB)(lt.item))
                  .map((lt) => (lt.item || lt).id);
                (0, D.dispatchForTeamId)(
                  this.teamId,
                  (0, $t.z)({
                    channelId: this.options.currentChannel.id,
                    userIds: ot,
                  })
                );
              }
              let xt = null;
              if (
                (0, ht._Z)(ue, "snd_autocomplete_features_cache") ===
                  "treatment" &&
                this.teamId
              ) {
                var Vn;
                xt = G({
                  teamId: this.teamId,
                  enterpriseId:
                    (Vn = this.enterpriseId) !== null && Vn !== void 0
                      ? Vn
                      : void 0,
                }).getStaleWhileRevalidate();
              }
              const Jn = we.length,
                Je = (0, he.WR)(ue),
                Bt = (0, Ut.cA)(ue),
                Lt = (0, E.dQ)(Bt),
                rt = this.getHistoryChannels(ue),
                yt = {};
              return (
                we.forEach((ot) => {
                  const lt = ot.item;
                  (ot.type === "mpim" || (0, a.yz)(ot.item)) &&
                    ((0, o.Ug)(lt) || []).forEach((jt) => {
                      if (jt !== Je) {
                        const on = yt[jt] || {
                            itemCount: 0,
                            hitCount: 0,
                          },
                          cn = (0, o._V)(ue, lt),
                          Wt = cn ? parseFloat(cn) : void 0,
                          en = (0, Le.b)(ue, lt.id),
                          Un = en ? parseFloat(en) : void 0;
                        Wt &&
                          (on.lastReadTs
                            ? (on.lastReadTs = Math.max(on.lastReadTs, Wt))
                            : (on.lastReadTs = Wt)),
                          Un &&
                            (on.latestMsgTs
                              ? (on.latestMsgTs = Math.max(on.latestMsgTs, Un))
                              : (on.latestMsgTs = Un)),
                          (on.hitCount +=
                            (ot == null ? void 0 : ot.hitCount) || 0),
                          (on.itemCount +=
                            (ot == null ? void 0 : ot.itemCount) || 0),
                          (yt[jt] = on);
                      }
                    });
                }),
                we.map((ot) => {
                  const lt = ot.item || ot,
                    Ge = {
                      ...ot,
                      query: this.query,
                      normalizedQuery: yn,
                      id: lt.id,
                      suggestionType: $.fd.UNKNOWN,
                      numResults: Jn,
                    };
                  if (ot.type === "member" || (0, l.NB)(ot.item)) {
                    var jt, on, cn;
                    const sn = lt.id && (0, qe.Pu)(ue, lt.id),
                      Zn = lt.id && xt && xt.getUserDmChannelMetadata(lt.id);
                    (Ge.remoteImMetadata = Zn),
                      (Ge.im = sn),
                      (Ge.latestImTs = sn && (0, Le.b)(ue, sn.id)),
                      (Ge.imHasDraft = sn && (0, o.yc)(ue, sn.id)),
                      (Ge.imIsStarred = sn && (0, o.m2)(ue, sn)),
                      (Ge.name = (0, m.Gt)(ot.item)),
                      (Ge.lastReadImTs = (0, o._V)(ue, sn)),
                      (Ge.lastReadRemoteImMetadataTs =
                        Zn == null ? void 0 : Zn.last_read_abs),
                      (0, E.dQ)(ot.item) === Lt && (Ge.sameTeam = !0);
                    let cs;
                    if (
                      (!((jt = this.options) === null || jt === void 0) &&
                        jt.currentChannel &&
                        (cs = this.options.currentChannel),
                      cs)
                    )
                      if ((0, a.yz)(cs)) {
                        var Wt, en;
                        Ge.isMemberOfCurrentChannel =
                          (en =
                            cs == null ||
                            (Wt = cs.members) === null ||
                            Wt === void 0
                              ? void 0
                              : Wt.includes(ot.item.id)) !== null &&
                          en !== void 0
                            ? en
                            : !1;
                      } else
                        (0, a.LI)(cs) ||
                          (Ge.isMemberOfCurrentChannel = (0, $e.B)(ue, lt, cs));
                    (Ge.priority = (0, o.dh)(ue, sn)),
                      (Ge.suggestionType = $.fd.USER_NAVIGATION),
                      (Ge.isNavigational = !0),
                      (Ge.historyTs =
                        sn &&
                        ((on = rt[sn.id]) === null || on === void 0
                          ? void 0
                          : on.ts)),
                      (Ge.historyPosition =
                        sn &&
                        ((cn = rt[sn.id]) === null || cn === void 0
                          ? void 0
                          : cn.position));
                    const Es = yt[lt.id];
                    Es && (Ge.mpimFeatures = Es);
                  } else Ge.name = lt.name || lt.string;
                  if (ot.type === "channel" || (0, a.jq)(ot.item)) {
                    var Un, Pn;
                    (Ge.suggestionType = $.fd.CHANNEL_NAVIGATION),
                      (Ge.isNavigational = !0),
                      (Ge.isChannelMember =
                        (0, a.rW)(lt) && !(0, r.F)(lt) && (0, c.bl)(lt)),
                      (Ge.hasDraft = (0, o.yc)(ue, lt.id)),
                      (Ge.offlineFeatures =
                        xt && xt.getFeatures(ot.item.id, "channel")),
                      (Ge.historyTs =
                        (Un = rt[lt.id]) === null || Un === void 0
                          ? void 0
                          : Un.ts),
                      (Ge.historyPosition =
                        (Pn = rt[lt.id]) === null || Pn === void 0
                          ? void 0
                          : Pn.position),
                      (Ge.latestTs = (0, Le.b)(ue, lt.id)),
                      (Ge.lastReadTs = (0, o._V)(ue, lt)),
                      (Ge.priority = (0, o.dh)(ue, lt)),
                      (Ge.isStarred = (0, o.m2)(ue, lt));
                  }
                  if (ot.type === "mpim" || (0, a.yz)(ot.item)) {
                    var Cn, Mn;
                    (Ge.suggestionType = $.fd.MPIM_NAVIGATION),
                      (Ge.isNavigational = !0);
                    const Zn = ((0, o.Ug)(lt) || []).map((fs) =>
                      (0, Ut.nv)(ue, fs)
                    );
                    (Ge.isMpimWithDeactivatedMember = (0, n.A)(
                      Zn,
                      (fs) => (0, l.oy)(fs) || (0, l.eJ)(fs)
                    )),
                      (Ge.isMpimWithOnlyInternalMembers = (0, s.A)(
                        Zn,
                        (fs) => !(0, v.g)(fs)
                      )),
                      (Ge.hasDraft = (0, o.yc)(ue, lt.id)),
                      (Ge.name = (0, o.Oi)(ue, ot.item)),
                      (Ge.offlineFeatures =
                        xt && xt.getFeatures(ot.item.id, "mpim")),
                      (Ge.historyTs =
                        (Cn = rt[lt.id]) === null || Cn === void 0
                          ? void 0
                          : Cn.ts),
                      (Ge.historyPosition =
                        (Mn = rt[lt.id]) === null || Mn === void 0
                          ? void 0
                          : Mn.position),
                      (Ge.priority = (0, o.dh)(ue, lt)),
                      (Ge.maxLastReadTsOfAllMembers = null),
                      (Ge.maxLatestMsgTsOfAllMembers = null);
                    let cs = 0,
                      Es = 0,
                      ts = 0,
                      as = 0,
                      Is = 0;
                    Zn.forEach((fs) => {
                      if (fs.id !== Je) {
                        const Cs = fs.id ? (0, qe.Pu)(ue, fs.id) : void 0,
                          Rs = Cs && (0, o._V)(ue, Cs),
                          Ls =
                            fs.id && xt && xt.getUserDmChannelMetadata(fs.id),
                          Ns = Ls && Ls.last_read_abs / 1e6,
                          ro = Cs || Ls,
                          ms = Rs ? parseFloat(Rs) : Ns;
                        if (ro) {
                          if (((Is += 1), ms)) {
                            ts += 1;
                            var As;
                            (Ge.maxLastReadTsOfAllMembers = Math.max(
                              (As = Ge.maxLastReadTsOfAllMembers) !== null &&
                                As !== void 0
                                ? As
                                : -1 / 0,
                              ms
                            )),
                              (cs += ms);
                          }
                          const js = (0, Le.b)(ue, Cs == null ? void 0 : Cs.id),
                            xs = Cs && js ? parseFloat(js) : void 0;
                          if (xs) {
                            as += 1;
                            var Ms;
                            (Ge.maxLatestMsgTsOfAllMembers = Math.max(
                              (Ms = Ge.maxLatestMsgTsOfAllMembers) !== null &&
                                Ms !== void 0
                                ? Ms
                                : -1 / 0,
                              xs
                            )),
                              (Es += xs);
                          }
                        }
                      }
                    }),
                      (Ge.avgLastReadTsOfAllMembers =
                        cs === 0 ? null : cs / ts),
                      (Ge.avgLatestMsgTsOfAllMembers =
                        Es === 0 ? null : Es / as),
                      (Ge.pctNonEmptyDmsForAllMembers =
                        (ts / (Zn.length - 1)) * 100),
                      (Ge.pctNonNullDmsForAllMembers =
                        (Is / (Zn.length - 1)) * 100);
                  }
                  if (
                    (ot.type === "team" &&
                      ((Ge.suggestionType = $.fd.TEAM_NAVIGATION),
                      (Ge.isNavigational = !0)),
                    ot.type === "view" &&
                      ((Ge.suggestionType = $.fd.VIEW_NAVIGATION),
                      (Ge.isNavigational = !0)),
                    ot.type === "appAction" &&
                      ((Ge.suggestionType = $.fd.APP_ACTION),
                      (Ge.isAction = !0),
                      (Ge.offlineFeatures =
                        xt && xt.getFeatures(ot.item.id, "appAction"))),
                    ot.type === "app" &&
                      ((Ge.suggestionType = $.fd.APP), (Ge.isApp = !0)),
                    ot.type === "emoji" &&
                      ((Ge.name = Ge.emojiBestNameMatch),
                      (Ge.suggestionType = $.fd.EMOJI),
                      (Ge.isNavigational = !0),
                      (Ge.offlineFeatures =
                        xt && xt.getFeatures(ot.item.id, "emoji"))),
                    ot.type === "slashCommand")
                  ) {
                    var ds;
                    (Ge.suggestionType = $.fd.SLASH_COMMAND),
                      (Ge.isApp = !0),
                      (Ge.name =
                        (ds = Ge.name) === null || ds === void 0
                          ? void 0
                          : ds.substring(1)),
                      Ge.firstWordOfRawQuery &&
                        ((Ge.query = Ge.firstWordOfRawQuery),
                        (Ge.normalizedQuery = Ge.firstWordOfRawQuery)),
                      (Ge.offlineFeatures =
                        xt && xt.getFeatures(ot.item.id, "slashCommand"));
                  }
                  if (
                    (ot.type === "globalAction" &&
                      ((Ge.suggestionType = $.fd.GLOBAL_ACTION),
                      (Ge.isApp = !0),
                      (Ge.offlineFeatures =
                        xt && xt.getFeatures(ot.item.id, "globalAction"))),
                    ot.type === "quipShortcutCommand" &&
                      (Ge.suggestionType = $.fd.QUIP_SHORTCUT),
                    ot.type === "canvasAiSuggestion" &&
                      (Ge.suggestionType = $.fd.CANVAS_AI_SUGGESTION),
                    ot.type === "channelAction" &&
                      ((Ge.suggestionType = $.fd.CHANNEL_ACTION),
                      (Ge.isApp = !0),
                      (Ge.offlineFeatures =
                        xt && xt.getFeatures(ot.item.id, "channelAction"))),
                    ot.type === "workflowTrigger" &&
                      ((Ge.suggestionType = $.fd.WORKFLOW_TRIGGER),
                      (Ge.isApp = !0),
                      (Ge.offlineFeatures =
                        xt && xt.getFeatures(ot.item.id, "workflowTrigger"))),
                    ot.type === "file")
                  ) {
                    (Ge.suggestionType = $.fd.FILE_NAVIGATION),
                      (Ge.isNavigational = !0),
                      (Ge.fileSuggestionsFromSearcher = !0);
                    const sn = Ge.item;
                    (Ge.id = sn.id),
                      (Ge.fileId = sn.id),
                      (Ge.logId = sn.id),
                      (Ge.fileType = sn.highlight_type || sn.filetype),
                      (Ge.name = sn.title),
                      (Ge.fileTypeDescription = sn.is_external
                        ? (0, i.A)(sn, ue)
                        : sn.pretty_type),
                      Ge.fileTypeDescription === "Arugula" &&
                        (Ge.fileTypeDescription = En.t("Post")),
                      (Ge.fromCurrentUser = sn.user === Je);
                    const Zn = sn.user && (0, qe.Pu)(ue, sn.user),
                      cs =
                        sn.user && xt && xt.getUserDmChannelMetadata(sn.user);
                    if (
                      ((Ge.hasNonNullDmsWithCreator = Zn !== null),
                      (Ge.hasNonNullLocalOrRemoteDmsWithCreator =
                        Zn !== null || cs !== null),
                      (Ge.lastReadTs = sn.last_read),
                      sn.shares)
                    ) {
                      const ts =
                          sn.shares.public &&
                          Math.max(
                            ...Object.values(sn.shares.public).flatMap((Is) =>
                              Is.map((fs) =>
                                fs.ts ? parseFloat(fs.ts) : -1 / 0
                              )
                            )
                          ),
                        as =
                          sn.shares.private &&
                          Math.max(
                            ...Object.values(sn.shares.private).flatMap((Is) =>
                              Is.map((fs) =>
                                fs.ts ? parseFloat(fs.ts) : -1 / 0
                              )
                            )
                          );
                      ts && as
                        ? (Ge.latestShareTs = ts > as ? ts : as)
                        : (Ge.latestShareTs = ts || as);
                    }
                    const Es = u(sn);
                    if ((Es && (Ge.latestActionTs = Es), xt)) {
                      const ts =
                          sn.channels &&
                          Array.isArray(sn.channels) &&
                          sn.channels.length &&
                          Math.max(
                            ...sn.channels.map(
                              (Is) =>
                                xt.getFeatures(Is, "channel").user_ctr_30dd
                            )
                          ),
                        as =
                          sn.groups &&
                          Array.isArray(sn.groups) &&
                          sn.groups.length &&
                          Math.max(
                            ...sn.groups.map(
                              (Is) => xt.getFeatures(Is, "mpim").user_ctr_30dd
                            )
                          );
                      ts > 0 && as > 0
                        ? (Ge.fileChannelCtr = Math.max(ts, as))
                        : ts > 0
                        ? (Ge.fileChannelCtr = ts)
                        : as > 0 && (Ge.fileChannelCtr = as),
                        sn.user
                          ? (Ge.fileUserCtr = xt.getFeatures(
                              sn.user,
                              "member"
                            ).user_ctr_30dd)
                          : (Ge.fileUserCtr = xt.getEntityCtr("member"));
                    }
                  }
                  if (
                    (ot.type === "link" &&
                      ((Ge.suggestionType = $.fd.LINK_NAVIGATION),
                      (Ge.isNavigational = !0),
                      (Ge.name = ot.item.title || ot.item.url)),
                    ot.type === "modal" &&
                      ((Ge.suggestionType = $.fd.MODAL_NAVIGATION),
                      (Ge.name = ot.item.name)),
                    ot.type === "queryHistory" &&
                      ((Ge.suggestionType = $.fd.QUERY_HISTORY),
                      (Ge.is_type_query_history = !0),
                      (Ge.id = (0, g.B)(ot.id || ot.name || ot.string)),
                      (Ge.logId = Ge.id),
                      (Ge.exact_string = ot.string)),
                    ot.type === "query" ||
                      ot.type === "queryUser" ||
                      ot.type === "queryHistory")
                  ) {
                    var un, gs, os;
                    (Ge.is_type_query_completion = !0),
                      (Ge.lastSuggestionToken =
                        !Ge.suggestionTokenList ||
                        Ge.suggestionTokenList.length < 1
                          ? null
                          : Ge.suggestionTokenList[
                              Ge.suggestionTokenList.length - 1
                            ]),
                      (Ge.frecencyScore =
                        Ge.lastSuggestionToken &&
                        Ge.lastSuggestionToken._frecencyScore),
                      (Ge.scoringContext =
                        ((un = Ge.lastSuggestionToken) === null || un === void 0
                          ? void 0
                          : un._scoringContext) || {}),
                      (Ge.lastTokenMemberOrNull = null),
                      (Ge.lastTokenChannelOrNull = null);
                    const sn =
                        Ge.lastSuggestionToken &&
                        (Ge.lastSuggestionToken.type === $.S6.FILTER_FROM ||
                          Ge.lastSuggestionToken.type === $.S6.FILTER_TO ||
                          Ge.lastSuggestionToken.type === $.S6.FILTER_WITH),
                      Zn =
                        Ge.lastSuggestionToken &&
                        Ge.lastSuggestionToken.type === $.S6.FILTER_IN;
                    if (
                      (!(
                        (gs = Ge.lastSuggestionToken) === null || gs === void 0
                      ) &&
                        gs._id &&
                        ((Ge.lastTokenMemberOrNull =
                          sn && (0, Ut.nv)(ue, Ge.lastSuggestionToken._id)),
                        (Ge.lastTokenChannelOrNull =
                          Zn &&
                          ((0, qe.OL)(ue, Ge.lastSuggestionToken._id) ||
                            (0, qe.Pu)(ue, Ge.lastSuggestionToken._id))),
                        (Ge.priority = Ge.lastTokenChannelOrNull
                          ? (0, o.dh)(ue, Ge.lastTokenChannelOrNull)
                          : void 0)),
                      Ge.lastSuggestionToken &&
                        Ge.lastSuggestionToken._name &&
                        (Ge.lastTokenMemberOrNull ||
                          (Ge.lastTokenMemberOrNull =
                            sn && (0, Ut.H6)(ue, Ge.lastSuggestionToken._name)),
                        Ge.lastTokenChannelOrNull ||
                          (Ge.lastTokenChannelOrNull =
                            Zn &&
                            (0, qe.Os)(ue, Ge.lastSuggestionToken._name))),
                      (0, d.GU)(Ge.lastTokenMemberOrNull) &&
                        (Ge.lastTokenMemberOrNull = null),
                      (Ge.lastTokenMemberName =
                        (0, m.Gt)(Ge.lastTokenMemberOrNull) || void 0),
                      (0, d.GU)(Ge.lastTokenChannelOrNull))
                    )
                      Ge.lastTokenChannelOrNull = null;
                    else {
                      const Es = (0, o._V)(ue, Ge.lastTokenChannelOrNull);
                      (Ge.lastTokenChannelLastRead = Es
                        ? parseFloat(Es)
                        : void 0),
                        (Ge.lastTokenChannelIsStarred = (0, o.m2)(
                          ue,
                          Ge.lastTokenChannelOrNull
                        ));
                    }
                    (Ge.lastTokenChannelName =
                      (0, o.SB)(ue, Ge.lastTokenChannelOrNull) || null),
                      (Ge.lastTokenIm =
                        Ge.lastTokenMemberOrNull && Ge.lastTokenMemberOrNull.id
                          ? (0, qe.Pu)(ue, Ge.lastTokenMemberOrNull.id)
                          : void 0),
                      (Ge.lastTokenImLatest = (0, Le.b)(
                        ue,
                        (os = Ge.lastTokenIm) === null || os === void 0
                          ? void 0
                          : os.id
                      ));
                    const cs = (0, o._V)(ue, Ge.lastTokenIm);
                    cs &&
                      (Ge.lastTokenImLastRead = cs ? parseFloat(cs) : void 0),
                      Ge.lastTokenIm &&
                        (Ge.priority = (0, o.dh)(ue, Ge.lastTokenIm)),
                      (Ge.lastTokenImIsStarred = (0, o.m2)(ue, Ge.lastTokenIm));
                  }
                  if (
                    (ot.type === "query" && (Ge.suggestionType = $.fd.QUERY),
                    ot.type === "queryUser" &&
                      (Ge.suggestionType = $.fd.QUERY_USER),
                    ot.type === "queryHistory" &&
                      (Ge.suggestionType = $.fd.QUERY_HISTORY),
                    ot.type === "querySalesforce" &&
                      (Ge.suggestionType = $.fd.QUERY_SALESFORCE),
                    ot.type === "query" ||
                      ot.type === "queryUser" ||
                      ot.type === "queryHistory" ||
                      ot.type === "querySalesforce")
                  ) {
                    var vs;
                    (Ge.normalizedQuery = (0, L.B)((0, We.O)(Ge.query))),
                      (Ge.logId =
                        ((vs = Ge.lastSuggestionToken) === null || vs === void 0
                          ? void 0
                          : vs.logId) || "");
                    var us;
                    Ge.name = (
                      (us = Ge.suggestionTokenList) !== null && us !== void 0
                        ? us
                        : []
                    )
                      .map((sn) => sn.toString())
                      .join(" ");
                  }
                  return (
                    ot.type === "quickMessage" &&
                      ((Ge.isNavigational = !0),
                      (Ge.suggestionType = $.fd.MESSAGE_NAVIGATION)),
                    (Ge.entityTypeCtr = xt ? xt.getEntityCtr(ot.type) : void 0),
                    Ge
                  );
                })
              );
            }
            extractFeatures(ue, we) {
              we.forEach((ft) => {
                var pn;
                const An = w(
                  ft,
                  (pn = this.options) === null || pn === void 0
                    ? void 0
                    : pn.source
                );
                this.featureVectors[ft.id] = An;
              });
            }
            selectModelForScoring() {
              return this.model;
            }
            scoreItems(ue, we) {
              var ft;
              const pn = {
                  source:
                    (ft = this.options) === null || ft === void 0
                      ? void 0
                      : ft.source,
                },
                An = this.selectModelForScoring();
              return we.map((yn) => {
                var xt;
                const Vn = this.featureVectors[yn.id],
                  Jn = An.score(Vn, pn);
                let Je;
                return (
                  !((xt = this.options) === null || xt === void 0) &&
                    xt.explain &&
                    (Je = An.explain(Vn, pn)),
                  {
                    ...yn,
                    modelScore: Jn,
                    featureVectorRaw: Vn,
                    explain: Je,
                  }
                );
              });
            }
            sortByScore(ue) {
              var we, ft;
              return ue.sort(
                (pn, An) =>
                  ((we = An == null ? void 0 : An.modelScore) !== null &&
                  we !== void 0
                    ? we
                    : 0) -
                  ((ft = pn == null ? void 0 : pn.modelScore) !== null &&
                  ft !== void 0
                    ? ft
                    : 0)
              );
            }
            constructor({
              query: ue,
              options: we = {},
              teamId: ft = null,
              enterpriseId: pn = null,
            }) {
              (this.query = ue), (this.options = we);
              let An = we.model;
              An === void 0 && (An = wn);
              var yn;
              const xt = this.getModels(
                An,
                ft || pn,
                (yn = this.options.modelLocal) !== null && yn !== void 0
                  ? yn
                  : !1
              );
              (this.model = xt.model),
                (this.omniswitcherModel = xt.omniswitcherModel),
                (this.teamId = ft),
                (this.enterpriseId = pn),
                (this.featureVectors = {});
            }
          },
          "Sorter"
        );
      },
      2332798892: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => c,
        });
        var t = e(1703559452),
          n = e(7174777686),
          s = e(735940183);
        const i = ["`", "\xB4", "\u02C6", "\xA8", "\u02DC"],
          d = new RegExp(`[${i.join("")}]$`);
        function o() {
          return (
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ""
          ).replace(d, "");
        }
        _(o, "trim_trailing_composition_char");
        const a = {
          COMPOSITION_CHARS: i,
        };
        var r = e(3212336858);
        function c(u, l) {
          let { allowPartialMatches: m = !1 } =
            arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          if (!l || !u) return !1;
          let v = l.toLowerCase().replace(/^\uFF0F/, "/");
          (v = (0, s.dV)(v)), (v = o(v));
          const E = [(0, r.fK)(u), (0, r.Bs)(u), ...((0, r.qc)(u) || [])];
          return (0, t.A)(E, (T) => {
            const g = (0, s.dV)(T);
            return m ? (0, n.A)(g, v) : g === v;
          });
        }
        _(c, "is_match_for_command");
      },
      8664881451: (W, A, e) => {
        "use strict";
        e.d(A, {
          Dd: () => g,
          Rj: () => f,
          TQ: () => I,
          ZH: () => v,
          ds: () => T,
          qG: () => l,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(796111729),
          i = e(6673728906),
          d = e(571104883);
        const o = {},
          a = {},
          r = {},
          c = (0, s.Wo)({
            label: "SOUND-PLAYBACK",
          });
        function u(y) {
          return `${y}-repeat`;
        }
        _(u, "createRepeatKey");
        const l = _((y) => {
            y && I(y);
          }, "addSoundToInMemoryCache"),
          m = (function () {
            var y = (0, t.coroutine)(function* (M) {
              try {
                if (!M || !("setSinkId" in M) || (0, d.gm)()) return;
                const p = (0, i._o)();
                yield M.setSinkId(p);
              } catch (p) {
                c.warn(`Failed to set sink id with reason: ${p}`);
              }
            });
            return _(function (p) {
              return y.apply(this, arguments);
            }, "maybeSetAudioSinkId");
          })(),
          v = (function () {
            var y = (0, t.coroutine)(function* (M) {
              let p =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : {};
              if (!M) return null;
              const O = g(M) || I(M);
              (O.loop = !!p.loop), (O.currentTime = 0);
              var C;
              (O.volume = (C = p.volume) !== null && C !== void 0 ? C : 1),
                yield m(O);
              try {
                yield O.play();
              } catch (h) {
                c.warn(`Failed to play sound: ${M} with reason: ${h}`);
              }
            });
            return _(function (p) {
              return y.apply(this, arguments);
            }, "play");
          })(),
          E = (function () {
            var y = (0, t.coroutine)(function* (M) {
              let p =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : {};
              if (!M) return null;
              const O = u(M),
                C = _(() => {
                  (a[O] -= 1),
                    a[O] > 0 &&
                      (c.info(`lounge music looping: ${M}`),
                      p.pause
                        ? (r[O] = setTimeout(() => {
                            v(O);
                          }, p.pause))
                        : v(O));
                }, "ended");
              p.repeat && (a[O] = p.repeat);
              const h =
                g(O) ||
                I(M, {
                  ended: C,
                  customCacheKey: O,
                });
              (h.currentTime = 0), yield m(h);
              try {
                yield h.play();
              } catch (D) {
                c.warn(`Failed to play repeated sound: ${M} with reason: ${D}`);
              }
            });
            return _(function (p) {
              return y.apply(this, arguments);
            }, "playRepeat");
          })();
        function T(y) {
          let { logFailure: M } =
            arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : {
                  logFailure: !0,
                };
          const p = g(y),
            O = u(y),
            C = g(O);
          if (!p && !C) {
            M &&
              c.warn(
                `Tried to stop sound, but no sound was playing matching url: ${y}. Available cached element urls are ${Object.keys(
                  o
                ).join(", ")}`
              );
            return;
          }
          if (C) {
            C.pause(), clearTimeout(r[O]), (a[O] = 0);
            const h = C.src;
            (C.src = ""), (C.src = h);
          }
          if (p) {
            p.pause();
            const h = p.src;
            (p.src = ""), (p.src = h);
          }
        }
        _(T, "stop");
        function g(y) {
          return o[y];
        }
        _(g, "getAudioElement");
        function I(y) {
          let M =
            arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          const p = new Audio(y);
          M.ended && p.addEventListener("ended", M.ended);
          const O = M.customCacheKey || y;
          return (o[O] = p), p;
        }
        _(I, "createAudioElement");
        function f(y, M, p) {
          if (!y || !M || !p) return;
          const O = g(y);
          O && O.removeEventListener(M, p);
        }
        _(f, "removeAudioElementListener");
      },
      6106767915: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => n,
        });
        var t = e(2414816894);
        function n(s) {
          return (0, t.A)(s) ? s.replace(/^BK/, "") : "";
        }
        _(n, "getBroadcastKeyword");
      },
      2414816894: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => n,
        });
        var t = e(4897863105);
        function n(s) {
          return (0, t.c)().indexOf(s) !== -1;
        }
        _(n, "mentionIdIsKeyword");
      },
      1707481146: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => t,
        });
        function t(n) {
          return n === "UNVERIFIED";
        }
        _(t, "mentionIdIsUnverified");
      },
      6764196364: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => n,
        });
        var t = e(6968387112);
        function n() {
          return `https://${(0, t.Xk)()}`;
        }
        _(n, "getSlackRootUrl");
      },
      4252064756: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => s,
          D: () => i,
        });
        var t = e(8234448831),
          n = e(6968387112);
        function s(d) {
          return i((0, t.Ay)(d));
        }
        _(s, "isGantryUrl");
        function i(d) {
          if (d.pathname === "/ssb/signin") return !1;
          const o = d.hostname,
            [a] = o.split(".");
          return a === "app" && (0, n.Ed)(d);
        }
        _(i, "isGantryUrlFromUrlObject");
      },
      1881693845: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => t,
        });
        function t() {
          return !0;
        }
        _(t, "isIaLayoutEnabled");
      },
      7489442332: (W, A, e) => {
        "use strict";
        e.d(A, {
          _e: () => G,
          iR: () => m,
          YZ: () => u,
          tR: () => l,
          j0: () => K,
          mu: () => x,
          mi: () => f,
          x: () => C,
          Pc: () => O,
          vd: () => n,
          hh: () => t,
          jG: () => B,
          ke: () => S,
          ts: () => b,
          Xg: () => U,
          Lb: () => R,
        });
        const t = 180,
          n = 600,
          s = 260,
          i = 310,
          d = 1e3,
          o = 24,
          a = 289,
          r = 321,
          c = 385,
          u = 15;
        var l;
        (function (F) {
          (F.MANUAL = "manual"), (F.AUTO = "auto");
        })(l || (l = {}));
        const m = 500,
          v = 140,
          E = [
            {
              minWidth: 1420,
              sidebar: 260,
              inspector: 400,
            },
            {
              minWidth: 1200,
              sidebar: 260,
              inspector: 380,
            },
            {
              minWidth: 1080,
              sidebar: 260,
              inspector: 340,
            },
            {
              minWidth: 960,
              sidebar: 220,
              inspector: 320,
            },
            {
              minWidth: 860,
              sidebar: 220,
              inspector: 310,
            },
            {
              minWidth: 0,
              sidebar: 200,
              inspector: 310,
            },
          ],
          T = [
            {
              min: t,
              max: 220,
              className: "p-workspace__sidebar--tiny",
            },
            {
              min: n - 50,
              max: n,
              className: "p-workspace__sidebar--large",
            },
          ],
          g = [
            {
              min: s,
              max: 300,
              className: "p-workspace__secondary_view--tiny",
            },
            {
              min: 301,
              max: 399,
              className: "p-workspace__secondary_view--medium",
            },
            {
              min: 400,
              max: d,
              className: "p-workspace__secondary_view--large",
            },
          ],
          I = [
            {
              min: s,
              max: 300,
              className: "p-workspace__tiles--tiny",
            },
            {
              min: 301,
              max: 499,
              className: "p-workspace__tiles--medium",
            },
            {
              min: 500,
              max: d,
              className: "p-workspace__tiles--large",
            },
          ],
          f = [
            {
              min: 1,
              max: 400,
              className: "p-workspace__primary_view--tiny",
            },
            {
              min: 401,
              max: 600,
              className: "p-workspace__primary_view--small",
            },
          ],
          y = 260,
          M = 400,
          p = 400,
          O = 8,
          C = 16,
          h = 60,
          D = 44,
          P = 40,
          S = "sidebarWidthIntent",
          b = "sidebarWidthMode",
          K = "inspectorWidthIntent",
          x = "inspectorWidthMode",
          B = "isSidebarVisible",
          U = "isTeamSidebarVisible",
          R = "userPrefersResponsiveSidebar",
          G = "calculatedSidebarWidth",
          H = "LAYOUT";
      },
      7216810781: (W, A, e) => {
        "use strict";
        e.d(A, {
          z: () => l,
        });
        var t = e(5824283093),
          n = e(5255740490),
          s = e(4173072539),
          i = e(3694049677),
          d = e(2408732225),
          o = e(9874616273),
          a = e(134846761),
          r = e(735940183),
          c = e(2786906754);
        const u = new r.Ay("shared_channel_invites"),
          l = _((m) => {
            let { invite: v, bottomMargin: E } = m;
            if (!v) return null;
            const {
                inviting_team: T,
                inviting_user: g,
                shared_workspace: I,
              } = v,
              f = !!(0, c.qN)(window.location.search).is_link,
              y = t.createElement(d.n, {
                team: T,
                user: g,
                size: 40,
                shouldRenderTeamBadge: !0,
                allowDefaultProfileImage: !0,
                allowTeamInitials: !0,
                isInteractive: !1,
                className: "margin_right_75",
                hideUserIcon: f,
              }),
              M = t.createElement(i.A, {
                invitingUser: g,
              }),
              p = t.createElement(s.A, {
                invitingTeam: T,
              }),
              O = t.createElement(a.A, {
                id: I.id,
                team: I,
                bold: !0,
              });
            return t.createElement(
              "div",
              {
                className: (0, n.A)(
                  "p-accept_slack_connect_workspace_invite_header__header_container",
                  {
                    margin_bottom_200: E,
                  }
                ),
              },
              t.createElement(
                "div",
                {
                  className:
                    "p-accept_slack_connect_workspace_invite_header__header_subcontainer",
                },
                t.createElement(o.A, {
                  width: 160,
                  height: 40,
                  className: "margin_bottom_125",
                }),
                t.createElement(
                  "div",
                  {
                    className:
                      "p-accept_slack_connect_workspace_invite_header padding_0",
                  },
                  y,
                  t.createElement(
                    "span",
                    null,
                    f
                      ? u.rt(
                          "You were invited by {invitingTeamNameStyled} to join {sharedWorkspaceName}.",
                          {
                            invitingTeamNameStyled: p,
                            sharedWorkspaceName: O,
                          }
                        )
                      : u.rt(
                          "You were invited by <strong>{invitingUserName}</strong> from {invitingTeamNameStyled} to join {sharedWorkspaceName}.",
                          {
                            invitingTeamNameStyled: p,
                            invitingUserName: M,
                            sharedWorkspaceName: O,
                          }
                        )
                  )
                )
              )
            );
          }, "AcceptSlackConnectWorkspaceHeader");
        l.displayName = "AcceptSlackConnectWorkspaceHeader";
      },
      1073393277: (W, A, e) => {
        "use strict";
        e.d(A, {
          Sp: () => I,
          a5: () => f,
        });
        var t = e(1729646737),
          n = e(4509434386),
          s = e(9733150292),
          i = e(3245843483),
          d = e(4923013394),
          o = e(252204565),
          a = e(4496040127),
          r = e(5829624088),
          c = e(7489442332);
        const u = ".p-client_container_placeholder",
          l = ".p-client_container_placeholder__nav",
          m = 260,
          v = 64,
          E = 76;
        function T(M) {
          let { name: p, hex: O, iaTheming: C, customTheme: h } = M;
          const D = (0, t.zK)({
              hex: O,
              name: p,
            }),
            P = (C == null ? void 0 : C.mode) || "light",
            S = (C == null ? void 0 : C.brightness) || n.GK,
            b = (0, n.XW)({
              mode: (0, r.Gk)(C, C == null ? void 0 : C.mode),
              primary: C == null ? void 0 : C.primary,
              highlight1: C == null ? void 0 : C.highlight1,
              brightness: S,
              useCustomHex: h && (C == null ? void 0 : C.useCustomHex),
            });
          let K;
          p.includes("Primary")
            ? (K = b.primary.shade)
            : (K = b.highlight1.shade);
          const x = n.sC.indexOf(K);
          return {
            shade: K,
            value: P === "light" ? D.light[x].value : D.dark[x].value,
          };
        }
        _(T, "generateCustomHEXChromeColors");
        function g(M) {
          let { iaTheming: p, customTheme: O } = M;
          return !p.primary.custom || !t.$V.test(p.primary.custom)
            ? null
            : T({
                name: "bootPrimary",
                hex: p.primary.custom.startsWith("#")
                  ? p.primary.custom
                  : `#${p.primary.custom}`,
                iaTheming: p,
                customTheme: O,
              });
        }
        _(g, "getBootPrimary");
        function I(M) {
          let { teamId: p, showTeamSwitcher: O = !1 } = M;
          const C = (0, s._z)(p, "is_unified_user_client_enabled"),
            h = (0, s._z)(p, "channelSidebarBackground"),
            D = parseInt((0, s.W6)("viewLayoutLastSidebarWidth"), 10) || m,
            P = (0, s._z)(p, "teamSwitcherBackground"),
            S = (0, s._z)(p, "textColor"),
            b = (0, s._z)(p, "topNavBackground") || h,
            K = (0, s._z)(p, "topNavTextColor") || S,
            x = document.querySelector(u),
            B = (0, s._z)(p, "iaTheming"),
            U = (0, s._z)(p, "customTheme"),
            R = (0, s._z)(p, "windowGradient"),
            G = (0, s._z)(p, "isCreatorInSetupFlow"),
            H = (0, s.W6)("viewLayoutIsWorkspaceSwitcherVisible"),
            F = H ? v : 0;
          if (!x) return;
          const V = x.querySelector(l);
          if (!h || G) {
            f();
            return;
          }
          if (C) {
            if (V && S && h) {
              const z = document.createElement("div");
              z.classList.add("p-ia4_client_container_placeholder--sidebar"),
                (z.style.width = `${D}px`);
              const Ae = document.createElement("div");
              Ae.classList.add("p-ia4_client_container_placeholder--tab_rail");
              const ae = document.createElement("div");
              if (
                (ae.classList.add(
                  "p-ia4_client_container_placeholder--content"
                ),
                (ae.style.left = `${F + E + D}px`),
                x.appendChild(z),
                H &&
                  (x.appendChild(Ae),
                  z.classList.add(
                    "p-ia4_client_container_placeholder--sidebar_with_workspace_switcher"
                  ),
                  B != null &&
                    B.sidebarInverted &&
                    (z.style.boxShadow =
                      "-1px 0px 0px 0px rgba(255, 255, 255, 0.15)"),
                  ae.classList.add(
                    "p-ia4_client_container_placeholder--content_with_workspace_switcher"
                  )),
                x.appendChild(ae),
                x.classList.add(
                  "p-ia4_client_container_placeholder--theme-background"
                ),
                B)
              ) {
                let de = "#ffffffB3";
                const ve = "#1012148c";
                if (
                  (B.mode === "light" &&
                    B.sidebarInverted &&
                    (de = "#ffffff1A"),
                  B.mode === "dark")
                ) {
                  var X, q;
                  (de = ve),
                    (q =
                      (X = window.document) === null || X === void 0
                        ? void 0
                        : X.querySelector("body")) === null ||
                      q === void 0 ||
                      q.classList.add(n.RD);
                }
                if (((z.style.backgroundColor = de), U && B.useCustomHex)) {
                  if (B.primary.custom) {
                    const Se = "bootPrimary",
                      Ee = g({
                        iaTheming: B,
                        customTheme: U,
                      });
                    Ee &&
                      x.style.setProperty(
                        `--dt_color-plt-${Se}-${Ee.shade}`,
                        Ee.value
                      );
                  }
                  if (B.highlight1.custom) {
                    const Se = "bootHighlight1",
                      Ee = T({
                        name: "bootHighlight1",
                        hex: B.highlight1.custom.startsWith("#")
                          ? B.highlight1.custom
                          : `#${B.highlight1.custom}`,
                        iaTheming: B,
                        customTheme: U,
                      });
                    x.style.setProperty(
                      `--dt_color-plt-${Se}-${Ee.shade}`,
                      Ee.value
                    );
                  }
                }
                if (R) {
                  const Se = (0, n.Lp)({
                    mode: (0, r.Gk)(B, B.mode),
                    primary: B.primary,
                    highlight1: B.highlight1,
                    brightness: B.brightness,
                    useCustomHex: U && B.useCustomHex,
                  })
                    .replace(/primary/g, "bootPrimary")
                    .replace(/highlight1/g, "bootHighlight1");
                  x.style.background = Se;
                } else {
                  const Se = "bootPrimary",
                    Ee = g({
                      iaTheming: B,
                      customTheme: !!U,
                    }),
                    be = (0, r.Gk)(B, B.mode),
                    Ce = (0, n.VS)({
                      mode: be,
                      role:
                        be === "light-inverted-sidebar"
                          ? "highlight1"
                          : "primary",
                      brightness: (B == null ? void 0 : B.brightness) || n.GK,
                    });
                  x.style.backgroundColor =
                    U && B.useCustomHex && Ee
                      ? `rgb(var(--dt_color-plt-${Se}-${Ee.shade}))`
                      : `rgb(var(--dt_color-plt-${B.primary.palette}-${Ce}))`;
                }
              } else if (((z.style.backgroundColor = h), b)) {
                const de = b,
                  ve = (0, o.fl)(b, 25);
                x.style.background = `radial-gradient(
						circle at 50% 50%,
						${de} 20%,
						transparent 80%
					),
					conic-gradient(
            from 45deg at 50% 50%,
            ${ve} 0%,
            ${de} 25%,
            ${ve} 50%,
            ${de} 75%,
            ${ve} 100%
          )`;
              }
              V.classList.add("p-ia4_client_container_placeholder--top-nav"),
                (0, d.ve)() &&
                  b &&
                  i.ea3.isAvailable() &&
                  (0, i.ea3)((0, i.Xgz)(), {
                    color: b,
                    symbolColor: K,
                  });
            }
            x.style.opacity = "1";
          } else {
            if (
              ((0, a.VA)() &&
                O &&
                (x.classList.add(
                  "p-client_container_placeholder--with-team-switcher"
                ),
                P && (x.style.borderLeftColor = P)),
              V && S && h)
            ) {
              const de = (0, o.Lh)(S, h, 0.1),
                ve = (0, o.Ko)(S, 0.1);
              (x.style.borderRightColor = de),
                (0, d.ve)() &&
                  b &&
                  i.ea3.isAvailable() &&
                  (0, i.ea3)((0, i.Xgz)(), {
                    color: b,
                    symbolColor: K,
                  }),
                b && (V.style.backgroundColor = b),
                (V.style.color = ve),
                (0, a.VA)() &&
                  O &&
                  (x.style.removeProperty("border-left-color"),
                  (x.style.boxShadow = `-60px 0px 0px 0px ${h}`),
                  V.classList.add(
                    "p-client_container_placeholder__nav--with-team-switcher"
                  ));
            }
            let z = h;
            var oe;
            const Ae =
                (oe = (0, s._z)(p, c._e)) !== null && oe !== void 0 ? oe : "",
              ae = parseInt(Ae, 10);
            isNaN(ae) ||
              ((x.style.width = `${Ae + 1}px`),
              (0, a.VA)() &&
                O &&
                ae === 0 &&
                ((x.style.width = "60px"),
                (z = "none"),
                (x.style.borderRight = "none"))),
              (x.style.backgroundColor = z),
              (x.style.opacity = "1");
          }
        }
        _(I, "renderBootPlaceholder");
        function f() {
          const M = document.querySelector(u);
          M && M.remove();
        }
        _(f, "removeBootPlaceholder"),
          Object.defineProperty(
            {
              removeBootPlaceholder: f,
            },
            "removeBootPlaceholder",
            {
              get: () => f,
              set: (M) => {
                f = M;
              },
            }
          );
      },
      7331146418: (W, A, e) => {
        "use strict";
        var t = e(9706240641);
        const n = "Timeout";
        class s extends Error {}
        _(s, "TimeoutError");
        function i(st) {
          return new Promise((ut) => {
            setTimeout(ut, st);
          });
        }
        _(i, "sleep");
        function d(st) {
          let ut =
            arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : n;
          return new Promise((vt, St) => {
            setTimeout(() => St(new s(`${ut}: waited ${st}ms`)), st);
          });
        }
        _(d, "timeout");
        function o(st, ut) {
          let vt =
            arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : n;
          return Promise.race([d(ut, vt), st]);
        }
        _(o, "withTimeout");
        var a = e(7031360717),
          r = e(1535672935),
          c = e(6533394955);
        function u(st, ut) {
          var vt, St, vn, kt, Ln, Hn;
          const ns = (0, c.getClientStoreInstance)();
          if (
            (ns.dispatch((0, r.setWorkspaceFailedToBoot)(st)),
            !(ut == null || (vt = ut.data) === null || vt === void 0) &&
              vt.active_migration)
          ) {
            var ls, Ks;
            ns.dispatch(
              (0, r.setWorkspaceIsMigrating)({
                teamId: st,
                migrationId:
                  ut == null || (ls = ut.data) === null || ls === void 0
                    ? void 0
                    : ls.migration_id,
                canViewMigrationStatus:
                  ut == null || (Ks = ut.data) === null || Ks === void 0
                    ? void 0
                    : Ks.can_view_migration_status,
              })
            ),
              (0, a.R8)(
                "BOOT",
                `(${st}) Workspace boot failed due to active migration`
              );
          }
          if (
            ((ut == null || (St = ut.data) === null || St === void 0
              ? void 0
              : St.error) === "accesslimited" &&
              ns.dispatch((0, r.setWorkspaceIsAccessLimited)(st)),
            (ut == null || (vn = ut.data) === null || vn === void 0
              ? void 0
              : vn.error) === "two_factor_setup_required" &&
              ns.dispatch((0, r.setWorkspaceNeeds2FASetup)(st)),
            (ut == null || (kt = ut.data) === null || kt === void 0
              ? void 0
              : kt.error) === "user_in_no_workspaces" &&
              ns.dispatch((0, r.setUserNotMemberOfAnyWorkspaceInOrg)(st)),
            (ut == null || (Ln = ut.data) === null || Ln === void 0
              ? void 0
              : Ln.error) === "mobile_login_required" &&
              ns.dispatch((0, r.setUserRequiresMobileLogin)(st)),
            (ut == null || (Hn = ut.data) === null || Hn === void 0
              ? void 0
              : Hn.error) === "user_needs_to_accept_custom_tos")
          ) {
            var Bs;
            ns.dispatch(
              (0, r.setWorkspaceNeedsToAcceptCustomTOS)({
                teamId: st,
                url:
                  ut == null || (Bs = ut.data) === null || Bs === void 0
                    ? void 0
                    : Bs.url,
              })
            );
          }
        }
        _(u, "markTeamBootFailed");
        var l = e(6188550760),
          m = e(7515251865),
          v = e(9012396182);
        function E(st) {
          const ut = (0, c.getClientStoreInstance)();
          var vt;
          const St =
              (vt = (0, v.getNavigateToUnbootedWorkspace)(ut.getState())) !==
                null && vt !== void 0
                ? vt
                : {},
            { bootingTeamId: vn, navigateToRouteProps: kt } = St;
          return vn === st
            ? ((0, l._U)(
                (kt == null ? void 0 : kt.routeName) || m.o,
                {
                  teamId: st,
                  ...((kt == null ? void 0 : kt.params) || {}),
                },
                {
                  reason: "delayed-unbooted-team-switch",
                  ...((kt == null ? void 0 : kt.options) || {}),
                }
              ),
              ut.dispatch((0, r.setNavigateToUnbootedWorkspace)({})),
              !0)
            : !1;
        }
        _(E, "maybeNavigateToUnbootedWorkspace");
        function T(st, ut) {
          if (!st) throw new Error("Missing team id, cannot thin boot team.");
          u(st, ut), E(st);
        }
        _(T, "thinBootTeam");
        var g = e(1073393277),
          I = e(2212859256),
          f = e(1044468604),
          y = e(3945243579);
        const M = {
          [f.F9.API]: p,
          [f.F9.BOOT_APP]: O,
          [f.F9.BOOT_TEAM]: C,
          [f.F9.DEFAULT]: h,
        };
        function p(st, ut, vt) {
          var St;
          const vn = vt == null ? void 0 : vt.teamId;
          if (window.isReloading) {
            (0, a.pq)(
              "BOOT",
              `(${vn}) Ongoing reload detected during Gantry API error handler; Halting error handler.`
            );
            return;
          }
          f.XB[f.F9.API](st, ut, {
            ...vt,
            shouldDisplayErrorView: !1,
            shouldBeaconError:
              (st == null || (St = st.data) === null || St === void 0
                ? void 0
                : St.error) !== "user_needs_to_accept_custom_tos",
          }),
            T(vn, st),
            ut != null &&
              ut.isForegroundTeam &&
              Promise.all([
                e.e("gantry-v2-vendors-async"),
                e.e("gantry-v2-async-client-render-client"),
              ])
                .then(e.bind(e, 7842576336))
                .then((kt) => {
                  let { renderClient: Ln } = kt;
                  (0, g.a5)(), (0, y.A)(), Ln();
                });
        }
        _(p, "handleApiError");
        function O(st, ut, vt) {
          (0, g.a5)(), f.XB[f.F9.BOOT_APP](st, ut, vt);
        }
        _(O, "handleBootAppError");
        function C(st, ut, vt) {
          if (vt) {
            const { teamId: St } = vt;
            (0, I.y)(St);
          }
          (0, g.a5)(), f.XB[f.F9.BOOT_TEAM](st, ut, vt);
        }
        _(C, "handleBootTeamError");
        function h(st, ut, vt) {
          (0, g.a5)(), f.XB[f.F9.DEFAULT](st, ut, vt);
        }
        _(h, "handleDefaultError");
        const D = {
          handleApiError: p,
          handleBootAppError: O,
          handleBootTeamError: C,
          handleDefaultError: h,
        };
        var P = e(9113979368),
          S = e(1197598850),
          b = e(1092614768),
          K = e(2325478352),
          x = e(796111729),
          B = e(2250002584),
          U = e(2872463257);
        const R = "cse-api",
          G = "cse-boot-api";
        function H(st) {
          return F.apply(this, arguments);
        }
        _(H, "fetchBootData");
        function F() {
          return (
            (F = (0, t.coroutine)(function* (st) {
              const { teamId: ut, userId: vt, isBootingWarm: St } = st,
                vn = yield St,
                kt = vn ? "deferred-data" : "initial-data";
              let Ln = null;
              (0, K.EZ)() &&
                vn &&
                (Ln = yield (0, b.z6)({
                  teamId: ut,
                  userId: vt,
                }));
              const Hn = S.V$.bind(null, {
                ...st,
                reason: kt,
                minChannelUpdated: Ln,
              });
              return V(Hn, {
                teamId: ut,
                userId: vt,
                reason: kt,
              });
            })),
            F.apply(this, arguments)
          );
        }
        _(F, "_fetchBootData");
        function V(st) {
          let ut =
            arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          const vt = (0, B.F)(),
            St = vt.createTrace({
              traceName: R,
              tags: ut,
              samplingOptions: {
                sampleType: U.nl.ALWAYS,
              },
            });
          if (!(St != null && St.traceFn))
            return (
              (0, x.Wo)().warn(
                "BOOT",
                "Trace or traceFn is undefined; Unable to trace client.userBoot data fetch."
              ),
              st()
            );
          const vn = _((Ln, Hn) => {
              if ((0, P.A)(Hn)) {
                const ns = {
                  state: U.$m.SUCCESS,
                  message: "client_userBoot_empty",
                };
                Ln == null || Ln.addTags(ns),
                  Ln == null || Ln.close(),
                  vt.reportTrace(St);
              } else vt.clearTrace(St);
            }, "onResolve"),
            kt = _((Ln, Hn) => {
              var ns;
              const ls = {
                state: U.$m.ERROR,
              };
              Hn != null && Hn.status && (ls.status = Hn.status),
                Hn != null && Hn.message && (ls.message = Hn.message),
                !(Hn == null || (ns = Hn.data) === null || ns === void 0) &&
                  ns.error &&
                  (ls.reason = Hn.data.error),
                Ln == null || Ln.addTags(ls),
                Ln == null || Ln.close(),
                vt.reportTrace(St);
            }, "onError");
          return St.traceFn(
            {
              name: G,
              onError: kt,
              onResolve: vn,
            },
            st
          );
        }
        _(V, "maybeTraceClientUserBootDataFetch"),
          Object.defineProperty(
            {
              CSE_API_TRACE_LABEL: R,
              CLIENT_BOOT_SPAN_LABEL: G,
            },
            "fetchBootData",
            {
              get: () => H,
              set: (st) => {
                H = st;
              },
            }
          );
        var q = e(229828696);
        function oe(st) {
          return z.apply(this, arguments);
        }
        _(oe, "fetchChannelsData");
        function z() {
          return (
            (z = (0, t.coroutine)(function* (st) {
              if (!(0, q.X)()) return;
              const { teamId: ut, userId: vt, isBootingWarm: St } = st,
                vn = yield St,
                kt = vn ? "deferred-data" : "initial-data";
              let Ln = null;
              return (
                (0, K.EZ)() &&
                  vn &&
                  (Ln = yield (0, b.z6)({
                    teamId: ut,
                    userId: vt,
                  })),
                (0, S.ee)({
                  ...st,
                  reason: kt,
                  minChannelUpdated: Ln,
                })
              );
            })),
            z.apply(this, arguments)
          );
        }
        _(z, "_fetchChannelsData");
        var Ae = e(3398586081),
          ae = e(6422693406),
          de = e(9733150292),
          ve = e(6575028637);
        const Se = (0, Ae.A)(Ce, (st) => st.enterpriseId);
        function Ee(st) {
          return be.apply(this, arguments);
        }
        _(Ee, "maybeFetchEnterpriseData");
        function be() {
          return (
            (be = (0, t.coroutine)(function* (st) {
              return st.enterpriseId ? Se(st) : {};
            })),
            be.apply(this, arguments)
          );
        }
        _(be, "_maybeFetchEnterpriseData");
        function Ce(st) {
          return Z.apply(this, arguments);
        }
        _(Ce, "fetchAllEnterpriseData");
        function Z() {
          return (
            (Z = (0, t.coroutine)(function* (st) {
              const { teamId: ut, enterpriseId: vt } = st;
              var St;
              let vn =
                (St = (0, de._z)(ut ?? "", "enterprise_api_token")) !== null &&
                St !== void 0
                  ? St
                  : "";
              if (ut && (0, ve.ZN)(ut) && !vn) {
                var kt;
                vn =
                  (kt = (0, de._z)(ut, "token")) !== null && kt !== void 0
                    ? kt
                    : "";
              }
              const [Ln, Hn] = yield ae.S.all([
                  (0, S.YH)(st),
                  (0, S.O5)({
                    ...st,
                    token: vn,
                  }),
                ]),
                ns = {
                  enterprise_id: vt,
                  page_needs_enterprise: !0,
                  enterprise_api_token: vn,
                };
              return {
                enterpriseData: Ln == null ? void 0 : Ln.enterprise,
                enterprisePrefsData: Hn,
                enterpriseBootData: ns,
              };
            })),
            Z.apply(this, arguments)
          );
        }
        _(Z, "_fetchAllEnterpriseData");
        const $ = {
          resetMemoizedFetchEnterpriseDataCache: () => {
            Se.cache.clear();
          },
        };
        var N = e(3914849812),
          L = e(4892637646),
          w = e(6998663753),
          k = e(9706702639),
          J = e(5313493085);
        function ee(st) {
          let { params: ut, routeName: vt } = st;
          const St = ut.teamId || ut.teamOrEnterpriseId,
            { dispatch: vn } = (0, c.getStoreInstanceByTeamId)(St);
          vn(
            (0, J.M)({
              routeName: vt,
              routeParams: ut,
            })
          );
        }
        _(ee, "channelCanvasListener");
        var ne = e(1881693845),
          pe = e(2591023465),
          Me = e(3674298388);
        const ke = _((st) => {
          let { prevTeamId: ut, nextTeamId: vt } = st;
          if (ut !== vt) return;
          const vn = (0, c.getStoreInstanceByTeamId)(vt).getState();
          (0, ne.A)() &&
            (0, Me.r8)(vn) &&
            (0, c.dispatchForClientStore)((0, pe.vm)(!1));
        }, "dismiss_floating_sidebar");
        var ge = e(9268451279),
          fe = e(2805462396),
          re = e(4386248732),
          le = e(7765212398),
          Re = e(9460580631);
        function ye(st) {
          let { params: ut, prevRouteInfo: vt, prevTeamId: St } = st;
          const vn = vt == null ? void 0 : vt.params;
          if (
            !vn ||
            vn.entityId !== "composer" ||
            !vn.draftId ||
            vn.draftId === (ut == null ? void 0 : ut.draftId)
          )
            return !0;
          const { dispatch: kt, getState: Ln } = (0,
            c.getStoreInstanceByTeamId)(St),
            Hn = Ln(),
            ns = (0, re.di)(vn.draftId);
          if (!ns) return !0;
          const ls = (0, le.YI)(Hn, ns);
          return (
            (0, ge.v7)(ls, {
              trimWhitespace: !0,
            }) ||
              (0, fe.A)(Hn, ls) ||
              kt(
                (0, Re.A)({
                  ids: [ns],
                  reason: "draftsListenerBefore",
                })
              ),
            !0
          );
        }
        _(ye, "draftsListenerBefore");
        var Te = e(4446301238),
          De = e(9884588328),
          Ue = e(1407713935),
          Ke = e(8040098042),
          Ze = e(9101533895),
          Q = e(7053828403);
        function ie(st, ut) {
          return Ve.apply(this, arguments);
        }
        _(ie, "ensureChannel");
        function Ve() {
          return (
            (Ve = (0, t.coroutine)(function* (st, ut) {
              const vt = st.getState(),
                St = (0, Ze.OL)(vt, ut, !1);
              return (0, Ue.hc)(St)
                ? St
                : st
                    .dispatch(
                      (0, Te.pX)({
                        ids: [ut],
                        reason: "sonic/route-listeners/ensure-channel",
                        callSource: Te.aI.EnsureChannel,
                      })
                    )
                    .then((vn) => {
                      if (!vn) return;
                      const { channels: kt, resolved: Ln } = vn;
                      if (!(!Ln || !Ln.includes(ut))) return kt[0];
                    });
            })),
            Ve.apply(this, arguments)
          );
        }
        _(Ve, "_ensureChannel");
        const xe = (function () {
          var st = (0, t.coroutine)(function* (ut) {
            let {
              prevTeamId: vt,
              nextTeamId: St,
              routeName: vn,
              params: kt = {},
            } = ut;
            const Ln = (0, c.getStoreInstanceByTeamId)(St);
            if (!(0, Ke.A)(kt.entityId)) return ae.S.resolve(void 0);
            const Hn = kt.entityId;
            return ie(Ln, Hn).then((ns) => {
              if (ns && !(0, De.lo)(ns)) return ae.S.resolve(void 0);
              if (vt !== St) {
                const ls = (0, Q.EI)(Ln.getState(), {
                  mainView: !0,
                });
                return ls === Hn
                  ? ae.S.reject(
                      new Error(
                        "fallback channel ID === target channel ID, can\u2019t switch workspaces"
                      )
                    )
                  : ((0, l._U)(
                      vn,
                      {
                        ...kt,
                        entityId: ls,
                      },
                      {
                        shouldReplaceState: !0,
                      }
                    ),
                    ae.S.resolve(!1));
              }
              return ns
                ? ae.S.reject(
                    new Error("tried to switch to a channel from another team")
                  )
                : ae.S.resolve(!1);
            });
          });
          return function (ut) {
            return st.apply(this, arguments);
          };
        })();
        var je = e(1530920905);
        function Fe(st) {
          let { nextTeamId: ut, prevTeamId: vt } = st;
          const { dispatch: St } = (0, c.getStoreInstanceByTeamId)(ut);
          vt !== ut &&
            St(
              (0, je.yh)({
                teamId: ut,
              })
            );
        }
        _(Fe, "permissionsListener");
        var He = e(3614984351),
          Oe = e(9005797924),
          Ye = e(4496040127);
        const at = _((st) => {
          let { prevTeamId: ut, nextTeamId: vt } = st;
          if (!(0, Ye.VA)() || ut === vt || !vt) return !0;
          if ((0, He.A)(vt, ut)) return !1;
          const St = (0, c.getStateForClientStore)();
          return (0, v.isWorkspaceExpired)(St, vt) ||
            (0, v.isWorkspacePendingAuth)(St, vt)
            ? ((0, Oe.A)(vt), !1)
            : !0;
        }, "maybe_finish_signin");
        var _t = e(4992650731);
        const pt = _((st) => {
          let {
            prevTeamId: ut,
            nextTeamId: vt,
            routeName: St,
            params: vn,
          } = st;
          if ((0, Ye.VA)() || ut === vt) return !0;
          const kt = (0, l.M5)(St, {
            ...vn,
            teamId: vt,
          });
          if (!vt) return !0;
          const Ln = (0, c.getStateForClientStore)(),
            Hn = (0, v.getWorkspacesMeta)(Ln),
            ns = Hn && Hn[vt] && Hn[vt].subdomain,
            ls = (0, Ye.eb)(ns) || `_team_${vt}`;
          return (0, _t.A)(kt, ls), !1;
        }, "maybe_open_other_team_in_browser");
        var Qe = e(8959118205),
          ct = e(8834730594),
          Pt = e(4588963228),
          zt = e(497761763),
          an = e(4327331459),
          Qt = e(3707193570),
          tn = e(4862221402),
          Ht = e(6427150145);
        const Kt = /^[\d]{13}$/;
        function qt(st) {
          return st ? Kt.test(st) : !1;
        }
        _(qt, "looksLikeLastReadTs");
        var Tn = e(1826991857),
          Mt = e(7174777686),
          Jt = e(7752506476);
        function dn(st) {
          return (0, Mt.A)(Jt.M, st) || st === "";
        }
        _(dn, "looksLikeFlexpaneSectionId");
        var rn = e(6471801899),
          gn = e(1233969417),
          Zt = e(2960290117);
        const Vt = [
          /^people[ -~]{1,27}$/,
          /^contacts[ -~]{1,27}$/,
          /^otherContacts[ -~]{1,27}$/,
          /^slackUsers[ -~]{1,27}$/,
        ];
        function Sn(st) {
          return Vt.some((ut) => ut.test(st));
        }
        _(Sn, "looksLikeContactExternalId");
        var ze = e(5084575109),
          Ot = e(8414867410),
          fn = e(6605261507),
          ln = e(5587260451);
        const it = ["received", "sent"];
        function Tt(st) {
          return it.includes(st);
        }
        _(Tt, "looksLikeInvitationsTabRouteParam");
        var Ct = e(3468466741),
          Rt = e(8538260492),
          Yt = e(4425811520),
          bn = e(7770205178),
          Wn = e(9132066222),
          hn = e(8237194282),
          Bn = e(8305125093);
        function Rn(st) {
          return !!Qe.as[st];
        }
        _(Rn, "isEntityRedirectKey");
        const zn = _(
            (st) => Object.keys(Qe.as).includes(st),
            "isRedirectRoute"
          ),
          is = {
            entityId: (st) =>
              (0, ct.A)(st) ||
              (0, Pt.A)(st) ||
              (0, Ke.A)(st) ||
              (0, zt.A)(st) ||
              (0, an.A)(st) ||
              (0, Qt.Ay)(st) ||
              (0, tn.A)(st) ||
              (0, ze.n)(st) ||
              (0, Ot.bd)(st) ||
              zn(st) ||
              (0, Zt.Ay)(st) ||
              (0, Yt.xL)(st),
            appOrServiceId: (st) => (0, Pt.A)(st) || (0, ct.A)(st),
            timestamp: Ht.A,
            threadId: Tn.A,
            threadPageId: Tn.A,
            replyTs: Ht.A,
            sectionId: dn,
            tabId: (st) => (0, fn.Dl)(st),
            viewName: (st) => (0, ln.c)(st),
            listsViewName: rn.FO,
            draftId: re.ai,
            invitationsTabId: Tt,
            channelId: Ke.A,
            channelFilesId: (st) => /^files-.+/.test(st),
            searchQuery: (st) => /^search-.+/.test(st),
            articleId: (st) => (0, gn.A)(st),
            tileEntityId: (st) =>
              (0, Ke.A)(st) || (0, ze.n)(st) || (0, Ot.bd)(st),
            scTeamOrEnterpriseId: (st) => (0, Qt.Am)(st),
            quipDocId: Zt.Ay,
            channelCanvasId: Zt.Ay,
            contactExternalId: Sn,
            itemId: Ct.Ny,
            recordId: rn.pq,
            focusRecordId: rn.or,
            listViewId: rn._o,
            lastReadTs: qt,
            canvasOpenedFromId: (st) =>
              (0, Ke.A)(st) || (0, an.A)(st) || st === Rt.eE.QUIP_FILES,
            externalWorkspacePage: bn.W_,
            channelTabId: Wn.jK,
            salesforceRecordId: hn.V,
            workflowTemplateId: Bn.A,
          },
          ss = {
            [m.o]: {
              paths: ["/"],
            },
            [Qe._G]: {
              paths: [
                "/:entityId",
                "/:entityId/:timestamp",
                "/:entityId/:tabId",
                "/:entityId/:viewName",
                "/:entityId/:viewName/:invitationsTabId",
                "/:entityId/:listsViewName",
                "/:entityId/:listsViewName/:focusRecordId",
                "/:entityId/:listsViewName/:listViewId",
                "/:entityId/:draftId",
                "/:entityId/:threadPageId",
                "/:entityId/:searchQuery",
                "/:entityId/:channelFilesId",
                "/:entityId/:scTeamOrEnterpriseId",
                "/:entityId/:itemId",
                "/:entityId/:channelCanvasId",
                "/:entityId/:canvasOpenedFromId",
                "/:entityId/:externalWorkspacePage",
                "/:entityId/tabs/:channelTabId",
                "/:entityId/:salesforceRecordId",
              ],
            },
            [Qe.lM]: {
              paths: [
                "/:entityId/thread/:threadId",
                "/:entityId/thread/:threadId/:replyTs",
                "/:entityId/:timestamp/thread/:threadId",
                "/:entityId/:viewName/thread/:threadId",
                "/:entityId/:viewName/:invitationsTabId/thread/:threadId",
                "/:entityId/:tabId/thread/:threadId",
                "/:entityId/:draftId/thread/:threadId",
                "/:entityId/:searchQuery/thread/:threadId",
                "/:entityId/:channelFilesId/thread/:threadId",
                "/:entityId/:scTeamOrEnterpriseId/thread/:threadId",
                "/:entityId/:listsViewName/thread/:threadId",
                "/:entityId/:canvasOpenedFromId/thread/:threadId",
              ],
            },
            [Qe.w7]: {
              paths: [
                "/:entityId/messages/:channelId",
                "/:entityId/messages/:channelId/:timestamp",
              ],
            },
            [Qe.Vy]: {
              paths: [
                "/:entityId/channel_info",
                "/:entityId/:timestamp/channel_info",
                "/:entityId/:viewName/channel_info",
                "/:entityId/:viewName/:invitationsTabId/channel_info",
                "/:entityId/:tabId/channel_info",
                "/:entityId/:draftId/channel_info",
                "/:entityId/:threadPageId/channel_info",
                "/:entityId/:searchQuery/channel_info",
                "/:entityId/:channelFilesId/channel_info",
                "/:entityId/:scTeamOrEnterpriseId/channel_info",
                "/:entityId/:listsViewName/channel_info",
                "/:entityId/:canvasOpenedFromId/channel_info",
              ],
            },
            [Qe.o6]: {
              paths: [
                "/:entityId/inspect/:channelId",
                "/:entityId/inspect/:channelId/:sectionId",
              ],
            },
            [Qe.p3]: {
              paths: [
                "/:entityId/activity",
                "/:entityId/:timestamp/activity",
                "/:entityId/:viewName/activity",
                "/:entityId/:viewName/:invitationsTabId/activity",
                "/:entityId/:tabId/activity",
                "/:entityId/:draftId/activity",
                "/:entityId/:threadPageId/activity",
                "/:entityId/:searchQuery/activity",
                "/:entityId/:channelFilesId/activity",
                "/:entityId/:scTeamOrEnterpriseId/activity",
                "/:entityId/:canvasOpenedFromId/activity",
              ],
            },
            [Qe.W2]: {
              paths: [
                "/:entityId/starred_items",
                "/:entityId/:timestamp/starred_items",
                "/:entityId/:viewName/starred_items",
                "/:entityId/:viewName/:invitationsTabId/starred_items",
                "/:entityId/:tabId/starred_items",
                "/:entityId/:draftId/starred_items",
                "/:entityId/:threadPageId/starred_items",
                "/:entityId/:searchQuery/starred_items",
                "/:entityId/:channelFilesId/starred_items",
                "/:entityId/:scTeamOrEnterpriseId/starred_items",
                "/:entityId/:listsViewName/starred_items",
                "/:entityId/:canvasOpenedFromId/starred_items",
              ],
            },
            [Qe.ym]: {
              paths: [
                "/:entityId/saved",
                "/:entityId/:timestamp/saved",
                "/:entityId/:viewName/saved",
                "/:entityId/:viewName/:invitationsTabId/saved",
                "/:entityId/:tabId/saved",
                "/:entityId/:draftId/saved",
                "/:entityId/:threadPageId/saved",
                "/:entityId/:searchQuery/saved",
                "/:entityId/:channelFilesId/saved",
                "/:entityId/:scTeamOrEnterpriseId/saved",
                "/:entityId/:listsViewName/saved",
                "/:entityId/:canvasOpenedFromId/saved",
              ],
            },
            [Qe.fr]: {
              paths: [
                "/:entityId/appspane",
                "/:entityId/:timestamp/appspane",
                "/:entityId/:viewName/appspane",
                "/:entityId/:viewName/:invitationsTabId/appspane",
                "/:entityId/:tabId/appspane",
                "/:entityId/:draftId/appspane",
                "/:entityId/:threadPageId/appspane",
                "/:entityId/:searchQuery/appspane",
                "/:entityId/:channelFilesId/appspane",
                "/:entityId/:scTeamOrEnterpriseId/appspane",
                "/:entityId/:listsViewName/appspane",
                "/:entityId/:canvasOpenedFromId/appspane",
              ],
            },
            [Qe.M9]: {
              paths: [
                "/:entityId/files",
                "/:entityId/:timestamp/files",
                "/:entityId/:viewName/files",
                "/:entityId/:viewName/:invitationsTabId/files",
                "/:entityId/:tabId/files",
                "/:entityId/:draftId/files",
                "/:entityId/:threadPageId/files",
                "/:entityId/:searchQuery/files",
                "/:entityId/:channelFilesId/files",
                "/:entityId/:scTeamOrEnterpriseId/files",
                "/:entityId/:listsViewName/files",
              ],
            },
            [Qe.T$]: {
              paths: [
                "/:entityId/filespane",
                "/:entityId/:timestamp/filespane",
                "/:entityId/:viewName/filespane",
                "/:entityId/:viewName/:invitationsTabId/filespane",
                "/:entityId/:tabId/filespane",
                "/:entityId/:draftId/filespane",
                "/:entityId/:threadPageId/filespane",
                "/:entityId/:searchQuery/filespane",
                "/:entityId/:channelFilesId/filespane",
                "/:entityId/:scTeamOrEnterpriseId/filespane",
                "/:entityId/:listsViewName/filespane",
              ],
            },
            [Qe.De]: {
              paths: [
                "/:entityId/files/:fileId",
                "/:entityId/:timestamp/files/:fileId",
                "/:entityId/:viewName/files/:fileId",
                "/:entityId/:viewName/:invitationsTabId/files/:fileId",
                "/:entityId/:tabId/files/:fileId",
                "/:entityId/:draftId/files/:fileId",
                "/:entityId/:threadPageId/files/:fileId",
                "/:entityId/:searchQuery/files/:fileId",
                "/:entityId/:channelFilesId/files/:fileId",
                "/:entityId/:scTeamOrEnterpriseId/files/:fileId",
                "/:entityId/:listsViewName/files/:fileId",
                "/:entityId/:canvasOpenedFromId/files/:fileId",
              ],
            },
            [Qe.wA]: {
              paths: [
                "/:entityId/comments/:quipDocId",
                "/:entityId/:canvasOpenedFromId/comments/:quipDocId",
              ],
            },
            [Qe.li]: {
              paths: [
                "/:entityId/history/:quipDocId",
                "/:entityId/:canvasOpenedFromId/history/:quipDocId",
              ],
            },
            [Qe.mj]: {
              paths: [
                "/:entityId/docs/:quipDocId",
                "/:entityId/docs/:quipDocId/:lastReadTs",
                "/:entityId/:timestamp/docs/:quipDocId",
                "/:entityId/:viewName/docs/:quipDocId",
                "/:entityId/:viewName/:invitationsTabId/docs/:quipDocId",
                "/:entityId/:tabId/docs/:quipDocId",
                "/:entityId/:draftId/docs/:quipDocId",
                "/:entityId/:threadPageId/docs/:quipDocId",
                "/:entityId/:searchQuery/docs/:quipDocId",
                "/:entityId/:channelFilesId/docs/:quipDocId",
                "/:entityId/:listsViewName/docs/:quipDocId",
              ],
            },
            [Qe.y0]: {
              paths: [
                "/:entityId/files/type",
                "/:entityId/:timestamp/files/type",
                "/:entityId/:viewName/files/type",
                "/:entityId/:viewName/:invitationsTabId/files/type",
                "/:entityId/:tabId/files/type",
                "/:entityId/:draftId/files/type",
                "/:entityId/:threadPageId/files/type",
                "/:entityId/:searchQuery/files/type",
                "/:entityId/:channelFilesId/files/type",
                "/:entityId/:scTeamOrEnterpriseId/files/type",
                "/:entityId/:listsViewName/files/type",
              ],
            },
            [Qe.Nh]: {
              paths: [
                "/:entityId/files/:memberId",
                "/:entityId/:timestamp/files/:memberId",
                "/:entityId/:viewName/files/memberId",
                "/:entityId/:viewName/:invitationsTabId/files/memberId",
                "/:entityId/:tabId/files/:memberId",
                "/:entityId/:draftId/files/:memberId",
                "/:entityId/:threadPageId/files/:memberId",
                "/:entityId/:searchQuery/files/:memberId",
                "/:entityId/:channelFilesId/files/:memberId",
                "/:entityId/:scTeamOrEnterpriseId/files/:memberId",
                "/:entityId/:listsViewName/files/:memberId",
                "/:entityId/:canvasOpenedFromId/files/:memberId",
              ],
            },
            [Qe.$s]: {
              paths: [
                "/:entityId/user_groups",
                "/:entityId/:timestamp/user_groups",
                "/:entityId/:viewName/user_groups",
                "/:entityId/:viewName/:invitationsTabId/user_groups",
                "/:entityId/:tabId/user_groups",
                "/:entityId/:draftId/user_groups",
                "/:entityId/:threadPageId/user_groups",
                "/:entityId/:searchQuery/user_groups",
                "/:entityId/:channelFilesId/user_groups",
                "/:entityId/:scTeamOrEnterpriseId/user_groups",
                "/:entityId/:listsViewName/user_groups",
                "/:entityId/:canvasOpenedFromId/user_groups",
              ],
            },
            [Qe.Mu]: {
              paths: [
                "/:entityId/user_groups/:userGroupId",
                "/:entityId/:timestamp/user_groups/:userGroupId",
                "/:entityId/:viewName/user_groups/:userGroupId",
                "/:entityId/:viewName/:invitationsTabId/user_groups/:userGroupId",
                "/:entityId/:tabId/user_groups/:userGroupId",
                "/:entityId/:draftId/user_groups/:userGroupId",
                "/:entityId/:threadPageId/user_groups/:userGroupId",
                "/:entityId/:searchQuery/user_groups/:userGroupId",
                "/:entityId/:channelFilesId/user_groups/:userGroupId",
                "/:entityId/:scTeamOrEnterpriseId/user_groups/:userGroupId",
                "/:entityId/:listsViewName/user_groups/:userGroupId",
                "/:entityId/:canvasOpenedFromId/user_groups/:userGroupId",
              ],
            },
            [Qe.Ns]: {
              paths: [
                "/:entityId/whats_new",
                "/:entityId/:timestamp/whats_new",
                "/:entityId/:viewName/whats_new",
                "/:entityId/:viewName/:invitationsTabId/whats_new",
                "/:entityId/:tabId/whats_new",
                "/:entityId/:draftId/whats_new",
                "/:entityId/:threadPageId/whats_new",
                "/:entityId/:searchQuery/whats_new",
                "/:entityId/:channelFilesId/whats_new",
                "/:entityId/:scTeamOrEnterpriseId/whats_new",
                "/:entityId/:listsViewName/whats_new",
                "/:entityId/:canvasOpenedFromId/whats_new",
              ],
            },
            [Qe.IN]: {
              paths: [
                "/:entityId/shortcuts",
                "/:entityId/:timestamp/shortcuts",
                "/:entityId/:viewName/shortcuts",
                "/:entityId/:viewName/:invitationsTabId/shortcuts",
                "/:entityId/:tabId/shortcuts",
                "/:entityId/:draftId/shortcuts",
                "/:entityId/:threadPageId/shortcuts",
                "/:entityId/:searchQuery/shortcuts",
                "/:entityId/:channelFilesId/shortcuts",
                "/:entityId/:scTeamOrEnterpriseId/shortcuts",
                "/:entityId/:listsViewName/shortcuts",
                "/:entityId/:canvasOpenedFromId/shortcuts",
              ],
            },
            [Qe.Q$]: {
              paths: [
                "/:entityId/user_profile/:memberId",
                "/:entityId/:timestamp/user_profile/:memberId",
                "/:entityId/:viewName/user_profile/:memberId",
                "/:entityId/:viewName/:invitationsTabId/user_profile/:memberId",
                "/:entityId/:tabId/user_profile/:memberId",
                "/:entityId/:draftId/user_profile/:memberId",
                "/:entityId/:threadPageId/user_profile/:memberId",
                "/:entityId/:searchQuery/user_profile/:memberId",
                "/:entityId/:channelFilesId/user_profile/:memberId",
                "/:entityId/:scTeamOrEnterpriseId/user_profile/:memberId",
                "/:entityId/:listsViewName/user_profile/:memberId",
                "/:entityId/:canvasOpenedFromId/user_profile/:memberId",
              ],
            },
            [Qe.E2]: {
              paths: [
                "/:entityId/help",
                "/:entityId/:timestamp/help",
                "/:entityId/:viewName/help",
                "/:entityId/:viewName/:invitationsTabId/help",
                "/:entityId/:tabId/help",
                "/:entityId/:draftId/help",
                "/:entityId/:threadPageId/help",
                "/:entityId/:searchQuery/help",
                "/:entityId/:channelFilesId/help",
                "/:entityId/:scTeamOrEnterpriseId/help",
                "/:entityId/:listsViewName/help",
                "/:entityId/:canvasOpenedFromId/help",
              ],
            },
            [Qe.vA]: {
              paths: [
                "/:entityId/help/:articleId",
                "/:entityId/:timestamp/help/:articleId",
                "/:entityId/:viewName/help/:articleId",
                "/:entityId/:viewName/:invitationsTabId/help/:articleId",
                "/:entityId/:tabId/help/:articleId",
                "/:entityId/:draftId/help/:articleId",
                "/:entityId/:threadPageId/help/:articleId",
                "/:entityId/:searchQuery/help/:articleId",
                "/:entityId/:channelFilesId/help/:articleId",
                "/:entityId/:scTeamOrEnterpriseId/help/:articleId",
                "/:entityId/:listsViewName/help/:articleId",
                "/:entityId/:canvasOpenedFromId/help/:articleId",
              ],
            },
            [Qe.Dn]: {
              paths: [
                "/:entityId/rimeto_profile/:memberId",
                "/:entityId/:timestamp/rimeto_profile/:memberId",
                "/:entityId/:viewName/rimeto_profile/:memberId",
                "/:entityId/:viewName/:invitationsTabId/rimeto_profile/:memberId",
                "/:entityId/:tabId/rimeto_profile/:memberId",
                "/:entityId/:searchQuery/rimeto_profile/:memberId",
                "/:entityId/:draftId/rimeto_profile/:memberId",
                "/:entityId/:threadPageId/rimeto_profile/:memberId",
                "/:entityId/:channelFilesId/rimeto_profile/:memberId",
                "/:entityId/:scTeamOrEnterpriseId/rimeto_profile/:memberId",
                "/:entityId/:listsViewName/rimeto_profile/:memberId",
                "/:entityId/:canvasOpenedFromId/rimeto_profile/:memberId",
              ],
            },
            [Qe.Ie]: {
              paths: [
                "/:entityId/feedback",
                "/:entityId/:timestamp/feedback",
                "/:entityId/:viewName/feedback",
                "/:entityId/:viewName/:invitationsTabId/feedback",
                "/:entityId/:tabId/feedback",
                "/:entityId/:draftId/feedback",
                "/:entityId/:threadPageId/feedback",
                "/:entityId/:searchQuery/feedback",
                "/:entityId/:channelFilesId/feedback",
                "/:entityId/:scTeamOrEnterpriseId/feedback",
                "/:entityId/:listsViewName/feedback",
                "/:entityId/:canvasOpenedFromId/feedback",
              ],
            },
            [Qe.Bh]: {
              paths: ["/:channelId/huddle"],
            },
            [Qe.Mv]: {
              paths: [
                "/:entityId/huddles_captions",
                "/:entityId/:timestamp/huddles_captions",
                "/:entityId/:viewName/huddles_captions",
                "/:entityId/:viewName/:invitationsTabId/huddles_captions",
                "/:entityId/:tabId/huddles_captions",
                "/:entityId/:draftId/huddles_captions",
                "/:entityId/:threadPageId/huddles_captions",
                "/:entityId/:searchQuery/huddles_captions",
                "/:entityId/:channelFilesId/huddles_captions",
                "/:entityId/:scTeamOrEnterpriseId/huddles_captions",
                "/:entityId/:listsViewName/huddles_captions",
                "/:entityId/:canvasOpenedFromId/huddles_captions",
              ],
            },
            [Qe.d2]: {
              paths: [
                "/:entityId/contact_profile/:contactExternalId",
                "/:entityId/:timestamp/contact_profile/:contactExternalId",
                "/:entityId/:viewName/contact_profile/:contactExternalId",
                "/:entityId/:viewName/:invitationsTabId/contact_profile/:contactExternalId",
                "/:entityId/:tabId/contact_profile/:contactExternalId",
                "/:entityId/:draftId/contact_profile/:contactExternalId",
                "/:entityId/:threadPageId/contact_profile/:contactExternalId",
                "/:entityId/:searchQuery/contact_profile/:contactExternalId",
                "/:entityId/:channelFilesId/contact_profile/:contactExternalId",
                "/:entityId/:scTeamOrEnterpriseId/contact_profile/:contactExternalId",
                "/:entityId/:listsViewName/contact_profile/:contactExternalId",
                "/:entityId/:canvasOpenedFromId/contact_profile/:contactExternalId",
              ],
            },
            [Qe.p$]: {
              paths: [
                "/:entityId/record/:recordId",
                "/:entityId/:timestamp/record/:recordId",
                "/:entityId/:viewName/record/:recordId",
                "/:entityId/:viewName/:invitationsTabId/record/:recordId",
                "/:entityId/:tabId/record/:recordId",
                "/:entityId/:draftId/record/:recordId",
                "/:entityId/:threadPageId/record/:recordId",
                "/:entityId/:searchQuery/record/:recordId",
                "/:entityId/:channelFilesId/record/:recordId",
                "/:entityId/:scTeamOrEnterpriseId/record/:recordId",
                "/:entityId/:listsViewName/record/:recordId",
                "/:entityId/:canvasOpenedFromId/record/:recordId",
              ],
            },
            [Qe.td]: {
              paths: ["/:entityId/:tabId/:workflowTemplateId"],
            },
          };
        function jn() {
          (0, l.S2)(is, ss);
        }
        _(jn, "setRoutes");
        const Yn = _((st) => {
          let { routeName: ut, params: vt = {} } = st;
          const { entityId: St } = vt;
          return St && Rn(St)
            ? ((0, l._U)(
                ut,
                {
                  ...vt,
                  entityId: Qe.as[St],
                },
                {
                  shouldReplaceState: !0,
                }
              ),
              !1)
            : !0;
        }, "maybe_redirect_entity");
        var Qn = e(8224196674),
          es = e(109860581),
          Et = e(3193155968),
          gt = e(7429662208);
        function Ft(st) {
          let { prevTeamId: ut, nextTeamId: vt } = st;
          if (!vt || ut === vt) return;
          const St = (0, c.getStoreInstanceByTeamId)(vt),
            vn = St.getState(),
            kt = (0, gt.e6)(vn),
            Ln = (0, gt.Le)(vn, {
              tab: kt,
            });
          St.dispatch(
            (0, Qn.C)({
              prevViewSet: void 0,
              prevTab: void 0,
              nextViewSet: Ln,
              nextTab: kt,
              windowId: Et.N2,
              navigateParams: {},
              triggerType: es.w.TEAM_SWITCH,
            })
          );
        }
        _(Ft, "maybeRunTeamSwitchNavigateListeners");
        var nn = e(6555262004),
          Dn = e(5078290763),
          bt = e(4656278360),
          In = e(2567914105),
          xn = e(9003400431),
          Nt = e(8243624171);
        function At(st) {
          let { nextTeamId: ut, prevTeamId: vt } = st;
          const { dispatch: St, getState: vn } = (0,
            c.getStoreInstanceByTeamId)(vt),
            kt = vn();
          return (0, In.iS)(kt)
            ? new ae.S((Hn, ns) => {
                St(
                  (0, Dn.P)({
                    openModalProps: {
                      isStackable: !0,
                    },
                    onConfirmClose: () => {
                      St((0, bt.U)(!1)),
                        St(
                          (0, xn.O)({
                            closeAll: !0,
                          })
                        ),
                        Hn();
                    },
                    onCancelClose: () => {
                      ns();
                    },
                  })
                );
              })
            : (vt &&
                !(0, Nt.Vq)({
                  teamId: vt,
                }) &&
                St(
                  ut === vt
                    ? (0, xn.O)({
                        closeNamed: nn.N,
                      })
                    : (0, xn.O)({
                        closeAll: !0,
                      })
                ),
              !0);
        }
        _(At, "modalListenerBefore");
        var te = e(6088404775);
        function _e(st) {
          const ut = (0, te.h)();
          return ut != null && ut.onClose && (ut == null || ut.onClose()), !0;
        }
        _(_e, "pinsPopoverListenerAfter");
        var Ie = e(3982416567),
          Ne = e(1031947056),
          We = e(1466694191),
          $e = e(6078549397),
          mt = e(7307560139),
          Xt = e(6822097892),
          _n = e(4033441523);
        const mn = [
            "comment_thread",
            "activity_history",
            "files",
            "rimeto_profile",
            "thread",
            Qe.li,
            Qe.lM,
            Qe.De,
            Qe.Dn,
            Qe.Q$,
          ],
          Fn = (0, Ne.Ay)(
            "Post activity history routing side effects",
            (st, ut, vt) => {
              let { params: St, prevRouteInfo: vn, routeName: kt } = vt;
              var Ln;
              const Hn = St == null ? void 0 : St.entityId,
                ns =
                  vn == null || (Ln = vn.params) === null || Ln === void 0
                    ? void 0
                    : Ln.entityId,
                ls = Et.N2;
              if (kt === Qe._G && Hn && (0, We.A)(Hn)) {
                const { fileIdOrQuipThreadId: oo } = (0, $e.EX)(Hn);
                mn.includes(vn == null ? void 0 : vn.routeName) &&
                  st(
                    (0, Xt.A)({
                      fileId: oo,
                      windowId: ls,
                      source: _n.f.QUIP_ACTIVITY_HISTORY_LISTENER,
                      isFromCloseActivityHistory: !0,
                    })
                  );
              }
              let Ks = Hn,
                Bs = ns;
              (0, Zt.Ay)(ns) &&
                (0, Zt.Ay)(Hn) &&
                ((Ks = (0, $e.EX)(ns).fileIdOrQuipThreadId),
                (Bs = (0, $e.EX)(Hn).fileIdOrQuipThreadId)),
                Ks !== Bs &&
                  st(
                    (0, mt.NA)({
                      windowId: ls,
                    })
                  );
            }
          );
        Fn.meta = {
          name: "createThunk",
          key: "createThunkpostQuipActivityHistoryRouting",
          description: "Post activity history routing side effects",
        };
        function Kn(st) {
          let { params: ut, prevRouteInfo: vt, routeName: St, reason: vn } = st;
          const kt = ut.teamId || ut.teamOrEnterpriseId,
            { dispatch: Ln, getState: Hn } = (0, c.getStoreInstanceByTeamId)(
              kt
            );
          (0, Ie.O4)(Hn()) &&
            Ln(
              Fn({
                routeName: St,
                params: ut,
                prevRouteInfo: vt,
                reason: vn,
              })
            );
        }
        _(Kn, "quipActivityHistoryListener");
        const dt = _((st) => {
          let { nextTeamId: ut, routeName: vt, params: St } = st;
          const vn = {
            routeName: vt,
            params: St,
          };
          return ut && (0, de.t2)(ut, "lastRoute", vn), !0;
        }, "save_route_to_local_config");
        var Y = e(210422728),
          se = e(9551235052);
        function he(st) {
          let { prevTeamId: ut } = st;
          const vt = (0, c.getStoreInstanceByTeamId)(ut);
          return (
            (0, se.J)(vt.getState()) &&
              (vt.dispatch((0, Y.T)(!0)),
              k.g.delete("setNavigatedDuringWarmBoot")),
            ae.S.resolve()
          );
        }
        _(he, "setNavigatedDuringWarmBoot");
        var Le = e(6495946979),
          qe = e(8473952534),
          ht = e(8213251995),
          et = e(3977512448);
        function Ut(st) {
          let { nextTeamId: ut, prevRouteInfo: vt, params: St } = st;
          var vn;
          const kt = (0, c.getStoreInstanceByTeamId)(ut),
            Ln = kt.getState(),
            Hn = (0, ht.c8)(Ln),
            ns = (0, Ze.OL)(Ln, St.entityId),
            ls =
              (vt == null || (vn = vt.params) === null || vn === void 0
                ? void 0
                : vn.entityId) || "";
          (ls === Rt.eE.CHANNELS || ls === et.b || ls === et.Z1) &&
            St != null &&
            St.entityId &&
            ns &&
            !(0, Le.bl)(ns) &&
            kt.dispatch(
              (0, qe.Tm)({
                channelId: St.entityId,
                prevRoute: ls,
              })
            ),
            Hn &&
              (vt == null ? void 0 : vt.routeName) === "ROUTE_ENTITY" &&
              (0, Ke.A)(ls) &&
              kt.dispatch(
                (0, qe.Tm)({
                  channelId: null,
                  prevRoute: null,
                })
              );
        }
        _(Ut, "setPreviewingFromChannelBrowserOrLaunchpad");
        var $t = e(1302213854);
        const En = _((st) => {
          let { prevTeamId: ut, nextTeamId: vt } = st;
          return ut !== vt
            ? (0, c.dispatchForClientStore)((0, $t.Mb)(!0))
            : (0, c.dispatchForClientStore)((0, $t.Mb)(!1));
        }, "set_should_log_team_switch_metrics");
        var wn = e(9143148823),
          $n = e(8628205589),
          j = e(4529239752),
          ue = e(9795506498);
        function we(st) {
          let {
            nextTeamId: ut,
            uuid: vt,
            shouldReplaceState: St,
            reason: vn,
          } = st;
          var kt;
          if (!ut || !vt) return;
          if (vn !== l.GB)
            if (St)
              (0, c.dispatchForClientStore)(
                (0, $n.HQ)({
                  windowId: Et.N2,
                  entry: {
                    id: vt,
                    ts: Date.now(),
                    teamId: ut,
                    isIA4: !1,
                  },
                })
              );
            else {
              const ls = (0, j.XG)((0, c.getStateForClientStore)());
              ls > 0 &&
                (0, c.dispatchForClientStore)(
                  (0, $n.$E)({
                    windowId: Et.N2,
                    index: ls,
                  })
                ),
                (0, c.dispatchForClientStore)(
                  (0, $n.y2)({
                    windowId: Et.N2,
                    entry: {
                      id: vt,
                      ts: Date.now(),
                      teamId: ut,
                      isIA4: !1,
                    },
                  })
                );
            }
          const Ln = (0, c.getStoreInstanceByTeamId)(ut),
            Hn = Ln.getState();
          if (
            !((kt = window.history.state) === null || kt === void 0) &&
            kt.isIA4
          )
            return;
          const ns = (0, gt.Gl)(Hn);
          Ln.dispatch(
            (0, ue.A)({
              windowId: Et.N2,
              entry: ns,
            })
          );
        }
        _(we, "updateIA4History");
        var ft = e(235108050);
        const pn = _((st) => {
          let { prevTeamId: ut, nextTeamId: vt } = st;
          if (ut === vt || !vt) return;
          const St = (0, de.W6)("recentlyUsedTeamIds") || (ut && [ut]) || [];
          St.unshift(vt),
            (0, de.q9)("recentlyUsedTeamIds", (0, ft.A)(St)),
            (0, de.t2)(vt, "mostRecentlyUsedDate", new Date());
        }, "update_recently_used_teams");
        var An = e(9399618736),
          yn;
        (function (st) {
          (st.JA_JP = "ja-JP"),
            (st.EN_US = "en-US"),
            (st.EN_GB = "en-GB"),
            (st.ES_ES = "es-ES"),
            (st.ES_LA = "es-LA"),
            (st.FR_FR = "fr-FR"),
            (st.DE_DE = "de-DE"),
            (st.PT_BR = "pt-BR"),
            (st.KO_KR = "ko-KR"),
            (st.IT_IT = "it-IT"),
            (st.ZH_CN = "zh-CN"),
            (st.ZH_TW = "zh-TW");
        })(yn || (yn = {}));
        const xt = yn.EN_US;
        var Vn = e(4423055085),
          Jn = e(9421999304),
          Je = e(571104883),
          Bt = e(9907843289),
          Lt = e(2554594353),
          rt = e(3080748521);
        function yt(st) {
          let { nextTeamId: ut, routeName: vt, params: St } = st;
          ut &&
            ((0, c.dispatchForClientStore)(
              (0, Lt.b)({
                teamId: ut,
                routeName: vt,
                params: St,
                fromNavigation: !0,
              })
            ),
            (0, c.getStoreInstanceByTeamId)(ut) &&
              (0, c.dispatchForTeamId)(
                ut,
                (0, Y.w)({
                  routeName: vt,
                  params: St,
                })
              ));
        }
        _(yt, "syncRouteStoreWithUrl");
        function ot(st) {
          return lt.apply(this, arguments);
        }
        _(ot, "navigateToLastSavedRoute");
        function lt() {
          return (
            (lt = (0, t.coroutine)(function* (st) {
              let {
                prevTeamId: ut,
                nextTeamId: vt,
                navigationTimestamp: St,
              } = st;
              const vn = (0, c.getStateForClientStore)();
              if (
                !vt ||
                (0, v.hasWorkspaceFailedToBoot)(vn, vt) ||
                (0, v.doesWorkspaceNeed2FASetup)(vn, vt) ||
                (0, v.isWorkspaceExpired)(vn, vt) ||
                (0, v.isWorkspacePendingAuth)(vn, vt)
              )
                return !0;
              const kt = (0, c.getStoreInstanceByTeamId)(vt),
                Ln = kt && kt.getState(),
                Hn = (0, rt.MC)(Ln),
                ns = (0, rt.D8)(Ln) || Qe._G;
              if ((0, Je.y3)() && ns === m.o) return !0;
              const ls = !ut;
              return (
                yield (0, l._U)(
                  ns,
                  {
                    ...Hn,
                    teamId: vt,
                  },
                  {
                    reason: "navigateToLastSavedRoute",
                    shouldReplaceState: ls,
                    navigationTimestamp: St,
                  }
                ),
                !1
              );
            })),
            lt.apply(this, arguments)
          );
        }
        _(lt, "_navigateToLastSavedRoute");
        function Ge(st) {
          let { prevTeamId: ut, nextTeamId: vt } = st;
          if (!ut || !vt || ut === vt) return;
          const St = on(vt);
          return ae.S.resolve((0, Jn.xS)(St, vt)).then(() => {});
        }
        _(Ge, "ensureCorrectLocaleForTeam");
        function jt(st) {
          let { prevTeamId: ut, nextTeamId: vt } = st;
          if (!ut || !vt || ut === vt) return;
          const St = on(vt);
          if (St) return (0, Jn.zI)(St);
        }
        _(jt, "ensureCorrectLocaleForExternalLibs");
        function on(st) {
          const ut = window.location.search.match(/[&?]locale=([a-zA-Z-]*)/),
            vt = ut ? ut[1] : (0, de._z)(st, "user_locale");
          return vt && (0, Bt.YI)(vt) ? vt : xt;
        }
        _(on, "getLocaleForTeam");
        const cn = (0, w.A)(Wt);
        function Wt() {
          k.g.set("maybeOpenOtherTeamInBrowser", (0, l.Y8)(pt)),
            k.g.set("modalListenerBefore", (0, l.Y8)(At)),
            k.g.set("maybeFinishSignin", (0, l.Y8)(at)),
            k.g.set("maybeRedirectEntity", (0, l.Y8)(Yn)),
            k.g.set("startTeamSwitchTiming", (0, l.Y8)(wn.Ay)),
            k.g.set("navigateToLastSavedRoute", (0, l.Y8)(ot, [m.o])),
            k.g.set("ensureChannel", (0, l.Y8)(xe, [])),
            k.g.set("draftsListenerBefore", (0, l.Y8)(ye)),
            k.g.set("ensureCorrectLocaleForExternalLibs", (0, l.Dd)(jt)),
            k.g.set("updateIA4History", (0, l.Dd)(we)),
            k.g.set("maybeRunTeamSwitchNavigateListeners", (0, l.Dd)(Ft)),
            k.g.set("setNavigatedDuringWarmBoot", (0, l.Dd)(he)),
            k.g.set("pinsPopoverListenerAfter", (0, l.Y8)(_e)),
            k.g.set("syncRouteStoreWithUrl", (0, l.Dd)(yt)),
            k.g.set("ensureCorrectLocaleForTeam", (0, l.Dd)(Ge)),
            k.g.set("setShouldLogTeamSwitchMetrics", (0, l.Dd)(En)),
            k.g.set("setLocalConfigForTeamWithKey", (0, l.Dd)(dt)),
            k.g.set("dismissFloatingSidebar", (0, l.Dd)(ke)),
            k.g.set("updateRecentlyUsedTeams", (0, l.Dd)(pn)),
            k.g.set("maybeFetchClientPermissions", (0, l.Dd)(Fe)),
            k.g.set("maybeIncrementHistoryLength", (0, l.Dd)(An.Cu)),
            k.g.set(
              "setPreviewingFromChannelBrowserOrLaunchpad",
              (0, l.Dd)(Ut)
            ),
            k.g.set("channelCanvasListener", (0, l.Dd)(ee)),
            k.g.set("quipActivityHistoryListener", (0, l.Dd)(Kn));
        }
        _(Wt, "registerRouteListenersInner"),
          (0, Vn.ul)("router.listeners", () => [...k.g.entries()]);
        const en = {
          syncRouteStoreWithUrl: yt,
          navigateToLastSavedRoute: ot,
          ensureCorrectLocaleForTeam: Ge,
          ensureCorrectLocaleForExternalLibs: jt,
          getLocaleForTeam: on,
        };
        Object.defineProperty(en, "syncRouteStoreWithUrl", {
          get: () => yt,
          set: (st) => {
            yt = st;
          },
        }),
          Object.defineProperty(en, "navigateToLastSavedRoute", {
            get: () => ot,
            set: (st) => {
              ot = st;
            },
          }),
          Object.defineProperty(en, "ensureCorrectLocaleForTeam", {
            get: () => Ge,
            set: (st) => {
              Ge = st;
            },
          }),
          Object.defineProperty(en, "ensureCorrectLocaleForExternalLibs", {
            get: () => jt,
            set: (st) => {
              jt = st;
            },
          }),
          Object.defineProperty(en, "getLocaleForTeam", {
            get: () => on,
            set: (st) => {
              on = st;
            },
          });
        var Un = e(3245843483);
        const Pn = _(
          () => ({
            deviceId: Un.iCQ,
          }),
          "getSharedTracerTags"
        );
        var Cn = e(6338445630);
        const Mn = (function () {
            var st = (0, t.coroutine)(function* () {
              Un.goh.isAvailable() &&
                (0, Un.goh)().includes("DisableServiceWorker") &&
                (yield (0, Cn._E)());
            });
            return _(function () {
              return st.apply(this, arguments);
            }, "disableServiceWorkerForClientConfig");
          })(),
          ds = (function () {
            var st = (0, t.coroutine)(function* () {
              (0, Je.X5)() === Je.h5.SAFARI && (yield (0, Cn._E)());
            });
            return _(function () {
              return st.apply(this, arguments);
            }, "disableServiceWorkerForSafari");
          })(),
          un = (function () {
            var st = (0, t.coroutine)(function* () {
              yield ds(), yield Mn();
            });
            return _(function () {
              return st.apply(this, arguments);
            }, "maybeDisableServiceWorker");
          })();
        var gs = e(1658558415),
          os = e(1427945276),
          vs = e(6123258136),
          us = e(1319016163);
        function sn(st) {
          return Zn.apply(this, arguments);
        }
        _(sn, "setupOtherTeamsToBoot");
        function Zn() {
          return (
            (Zn = (0, t.coroutine)(function* (st) {
              let { contextualInfo: ut } = st;
              return {
                contextualInfo: ut,
                otherTeamsToBoot: (0, us.gv)(),
              };
            })),
            Zn.apply(this, arguments)
          );
        }
        _(Zn, "_setupOtherTeamsToBoot");
        var cs = e(5695315324),
          Es = e(8148939499),
          ts = e(723189278),
          as = e(4148579738),
          Is = e(4172706442),
          fs = e(7530010356),
          As = e(2664504268);
        let Ms;
        function Cs() {
          return Rs.apply(this, arguments);
        }
        _(Cs, "getClientIdForSelf");
        function Rs() {
          return (
            (Rs = (0, t.coroutine)(function* () {
              if (!Ms) {
                const st = (0, As.A)();
                yield navigator.locks.request(
                  st,
                  (function () {
                    var ut = (0, t.coroutine)(function* (vt) {
                      var St, vn;
                      Ms =
                        ((vn =
                          (St = (yield navigator.locks.query()).held) ===
                            null || St === void 0
                            ? void 0
                            : St.find(
                                (kt) =>
                                  (vt == null ? void 0 : vt.name) === kt.name
                              )) === null || vn === void 0
                          ? void 0
                          : vn.clientId) || st;
                    });
                    return function (vt) {
                      return ut.apply(this, arguments);
                    };
                  })()
                );
              }
              return Ms;
            })),
            Rs.apply(this, arguments)
          );
        }
        _(Rs, "_getClientIdForSelf");
        var Ls = e(2878685908),
          Ns = e(4518410378),
          ro = e(3724743567),
          ms = e.n(ro),
          js;
        const xs = 18,
          wo =
            (js = ms() === null || ms() === void 0 ? void 0 : ms().pop()) ===
              null || js === void 0
              ? void 0
              : js.version,
          Fs = 1,
          io = wo,
          Ho = "SlackClient.db",
          da = null,
          lo = `#sqlite-database-${Fs}-${io}`,
          ua = null,
          Oo = "WINDOW",
          Do = _((st) => `${Oo}.${st.slice(0, xs)}`, "WINDOW_ID_TEMPLATE"),
          Gs = "SQLITE-WORKER",
          _a = _((st) => `${Gs}.${st.slice(0, xs)}`, "WORKER_ID_TEMPLATE"),
          zs = _((st) => Boolean(!st.id && st.method), "isNotificationMessage"),
          ma = _((st) => Boolean(st.id && st.method), "isRequestMessage"),
          Gn = _(
            (st) =>
              Boolean(
                st.id && Object.prototype.hasOwnProperty.call(st, "result")
              ),
            "isResultMessage"
          ),
          co = _((st) => Boolean(st.id && st.error), "isErrorMessage");
        class uo {
          await(ut) {
            var vt = this;
            return (0, t.coroutine)(function* () {
              return new Promise((St) => {
                vt.once(ut, (vn) => St(vn));
              });
            })();
          }
          createRequester(ut, vt) {
            const St = vt || (() => Promise.resolve());
            return (vn) =>
              St().then(() =>
                this.request({
                  method: ut,
                  params: vn,
                })
              );
          }
          notify(ut) {
            this.isVerbose && this.info(`(${this.id})`, "notifying", ut),
              this.bc.postMessage(ut);
          }
          on(ut, vt) {
            let St =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : !1;
            const vn = Array.isArray(ut) ? ut : [ut],
              kt = _((Ln) => {
                let { data: Hn } = Ln;
                Hn != null &&
                  Hn.method &&
                  vn.includes(Hn.method) &&
                  (vt(Hn), St && kt.off());
              }, "h");
            return (
              (kt.off = () => this.bc.removeEventListener("message", kt)),
              this.bc.addEventListener("message", kt),
              kt
            );
          }
          once(ut, vt) {
            return this.on(ut, vt, !0);
          }
          request(ut) {
            var vt = this;
            return (0, t.coroutine)(function* () {
              const St = ut.id ? ut.id : (0, As.A)(),
                vn = {
                  ...ut,
                  id: St,
                };
              return (
                vt.isVerbose && vt.info("requesting", vn),
                vt.bc.postMessage(vn),
                new Promise((kt, Ln) => {
                  const Hn = _((ns) => {
                    let { data: ls } = ns;
                    (ls == null ? void 0 : ls.id) === St &&
                      (vt.bc.removeEventListener("message", Hn),
                      Gn(ls) ? kt(ls.result) : co(ls) && Ln(ls.error));
                  }, "responseHandler");
                  vt.bc.addEventListener("message", Hn);
                })
              );
            })();
          }
          respond(ut, vt) {
            this.bc.postMessage({
              ...vt,
              id: ut.id,
            });
          }
          respondTo(ut, vt) {
            var St = this;
            return this.on(
              ut,
              (function () {
                var vn = (0, t.coroutine)(function* (kt) {
                  const Ln = yield vt(kt.params);
                  St.respond(kt, {
                    result: Ln,
                  });
                });
                return function (kt) {
                  return vn.apply(this, arguments);
                };
              })()
            );
          }
          setVerbose(ut) {
            return this.isVerbose === ut
              ? this.isVerbose
              : ((this.isVerbose = ut),
                this.isVerbose &&
                  this.bc.addEventListener("message", (vt) => {
                    let { data: St } = vt;
                    this.info("received", St);
                  }),
                this.isVerbose);
          }
          constructor(ut, vt = !1) {
            var St = this;
            (this.id = ut),
              (this.bc = new BroadcastChannel(lo)),
              (this.info = function () {
                for (
                  var vn = arguments.length, kt = new Array(vn), Ln = 0;
                  Ln < vn;
                  Ln++
                )
                  kt[Ln] = arguments[Ln];
                return (0, a.pq)("[SQLITE-RPC]", `(${St.id})`, ...kt);
              }),
              (this.isVerbose = this.setVerbose(vt));
          }
        }
        _(uo, "RpcBroadcast");
        class Po {
          readObjects(ut) {
            var vt = this;
            return (0, t.coroutine)(function* () {
              return (
                yield vt.awaitDatabaseReady,
                vt.rpc.request({
                  method: "Request.DatabaseProvider.readObjects",
                  params: ut,
                })
              );
            })();
          }
          start() {
            this.rpc.notify({
              method: "Notification.ClientReady",
              params: {
                clientId: this.windowId,
              },
            }),
              this.rpc.on("Notification.DatabasePending", () => {
                this.awaitDatabaseReady = this.rpc.await(
                  "Notification.DatabaseReady"
                );
              });
          }
          constructor(ut) {
            if (Ns.J.sqliteClient)
              throw new Error(
                "Cannot have more than one SqliteClient per window."
              );
            (this.windowId = Do(ut)),
              (this.rpc = new uo(this.windowId)),
              (this.awaitDatabaseReady = this.rpc.await(
                "Notification.DatabaseReady"
              ));
            const vt = _(
              (St) =>
                this.rpc.createRequester(St, () => this.awaitDatabaseReady),
              "createRequester"
            );
            (this.initTables = vt("Request.DatabaseProvider.initTables")),
              (this.clearAllObjects = vt(
                "Request.DatabaseProvider.clearAllObjects"
              )),
              (this.deleteObjects = vt(
                "Request.DatabaseProvider.deleteObjects"
              )),
              (this.writeObjects = vt("Request.DatabaseProvider.writeObjects")),
              (Ns.J.sqliteClient = this);
          }
        }
        _(Po, "SqliteClient");
        function Ys() {
          return _o.apply(this, arguments);
        }
        _(Ys, "initSqliteWorker");
        function _o() {
          return (
            (_o = (0, t.coroutine)(function* () {
              if ((0, Ls.$i)() || (0, Ls.b3)() || (0, Ls.Cu)()) {
                const ut = (yield e
                  .e("sqlite-worker-dev")
                  .then(e.bind(e, 8045688959))).default;
                return new ut();
              }
              return new Worker("/sqlite.worker.js");
            })),
            _o.apply(this, arguments)
          );
        }
        _(_o, "_initSqliteWorker");
        function _s() {
          return mo.apply(this, arguments);
        }
        _(_s, "initSqliteClient");
        function mo() {
          return (
            (mo = (0, t.coroutine)(function* () {
              if (!Ns.J.sqliteClient) {
                const st = yield Cs();
                new Po(st).start();
              }
              return Ns.J.sqliteClient;
            })),
            mo.apply(this, arguments)
          );
        }
        _(mo, "_initSqliteClient");
        var Vo = e(4724591729),
          jo = e(6968387112),
          So = e(8445020572),
          ho = e(504058561),
          vo = e(3803432550),
          Xn = e(2371143272);
        un(),
          (window.boot_html__initial_boot_duration =
            Date.now() - window.sonic_boot__phase_1_5__start),
          (window.boot_render_start = Date.now());
        function Ro(st) {
          return (
            st.registerConfig({
              isPersistenceEnabled: !0,
              isMultiTeamEnabled: (0, Ye.VA)(),
            }),
            st.registerErrorHandlers(M),
            st.registerDynamicImportFns({
              data: () =>
                Promise.all([
                  e.e("gantry-v2-vendors-async"),
                  e.e("gantry-v2-shared-boot-async"),
                  e.e("gantry-v2-vendors-async-client"),
                  e.e("client-boot-styles"),
                  e.e("gantry-v2-async-client-boot-data"),
                ]).then(e.bind(e, 6097732015)),
              apis: () =>
                Promise.all([
                  e.e("gantry-v2-shared-boot-async"),
                  e.e("gantry-v2-async-client-boot-apis"),
                ]).then(e.bind(e, 6959220389)),
              render: () =>
                Promise.all([
                  e.e("gantry-v2-vendors-async"),
                  e.e("gantry-v2-shared-boot-async"),
                  e.e("gantry-v2-vendors-async-client"),
                  e.e("client-boot-styles"),
                  e.e("gantry-v2-async-client-boot-render"),
                ]).then(e.bind(e, 7358501337)),
              deferred: () =>
                Promise.all([
                  e.e("gantry-v2-vendors-async"),
                  e.e("gantry-v2-shared-boot-async"),
                  e.e("gantry-v2-vendors-async-client"),
                  e.e("client-boot-styles"),
                  e.e("gantry-v2-async-client-boot-deferred"),
                ]).then(e.bind(e, 4893422024)),
            }),
            st.registerInitialApiCalls({
              experimentData: S.dC,
              featureFlagData: S.BG,
              clientBootData: H,
              viewData: N.L$,
              allEnterpriseData: Ee,
              featureAccessData: S.jH,
              clientChannelsData: oe,
            }),
            as.e.register(Pn),
            (0, L.b)(st),
            st.hooks.beforeDynamicImportsStart.tap(
              "Render Placeholder",
              (function () {
                var ut = (0, t.coroutine)(function* (vt) {
                  let { contextualInfo: St } = vt;
                  return (
                    (0, g.Sp)({
                      teamId: St.teamOrEnterpriseBootId,
                      showTeamSwitcher: (0, Es.A)().length > 1,
                    }),
                    {
                      contextualInfo: St,
                    }
                  );
                });
                return function (vt) {
                  return ut.apply(this, arguments);
                };
              })()
            ),
            st.hooks.beforeDynamicImportsStart.tap(
              "[experiment:wasm_sqlite_spike] Start downloading the sqlite worker",
              (function () {
                var ut = (0, t.coroutine)(function* (vt) {
                  let { contextualInfo: St } = vt;
                  return (
                    (0, fs.MA)() && Ys(),
                    {
                      contextualInfo: St,
                    }
                  );
                });
                return function (vt) {
                  return ut.apply(this, arguments);
                };
              })()
            ),
            st.hooks.afterDynamicImportsStart.tap(
              "[experiment:wasm_sqlite_spike] Start the sqlite client",
              (function () {
                var ut = (0, t.coroutine)(function* (vt) {
                  let { contextualInfo: St } = vt;
                  return (
                    (0, fs.MA)() && (yield _s()),
                    {
                      contextualInfo: St,
                    }
                  );
                });
                return function (vt) {
                  return ut.apply(this, arguments);
                };
              })()
            ),
            st.hooks.afterDynamicImportsStart.tap(
              "Set routes",
              (function () {
                var ut = (0, t.coroutine)(function* (vt) {
                  let { contextualInfo: St } = vt;
                  return (
                    jn(),
                    {
                      contextualInfo: St,
                    }
                  );
                });
                return function (vt) {
                  return ut.apply(this, arguments);
                };
              })()
            ),
            st.hooks.afterDynamicImportsStart.tap(
              "Set up client store",
              (function () {
                var ut = (0, t.coroutine)(function* (vt) {
                  let { contextualInfo: St } = vt;
                  return (
                    (0, vo.x)(St.teamId),
                    {
                      contextualInfo: St,
                    }
                  );
                });
                return function (vt) {
                  return ut.apply(this, arguments);
                };
              })()
            ),
            st.hooks.afterDynamicImportsStart.tap(
              "Register route listeners",
              (function () {
                var ut = (0, t.coroutine)(function* (vt) {
                  let { contextualInfo: St } = vt;
                  return (
                    cn(),
                    {
                      contextualInfo: St,
                    }
                  );
                });
                return function (vt) {
                  return ut.apply(this, arguments);
                };
              })()
            ),
            st.hooks.afterDynamicImportsStart.tap(
              "Update last active team ID in localConfig",
              (function () {
                var ut = (0, t.coroutine)(function* (vt) {
                  let { contextualInfo: St } = vt;
                  const { teamId: vn } = St;
                  return vn
                    ? (vn !== (0, de.W6)("lastActiveTeamId") &&
                        (0, de.q9)("lastActiveTeamId", vn),
                      {
                        contextualInfo: St,
                      })
                    : {
                        contextualInfo: St,
                      };
                });
                return function (vt) {
                  return ut.apply(this, arguments);
                };
              })()
            ),
            st.hooks.beforeInitializeTeam.tap(
              "Halt further boot if client is reloading",
              (function () {
                var ut = (0, t.coroutine)(function* (vt) {
                  let { contextualInfo: St } = vt;
                  return window.isReloading
                    ? ((0, a.pq)(
                        "BOOT",
                        `(${St.teamId}) Ongoing reload detected; Cancelling boot.`
                      ),
                      (0, ts.A)())
                    : {
                        contextualInfo: St,
                      };
                });
                return function (vt) {
                  return ut.apply(this, arguments);
                };
              })()
            ),
            st.hooks.beforeInitializeTeam.tap(
              "[experiment:wasm_sqlite_spike] Init tables for team and user",
              (function () {
                var ut = (0, t.coroutine)(function* (vt) {
                  let { contextualInfo: St } = vt;
                  const { teamId: vn, userId: kt } = St;
                  if ((0, fs.MA)() && vn && kt) {
                    const Ln = (0, Is.s)(),
                      Hn = 2500;
                    yield o(
                      Ln.initTables({
                        teamId: vn,
                        userId: kt,
                      }),
                      Hn
                    ).catch(() =>
                      (0, a.pq)(
                        "BOOT",
                        `Timed out waiting ${Hn}ms to init SQLite tables, moving on`
                      )
                    );
                  }
                  return {
                    contextualInfo: St,
                  };
                });
                return function (vt) {
                  return ut.apply(this, arguments);
                };
              })()
            ),
            st.hooks.beforeInitializeTeam.tap(
              "Set tokens",
              (function () {
                var ut = (0, t.coroutine)(function* (vt) {
                  let { contextualInfo: St } = vt;
                  return (0, vs.L)({
                    contextualInfo: St,
                  });
                });
                return function (vt) {
                  return ut.apply(this, arguments);
                };
              })()
            ),
            st.hooks.beforeInitializeTeam.tap(
              " Kick off objectStore fetch for minChannelUpdated ",
              (function () {
                var ut = (0, t.coroutine)(function* (vt) {
                  let { contextualInfo: St } = vt;
                  return (
                    (0, K.EZ)() &&
                      (0, b.z6)({
                        teamId: St.teamId,
                        userId: St.userId,
                      }),
                    {
                      contextualInfo: St,
                    }
                  );
                });
                return function (vt) {
                  return ut.apply(this, arguments);
                };
              })()
            ),
            st.hooks.setupMultiTeam.tap(
              "Set up all other teams to boot if in multi team mode",
              sn
            ),
            st.run()
          );
        }
        if ((_(Ro, "boot"), !(0, gs.A)())) {
          const st = (0, os.z4)(cs.Y.CLIENT_V2);
          if (!(0, ho.z$)() && (0, Vo.KV)() && (0, Xn.b)()) {
            const ut = e(8904626639);
            ut.init({
              dsn: `https://4162106b525941d087e5f8f5e446ae9b@app.${(0,
              jo.Xk)()}/apps/sentryproxy/5865811`,
              release: `webapp@${(0, So.HF)()}`,
              defaultIntegrations: !1,
              integrations: [
                ut.browserTracingIntegration({
                  enableInp: !0,
                }),
                ut.browserProfilingIntegration(),
                ut.httpContextIntegration(),
              ],
              sampleRate: 1,
              tracesSampleRate: 1,
              profilesSampleRate: 1,
              tracePropagationTargets: [],
              replaysSessionSampleRate: 0,
              replaysOnErrorSampleRate: 0,
            });
          }
          Ro(st);
        }
        const ha = {
          boot: Ro,
        };
      },
      3914849812: (W, A, e) => {
        "use strict";
        e.d(A, {
          L$: () => v,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(1460808057),
          i = e(7031360717),
          d = e(5695315324),
          o = e(8187930033),
          a = e(8414867410),
          r = e(796111729),
          c = e(5084575109),
          u = e(8834730594),
          l = e(8040098042),
          m = e(2960290117);
        function v(y) {
          return E.apply(this, arguments);
        }
        _(v, "maybeFetchMessagesData");
        function E() {
          return (
            (E = (0, t.coroutine)(function* (y) {
              const { appName: M, bootQueue: p, token: O, teamId: C } = y;
              if (!O)
                return (
                  (0, r.Ay)({
                    teamOrEnterpriseId: C,
                    label: "BOOT",
                  }).error(
                    new Error("Token missing; Unable to fetch messages data.")
                  ),
                  null
                );
              if (!C)
                return (
                  (0, r.Ay)({
                    teamOrEnterpriseId: C,
                    label: "BOOT",
                  }).error(
                    new Error("teamId missing; Unable to fetch messages data.")
                  ),
                  null
                );
              const h = yield (0, s.E)({
                contextualInfo: y,
              });
              return T({
                bootQueue: p,
                token: O,
                teamId: C,
                routeInfo: h,
                appName: M,
              });
            })),
            E.apply(this, arguments)
          );
        }
        _(E, "_maybeFetchMessagesData");
        function T(y) {
          return g.apply(this, arguments);
        }
        _(T, "fetchMessagesDataForRoute");
        function g() {
          return (
            (g = (0, t.coroutine)(function* (y) {
              let {
                bootQueue: M,
                token: p,
                teamId: O,
                routeInfo: C,
                appName: h,
              } = y;
              var D;
              const P =
                C == null || (D = C.params) === null || D === void 0
                  ? void 0
                  : D.entityId;
              return P &&
                (0, l.A)(P) &&
                !(0, c.n)(P) &&
                !(0, a.bd)(P) &&
                !(0, u.A)(P) &&
                !(0, m.Ay)(P)
                ? ((0, i.pq)("BOOT", `Booting into channel: ${P}`),
                  I({
                    appName: h,
                    bootQueue: M,
                    token: p,
                    teamId: O,
                    id: P,
                  }))
                : !(0, c.n)(P) && !(0, a.bd)(P) && !(0, u.A)(P) && !(0, m.Ay)(P)
                ? ((0, i.pq)(
                    "BOOT",
                    "Couldn't determine boot channel. Falling back to default channel"
                  ),
                  I({
                    appName: h,
                    bootQueue: M,
                    token: p,
                    teamId: O,
                  }))
                : null;
            })),
            g.apply(this, arguments)
          );
        }
        _(g, "_fetchMessagesDataForRoute");
        function I(y) {
          let { bootQueue: M, token: p, teamId: O, id: C, appName: h } = y;
          const D = {
            token: p,
            canonical_avatars: !0,
            no_user_profile: !0,
            ignore_replies: !0,
            no_self: !0,
            include_full_users: !0,
            include_use_case: !0,
            include_stories: !0,
            no_members: !0,
            include_mutation_timestamps: !0,
            count: 28,
          };
          C && (D.channel = C),
            (D.include_free_team_extra_messages = !0),
            h === d.Y.SINGLE_CHANNEL_CLIENT && (D.is_single_channel_boot = 1);
          const P = new o.Ay({
            method: "conversations.view",
            args: D,
            teamId: O,
          });
          return M.q(P).catch(
            (S) => (
              (0, r.Ay)({
                teamOrEnterpriseId: O,
                label: "BOOT",
              }).error(new Error(`unable to fetch messages data ${S}`)),
              null
            )
          );
        }
        _(I, "fetchMessagesData");
        const f = {
          fetchMessagesData: I,
        };
      },
      879418974: (W, A, e) => {
        "use strict";
        e.d(A, {
          d: () => i,
        });
        var t = e(9884588328),
          n = e(8798294025),
          s = e(6113051341);
        function i(d) {
          let { channels: o, selfId: a } = d;
          const r = {};
          return (
            o.some((c, u) => {
              const l = c == null ? void 0 : c.id;
              return (0, s.N)(c)
                ? ((r.general = l), !0)
                : ((0, t.Ur)(c) && (r.slackbot = l),
                  a && (0, n.e)(c) === a && (r.self = l),
                  u || (r.first = l),
                  !1);
            }),
            r.general || r.slackbot || r.self || r.first
          );
        }
        _(i, "getAnyChannelForRouting");
      },
      1460808057: (W, A, e) => {
        "use strict";
        e.d(A, {
          E: () => a,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(879418974),
          i = e(8959118205),
          d = e(1151228631),
          o = e(6533394955);
        function a(l) {
          return r.apply(this, arguments);
        }
        _(a, "getRouteInfo");
        function r() {
          return (
            (r = (0, t.coroutine)(function* (l) {
              let { contextualInfo: m, channels: v } = l;
              const { teamId: E, isForegroundTeam: T } = m,
                g = (0, o.getStoreInstanceByTeamId)(E),
                I = (0, d.Gf)({
                  store: g,
                  shouldSetFocus: T,
                });
              return (
                I ||
                c({
                  contextualInfo: m,
                  channels: v,
                })
              );
            })),
            r.apply(this, arguments)
          );
        }
        _(r, "_getRouteInfo");
        function c(l) {
          let { contextualInfo: m, channels: v } = l;
          const { teamId: E } = m;
          if (!E) return null;
          const T = (0, d.lQ)(E);
          if (T) return T;
          if (v) {
            const g = m.userId;
            return u({
              channels: v,
              selfId: g,
            });
          }
          return null;
        }
        _(c, "calculateRouteInfo");
        function u(l) {
          let { channels: m, selfId: v } = l;
          if (!m.length) return null;
          const E = {
              routeName: i._G,
              params: {},
            },
            T = (0, s.d)({
              channels: m,
              selfId: v,
            });
          return T && (E.params.entityId = T), E;
        }
        _(u, "getRouteFromBootData");
      },
      2212859256: (W, A, e) => {
        "use strict";
        e.d(A, {
          y: () => d,
        });
        var t = e(9706702639),
          n = e(7031360717),
          s = e(6533394955),
          i = e(1314103953);
        function d(o) {
          if (!o) return;
          const a = (0, s.getStoreInstanceByTeamId)(o);
          a &&
            ((0, n.pq)("BOOT", `(${o}) Boot complete`),
            t.g.delete("setNavigatedDuringWarmBoot"),
            a.dispatch((0, i.b)(!1)),
            a.dispatch((0, i.k)(!1)));
        }
        _(d, "markTeamBootCompleted");
      },
      4892637646: (W, A, e) => {
        "use strict";
        e.d(A, {
          b: () => a,
          h: () => d,
        });
        var t = e(9706240641),
          n = e.n(t),
          s = e(7906695911),
          i = e(2872463257);
        function d(u) {
          return o.apply(this, arguments);
        }
        _(d, "collectInitialPageLoadMetrics");
        function o() {
          return (
            (o = (0, t.coroutine)(function* (u) {
              let { contextualInfo: l } = u;
              const { getTraceMeta: m, isBootingWarm: v, appName: E } = l,
                { getTracer: T, tags: g } = m(),
                I = (yield v) ? s.H.WARM : s.H.COLD,
                f = T().createTrace({
                  traceName: s.S.BOOT_INITIAL_LOAD,
                  tags: {
                    boot_type: I,
                    app_name: E,
                    ...g,
                  },
                  autoCreateRootSpan: !1,
                  samplingOptions: {
                    sampleType: i.nl.ALWAYS,
                  },
                });
              f.startSpan(s.S.BOOT_INITIAL_LOAD, {
                setAsRootSpan: !0,
                startTime: performance.timing.fetchStart,
                closeTime: window.boot_render_start,
              }),
                f.startSpan(s.S.BOOT_INITIAL_LOAD_HTML, {
                  startTime: performance.timing.fetchStart,
                  closeTime:
                    performance.timing.fetchStart +
                    window.sonic_boot__phase_1__duration,
                }),
                f.startSpan(s.S.BOOT_INITIAL_LOAD_JS, {
                  startTime: window.sonic_boot__phase_1_5__start,
                  closeTime:
                    window.sonic_boot__phase_1_5__start +
                    window.boot_html__initial_boot_duration,
                }),
                T().reportTrace(f);
            })),
            o.apply(this, arguments)
          );
        }
        _(o, "_collectInitialPageLoadMetrics");
        function a(u) {
          u.hooks.beforeDynamicImportsStart.addCallIntercept((l) => r(l)),
            u.hooks.renderApp.addCallIntercept((l) => c(l));
        }
        _(a, "setupBootMetricsTracing");
        function r(u) {
          return (l) => {
            const {
                getTracer: m,
                setTrace: v,
                rootTrace: E,
              } = l.contextualInfo.getTraceMeta(),
              g = m().createTrace({
                traceName: s.S.BOOT_TIME_TO_START_RENDER,
                autoCreateRootSpan: !1,
                parentSpanId: E.getRootSpanId(),
                traceId: E.getTraceId(),
              });
            return (
              g.startSpan(s.S.BOOT_TIME_TO_START_RENDER, {
                setAsRootSpan: !0,
                startTimeMs: window.boot_render_start,
              }),
              v(g),
              u(l)
            );
          };
        }
        _(r, "startTimeToRenderTrace");
        function c(u) {
          return (function () {
            var l = (0, t.coroutine)(function* (m) {
              const {
                  isBootingWarm: v,
                  getTraceMeta: E,
                  isForegroundTeam: T,
                } = m.contextualInfo,
                { getTracer: g, getTrace: I, setTrace: f, rootTrace: y } = E(),
                M = g(),
                p = I(),
                O = (yield v) ? s.H.WARM : s.H.COLD;
              return (
                p.addTags({
                  boot_type: O,
                  is_foreground_team: T,
                }),
                M.reportTrace(p),
                f(y),
                u(m)
              );
            });
            return function (m) {
              return l.apply(this, arguments);
            };
          })();
        }
        _(c, "endTimeToRenderTrace");
      },
      7906695911: (W, A, e) => {
        "use strict";
        e.d(A, {
          H: () => n,
          S: () => t,
        });
        var t;
        (function (s) {
          (s.BOOT_INITIAL_LOAD = "boot:initial_load"),
            (s.BOOT_INITIAL_LOAD_HTML = "boot:initial_load:html"),
            (s.BOOT_INITIAL_LOAD_JS = "boot:initial_load:js"),
            (s.BOOT_TIME_TO_START_RENDER = "boot:time_to_start_render"),
            (s.BOOT_TIME_TO_MOUNT_CLIENT = "boot:time_to_mount_client");
        })(t || (t = {}));
        var n;
        (function (s) {
          (s.COLD = "cold"), (s.WARM = "warm");
        })(n || (n = {}));
      },
      9706702639: (W, A, e) => {
        "use strict";
        e.d(A, {
          g: () => t,
        });
        const t = new Map();
      },
      1609960255: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => n,
        });
        var t = e(7114008777);
        const n = _((s) => {
          let {
            selectedTab: i,
            unreadsFilterToggleSelected: d,
            experimentActivityDMsChannelGroupOn: o,
            experimentIsActivityThreadV2GroupOn: a,
            experimentIsVipInActivityGroupOn: r,
          } = s;
          return r && i === t.L.All
            ? d
              ? "priority_unreads_v1"
              : "priority_reads_and_unreads_v1"
            : o && d && i === t.L.Replies
            ? "chrono_unreads"
            : o && !d && i === t.L.Replies
            ? "chrono_reads_and_unreads"
            : a && d && i === t.L.Replies
            ? "chrono_threads_unreads_v2"
            : d && i === t.L.Replies
            ? "chrono_threads_unreads"
            : a && i === t.L.Replies
            ? "chrono_threads_reads_and_unreads_v2"
            : i === t.L.Replies
            ? "chrono_threads_reads_and_unreads"
            : d && i === t.L.Vip
            ? "chrono_priority_only_unreads_v1"
            : i === t.L.Vip
            ? "chrono_priority_only_reads_and_unreads_v1"
            : o && d
            ? "experimental_all_chrono_unreads_v1"
            : o && i === t.L.All
            ? "experimental_all_chrono_reads_and_unreads_v1"
            : d
            ? "chrono_unreads"
            : "chrono_reads_and_unreads";
        }, "getFetchMode");
      },
      4577150972: (W, A, e) => {
        "use strict";
        e.d(A, {
          c: () => r,
        });
        var t = e(3398586081),
          n = e(1609960255),
          s = e(7114008777),
          i = e(7156540029),
          d = e(8352634987),
          o = e(7912281988),
          a = e(6533394955);
        const r = (0, t.A)(function () {
          let c =
              arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : s.L.All,
            u =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : !1;
          return new d.Ay({
            storeKey: "activityIA4",
            fetch: (l) =>
              (0, a.dispatchForTeamId)(
                l,
                (0, o.Q)({
                  limit: i.Q1,
                  filter: c,
                  fetchNew: !0,
                  mode: (0, n.A)({
                    selectedTab: c,
                    unreadsFilterToggleSelected: u,
                  }),
                })
              ),
            isEnabled: () => !0,
            metricsName: "activity",
            markStaleAfterSlowReconnect: () => !0,
          });
        });
      },
      1247361162: (W, A, e) => {
        "use strict";
        e.d(A, {
          $T: () => y,
          ES: () => c,
          Eg: () => v,
          Gt: () => g,
          KD: () => E,
          cJ: () => f,
          f7: () => I,
          gW: () => T,
          mt: () => O,
          om: () => p,
          rz: () => u,
          sG: () => l,
          ut: () => m,
          yC: () => M,
          yN: () => C,
        });
        var t = e(7114008777),
          n = e(6695353875),
          s = e(4577150972),
          i = e(5921578648),
          d = e(8161242485),
          o = e(8847766420);
        const a = _((h, D) => {
            var P, S;
            const b = (0, n.kz)(D),
              K =
                h === t.L.Reactions
                  ? h
                  : (0, i.S)({
                      filter: h,
                      isUnreadMode: !!(
                        !(
                          D == null ||
                          (P = D.activityIA4) === null ||
                          P === void 0
                        ) && P.filterUnreads
                      ),
                      isFilteringRevampToggledOn: b,
                    });
            return (S = D.activityIA4) === null || S === void 0 ? void 0 : S[K];
          }, "getActivityListForFilter"),
          r = (0, d.Ay)((h) => {
            var D, P, S;
            const b = (0, o.ZT)(h),
              K = (D = h.activityIA4) === null || D === void 0 ? void 0 : D.all;
            return (
              ((h == null || (P = h.activityIA4) === null || P === void 0
                ? void 0
                : P.selectedTabId) === t.L.All ||
                !(
                  !(
                    h == null ||
                    (S = h.activityIA4) === null ||
                    S === void 0
                  ) && S.selectedTabId
                )) &&
                K != null &&
                K.length &&
                (0, s.c)(t.L.All, !1).maybeRefetch(b, t.N),
              h && h.activityIA4 && K
            );
          });
        r.meta = {
          name: "createSelector",
          key: "createSelectorgetReadAndUnreadActivityList",
          description: (h) => {
            var D, P, S;
            const b = (0, o.ZT)(h),
              K = (D = h.activityIA4) === null || D === void 0 ? void 0 : D.all;
            return (
              ((h == null || (P = h.activityIA4) === null || P === void 0
                ? void 0
                : P.selectedTabId) === t.L.All ||
                !(
                  !(
                    h == null ||
                    (S = h.activityIA4) === null ||
                    S === void 0
                  ) && S.selectedTabId
                )) &&
                K != null &&
                K.length &&
                (0, s.c)(t.L.All, !1).maybeRefetch(b, t.N),
              h && h.activityIA4 && K
            );
          },
        };
        const c = (0, d.Ay)((h) => {
          var D, P;
          const S = (0, o.ZT)(h),
            b = a(t.L.All, h);
          if (
            ((h == null || (D = h.activityIA4) === null || D === void 0
              ? void 0
              : D.selectedTabId) === t.L.All ||
              !(
                !(h == null || (P = h.activityIA4) === null || P === void 0) &&
                P.selectedTabId
              )) &&
            b != null &&
            b.length
          ) {
            var K;
            (0, s.c)(
              t.L.All,
              (K = h.activityIA4) === null || K === void 0
                ? void 0
                : K.filterUnreads
            ).maybeRefetch(S, t.N);
          }
          return h && h.activityIA4 && b;
        });
        c.meta = {
          name: "createSelector",
          key: "createSelectorgetActivityList",
          description: (h) => {
            var D, P;
            const S = (0, o.ZT)(h),
              b = a(t.L.All, h);
            if (
              ((h == null || (D = h.activityIA4) === null || D === void 0
                ? void 0
                : D.selectedTabId) === t.L.All ||
                !(
                  !(
                    h == null ||
                    (P = h.activityIA4) === null ||
                    P === void 0
                  ) && P.selectedTabId
                )) &&
              b != null &&
              b.length
            ) {
              var K;
              (0, s.c)(
                t.L.All,
                (K = h.activityIA4) === null || K === void 0
                  ? void 0
                  : K.filterUnreads
              ).maybeRefetch(S, t.N);
            }
            return h && h.activityIA4 && b;
          },
        };
        const u = (0, d.Ay)((h) => {
          var D;
          const P = (0, o.ZT)(h),
            S = a(t.L.Mentions, h);
          if (
            (h == null || (D = h.activityIA4) === null || D === void 0
              ? void 0
              : D.selectedTabId) === t.L.Mentions &&
            S.length
          ) {
            var b;
            (0, s.c)(
              t.L.Mentions,
              (b = h.activityIA4) === null || b === void 0
                ? void 0
                : b.filterUnreads
            ).maybeRefetch(P, t.N);
          }
          return h && h.activityIA4 && S;
        });
        u.meta = {
          name: "createSelector",
          key: "createSelectorgetActivityListMentions",
          description: (h) => {
            var D;
            const P = (0, o.ZT)(h),
              S = a(t.L.Mentions, h);
            if (
              (h == null || (D = h.activityIA4) === null || D === void 0
                ? void 0
                : D.selectedTabId) === t.L.Mentions &&
              S.length
            ) {
              var b;
              (0, s.c)(
                t.L.Mentions,
                (b = h.activityIA4) === null || b === void 0
                  ? void 0
                  : b.filterUnreads
              ).maybeRefetch(P, t.N);
            }
            return h && h.activityIA4 && S;
          },
        };
        const l = (0, d.Ay)((h) => {
          var D;
          const P = (0, o.ZT)(h),
            S = a(t.L.Replies, h);
          if (
            (h == null || (D = h.activityIA4) === null || D === void 0
              ? void 0
              : D.selectedTabId) === t.L.Replies &&
            S.length
          ) {
            var b;
            (0, s.c)(
              t.L.Replies,
              (b = h.activityIA4) === null || b === void 0
                ? void 0
                : b.filterUnreads
            ).maybeRefetch(P, t.N);
          }
          return h && h.activityIA4 && S;
        });
        l.meta = {
          name: "createSelector",
          key: "createSelectorgetActivityListReplies",
          description: (h) => {
            var D;
            const P = (0, o.ZT)(h),
              S = a(t.L.Replies, h);
            if (
              (h == null || (D = h.activityIA4) === null || D === void 0
                ? void 0
                : D.selectedTabId) === t.L.Replies &&
              S.length
            ) {
              var b;
              (0, s.c)(
                t.L.Replies,
                (b = h.activityIA4) === null || b === void 0
                  ? void 0
                  : b.filterUnreads
              ).maybeRefetch(P, t.N);
            }
            return h && h.activityIA4 && S;
          },
        };
        const m = (0, d.Ay)((h) => {
          var D, P, S;
          const b = (0, o.ZT)(h),
            K = a(t.L.Reactions, h);
          if (
            (h == null || (D = h.activityIA4) === null || D === void 0
              ? void 0
              : D.selectedTabId) === t.L.Reactions &&
            !(
              h == null ||
              (P = h.activityIA4) === null ||
              P === void 0 ||
              (S = P.reactions) === null ||
              S === void 0
            ) &&
            S.length
          ) {
            var x;
            (0, s.c)(
              t.L.Reactions,
              (x = h.activityIA4) === null || x === void 0
                ? void 0
                : x.filterUnreads
            ).maybeRefetch(b, t.N);
          }
          return h && h.activityIA4 && K;
        });
        m.meta = {
          name: "createSelector",
          key: "createSelectorgetActivityListReactions",
          description: (h) => {
            var D, P, S;
            const b = (0, o.ZT)(h),
              K = a(t.L.Reactions, h);
            if (
              (h == null || (D = h.activityIA4) === null || D === void 0
                ? void 0
                : D.selectedTabId) === t.L.Reactions &&
              !(
                h == null ||
                (P = h.activityIA4) === null ||
                P === void 0 ||
                (S = P.reactions) === null ||
                S === void 0
              ) &&
              S.length
            ) {
              var x;
              (0, s.c)(
                t.L.Reactions,
                (x = h.activityIA4) === null || x === void 0
                  ? void 0
                  : x.filterUnreads
              ).maybeRefetch(b, t.N);
            }
            return h && h.activityIA4 && K;
          },
        };
        const v = (0, d.Ay)((h) => {
          var D;
          const P = (0, o.ZT)(h);
          if (
            !(h == null || (D = h.activityIA4) === null || D === void 0) &&
            D.filterUnreads
          ) {
            var S;
            (0, s.c)(
              t.L.Unreads,
              (S = h.activityIA4) === null || S === void 0
                ? void 0
                : S.filterUnreads
            ).maybeRefetch(P, t.N);
          }
          return h && h.activityIA4 && h.activityIA4.unreads;
        });
        v.meta = {
          name: "createSelector",
          key: "createSelectorgetActivityListUnreads",
          description: (h) => {
            var D;
            const P = (0, o.ZT)(h);
            if (
              !(h == null || (D = h.activityIA4) === null || D === void 0) &&
              D.filterUnreads
            ) {
              var S;
              (0, s.c)(
                t.L.Unreads,
                (S = h.activityIA4) === null || S === void 0
                  ? void 0
                  : S.filterUnreads
              ).maybeRefetch(P, t.N);
            }
            return h && h.activityIA4 && h.activityIA4.unreads;
          },
        };
        const E = (0, d.Ay)((h) => {
          var D;
          const P = (0, o.ZT)(h),
            S = a(t.L.Apps, h);
          if (
            (h == null || (D = h.activityIA4) === null || D === void 0
              ? void 0
              : D.selectedTabId) === t.L.Apps &&
            S.length
          ) {
            var b;
            (0, s.c)(
              t.L.Apps,
              (b = h.activityIA4) === null || b === void 0
                ? void 0
                : b.filterUnreads
            ).maybeRefetch(P, t.N);
          }
          return h && h.activityIA4 && S;
        });
        E.meta = {
          name: "createSelector",
          key: "createSelectorgetActivityListApps",
          description: (h) => {
            var D;
            const P = (0, o.ZT)(h),
              S = a(t.L.Apps, h);
            if (
              (h == null || (D = h.activityIA4) === null || D === void 0
                ? void 0
                : D.selectedTabId) === t.L.Apps &&
              S.length
            ) {
              var b;
              (0, s.c)(
                t.L.Apps,
                (b = h.activityIA4) === null || b === void 0
                  ? void 0
                  : b.filterUnreads
              ).maybeRefetch(P, t.N);
            }
            return h && h.activityIA4 && S;
          },
        };
        const T = (0, d.Ay)((h) => {
          var D;
          const P = (0, o.ZT)(h),
            S = a(t.L.Channels, h);
          if (
            (h == null || (D = h.activityIA4) === null || D === void 0
              ? void 0
              : D.selectedTabId) === t.L.Channels &&
            S.length
          ) {
            var b;
            (0, s.c)(
              t.L.Channels,
              (b = h.activityIA4) === null || b === void 0
                ? void 0
                : b.filterUnreads
            ).maybeRefetch(P, t.N);
          }
          return h && h.activityIA4 && S;
        });
        T.meta = {
          name: "createSelector",
          key: "createSelectorgetActivityListChannels",
          description: (h) => {
            var D;
            const P = (0, o.ZT)(h),
              S = a(t.L.Channels, h);
            if (
              (h == null || (D = h.activityIA4) === null || D === void 0
                ? void 0
                : D.selectedTabId) === t.L.Channels &&
              S.length
            ) {
              var b;
              (0, s.c)(
                t.L.Channels,
                (b = h.activityIA4) === null || b === void 0
                  ? void 0
                  : b.filterUnreads
              ).maybeRefetch(P, t.N);
            }
            return h && h.activityIA4 && S;
          },
        };
        const g = (0, d.Ay)((h) => {
          var D;
          const P = (0, o.ZT)(h),
            S = a(t.L.Priority, h);
          if (
            (h == null || (D = h.activityIA4) === null || D === void 0
              ? void 0
              : D.selectedTabId) === t.L.Priority &&
            S.length
          ) {
            var b;
            (0, s.c)(
              t.L.Priority,
              (b = h.activityIA4) === null || b === void 0
                ? void 0
                : b.filterUnreads
            ).maybeRefetch(P, t.N);
          }
          return h && h.activityIA4 && S;
        });
        g.meta = {
          name: "createSelector",
          key: "createSelectorgetActivityListPriority",
          description: (h) => {
            var D;
            const P = (0, o.ZT)(h),
              S = a(t.L.Priority, h);
            if (
              (h == null || (D = h.activityIA4) === null || D === void 0
                ? void 0
                : D.selectedTabId) === t.L.Priority &&
              S.length
            ) {
              var b;
              (0, s.c)(
                t.L.Priority,
                (b = h.activityIA4) === null || b === void 0
                  ? void 0
                  : b.filterUnreads
              ).maybeRefetch(P, t.N);
            }
            return h && h.activityIA4 && S;
          },
        };
        const I = (0, d.Ay)((h) => {
          var D;
          const P = (0, o.ZT)(h),
            S = a(t.L.Vip, h);
          if (
            (h == null || (D = h.activityIA4) === null || D === void 0
              ? void 0
              : D.selectedTabId) === t.L.Vip &&
            S.length
          ) {
            var b;
            (0, s.c)(
              t.L.Vip,
              (b = h.activityIA4) === null || b === void 0
                ? void 0
                : b.filterUnreads
            ).maybeRefetch(P, t.N);
          }
          return h && h.activityIA4 && S;
        });
        I.meta = {
          name: "createSelector",
          key: "createSelectorgetActivityListVip",
          description: (h) => {
            var D;
            const P = (0, o.ZT)(h),
              S = a(t.L.Vip, h);
            if (
              (h == null || (D = h.activityIA4) === null || D === void 0
                ? void 0
                : D.selectedTabId) === t.L.Vip &&
              S.length
            ) {
              var b;
              (0, s.c)(
                t.L.Vip,
                (b = h.activityIA4) === null || b === void 0
                  ? void 0
                  : b.filterUnreads
              ).maybeRefetch(P, t.N);
            }
            return h && h.activityIA4 && S;
          },
        };
        const f = (0, d.Ay)(
          (h) => h && h.activityIA4 && h.activityIA4.unreadVip
        );
        f.meta = {
          name: "createSelector",
          key: "createSelectorgetActivityListUnreadVip",
          description: (h) => h && h.activityIA4 && h.activityIA4.unreadVip,
        };
        const y = (0, d.Ay)(
          (h) => h && h.activityIA4 && h.activityIA4.unreadOther
        );
        y.meta = {
          name: "createSelector",
          key: "createSelectorgetActivityListUnreadOther",
          description: (h) => h && h.activityIA4 && h.activityIA4.unreadOther,
        };
        const M = (0, d.Ay)((h) => h && h.activityIA4 && h.activityIA4.other);
        M.meta = {
          name: "createSelector",
          key: "createSelectorgetActivityListOther",
          description: (h) => h && h.activityIA4 && h.activityIA4.other,
        };
        const p = (0, d.Ay)((h) => {
          var D;
          const P = (0, o.ZT)(h),
            S = a(t.L.EverythingElse, h);
          if (
            (h == null || (D = h.activityIA4) === null || D === void 0
              ? void 0
              : D.selectedTabId) === t.L.EverythingElse &&
            S.length
          ) {
            var b;
            (0, s.c)(
              t.L.EverythingElse,
              (b = h.activityIA4) === null || b === void 0
                ? void 0
                : b.filterUnreads
            ).maybeRefetch(P, t.N);
          }
          return h && h.activityIA4 && S;
        });
        p.meta = {
          name: "createSelector",
          key: "createSelectorgetActivityListEverythingElse",
          description: (h) => {
            var D;
            const P = (0, o.ZT)(h),
              S = a(t.L.EverythingElse, h);
            if (
              (h == null || (D = h.activityIA4) === null || D === void 0
                ? void 0
                : D.selectedTabId) === t.L.EverythingElse &&
              S.length
            ) {
              var b;
              (0, s.c)(
                t.L.EverythingElse,
                (b = h.activityIA4) === null || b === void 0
                  ? void 0
                  : b.filterUnreads
              ).maybeRefetch(P, t.N);
            }
            return h && h.activityIA4 && S;
          },
        };
        const O = (0, d.Ay)((h) => {
          var D;
          const P = (0, o.ZT)(h),
            S = a(t.L.DMS, h);
          if (
            (h == null || (D = h.activityIA4) === null || D === void 0
              ? void 0
              : D.selectedTabId) === t.L.DMS &&
            S.length
          ) {
            var b;
            (0, s.c)(
              t.L.DMS,
              (b = h.activityIA4) === null || b === void 0
                ? void 0
                : b.filterUnreads
            ).maybeRefetch(P, t.N);
          }
          return h && h.activityIA4 && S;
        });
        O.meta = {
          name: "createSelector",
          key: "createSelectorgetActivityListDms",
          description: (h) => {
            var D;
            const P = (0, o.ZT)(h),
              S = a(t.L.DMS, h);
            if (
              (h == null || (D = h.activityIA4) === null || D === void 0
                ? void 0
                : D.selectedTabId) === t.L.DMS &&
              S.length
            ) {
              var b;
              (0, s.c)(
                t.L.DMS,
                (b = h.activityIA4) === null || b === void 0
                  ? void 0
                  : b.filterUnreads
              ).maybeRefetch(P, t.N);
            }
            return h && h.activityIA4 && S;
          },
        };
        const C = (0, d.Ay)((h) => {
          var D;
          const P = (0, o.ZT)(h),
            S = a(t.L.Invitations, h);
          if (
            (h == null || (D = h.activityIA4) === null || D === void 0
              ? void 0
              : D.selectedTabId) === t.L.Invitations &&
            S != null &&
            S.length
          ) {
            var b;
            (0, s.c)(
              t.L.Invitations,
              (b = h.activityIA4) === null || b === void 0
                ? void 0
                : b.filterUnreads
            ).maybeRefetch(P, t.N);
          }
          return h && h.activityIA4 && S;
        });
        C.meta = {
          name: "createSelector",
          key: "createSelectorgetActivityListInvitations",
          description: (h) => {
            var D;
            const P = (0, o.ZT)(h),
              S = a(t.L.Invitations, h);
            if (
              (h == null || (D = h.activityIA4) === null || D === void 0
                ? void 0
                : D.selectedTabId) === t.L.Invitations &&
              S != null &&
              S.length
            ) {
              var b;
              (0, s.c)(
                t.L.Invitations,
                (b = h.activityIA4) === null || b === void 0
                  ? void 0
                  : b.filterUnreads
              ).maybeRefetch(P, t.N);
            }
            return h && h.activityIA4 && S;
          },
        };
      },
      5921578648: (W, A, e) => {
        "use strict";
        e.d(A, {
          S: () => s,
        });
        var t = e(5235917009),
          n = e(7114008777);
        const s = _((i) => {
          let {
            filter: d,
            isUnreadMode: o,
            isFilteringRevampToggledOn: a,
            mode: r,
          } = i;
          return r === "chrono_priority_only_unreads_v1"
            ? "unreadVip"
            : r === "priority_reads_and_unreads_v1"
            ? "other"
            : r === "priority_unreads_v1"
            ? "unreadOther"
            : o && d === n.L.EverythingElse
            ? `unread${d.charAt(0).toUpperCase() + d.slice(1)}`
            : o && a
            ? `unread${(0, t.A)(d)}`
            : !a && o
            ? "unreads"
            : d;
        }, "getFilterForSelectedMode");
      },
      2309387455: (W, A, e) => {
        "use strict";
        e.d(A, {
          N: () => n,
          v: () => t,
        });
        const t = _(
            (s) =>
              ("bundle_info" in s &&
                "payload" in s.bundle_info &&
                "thread_entry" in s.bundle_info.payload &&
                "priority" in s.bundle_info.payload.thread_entry) ||
              ("message" in s && "priority" in s.message),
            "isActivityFeedEntryVip"
          ),
          n = _((s) => {
            var i;
            const d =
                (i = s.findIndex((c) => !(t(c.item) && c.is_unread))) !==
                  null && i !== void 0
                  ? i
                  : 0,
              o = d === -1 ? s.length : d,
              a = s.slice(0, o),
              r = s.slice(o);
            return [a, r];
          }, "getSeparateLists");
      },
      7912281988: (W, A, e) => {
        "use strict";
        e.d(A, {
          Q: () => D,
        });
        var t = e(3290693121),
          n = e(537208959),
          s = e(7114008777),
          i = e(6422693406),
          d = e(9694536345),
          o = e(9648131521),
          a = e(3622175906),
          r = e(4798756512),
          c = e(796111729),
          u = e(3855029223),
          l = e(6695353875),
          m = e(9006747218),
          v = e(4577150972),
          E = e(5921578648),
          T = e(2309387455),
          g = e(6845763719),
          I = e(5728184452),
          f = e(1031947056),
          y = e(8847766420),
          M = e(3694676182),
          p = e(1496122061),
          O = e(6111266013),
          C = e(3683482182);
        const h = {
            "action-items": !0,
          },
          D = (0, f.Ay)("Fetch user activity", function (P, S) {
            let {
              limit: b,
              filter: K,
              mode: x,
              fetchNew: B,
              isUnreadMode: U,
              isInbox: R,
              types: G,
            } = arguments.length > 2 && arguments[2] !== void 0
              ? arguments[2]
              : {
                  limit: 20,
                  mode: "chrono_reads_and_unreads",
                  filter: s.L.All,
                  isInbox: !1,
                };
            P((0, m.G3)(!0));
            const H = S(),
              F = (0, y.ZT)(H),
              V = (0, g.F)(H),
              X = (0, g.S1)(H),
              q = (0, g.d5)(H),
              oe = (0, g.hT)(H),
              z = (0, l.UU)(H),
              Ae = (0, l.kz)(H),
              ae = (0, t.a)(H),
              de = (0, l.zu)(H),
              ve = (0, n.TF)(H),
              Se = (0, l.Ts)(H),
              Ee = (0, E.S)({
                filter: K,
                isUnreadMode: U !== void 0 ? U : oe,
                isFilteringRevampToggledOn: Ae,
                mode: x,
              }),
              be = V == null ? void 0 : V[Ee],
              Ce =
                G ||
                (0, I.TO)(Ee, {
                  experimentBundleAppsActivityWithBEGroupOn: z,
                  experimentIsActivityThreadV2GroupOn: ve,
                  experimentIsVipThreadsEnabledGroupOn: Se,
                  isInbox: R,
                  mode: x,
                });
            return (h != null && h[K]) || (!B && !be)
              ? (P((0, m.G3)(!1)), i.S.resolve())
              : ((0, v.c)(K, oe).markObjectsAsFresh(F, [s.N]),
                P(
                  (0, o.X)({
                    limit: b,
                    reason: "fetchActivityFeed",
                    types: Ce,
                    mode: x,
                    cursor: B ? void 0 : be,
                  })
                )
                  .then((Z) => {
                    if (!Z.items) return;
                    if (
                      de &&
                      (x === "priority_reads_and_unreads_v1" ||
                        x === "priority_unreads_v1")
                    ) {
                      var $;
                      const [w, k] = (0, T.N)(Z.items);
                      P(
                        (0, m.bl)({
                          nextCursor: V == null ? void 0 : V.unreadVip,
                          items: w,
                          filter: "unreadVip",
                          refreshItems: (ae || de) && B,
                        })
                      ),
                        P(
                          (0, m.bl)({
                            nextCursor:
                              Z == null ||
                              ($ = Z.response_metadata) === null ||
                              $ === void 0
                                ? void 0
                                : $.next_cursor,
                            items: k,
                            filter: Ee,
                            refreshItems: (ae || de) && B,
                          })
                        );
                    } else {
                      var N;
                      P(
                        (0, m.bl)({
                          nextCursor:
                            Z == null ||
                            (N = Z.response_metadata) === null ||
                            N === void 0
                              ? void 0
                              : N.next_cursor,
                          items: Z.items,
                          filter: Ee,
                          refreshItems: (ae || de) && B,
                        })
                      );
                    }
                    if (x === "chrono_unreads") {
                      const w = (0, g.cJ)(S()),
                        k = (0, C.xY)(S());
                      Z.items.length !== w &&
                        P((0, d.O)()).then((J) => {
                          P((0, M.Q7)(J));
                          const ee = (0, u.E)({
                              state: H,
                            }),
                            ne = (0, c.Ay)({
                              getState: S,
                              label: "ACTIVITY_BADGING",
                            });
                          try {
                            const pe = ee.createSpan({
                              name: "ia4client_activity_badge:mismatch",
                              samplingOptions: {
                                sampleType: r.tS.ALWAYS,
                              },
                              options: {
                                tags: {
                                  num_unread_activity_items: Z.items.length,
                                  old_activity_badge_count: w,
                                  new_channel_badges: JSON.stringify(
                                    J.channelBadges
                                  ),
                                  old_channel_badges: JSON.stringify(k),
                                },
                              },
                            });
                            pe.close(),
                              ee.reportSpans([pe]),
                              ne.info(
                                `Activity badge mismatch. number of unread activity.feed items: ${
                                  Z.items.length
                                } activityBadgeCount: ${w}: counts.channelBadges: ${JSON.stringify(
                                  J == null ? void 0 : J.channelBadges
                                )} old channelBadges: ${JSON.stringify(k)}`
                              );
                          } catch {}
                        });
                    }
                    const L = "slack-connect-fetch-invites-for-activity-feed";
                    B &&
                      !X &&
                      [
                        "all",
                        "invitations",
                        "unreadAll",
                        "unreadInvitations",
                      ].includes(K) &&
                      Z.items.some((w) => {
                        let { item: k } = w;
                        return I.Oi.includes(k.type);
                      }) &&
                      P(
                        (0, O.p)({
                          direction: a.D.Incoming,
                          reason: L,
                        })
                      ).then(() => P((0, m.xv)(!0))),
                      B &&
                        !q &&
                        [
                          "all",
                          "invitations",
                          "unreadAll",
                          "unreadInvitations",
                        ].includes(K) &&
                        P(
                          (0, p.d)({
                            reason: L,
                          })
                        ).then(() => P((0, m.ae)(!0)));
                  })
                  .finally(() => P((0, m.G3)(!1))));
          });
        D.meta = {
          name: "createThunk",
          key: "createThunkfetchActivityFeed",
          description: "Fetch user activity",
        };
      },
      5728184452: (W, A, e) => {
        "use strict";
        e.d(A, {
          Oi: () => n,
          TO: () => d,
          b8: () => o,
        });
        var t = e(6626377467);
        const n = [
            "external_channel_invite",
            "shared_workspace_invite",
            "external_dm_invite",
          ],
          s = [
            "at_user",
            "at_user_group",
            "at_channel",
            "at_everyone",
            "keyword",
            "list_record_assigned",
            "list_user_mentioned",
          ],
          i = [
            "at_user",
            "at_user_group",
            "at_channel",
            "at_everyone",
            "keyword",
          ],
          d = _((a, r) => {
            let {
              experimentBundleAppsActivityWithBEGroupOn: c,
              experimentIsActivityThreadV2GroupOn: u,
              experimentIsVipThreadsEnabledGroupOn: l,
              isInbox: m,
              mode: v,
            } = r;
            const E = c ? "bot_dm_bundle" : "bot_dm";
            let T = [
              u ? "thread_v2" : "thread_reply",
              "message_reaction",
              "internal_channel_invite",
              "list_record_edited",
              E,
              ...s,
              ...n,
            ];
            const g = a.toLowerCase();
            if (
              !(
                v === "experimental_all_chrono_unreads_v1" ||
                v === "experimental_all_chrono_reads_and_unreads_v1" ||
                v === "experimental_priority_unreads_v1" ||
                v === "experimental_everything_else_reads_and_unreads_v1" ||
                v === "experimental_everything_else_unreads_v1"
              )
            )
              return (
                (v === "chrono_priority_only_reads_and_unreads_v1" ||
                  v === "chrono_priority_only_unreads_v1") &&
                  ((T = i),
                  l &&
                    (g.includes("vip") || g.includes("all")) &&
                    (T = [...i, "thread_v2", "internal_channel_invite"])),
                g.includes("mentions") && (T = s),
                g.includes("apps") && (T = [E]),
                g.includes("replies") && (T = void 0),
                m &&
                  g.includes("replies") &&
                  (T = [u ? "thread_v2" : "experimental_thread"]),
                g.includes("reactions") && (T = ["message_reaction"]),
                g.includes("unreads") &&
                  (T = [
                    E,
                    u ? "thread_v2" : "thread_reply",
                    "internal_channel_invite",
                    ...s,
                    ...n,
                  ]),
                g.includes("invitations") &&
                  (T = ["internal_channel_invite", ...n]),
                m && g.includes("channels") && (T = ["experimental_channels"]),
                m && g.includes("dms") && (T = ["experimental_dms"]),
                m &&
                  T &&
                  (g.includes("all") || g.includes("unreads")) &&
                  (T.push("experimental_dms"), T.push("experimental_channels")),
                T
              );
          }, "getActivityTypes"),
          o = _((a) => {
            let { items: r } = a;
            return (0, t.A)(r, (c) => {
              if (
                "key" in c &&
                (c == null ? void 0 : c.type) === "non_collapsible_header"
              )
                return `item-by-feed-key-${c == null ? void 0 : c.key}`;
              if (
                "ts" in c &&
                (c == null ? void 0 : c.type) === "channel_bundle"
              )
                return `channel-bundle-${c == null ? void 0 : c.ts}`;
              const {
                messageTs: u,
                type: l,
                threadTs: m,
                channelId: v,
                invite: E,
                key: T,
              } = c;
              return l === "message_reaction"
                ? `reaction-${u}`
                : l === "thread_reply" ||
                  l === "experimental_thread" ||
                  l === "thread_v2"
                ? `thread-${m}`
                : l === "external_channel_invite"
                ? `external-channel-invite-${E}`
                : l === "external_dm_invite"
                ? `external-dm-invite-${E}`
                : l === "shared_workspace_invite"
                ? `shared-workspace-invite-${E}`
                : l === "im"
                ? `im${v}`
                : l === "experimental_dms"
                ? `im${v}`
                : l === "experimental_channels"
                ? `im${v}`
                : T !== void 0
                ? `item-by-feed-key-${T}`
                : `mention-${u}`;
            });
          }, "getUniqueActivityItems");
      },
      4919185865: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => Dl,
        });
        var t = e(1416482128),
          n = e(7763652800),
          s = e(796111729),
          i = e(4423055085),
          d = e(4724591729),
          o = e(8520727613),
          a = e(2791814261),
          r = e(1535672935),
          c = e(1031947056),
          u = e(6776011876),
          l = e(6533394955);
        const m = (0, c.Ay)("maybeDisableDebugger side effect handler", () => {
          if ((0, d.Yj)() || (0, d.Cu)() || (0, d.$i)()) return;
          const me = (0, l.getStateForClientStore)();
          if (
            (0, a.c)() &&
            !(0, o.A)(
              me,
              "disable_tinyspeck_slackdebug_enforcement",
              "treatment"
            )
          ) {
            (0, i.Jb)();
            return;
          }
          (0, i.CP)() || (0, i.YF)();
        });
        m.meta = {
          name: "createThunk",
          key: "createThunkmaybeDisableDebugger",
          description: "maybeDisableDebugger side effect handler",
        };
        const v = (0, u.kt)([r.setDidBootAllWorkspaces], m);
        var E = e(3571452446),
          T = e(3245843483),
          g;
        (function (me) {
          (me.DOGFOOD = "dogfood"), (me.BETA = "beta"), (me.PROD = "prod");
        })(g || (g = {}));
        var I;
        (function (me) {
          (me.BETA = "beta"), (me.PROD = "prod");
        })(I || (I = {}));
        const f = _((me) => me !== g.PROD, "isPreRelease");
        var y;
        (function (me) {
          (me.NIGHTLY = "nightly"),
            (me.ALPHA = "alpha"),
            (me.ETA = "eta"),
            (me.PILOT = "pilot"),
            (me.BETA = "beta"),
            (me.PROD = "prod");
        })(y || (y = {}));
        var M;
        (function (me) {
          (me.BETA = "beta"), (me.PROD = "prod");
        })(M || (M = {}));
        const p = [y.ALPHA, y.ETA, y.BETA, y.PILOT, y.PROD],
          O = _((me) => me !== y.PROD, "release_channels_4_31_0_isPreRelease");
        var C = e(1583163054),
          h = e(571104883),
          D = e(4096483543),
          P = e(9012396182),
          S = e(3677514771);
        const b = (0, c.Ay)(
          "maybeSetReleaseChannelOverrideHandler",
          (me, ce, Pe) => {
            !(0, h.y3)() || !(0, T.g9M)() || B(ce);
          }
        );
        b.meta = {
          name: "createThunk",
          key: "createThunkmaybeSetReleaseChannelOverrideHandler",
          description: "maybeSetReleaseChannelOverrideHandler",
        };
        const K = (0, u.kt)([r.setDidBootAllWorkspaces], b),
          x = "nightly-promotion-state";
        function B(me) {
          const ce = (0, T.oQe)("environment", "releaseChannel"),
            Pe = (0, T.oQe)("settings", "releaseChannelOverride");
          let Be = Pe;
          if (
            (!Be && (ce === "beta" || ce === "alpha") && (Be = ce),
            Be === "eta" && (Be = g.BETA),
            (0, D.A)() && (0, h.dY)("4.31.150"))
          ) {
            const nt = me();
            if (
              (0, o.A)(nt, "ssb_dogfood_automatic_promotion", "on") &&
              (0, a.c)() &&
              Be !== C.zS
            )
              try {
                window.localStorage.getItem(x) !== "2" &&
                  ((Be = C.zS), window.localStorage.setItem(x, "1"));
              } catch {}
            Be === "alpha" && (Be = g.BETA);
          }
          Be !== Pe &&
            ((0, T.cGU)({
              name: "releaseChannelOverride",
              value: Be,
            }),
            T.NjF.cache && T.NjF.cache.clear());
        }
        _(B, "maybeSetReleaseChannelOverride");
        const U = [
            "domain",
            "enterprise_id",
            "enterprise_name",
            "id",
            "icon",
            "name",
            "url",
            "variant",
          ],
          R = (0, c.Ay)("Sync workspaces state with desktop", (me, ce) => {
            if (!(0, h.y3)()) return;
            const Pe = ce(),
              Be = (0, P.getBootedWorkspaces)(Pe),
              nt = (0, P.getAllWorkspaces)(Pe);
            var Xe;
            const It =
                (Xe = (0, P.getWorkspacesMeta)(Pe)) !== null && Xe !== void 0
                  ? Xe
                  : {},
              tt =
                Be == null
                  ? void 0
                  : Be.reduce((wt, Nn) => {
                      const qn = (0, l.getStateByTeamId)(Nn),
                        Gt = {
                          ...(0, S._J)(qn, Nn, !1),
                          ...(It == null ? void 0 : It[Nn]),
                        };
                      return (
                        (wt[Nn] = {
                          ...(0, E.A)(Gt, U),
                          order: nt.indexOf(Nn),
                        }),
                        wt
                      );
                    }, {});
            (0, T.CIW)(tt);
          });
        R.meta = {
          name: "createThunk",
          key: "createThunksyncWorkspacesToDesktop",
          description: "Sync workspaces state with desktop",
        };
        const G = (0, c.Ay)(
          "Sync workspaces state with desktop when a new team has booted",
          (me, ce) => {
            if (!(0, h.y3)()) return;
            const Pe = ce();
            (0, P.didBootAllWorkspaces)(Pe) && me(R());
          }
        );
        G.meta = {
          name: "createThunk",
          key: "createThunksyncWorkspacesToDesktopOnAdditionalTeamBoot",
          description:
            "Sync workspaces state with desktop when a new team has booted",
        };
        const H = (0, u.kt)(
            [r.setDidBootAllWorkspaces, r.setWorkspaceOrder],
            R
          ),
          F = (0, u.kt)([r.setWorkspaceBooted], G);
        var V = e(4932704503),
          X = e(1378315125);
        const q = "DESKTOP-SIDE-EFFECT",
          oe = (0, c.Ay)("logUpdateFromDesktop", (me, ce, Pe) => {
            (0, s.Wo)().info(
              q,
              "Update from desktop for keys ",
              Object.keys(Pe.payload)
            );
          });
        oe.meta = {
          name: "createThunk",
          key: "createThunklogUpdateFromDesktop",
          description: "logUpdateFromDesktop",
        };
        const z = (0, u.kt)([X.Ez], oe),
          Ae = (0, c.Ay)("maybeHandleWindowFocusEvent", (me, ce, Pe) => {
            (0, D.A)() &&
              Pe.payload &&
              Pe.payload.windows &&
              me(
                (0, V.pz)({
                  isFocused: document.hasFocus(),
                })
              );
          });
        Ae.meta = {
          name: "createThunk",
          key: "createThunkmaybeHandleWindowFocusEvent",
          description: "maybeHandleWindowFocusEvent",
        };
        const ae = (0, u.kt)([X.Ez], Ae);
        var de = e(3398586081),
          ve = e(8646192222),
          Se = e(8439865561),
          Ee = e(5105455463);
        (0, de.A)(() => {
          if ((0, ve.Nu)())
            try {
              window.matchMedia(Ee.og).onchange = (me) => {
                const ce = (0, l.getClientStoreInstance)();
                ce && ce.dispatch((0, Se.N)(me.matches));
              };
            } catch (me) {
              (0, s.Wo)().warn(
                "ACCESSIBILITY-STORE",
                "window.matchMedia hook failed; system high contrast theme will not be updated.",
                me
              );
            }
        })();
        const Ce = (0, c.Ay)(
          "maybeUpdateShouldUseHighContrastColors",
          (me, ce, Pe) => {
            if (!(0, ve.Nu)() && (0, ve.hk)()) {
              var Be, nt;
              const Xe =
                Pe == null ||
                (Be = Pe.payload) === null ||
                Be === void 0 ||
                (nt = Be.settings) === null ||
                nt === void 0
                  ? void 0
                  : nt.shouldUseHighContrastColors;
              Xe !== void 0 && me((0, Se.N)(Xe));
            }
          }
        );
        Ce.meta = {
          name: "createThunk",
          key: "createThunkmaybeUpdateShouldUseHighContrastColors",
          description: "maybeUpdateShouldUseHighContrastColors",
        };
        const Z = (0, u.kt)([X.Ez], Ce);
        var $ = e(1703559452),
          N = e(1658558415),
          L = e(6917917245),
          w = e(8170643398),
          k = e(6839188756),
          J = e(5597384299),
          ee = e(6449156268),
          ne = e(7002741921),
          pe = e(8276911661),
          Me = e(9733150292);
        const ke = "workspace_switcher_awareness_v2",
          ge = (0, de.A)(() => ((0, N.A)() ? "treatment" : (0, L.B9)(ke))),
          fe = (0, de.A)(() => (0, L.fW)(ke)),
          re = (0, de.A)(() => ge() === L.dw.Control),
          le = (0, de.A)(() => {
            const me = Object.values((0, l.getStoreInstanceMap)());
            let ce = 0;
            return (0, $.A)(me, (Pe) => {
              if (!Pe) return !1;
              const Be = Pe.getState();
              return (0, k.qR)((0, S.H7)(Be)) && (ce += 1), ce > 1;
            });
          }),
          Re = (0, de.A)(
            () =>
              (0, P.getNumberOfWorkspaces)((0, l.getStateForClientStore)()) > 1
          ),
          ye = (0, de.A)(() => {
            const me = Object.values((0, l.getStoreInstanceMap)());
            let ce = 0,
              Pe = 0;
            return (0, $.A)(me, (Be) => {
              if (!Be) return !1;
              const nt = Be.getState(),
                Xe = (0, pe.cA)(nt),
                It = (0, w.yF)(Xe),
                tt =
                  It && (0, J.KR)((0, ee.A)().toDate(), ee.A.unix(It).toDate());
              return (
                tt && tt > 30 && (Pe += 1),
                (0, k.qR)((0, S.H7)(nt)) && (ce += 1),
                ce > 1 && Pe > 0
              );
            });
          }),
          Te = _(() => {
            (0, Me.q9)("hasSeenWorkspaceSwitcherAwareness", !0);
          }, "markWorkspaceSwitcherAwarenessAsSeen"),
          De = _(
            () => (0, Me.W6)("hasSeenWorkspaceSwitcherAwareness"),
            "hasSeenWorkspaceSwitcherAwareness"
          ),
          Ue = _((me) => {
            let { toggleName: ce, toggleGroup: Pe } = me;
            return (0, ne.A)(ce, Pe, !1) && Re() && !le();
          }, "isEligibleForWorkspaceSwitcherAwarenessV2"),
          Ke = _(() => fe() || ye(), "isEligibleForWorkspaceSwitcherAwareness"),
          Ze = _(() => {
            De() && (0, Me.q9)("hasSeenWorkspaceSwitcherAwareness", !1);
          }, "workspaceSwitcherAwarenessCleanupCallback");
        var Q = e(4766735965),
          ie = e(6290537170);
        const Ve = (0, c.Ay)(
          "Opens workspace switcher if the user is part of experiment",
          (me, ce) => {
            const Pe = ce();
            (0, h.y3)() &&
              !De() &&
              !(0, ie.v8)(Pe) &&
              Ke() &&
              (me((0, Q.A)()), Te());
          }
        );
        Ve.meta = {
          name: "createThunk",
          key: "createThunkmaybeToggleWorkspaceSwitcherForAwarenessThunk",
          description:
            "Opens workspace switcher if the user is part of experiment",
        };
        const xe = (0, u.kt)([r.setDidBootAllWorkspaces], Ve);
        var je = e(6766954308),
          Fe = e(2633701976),
          He = e(2047021170);
        const Oe = (0, c.Ay)(
          "Transition the a11y_read_out_incoming_dm user pref to its new corresponding client pref",
          (me, ce) => {
            var Pe;
            const Be = ce(),
              nt = (0, P.getFocusedWorkspace)(Be),
              Xe = (0, l.getStoreInstanceByTeamId)(nt),
              It =
                Xe == null || (Pe = Xe.getState) === null || Pe === void 0
                  ? void 0
                  : Pe.call(Xe);
            if (!It || (0, je.gR)(Be) !== void 0) return;
            const wt = (0, He.ty)(It, "a11y_read_out_incoming_dm");
            if (wt !== void 0) {
              me((0, Fe.p)(wt));
              return;
            }
            me((0, Fe.p)(!0));
          }
        );
        Oe.meta = {
          name: "createThunk",
          key: "createThunkmaybeMigrateDmAnnouncementPref",
          description:
            "Transition the a11y_read_out_incoming_dm user pref to its new corresponding client pref",
        };
        const Ye = (0, u.kt)([r.setDidBootAllWorkspaces], Oe);
        var at = e(2517531287);
        const _t = (0, c.Ay)(
          "Transition the a11y_play_sound_for_incoming_dm_choice and a11y_play_sound_for_sent_dm_choice user prefs to their new corresponding client prefs",
          (me, ce) => {
            var Pe;
            const Be = ce(),
              nt = (0, P.getFocusedWorkspace)(Be),
              Xe = (0, l.getStoreInstanceByTeamId)(nt),
              It =
                Xe == null || (Pe = Xe.getState) === null || Pe === void 0
                  ? void 0
                  : Pe.call(Xe);
            if (!It) return;
            if ((0, je.u$)(Be) === "") {
              const Nn = (0, He.ty)(
                  It,
                  "a11y_play_sound_for_incoming_dm_choice"
                ),
                qn = Nn ?? "";
              me((0, at.R)(qn));
            }
            if ((0, je.kd)(Be) === "") {
              const Nn = (0, He.ty)(It, "a11y_play_sound_for_sent_dm_choice"),
                qn = Nn ?? "";
              me((0, at.r)(qn));
            }
          }
        );
        _t.meta = {
          name: "createThunk",
          key: "createThunkmaybeMigrateDmSoundPrefs",
          description:
            "Transition the a11y_play_sound_for_incoming_dm_choice and a11y_play_sound_for_sent_dm_choice user prefs to their new corresponding client prefs",
        };
        const pt = (0, u.kt)([r.setDidBootAllWorkspaces], _t);
        var Qe = e(6422693406),
          ct = e(3297051565),
          Pt = e.n(ct),
          zt = e(9113979368),
          an = e(5257368278),
          Qt = e(1269227002),
          tn = e(8161242485);
        const Ht = (0, tn.Ay)((me) => me && me.persistedApiCalls);
        Ht.meta = {
          name: "createSelector",
          key: "createSelectorgetPersistedApiCalls",
          description: (me) => me && me.persistedApiCalls,
        };
        var Kt = e(4294892493),
          qt = e(1874577777);
        const Tn = "OFFLINE",
          Mt = (0, an.A)("Replay persisted API calls", function (me, ce) {
            let Pe =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : Ht(ce());
            const Be = ce();
            if (!(0, qt.A)(Be) || (0, zt.A)(Pe)) return;
            const nt = (0, s.Ay)({
              state: Be,
            });
            nt.info(
              Tn,
              "replayPersistedApiCalls called after workspace booted"
            );
            const Xe = Object.keys(Pe)
              .sort()
              .map((It) => Pe[It]);
            Qe.K.each(Xe, (It) =>
              me((0, Qt.apiCall)(It))
                .catch((tt) => {
                  nt.error(
                    Tn,
                    `Error replaying ${It.method} (${It.persistKey})`,
                    tt
                  );
                })
                .finally(() => {
                  nt.info(
                    Tn,
                    `Clearing persisted payload for ${It.method} (${It.persistKey})`
                  ),
                    me((0, Kt.M)(It.persistKey));
                })
            );
          });
        (Mt.meta = {
          name: "createFetcher",
          key: "createFetcherreplayPersistedApiCalls",
          description: "Replay persisted API calls",
        }),
          (Mt.propTypes = Pt().object);
        const Jt = (0, c.Ay)("triggerReplayPersistedApiCalls", (me, ce, Pe) => {
          const Be = Pe.payload;
          (0, l.dispatchForTeamId)(Be, Mt());
        });
        Jt.meta = {
          name: "createThunk",
          key: "createThunktriggerReplayPersistedApiCalls",
          description: "triggerReplayPersistedApiCalls",
        };
        const dn = (0, u.kt)([r.setWorkspaceBooted], Jt);
        var rn = e(859310680),
          gn = e(3855029223),
          Zt = e(2872463257);
        const Vt = (0, c.Ay)(
          "recordExperimentGroupsAsTrace side effect handler",
          (me, ce, Pe) => {
            const Be = (0, l.getStateForClientStore)(),
              nt = (0, P.getBootedWorkspaces)(Be) || [];
            try {
              const Xe = Zt.nl.ALWAYS;
              nt.forEach((It) => {
                const tt = (0, l.getStateByTeamId)(It),
                  wt = (0, rn.xy)(tt),
                  Nn = JSON.stringify(wt),
                  qn = (0, gn.E)({
                    state: tt,
                  }),
                  Ts = qn.createSpan({
                    name: "experiment_groups",
                    options: {
                      tags: {
                        experiment_groups: Nn,
                      },
                    },
                    samplingOptions: {
                      sampleType: Xe,
                    },
                  });
                Ts.close(), qn.reportSpans([Ts]);
              });
            } catch (Xe) {
              (0, s.Wo)().warn(
                "BOOT-TEAM",
                "could not report experiment groups in trace",
                Xe
              );
            }
          }
        );
        Vt.meta = {
          name: "createThunk",
          key: "createThunkrecordExperimentGroupsAsTrace",
          description: "recordExperimentGroupsAsTrace side effect handler",
        };
        const Sn = (0, u.kt)([r.setDidBootAllWorkspaces], Vt);
        var ze = e(5613323535);
        const Ot = (0, c.Ay)(
          "setAutoTracerTagProvider side effect handler",
          (me, ce, Pe) => {
            ze.LI.isEnabled() &&
              ze.LI.setTagProvider((Be) => (Be ? (0, rn.go)(Be) : {}));
          }
        );
        Ot.meta = {
          name: "createThunk",
          key: "createThunksetAutoTracerTagProvider",
          description: "setAutoTracerTagProvider side effect handler",
        };
        const fn = (0, u.kt)([r.setDidBootAllWorkspaces], Ot);
        var ln = e(2763437247),
          it = e(1224315998),
          Tt = e(56548687),
          Ct = e(268083624),
          Rt = e(5795074931);
        const Yt = (0, c.Ay)(
          "Clog experiment related meta data for session toggles",
          (me, ce, Pe) => {
            let { experimentNames: Be } = Pe;
            const nt = (0, Ct.v8)(Ct.i$),
              Xe = (0, T.sST)(),
              It = (0, l.getClientStoreInstance)(),
              tt = (0, P.getFocusedWorkspace)(It.getState()),
              wt = (0, P.getBootedWorkspaces)(It.getState()),
              Nn = wt.join(","),
              qn = wt
                .map((Ts) => {
                  var Gt;
                  const On =
                    (Gt = (0, l.getStoreInstanceByTeamId)(Ts)) === null ||
                    Gt === void 0
                      ? void 0
                      : Gt.getState();
                  return (0, Rt.WR)(On);
                })
                .join(",");
            Be.forEach((Ts) => {
              const Gt = (0, L.B9)(Ts);
              if (
                Gt === ln.dw.Control ||
                Gt === ln.dw.Treatment ||
                Gt === ln.dw.On
              ) {
                var On;
                (0, Tt.e)({
                  getState:
                    (On = (0, l.getStoreInstanceByTeamId)(tt)) === null ||
                    On === void 0
                      ? void 0
                      : On.getState,
                }).track(it.EventId.CLIENT_SESSION_TOGGLE_CLOG, {
                  contexts: {
                    experimentName: Ts,
                    experimentGroup: Gt,
                    teamIds: Nn,
                    userIds: qn,
                    visitorCookie: nt,
                    clientId: Xe,
                  },
                });
              }
            });
          }
        );
        Yt.meta = {
          name: "createThunk",
          key: "createThunkclogDataForSessionToggles",
          description: "Clog experiment related meta data for session toggles",
        };
        var bn = e(229828696),
          Wn = e(306687250),
          hn = e(5320724941),
          Bn = e(9681594967),
          Rn = e(2325478352),
          zn = e(9272190578),
          is = e(6209625934),
          ss = e(4761125736);
        function jn(me, ce) {
          const Pe = Object.values((0, l.getStoreInstanceMap)());
          for (const Be of Pe) {
            if (!Be) continue;
            const nt = Be.getState(),
              Xe = (0, ss.KK)(nt, me);
            Xe && Xe.log_exposures && ce === Xe.group && (0, is.K)(me, Xe, nt);
          }
        }
        _(jn, "logExposuresForSession");
        function Yn(me, ce) {
          if (((0, ln.SC)(me), ce))
            try {
              ce();
            } catch (Pe) {
              (0, s.Wo)().error(`caught error from cleanupCallback: ${Pe}`);
            }
        }
        _(Yn, "rollbackToggle");
        function Qn(me) {
          let { toggleName: ce, toggleGroup: Pe } = me;
          return (0, ne.A)(ce, Pe, !1);
        }
        _(Qn, "defaultToggleGroupMatcher");
        function es(me, ce) {
          var Pe;
          const Be =
              (Pe = ce == null ? void 0 : ce.customToggleGroupMatcher) !==
                null && Pe !== void 0
                ? Pe
                : Qn,
            nt = (0, ln.M_)(me),
            Xe = Et(me, nt, Be);
          if (nt === null && Xe !== ln.dw.NoGroup) {
            (0, ln.jc)(me, Xe);
            return;
          }
          Xe === ln.dw.NoGroup
            ? nt === ln.dw.Treatment || nt === ln.dw.On
              ? (Yn(me, ce == null ? void 0 : ce.cleanupCallback),
                (0, zn.As)({
                  reason: `Rolling back ${me} toggle`,
                  reasonKey: `rollback_${me}_toggle`,
                }))
              : (nt === ln.dw.Control || nt === ln.dw.Off) &&
                Yn(me, ce == null ? void 0 : ce.cleanupCallback)
            : Xe !== nt
            ? (0, ln.jc)(me, Xe)
            : Xe === nt && jn(me, nt);
        }
        _(es, "setToggleGroupForNextSession");
        function Et(me, ce, Pe) {
          const Be = Pe({
              toggleName: me,
              toggleGroup: ln.dw.Treatment,
            }),
            nt = Pe({
              toggleName: me,
              toggleGroup: ln.dw.Control,
            }),
            Xe = Pe({
              toggleName: me,
              toggleGroup: ln.dw.On,
            }),
            It = Pe({
              toggleName: me,
              toggleGroup: ln.dw.Off,
            });
          return Be && nt
            ? ce === ln.dw.Treatment
              ? ln.dw.Treatment
              : ce === ln.dw.Control
              ? ln.dw.Control
              : Math.random() < 0.5
              ? ln.dw.Treatment
              : ln.dw.Control
            : Xe && It
            ? ce === ln.dw.On
              ? ln.dw.On
              : ce === ln.dw.Off
              ? ln.dw.Off
              : Math.random() < 0.5
              ? ln.dw.On
              : ln.dw.Off
            : Be
            ? ln.dw.Treatment
            : nt
            ? ln.dw.Control
            : Xe
            ? ln.dw.On
            : It
            ? ln.dw.Off
            : ln.dw.NoGroup;
        }
        _(Et, "getCurrentToggleGroup");
        const gt = {
          getCurrentToggleGroup: Et,
        };
        (0, i.ul)("setToggleGroupForNextSession", (me) => es(me));
        var Ft = e(7530010356),
          nn = e(2371143272);
        const Dn = _(() => {
            try {
              Bn.qV.deleteDatabase();
            } catch (me) {
              Bn.qV
                .getLogger()
                .error(`caught error from deleteDatabase: ${me}`);
            }
          }, "objectStoreCallback"),
          bt = {
            [Rn.Wv]: {
              cleanupCallback: Dn,
            },
            [hn.f]: {},
            [Wn.z]: {},
            [nn.i]: {},
            [bn.H]: {},
            [ke]: {
              cleanupCallback: Ze,
              customToggleGroupMatcher: Ue,
            },
            [Ft.Dm]: {},
          },
          In = (0, c.Ay)("setToggleGroupsForNextSession", (me, ce, Pe) => {
            me(
              Yt({
                experimentNames: Object.keys(bt),
              })
            ),
              Object.entries(bt).forEach((Be) => {
                let [nt, Xe] = Be;
                es(nt, Xe);
              });
          });
        In.meta = {
          name: "createThunk",
          key: "createThunksetToggleGroupsForNextSession",
          description: "setToggleGroupsForNextSession",
        };
        const xn = (0, u.kt)([r.setDidBootAllWorkspaces], In);
        var Nt = e(4250409994),
          At = e(2766373332);
        const te = (0, c.Ay)(
          "maybeToggleGlobalMuteShortcutHandler",
          (me, ce, Pe) => (0, At.N$)(Pe.payload)
        );
        te.meta = {
          name: "createThunk",
          key: "createThunkmaybeToggleGlobalMuteShortcutHandler",
          description: "maybeToggleGlobalMuteShortcutHandler",
        };
        const _e = (0, u.kt)([Nt.Bk], te);
        var Ie = e(8365110903),
          Ne = e(25586007);
        const We = (0, c.Ay)(
          "Transition the up_to_browse_kb_shortcut user pref to the new client pref",
          (me, ce) => {
            var Pe;
            const Be = ce(),
              nt = (0, P.getFocusedWorkspace)(Be),
              Xe = (0, l.getStoreInstanceByTeamId)(nt),
              It =
                Xe == null || (Pe = Xe.getState) === null || Pe === void 0
                  ? void 0
                  : Pe.call(Xe);
            if (!It || (0, je.jX)(Be) !== void 0) return;
            const wt = (0, He.ty)(It, "up_to_browse_kb_shortcut"),
              { LIST: Nn, EDIT: qn } = Ne.v,
              Ts = wt ? Nn : qn;
            me((0, Ie.T)(Ts));
          }
        );
        We.meta = {
          name: "createThunk",
          key: "createThunkmaybeTransitionUpToBrowsePreference",
          description:
            "Transition the up_to_browse_kb_shortcut user pref to the new client pref",
        };
        const $e = (0, u.kt)([r.setWorkspaceBooted], We),
          mt = (0, c.Ay)(
            "updateLocalConfigOrderedTeamIds side effect handler",
            (me, ce, Pe) => {
              const Be = (0, s.Wo)({
                  label: Me.o7,
                }),
                nt = (0, l.getStateForClientStore)(),
                Xe = (0, P.getAllWorkspaces)(nt);
              (!Xe || Xe.length === 0) &&
                Be.warn(
                  "Skipping update to orderedTeamIds, allWorkspaces is empty"
                ),
                Be.info(`Updating orderedTeamIds to ${Xe.join(",")}`),
                (0, Me.q9)("orderedTeamIds", Xe);
            }
          );
        mt.meta = {
          name: "createThunk",
          key: "createThunkupdateLocalConfigOrderedTeamIds",
          description: "updateLocalConfigOrderedTeamIds side effect handler",
        };
        const Xt = (0, u.kt)([r.addWorkspace], mt);
        var _n = e(2250002584);
        const mn = (0, c.Ay)(
          "recordWssRailVisibility side effect handler",
          (me, ce) => {
            const Pe = (0, _n.F)(),
              Be = ce(),
              nt = (0, ie.v8)(Be) ? 1 : 0,
              Xe = Pe.createMetricsTrace({
                samplingOptions: {
                  sampleType: Zt.nl.SESSION,
                },
              });
            Xe.store({
              name: "wss_rail:visible",
              value: nt,
            }),
              Pe.reportTrace(Xe);
          }
        );
        mn.meta = {
          name: "createThunk",
          key: "createThunkrecordWssRailVisibility",
          description: "recordWssRailVisibility side effect handler",
        };
        const Fn = (0, u.kt)([r.setDidBootAllWorkspaces], mn);
        var Kn = e(3875705815),
          dt = e(4134037340),
          Y = e(2413251042),
          se = e(6303140164);
        const he = (0, c.Ay)(
          "Set zoom value for client before starting BBM",
          (me, ce, Pe) => {
            const { error: Be } = (0, s.Wo)();
            (0, dt.A)(ce()) ||
              Be(new Error("you must call setZoom for a client store"));
            try {
              (0, Me.q9)(se.UY, Pe);
            } catch (nt) {
              Be(new Error(`failed to store zoom in local storage: ${nt}`));
            }
            me((0, Y.x8)(Pe));
          }
        );
        he.meta = {
          name: "createThunk",
          key: "createThunksetZoom",
          description: "Set zoom value for client before starting BBM",
        };
        var Le = e(6696292586);
        function qe() {
          let me;
          return (ce) => (ce === me ? !1 : ((me = ce), !0));
        }
        _(qe, "getDidUpdate");
        const ht = qe(),
          et = (0, c.Ay)(
            "updateFromDesktop side effect handler",
            (me, ce, Pe) => {
              var Be;
              const nt = ce(),
                Xe =
                  P.getFocusedWorkspace === null ||
                  P.getFocusedWorkspace === void 0
                    ? void 0
                    : (0, P.getFocusedWorkspace)(nt);
              if (!Xe) return;
              const It = (0, l.getStateByTeamId)(Xe);
              if ((0, Kn.V)(It)) return;
              const tt =
                (Be = Pe.payload.settings) === null || Be === void 0
                  ? void 0
                  : Be.zoomLevel;
              (0, Le.A)(tt) && ht(tt) && (0, l.dispatchForClientStore)(he(tt));
            }
          );
        et.meta = {
          name: "createThunk",
          key: "createThunkonUpdateFromDesktop",
          description: "updateFromDesktop side effect handler",
        };
        const Ut = (0, u.kt)([X.Ez], et),
          $t = [
            v,
            z,
            ae,
            dn,
            fn,
            Z,
            xn,
            H,
            F,
            Sn,
            _e,
            K,
            $e,
            pt,
            Ye,
            Fn,
            Xt,
            Ut,
            xe,
          ];
        var En = e(4900557724);
        const wn = 50,
          $n = "recents";
        var j = e(8628205589),
          ue = e(2384831516);
        let we;
        function ft(me) {
          we && (0, En.GP)(we),
            (we = (0, En.BB)(() => {
              (we = void 0), (0, Me.q9)($n, me);
            }));
        }
        _(ft, "persistRecents");
        function pn() {
          var me;
          return (me = (0, Me.W6)($n)) !== null && me !== void 0 ? me : [];
        }
        _(pn, "loadRecents");
        const An = pn(),
          xt = (0, ue.vy)({}, An, {
            persistenceEnabled: !1,
            storeKey: "recents",
          })
            .on(j.y2, (me, ce) => {
              let { entry: Pe } = ce;
              const Be = [Pe, ...me].slice(0, wn);
              return ft(Be), Be;
            })
            .on(j.HQ, (me, ce) => {
              let { entry: Pe } = ce;
              const Be = [Pe, ...me.slice(1)].slice(0, wn);
              return ft(Be), Be;
            })
            .on(j.TP, (me) => {
              const ce = me.slice(0, 1);
              return ft(ce), ce;
            });
        var Vn = e(3193155968),
          Jn = e(9936094925);
        const Je = {
            [Vn.N2]: {
              index: 0,
              previousIndex: null,
              stack: [],
            },
          },
          Bt = {
            persistenceEnabled: !1,
            storeKey: "mainWindowHistory",
          },
          rt = (0, ue.vy)({}, Je, Bt)
            .on(j.y2, (me, ce) => {
              let { windowId: Pe, entry: Be } = ce;
              return {
                ...me,
                [Pe]: (0, Jn.wg)({
                  windowState: me[Pe],
                  entry: Be,
                }),
              };
            })
            .on(j.jW, () => Je)
            .on(j.cM, (me, ce) => {
              let { windowId: Pe, index: Be, previousIndex: nt } = ce;
              return {
                ...me,
                [Pe]: (0, Jn.ds)({
                  windowState: me[Pe],
                  index: Be,
                  previousIndex: nt,
                }),
              };
            })
            .on(j.$E, (me, ce) => {
              let { windowId: Pe, index: Be } = ce;
              return {
                ...me,
                [Pe]: (0, Jn.cB)({
                  windowState: me[Pe],
                  index: Be,
                }),
              };
            })
            .on(j.HQ, (me, ce) => {
              let { windowId: Pe, entry: Be } = ce;
              return {
                ...me,
                [Pe]: (0, Jn.w9)({
                  windowState: me[Pe],
                  entry: Be,
                }),
              };
            });
        (0, i.ul)("mainWindowHistory", {
          getState: () =>
            (0, l.getStateForClientStore)().mainWindowHistory[Vn.N2],
        });
        var yt = e(7715417323);
        function ot() {
          let {
            state: me,
            prevState: ce,
            workspaces: Pe = [],
            broadcastSelector: Be = yt.A,
            broadcastAction: nt = yt.A,
          } = arguments.length > 0 && arguments[0] !== void 0
            ? arguments[0]
            : {};
          const Xe = Be(me),
            It = Be(ce);
          Xe !== It &&
            Pe.forEach((tt) => {
              (0, l.dispatchForTeamId)(tt, nt(Xe));
            });
        }
        _(ot, "maybeBroadcastStateToWorkspaces");
        const lt = ot;
        var Ge = e(1527536225);
        const jt = (0, Ge.Ay)(
          "Broadcast accessibility state to other stores",
          (me, ce, Pe) => {
            const Be = me.getState(),
              nt = ce(Pe),
              Xe = me.getState(),
              It = (0, P.getBootedWorkspaces)(Xe);
            return (
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, je.VH)(tt),
                broadcastAction: (tt) => (0, Se.Jq)(tt),
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, je.nQ)(tt),
                broadcastAction: (tt) => (0, Se.N)(tt),
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, je.dF)(tt),
                broadcastAction: (tt) => (0, Se.KQ)(tt),
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, je.jX)(tt),
                broadcastAction: (tt) => (0, Se.Tv)(tt),
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, je.gb)(tt),
                broadcastAction: (tt) => (0, Se.C_)(tt),
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, je.zm)(tt),
                broadcastAction: (tt) => (0, Se.XE)(tt),
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, je.K9)(tt),
                broadcastAction: (tt) => (0, Se.Mq)(tt),
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, je.u$)(tt),
                broadcastAction: (tt) => (0, Se.Sr)(tt),
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, je.kd)(tt),
                broadcastAction: (tt) => (0, Se.mw)(tt),
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, je.gR)(tt),
                broadcastAction: (tt) => (0, Se.Ap)(tt),
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, je.u)(tt),
                broadcastAction: (tt) => (0, Se.V_)(tt),
              }),
              nt
            );
          }
        );
        jt.meta = {
          name: "createMiddleware",
          key: "createMiddlewarebroadcastAccessibilityMiddleware",
          description: "Broadcast accessibility state to other stores",
        };
        const on = jt;
        var cn = e(1004520977),
          Wt = e(9234290540);
        const en = (0, Ge.Ay)(
          "Broadcast accessibility persistent state to other stores",
          (me, ce, Pe) => {
            const Be = me.getState(),
              nt = ce(Pe),
              Xe = me.getState(),
              It = (0, P.getBootedWorkspaces)(Xe);
            return (
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, Wt.i)(tt),
                broadcastAction: (tt) => (0, cn.w)(tt),
              }),
              nt
            );
          }
        );
        en.meta = {
          name: "createMiddleware",
          key: "createMiddlewarebroadcastAccessibilityPersistentMiddleware",
          description:
            "Broadcast accessibility persistent state to other stores",
        };
        const Un = en;
        var Pn = e(3749529250);
        const Cn = (0, Ge.Ay)(
          "Broadcast big button mode state to other stores",
          (me, ce, Pe) => {
            const Be = me.getState(),
              nt = ce(Pe),
              Xe = me.getState(),
              It = (0, P.getBootedWorkspaces)(Xe).filter((tt) =>
                (0, ve.mL)((0, l.getStateByTeamId)(tt))
              );
            return (
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, Kn.V)(tt),
                broadcastAction: (tt) => (tt ? (0, Pn.z)() : (0, Pn.K)()),
              }),
              nt
            );
          }
        );
        Cn.meta = {
          name: "createMiddleware",
          key: "createMiddlewarebroadcastBBMMiddleware",
          description: "Broadcast big button mode state to other stores",
        };
        var Mn = e(2456103428),
          ds = e(6728717861);
        const un = (0, Ge.Ay)(
          "Broadcast connectivity state to other stores",
          (me, ce, Pe) => {
            const Be = me.getState(),
              nt = ce(Pe),
              Xe = me.getState(),
              It = (0, P.getBootedWorkspaces)(Xe);
            return (
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, ds.Pb)(tt),
                broadcastAction: (tt) => (0, Mn.p9)(tt),
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, ds.XQ)(tt),
                broadcastAction: (tt) => (0, Mn.pm)(tt),
              }),
              nt
            );
          }
        );
        un.meta = {
          name: "createMiddleware",
          key: "createMiddlewarebroadcastConnectivityMiddleware",
          description: "Broadcast connectivity state to other stores",
        };
        const gs = un;
        var os = e(848813706),
          vs = e(5223893135),
          us = e(5095654950);
        const sn = (0, Ge.Ay)(
          "Broadcast fullscreen state to other stores",
          (me, ce, Pe) => {
            const Be = me.getState(),
              nt = ce(Pe),
              Xe = me.getState(),
              It = (0, P.getBootedWorkspaces)(Xe).filter((tt) =>
                (0, ve.iB)((0, l.getStateByTeamId)(tt))
              );
            return (
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, vs.V)(tt),
                broadcastAction: (tt) => (tt ? (0, us.J)() : (0, os.sM)()),
              }),
              nt
            );
          }
        );
        sn.meta = {
          name: "createMiddleware",
          key: "createMiddlewarebroadcastFullscreenMiddleware",
          description: "Broadcast fullscreen state to other stores",
        };
        var Zn = e(4309043566);
        const cs = (0, ue.Ny)(
          "Broadcasts overlays state from client store to workspace stores",
          (me, ce, Pe) => {
            const Be = me.getState(),
              nt = ce(Pe),
              Xe = me.getState(),
              It = (0, P.getBootedWorkspaces)(Xe);
            return (
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => tt.overlays,
                broadcastAction: Zn.l,
              }),
              nt
            );
          }
        );
        cs.meta = {
          name: "createMiddleware",
          key: "createMiddlewarebroadcastOverlaysMiddleware",
          description:
            "Broadcasts overlays state from client store to workspace stores",
        };
        var Es = e(9083290776);
        const ts = (0, Ge.Ay)(
          "Broadcast workspaces state to other stores",
          (me, ce, Pe) => {
            const Be = me.getState(),
              nt = ce(Pe),
              Xe = me.getState(),
              It = (0, P.getBootedWorkspaces)(Xe),
              tt = Be && (0, P.getBootedWorkspaces)(Be),
              wt = (0, P.getAllWorkspaces)(Xe),
              Nn = (0, P.getAllWorkspaces)(Be),
              qn = !Nn || wt.some((On, kn) => On !== Nn[kn]),
              Ts = (0, P.getRecentlyFocusedWorkspaces)(Xe),
              Gt = Be && (0, P.getRecentlyFocusedWorkspaces)(Be);
            return (tt !== It || qn || Gt !== Ts) && as(It, Ts), nt;
          }
        );
        ts.meta = {
          name: "createMiddleware",
          key: "createMiddlewarebroadcastWorkspacesMiddleware",
          description: "Broadcast workspaces state to other stores",
        };
        function as(me, ce) {
          const Pe = ce[0];
          Pe &&
            (me == null ||
              me.forEach((Be) => {
                (0, l.dispatchForTeamId)(Be, (0, Es.K$)(ce)),
                  (0, l.dispatchForTeamId)(Be, (0, Es.fw)(ce));
              }),
            (0, T.ny2)(Pe));
        }
        _(as, "broadcastFocusedWorkspaces");
        const Is = ts;
        var fs = e(252549317),
          As = e(9042410435),
          Ms = e(8736071954),
          Cs = e(8719752487),
          Rs = e(5470425448),
          Ls = e(5071086688),
          Ns = e(6117529990);
        function ro(me) {
          switch ((0, ss._Z)(me, "calls_transport_type")) {
            case "udp":
              return ["udp"];
            case "tls":
              return ["tls"];
            case "tcp_tls":
              return ["tcp", "tls"];
            case "udp_tls":
              return ["udp", "tls"];
            case "disabled":
            default:
              return ["udp", "tcp", "tls"];
          }
        }
        _(ro, "getAllowedTurnTransportTypes");
        var ms = e(5332875232);
        function js() {
          return !(
            !("MediaStreamTrackProcessor" in globalThis) ||
            !("MediaStreamTrackGenerator" in globalThis) ||
            !("OffscreenCanvas" in globalThis) ||
            !("ImageBitmap" in globalThis) ||
            !("createImageBitmap" in globalThis)
          );
        }
        _(js, "isHuddlesBackgroundWorkerSupported");
        const xs = (0, s.Wo)({
            label: "HUDDLE-INIT-OPTIONS",
          }),
          wo = _((me, ce) => {
            let { server: Pe, isPrejoin: Be } = ce;
            if (!me) {
              xs.error(
                "teamState is not defined. Returning empty init options"
              );
              return;
            }
            const nt = {};
            return (
              (nt.serverConfig = {
                ...Pe,
                transportProtocols: ro(me),
              }),
              (nt.isPrejoin = Be),
              (nt.useChimeSdkExp = (0, Ns.OV)(me)),
              (nt.useDevicesExp = (0, ms.ZI)(me)),
              (nt.useVideoUplinkPolicy = (0, ms.Jf)(me)),
              (nt.useH264BaselineScreenshare =
                (0, Ns.OV)(me) && (0, ms.RM)(me)),
              (nt.useH264Baseline = (0, Ns.OV)(me) && (0, ms.er)(me)),
              (nt.useAv1Screenshare = (0, ms.Cu)(me)),
              (nt.disconnectObserverEnabled = (0, ms.eB)(me)),
              (nt.huddlesJukeboxEnabled = (0, ms.Eg)(me)),
              (nt.disableAudioRedundancy = (0, ms.JQ)(me)),
              (nt.useSimulcast = !1),
              (nt.usePriorityDownlinkPolicy = (0, h.gm)()
                ? !1
                : (0, ms.bw)(me)),
              (nt.useGetMediaAccessCheckForWindows = (0, ms.jP)(me)),
              (nt.enableExperimentalConnectionHealthPolicyConfig = (0, ms.bb)(
                me
              )),
              (nt.disableVp9 = (0, ms.lH)(me)),
              (nt.useHuddlesFilterWorker = js() && (0, ms.lz)(me)),
              xs.info("returning init options: ", nt),
              nt
            );
          }, "getSdkInitOptions");
        var Fs = e(6246464105),
          io = e(8872167513),
          Ho = e(2709531527),
          da = e(164795489),
          lo = e(3300324857),
          ua = e(4708000837),
          Oo = e(1371073900),
          Do = e(2457673737),
          Gs = e(6664301844),
          _a = e(6310192986),
          zs = e(7366481123),
          ma = e(5253428843),
          Gn = e(3065433701),
          co = e(5378147939);
        const uo = (0, c.Ay)("Resolve a pending huddle", (me, ce, Pe) =>
          (0, co.A)().resolvePendingJoin(Pe)
        );
        uo.meta = {
          name: "createThunk",
          key: "createThunkresolvePendingHuddle",
          description: "Resolve a pending huddle",
        };
        const Po = uo;
        var Ys = e(2778217221),
          _o = e(6694086724),
          _s = e(5286203919),
          mo = e(9548972574),
          Vo = e(3474336343),
          jo = e(3263322402),
          So = e(3977512448);
        const ho = (0, c.Ay)(
          "update client huddle membership timers join",
          (me, ce) => {
            const Pe = ce(),
              Be = (0, s.Ay)({
                state: Pe,
              }),
              nt = (0, l.getStateForClientStore)(),
              Xe = (0, _s.Ak)(nt),
              It = (0, Vo.Wg)(Pe, {
                tip: So.ml.Huddles,
              });
            if (!Xe) {
              Be.warn(
                Ys.o7,
                "no active huddle found, cannot update state to together or alone"
              );
              return;
            }
            const tt = (0, mo.Sx)(Pe);
            if (tt === 0) {
              (0, co.A)().setAloneInHuddle();
              return;
            }
            tt > 0 &&
              (It && me((0, jo._A)(!0)),
              (0, co.A)().setOthersInHuddle(),
              me(
                (0, _o.e)({
                  clearOnEndedCallback: !0,
                  logContext: "on-peer-joined",
                })
              ));
          }
        );
        ho.meta = {
          name: "createThunk",
          key: "createThunkupdateAloneOrTogetherInHuddle",
          description: "update client huddle membership timers join",
        };
        var vo = e(9706240641),
          Xn = e(5824283093),
          Ro = e(7418219258),
          ha = e(862210999),
          st = e(8645544190),
          ut = e(8921478798),
          vt = e(1641606663),
          St = e(735940183),
          vn = e(8847766420),
          kt = e(387328355),
          Ln = e(6839101721),
          Hn = e(5323669031),
          ns = e(2825968873),
          ls = e(3094144240),
          Ks = e(9477894139),
          Bs = e(2562405183),
          oo = e(9391594207),
          ws = e(5255740490),
          mr = e(3534324375),
          va = e(8869734951);
        let Ea = _(
          class extends Xn.PureComponent {
            static getDerivedStateFromProps(ce, Pe) {
              return ce.mediaStream !== Pe.currentMediaStream
                ? ce.mediaStream &&
                  Pe.currentMediaStream &&
                  ce.mediaStream.id === Pe.currentMediaStream.id
                  ? {
                      currentMediaStream: ce.mediaStream,
                      isFlipped: ce.isFlipped,
                      isCurrentMediaStreamReady: !1,
                      prevMediaStream: void 0,
                    }
                  : {
                      prevMediaStream: ce.mediaStream
                        ? Pe.currentMediaStream
                        : void 0,
                      currentMediaStream: ce.mediaStream,
                      isFlipped: ce.isFlipped,
                      wasFlipped: Pe.isFlipped,
                      isCurrentMediaStreamReady: !1,
                    }
                : null;
            }
            componentDidMount() {
              this.setupMedia();
            }
            componentDidUpdate() {
              this.setupMedia();
            }
            componentWillUnmount() {
              const ce = this.videoRef.current,
                Pe = this.prevVideoRef.current;
              ce &&
                (ce.removeEventListener("canplay", this.onCanPlay),
                ce.removeEventListener("pause", this.onPause),
                ce.removeEventListener("resize", this.onResize)),
                Pe &&
                  (Pe.removeEventListener("canplay", this.onCanPlay),
                  Pe.removeEventListener("pause", this.onPause),
                  Pe.removeEventListener("resize", this.onResize)),
                this.props.onVideoReady && this.props.onVideoReady(!1);
            }
            onCanPlay() {
              const { currentMediaStream: ce } = this.state,
                Pe = ce && ce.getVideoTracks()[0];
              this.isDataStopped &&
                Pe &&
                Pe.readyState === "live" &&
                (this.props.onVideoReady && this.props.onVideoReady(!0),
                this.setState(() => ({
                  isCurrentMediaStreamReady: !0,
                })));
            }
            onPause(ce) {
              this.state.currentMediaStream &&
                ce.target.srcObject instanceof MediaStream &&
                ce.target.srcObject.id === this.state.currentMediaStream.id &&
                (this.props.onVideoReady && this.props.onVideoReady(!1),
                (this.isDataStopped = !0));
            }
            setupMedia() {
              const { currentMediaStream: ce, prevMediaStream: Pe } =
                  this.state,
                Be = this.videoRef.current,
                nt = this.prevVideoRef.current;
              Be &&
                ((Be.muted = !0),
                Be.srcObject !== ce &&
                  (Be.addEventListener("canplay", this.onCanPlay),
                  Be.addEventListener("pause", this.onPause),
                  Be.addEventListener("resize", this.onResize),
                  (Be.srcObject = ce || null))),
                nt &&
                  ((nt.muted = !0),
                  nt.srcObject !== Pe &&
                    (nt.removeEventListener("canplay", this.onCanPlay),
                    nt.removeEventListener("pause", this.onPause),
                    nt.removeEventListener("resize", this.onResize),
                    (nt.srcObject = Pe || null)));
            }
            onResize() {
              const ce = this.videoRef.current;
              ce &&
                (this.props.isSharingScreen
                  ? (ce.style.objectFit = "contain")
                  : (ce.style.objectFit =
                      ce.videoWidth > ce.videoHeight ? "cover" : "contain"));
            }
            render() {
              const {
                  className: ce,
                  isFlipped: Pe,
                  refToForward: Be,
                } = this.props,
                {
                  currentMediaStream: nt,
                  prevMediaStream: Xe,
                  isCurrentMediaStreamReady: It,
                  wasFlipped: tt,
                } = this.state;
              return Xn.createElement(
                Xn.Fragment,
                null,
                !It &&
                  Xe &&
                  Xn.createElement("video", {
                    key: Xe && Xe.id,
                    className: (0, ws.A)("p-calls_video", ce, {
                      flipped: tt,
                    }),
                    ref: this.prevVideoRef,
                    autoPlay: !0,
                  }),
                Xn.createElement("video", {
                  className: (0, ws.A)("p-calls_video", ce, {
                    flipped: Pe,
                    hidden: !It,
                  }),
                  ref: (0, va.P)(this.videoRef, Be),
                  autoPlay: !0,
                  key: nt && nt.id,
                })
              );
            }
            constructor(ce) {
              super(ce),
                (this.prevVideoRef = Xn.createRef()),
                (this.videoRef = Xn.createRef()),
                (this.isDataStopped = !0),
                (this.state = {
                  isCurrentMediaStreamReady: !1,
                  isFlipped: !1,
                  wasFlipped: !1,
                }),
                (this.onCanPlay = this.onCanPlay.bind(this)),
                (this.onPause = this.onPause.bind(this)),
                (this.onResize = this.onResize.bind(this));
            }
          },
          "CallsOriginalVideoElement"
        );
        Ea.displayName = "CallsOriginalVideoElement";
        function Go() {
          return (
            (Go =
              Object.assign ||
              function (me) {
                for (var ce = 1; ce < arguments.length; ce++) {
                  var Pe = arguments[ce];
                  for (var Be in Pe)
                    Object.prototype.hasOwnProperty.call(Pe, Be) &&
                      (me[Be] = Pe[Be]);
                }
                return me;
              }),
            Go.apply(this, arguments)
          );
        }
        _(Go, "_extends");
        const hr = _((me, ce) => {
            const Pe = (0, kt.JZ)(me, ce.id);
            return {
              mediaStream: Pe.mediaStream,
              isFlipped: (0, kt.fy)(Pe) && !Pe.isScreenshareEnabled,
              isSharingScreen: Pe.isScreenshareEnabled,
            };
          }, "mapStateToProps"),
          vr = (0, oo.N)(hr)(Ea),
          Er = Xn.forwardRef((me, ce) =>
            Xn.createElement(
              vr,
              Go({}, me, {
                refToForward: ce,
              })
            )
          );
        var fr = e(4775127335),
          pr = e(6308822),
          zo = e(7299481592),
          gr = e(5956851410),
          Ar = e(6909784049),
          yr = e(8558782493),
          fa = e(1975685771);
        function Tr(me, ce) {
          const Pe = Math.min(ce.width, ce.height * me),
            Be = Math.min(ce.height, ce.width / me);
          return {
            top: ce.top + (ce.height - Be) / 2,
            left: ce.left + (ce.width - Pe) / 2,
            width: Pe,
            height: Be,
          };
        }
        _(Tr, "getLargestRectForAspectRatioCenteredWithinRect");
        let Yo = _(
          class extends Xn.PureComponent {
            detectDifference(ce, Pe) {
              return Math.abs(ce - Pe) > 1;
            }
            componentDidMount() {
              var ce;
              (0, ns.tZ)("GUEST-DRAW-WINDOW").info("Guest draw window mounted"),
                (0, yr.k)(it.EventId.CALLS_GUEST_DRAW_ACTIVATED, {}),
                (ce = this.context.windowRef.deref()) === null ||
                  ce === void 0 ||
                  ce.addEventListener("resize", this.onResize),
                (0, fa.Z)(
                  this.videoRef.current,
                  "Expected videoRef to be bound after mounting"
                ) &&
                  (this.props.addEventListeners &&
                    this.props.addEventListeners(
                      this.videoRef,
                      this.onResize,
                      !0
                    ),
                  this.onResize(),
                  (this.resizeTimeout = window.setTimeout(() => {
                    this.onResize();
                  }, 4e3)),
                  this.videoRef.current.dispatchEvent(new Event("resize")));
            }
            componentDidUpdate(ce) {
              let { isVideoReady: Pe } = ce;
              !Pe && this.props.isVideoReady && this.onResize();
            }
            componentWillUnmount() {
              var ce;
              this.props.removeEventListeners &&
                this.props.removeEventListeners(
                  this.videoRef,
                  this.onResize,
                  !0
                ),
                (ce = this.context.windowRef.deref()) === null ||
                  ce === void 0 ||
                  ce.removeEventListener("resize", this.onResize),
                window.clearTimeout(this.resizeTimeout);
            }
            onResize() {
              if (
                !(0, fa.Z)(
                  this.videoRef.current,
                  "Expected videoRef to be bound on resize"
                )
              )
                return;
              const ce = this.videoRef.current;
              !ce ||
                ce.videoHeight === 0 ||
                this.setState(() => ({
                  videoRect: Tr(
                    ce.videoWidth / ce.videoHeight,
                    ce.getBoundingClientRect()
                  ),
                }));
            }
            render() {
              const ce = Xn.Children.only(this.props.children),
                Pe = Xn.cloneElement(ce, {
                  ref: (0, va.N)(this.videoRef, ce),
                });
              return Xn.createElement(
                Xn.Fragment,
                null,
                Pe,
                this.state.videoRect &&
                  Xn.createElement(gr.u, {
                    ref: this.drawRenderRef,
                    isHidden: !this.props.isScreenShareEnabled,
                    targetRect: this.state.videoRect,
                  }),
                this.props.isDrawEnabled &&
                  this.state.videoRect &&
                  Xn.createElement(Ar.o, {
                    ref: this.drawTargetRef,
                    targetRect: this.state.videoRect,
                  })
              );
            }
            constructor(ce) {
              super(ce),
                (this.videoRef = Xn.createRef()),
                (this.drawTargetRef = Xn.createRef()),
                (this.drawRenderRef = Xn.createRef()),
                (this.onResize = this.onResize.bind(this)),
                (this.state = {});
            }
          },
          "GuestDraw"
        );
        (Yo.displayName = "GuestDraw"), (Yo.contextType = vt.Mn);
        const Ir = _((me, ce) => {
            const Pe = (0, kt.gl)(me);
            if (!Pe)
              throw Error(
                "Guest draw should not be mounted without an active peer"
              );
            const Be = (0, kt.JZ)(me, Pe);
            return {
              isDrawEnabled: !!Be.isScreenshareEnabled && !!Be.isDrawEnabled,
              isScreenShareEnabled: !!Be.isScreenshareEnabled,
            };
          }, "guest_draw_mapStateToProps"),
          pa = (0, oo.N)(Ir)(Yo),
          Cr = {
            isVideoReady: !1,
          };
        let ga = _(
          class extends Xn.PureComponent {
            onVideoReady(ce) {
              this.setState((Pe) => ({
                ...Pe,
                isVideoReady: ce,
              }));
            }
            renderVideo() {
              const { id: ce, renderVideo: Pe, tileId: Be } = this.props;
              if (Pe) return Pe(this.isVideoEnabledAndReady());
              if (!ce) {
                (0, zo.M)("Cannot render video without a peer id");
                return;
              }
              return Xn.createElement(
                pa,
                {
                  isVideoReady: this.state.isVideoReady,
                },
                Xn.createElement(Er, {
                  id: ce,
                  tileId: Be,
                  onVideoReady: this.onVideoReady,
                  className: (0, ws.A)({
                    hidden: !this.state.isVideoReady,
                  }),
                })
              );
            }
            renderImage() {
              const {
                isSpinning: ce,
                prefCompliantUserName: Pe,
                member: Be,
              } = this.props;
              return Xn.createElement(
                "div",
                {
                  className: (0, ws.A)({
                    hidden: this.state.isVideoReady,
                  }),
                },
                Xn.createElement(
                  "div",
                  {
                    className: "p-active_speaker__member_image_wrapper",
                  },
                  Xn.createElement(fr.Ay, {
                    className: (0, ws.A)({
                      "p-active_speaker__member_image--spinning": ce,
                    }),
                    size: 180,
                    userId: Be && Be.id,
                    isInteractive: !1,
                    tabIndex: -1,
                  }),
                  ce &&
                    Xn.createElement(
                      "div",
                      {
                        className:
                          "p-active_speaker__member_image__spinner_wrapper",
                      },
                      Xn.createElement(pr.A, {
                        color: "white",
                      })
                    )
                ),
                Xn.createElement(
                  "div",
                  {
                    className: "p-active_speaker__member_name",
                  },
                  Pe
                )
              );
            }
            isVideoEnabledAndReady() {
              const { isVideoEnabled: ce, isVideoEnabledAndReady: Pe } =
                this.props;
              return Pe ? Pe(ce) : !!(ce && this.state.isVideoReady);
            }
            render() {
              const { isVideoEnabled: ce } = this.props,
                Pe = (0, ws.A)("p-active_speaker", {
                  "p-active_speaker--video_enabled":
                    this.isVideoEnabledAndReady(),
                });
              return Xn.createElement(
                "div",
                {
                  "data-qa": "active-speaker",
                  className: Pe,
                },
                ce && this.renderVideo(),
                !this.isVideoEnabledAndReady() && this.renderImage()
              );
            }
            constructor(ce) {
              super(ce),
                (this.state = Cr),
                (this.onVideoReady = this.onVideoReady.bind(this));
            }
          },
          "ActiveSpeaker"
        );
        ga.displayName = "ActiveSpeaker";
        function Mr(me, ce) {
          const Pe = (0, pe.nv)(me, ce),
            Be = (0, mr.sE)(me, Pe);
          return {
            member: Pe,
            prefCompliantUserName: Be,
          };
        }
        _(Mr, "mapCommonMemberState");
        const Or = _((me, ce) => {
            const Pe = (0, kt.JZ)(me, ce.id),
              Be = Pe.isCameraEnabled,
              nt = Pe.isScreenshareEnabled,
              Xe = (0, kt.fy)(Pe) ? (0, Rt.WR)(me) : Pe.userId;
            return {
              tileId: ce.tileId,
              isVideoEnabled: Be || nt,
              isSpinning: Pe.isConnected === !1,
              ...Mr(me, Xe),
            };
          }, "active_speaker_mapStateToProps"),
          Dr = (0, oo.N)(Or)(ga);
        var Pr = e(1429018002);
        function $o() {
          return (
            ($o =
              Object.assign ||
              function (me) {
                for (var ce = 1; ce < arguments.length; ce++) {
                  var Pe = arguments[ce];
                  for (var Be in Pe)
                    Object.prototype.hasOwnProperty.call(Pe, Be) &&
                      (me[Be] = Pe[Be]);
                }
                return me;
              }),
            $o.apply(this, arguments)
          );
        }
        _($o, "with_free_willy_guest_draw_extends");
        const Aa = _(
          (me) =>
            _(
              class extends Xn.PureComponent {
                addEventListeners(Pe, Be, nt) {
                  Pe.current &&
                    (Pe.current.addEventListener("canplay", Be),
                    nt && Pe.current.addEventListener("resize", Be));
                }
                removeEventListeners(Pe, Be, nt) {
                  Pe.current &&
                    (Pe.current.removeEventListener("canplay", Be),
                    nt && Pe.current.removeEventListener("resize", Be));
                }
                render() {
                  return Xn.createElement(
                    me,
                    $o({}, this.props, {
                      addEventListeners: this.addEventListeners,
                      removeEventListeners: this.removeEventListeners,
                    })
                  );
                }
              },
              "WithFreeWillyGuestDraw"
            ),
          "withFreeWillyGuestDraw"
        );
        Aa.displayName = "withFreeWillyGuestDraw";
        const Sr = Aa;
        function Qo() {
          return (
            (Qo =
              Object.assign ||
              function (me) {
                for (var ce = 1; ce < arguments.length; ce++) {
                  var Pe = arguments[ce];
                  for (var Be in Pe)
                    Object.prototype.hasOwnProperty.call(Pe, Be) &&
                      (me[Be] = Pe[Be]);
                }
                return me;
              }),
            Qo.apply(this, arguments)
          );
        }
        _(Qo, "with_free_willy_active_speaker_extends");
        const Rr = Sr(pa),
          ya = _(
            (me) =>
              _(
                class extends Xn.PureComponent {
                  isVideoEnabledAndReady(Pe) {
                    return Pe;
                  }
                  renderVideo(Pe) {
                    const { id: Be, tileId: nt } = this.props;
                    if (!Be) {
                      (0, zo.M)("Cannot render video without a peer id");
                      return;
                    }
                    return Xn.createElement(
                      Rr,
                      {
                        isVideoReady: Pe,
                      },
                      Xn.createElement(Pr.A, {
                        id: Be,
                        tileId: nt,
                        shouldAttachStream: !0,
                        "data-qa": "free-willy-peer-video-element",
                      })
                    );
                  }
                  render() {
                    return Xn.createElement(
                      me,
                      Qo({}, this.props, {
                        renderVideo: this.renderVideo,
                        isVideoEnabledAndReady: this.isVideoEnabledAndReady,
                      })
                    );
                  }
                  constructor(Pe) {
                    super(Pe),
                      (this.isVideoEnabledAndReady =
                        this.isVideoEnabledAndReady.bind(this)),
                      (this.renderVideo = this.renderVideo.bind(this));
                  }
                },
                "WithFreeWillyActiveSpeaker"
              ),
            "withFreeWillyActiveSpeaker"
          );
        ya.displayName = "withFreeWillyActiveSpeaker";
        const Lr = ya;
        var br = e(6122756707),
          Ur = e(6084388622),
          Ta = e(1049642794),
          kr = e(5043394918);
        const Nr = new St.Ay("huddles"),
          Ia = _(() => {
            const me = (0, br.wA)(),
              ce = (0, Bs.d4)((Be) => !!(0, kt.WQ)(Be, "isMicrophoneEnabled")),
              Pe = (0, Xn.useCallback)(() => {
                me((0, Ta.A)(!ce));
              }, [ce, me]);
            return Xn.createElement(
              "div",
              {
                className: "p-huddle_screen_viewer__mic_button_container",
              },
              Xn.createElement(
                Ur.Ay,
                {
                  className: (0, ws.A)(
                    "p-huddle_screen_viewer__mic_button p-huddle_screen_viewer__mic_button--mute",
                    {
                      "p-huddle_screen_viewer__mic_button--active": ce,
                    }
                  ),
                  onClick: Pe,
                  type: "outline",
                  role: "switch",
                  size: "large",
                  "aria-label": Nr.t("Microphone"),
                  "aria-checked": ce,
                  disabled: !self,
                },
                Xn.createElement(kr.A, {
                  peerId: "self",
                  isMicrophoneEnabled: ce,
                  allowMuteIconAnimation: !0,
                })
              )
            );
          }, "HuddleScreenViewerMicButton");
        Ia.displayName = "HuddleScreenViewerMicButton";
        const Br = Ia,
          Wr = Lr(Dr),
          xr = new St.Ay("huddles");
        function Ca(me) {
          const { peerId: ce, isError: Pe } = me,
            Be = (0, Bs.d4)(kt.vz),
            nt = (0, Bs.d4)((Nn) => (ce ? (0, kt.JZ)(Nn, ce) : null));
          let Xe;
          if (Be) {
            var It, tt;
            Xe =
              nt != null && nt.isScreenshareEnabled
                ? nt == null ||
                  (It = nt.tileIds) === null ||
                  It === void 0 ||
                  (tt = It.screenshare) === null ||
                  tt === void 0
                  ? void 0
                  : tt.tileId
                : null;
          }
          const wt = Xn.createElement(
            "span",
            {
              className: "p-huddle_screen_viewer__error",
            },
            xr.t("The screen share has ended.")
          );
          return Xn.createElement(
            "div",
            {
              className: "p-huddle_screen_viewer__container",
            },
            ce &&
              !Pe &&
              Xn.createElement(Wr, {
                id: ce,
                tileId: Xe,
              }),
            Pe ? wt : Xn.createElement(Br, null)
          );
        }
        _(Ca, "HuddleScreenViewer"), (Ca.displayName = "HuddleScreenViewer");
        var Fr = e(4385664584),
          Kr = e(4675837085);
        const ys = {
            childWindow: void 0,
            childWindowToken: void 0,
            container: void 0,
            containerTileId: void 0,
          },
          Sl = null,
          Ma = new St.Ay("huddles"),
          wr = _((me) => {
            var ce;
            const Pe =
                me == null || (ce = me.document) === null || ce === void 0
                  ? void 0
                  : ce.querySelectorAll(".p-huddle_screen_viewer__container"),
              Be = Pe ? Pe.length : 0,
              nt = (0, ns.tZ)("SCREENSHARE-VIEWER-APP");
            Be > 1
              ? nt.info(
                  "Multiple containers rendered in viewing window. Shared stream may be hidden from view."
                )
              : nt.info(`${Be} containers rendered in viewing window.`);
          }, "logRenderedApplicationsCount"),
          Lo = _(() => {
            const { container: me, childWindow: ce } = ys;
            me &&
              (Ro.unmountComponentAtNode(me),
              (ys.containerTileId = void 0),
              (ys.container = void 0)),
              ce &&
                (ce.removeEventListener("beforeunload", Lo),
                ce.close(),
                (ys.childWindow = void 0),
                (ys.childWindowToken = void 0));
          }, "closeScreenShareWindow"),
          Hr = (0, c.Ay)(
            "Launch the window that renders screen share media",
            (function () {
              var me = (0, vo.coroutine)(function* (ce, Pe, Be) {
                var nt, Xe, It;
                const tt = Pe(),
                  wt = (0, s.Ay)({
                    state: tt,
                  }),
                  Nn =
                    Be != null && Be.screenSharePeerId
                      ? Be.screenSharePeerId
                      : (0, kt.vN)(tt);
                let qn = !1;
                const { container: Ts, containerTileId: Gt } = ys;
                Nn ||
                  (wt.warn(Ys.o7, "lastRemoteScreensharePeerId is not found"),
                  (qn = !0));
                const On = (0, kt.JZ)(tt, Nn || ""),
                  kn = On.userId ? (0, ut.I)(tt, On.userId) : "";
                let rs = Ma.t("Screen share");
                kn &&
                  (rs = Ma.t("{memberName} screen share", {
                    memberName: (0, St.nr)(kn),
                  }));
                const hs = {
                    ...ls.P,
                    backgroundColor: "black",
                    title: rs,
                    type: "huddle-call-screen-share",
                  },
                  ps = (0, l.getStateForClientStore)();
                (0, _s.Ak)(ps) ||
                  (wt.warn(Ys.o7, "no active huddle found"), (qn = !0));
                const ks =
                  (On == null ||
                  (nt = On.tileIds) === null ||
                  nt === void 0 ||
                  (Xe = nt.screenshare) === null ||
                  Xe === void 0
                    ? void 0
                    : Xe.tileId) || 0;
                (0, l.dispatchForClientStore)(
                  (0, Ln.cn)({
                    tileId: ks,
                  })
                ) ||
                  (wt.warn(Ys.o7, "video tile does not have stream"),
                  (qn = !0));
                const Zs = !ys.childWindow || ys.childWindow.closed;
                if (Zs && (0, h.y3)()) {
                  const { window: no, windowToken: Co } = yield (0, st.wK)(
                    "",
                    hs
                  );
                  (ys.childWindow = no), (ys.childWindowToken = Co);
                } else Zs && (ys.childWindow = window.open("", rs, "toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=780,height=480") || void 0);
                if (!ys.childWindow) {
                  wt.warn(
                    Ys.o7,
                    "No child window available. Exiting screen share window launch"
                  );
                  return;
                }
                const Vs = (0, vn.ZT)(tt);
                ys.childWindow.document &&
                  (ys.childWindow.document.body.style.background = "black");
                const To = {
                  windowRef: (0, Kr.O)(ys.childWindow),
                  windowToken: ys.childWindowToken,
                };
                if (
                  (Zs &&
                    (ys.childWindow.addEventListener("beforeunload", Lo),
                    window.addEventListener("beforeunload", Lo)),
                  !(Ts && Gt === ks) || Zs)
                ) {
                  ys.containerTileId = ks;
                  const no = (0, l.getStoreInstanceByTeamId)(Vs);
                  ys.container = yield (0, Hn.s)(
                    ys.childWindow,
                    Xn.createElement(
                      Fr.A,
                      {
                        store: no,
                      },
                      Xn.createElement(
                        vt.Mn.Provider,
                        {
                          value: To,
                        },
                        Xn.createElement(
                          Ks.A,
                          {
                            shouldStopHuddle: !0,
                          },
                          Xn.createElement(Ca, {
                            peerId: Nn,
                            isError: qn,
                          })
                        )
                      )
                    ),
                    {
                      useContainer: !0,
                    }
                  );
                }
                const Io =
                  (It = ys.childWindow) === null || It === void 0
                    ? void 0
                    : It.browserWindowId;
                Io
                  ? (0, T.hN0)(Io)
                  : (0, ha.A)(ys.childWindow.focus) && ys.childWindow.focus(),
                  wr(ys.childWindow);
              });
              return function (ce, Pe, Be) {
                return me.apply(this, arguments);
              };
            })()
          );
        Hr.meta = {
          name: "createThunk",
          key: "createThunklaunchScreenShareWindow",
          description: "Launch the window that renders screen share media",
        };
        var bo = e(9712681361),
          Vr = e(5761207079);
        const Oa = (0, c.Ay)(
          "alerts if a user joins the huddle and the current user has hidden that user",
          (me, ce, Pe) => {
            let { userId: Be } = Pe;
            const nt = ce();
            (0, Vr.a)(nt, Be) && me((0, zs.Iw)(zs.vT.HiddenUserJoinedHuddle));
          }
        );
        Oa.meta = {
          name: "createThunk",
          key: "createThunkmaybeAlertHiddenUserJoinedHuddle",
          description:
            "alerts if a user joins the huddle and the current user has hidden that user",
        };
        var Ps = e(462591818),
          Da = e(9640070512),
          Pa = e(2527782504),
          Sa = e(5954792826),
          bs = e(700984029),
          Uo = e(1829947126),
          jr = e(9009528296),
          Gr = e(1289024643),
          Eo = e(9853754481),
          Ra = e(9372409576);
        const La = (0, c.Ay)(
          "Send call analytics to the server",
          (me, ce, Pe) => {
            const Be = ce().activeCall;
            let nt;
            if (
              (Pe && Pe.callId ? (nt = Pe.callId) : Be && Be.id && (nt = Be.id),
              !nt)
            ) {
              (0, zo.M)(
                "There should be an active call in progress in order to send analytics."
              );
              return;
            }
            const Xe = zr(new Ra.$.calls.analytics.Report(Pe.stats), ce()),
              It = Ra.$.calls.analytics.Report.encode(Xe).finish(),
              tt = String.fromCharCode(...It);
            return me(
              (0, Qt.apiCall)({
                method: "screenhero.rooms.postAnalytics",
                args: {
                  room: nt,
                  analytics: btoa(tt),
                },
                reason: "calls-analytics",
              })
            );
          }
        );
        La.meta = {
          name: "createThunk",
          key: "createThunksendAnalytics",
          description: "Send call analytics to the server",
        };
        function zr(me, ce) {
          const Pe = me;
          return (
            (Pe.recv = me.recv.map((Be) => {
              if (Be.peerId) {
                const nt = (0, kt.C1)(ce, Be.peerId);
                if (nt) {
                  const Xe = Be;
                  Xe.userId = nt.userId;
                }
              }
              if (Be.peerIdString) {
                const nt = (0, kt.C1)(ce, Be.peerIdString);
                if (nt) {
                  const Xe = Be;
                  Xe.userId = nt.userId;
                }
              }
              return Be;
            })),
            (Pe.recv = Pe.recv.filter((Be) => !!Be.userId)),
            me
          );
        }
        _(zr, "mapPeerIdsToUserIds");
        var Yr = e(5046160032),
          ba = e(8445020572),
          $r = e(4914127094),
          Xo = e(8935621861),
          fo = e(415910655);
        const Qr = (0, s.Wo)({
            label: "SEND-MEETING-EVENTS-LOGGER",
          }),
          Ua = "screenhero.rooms.proxyMeetingEvents",
          ka = (0, c.Ay)(
            "Send meeting events to the server",
            (function () {
              var me = (0, vo.coroutine)(function* (ce, Pe, Be) {
                let nt;
                try {
                  nt = JSON.stringify(Be.events);
                } catch (wt) {
                  Qr.error(wt.message);
                  return;
                }
                const { metrics: Xe, teamId: It } = Xr();
                if (Be.isUnloading) {
                  const wt = {
                    app: Be.app,
                    meeting_id: Be.meetingId,
                    media_region: Be.mediaRegion,
                    attendee_id: Be.attendeeId,
                    call_id: Be.callId,
                    ua: window.navigator.userAgent,
                    event_type: "calls-chime-events",
                    encoding: "none",
                    events: nt,
                    preferred_media_region:
                      yield Xo.A.getInstance().getNearestChimeMediaRegion(It),
                    audio_connected_time:
                      (Xe == null ? void 0 : Xe.audioConnectedTime) || 0,
                    first_presence_time:
                      (Xe == null ? void 0 : Xe.firstPresenceTime) || 0,
                    rooms_join_time:
                      (Xe == null ? void 0 : Xe.roomsJoinTime) || 0,
                    sdk_initialized_time:
                      (Xe == null ? void 0 : Xe.sdkInitializedTime) || 0,
                    chime_attendee_presence_time: Be.attendeePresenceDuration
                      ? Be.attendeePresenceDuration
                      : (Xe == null ? void 0 : Xe.attendeePresenceDuration) ||
                        0,
                    chime_meeting_start_time: Be.meetingStartDuration
                      ? Be.meetingStartDuration
                      : (Xe == null ? void 0 : Xe.meetingStartDuration) || 0,
                    chime_signaling_open_time: Be.signalingOpenDuration
                      ? Be.signalingOpenDuration
                      : (Xe == null ? void 0 : Xe.signalingOpenDuration) || 0,
                    chime_ice_gathering_time: Be.iceGatheringDuration
                      ? Be.iceGatheringDuration
                      : (Xe == null ? void 0 : Xe.iceGatheringDuration) || 0,
                    voice_focus_init_time:
                      (Xe == null ? void 0 : Xe.voiceFocusInitializedTime) || 0,
                    creds_to_voice_focus_init_time:
                      (Xe == null
                        ? void 0
                        : Xe.credentialsToVoiceFocusInitializedTime) || 0,
                  };
                  return (0, Yr.A)({
                    apiUrl: "/api/",
                    method: Ua,
                    token: (0, $r.F)(Pe()),
                    versionTs: (0, ba.HF)(),
                    versionUid: (0, ba.X3)(),
                    args: wt,
                  })
                    ? Qe.S.resolve()
                    : Qe.S.reject(
                        new Error("sendMeetingEvents: beacon failed")
                      );
                }
                const tt = Be.isEnding
                  ? {
                      app: Be.app,
                      meeting_id: Be.meetingId,
                      media_region: Be.mediaRegion,
                      attendee_id: Be.attendeeId,
                      events: nt,
                      call_id: Be.callId,
                      preferred_media_region:
                        yield Xo.A.getInstance().getNearestChimeMediaRegion(It),
                      audio_connected_time:
                        (Xe == null ? void 0 : Xe.audioConnectedTime) || 0,
                      first_presence_time:
                        (Xe == null ? void 0 : Xe.firstPresenceTime) || 0,
                      rooms_join_time:
                        (Xe == null ? void 0 : Xe.roomsJoinTime) || 0,
                      sdk_initialized_time:
                        (Xe == null ? void 0 : Xe.sdkInitializedTime) || 0,
                      chime_attendee_presence_time: Be.attendeePresenceDuration
                        ? Be.attendeePresenceDuration
                        : (Xe == null ? void 0 : Xe.attendeePresenceDuration) ||
                          0,
                      chime_meeting_start_time: Be.meetingStartDuration
                        ? Be.meetingStartDuration
                        : (Xe == null ? void 0 : Xe.meetingStartDuration) || 0,
                      chime_signaling_open_time: Be.signalingOpenDuration
                        ? Be.signalingOpenDuration
                        : (Xe == null ? void 0 : Xe.signalingOpenDuration) || 0,
                      chime_ice_gathering_time: Be.iceGatheringDuration
                        ? Be.iceGatheringDuration
                        : (Xe == null ? void 0 : Xe.iceGatheringDuration) || 0,
                      voice_focus_init_time:
                        (Xe == null ? void 0 : Xe.voiceFocusInitializedTime) ||
                        0,
                      creds_to_voice_focus_init_time:
                        (Xe == null
                          ? void 0
                          : Xe.credentialsToVoiceFocusInitializedTime) || 0,
                    }
                  : {
                      app: Be.app,
                      meeting_id: Be.meetingId,
                      media_region: Be.mediaRegion,
                      attendee_id: Be.attendeeId,
                      events: nt,
                      call_id: Be.callId,
                    };
                return ce(
                  (0, Qt.apiCall)({
                    method: Ua,
                    args: tt,
                    reason: "calls-chime-events",
                  })
                );
              });
              return function (ce, Pe, Be) {
                return me.apply(this, arguments);
              };
            })()
          );
        ka.meta = {
          name: "createThunk",
          key: "createThunksendMeetingEvents",
          description: "Send meeting events to the server",
        };
        function Xr() {
          const me = (0, l.getStateForClientStore)(),
            { teamId: ce } = (0, _s.Qn)(me) || {};
          return {
            metrics: (0, fo.s2)(),
            teamId: ce,
          };
        }
        _(Xr, "getCallMetricsAndTeamId");
        const Jr = (0, s.Wo)({
            label: "HANDLE-MEETING-EVENTS-LOGGER",
          }),
          Na = (0, c.Ay)("Handle Chime meeting events", (me, ce, Pe) => {
            let {
              events: Be,
              callId: nt,
              meetingId: Xe,
              mediaRegion: It,
              attendeeId: tt,
              isUnloading: wt,
              isEnding: Nn,
            } = Pe;
            const qn = Zr(Be);
            !(0, zt.A)(qn) && !wt && !Nn && (0, fo.jm)(qn),
              me(
                ka({
                  events: Be,
                  app: "huddles",
                  callId: nt,
                  meetingId: Xe,
                  mediaRegion: It,
                  attendeeId: tt,
                  isUnloading: wt,
                  isEnding: Nn,
                  attendeePresenceDuration: qn.attendeePresenceDuration,
                  signalingOpenDuration: qn.signalingOpenDuration,
                  iceGatheringDuration: qn.iceGatheringDuration,
                  meetingStartDuration: qn.meetingStartDuration,
                })
              );
          });
        Na.meta = {
          name: "createThunk",
          key: "createThunkhandleMeetingEvents",
          description: "Handle Chime meeting events",
        };
        function Zr(me) {
          const ce = {};
          return (
            me.forEach((Pe) => {
              let { message: Be } = Pe;
              try {
                const wt = JSON.parse(Be);
                switch (wt.name) {
                  case "attendeePresenceReceived":
                    var nt;
                    ce.attendeePresenceDuration =
                      (nt = wt.attributes) === null || nt === void 0
                        ? void 0
                        : nt.attendeePresenceDurationMs;
                    break;
                  case "meetingStartSucceeded":
                    var Xe, It, tt;
                    (ce.signalingOpenDuration =
                      (Xe = wt.attributes) === null || Xe === void 0
                        ? void 0
                        : Xe.signalingOpenDurationMs),
                      (ce.iceGatheringDuration =
                        (It = wt.attributes) === null || It === void 0
                          ? void 0
                          : It.iceGatheringDurationMs),
                      (ce.meetingStartDuration =
                        (tt = wt.attributes) === null || tt === void 0
                          ? void 0
                          : tt.meetingStartDurationMs);
                    break;
                  default:
                    break;
                }
              } catch (wt) {
                Jr.error("Invalid JSON in meeting event", wt);
              }
            }),
            ce
          );
        }
        _(Zr, "parseMeetingEventMetrics");
        const qr = Na;
        var Hs = e(6758774099),
          ei = e(4988306802);
        const Ba = (0, c.Ay)("Process AWS transcript event", (me, ce, Pe) => {
          var Be;
          if ((0, Gs.VW)(Pe)) return;
          const nt = Pe.results[0];
          if (!(nt != null && nt.resultId) || !(0, ei.TP)(ce())) return;
          const Xe =
            (Be = nt.alternatives[0]) === null || Be === void 0
              ? void 0
              : Be.items;
          if (!(Xe != null && Xe.length)) {
            me(
              (0, Hs.h2)({
                resultId: nt.resultId,
                transcriptions: [],
              })
            );
            return;
          }
          const It = [];
          Xe.forEach((tt) => {
            var wt;
            const Nn = It[It.length - 1],
              qn = (0, Sa.l)(
                (wt = tt.attendee) === null || wt === void 0
                  ? void 0
                  : wt.externalUserId
              );
            qn &&
              (tt.type === Gs.E9.PUNCTUATION
                ? Nn &&
                  ((Nn.content = `${Nn.content}${tt.content}`),
                  (Nn.endTimeMs = tt.endTimeMs))
                : It.push({
                    memberId: qn,
                    timestampMs: tt.startTimeMs,
                    endTimeMs: tt.endTimeMs || Date.now(),
                    content: tt.content,
                  }));
          }),
            me(
              (0, Hs.h2)({
                resultId: nt.resultId,
                transcriptions: It,
              })
            );
        });
        Ba.meta = {
          name: "createThunk",
          key: "createThunkprocessAwsTranscription",
          description: "Process AWS transcript event",
        };
        const ti = Ba;
        var eo = e(8783285437),
          ni = e(6155974509);
        const Wa = (0, c.Ay)(
          "Maybe disable the screen share",
          (function () {
            var me = (0, vo.coroutine)(function* (ce, Pe) {
              const Be = (0, ns.tZ)("CALLS-REDUX");
              Pe().peers.self.isScreenshareEnabled &&
                (Be.info("Attempted to turn off screen sharing"),
                ce(
                  (0, kt.kT)({
                    id: "self",
                    isScreenshareEnabled: !1,
                    selectedScreenId: void 0,
                  })
                )),
                (0, ni.a)();
            });
            return function (ce, Pe) {
              return me.apply(this, arguments);
            };
          })()
        );
        Wa.meta = {
          name: "createThunk",
          key: "createThunkdisableScreenShareIfEnabled",
          description: "Maybe disable the screen share",
        };
        var to = e(9190452268),
          Os = e(9680914051),
          $s = e(1990810649),
          xa = e(5145584581),
          si = e(9365970888),
          ko = e(7592559649),
          Jo = e(6251210828),
          Fa = e(7439555287),
          oi = e(6470070112);
        let ai = _(
          class {
            onPeerMuted(ce, Pe) {
              this.dispatch(
                (0, kt.kT)({
                  id: ce,
                  isMicrophoneEnabled: !Pe,
                })
              );
            }
            onPeerJoined(ce, Pe) {
              if ((this.maybeRecordFirstPresenceTime(), Pe && ce)) {
                this.dispatch(
                  (0, kt.Uu)({
                    id: ce,
                    userId: Pe,
                    isMicrophoneEnabled: !0,
                  })
                ),
                  this.dispatch(ho());
                const Be = (0, kt.Ng)(this.store.getState());
                (0, l.dispatchForClientStore)(
                  (0, Nt.Rr)({
                    isDrawEnabled: Be.isDrawEnabled || !1,
                  })
                ),
                  this.dispatch(
                    (0, Hs.U$)({
                      type: eo.v.JOIN,
                      memberId: Pe,
                      timestampMs: Date.now(),
                    })
                  ),
                  this.maybeRemoveUserAsPending(Pe),
                  this.dispatch(
                    Oa({
                      userId: Pe,
                    })
                  );
              }
            }
            onPeerLeft(ce) {
              var Pe;
              const Be =
                (Pe = (0, kt.jB)(this.store.getState(), ce)) === null ||
                Pe === void 0
                  ? void 0
                  : Pe.userId;
              Be &&
                (this.callLogger.info(
                  `Peer left the huddle. userId=${Be} peerId=${ce}`
                ),
                this.dispatch(
                  (0, Hs.U$)({
                    type: eo.v.LEAVE,
                    memberId: Be,
                    timestampMs: Date.now(),
                  })
                )),
                this.dispatch((0, kt.xx)(ce)),
                this.dispatch(ho());
            }
            onSelfJoined() {
              const ce = this.recordTiming(Os.qK);
              this.maybeRecordFirstPresenceTime(),
                this.dispatch(Po(ce)),
                (0, l.dispatchForClientStore)((0, Nt.wr)());
            }
            onSelfLeft() {
              this.dispatch((0, zs.LL)(Gn.vT.HiddenUserJoinedHuddle));
            }
            onNewActiveSpeaker(ce) {
              this.dispatch((0, kt.FX)(ce));
            }
            onPeerReacji(ce, Pe, Be, nt) {
              var Xe;
              this.dispatch(
                (0, kt._x)({
                  peerId: ce,
                  emoji: Pe,
                  isEmoji: Be,
                  reactionType: nt,
                })
              );
              const It =
                (Xe = (0, kt.jB)(this.store.getState(), ce)) === null ||
                Xe === void 0
                  ? void 0
                  : Xe.userId;
              It &&
                this.dispatch(
                  (0, Hs.U$)({
                    type: eo.v.SEND_REACTION,
                    memberId: It,
                    timestampMs: Date.now(),
                    emoji: Pe,
                  })
                );
            }
            onPeerMuteRequest(ce, Pe) {
              Pe === this.selfAttendeeId &&
                (this.dispatch((0, Ta.A)(!1)),
                this.dispatch(
                  (0, Gn.CE)({
                    alert: Gn.vT.PeerMuteRequest,
                    peerId: ce,
                  })
                ),
                this.callLogger.info(
                  `Peer muted self microphone : peerId:${ce}`
                ));
            }
            onError(ce, Pe) {
              let Be;
              Pe === Gs.b9[Gs.b9.AudioJoinedFromAnotherDevice]
                ? (Be = bo.M6.AudioJoinedFromAnotherDevice)
                : Pe === Gs.b9[Gs.b9.MeetingEnded] &&
                  (Be = (0, oi.ew)((0, Fa.KA)().getState())
                    ? bo.M6.ChimeMeetingEndedFromTimeLimit
                    : bo.M6.ChimeMeetingEnded),
                this.dispatch(
                  (0, ma.A)({
                    terminalState: Be || ce,
                  })
                ),
                this.callLogger.info(
                  `tearDown executed: terminalState: ${ce}, statusCodeName: ${Pe} tearDownState: ${Be}`
                );
            }
            onClogError(ce) {}
            onMeetingSessionInitialized() {
              this.recordTiming(Os.W_);
              const ce = (0, to.Cy)({
                  state: this.store.getState(),
                }),
                Pe = ce.measure(Os.Bq, Os.CY);
              ce.count(Os.CY, Pe),
                (0, fo.jm)({
                  sdkInitializedTime: Pe,
                });
            }
            onSelfPermissionUpdated(ce, Pe) {
              this.callLogger.info(
                `Received permission update from type:${Pe}, isDenied: ${ce}`
              );
              let Be;
              (0, h.y3)()
                ? (Be =
                    Pe === Ms.lW.Microphone
                      ? Gn.vT.NoSystemAudio
                      : Gn.vT.NoSystemVideo)
                : (Be =
                    Pe === Ms.lW.Microphone
                      ? Gn.vT.NoBrowserAudioPermission
                      : Gn.vT.NoBrowserVideoPermission),
                ce
                  ? this.dispatch(
                      (0, Gn.CE)({
                        alert: Be,
                      })
                    )
                  : this.dispatch((0, Gn.Gu)(Be));
            }
            onSelfVideoTileUpdate(ce) {
              if (!ce.tileId) return;
              const Pe = (0, kt.Ng)(this.getState());
              if (!ce.isContent && !Pe.isCameraEnabled) return;
              if (!(0, kt.vz)(this.getState()))
                this.dispatch(
                  (0, Hs.U$)({
                    type: eo.v.SCREENSHARE_START,
                    memberId: (0, Rt.WR)(this.getState()),
                    timestampMs: Date.now(),
                  })
                ),
                  this.dispatch(
                    (0, kt.kT)({
                      id: "self",
                      tileId: ce.tileId,
                      isScreenshareEnabled: !!ce.isContent,
                    })
                  );
              else if (ce.isContent) {
                var nt, Xe;
                this.dispatch(
                  (0, Hs.U$)({
                    type: eo.v.SCREENSHARE_START,
                    memberId: (0, Rt.WR)(this.getState()),
                    timestampMs: Date.now(),
                  })
                );
                const It = (0, kt.JC)(this.getState());
                ((nt = Pe.tileIds) === null ||
                nt === void 0 ||
                (Xe = nt.screenshare) === null ||
                Xe === void 0
                  ? void 0
                  : Xe.tileId) !== ce.tileId &&
                  It !== $s.cM.Screenshare &&
                  this.dispatch(
                    (0, xa.x)({
                      peerId: "self",
                      contentViewType: $s.cM.None,
                      contentViewConfig: {},
                    })
                  ),
                  this.dispatch(
                    (0, kt.kT)({
                      id: "self",
                      tileId: ce.tileId,
                      isScreenshareEnabled: !!ce.isContent,
                    })
                  );
              } else
                this.dispatch(
                  (0, kt.kT)({
                    id: "self",
                    tileId: ce.tileId,
                    isCameraEnabled: !0,
                  })
                );
            }
            onPeerVideoTileUpdate(ce, Pe) {
              if (!Pe.tileId) return;
              const Be =
                Pe.boundExternalUserId && (0, Sa.l)(Pe.boundExternalUserId);
              Pe.isContent &&
                Be &&
                (this.callLogger.info(`Peer screenshare started: userId=${Be}`),
                this.dispatch(
                  (0, Hs.U$)({
                    type: eo.v.SCREENSHARE_START,
                    memberId: Be,
                    timestampMs: Date.now(),
                  })
                )),
                this.dispatch(
                  (0, kt.BD)({
                    id: ce,
                    tileId: Pe.tileId,
                    isContent: Pe.isContent,
                    isPaused: Pe.paused,
                  })
                );
            }
            onVideoTileRemoved(ce) {
              var Pe, Be;
              const nt = this.store.getState(),
                Xe = (0, kt.v2)(nt, ce);
              Xe &&
                (this.callLogger.info(`Peer screenshare stopped: userId=${Xe}`),
                this.dispatch(
                  (0, Hs.U$)({
                    type: eo.v.SCREENSHARE_STOP,
                    memberId: Xe,
                    timestampMs: Date.now(),
                  })
                )),
                this.dispatch(
                  (0, kt.Qr)({
                    tileId: ce,
                  })
                ),
                Lo();
              const It = (0, kt.Ng)(nt);
              ((Pe = It.tileIds) === null ||
              Pe === void 0 ||
              (Be = Pe.screenshare) === null ||
              Be === void 0
                ? void 0
                : Be.tileId) === ce &&
                It.contentViewType === $s.cM.Screenshare &&
                this.dispatch(
                  (0, xa.x)({
                    peerId: "self",
                    contentViewType: $s.cM.None,
                    contentViewConfig: {},
                  })
                );
            }
            onVideoTileWillPause(ce) {
              this.dispatch(
                (0, kt.K3)({
                  tileId: ce,
                })
              );
            }
            onVideoTileWillUnpause(ce) {
              this.dispatch(
                (0, kt.XS)({
                  tileId: ce,
                })
              );
            }
            onDeviceAccessApproved(ce) {
              switch (ce) {
                case Ps.mT.MICROPHONE: {
                  (0, h.y3)()
                    ? (this.dispatch((0, Gn.Gu)(Gn.vT.NoSystemAudio)),
                      this.dispatch((0, bs.er)()))
                    : (this.dispatch(
                        (0, Gn.Gu)(Gn.vT.NoBrowserAudioPermission)
                      ),
                      this.dispatch((0, bs.ZY)()));
                  break;
                }
                case Ps.mT.CAMERA: {
                  (0, h.y3)()
                    ? (this.dispatch((0, Gn.Gu)(Gn.vT.NoSystemVideo)),
                      this.dispatch((0, bs.NH)()))
                    : (this.dispatch(
                        (0, Gn.Gu)(Gn.vT.NoBrowserVideoPermission)
                      ),
                      this.dispatch((0, bs.in)()));
                  break;
                }
                default:
              }
            }
            onCheckSystemMediaAccess(ce) {
              switch (ce) {
                case Ps.mT.MICROPHONE: {
                  this.dispatch((0, bs.tG)()),
                    this.dispatch(
                      (0, Gn.CE)({
                        alert: Gn.vT.NoSystemAudio,
                      })
                    );
                  break;
                }
                case Ps.mT.CAMERA: {
                  this.dispatch((0, bs.Yr)()),
                    this.dispatch(
                      (0, Gn.CE)({
                        alert: Gn.vT.NoSystemVideo,
                      })
                    );
                  break;
                }
                case Ps.mT.SCREEN: {
                  this.dispatch((0, bs.J3)()),
                    this.dispatch(
                      (0, Gn.CE)({
                        alert: Gn.vT.NoSystemScreenShare,
                      })
                    );
                  break;
                }
                default:
              }
            }
            onBrowserMediaDeviceAccessDenied(ce) {
              switch (
                (this.callLogger.error(`Self ${ce} device access denied`), ce)
              ) {
                case Ps.mT.MICROPHONE: {
                  this.dispatch((0, bs.cH)()),
                    this.dispatch(
                      (0, Gn.CE)({
                        alert: Gn.vT.NoBrowserAudioPermission,
                      })
                    );
                  break;
                }
                case Ps.mT.CAMERA: {
                  this.dispatch((0, bs.px)()),
                    this.dispatch(
                      (0, Gn.CE)({
                        alert: Gn.vT.NoBrowserVideoPermission,
                      })
                    );
                  break;
                }
                default:
              }
            }
            onStartSessionTimeout() {}
            onSetNoMediaInput(ce) {
              switch (ce) {
                case Ps.mT.MICROPHONE: {
                  this.dispatch(
                    (0, Gn.CE)({
                      alert: Gn.vT.NoUserAudioStream,
                    })
                  );
                  break;
                }
                case Ps.mT.CAMERA: {
                  const Pe = (0, si.ly)(this.getState());
                  if (
                    ((0, l.dispatchForClientStore)(
                      (0, Nt.WM)({
                        setVideoEnabled: !1,
                      })
                    ),
                    !(0, h.y3)() && Pe)
                  )
                    break;
                  this.dispatch(
                    (0, Gn.CE)({
                      alert: Gn.vT.NoUserVideoStream,
                    })
                  );
                  break;
                }
                default:
              }
            }
            onClearNoMediaInput(ce) {
              switch (ce) {
                case Ps.mT.MICROPHONE: {
                  this.dispatch((0, Gn.Gu)(Gn.vT.NoUserAudioStream));
                  break;
                }
                case Ps.mT.CAMERA: {
                  this.dispatch((0, Gn.Gu)(Gn.vT.NoUserVideoStream));
                  break;
                }
                default:
              }
            }
            onSetNoAudioOutput(ce) {
              switch (ce) {
                case Ps.NS.AUDIO_ELEMENT_ERROR: {
                  this.dispatch(
                    (0, Gn.CE)({
                      alert: Gn.vT.NoAudioOutputAudioElementError,
                    })
                  );
                  break;
                }
                case Ps.NS.AUDIO_LEVEL_ERROR: {
                  this.dispatch(
                    (0, Gn.CE)({
                      alert: Gn.vT.NoAudioOutputAudioLevelError,
                    })
                  );
                  break;
                }
                default:
              }
            }
            onClearNoAudioOutput(ce) {
              switch (ce) {
                case Ps.NS.AUDIO_ELEMENT_ERROR: {
                  this.dispatch(
                    (0, Gn.Gu)(Gn.vT.NoAudioOutputAudioElementError)
                  );
                  break;
                }
                case Ps.NS.AUDIO_LEVEL_ERROR: {
                  this.dispatch((0, Gn.Gu)(Gn.vT.NoAudioOutputAudioLevelError));
                  break;
                }
                default:
              }
            }
            onSelfConnected() {
              this.callLogger.info("Self connected to chime media server"),
                this.dispatch(
                  (0, kt.kT)({
                    id: "self",
                    isConnected: !0,
                    noInternet: !1,
                  })
                );
            }
            onSelfDisconnected() {
              this.callLogger.info("Self disconnected from chime media server"),
                this.dispatch(
                  (0, kt.kT)({
                    id: "self",
                    isConnected: !1,
                  })
                ),
                Ls.A.publish({
                  type: Rs.lx.NetworkDisconnect,
                  update: {
                    peerId: "self",
                  },
                });
            }
            onSelfConnectionQualityChanged(ce, Pe) {
              this.callLogger.info(`${ce} audio packet loss changed to: ${Pe}`);
            }
            onPeerConnected(ce) {
              this.callLogger.info(
                `peer connnected to chime media server ${ce}`
              ),
                this.dispatch(
                  (0, kt.E3)({
                    id: ce,
                    isConnected: !0,
                  })
                );
            }
            onPeerDisconnected(ce) {
              this.callLogger.info(
                `peer disconnected from chime media server ${ce}`
              ),
                this.dispatch(
                  (0, kt.E3)({
                    id: ce,
                    isConnected: !1,
                  })
                );
            }
            onPeerConnectionQualityChanged(ce, Pe, Be) {}
            onSelfMediaStreamChanged(ce) {}
            onNewPeerMediaStream(ce, Pe) {}
            onScreenThumbnails(ce) {}
            onUpdatedSelfAudioLevel(ce) {
              Uo.A.publish("self", ce / Eo.Ep), jr.A.publish(ce / Eo.Ep);
              const Pe = this.store.getState();
              (0, ms.Eg)(Pe) && Uo.A.publishAll("self", ce / Eo.Ep);
            }
            onUpdatedPeerAudioLevels(ce) {
              const Pe = this.store.getState();
              Object.entries(ce).forEach((nt) => {
                let [Xe, It] = nt;
                Uo.A.publish(Xe, It / Eo.Ep);
              }),
                (0, ms.Eg)(Pe) &&
                  Object.entries(ce).forEach((nt) => {
                    let [Xe, It] = nt;
                    Uo.A.publishAll(Xe, It / Eo.Ep);
                  });
            }
            onPeerCameraActive(ce, Pe) {
              const Be = ce === "self";
              this.callLogger.info(
                `${Be ? "Self" : `Peer (${ce})`} camera turned ${
                  Pe ? "on" : "off"
                }`
              ),
                this.dispatch(
                  (0, kt.kT)({
                    id: ce,
                    isCameraEnabled: Pe,
                  })
                );
            }
            onPeerScreenShareActive(ce, Pe) {
              const Be = ce === "self";
              this.callLogger.info(
                `${Be ? "Self" : `Peer (${ce})`} screenshare ${
                  Pe ? "started" : "stopped"
                }`
              );
            }
            onPeerDrawMessage(ce, Pe) {
              lo.A.publish({
                id: ce,
                ...Pe,
              });
            }
            onPeerDrawEnabled(ce, Pe) {
              this.dispatch(
                (0, kt.kT)({
                  id: ce,
                  isDrawEnabled: Pe,
                })
              );
            }
            onMediaStats(ce, Pe) {
              this.dispatch(
                La({
                  stats: ce,
                  callId: Pe,
                })
              );
            }
            onAppMetrics(ce) {
              let {
                appMetrics: Pe,
                clientMetricReport: Be,
                screenshareRtcStats: nt,
              } = ce;
              const Xe = (0, _a.Ay)({
                state: this.getState(),
                appMetrics: Pe,
              });
              Ls.A.publish({
                type: Rs.lx.AppMetrics,
                update: {
                  huddleStateSnapshot: Xe,
                  clientMetricReport: Be,
                  screenshareRtcStats: nt,
                },
              });
            }
            onDevicesUpdated(ce) {
              this.dispatch((0, bs.Fb)(ce));
            }
            onOutputDeviceChanged(ce) {
              this.callLogger.info(
                `Self audio output device changed: device: ${ce.id}`
              ),
                this.dispatch((0, bs.AS)(ce));
            }
            onDeviceTypeBlocked(ce) {}
            onTokenRefreshRequest() {}
            onScreenShareStopped() {
              this.dispatch(Wa());
              const Pe = (0, l.getClientStoreInstance)().getState(),
                Be = (0, _s.Ak)(Pe);
              !Be ||
                (0, zt.A)(Be) ||
                Be.huddleState === bo.RJ.ENDING ||
                this.dispatch(
                  (0, Da.H)({
                    focusKey: Pa.Ay.HUDDLE_SIDEBAR_FOOTER,
                  })
                );
            }
            onScreenShareStarted() {
              this.callLogger.info("Self screenshare started"),
                this.dispatch(
                  (0, Da.H)({
                    focusKey: Pa.Ay.HUDDLE_SIDEBAR_FOOTER,
                  })
                );
            }
            onSetNoOrLowInputAudioLevel() {
              Ls.A.publish({
                type: Rs.lx.NoAudio,
                update: {
                  direction: "send",
                  noAudio: !0,
                },
              });
            }
            onClearNoOrLowInputAudioLevel() {
              Ls.A.publish({
                type: Rs.lx.NoAudio,
                update: {
                  direction: "send",
                  noAudio: !1,
                },
              });
            }
            onSetNoOrLowOutputAudioLevel() {
              Ls.A.publish({
                type: Rs.lx.NoAudio,
                update: {
                  direction: "recv",
                  noAudio: !0,
                },
              });
            }
            onClearNoOrLowOutputAudioLevel() {
              Ls.A.publish({
                type: Rs.lx.NoAudio,
                update: {
                  direction: "recv",
                  noAudio: !1,
                },
              });
            }
            onAudioVideoDidStartConnecting() {
              this.recordTiming(Os.dk);
            }
            onStart() {
              this.recordTiming(Os.Nh);
            }
            onAudioVideoDidStart() {
              this.recordTiming(Os.ck),
                (0, l.dispatchForClientStore)((0, Nt._U)(Date.now()));
            }
            onAudioVideoDidStop() {
              const ce = (0, l.getClientStoreInstance)(),
                Pe = (0, _s.cN)(ce == null ? void 0 : ce.getState()),
                Be = Date.now(),
                nt = Be - Pe;
              (0, l.dispatchForClientStore)((0, Nt.bV)(Be)),
                (0, l.dispatchForClientStore)((0, Nt.qr)(nt));
            }
            onMaxTileSizeUpdated(ce) {
              this.dispatch((0, kt.l$)(ce));
            }
            onInit() {
              this.recordTiming(Os.cP);
            }
            onVoiceFocusLoaded() {
              const ce = (0, to.Cy)({
                  state: this.store.getState(),
                }),
                Pe = ce.measure(Os.aN, Os.pz);
              ce.count(Os.pz, Pe), this.recordTiming(Os.qb);
            }
            onVoiceFocusStartLoading() {
              (0, to.Cy)({
                state: this.store.getState(),
              }).mark(Os.aN);
            }
            recordTiming(ce) {
              const Pe = (0, to.Cy)({
                  state: this.store.getState(),
                }),
                Be = Pe.measure(Os.qr, ce);
              return Pe.count(ce, Be), Be;
            }
            onMeetingEvents(ce, Pe, Be, nt, Xe, It, tt) {
              this.dispatch(
                qr({
                  events: Xe,
                  callId: nt,
                  meetingId: ce,
                  mediaRegion: Pe,
                  attendeeId: Be,
                  isUnloading: It,
                  isEnding: tt,
                })
              );
            }
            onMaybeVoiceFocusInitialized(ce) {
              const Be = (0, to.Cy)({
                state: this.store.getState(),
              }).measure(Os.Bq, Os.bv);
              (0, fo.jm)({
                voiceFocusInitializedTime: ce,
                credentialsToVoiceFocusInitializedTime: Be,
              });
            }
            onScreenShareError(ce) {
              switch (
                (this.callLogger.error(
                  `an error occurred while initiating a screenshare: type: ${ce}`
                ),
                ce)
              ) {
                case Ps.lD.NOT_FOUND_ERROR: {
                  this.dispatch(
                    (0, Gn.CE)({
                      alert: Gn.vT.SSNotFoundError,
                    })
                  );
                  break;
                }
                case Ps.lD.NOT_READABLE_ERROR: {
                  this.dispatch(
                    (0, Gn.CE)({
                      alert: Gn.vT.SSNotReadableError,
                    })
                  );
                  break;
                }
                case Ps.lD.ERROR: {
                  this.dispatch(
                    (0, Gn.CE)({
                      alert: Gn.vT.ScreenShareError,
                    })
                  );
                  break;
                }
                default:
                  break;
              }
            }
            onNoiseSuppressionCPUThrottled() {
              this.dispatch(
                (0, Gn.CE)({
                  alert: Gn.vT.NoiseSuppressionCPUThrottled,
                })
              );
            }
            onTranscriptionEvent(ce) {
              this.dispatch(ti(ce));
            }
            setSelfAttendeeId(ce) {
              this.selfAttendeeId = ce;
            }
            maybeRecordFirstPresenceTime() {
              this.firstPresenceTimeMs > 0 ||
                ((this.firstPresenceTimeMs = this.recordTiming(Os.dP)),
                (0, fo.jm)({
                  firstPresenceTime: this.firstPresenceTimeMs,
                }));
            }
            onAudioInputTrackMuted() {
              this.dispatch(
                (0, Gn.CE)({
                  alert: Gn.vT.AudioInputTrackMuted,
                })
              );
            }
            onAudioInputTrackUnMuted() {
              this.dispatch((0, Gn.Gu)(Gn.vT.AudioInputTrackMuted));
            }
            onJukeboxRequest(ce) {
              if (!(0, ms.Eg)(this.getState())) return;
              const Be = this.isDj(),
                Xe = (0, Jo.Rl)(this.getState())[ce];
              !Be ||
                !Xe ||
                ((0, l.dispatchForClientStore)(
                  (0, Nt.bk)({
                    song: Xe,
                  })
                ),
                (0, l.dispatchForClientStore)(
                  (0, Nt._u)({
                    song: Xe,
                  })
                ),
                (0, l.dispatchForClientStore)((0, Nt.WY)(Xe)));
            }
            onJukeboxStopRequest() {
              !(0, ms.Eg)(this.getState()) ||
                !this.isDj() ||
                ((0, l.dispatchForClientStore)((0, Nt.JM)()),
                (0, l.dispatchForClientStore)(
                  (0, Nt._u)({
                    song: void 0,
                  })
                ));
            }
            isDj() {
              var ce;
              const Pe = (0, Rt.WR)(this.getState()),
                Be = (0, l.getClientStoreInstance)(),
                nt =
                  (ce = (0, _s.Qn)(Be == null ? void 0 : Be.getState())) ===
                    null || ce === void 0
                    ? void 0
                    : ce.callId,
                Xe = (0, ko.gV)(this.getState(), {
                  callId: nt,
                }),
                It = (0, ko.gV)(this.getState(), {
                  callId: nt,
                  userId: Pe,
                });
              return !Xe || !!It;
            }
            maybeRemoveUserAsPending(ce) {
              const Pe = (0, l.getClientStoreInstance)(),
                Be = (0, _s.E9)(Pe == null ? void 0 : Pe.getState());
              Be &&
                this.dispatch(
                  (0, Gr.r_)({
                    callId: Be,
                    userId: ce,
                  })
                );
            }
            onContentShareDetailsUpdate(ce, Pe, Be) {
              this.dispatch(
                (0, kt.kT)({
                  id: ce,
                  isDrawEnabled: Pe,
                  contentShareSource: Be,
                })
              );
            }
            constructor(ce) {
              (this.firstPresenceTimeMs = 0),
                (this.callLogger = (0, ns.Jt)("HUDDLE-DISPATCHER")),
                (this.selfAttendeeId = void 0),
                (this.dispatch = ce.dispatch),
                (this.getState = ce.getState),
                (this.store = ce);
            }
          },
          "HuddleActionDispatcher"
        );
        var ri = e(5741354339),
          po = e(4066669727),
          Qs = e(8778137680),
          ii = e(7434063642),
          Ka = e(4156857608);
        let Dt, Zo, Xs;
        const li = "HUDDLE-SDK",
          ci = "HUDDLE-CLIENT-MIDDLEWARE",
          Us = (0, s.Wo)({
            label: ci,
          }),
          wa = _((me) => {
            me.id === "self" && (Dt == null || Dt.sendDrawMessage(me));
          }, "onPeerDrawPublish");
        function qo(me, ce, Pe, Be) {
          const nt = (0, _s.E9)(me),
            Xe = (0, _s.l4)(me),
            It = Xe ? (0, l.getStoreInstanceByTeamId)(Xe) : void 0,
            tt = It ? It.getState() : void 0,
            wt = tt ? (0, Rt.WR)(tt) : void 0;
          nt &&
            wt &&
            (It == null ||
              It.dispatch(
                ce({
                  user: wt,
                  channel: nt,
                  fieldValue: Pe,
                  experimentHuddlesMultiDeviceGroupOn: Be,
                })
              ));
        }
        _(qo, "maybeDispatchAwarenessUpdate");
        function go(me, ce, Pe) {
          const Be = (0, _s.E9)(me),
            nt = (0, _s.l4)(me),
            Xe = nt ? (0, l.getStoreInstanceByTeamId)(nt) : void 0,
            It = Xe ? Xe.getState() : void 0,
            tt = It ? (0, Rt.WR)(It) : void 0;
          Be &&
            tt &&
            (Xe == null ||
              Xe.dispatch(
                ce({
                  user: tt,
                  channel: Be,
                  experimentHuddlesMultiDeviceGroupOn: Pe,
                })
              ));
        }
        _(go, "maybeDispatchAwarenessRemove");
        const Ha = (0, Ge.Ay)(
          "dispatches actions to huddles SDK",
          (me, ce, Pe) => {
            const Be = me.getState(),
              nt = _(() => {
                const Gt = (0, _s.l4)(Be),
                  On = (0, l.getStoreInstanceByTeamId)(Gt);
                if (!On) return {};
                const kn = On == null ? void 0 : On.getState();
                if (!kn) return {};
                const rs = (0, kt.Ng)(kn) || {};
                return {
                  huddlesVideoActive: (0, kt.vz)(kn),
                  self: rs,
                };
              }, "getIsHuddlesVideoActive");
            switch (Pe.type) {
              case Nt.kn.getType(): {
                var Xe;
                const Gt = Pe.payload;
                (Zo =
                  Gt == null ||
                  (Xe = Gt.audioOutputRef) === null ||
                  Xe === void 0
                    ? void 0
                    : Xe.current),
                  Xo.A.getInstance().init();
                break;
              }
              case Nt.Sd.getType(): {
                const { huddlesVideoActive: Gt, self: On } = nt();
                Dt &&
                  Dt.hasSession() &&
                  (Gt
                    ? Dt.selfVideoEnabled(
                        !0,
                        !!(On != null && On.isScreenshareEnabled)
                      )
                    : Dt.selfVideoEnabled(!0, !1));
                break;
              }
              case Nt._I.getType(): {
                const { huddlesVideoActive: Gt, self: On } = nt();
                Dt &&
                  Dt.hasSession() &&
                  (Gt
                    ? Dt.selfVideoEnabled(
                        !1,
                        !!(On != null && On.isScreenshareEnabled)
                      )
                    : Dt.selfVideoEnabled(!1, !1));
                break;
              }
              case Nt.qW.getType(): {
                Us.info("BOOT", "user agent:", navigator.userAgent);
                const Gt = Pe.payload;
                let On = Gt.isStartMuted;
                if (!Zo) {
                  Us.error("Missing audio output element");
                  return;
                }
                const { server: kn, roomId: rs } = Gt.callResult,
                  hs = kn.attendee.AttendeeId,
                  ps = Gt.waitForHuddleStart,
                  Ds = Gt.isPrejoin;
                (0, l.dispatchForClientStore)((0, Nt.og)(Ds));
                const ks = Ds ? (0, _s.Qn)(Be) : (0, _s.Ak)(Be),
                  { teamId: ra } = ks || {},
                  Zs = (0, P.getFocusedWorkspace)(Be),
                  Vs = (0, l.getStoreInstanceByTeamId)(ra || Zs),
                  To = Vs ? Vs.getState() : void 0;
                if (!To) {
                  Us.error(
                    "team state not available while initializing huddlesSdk. Returning early"
                  );
                  return;
                }
                Us.info(
                  "client-huddles-middleware: Dispatching resetPeersStore"
                ),
                  Vs.dispatch(
                    (0, kt.VL)({
                      huddlesVideoActive: !0,
                    })
                  ),
                  Vs.dispatch((0, ii.X6)()),
                  (On = On || (0, He.ty)(To, "huddles_mute_by_default")),
                  On &&
                    (Us.info(
                      "Start huddle as muted as specified in user prefs"
                    ),
                    Vs.dispatch(
                      (0, kt.kT)({
                        id: "self",
                        isMicrophoneEnabled: !1,
                      })
                    )),
                  Xs && Xs.stop(!0),
                  (0, Fa.Gc)(Zs),
                  (Xs = new da.w()),
                  Xs.start(rs);
                const ia = (0, ri.u)();
                ia.then((qs) => {
                  qs &&
                    (Us.info("Log reporter stopped"),
                    Xs == null || Xs.stop(!0, !1),
                    (Xs = void 0));
                });
                const Io = new ai(Vs),
                  { ttiTrace: no } = (0, io.A)().getAllTraceHandlers();
                (Dt = new Cs.Y(Io, Zo, li)),
                  (0, Fs.Y)({
                    name: Fs.R1.HuddlesSdk,
                    ref: Dt,
                  });
                const Co = (0, ua.Y)(kn.attendee.ExternalUserId),
                  cr = wo(To, {
                    server: kn,
                    isPrejoin: Ds,
                  });
                if (!cr) {
                  Us.error("sdk options not available. Returning early");
                  return;
                }
                const la = [],
                  Ko = ra || Zs;
                if (Co && Ko) {
                  const qs = new po.SV({
                    teamId: Ko,
                    peerId: hs,
                    topicId: Co,
                    isHuddlesAwarenessTimestampEnabled: (0, ms.gG)(
                      Vs.getState()
                    ),
                  });
                  la.push(qs);
                  const dr = new po.MC({
                    teamId: Ko,
                  });
                  la.push(dr),
                    po.PL.watch(Ko, Co, qs),
                    (0, Fs.Y)({
                      name: Fs.R1.ChimeChannelListener,
                      ref: dr,
                    }),
                    (0, Fs.Y)({
                      name: Fs.R1.ChimeChannelBroadcaster,
                      ref: qs,
                    });
                }
                Dt.initialize(cr, [Ps.mT.MICROPHONE], !!On, ps, ia, la).then(
                  () => {
                    const qs = Dt == null ? void 0 : Dt.getMeetingMediaRegion();
                    no == null || no.setMediaRegionTag(qs),
                      Ls.A.publish({
                        type: Rs.lx.SelectedMediaRegion,
                        update: {
                          mediaRegionSelected: qs,
                        },
                      }),
                      Dt &&
                        !Ds &&
                        (Dt == null || Dt.maybeBindAudioOutputElement(),
                        Dt == null ||
                          Dt.setIncludeSelfAndNoneActiveSpeaker(!0, !0));
                  }
                ),
                  Io.setSelfAttendeeId(hs),
                  lo.A.subscribe(wa),
                  Us.info("User started huddle");
                break;
              }
              case Nt.pl.getType(): {
                const Gt = Pe.payload;
                if (Dt) {
                  const { waitForHuddleEnd: On } = Gt;
                  Dt.shutdown(() => {
                    On.resolve();
                  });
                  const kn = (0, P.getFocusedWorkspace)(Be),
                    rs = (0, l.getStoreInstanceByTeamId)(kn);
                  rs == null ||
                    rs.dispatch((0, zs.LL)(zs.vT.SpeakingWhenMuted));
                  const hs = (0, ms.pL)(rs == null ? void 0 : rs.getState()),
                    ps = (0, _s.E9)(Be);
                  ps &&
                    (go(Be, Qs.RZ, hs), go(Be, Qs.Lm, hs), po.PL.unwatch(ps)),
                    lo.A.unsubscribe(wa),
                    Us.info("User left huddle");
                }
                (Dt = void 0), po.PL.unwatchAll(), (0, Fs.N5)();
                break;
              }
              case Nt.I9.getType(): {
                const Gt = Pe.payload;
                if (
                  Dt &&
                  Dt.hasSession() &&
                  (Dt.selfMicrophoneEnabled(Gt), Gt)
                ) {
                  const On = (0, P.getFocusedWorkspace)(Be),
                    kn = (0, l.getStoreInstanceByTeamId)(On);
                  kn == null ||
                    kn.dispatch((0, zs.LL)(zs.vT.SpeakingWhenMuted));
                }
                break;
              }
              case Nt.nU.getType(): {
                const Gt = Pe.payload;
                Dt &&
                  Dt.hasSession() &&
                  Dt.sendReacji(Gt.emoji, Gt.reactionType);
                break;
              }
              case Nt.M4.getType(): {
                const Gt = Pe.payload;
                if (Dt && Dt.hasSession()) {
                  const On = (0, _s.l4)(Be),
                    kn = (0, l.getStoreInstanceByTeamId)(On);
                  if (!kn) return;
                  const rs = (0, ms.pL)(kn.getState()),
                    hs = (0, _s.E9)(Be),
                    ps = (0, Rt.WR)(kn.getState());
                  if (hs) {
                    var It;
                    if (
                      ((It = (0, ko.Fb)(
                        kn.getState(),
                        hs,
                        ps,
                        rs ? "self" : void 0
                      )) === null || It === void 0
                        ? void 0
                        : It.field_value) === Gt
                    )
                      go(Be, Qs.RZ, rs),
                        (0, _s.Rv)(Be) &&
                          Gt !== "speaker" &&
                          (kn == null ||
                            kn.dispatch(
                              (0, Ka.a)({
                                emoji: "speaker",
                                reactionType: $s.o.Sticker,
                              })
                            ));
                    else {
                      qo(Be, Qs.z7, Gt, rs);
                      const { huddleEventsTrace: ks } = (0,
                      io.A)().getAllTraceHandlers();
                      ks == null ||
                        ks.update({
                          name: Ho.p.REACTION,
                          type: Ho.G.ONCE,
                          tags: {
                            reactionType: $s.o.Sticker,
                          },
                        });
                    }
                  }
                }
                break;
              }
              case Nt.so.getType(): {
                const Gt = Pe.payload;
                Dt && Dt.hasSession() && Dt.sendMuteRequest(Gt);
                break;
              }
              case Nt.ol.getType(): {
                const Gt = Pe.payload;
                Dt && Dt.hasSession() && Dt.setAGC(Gt);
                break;
              }
              case Nt.HC.getType(): {
                const Gt = Pe.payload;
                Dt &&
                  Dt.hasSession() &&
                  Dt.setNewPreferredDevice(
                    Gt == null ? void 0 : Gt.id,
                    Gt == null ? void 0 : Gt.type
                  );
                break;
              }
              case Nt.yR.getType(): {
                const Gt = Pe.payload;
                Dt && Dt.hasSession() && Dt.setNoiseSuppression(Gt);
                break;
              }
              case Nt.Rb.getType(): {
                const Gt = Pe.payload;
                Dt && Dt.hasSession() && Dt.setVideoBackgroundEffect(Gt);
                break;
              }
              case Nt.YA.getType(): {
                const { huddlesVideoActive: Gt, self: On } = nt(),
                  kn = Pe.payload,
                  rs = !!(On != null && On.isCameraEnabled);
                if (Dt && Dt.hasSession()) {
                  var tt, wt;
                  const hs = (0, _s.l4)(Be),
                    ps = (0, l.getStoreInstanceByTeamId)(hs);
                  Gt
                    ? Dt.selfVideoEnabled(
                        rs,
                        !0,
                        kn == null ? void 0 : kn.mediaSourceId,
                        kn
                      )
                    : Dt.selfVideoEnabled(
                        !1,
                        !0,
                        kn == null ? void 0 : kn.mediaSourceId,
                        kn
                      );
                  let Ds =
                    (kn == null ||
                    (tt = kn.mediaSourceId) === null ||
                    tt === void 0
                      ? void 0
                      : tt.startsWith("screen:")) || !1;
                  !(
                    kn == null ||
                    (wt = kn.mediaSourceId) === null ||
                    wt === void 0
                  ) &&
                    wt.startsWith("window:") &&
                    (0, fs.LD)() &&
                    (Ds = !0),
                    Dt.selfDrawEnabled((0, Oo.A)() && Ds);
                  const ks = (0, fs.k0)(
                    (kn == null ? void 0 : kn.mediaSourceId) || ""
                  );
                  Dt.sendContentShareDetails(ks),
                    ps == null ||
                      ps.dispatch(
                        (0, kt.kT)({
                          id: "self",
                          isDrawEnabled: Ds,
                          isCameraEnabled: rs,
                          contentShareSource: ks,
                        })
                      );
                }
                break;
              }
              case Nt.QZ.getType(): {
                const { huddlesVideoActive: Gt, self: On } = nt(),
                  kn = Gt ? On.isCameraEnabled : !1;
                if (Dt && Dt.hasSession()) {
                  const rs = (0, _s.l4)(Be),
                    hs = (0, l.getStoreInstanceByTeamId)(rs);
                  Dt.selfVideoEnabled(!!kn, !1),
                    hs == null ||
                      hs.dispatch(
                        (0, kt.kT)({
                          id: "self",
                          isDrawEnabled: !1,
                          contentShareSource: void 0,
                        })
                      );
                }
                break;
              }
              case bs.Oh.getType():
                return Dt && Dt.hasSession()
                  ? Dt.getScreenThumbnails()
                  : Qe.S.resolve(null);
              case Nt.nI.getType(): {
                const Gt = Pe.payload;
                if (Dt && Dt.hasSession()) {
                  var Nn;
                  const On = (0, _s.l4)(Be),
                    kn = (0, l.getStoreInstanceByTeamId)(On);
                  if (!kn) return;
                  const rs = (0, ms.pL)(kn.getState()),
                    hs = (0, _s.E9)(Be),
                    ps = (0, Rt.WR)(kn.getState());
                  if (!hs) return;
                  const Ds =
                    (Nn = (0, ko.Fb)(
                      kn.getState(),
                      hs,
                      ps,
                      rs ? "self" : void 0
                    )) === null || Nn === void 0
                      ? void 0
                      : Nn.field_value;
                  return (
                    (Gt || Ds === "speaker") &&
                      (0, l.dispatchForClientStore)(
                        (0, Ka.a)({
                          emoji: "speaker",
                          reactionType: $s.o.Sticker,
                        })
                      ),
                    Dt.toggleAllIncomingVideo(Gt)
                  );
                }
                return Qe.S.resolve(null);
              }
              case Nt.WY.getType(): {
                const Gt = Pe.payload;
                if (Dt && Dt.hasSession()) {
                  const On = (0, _s.l4)(Be);
                  if (!(0, l.getStoreInstanceByTeamId)(On)) return;
                  (0, _s.E9)(Be) && qo(Be, Qs.yT, Gt.key);
                }
                break;
              }
              case Nt.Lx.getType(): {
                const Gt = Pe.payload;
                Dt && Dt.hasSession() && Dt.sendJukeboxRequest(Gt.key);
                break;
              }
              case Nt.OA.getType(): {
                Dt && Dt.hasSession() && Dt.sendJukeboxStopRequest();
                break;
              }
              case Nt.Db.getType(): {
                Dt && Dt.hasSession() && Dt.sendRecordingStartNotification();
                break;
              }
              case Nt.bk.getType(): {
                const Gt = Pe.payload;
                if (Dt && Dt.hasSession()) {
                  const On = (0, _s.l4)(Be),
                    kn = (0, l.getStoreInstanceByTeamId)(On);
                  if (!(0, ms.Eg)(kn.getState())) return;
                  Dt.startContentShareJukebox({
                    song: Gt.song,
                  });
                }
                break;
              }
              case Nt.JM.getType(): {
                if (Dt && Dt.hasSession()) {
                  const Gt = (0, _s.l4)(Be),
                    On = (0, l.getStoreInstanceByTeamId)(Gt);
                  if (!On || !(0, ms.Eg)(On.getState())) return;
                  Dt.selfStopJukebox(), go(Be, Qs.S);
                }
                break;
              }
              case bs.e$.getType(): {
                if (Dt && Dt.hasSession()) {
                  const Gt = Pe.payload.mediaResourceType;
                  return Dt.maybeCheckSystemMediaAccess(Gt);
                }
                return Qe.S.resolve(null);
              }
              case Ln.d2.getType(): {
                if (Dt && Dt.hasSession()) {
                  const {
                    payload: {
                      tileId: Gt,
                      videoRef: On,
                      shouldAttachStream: kn,
                    },
                  } = Pe;
                  Dt.bindVideo(Gt, On.current, kn);
                }
                break;
              }
              case Ln.gJ.getType(): {
                if (Dt && Dt.hasSession()) {
                  const {
                    payload: {
                      tileId: Gt,
                      videoRef: On,
                      shouldDetachStream: kn,
                    },
                  } = Pe;
                  Dt.unbindVideo(Gt, On.current, kn);
                }
                break;
              }
              case Ln.WY.getType(): {
                if (Dt && Dt.hasSession()) {
                  const {
                    payload: { tileId: Gt },
                  } = Pe;
                  Dt.pauseVideo(Gt);
                }
                break;
              }
              case Ln.D8.getType(): {
                if (Dt && Dt.hasSession()) {
                  const {
                    payload: { tileId: Gt },
                  } = Pe;
                  Dt.unpauseVideo(Gt);
                }
                break;
              }
              case Nt.WM.getType(): {
                const Gt = Pe.payload;
                if (Dt && Dt.hasSession()) {
                  const On = (0, _s.l4)(Be),
                    kn = (0, l.getStoreInstanceByTeamId)(On),
                    rs = kn == null ? void 0 : kn.getState();
                  if (!kn) {
                    Us.info(
                      "client-huddles-middleware",
                      "no team store found when user toggles video"
                    );
                    return;
                  }
                  if (!rs) {
                    Us.info(
                      "client-huddles-middleware",
                      "no team state found when user toggles video"
                    );
                    return;
                  }
                  const { huddlesVideoActive: hs } = nt(),
                    ps = (0, kt.Ng)(rs);
                  let Ds;
                  (Gt == null ? void 0 : Gt.setVideoEnabled) !== void 0
                    ? (Ds = Gt.setVideoEnabled)
                    : (Ds = !(ps != null && ps.isCameraEnabled)),
                    Ds
                      ? (Us.info(
                          "client-huddles-middleware",
                          "user toggling ON video"
                        ),
                        Dt.setCameraQuality(...(0, Do.cg)()),
                        hs
                          ? Dt.maybeEnableSelfCamera({
                              isScreenshareEnabled: ps.isScreenshareEnabled,
                            })
                          : Dt.maybeEnableSelfCamera())
                      : (Us.info(
                          "client-huddles-middleware",
                          "user toggling OFF video"
                        ),
                        hs
                          ? Dt.selfVideoEnabled(
                              !1,
                              !!(ps != null && ps.isScreenshareEnabled)
                            )
                          : Dt.selfVideoEnabled(!1, !1),
                        kn.dispatch(
                          (0, kt.kT)({
                            id: "self",
                            isCameraEnabled: !1,
                          })
                        ));
                }
                break;
              }
              case Ln.cn.getType(): {
                if (Dt && Dt.hasSession()) {
                  const {
                    payload: { tileId: Gt },
                  } = Pe;
                  return (
                    (Dt == null ? void 0 : Dt.videoTileHasStream(Gt)) || !1
                  );
                }
                return Qe.S.resolve(!1);
              }
              case kt.xz.getType(): {
                const { huddlesVideoActive: Gt, self: On } = nt();
                Dt &&
                  Pe.payload.isContent &&
                  (Gt
                    ? Dt.selfVideoEnabled(
                        !!(On != null && On.isCameraEnabled),
                        !1
                      )
                    : Dt.selfVideoEnabled(!1, !1));
                break;
              }
              case Nt.Dj.getType(): {
                Dt != null &&
                  Dt.hasSession() &&
                  (Dt == null || Dt.initVideoPermission());
                break;
              }
              case Nt._H.getType(): {
                if (Dt != null && Dt.hasSession()) {
                  const { videoElement: Gt, deviceId: On } = Pe.payload;
                  Dt.stopVideoPreviewForVideoInput(Gt),
                    Dt.setCameraQuality(...(0, Do.cg)()),
                    Dt.requestPreviewStreamForDeviceId(On, Ms.lW.Camera, Gt);
                }
                break;
              }
              case Nt.yi.getType(): {
                if (Dt != null && Dt.hasSession()) {
                  const Gt = Pe.payload;
                  Dt.stopVideoPreviewForVideoInput(Gt);
                }
                break;
              }
              case Nt.Rr.getType(): {
                const { self: Gt } = nt();
                if (Dt && Dt.hasSession()) {
                  const On =
                    (Gt == null ? void 0 : Gt.contentShareSource) ||
                    As.R.Unknown;
                  if (On !== As.R.Unknown) {
                    const kn = (Gt == null ? void 0 : Gt.isDrawEnabled) || !1;
                    Dt.selfDrawEnabled((0, Oo.A)() && kn),
                      Dt.sendContentShareDetails(On);
                    const rs = (0, l.getStoreInstanceByTeamId)(
                      Pe.payload.teamId
                    );
                    rs == null ||
                      rs.dispatch(
                        (0, kt.kT)({
                          id: "self",
                          isDrawEnabled: kn,
                        })
                      );
                  }
                }
                break;
              }
              case Nt.HF.getType(): {
                const Gt = Pe.payload.isHostDrawEnabled,
                  On = (0, l.getStoreInstanceByTeamId)(Pe.payload.teamId);
                On == null ||
                  On.dispatch(
                    (0, kt.kT)({
                      id: "self",
                      isHostDrawEnabled: Gt,
                    })
                  );
                break;
              }
              case Nt.B5.getType(): {
                Dt == null || Dt.handleClientOffline();
                break;
              }
              case Nt.f2.getType(): {
                const Gt = Pe.payload,
                  { isStartMuted: On } = Gt,
                  { teamId: kn } = (0, _s.Ak)(Be) || {},
                  rs = (0, P.getFocusedWorkspace)(Be),
                  hs = (0, l.getStoreInstanceByTeamId)(kn || rs),
                  { ttiTrace: ps } = (0, io.A)().getAllTraceHandlers();
                if (
                  (ps == null ||
                    ps.setMediaRegionTag(
                      Dt == null ? void 0 : Dt.getMeetingMediaRegion()
                    ),
                  hs && On && Dt)
                )
                  return Dt.completePrejoin(Gt).then(() => {
                    hs.dispatch(
                      (0, kt.kT)({
                        id: "self",
                        isMicrophoneEnabled: !1,
                      })
                    );
                  });
                if (Dt) return Dt.completePrejoin({});
                break;
              }
              case Nt.xq.getType(): {
                const Gt = Pe.payload.contentViewType,
                  On = Pe.payload.contentViewConfig;
                if (Dt && Dt.hasSession() && (0, _s.E9)(Be)) {
                  var qn;
                  const rs = (0, _s.l4)(Be),
                    hs = (0, l.getStoreInstanceByTeamId)(rs);
                  if (!hs) return;
                  const ps = (0, ms.pL)(hs.getState());
                  if (Gt !== $s.cM.Screenshare) go(Be, Qs.Lm, ps);
                  else if (
                    !(On == null || (qn = On.item) === null || qn === void 0) &&
                    qn.id
                  ) {
                    let Ds;
                    if (On.item.id === "self") Ds = (0, Rt.WR)(hs.getState());
                    else {
                      var Ts;
                      Ds =
                        (Ts = (0, kt.jB)(hs.getState(), On.item.id)) === null ||
                        Ts === void 0
                          ? void 0
                          : Ts.userId;
                    }
                    qo(Be, Qs.fv, Ds, ps);
                  }
                }
                break;
              }
              case Nt.wr.getType(): {
                const Gt = (0, _s.l4)(Be),
                  On = (0, l.getStoreInstanceByTeamId)(Gt);
                if (!On) return;
                const kn = On.getState();
                if (!(0, ms.Rk)(kn)) return;
                if (Dt && Dt.hasSession()) {
                  const rs = (0, _s.J0)(Be),
                    hs = (0, Jo.gW)(kn, {
                      channelId: rs,
                    }),
                    ps = (0, Jo.zK)(kn, {
                      channelId: rs,
                    });
                  Dt.selfMicrophoneEnabled(ps),
                    (0, l.dispatchForClientStore)(
                      (0, Nt.WM)({
                        setVideoEnabled: hs,
                      })
                    );
                }
                break;
              }
              default:
                return ce(Pe);
            }
            return null;
          }
        );
        Ha.meta = {
          name: "createMiddleware",
          key: "createMiddlewareclientHuddlesMiddleware",
          description: "dispatches actions to huddles SDK",
        };
        const di = Ha;
        Object.defineProperty(
          {
            huddlesSdk: Dt,
          },
          "huddlesSdk",
          {
            get: () => Dt,
            set: (me) => {
              Dt = me;
            },
          }
        );
        var No = e(4653418008),
          Bo = e(3328068409);
        const Va = (0, Ge.Ay)(
          "Broadcast client theme state to other stores",
          (me, ce, Pe) => {
            const Be = me.getState(),
              nt = ce(Pe),
              Xe = me.getState(),
              It = (0, P.getBootedWorkspaces)(Xe);
            return (
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, Bo.to)(tt),
                broadcastAction: (tt) => (0, No.yg)(tt),
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, Bo.FW)(tt),
                broadcastAction: (tt) => (0, No.kl)(tt),
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, Bo.VD)(tt),
                broadcastAction: (tt) => (0, No.LA)(tt),
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, Bo.pg)(tt),
                broadcastAction: (tt) => (0, No.Th)(tt),
              }),
              nt
            );
          }
        );
        Va.meta = {
          name: "createMiddleware",
          key: "createMiddlewarebroadcastClientThemeMiddleware",
          description: "Broadcast client theme state to other stores",
        };
        const ui = Va;
        var _i = e(1201539379),
          mi = e(4172221507),
          hi = e(7331033739),
          vi = e(8707579690),
          Ei = e(2779520532),
          fi = e(7128275929),
          pi = e(9341298);
        const ja = (0, Ge.Ay)(
          "Broadcast view layout state across all teams",
          (me, ce, Pe) => {
            const Be = me.getState(),
              nt = ce(Pe),
              Xe = me.getState(),
              It = (0, P.getBootedWorkspaces)(Xe);
            return (
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => {
                  var wt, Nn;
                  return `${
                    tt == null || (wt = tt.viewLayout) === null || wt === void 0
                      ? void 0
                      : wt.sidebarWidthIntent
                  }-${
                    tt == null || (Nn = tt.viewLayout) === null || Nn === void 0
                      ? void 0
                      : Nn.sidebarWidthMode
                  }`;
                },
                broadcastAction: (tt) => {
                  const wt = tt.split("-");
                  return (0, Ei.R)({
                    sidebarWidthIntent: Number(wt[0]),
                    sidebarWidthMode: wt[1],
                  });
                },
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => {
                  var wt, Nn;
                  return `${
                    tt == null || (wt = tt.viewLayout) === null || wt === void 0
                      ? void 0
                      : wt.sidebarWideWidthIntent
                  }-${
                    tt == null || (Nn = tt.viewLayout) === null || Nn === void 0
                      ? void 0
                      : Nn.sidebarWideWidthMode
                  }`;
                },
                broadcastAction: (tt) => {
                  const wt = tt.split("-");
                  return (0, pi.q)({
                    sidebarWideWidthIntent: Number(wt[0]),
                    sidebarWideWidthMode: wt[1],
                  });
                },
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => {
                  var wt, Nn;
                  return `${
                    tt == null || (wt = tt.viewLayout) === null || wt === void 0
                      ? void 0
                      : wt.sidebarExtraWideWidthIntent
                  }-${
                    tt == null || (Nn = tt.viewLayout) === null || Nn === void 0
                      ? void 0
                      : Nn.sidebarExtraWideWidthMode
                  }`;
                },
                broadcastAction: (tt) => {
                  const wt = tt.split("-");
                  return (0, fi.a)({
                    sidebarExtraWideWidthIntent: Number(wt[0]),
                    sidebarExtraWideWidthMode: wt[1],
                  });
                },
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, ie.Vo)(tt),
                broadcastAction: (tt) => (0, mi.F)(tt),
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, ie.v8)(tt),
                broadcastAction: (tt) => (0, _i.mV)(tt),
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, ie.r8)(tt),
                broadcastAction: (tt) => (0, hi.v)(tt),
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => {
                  var wt, Nn;
                  return `${
                    tt == null || (wt = tt.viewLayout) === null || wt === void 0
                      ? void 0
                      : wt.secondaryWidthIntent
                  }-${
                    tt == null || (Nn = tt.viewLayout) === null || Nn === void 0
                      ? void 0
                      : Nn.secondaryWidthMode
                  }`;
                },
                broadcastAction: (tt) => {
                  const wt = tt.split("-");
                  return (0, vi.J)({
                    secondaryWidthIntent: Number(wt[0]),
                    secondaryWidthMode: wt[1],
                  });
                },
              }),
              nt
            );
          }
        );
        ja.meta = {
          name: "createMiddleware",
          key: "createMiddlewarebroadcastViewLayoutMiddleware",
          description: "Broadcast view layout state across all teams",
        };
        const gi = ja;
        var Ao = e(2591023465),
          ea = e(3674298388),
          ao = e(7489442332);
        const Ga = (0, c.Ay)(
          "Set the user-specified sidebar width and mode",
          (me, ce, Pe) => {
            let { inspectorWidthIntent: Be, inspectorWidthMode: nt } = Pe;
            (0, Me.q9)(ao.j0, Be),
              (0, Me.q9)(ao.mu, nt),
              me(
                (0, Ao.lT)({
                  inspectorWidthIntent: Be,
                  inspectorWidthMode: nt,
                })
              );
          }
        );
        Ga.meta = {
          name: "createThunk",
          key: "createThunksetInspectorColumn",
          description: "Set the user-specified sidebar width and mode",
        };
        const za = (0, c.Ay)(
          "Sets whether or not the sidebar is part of the grid layout at normal window sizes",
          (me, ce, Pe) => {
            (0, Me.q9)(ao.jG, Pe), me((0, Ao.KY)(Pe));
          }
        );
        za.meta = {
          name: "createThunk",
          key: "createThunksetIsSidebarVisible",
          description:
            "Sets whether or not the sidebar is part of the grid layout at normal window sizes",
        };
        const Ya = (0, c.Ay)(
          "Set the user-specified sidebar width and mode",
          (me, ce, Pe) => {
            let { sidebarWidthIntent: Be, sidebarWidthMode: nt } = Pe;
            (0, Me.q9)(ao.ke, Be),
              (0, Me.q9)(ao.ts, nt),
              me(
                (0, Ao.SP)({
                  sidebarWidthIntent: Be,
                  sidebarWidthMode: nt,
                })
              );
          }
        );
        Ya.meta = {
          name: "createThunk",
          key: "createThunksetSidebarColumn",
          description: "Set the user-specified sidebar width and mode",
        };
        const $a = (0, c.Ay)(
          "Sets whether or not the user prefers a responsive sidebar",
          (me, ce, Pe) => {
            (0, dt.A)(ce()) && (0, Me.q9)(ao.Lb, Pe), me((0, Ao.iJ)(Pe));
          }
        );
        $a.meta = {
          name: "createThunk",
          key: "createThunksetUserPrefersResponsiveSidebar",
          description:
            "Sets whether or not the user prefers a responsive sidebar",
        };
        const Qa = (0, Ge.Ay)(
          "Broadcast client theme state to other stores",
          (me, ce, Pe) => {
            const Be = me.getState(),
              nt = ce(Pe),
              Xe = me.getState(),
              It = (0, P.getBootedWorkspaces)(Xe);
            return (
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => {
                  var wt, Nn;
                  return `${
                    tt == null ||
                    (wt = tt.workspaceLayout) === null ||
                    wt === void 0
                      ? void 0
                      : wt.sidebarWidthIntent
                  }-${
                    tt == null ||
                    (Nn = tt.workspaceLayout) === null ||
                    Nn === void 0
                      ? void 0
                      : Nn.sidebarWidthMode
                  }`;
                },
                broadcastAction: (tt) => {
                  const wt = tt.split("-");
                  return Ya({
                    sidebarWidthIntent: Number(wt[0]),
                    sidebarWidthMode: wt[1],
                  });
                },
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, ea.Vo)(tt),
                broadcastAction: (tt) => za(tt),
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, ea.r8)(tt),
                broadcastAction: (tt) => (0, Ao.vm)(tt),
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => (0, ea.xx)(tt),
                broadcastAction: (tt) => $a(tt),
              }),
              lt({
                state: Xe,
                prevState: Be,
                workspaces: It,
                broadcastSelector: (tt) => {
                  var wt, Nn;
                  return `${
                    tt == null ||
                    (wt = tt.workspaceLayout) === null ||
                    wt === void 0
                      ? void 0
                      : wt.inspectorWidthIntent
                  }-${
                    tt == null ||
                    (Nn = tt.workspaceLayout) === null ||
                    Nn === void 0
                      ? void 0
                      : Nn.inspectorWidthMode
                  }`;
                },
                broadcastAction: (tt) => {
                  const wt = tt.split("-");
                  return Ga({
                    inspectorWidthIntent: Number(wt[0]),
                    inspectorWidthMode: wt[1],
                  });
                },
              }),
              nt
            );
          }
        );
        Qa.meta = {
          name: "createMiddleware",
          key: "createMiddlewarebroadcastWorkspaceLayoutMiddleware",
          description: "Broadcast client theme state to other stores",
        };
        const Ai = Qa;
        var yi = e(9524650809),
          Xa = e(1649982175),
          Ja = e(352142497),
          yo = e(2870224675),
          Ti = e(9932860381),
          Za = e(3034856104);
        const Ii = 50;
        function qa() {
          return (0, yi.A)("tabSoda_");
        }
        _(qa, "generateTabSodaTabId");
        function Ci() {
          return {
            activeTab: void 0,
            tabs: {},
            tabOrder: [],
          };
        }
        _(Ci, "getInitialState");
        function Mi(me, ce) {
          if (me && ce) {
            var Pe, Be, nt, Xe;
            const wt =
                (Pe = me[me[Vn.jf]]) === null || Pe === void 0
                  ? void 0
                  : Pe.primary,
              Nn =
                (Be = me[me[Vn.jf]]) === null || Be === void 0
                  ? void 0
                  : Be.secondary,
              qn =
                (nt = ce[ce[Vn.jf]]) === null || nt === void 0
                  ? void 0
                  : nt.primary,
              Ts =
                (Xe = ce[ce[Vn.jf]]) === null || Xe === void 0
                  ? void 0
                  : Xe.secondary;
            if (
              me.teamId === ce.teamId &&
              me[Vn.jf] === ce[Vn.jf] &&
              (wt == null ? void 0 : wt.id) === (qn == null ? void 0 : qn.id) &&
              (Nn == null ? void 0 : Nn.id) === (Ts == null ? void 0 : Ts.id)
            ) {
              var It, tt;
              return !(
                (wt == null ? void 0 : wt.viewType) === Ja.D.Thread &&
                (qn == null ? void 0 : qn.viewType) === Ja.D.Thread &&
                (wt == null || (It = wt.params) === null || It === void 0
                  ? void 0
                  : It.threadId) !==
                  (qn == null || (tt = qn.params) === null || tt === void 0
                    ? void 0
                    : tt.threadId)
              );
            }
          }
          return !1;
        }
        _(Mi, "areViewsSame");
        function er(me) {
          let { reducerState: ce, entry: Pe, eventType: Be } = me,
            nt = ce.activeTab,
            Xe = [...ce.tabOrder];
          nt || ((nt = qa()), Xe.push(nt));
          const It = ce.tabs[nt] || [];
          let tt = {
            ...ce.tabs,
          };
          if (
            ((tt[nt] = [Pe, ...(Be === "replace" ? It.slice(1) : It)].slice(
              0,
              Ii
            )),
            !It.length)
          ) {
            const wt = ce.tabOrder.find((Nn) => {
              var qn;
              return Mi(
                Pe,
                (qn = ce.tabs[Nn]) === null || qn === void 0 ? void 0 : qn[0]
              );
            });
            wt &&
              nt !== wt &&
              ((Xe = ce.tabOrder.filter((Nn) => Nn !== nt)),
              (tt = (0, Xa.A)(ce.tabs, nt)),
              (nt = wt));
          }
          return {
            activeTab: nt,
            tabs: tt,
            tabOrder: Xe,
          };
        }
        _(er, "getTabSodaStateFromWindowHistoryEvent");
        const Oi = Ci(),
          Di = (0, ue.vy)({}, Oi, {
            persistenceEnabled: !1,
            storeKey: "tabSoda",
          })
            .on(yo.nz, (me, ce) => {
              let { setAsActive: Pe } = ce;
              const Be = qa(),
                nt = {
                  ...me.tabs,
                  [Be]: [],
                },
                Xe = [...me.tabOrder],
                It = me.activeTab ? Xe.indexOf(me.activeTab) : -1;
              return (
                Xe.splice(It + 1, 0, Be),
                {
                  activeTab: Pe ? Be : me.activeTab,
                  tabs: nt,
                  tabOrder: Xe,
                }
              );
            })
            .on(yo.yw, (me, ce) => ({
              ...me,
              activeTab: ce,
            }))
            .on(yo.oT, (me, ce) => {
              const { activeTab: Pe, tabs: Be, tabOrder: nt } = me;
              let Xe = Pe;
              ce === Pe && (Xe = (0, Ti.fe)(Pe, nt));
              const It = [...nt],
                tt = nt.indexOf(ce);
              It.splice(tt, 1);
              const wt = {
                ...Be,
              };
              return (
                delete wt[ce],
                {
                  tabs: wt,
                  tabOrder: It,
                  activeTab: Xe,
                }
              );
            })
            .on(yo.ez, (me, ce) => {
              const Pe = me.tabs[ce] || [],
                Be = {
                  ...me.tabs,
                  [ce]: [...Pe.slice(1)],
                };
              return {
                ...me,
                tabs: Be,
              };
            })
            .on(yo.Uz, (me, ce) => ({
              ...me,
              tabOrder: ce,
            }))
            .on(j.y2, (me, ce) => {
              let { entry: Pe } = ce;
              return (0, Za.H)(Pe)
                ? er({
                    eventType: "push",
                    reducerState: me,
                    entry: Pe,
                  })
                : me;
            })
            .on(j.HQ, (me, ce) => {
              let { entry: Pe } = ce;
              return (0, Za.H)(Pe)
                ? er({
                    eventType: "replace",
                    reducerState: me,
                    entry: Pe,
                  })
                : me;
            });
        var Pi = e(6027162153),
          Si = e(9087248458),
          Ri = e(5503876160),
          Js = e(9139930183);
        const Li = {
            bootedWorkspaces: [],
            failedToBootWorkspaces: [],
            needs2FASetup: [],
            needsToAcceptCustomTOS: [],
            userNotMemberOfAnyWorkspaceInOrg: [],
            userRequiresMobileLogin: [],
            migratingWorkspaces: {},
            completedMigrationWorkspaces: [],
            accessLimitedWorkspaces: [],
            recentlyFocusedWorkspaces: [],
            navigateToUnbootedWorkspace: {},
            removedWorkspaces: [],
          },
          bi = "WORKSPACES",
          tr = 16,
          Ui = (0, Js.Ay)({}, Li, {
            storeKey: "workspaces",
            persistenceEnabled: !0,
          })
            .on(r.initialize, (me, ce) => ki(me, ce))
            .on(r.setDidBootAllWorkspaces, (me) => ({
              ...me,
              didBootAllWorkspaces: !0,
            }))
            .on(r.setWorkspaceOrder, (me, ce) => Ni(me, ce))
            .on(r.setWorkspaceBooted, (me, ce) => Bi(me, ce))
            .on(r.setWorkspaceFailedToBoot, (me, ce) => Wi(me, ce))
            .on(r.setWorkspaceNeeds2FASetup, (me, ce) => xi(me, ce))
            .on(r.setWorkspaceNeedsToAcceptCustomTOS, (me, ce) => Fi(me, ce))
            .on(r.setNavigateToUnbootedWorkspace, (me, ce) => ({
              ...me,
              navigateToUnbootedWorkspace: ce,
            }))
            .on(r.setWorkspaceIsMigrating, (me, ce) => Ki(me, ce))
            .on(r.setWorkspaceMigrationIsComplete, (me, ce) => wi(me, ce))
            .on(r.setWorkspaceIsAccessLimited, (me, ce) => Hi(me, ce))
            .on(r.setUserNotMemberOfAnyWorkspaceInOrg, (me, ce) => Vi(me, ce))
            .on(r.setUserRequiresMobileLogin, (me, ce) => ji(me, ce))
            .on(r.addWorkspace, function (me) {
              let { id: ce, meta: Pe } =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : {};
              if (!ce || !Pe)
                throw new Error(
                  "'id' and 'meta' are both required when adding a workspace"
                );
              if (me.allWorkspaces.includes(ce))
                return (
                  (0, s.Wo)({
                    label: bi,
                  }).warn(`Cannot add workspace; it is already present: ${ce}`),
                  me
                );
              const { allWorkspaces: Be, workspacesMeta: nt } = me;
              return {
                ...me,
                allWorkspaces: [...Be, ce],
                workspacesMeta: {
                  ...nt,
                  [ce]: Pe,
                },
              };
            })
            .on(r.updateWorkspaceMeta, function (me) {
              let { id: ce, meta: Pe } =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : {};
              const { workspacesMeta: Be } = me;
              if (!Be[ce])
                throw new Error(
                  `Cannot update workspace meta for ${ce}; no such team`
                );
              return {
                ...me,
                workspacesMeta: {
                  ...Be,
                  [ce]: Pe,
                },
              };
            })
            .on(r.internalSetFocusedWorkspaceType, (me, ce) => ({
              ...me,
              focusedWorkspace: ce,
              recentlyFocusedWorkspaces: Gi(me.recentlyFocusedWorkspaces, ce),
            }))
            .on(r.internalRemoveWorkspaceType, (me, ce) => ({
              ...me,
              allWorkspaces: (0, Pi.A)(me.allWorkspaces, ce),
            }))
            .on(r.addRemovedWorkspace, (me, ce) => zi(me, ce));
        function ki(me) {
          let {
            focusedWorkspace: ce,
            allWorkspaces: Pe,
            workspacesMeta: Be,
          } = arguments.length > 1 && arguments[1] !== void 0
            ? arguments[1]
            : {};
          if (me.allWorkspaces)
            throw new Error(
              "workspaces-store:initialize cannot be called more than once"
            );
          if (!ce)
            throw new Error(
              "workspaces-store:initialize must be given a focusedWorkspace"
            );
          if (!Pe)
            throw new Error(
              "workspaces-store:initialize must be given an array of workspaces"
            );
          if (Pe.indexOf(ce) < 0)
            throw new Error(
              `workspaces-store:initialize ${ce} is not one of the valid workspaces: ${Pe}`
            );
          return {
            ...me,
            focusedWorkspace: ce,
            allWorkspaces: Pe,
            workspacesMeta: Be,
            recentlyFocusedWorkspaces: [ce],
          };
        }
        _(ki, "initializeWorkspacesState");
        function Ni(me, ce) {
          const Pe = me.allWorkspaces;
          if ((0, Si.A)(Pe, ce).length !== Pe.length)
            throw new Error(
              "workspaces-store:setWorkspaceOrder can only re-order items in the array; additions or removals are not allowed"
            );
          return (
            (0, Me.q9)("orderedTeamIds", ce),
            {
              ...me,
              allWorkspaces: ce,
            }
          );
        }
        _(Ni, "updateWorkspaceOrder");
        function Bi(me, ce) {
          const Pe = me.bootedWorkspaces.includes(ce)
            ? me.bootedWorkspaces
            : [...me.bootedWorkspaces, ce];
          return {
            ...me,
            bootedWorkspaces: Pe,
          };
        }
        _(Bi, "updateWorkspaceBooted");
        function Wi(me, ce) {
          if (!ce) return me;
          const Pe = me.failedToBootWorkspaces.includes(ce)
            ? me.failedToBootWorkspaces
            : [...me.failedToBootWorkspaces, ce];
          return {
            ...me,
            failedToBootWorkspaces: Pe,
          };
        }
        _(Wi, "updateWorkspaceFailedToBoot");
        function xi(me, ce) {
          if (!ce) return me;
          const Pe = me.needs2FASetup.includes(ce)
            ? me.needs2FASetup
            : [...me.needs2FASetup, ce];
          return {
            ...me,
            needs2FASetup: Pe,
          };
        }
        _(xi, "updateWorkspaceNeeds2FASetup");
        function Fi(me, ce) {
          if (!ce) return me;
          const Pe = me.needsToAcceptCustomTOS.find((Be) => {
            let { teamId: nt } = Be;
            return ce.teamId === nt;
          })
            ? me.needsToAcceptCustomTOS
            : [...me.needsToAcceptCustomTOS, ce];
          return {
            ...me,
            needsToAcceptCustomTOS: Pe,
          };
        }
        _(Fi, "updateWorkspaceNeedsToAcceptCustomTOS");
        function Ki(me, ce) {
          let { teamId: Pe, migrationId: Be, canViewMigrationStatus: nt } = ce;
          if (!Pe) return me;
          const { migratingWorkspaces: Xe } = me;
          return {
            ...me,
            migratingWorkspaces: {
              ...Xe,
              [Pe]: {
                migrationId: Be,
                canViewMigrationStatus: nt,
              },
            },
          };
        }
        _(Ki, "updateWorkspaceIsMigrating");
        function wi(me, ce) {
          if (!ce) return me;
          const Pe = me.completedMigrationWorkspaces.includes(ce)
            ? me.completedMigrationWorkspaces
            : [...me.completedMigrationWorkspaces, ce];
          return {
            ...me,
            completedMigrationWorkspaces: Pe,
          };
        }
        _(wi, "updateWorkspaceMigrationIsComplete");
        function Hi(me, ce) {
          if (!ce) return me;
          const Pe = me.accessLimitedWorkspaces.includes(ce)
            ? me.accessLimitedWorkspaces
            : [...me.accessLimitedWorkspaces, ce];
          return {
            ...me,
            accessLimitedWorkspaces: Pe,
          };
        }
        _(Hi, "updateWorkspaceIsAccessLimited");
        function Vi(me, ce) {
          if (!ce) return me;
          const Pe = me.userNotMemberOfAnyWorkspaceInOrg.includes(ce)
            ? me.userNotMemberOfAnyWorkspaceInOrg
            : [...me.userNotMemberOfAnyWorkspaceInOrg, ce];
          return {
            ...me,
            userNotMemberOfAnyWorkspaceInOrg: Pe,
          };
        }
        _(Vi, "updateUserNotMemberOfAnyWorkspaceInOrg");
        function ji(me, ce) {
          if (!ce) return me;
          const Pe = me.userRequiresMobileLogin.includes(ce)
            ? me.userRequiresMobileLogin
            : [...me.userRequiresMobileLogin, ce];
          return {
            ...me,
            userRequiresMobileLogin: Pe,
          };
        }
        _(ji, "updateUserRequiresMobileLogin");
        function Gi(me, ce) {
          const Pe = [ce, ...me.filter((Be) => Be !== ce)];
          return Pe.length > tr ? (0, Ri.A)(Pe, tr) : Pe;
        }
        _(Gi, "updateRecentlyFocusedWorkspaces");
        function zi(me, ce) {
          if (!ce) return me;
          const Pe = me.removedWorkspaces.includes(ce)
            ? me.removedWorkspaces
            : [...me.removedWorkspaces, ce];
          return {
            ...me,
            removedWorkspaces: Pe,
          };
        }
        _(zi, "updateRemovedWorkspaces");
        var Yi = e(7798793495),
          $i = e(8749931423),
          Qi = e(7206394193),
          Xi = e(773865333),
          Ji = e(7156104699),
          Zi = e(8333842125),
          qi = e(582577127),
          el = e(2732935554),
          tl = e(3034787354),
          nl = e(4614661813),
          sl = e(2140362605);
        const ta = (0, sl.Ay)("sets the client side effect map on the store");
        ta.meta = {
          name: "createAction",
          key: "createActionsetClientSideEffectsMap",
          description: "sets the client side effect map on the store",
        };
        const ol = {
            clientSideEffectsMap: {},
          },
          al = (0, Js.Ay)({}, ol, {
            storeKey: "clientSideEffects",
            persistenceEnabled: !1,
          }).on(ta, (me, ce) => ({
            ...me,
            clientSideEffectsMap: ce,
          }));
        var rl = e(5923036663),
          il = e(6168781067),
          ll = e(7902571278),
          cl = e(56562029);
        const dl = {
            isHuddlesEnabled: !1,
            channelToJoinCredentials: {},
            showDiscoveryBanner: !1,
            screenshareActivePanel: 0,
            songPlaying: void 0,
            jukeboxLocalVolume: 1,
            canRenderActiveInviteCardInSidebar: !0,
            isHuddleWindowFocused: !1,
            isHuddleWindowOpen: !1,
            isHuddleMiniPlayerHidden: !1,
            isAudioOnlyModeEnabled: !1,
            wasCameraEnabledWhenAudioOnlyModeWasActivated: !1,
            wasJoinedFromPrejoin: !1,
            unreadInvites: [],
            huddleJoinPreviewChannelId: void 0,
          },
          ul = (0, Js.Ay)({}, dl, {
            storeKey: "clientHuddles",
            persistenceEnabled: !1,
          })
            .on(Nt.VU, (me, ce) =>
              me.isHuddlesEnabled
                ? me
                : {
                    ...me,
                    isHuddlesEnabled: ce,
                  }
            )
            .on(Nt.xf, (me, ce) => ({
              ...me,
              mostRecentHuddle: ce,
            }))
            .on(Nt.Rh, (me, ce) => {
              const { mostRecentHuddle: Pe } = me;
              if (
                !Pe ||
                (ce.teamId && ce.teamId !== Pe.teamId) ||
                (ce.channelId && ce.channelId !== Pe.channelId)
              )
                return me;
              const Be = {
                  ...me,
                  mostRecentHuddle: {
                    ...Pe,
                    ...ce,
                  },
                },
                nt = Be.mostRecentHuddle;
              return (
                nt &&
                  (0, s.Wo)().info(
                    Ys.o7,
                    `updateActiveHuddleReference huddleState ${nt.huddleState}, substate ${nt.huddleSubState}, optimisticState ${nt.optimisticHuddleState}`
                  ),
                Be
              );
            })
            .on(Nt.Jc, (me, ce) => {
              const { mostRecentHuddle: Pe } = me;
              return !Pe || ce === Pe.channelId
                ? me
                : {
                    ...me,
                    mostRecentHuddle: {
                      ...Pe,
                      channelId: ce,
                    },
                  };
            })
            .on(Nt.hB, (me, ce) => ({
              ...me,
              activeInvite: ce,
              unreadInvites: [
                ...me.unreadInvites,
                {
                  invite: ce,
                  receivedTimestampMs: Date.now(),
                },
              ],
            }))
            .on(Nt.fP, (me, ce) => {
              let { teamId: Pe, markBeforeMs: Be } = ce;
              const nt = me.unreadInvites.filter(
                (Xe) => Xe.invite.teamId !== Pe || Xe.receivedTimestampMs > Be
              );
              return me.unreadInvites.length === nt.length
                ? me
                : {
                    ...me,
                    unreadInvites: nt,
                  };
            })
            .on(Nt.u8, (me, ce) => {
              var Pe;
              return {
                ...me,
                unreadInvites: me.unreadInvites.filter(
                  (Be) => Be.invite.channelId !== ce
                ),
                activeInvite:
                  ((Pe = me.activeInvite) === null || Pe === void 0
                    ? void 0
                    : Pe.channelId) !== ce
                    ? me.activeInvite
                    : void 0,
              };
            })
            .on(Nt.Ko, (me, ce) =>
              me.forceMiniPanelVisible === ce
                ? me
                : {
                    ...me,
                    forceMiniPanelVisible: ce,
                  }
            )
            .on(Nt.Yi, (me, ce) => {
              let {
                channelId: Pe,
                joinCredentials: Be,
                expiry: nt,
                fromInvite: Xe,
              } = ce;
              var It;
              if (!Pe || !Be) return me;
              const tt = me.channelToJoinCredentials;
              tt[Pe] = {
                credentials: Be,
                expiry: nt,
                fromInvite: Xe,
              };
              const wt =
                (It = me.activeInvite) === null || It === void 0
                  ? void 0
                  : It.teamId;
              return (
                wt &&
                  (0, to.Cy)({
                    state: (0, l.getStateByTeamId)(wt),
                  }).count(Os.ir),
                {
                  ...me,
                  channelToJoinCredentials: tt,
                }
              );
            })
            .on(Nt.WB, (me, ce) => {
              let { channelId: Pe } = ce;
              if (!Pe) return me;
              if (me.channelToJoinCredentials[Pe]) {
                var Be;
                const nt =
                  (Be = me.activeInvite) === null || Be === void 0
                    ? void 0
                    : Be.teamId;
                nt &&
                  (0, to.Cy)({
                    state: (0, l.getStateByTeamId)(nt),
                  }).count(Os.sQ);
              }
              return {
                ...me,
                channelToJoinCredentials: (0, Xa.A)(
                  me.channelToJoinCredentials,
                  [Pe]
                ),
              };
            })
            .on(Nt.aO, (me, ce) =>
              me.showDiscoveryBanner === ce
                ? me
                : {
                    ...me,
                    showDiscoveryBanner: ce,
                  }
            )
            .on(Nt.Ag, (me, ce) =>
              me.isLoungeMusicPlaying === ce
                ? me
                : {
                    ...me,
                    isLoungeMusicPlaying: !!ce,
                  }
            )
            .on(Nt._U, (me, ce) =>
              me.lastStartTs === ce
                ? me
                : {
                    ...me,
                    lastStartTs: ce,
                  }
            )
            .on(Nt.bV, (me, ce) =>
              me.lastEndTs === ce
                ? me
                : {
                    ...me,
                    lastEndTs: ce,
                  }
            )
            .on(Nt.qr, (me, ce) =>
              me.lastDurationTs === ce
                ? me
                : {
                    ...me,
                    lastDurationTs: ce,
                  }
            )
            .on(Nt.Gx, (me, ce) =>
              me.screenshareActivePanel === ce
                ? me
                : {
                    ...me,
                    screenshareActivePanel: ce,
                  }
            )
            .on(Nt.cx, (me) => ({
              ...me,
              screenshareActivePanel: 0,
              songPlaying: void 0,
              isHuddleWindowFocused: !1,
              isHuddleWindowOpen: !1,
              isHuddleMiniPlayerHidden: !1,
              isAudioOnlyModeEnabled: !1,
              wasCameraEnabledWhenAudioOnlyModeWasActivated: !1,
              wasJoinedFromPrejoin: !1,
              huddleJoinPreviewChannelId: void 0,
            }))
            .on(Nt._u, (me, ce) => {
              let { song: Pe } = ce;
              return me.songPlaying === (Pe == null ? void 0 : Pe.key)
                ? me
                : {
                    ...me,
                    songPlaying: Pe == null ? void 0 : Pe.key,
                  };
            })
            .on(Nt.nw, (me, ce) =>
              me.canRenderActiveInviteCardInSidebar === ce
                ? me
                : {
                    ...me,
                    canRenderActiveInviteCardInSidebar: ce,
                  }
            )
            .on(Nt.o9, (me, ce) =>
              me.isHuddleWindowFocused === ce
                ? me
                : {
                    ...me,
                    isHuddleWindowFocused: ce,
                  }
            )
            .on(Nt.TK, (me, ce) =>
              me.isHuddleWindowOpen === ce
                ? me
                : {
                    ...me,
                    isHuddleWindowOpen: ce,
                  }
            )
            .on(Nt.kg, (me, ce) =>
              me.isAudioOnlyModeEnabled === ce
                ? me
                : {
                    ...me,
                    isAudioOnlyModeEnabled: ce,
                  }
            )
            .on(Nt.Hg, (me, ce) =>
              me.wasCameraEnabledWhenAudioOnlyModeWasActivated === ce
                ? me
                : {
                    ...me,
                    wasCameraEnabledWhenAudioOnlyModeWasActivated: ce,
                  }
            )
            .on(Nt.t2, (me, ce) =>
              me.isHuddleMiniPlayerHidden === ce
                ? me
                : {
                    ...me,
                    isHuddleMiniPlayerHidden: !!ce,
                  }
            )
            .on(Nt.og, (me, ce) =>
              me.wasJoinedFromPrejoin === ce
                ? me
                : {
                    ...me,
                    wasJoinedFromPrejoin: !!ce,
                  }
            )
            .on(Nt._o, (me, ce) => {
              let { channelId: Pe } = ce;
              return me.huddleJoinPreviewChannelId === Pe
                ? me
                : {
                    ...me,
                    huddleJoinPreviewChannelId: Pe,
                  };
            }),
          Nl = 100,
          nr = "client-ia-history",
          _l = [...(Object.values(So.mH) || [])];
        var Wo = e(1521690892);
        const ml = _(() => {
            try {
              const me = localStorage.getItem(nr);
              return me ? JSON.parse(me) : [];
            } catch (me) {
              return (
                (0, s.Wo)().error("Failed to read IA history from storage", me),
                []
              );
            }
          }, "readStackFromStorage"),
          xo = _((me) => {
            try {
              localStorage.setItem(nr, JSON.stringify(me));
            } catch (ce) {
              (0, s.Wo)().error("Failed to write IA history to storage", ce);
            }
          }, "writeStackToStorage"),
          hl = (0, Js.Ay)(
            {},
            {
              stack: ml(),
            },
            {
              storeKey: "iaHistory",
              persistenceEnabled: !1,
            }
          )
            .on(Wo.nb, (me, ce) => {
              if (!ce || _l.includes(ce == null ? void 0 : ce.primaryView))
                return me;
              const Pe = 1e3,
                Be = [ce].concat(me.stack).slice(0, Pe);
              return (
                window.setTimeout(() => xo(Be), 0),
                {
                  stack: Be,
                }
              );
            })
            .on(Wo.JG, (me, ce) => {
              const Pe = me.stack.indexOf(ce);
              if (Pe === -1) return me;
              const Be = me.stack.slice();
              return (
                Be.splice(Pe, 1),
                window.setTimeout(() => xo(Be), 0),
                {
                  stack: Be,
                }
              );
            })
            .on(Wo.Si, (me) => {
              if (!me.stack) return me;
              const ce = me.stack.slice(0, 1);
              return (
                window.setTimeout(() => xo(ce), 0),
                {
                  stack: ce,
                }
              );
            })
            .on(Wo.kM, () => {
              const me = [];
              return (
                xo(me),
                {
                  stack: me,
                }
              );
            }),
          vl = !0,
          sr = (0, Js.Ay)({}, vl, {
            storeKey: "isClient",
            persistenceEnabled: !1,
          });
        sr.meta = {
          name: "createReducer",
          key: "createReducerisClientReducer",
        };
        const El = sr;
        let or;
        try {
          var na;
          or = (na = (0, Me.W6)(se.Vb)) !== null && na !== void 0 ? na : void 0;
        } catch {}
        let ar;
        try {
          var sa;
          ar = (sa = (0, Me.W6)(se._J)) !== null && sa !== void 0 ? sa : void 0;
        } catch {}
        let rr;
        try {
          var oa;
          rr = (oa = (0, Me.W6)(se.UY)) !== null && oa !== void 0 ? oa : void 0;
        } catch {}
        const fl = {
            invertedSidebar: or,
            peeksEnabledOnMouseEnter: ar,
            zoom: rr,
          },
          pl = (0, Js.Ay)({}, fl, {
            storeKey: "nonBBMSettings",
            persistenceEnabled: !1,
          })
            .on(Y.p$, (me, ce) => ({
              ...me,
              invertedSidebar: ce,
            }))
            .on(Y.rB, (me, ce) => ({
              ...me,
              peeksEnabledOnMouseEnter: ce,
            }))
            .on(Y.x8, (me, ce) => ({
              ...me,
              zoom: ce,
            }));
        var gl = e(1838435986),
          Al = e(3180420025),
          Fo = e(1302213854);
        const yl = {
            shouldLogAppBootMetrics: !0,
            shouldLogTeamSwitchMetrics: !1,
            shouldLogTTVMetrics: !0,
            shouldLogTTUMetrics: !0,
          },
          Tl = (0, Js.Ay)({}, yl, {
            storeKey: "telemetry",
            persistenceEnabled: !0,
          })
            .on(Fo.C7, (me, ce) => ({
              ...me,
              shouldLogAppBootMetrics: ce,
            }))
            .on(Fo.Mb, (me, ce) => ({
              ...me,
              shouldLogTeamSwitchMetrics: ce,
            }))
            .on(Fo.Ln, (me, ce) => ({
              ...me,
              shouldLogTTVMetrics: ce,
            }))
            .on(Fo.UM, (me, ce) => ({
              ...me,
              shouldLogTTUMetrics: ce,
            }));
        var aa = e(2696160384);
        const ir = {
            isDocked: !1,
            miniPlayerConfig: {
              fileId: "",
            },
          },
          Il = (0, Js.Ay)({}, ir, {
            storeKey: "videoClips",
            persistenceEnabled: !1,
          })
            .on(aa.FI, (me, ce) => ({
              ...me,
              isDocked: ce,
            }))
            .on(aa.D_, (me, ce) => {
              let {
                fileId: Pe,
                teamId: Be,
                mediaId: nt,
                channelId: Xe,
                threadTs: It,
                timeElapsed: tt,
                isPlaying: wt,
              } = ce;
              return {
                ...me,
                miniPlayerConfig: {
                  fileId: Pe,
                  teamId: Be,
                  mediaId: nt,
                  channelId: Xe,
                  threadTs: It,
                  timeElapsed: tt,
                  isPlaying: wt,
                },
              };
            })
            .on(aa.Sr, (me) => ({
              ...me,
              ...ir,
            }));
        var Cl = e(9813790040),
          Ml = e(4256476552),
          Ol = e(894072650);
        function lr() {
          let { extraMiddlewares: me = [], customEnhancers: ce = [] } =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          const Pe = (0, Zi.A)({
              teamOrEnterpriseId: "client",
              middlewares: [
                ...me,
                Qi.A,
                n.P,
                Xi.A,
                Is,
                gs,
                ui,
                Ai,
                gi,
                on,
                Un,
                cs,
                sn,
                Cn,
                Ji.N,
                di,
              ],
              customEnhancers: ce,
            }),
            Be = (0, $i.A)({
              workspaces: Ui,
              window: Ml.A,
              telemetry: Tl,
              connectivity: il.A,
              accessibility: tl.A,
              accessibilityPersistent: el.A,
              desktop: ll.A,
              clientTheme: rl.A,
              iaHistory: hl,
              mainWindowHistory: rt,
              isClient: El,
              isState: Yi.G,
              workspaceLayout: Ol.A,
              viewLayout: Cl.A,
              noop: gl.A,
              clientHuddles: ul,
              clientSideEffects: al,
              recents: xt,
              overlays: Al.y,
              tabSoda: Di,
              fullscreen: cl.G,
              bbm: nl.Y,
              videoClips: Il,
              nonBBMSettings: pl,
            });
          return (0, t.Yl)(Be, Pe);
        }
        _(lr, "createClientStore");
        function Dl() {
          const me = (0, l.getClientStoreInstance)();
          if (me)
            return (
              (0, s.Wo)().warn(
                "[CLIENT-STORE]",
                "we\u2019ve called configureClientStore before and already have an instance. This is likely a programming error."
              ),
              me
            );
          const ce = lr();
          (0, l.setClientStoreInstance)(ce);
          const { clientSideEffectsMap: Pe, sideEffectsMap: Be } = (0, qi.g)(
            $t
          );
          if (Object.keys(Be).length)
            throw new Error(
              "Passed non-client side effects into client store. This is a programming error and the app will not work properly."
            );
          return ce.dispatch(ta(Pe)), ce;
        }
        _(Dl, "configureClientStore");
        const Fl = {
          createClientStore: lr,
        };
      },
      3803432550: (W, A, e) => {
        "use strict";
        e.d(A, {
          x: () => c,
        });
        var t = e(8148939499),
          n = e(6508028729),
          s = e(4423055085),
          i = e(4496040127),
          d = e(4919185865),
          o = e(1535672935),
          a = e(9012396182),
          r = e(6533394955);
        function c(l) {
          if (!l || (0, r.getClientStoreInstance)()) return;
          const m = (0, d.A)(),
            v = (0, i.VA)() ? (0, t.A)() : [l],
            E = (0, n.A)();
          m.dispatch(
            (0, o.initialize)({
              focusedWorkspace: l,
              allWorkspaces: v,
              workspacesMeta: E,
            })
          ),
            u(m);
        }
        _(c, "initializeClientStore");
        function u(l) {
          (0, s.ul)("clientStore", l),
            (0, s.zv)("teamIds", () => {
              const v = l.getState();
              return a.getAllWorkspaces(v);
            }),
            (0, s.zv)("activeTeam", () => {
              const v = l.getState(),
                E = a.getFocusedWorkspace(v);
              return window.slackDebug[E];
            }),
            (0, s.zv)("activeTeamId", () => {
              const v = l.getState();
              return a.getFocusedWorkspace(v);
            }),
            (0, s.zv)("activeEnterprise", () => {
              var v, E;
              const T = l.getState(),
                g =
                  (v = a.getWorkspacesMeta(T)) === null ||
                  v === void 0 ||
                  (E = v[a.getFocusedWorkspace(T)]) === null ||
                  E === void 0
                    ? void 0
                    : E.enterprise_id;
              return window.slackDebug[g];
            });
          const m = {};
          Object.keys(o).forEach((v) => {
            m[v] = function () {
              for (
                var E = arguments.length, T = new Array(E), g = 0;
                g < E;
                g++
              )
                T[g] = arguments[g];
              return l.dispatch(o[v](...T));
            };
          }),
            Object.keys(a).forEach((v) => {
              m[v] = function () {
                for (
                  var E = arguments.length, T = new Array(E), g = 0;
                  g < E;
                  g++
                )
                  T[g] = arguments[g];
                return a[v](l.getState(), ...T);
              };
            }),
            (0, s.ul)("clientStore.workspaces", m);
        }
        _(u, "setupClientStoreDebugger");
      },
      2870224675: (W, A, e) => {
        "use strict";
        e.d(A, {
          Uz: () => o,
          ez: () => s,
          nz: () => n,
          oT: () => d,
          yw: () => i,
        });
        var t = e(2140362605);
        const n = (0, t.Ay)("Adds a new emtpy tab-soda tab");
        n.meta = {
          name: "createAction",
          key: "createActiontabSodaAddNewTab",
          description: "Adds a new emtpy tab-soda tab",
        };
        const s = (0, t.Ay)(
          "Removes the recent history entry from a tab soda tab"
        );
        s.meta = {
          name: "createAction",
          key: "createActiontabSodaPopHistoryForTab",
          description: "Removes the recent history entry from a tab soda tab",
        };
        const i = (0, t.Ay)("Select a tab by id");
        i.meta = {
          name: "createAction",
          key: "createActiontabSodaSelectTab",
          description: "Select a tab by id",
        };
        const d = (0, t.Ay)("Remove a tab soda tab");
        d.meta = {
          name: "createAction",
          key: "createActiontabSodaRemoveTab",
          description: "Remove a tab soda tab",
        };
        const o = (0, t.Ay)("Re-order tab soda tabs");
        o.meta = {
          name: "createAction",
          key: "createActiontabSodaReorderTabs",
          description: "Re-order tab soda tabs",
        };
      },
      9932860381: (W, A, e) => {
        "use strict";
        e.d(A, {
          Fp: () => o,
          Xy: () => d,
          fe: () => i,
        });
        var t = e(6471801899),
          n = e(8040098042),
          s = e(2960290117);
        function i(a, r) {
          const c = r.indexOf(a),
            u = c < r.length - 1 ? c + 1 : c - 1;
          return u >= 0 ? r[u] : void 0;
        }
        _(i, "tabSodaGetNextActiveTab");
        function d(a) {
          return (0, n.A)(a) || a === "thread";
        }
        _(d, "canOpenInTabSodaTab");
        function o(a) {
          return (
            (0, s.Ay)(a) ||
            (0, t.pI)(a) ||
            (0, t.or)(a) ||
            (0, n.A)(a) ||
            a === "thread" ||
            a === "comment_thread"
          );
        }
        _(o, "tabSodaCanViewBeEjected");
      },
      7176966205: (W, A, e) => {
        "use strict";
        e.d(A, {
          $: () => v,
        });
        var t = e(5267010247),
          n = e(8822892075),
          s = e(395285811),
          i = e(8393662842),
          d = e(3634593162),
          o = e(3110884894),
          a = e(2823938397),
          r = e(8040098042),
          c = e(2870224675),
          u = e(1031947056),
          l = e(6533394955),
          m = e(937317117);
        const v = (0, u.Ay)("Opens a view in a new tab", function (E, T) {
          let { viewId: g, params: I } =
            arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          const f = T(),
            y = (0, c.nz)({
              setAsActive: !0,
            });
          if (!g) return (0, l.dispatchForClientStore)(y);
          if (g && (0, r.A)(g))
            return (0, l.dispatchForClientStore)(y), E((0, t.o)((0, n.pr)(g)));
          if (g === "thread" && I != null && I.threadId) {
            const { channelId: M, threadTs: p } = (0, o.Sb)(
              I == null ? void 0 : I.threadId
            );
            if (M && p) {
              if (((0, l.dispatchForClientStore)(y), (0, s.OR)(f, M))) {
                const P = (0, d.l)(M),
                  S = (0, m.Lp)(f, P);
                if (S && (0, a.uz)(S) && (0, i.DQ)(S))
                  return E(
                    (0, t.o)(
                      (0, n.m3)({
                        channelId: M,
                        threadTs: p,
                      })
                    )
                  );
              }
              const {
                replyTs: C,
                highlightRoot: h,
                dangerouslyOverrideRouting: D,
              } = I;
              return E(
                (0, t.o)(
                  (0, n.UX)({
                    channelId: M,
                    threadTs: p,
                    replyTs: C,
                    highlightRoot: h,
                    dangerouslyOverrideRouting: D,
                  })
                )
              );
            }
          }
        });
        v.meta = {
          name: "createThunk",
          key: "createThunkmaybeOpenInTabSodaTab",
          description: "Opens a view in a new tab",
        };
      },
      4326266690: (W, A, e) => {
        "use strict";
        e.d(A, {
          B: () => d,
          fK: () => i,
          lw: () => a,
          ud: () => o,
        });
        var t = e(9932860381),
          n = e(2384831516),
          s = e(3193155968);
        const i = (0, n.Mz)((r) => r.tabSoda);
        i.meta = {
          name: "createSelector",
          key: "createSelectorgetTabSoda",
          description: (r) => r.tabSoda,
        };
        const d = (0, n.Mz)((r) => {
          const c = i(r);
          return c.activeTab ? c.tabs[c.activeTab] : [];
        });
        d.meta = {
          name: "createSelector",
          key: "createSelectortabSodaGetRecentsForActiveTab",
          description: (r) => {
            const c = i(r);
            return c.activeTab ? c.tabs[c.activeTab] : [];
          },
        };
        const o = (0, n.Mz)((r) => {
          const c = i(r);
          return c.activeTab ? c.tabs[c.activeTab].length < 2 : !1;
        });
        o.meta = {
          name: "createSelector",
          key: "createSelectortabSodaIsBackDisabledForActiveTab",
          description: (r) => {
            const c = i(r);
            return c.activeTab ? c.tabs[c.activeTab].length < 2 : !1;
          },
        };
        const a = (0, n.Mz)((r, c) => {
          var u, l, m;
          const E = (u = i(r).tabs[c]) === null || u === void 0 ? void 0 : u[0],
            T = E == null ? void 0 : E.teamId;
          if (!E || !T) return !1;
          const g = E == null ? void 0 : E[s.jf],
            I =
              E == null ||
              (l = E[g]) === null ||
              l === void 0 ||
              (m = l[s.mq.Primary]) === null ||
              m === void 0
                ? void 0
                : m.id;
          return !!I && (0, t.Fp)(I);
        });
        a.meta = {
          name: "createSelector",
          key: "createSelectortabSodaCanEjectTab",
          description: (r, c) => {
            var u, l, m;
            const E =
                (u = i(r).tabs[c]) === null || u === void 0 ? void 0 : u[0],
              T = E == null ? void 0 : E.teamId;
            if (!E || !T) return !1;
            const g = E == null ? void 0 : E[s.jf],
              I =
                E == null ||
                (l = E[g]) === null ||
                l === void 0 ||
                (m = l[s.mq.Primary]) === null ||
                m === void 0
                  ? void 0
                  : m.id;
            return !!I && (0, t.Fp)(I);
          },
        };
      },
      8620339321: (W, A, e) => {
        "use strict";
        e.d(A, {
          UN: () => m,
          oX: () => E,
          wm: () => v,
        });
        var t = e(8224196674),
          n = e(109860581),
          s = e(2870224675),
          i = e(9932860381),
          d = e(1031947056),
          o = e(6533394955),
          a = e(9108490430),
          r = e(3193155968),
          c = e(9012396182),
          u = e(2554594353);
        const l = (0, d.Ay)(
          "Update currently visible viewset as part of TabSoda tab switching",
          (T, g, I) => {
            (0, o.dispatchForTeamId)(I.teamId, (0, a.cQ)(I)),
              c.getFocusedWorkspace &&
                u.b &&
                (0, c.getFocusedWorkspace)(g()) !== I.teamId &&
                T(
                  (0, u.b)({
                    teamId: I.teamId,
                    fromNavigation: !0,
                  })
                );
            const { tabSoda: f } = g(),
              y = f.activeTab;
            if (y) {
              const M = f.tabs[y][0],
                p = M[r.jf],
                O = M[p],
                C = I[r.jf],
                h = I[C];
              if (!h) return;
              (0, o.dispatchForTeamId)(
                I.teamId,
                (0, t.C)({
                  prevViewSet: O,
                  prevTab: p,
                  nextViewSet: h,
                  nextTab: C,
                  windowId: r.N2,
                  navigateParams: {},
                  triggerType: n.w.HISTORY_NAVIGATION,
                })
              );
            }
          }
        );
        l.meta = {
          name: "createThunk",
          key: "createThunkupdateVisibleView",
          description:
            "Update currently visible viewset as part of TabSoda tab switching",
        };
        const m = (0, d.Ay)("Switch current TabSoda tab", (T, g, I) => {
          let { tabId: f } = I;
          const { tabSoda: y } = g();
          if (y.activeTab === f) return;
          const M = y.tabs[f][0];
          T(l(M)), T((0, s.yw)(f));
        });
        m.meta = {
          name: "createThunk",
          key: "createThunktabSodaSwitchTab",
          description: "Switch current TabSoda tab",
        };
        const v = (0, d.Ay)(
          "Close active TabSoda tab and switch to the nearest open tab",
          (T, g, I) => {
            let { tabId: f } = I;
            const { tabSoda: y } = g(),
              M = y.activeTab,
              p = (0, i.fe)(M, y.tabOrder);
            if (f === M && p) {
              const O = y.tabs[p][0];
              T(l(O));
            }
            T((0, s.oT)(f));
          }
        );
        v.meta = {
          name: "createThunk",
          key: "createThunktabSodaCloseTab",
          description:
            "Close active TabSoda tab and switch to the nearest open tab",
        };
        const E = (0, d.Ay)(
          "Go back in history in a currently active TabSoda tab",
          (T, g) => {
            const { tabSoda: I } = g(),
              f = I.activeTab;
            if (I.tabs[f].length < 2) return;
            const y = I.tabs[f][1];
            T(l(y)), T((0, s.ez)(f));
          }
        );
        E.meta = {
          name: "createThunk",
          key: "createThunktabSodaGoBackInActiveTab",
          description: "Go back in history in a currently active TabSoda tab",
        };
      },
      4766735965: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => I,
        });
        var t = e(2664504268),
          n = e(9121100949),
          s = e(2527782504),
          i = e(2495064448),
          d = e(2689960678),
          o = e(735940183),
          a = e(4496040127),
          r = e(9012396182),
          c = e(1031947056),
          u = e(6533394955),
          l = e(8439865561),
          m = e(1201539379),
          v = e(6290537170),
          E = e(9733150292);
        const T = new o.Ay("team_picker"),
          g = (0, c.Ay)(
            "Sets whether or not the protype full rail workspace switcher is showing",
            function (f, y) {
              let {
                  shouldTransitionFocus: M = !1,
                  shouldAnnounceStateChange: p = !1,
                } =
                  arguments.length > 2 && arguments[2] !== void 0
                    ? arguments[2]
                    : {},
                O = arguments.length > 3 ? arguments[3] : void 0;
              const C = y();
              if (!(0, a.VA)()) return;
              const h = (0, u.getClientStoreInstance)().getState();
              var D;
              if (
                ((D = (0, r.getAllWorkspaces)(h)) !== null && D !== void 0
                  ? D
                  : d.Ml
                ).length <= 1
              )
                return;
              const S = (0, v.v8)(C),
                b = !S;
              (0, E.q9)(n.WU, b),
                f((0, m.mV)(b)),
                (0, u.dispatchForClientStore)((0, m.mV)(b));
              const K = T.t("Workspaces tablist expanded"),
                x = T.t("Workspaces tablist collapsed");
              if (
                (p &&
                  f(
                    (0, l.rl)({
                      message: S ? x : K,
                      uuid: (0, t.A)(),
                    })
                  ),
                !M)
              )
                return;
              const { transitionFocusTo: B } = (0, i.$P)(y(), O),
                U = S
                  ? s.Ay.WORKSPACE_SWITCHER_MENU_BUTTON
                  : s.Ay.WORKSPACE_SWITCHER_TAB_LIST;
              B({
                focusKey: U,
              });
            }
          );
        g.meta = {
          name: "createThunk",
          key: "createThunktoggleWorkspaceSwitcherVisibility",
          description:
            "Sets whether or not the protype full rail workspace switcher is showing",
        };
        const I = g;
      },
      9143148823: (W, A, e) => {
        "use strict";
        e.d(A, {
          Ay: () => i,
          c: () => s,
        });
        var t = e(6422693406);
        let n = null;
        function s() {
          return n;
        }
        _(s, "getLastTeamSwitchTimestamp");
        const i = _((o) => {
          let { prevTeamId: a, nextTeamId: r, navigationTimestamp: c } = o;
          return a === r || !c || (n = c), t.S.resolve();
        }, "__WEBPACK_DEFAULT_EXPORT__");
        Object.defineProperty(
          {
            lastTeamSwitchTimestamp: null,
          },
          "lastTeamSwitchTimestamp",
          {
            get: () => n,
            set: (o) => {
              n = o;
            },
          }
        );
      },
      859310680: (W, A, e) => {
        "use strict";
        e.d(A, {
          go: () => X,
          xy: () => G,
        });
        var t = e(8426925643),
          n = e(9733150292),
          s = e(4588514760),
          i = e(4423055085),
          d = e(9421999304),
          o = e(9681594967),
          a = e(2325478352),
          r = e(6917917245),
          c = e(7770551414),
          u = e(6470070112),
          l = e(796111729),
          m = e(2250002584),
          v = e(5057176955),
          E = e(264208541),
          T = e(9012396182),
          g = e(8847766420),
          I = e(5583430912),
          f = e(6533394955),
          y = e(9101533895),
          M = e(7765212398),
          p = e(4761125736),
          O = e(8276911661),
          C = e(7115106069),
          h = e(8233775522);
        function D() {
          var q, oe;
          return {
            hardware_concurrency:
              (q = window.navigator) === null || q === void 0
                ? void 0
                : q.hardwareConcurrency,
            device_memory:
              (oe = window.navigator) === null || oe === void 0
                ? void 0
                : oe.deviceMemory,
          };
        }
        _(D, "getDeviceStats");
        function P() {
          const q =
              localStorage == null
                ? void 0
                : localStorage.getItem("client_metrics_client_redux_size"),
            oe = (0, E.Hn)(),
            z = (0, E.Ey)(),
            Ae = oe && z ? (oe / z).toPrecision(4) : null;
          return {
            total_client_redux_size: q,
            js_heap_used: oe,
            js_heap_total: z,
            js_heap_used_percentage: Ae,
          };
        }
        _(P, "getPerfMemoryStats");
        function S() {
          const q =
            localStorage == null
              ? void 0
              : localStorage.getItem("client_metrics_app_stats");
          if (!q) return {};
          try {
            return JSON.parse(q);
          } catch (oe) {
            return (
              (0, l.Wo)().warn(
                "Error parsing appStats in localStorage:",
                q,
                oe
              ),
              {}
            );
          }
        }
        _(S, "getDesktopAppStats");
        function b() {
          return {
            ...(0, t.JP)(),
            num_started_sockets: (0, c.eK)(),
            object_store_redux_group: (0, r.B9)(a.Wv),
          };
        }
        _(b, "getClientStateTags");
        function K(q, oe) {
          const z = oe.startSpan("add_tags:channels_info", {
              tags: {
                _auto_analytics: "",
              },
            }),
            Ae = Object.values((0, y.DM)(q)).length,
            ae = Object.values((0, y.h3)(q)).length,
            de = Object.values((0, y._B)(q)).length,
            ve = Object.values((0, y.FS)(q)).length;
          return (
            z.close(),
            {
              num_channels_in_redux: Ae,
              num_all_channels_user_is_in: ae,
              num_dms_user_is_in: de,
              num_group_dms_user_is_in: ve,
            }
          );
        }
        _(K, "getChannelInfoTags");
        function x(q, oe) {
          const z = oe.startSpan("add_tags:drafts_info", {
              tags: {
                _auto_analytics: "",
              },
            }),
            Ae = Object.keys((0, M.Hw)(q) || {}).length,
            ae = (0, v.sZ)((0, M.my)(q));
          return (
            z.close(),
            {
              num_drafts: Ae,
              drafts_store_size: ae,
            }
          );
        }
        _(x, "getDraftsInfoTags");
        function B(q) {
          return {
            user_locale: (0, d.JK)({
              teamOrEnterpriseId: (0, g.JY)(q),
            }),
          };
        }
        _(B, "getLocaleTags");
        function U(q) {
          return {
            active_collab_instance_count: (0, I.Ui)(),
            open_quip_embed_instance_count: (0, C.oj)(q).length,
            canvas_child_window_count: (0, s.CJ)(),
          };
        }
        _(U, "getCanvasTags");
        const R = _((q) => {
            const oe = ["selector_memo"],
              z = {};
            return (
              oe.forEach((ae) => {
                const de = (0, p._Z)(q, ae, !1);
                de && (z[ae] = de);
              }),
              [].forEach((ae) => {
                const de = (0, r.B9)(ae);
                de !== r.dw.NoGroup && (z[ae] = de);
              }),
              z
            );
          }, "getExperimentTagsForTraces"),
          G = _((q, oe) => {
            const z = oe ?? [],
              Ae = {},
              ae = (0, p.Vs)(q),
              de = Date.now() / 1e3,
              ve = 60 * 60 * 24 * 7 * 4;
            for (const [Se, Ee] of Object.entries(ae)) {
              const { trigger: be, schedule_ts: Ce } = Ee;
              (z.includes(Se) ||
                (be &&
                  Ce &&
                  be !== "finished" &&
                  be !== "force_debug" &&
                  Ce > de - ve)) &&
                (Ae[Se] = Ee.group);
            }
            return Ae;
          }, "getExperimentTags");
        function H(q) {
          return {
            num_members_in_redux: (0, O.I_)(q).length,
          };
        }
        _(H, "getMembersTags");
        function F(q) {
          const oe = (0, n.W6)("lastColdBootTs"),
            z = (0, h.pp)(q);
          return {
            last_cold_boot_ts: oe,
            boot_type: z,
          };
        }
        _(F, "getConfigTags");
        function V() {
          return {
            is_in_active_huddle: (0, u.NZ)(),
          };
        }
        _(V, "getHuddleTags");
        function X(q) {
          const oe = (0, f.getStateForClientStore)();
          if (!oe) return {};
          const z = q ?? (0, T.getFocusedWorkspace)(oe),
            Ae = (0, f.getStateByTeamId)(z),
            ae = (0, m.F)(),
            de = ae.createTrace({
              traceName: "add_tags:performance_tracing_tags",
            }),
            ve = (0, t.Kh)(z),
            Se = b(),
            Ee = K(Ae, de),
            be = x(Ae, de),
            Ce = D(),
            Z = P(),
            $ = S(),
            N = B(Ae),
            L = H(Ae),
            w = F(Ae),
            k = o.qV.getTraceTags(),
            J = R(Ae),
            ee = U(Ae),
            ne = V(),
            pe = {
              ...ve,
              ...Se,
              ...Ee,
              ...be,
              ...Ce,
              ...Z,
              ...$,
              ...N,
              ...L,
              ...w,
              ...k,
              ...J,
              ...ee,
              ...ne,
            };
          return ae.reportTrace(de), pe;
        }
        _(X, "getPerformanceTracingTags"),
          (0, i.zv)("performanceTracingTags", X);
      },
      3614984351: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => Ve,
        });
        var t = e(5824283093),
          n = e(6422693406),
          s = e(9733150292),
          i = e(4979734995),
          d = e(348699080),
          o = e(581167618),
          a = e(9539184071),
          r = e(2308565927),
          c = e(6084388622),
          u = e(735940183);
        const l = new u.Ay("sign_in");
        function m(xe) {
          const {
            isSSB: je,
            isSSBSignIn: Fe,
            hasPromoOffer: He,
            shouldRedirect: Oe,
            redirectURL: Ye,
            loggedInTeams: at,
            entryPoint: _t = "",
          } = xe;
          return t.createElement(
            "div",
            {
              className: "align_center",
              "data-qa": "signedin_workspaces",
            },
            !He &&
              !je &&
              t.createElement(
                "p",
                {
                  className: "small_bottom_margin",
                },
                l.t(
                  "You're already signed in to {loggedInTeams, plural, =1 {this workspace} other {these workspaces}}:",
                  {
                    loggedInTeams: at,
                  }
                )
              ),
            t.createElement(
              "p",
              {
                className: "col span_4_of_6 margin_auto float_none",
              },
              at.map((pt, Qe) =>
                t.createElement(
                  c.z9,
                  {
                    key: pt.id,
                    "data-qa": `signedin_workspace_link_${Qe + 1}`,
                    className: "team-signin-link small_margin",
                    "data-team-id": pt.id,
                    autoClogProps: {
                      elementName: "team_domain",
                      elementValue: pt.id.toString(),
                      entryPoint: _t,
                      onClick: {
                        enableClogAction: !0,
                      },
                    },
                    href: Fe
                      ? `${pt.url}ssb/signin_redirect`
                      : `${pt.url}${Oe ? `?redir=${Ye}` : ""}`,
                    "aria-label": l.t("Go to {teamName} on Slack", {
                      teamName: pt.name,
                    }),
                    type: "outline",
                  },
                  pt.name
                )
              )
            )
          );
        }
        _(m, "SignedInWorkspaces");
        var v = e(1224315998),
          E = e(4481313819),
          T = e(8739505998),
          g = e(1610251172),
          I = e(6968387112),
          f;
        (function (xe) {
          (xe.INVALID_CODE = "invalid_pin"),
            (xe.RATE_LIMITED = "ratelimited"),
            (xe.SMS_RATE_LIMITED = "two_factor_sms_rate_limited"),
            (xe.TOO_MANY_ATTEMPTS = "two_factor_too_many_attempts"),
            (xe.INTERNAL_ERROR = "internal_error");
        })(f || (f = {}));
        var y;
        (function (xe) {
          (xe.SMS = "sms"),
            (xe.APP = "app"),
            (xe.EMAIL = "email"),
            (xe.EMERGENCY = "emergency");
        })(y || (y = {}));
        var M;
        (function (xe) {
          (xe.REQUEST_CODE = "request_primary"),
            (xe.REQUEST_BACKUP = "request_backup"),
            (xe.SUBMIT_PRIMARY = "submit_primary"),
            (xe.SUBMIT_BACKUP = "submit_backup"),
            (xe.SUBMIT_EMERGENCY = "submit_emergency");
        })(M || (M = {}));
        const p = new u.Ay("sign_in"),
          O = {
            elementName: "help_button",
            onClick: {
              enableClogAction: !0,
            },
          },
          C = _((xe) => {
            const je =
              xe.action === M.REQUEST_BACKUP || xe.action === M.SUBMIT_BACKUP;
            return (
              (je && xe.twoFactorBackupType === y.APP) ||
              (!je && xe.twoFactorType === y.APP)
            );
          }, "currentMethodIsApp"),
          h = _(
            (xe) =>
              C(xe)
                ? p.t("Problems with your authentication app?")
                : p.t("Problems with your code?"),
            "renderProblemsString"
          ),
          D = _(
            (xe) =>
              C(xe)
                ? t.createElement(
                    "div",
                    {
                      className: "subtle_silver small medium_top_margin",
                    },
                    t.createElement(
                      "p",
                      {
                        className: "no_bottom_margin",
                      },
                      p.t("Check your authentication app for your code.")
                    ),
                    t.createElement(
                      "p",
                      null,
                      p.rt(
                        "<a>Having trouble finding your code?</a>",
                        null,
                        (je) => {
                          let { tag: Fe, text: He } = je;
                          return Fe === "a"
                            ? t.createElement(
                                T.A,
                                {
                                  href: `https://${(0,
                                  I.qF)()}/help/articles/204509068-Enabling-two-factor-authentication`,
                                  target: "_blank",
                                },
                                He
                              )
                            : null;
                        }
                      )
                    ),
                    t.createElement(
                      "p",
                      null,
                      p.rt(
                        "If your app is unavailable, use a <a>backup code</a>.",
                        null,
                        (je) => {
                          let { tag: Fe, text: He } = je;
                          return Fe === "a"
                            ? t.createElement(
                                T.A,
                                {
                                  href: `https://${(0,
                                  I.qF)()}/help/articles/204509068#troubleshoot-2fa`,
                                  target: "_blank",
                                },
                                He
                              )
                            : null;
                        }
                      )
                    )
                  )
                : t.createElement(
                    "p",
                    {
                      className: "align_left subtle_silver small",
                    },
                    p.rt(
                      "You can also try a backup code, if you have one. For other issues, read more about <a>two-factor authentication</a>, or contact your workspace administrator for help.",
                      null,
                      (je) => {
                        let { tag: Fe, text: He } = je;
                        return Fe === "a"
                          ? t.createElement(
                              T.A,
                              {
                                href: `https://${(0,
                                I.qF)()}/help/articles/204509068-Enabling-two-factor-authentication`,
                                target: "_blank",
                              },
                              He
                            )
                          : null;
                      }
                    )
                  ),
            "renderProblems"
          );
        D.displayName = "renderProblems";
        const P = _((xe) => {
          const [je, Fe] = (0, t.useState)(!1);
          return t.createElement(
            "div",
            {
              className: "p-enter-code__help_button",
            },
            t.createElement(
              T.A,
              {
                tabIndex: 0,
                className: "p-enter-code__get_help_link",
                onClick: () => Fe(!je),
                autoClogProps: O,
              },
              t.createElement(g.A, {
                type: "question-circle",
              }),
              " ",
              h(xe)
            ),
            je &&
              t.createElement(
                "div",
                {
                  className: "send_code_block",
                },
                xe.children,
                t.createElement(
                  "div",
                  {
                    className: "col span_4_of_6 float_none margin_auto",
                  },
                  t.createElement("hr", {
                    className: "medium_bottom_margin",
                  }),
                  D(xe)
                )
              )
          );
        }, "GetHelpButton");
        P.displayName = "GetHelpButton";
        var S = e(9867500491),
          b = e(5255740490),
          K = e(4505564445),
          x = e(219228829),
          B = e(3700949338);
        function U() {
          return (
            (U =
              Object.assign ||
              function (xe) {
                for (var je = 1; je < arguments.length; je++) {
                  var Fe = arguments[je];
                  for (var He in Fe)
                    Object.prototype.hasOwnProperty.call(Fe, He) &&
                      (xe[He] = Fe[He]);
                }
                return xe;
              }),
            U.apply(this, arguments)
          );
        }
        _(U, "_extends");
        let R = _(
          class extends t.Component {
            render() {
              const { ariaDescribedBy: je } = this.props;
              return t.createElement(
                "div",
                {
                  className: (0, b.A)("two_factor_input_item", {
                    focused: this.props.hasFocus,
                  }),
                },
                t.createElement("input", {
                  autoComplete: this.props.autocomplete,
                  ref: this.props.refToForward,
                  type: "text",
                  inputMode: "numeric",
                  pattern: "\\d*",
                  value: this.props.value,
                  "aria-disabled": this.props.disabled,
                  disabled: this.props.disabled,
                  maxLength: 1,
                  onKeyDown: this.onKeyDown,
                  onKeyPress: this.onKeyPress,
                  onChange: this.onChange,
                  onFocus: this.props.onFocus,
                  onBlur: this.props.onBlur,
                  onPaste: this.onPaste,
                  "aria-label": this.props.ariaLabel,
                  "aria-describedby": je,
                })
              );
            }
            constructor(...je) {
              super(...je),
                (this.onKeyDown = (Fe) => {
                  switch (Fe.keyCode) {
                    case K.G_: {
                      Fe.currentTarget.value || this.props.moveLeft();
                      return;
                    }
                    case K.UQ:
                      return Fe.preventDefault(), this.props.moveLeft();
                    case K.LE:
                      return Fe.preventDefault(), this.props.moveRight();
                    default:
                      break;
                  }
                }),
                (this.onKeyPress = (Fe) => {
                  !(0, B.A)(Fe.which) &&
                    Fe.charCode &&
                    !(0, x.A)(Fe) &&
                    Fe.preventDefault();
                }),
                (this.onChange = (Fe) => {
                  const He = Fe.target.value;
                  (/^[0-9]$/.test(He) || He === "") && this.props.onChange(He);
                }),
                (this.onPaste = (Fe) => {
                  Fe.preventDefault();
                  const He = window.clipboardData || Fe.clipboardData,
                    Oe = He.getData("text") || He.getData("text/plain"),
                    Ye = /\D/g,
                    at = Oe.replace(Ye, "");
                  this.props.onPaste(at);
                });
            }
          },
          "TwoFactorDigitInput"
        );
        R.displayName = "TwoFactorDigitInput";
        const G = t.forwardRef((xe, je) =>
            t.createElement(
              R,
              U({}, xe, {
                refToForward: je,
              })
            )
          ),
          H = new u.Ay("team_creation");
        let F = _(
          class extends t.Component {
            focusInput(je) {
              const Fe = this.inputRefs[je];
              Fe != null && Fe.current && Fe.current.focus();
            }
            moveLeft(je) {
              je <= 0 || this.focusInput(je - 1);
            }
            moveRight(je) {
              je >= this.state.values.length - 1 || this.focusInput(je + 1);
            }
            isComplete(je) {
              return !je.some((Fe) => !Fe);
            }
            clear() {
              this.setState((je) => ({
                values: je.values.map(() => ""),
                focusedInputIndex: 0,
              })),
                this.focusInput(0);
            }
            onChange(je, Fe) {
              const He = this.state.values.slice();
              (He[je] = Fe),
                this.setState(
                  () => ({
                    values: He,
                  }),
                  () => {
                    Fe &&
                      !this.isComplete(this.state.values) &&
                      this.moveRight(je);
                  }
                );
            }
            componentDidUpdate(je, Fe) {
              var He;
              if (
                (this.state.focusedInputIndex !== -1 &&
                  document.activeElement !==
                    ((He = this.inputRefs[this.state.focusedInputIndex]) ===
                      null || He === void 0
                      ? void 0
                      : He.current) &&
                  this.focusInput(this.state.focusedInputIndex),
                this.props.codeLength !== je.codeLength &&
                  this.onCodeLengthChange(Fe),
                (!this.isComplete(Fe.values) &&
                  this.isComplete(this.state.values)) ||
                  (this.isComplete(this.state.values) &&
                    Fe.values.join("") !== this.state.values.join("")))
              ) {
                const Oe = this.state.values.join("");
                this.props.onFillCode(Oe);
              } else
                Fe.values.join(",") !== this.state.values.join(",") &&
                  this.props.onChange();
            }
            componentDidMount() {
              this.focusInput(0);
            }
            renderInputs(je, Fe) {
              return this.state.values.slice(je, Fe).map((He, Oe) => {
                const Ye = Oe + je;
                return t.createElement(G, {
                  autocomplete: Ye === 0 ? "one-time-password" : "off",
                  key: Ye,
                  ref: this.inputRefs[Ye],
                  moveLeft: () => this.moveLeft(Ye),
                  moveRight: () => this.moveRight(Ye),
                  onChange: (at) => this.onChange(Ye, at),
                  onPaste: this.onPaste,
                  onFocus: () => {
                    this.setState(() => ({
                      focusedInputIndex: Ye,
                    }));
                  },
                  onBlur: () =>
                    this.setState(() => ({
                      focusedInputIndex: -1,
                    })),
                  hasFocus: this.state.focusedInputIndex === Ye,
                  value: this.state.values[Ye],
                  ariaLabel: H.t("digit {inputIndex} of {numberOfInputs}", {
                    inputIndex: Ye + 1,
                    numberOfInputs: this.state.values.length,
                  }),
                  ariaDescribedBy: this.props.ariaDescribedBy,
                  disabled: this.props.disabled,
                });
              });
            }
            render() {
              return t.createElement(
                "div",
                {
                  className: "display_flex align_items_center margin_bottom_50",
                  "data-qa": "confirmation_code_input",
                },
                t.createElement(
                  "div",
                  {
                    className: "display_flex",
                  },
                  this.renderInputs(0, this.props.codeLength)
                )
              );
            }
            constructor(je) {
              super(je),
                (this.onPaste = (Fe) => {
                  const He = this.state.focusedInputIndex;
                  if (He === -1) return;
                  const Oe = this.state.values.length - He,
                    Ye = Fe.substring(0, Oe).split(""),
                    at = this.state.values.slice();
                  Ye.forEach((_t, pt) => {
                    const Qe = pt + He;
                    at[Qe] = _t;
                  }),
                    this.setState(
                      () => ({
                        values: at,
                      }),
                      () => {
                        this.focusInput(
                          Math.min(this.state.values.length - 1, He + Ye.length)
                        );
                      }
                    );
                }),
                (this.onCodeLengthChange = (Fe) => {
                  const He = (0, S.A)(this.props.codeLength, () => "");
                  Fe.values.forEach((Oe, Ye) => {
                    Ye < He.length && (He[Ye] = Oe);
                  }),
                    this.setState(() => ({
                      values: He,
                    })),
                    (this.inputRefs = He.map(() => t.createRef()));
                }),
                (this.state = {
                  values: (0, S.A)(je.codeLength, () => ""),
                  focusedInputIndex: -1,
                }),
                (this.inputRefs = this.state.values.map(() => t.createRef()));
            }
          },
          "TwoFactorCodeInput"
        );
        (F.displayName = "TwoFactorCodeInput"),
          (F.defaultProps = {
            isNumbersOnly: !0,
          });
        const V = new u.Ay("sign_in");
        function X(xe) {
          let je = null;
          return (
            xe.error === f.SMS_RATE_LIMITED
              ? (je = V.rt(
                  "Apologies! There were too many SMS message requests in a short period, so you\u2019ll have to wait a moment to try again."
                ))
              : xe.error === f.INVALID_CODE
              ? (je = V.rt(
                  "Your two-factor authentication code was incorrect. Please try again."
                ))
              : xe.error === f.RATE_LIMITED
              ? (je = V.rt(
                  "You\u2019ve been trying to log in too often. Wait a few minutes and try again."
                ))
              : xe.error === f.TOO_MANY_ATTEMPTS
              ? (je = V.rt(
                  "We\u2019ve detected too many failed attempts to enter a code. For safety we\u2019ve reset your password. Please check your email for further information.",
                  {
                    fallbackHash: "7773426b227dec3b18a254adf97a7e212e998276",
                  }
                ))
              : (je = V.rt("An unknown error occurred.")),
            t.createElement(
              o.Ay,
              {
                className: "p-enter-code-error__alert",
                type: o.QE.boxed,
                icon: "lock-o",
                level: o.A_.error,
                align: o.AO.left,
                "data-qa": "2fa_code_error_alert",
              },
              t.createElement("span", null, je)
            )
          );
        }
        _(X, "EnterCodeError");
        var q = e(2562405183),
          oe = e(3328068409),
          z = e(1236965385);
        function Ae() {
          return (
            (Ae =
              Object.assign ||
              function (xe) {
                for (var je = 1; je < arguments.length; je++) {
                  var Fe = arguments[je];
                  for (var He in Fe)
                    Object.prototype.hasOwnProperty.call(Fe, He) &&
                      (xe[He] = Fe[He]);
                }
                return xe;
              }),
            Ae.apply(this, arguments)
          );
        }
        _(Ae, "enter_code_root_extends");
        const ae = new u.Ay("sign_in"),
          de = 5 * 60 * 1e3,
          ve = {
            elementName: "resend_button",
            onClick: {
              enableClogAction: !0,
            },
          },
          Se = {
            elementName: "backup_button",
            onClick: {
              enableClogAction: !0,
            },
          },
          Ee = {
            elementName: "emergency_backup_button",
            onClick: {
              enableClogAction: !0,
            },
          },
          be = "two_factor_form",
          Ce = "enter-code",
          Z = 6;
        var $;
        (function (xe) {
          (xe.Request = "request_primary"),
            (xe.RequestBackup = "request_backup"),
            (xe.SubmitPrimary = "submit_primary"),
            (xe.SubmitBackup = "submit_backup"),
            (xe.SubmitEmergency = "submit_emergency"),
            (xe.None = "none");
        })($ || ($ = {}));
        function N(xe) {
          const [je, Fe] = (0, t.useState)(xe.twoFactorType),
            [He, Oe] = (0, t.useState)("");
          var Ye;
          const [at, _t] = (0, t.useState)(
              (Ye = xe.action) !== null && Ye !== void 0 ? Ye : $.None
            ),
            [pt, Qe] = (0, t.useState)(!1),
            [ct, Pt] = (0, t.useState)(Z),
            [zt, an] = (0, t.useState)(!1),
            Qt = t.useRef(null),
            tn = t.createRef(),
            Ht = xe.submitOverride,
            {
              trackClogAuthRef: Kt,
              clogAuthLoginClick: qt,
              trackClog: Tn,
            } = (0, z.$A)(),
            Mt = Kt({
              eventId: v.EventId.AUTH_WORKSPACE_ENTER_CODE,
              uiPage: Ce,
            });
          (0, t.useEffect)(() => {
            if (pt) {
              var Ct, Rt;
              if (
                ((Ct = Tn.current) === null ||
                  Ct === void 0 ||
                  (Rt = Ct.track) === null ||
                  Rt === void 0 ||
                  Rt.call(Ct, {
                    elementName: be,
                    elementValue: at,
                  }),
                qt({
                  eventId: v.EventId.AUTH_WORKSPACE_ENTER_CODE,
                  elementName: be,
                  uiPage: Ce,
                  elementValue: at,
                })(),
                Ht && tn.current)
              )
                Qe(!1),
                  an(!0),
                  Ht(He, at, xe.magicLogin).then(() => {
                    var bn;
                    (bn = Qt.current) === null || bn === void 0 || bn.clear(),
                      an(!1);
                  });
              else {
                var Yt;
                (Yt = tn.current) === null || Yt === void 0 || Yt.submit();
              }
            }
          }, [at, pt, tn, Tn, He, Ht, xe.magicLogin, qt]),
            (0, t.useEffect)(() => {
              (xe.error === f.RATE_LIMITED ||
                xe.error === f.TOO_MANY_ATTEMPTS) &&
                an(!0),
                xe.error === f.RATE_LIMITED &&
                  setTimeout(() => {
                    an(!1);
                  }, de);
            }, [xe.error]);
          const Jt = je === y.EMERGENCY,
            dn = at === $.RequestBackup || at === $.SubmitBackup,
            rn =
              !Jt &&
              ((dn && xe.twoFactorBackupType === y.SMS) ||
                (!dn && xe.twoFactorType === y.SMS) ||
                xe.twoFactorType === y.EMAIL),
            gn = xe.twoFactorType === y.EMAIL,
            Zt =
              xe.twoFactorType === y.SMS
                ? ae.rt("Send Code to Primary Phone")
                : ae.rt("Use Authentication App"),
            Vt =
              xe.twoFactorBackupType === y.SMS
                ? ae.rt("Send Code to Backup Phone")
                : ae.rt("Use Backup Authentication App"),
            Sn = _(
              () =>
                t.createElement(
                  c.$n,
                  {
                    type: "outline",
                    onClick: () => {
                      _t(dn ? $.RequestBackup : $.Request), Qe(!0);
                    },
                    autoClogProps: ve,
                  },
                  dn
                    ? ae.rt("Resend Code to Backup Phone")
                    : ae.rt("Resend Code")
                ),
              "ResendButton"
            ),
            ze = _(
              () =>
                t.createElement(
                  c.$n,
                  {
                    type: "outline",
                    onClick: () => {
                      _t(dn ? $.Request : $.RequestBackup), Qe(!0);
                    },
                    autoClogProps: Se,
                  },
                  dn ? Zt : Vt
                ),
              "BackupButton"
            );
          ze.displayName = "BackupButton";
          const Ot = _(() => {
            let Ct;
            return (
              Jt
                ? (Ct = dn ? Vt : Zt)
                : (Ct = ae.rt("Use Emergency Backup Code", {
                    fallbackHash: "722971c61482e6fdf1d0c37abc0d6505ac884e0c",
                  })),
              t.createElement(
                c.$n,
                {
                  type: "outline",
                  onClick: () => {
                    Jt
                      ? (Fe(xe.twoFactorType), Pt(Z))
                      : (Fe(y.EMERGENCY), Pt(xe.emergencyCodeLength));
                  },
                  autoClogProps: Ee,
                },
                Ct
              )
            );
          }, "EmergencyButton");
          Ot.displayName = "EmergencyButton";
          const fn = _(
              () =>
                xe.twoFactorType === y.EMAIL
                  ? xe.isClientApp
                    ? ae.rt("We don\u2019t recognize this device", {
                        fallbackHash:
                          "c7a15a747957cbfe27c485a1f69bd93d726680b6",
                      })
                    : ae.rt("We don\u2019t recognize this browser", {
                        fallbackHash:
                          "c7a15a747957cbfe27c485a1f69bd93d726680b6",
                      })
                  : ae.rt("Enter your authentication code"),
              "GetHeader"
            ),
            ln = _(() => {
              if (Jt)
                return ae.rt(
                  "Check the list of emergency backup codes provided when setting up 2FA.",
                  {
                    fallbackHash: "722971c61482e6fdf1d0c37abc0d6505ac884e0c",
                  }
                );
              if (dn)
                return xe.twoFactorBackupType === y.APP
                  ? ae.rt("Check your authentication app for your code.")
                  : ae.rt(
                      "We\u2019ve sent an authentication code to your backup phone <br></br> for signing into <strong>{teamName}</strong>.",
                      {
                        teamName: xe.teamName,
                      }
                    );
              switch (xe.twoFactorType) {
                case y.APP:
                  return ae.rt("Check your authentication app for your code.");
                case y.EMAIL:
                  return ae.rt(
                    "We hate to be a bother, but we need to do our due diligence to keep your account safe. Please enter the code we\u2019ve just sent to {emailAddress} below to complete your sign-in.",
                    {
                      teamName: xe.teamName,
                      emailAddress: xe.emailAddress,
                      fallbackHash: "482df38f5efc61b851c499bff4080846e0f2b65b",
                    }
                  );
                default:
                  return ae.rt(
                    "We\u2019ve sent an authentication code to your phone for signing into <strong>{teamName}</strong>.",
                    {
                      teamName: xe.teamName,
                    }
                  );
              }
            }, "GetSubheader"),
            it = _((Ct) => {
              let Rt;
              Jt
                ? (Rt = $.SubmitEmergency)
                : (Rt = dn ? $.SubmitBackup : $.SubmitPrimary),
                Oe(Ct),
                _t(Rt),
                Qe(!0);
            }, "onFillCode"),
            Tt = (0, q.d4)(oe.to);
          return t.createElement(
            E.A,
            {
              eventId: v.EventId.TWO_FACTOR_AUTH,
              uiPage: Ce,
              trackClogRef: Mt,
            },
            t.createElement(
              a.A,
              {
                clientTheme: Tt,
              },
              t.createElement(
                r.A,
                {
                  heading: fn(),
                  subHeading: ln(),
                  subHeadingClassName: "p-enter_code_app__view_sub_header",
                },
                xe.codeResent &&
                  t.createElement(
                    o.Ay,
                    {
                      className: "p-enter-code-error__alert",
                      type: o.QE.boxed,
                      icon: "paper-plane",
                      level: o.A_.info,
                      align: o.AO.left,
                      "data-qa": "2fa_code_resent_alert",
                    },
                    gn
                      ? ae.rt(
                          "We\u2019ve sent a fresh code to {emailAddress} for signing into <strong>{teamName}</strong>.",
                          {
                            teamName: xe.teamName,
                            emailAddress: xe.emailAddress,
                            fallbackHash:
                              "ed10973da08d5a9563d5aa07b51e6771457ef6b0",
                            fallbackHashNs: "find_team",
                          }
                        )
                      : ae.rt(
                          "We\u2019ve sent a fresh code to your phone for signing into <strong>{teamName}</strong>.",
                          {
                            teamName: xe.teamName,
                          }
                        )
                  ),
                xe.error &&
                  t.createElement(X, {
                    error: xe.error,
                  }),
                t.createElement(
                  "form",
                  {
                    ref: tn,
                    className: "p-enter_code",
                    method: "POST",
                  },
                  t.createElement(
                    "div",
                    {
                      className: "p-enter_code__input_container",
                    },
                    t.createElement(
                      "fieldset",
                      {
                        className: "p-enter_code__input_fieldset",
                      },
                      t.createElement(
                        "legend",
                        {
                          className: "offscreen",
                        },
                        ae.rt("{codeLength}-digit confirmation code", {
                          codeLength: ct,
                          fallbackHash:
                            "0279e13b54733feec1317a9d5a3f36bfe1b56e30",
                        })
                      ),
                      t.createElement(F, {
                        ref: Qt,
                        onFillCode: it,
                        onChange: () => {},
                        hideDash: !0,
                        error: xe.error,
                        disabled: zt,
                        codeLength: ct,
                      }),
                      t.createElement("input", {
                        type: "hidden",
                        name: "2fa_magiclogin",
                        value: xe.magicLogin,
                      }),
                      xe.redir.length > 0 &&
                        t.createElement("input", {
                          type: "hidden",
                          name: "redir",
                          value: xe.redir,
                        }),
                      t.createElement("input", {
                        type: "hidden",
                        name: "remember",
                        value: xe.remember ? "1" : "0",
                      }),
                      t.createElement("input", {
                        type: "hidden",
                        name: "has_remember",
                        value: xe.hasRemember,
                      }),
                      t.createElement("input", {
                        type: "hidden",
                        name: "2fa_code",
                        value: He,
                      }),
                      t.createElement("input", {
                        type: "hidden",
                        name: "2fa_action",
                        value: at,
                      })
                    )
                  )
                ),
                t.createElement(
                  P,
                  Ae({}, xe),
                  t.createElement(
                    "div",
                    {
                      className: "p-enter-code__button",
                    },
                    rn && t.createElement(Sn, null),
                    xe.twoFactorBackupType && !Jt && t.createElement(ze, null),
                    !gn && t.createElement(Ot, null)
                  )
                ),
                xe.loggedInTeams.length > 0 &&
                  t.createElement(
                    "div",
                    {
                      className: "p-enter-code__logged_in_teams",
                    },
                    t.createElement(m, Ae({}, xe))
                  )
              )
            )
          );
        }
        _(N, "EnterCodeRoot");
        var L = e(7515251865),
          w = e(4979382452),
          k = e(3602521375),
          J = e(4636370173),
          ee = e(2465132699),
          ne = e(8523371695),
          pe = e(3606117573),
          Me = e(8029613601),
          ke = e(4947127560),
          ge = e(9310872914),
          fe = e(6533394955),
          re = e(3051824855);
        function le() {
          return (
            (le =
              Object.assign ||
              function (xe) {
                for (var je = 1; je < arguments.length; je++) {
                  var Fe = arguments[je];
                  for (var He in Fe)
                    Object.prototype.hasOwnProperty.call(Fe, He) &&
                      (xe[He] = Fe[He]);
                }
                return xe;
              }),
            le.apply(this, arguments)
          );
        }
        _(le, "enter_2fa_code_modal_extends");
        const Re = new u.Ay("2fa_modal"),
          ye = {
            enter2faCodeModal: "enter_2fa_code_modal",
            cancelButton: "enter_2fa_code_modal_cancel_button",
          },
          Te = {
            isSSB: !0,
            isSSBSignIn: !0,
            hasPromoOffer: !1,
            shouldRedirect: !1,
            redirectURL: "",
            loggedInTeams: [],
            remember: !1,
            hasRemember: "",
            children: void 0,
            isOpen: !0,
          };
        function De(xe, je) {
          const Fe = (0, s.vS)();
          if (xe !== void 0) {
            const Oe = Fe[xe].two_factor_magic_login;
            Oe !== void 0 && Oe.token && (Oe.token = je),
              (0, s.q9)("pendingAuthTeams", Fe);
          }
        }
        _(De, "updateLocalConfig2fa");
        function Ue(xe) {
          const je = (0, s.vS)();
          if (xe !== void 0) {
            const Fe = je[xe];
            (Fe.two_factor_magic_login = void 0),
              (0, s.q9)("pendingAuthTeams", je);
          }
        }
        _(Ue, "clearLocalConfig2faMagicLogin");
        function Ke(xe) {
          let {
            magicLogin: je,
            teamId: Fe,
            type: He,
            backupType: Oe,
            emergencyLength: Ye,
            emailAddress: at,
            teamName: _t,
            currentTeamId: pt,
            isOpen: Qe,
            closeModal: ct,
          } = xe;
          const [Pt, zt] = (0, t.useState)(je),
            [an, Qt] = (0, t.useState)(null),
            [tn, Ht] = (0, t.useState)(!1),
            Kt = pt ? (0, fe.getStoreInstanceByTeamId)(pt) : void 0,
            qt = (0, t.useCallback)(
              (Mt, Jt, dn) => {
                const rn = {
                  magic_token: dn,
                  ssb: !0,
                  two_factor_native_supported_v2: !0,
                  two_factor_pin: Mt,
                  two_factor_is_backup:
                    Jt === M.REQUEST_BACKUP || Jt === M.SUBMIT_BACKUP,
                };
                return (
                  Jt === M.REQUEST_CODE || Jt === M.REQUEST_BACKUP
                    ? ((rn.two_factor_pin = ""), Ht(!0))
                    : Ht(!1),
                  new n.S((gn) => {
                    (0, i.j)("auth.loginMagic", rn, (Zt, Vt) => {
                      if (Zt && Vt.refreshed_magic_login) {
                        var Sn;
                        zt(Vt.refreshed_magic_login),
                          De(Fe, Vt.refreshed_magic_login),
                          (!((Sn = Vt.reason) === null || Sn === void 0) &&
                            Sn.match(/^missing_/)) ||
                            Qt(Vt.reason),
                          gn(Zt);
                      } else
                        Zt && Vt.team
                          ? (0, ge.A)({
                              currentTeamStore: Kt,
                              newWorkspaceId: Fe,
                              navigateToRouteProps: {
                                routeName: L.o,
                              },
                              shouldAutoSignIn: !0,
                            }).then(() => {
                              ct(), gn(Zt);
                            })
                          : (Ue(Fe),
                            (0, ge.A)({
                              currentTeamStore: Kt,
                              newWorkspaceId: Fe,
                              navigateToRouteProps: {
                                routeName: L.o,
                              },
                            }).then(() => {
                              ct(), gn(Zt);
                            }));
                    });
                  })
                );
              },
              [Fe, Kt, ct]
            );
          (0, d.A)(() => {
            qt("", M.SUBMIT_PRIMARY, Pt ?? "");
          }, []);
          const Tn = Re.t("Finish signing into {teamName}", {
            teamName: _t,
            fallbackHash: "e27938a88eacaa79d651d3aeb0bc39d128f0dd6c",
            fallbackHashNs: "team_picker",
          });
          return t.createElement(
            w.A,
            {
              isOpen: Qe,
              contentLabel: "two_factor",
              maxWidth: "800px",
              centered: !0,
              closeModal: ct,
              dataQa: ye.enter2faCodeModal,
            },
            t.createElement(
              Me.A,
              null,
              t.createElement(ke.A, {
                title: Tn,
              })
            ),
            t.createElement(
              J.A,
              null,
              t.createElement(
                ee.A,
                null,
                t.createElement(
                  "div",
                  {
                    id: "enter-code-app-root",
                  },
                  t.createElement(
                    N,
                    le({}, Te, {
                      teamName: _t,
                      error: an,
                      action: null,
                      magicLogin: Pt || "",
                      twoFactorType: He,
                      twoFactorBackupType: Oe,
                      emailAddress: at,
                      codeResent: tn,
                      redir: "",
                      emergencyCodeLength: Ye,
                      isClientApp: !0,
                      submitOverride: qt,
                    })
                  )
                )
              )
            ),
            t.createElement(
              ne.A,
              null,
              t.createElement(
                pe.A,
                null,
                t.createElement(
                  k.A,
                  {
                    type: "outline",
                    "data-qa": ye.cancelButton,
                  },
                  Re.t("Cancel", {
                    fallbackHash: "77dfd2135f4db726c47299bb55be26f7f4525a46",
                    fallbackHashNs: "admin",
                  })
                )
              )
            )
          );
        }
        _(Ke, "TwoFAModal"), (Ke.displayName = "TwoFAModal");
        const Ze = (0, re.e)(Ke);
        var Q = e(796111729),
          ie = e(9012396182);
        function Ve(xe, je) {
          const Fe = (0, fe.getStateForClientStore)();
          if (!(0, ie.isWorkspacePendingTwoFactor)(Fe, xe)) return !1;
          const He = (0, ie.getWorkspacesMeta)(Fe),
            Oe = He == null ? void 0 : He[xe],
            { two_factor_magic_login: Ye, name: at } = Oe,
            {
              token: _t,
              user_2fa_type: pt,
              user_2fa_backup_type: Qe,
              user_emergency_code_length: ct,
              email: Pt,
            } = Ye;
          let zt;
          return (
            je
              ? (zt = (0, fe.getStoreInstanceByTeamId)(je))
              : (zt = (0, fe.getStoreInstanceByTeamId)(
                  (0, ie.getFocusedWorkspace)(Fe)
                )),
            zt
              ? (zt.dispatch(
                  Ze({
                    magicLogin: _t,
                    teamId: xe,
                    type: pt,
                    backupType: Qe,
                    emergencyLength: ct,
                    teamName: at,
                    currentTeamId: je,
                    emailAddress: Pt,
                  })
                ),
                !0)
              : ((0, Q.Wo)().error(
                  "TWO_FACTOR_SSB",
                  `${xe} is pending 2fa, but no store for ${je}, falling back to openSignIn()`
                ),
                !1)
          );
        }
        _(Ve, "maybeRenderTwoFactorModal");
      },
      4626613428: (W, A, e) => {
        "use strict";
        e.d(A, {
          S4: () => T,
          Ty: () => x,
          ez: () => E,
          lf: () => K,
        });
        var t = e(6839188756),
          n = e(2689960678),
          s = e(6323355797),
          i = e(1247361162),
          d = e(8161242485),
          o = e(9186462665),
          a = e(2047021170),
          r = e(7268021173),
          c = e(6827180593),
          u = e(772817784),
          l = e(117899263),
          m = e(3265910753),
          v = e(3677514771),
          E;
        (function (B) {
          (B.HAS_MENTIONS = "has_mentions"),
            (B.HAS_SLACK_CONNECT_INVITE = "has_slack_connect_invite"),
            (B.HAS_THREADS = "has_threads"),
            (B.IS_ENTERPRISE = "is_enterprise"),
            (B.IS_EXISTING_JOINER = "is_existing_joiner"),
            (B.IS_IN_ACTIVATE_SOLUTIONS_TRIAL_ENTRYPOINTS =
              "is_in_activate_solutions_trial_entrypoints"),
            (B.IS_IN_REVERSE_TRIAL = "is_in_reverse_trial"),
            (B.IS_IN_SOLUTIONS_ONBOARDING_TRIAL =
              "is_in_solutions_onboarding_trial"),
            (B.IS_IN_ACTIVATE_SOLUTIONS_GALLERY_TRIAL =
              "is_in_activate_solutions_gallery_trial"),
            (B.IS_IN_TRIAL = "is_in_trial"),
            (B.IS_ONBOARDING_COMPLETED = "is_onboarding_completed"),
            (B.IS_OVER_TWO_WEEKS_OLD = "is_over_two_weeks_old"),
            (B.IS_USER_PREF_ENABLED = "is_user_pref_enabled");
        })(E || (E = {}));
        const T = "should_show_ia4_tabs",
          g = {
            reason: E.IS_ENTERPRISE,
            shouldShowTabs: !0,
          },
          I = {
            reason: E.IS_EXISTING_JOINER,
            shouldShowTabs: !0,
          },
          f = {
            reason: E.IS_USER_PREF_ENABLED,
            shouldShowTabs: !0,
          },
          y = {
            reason: E.HAS_MENTIONS,
            shouldShowTabs: !0,
          },
          M = {
            reason: E.HAS_THREADS,
            shouldShowTabs: !0,
          },
          p = {
            reason: E.HAS_SLACK_CONNECT_INVITE,
            shouldShowTabs: !0,
          },
          O = {
            reason: E.IS_IN_ACTIVATE_SOLUTIONS_GALLERY_TRIAL,
            shouldShowTabs: !0,
          },
          C = {
            reason: E.IS_IN_TRIAL,
            shouldShowTabs: !0,
          },
          h = {
            reason: E.IS_IN_SOLUTIONS_ONBOARDING_TRIAL,
            shouldShowTabs: !0,
          },
          D = {
            reason: E.IS_IN_REVERSE_TRIAL,
            shouldShowTabs: !0,
          },
          P = {
            reason: E.IS_ONBOARDING_COMPLETED,
            shouldShowTabs: !0,
          },
          S = {
            shouldShowTabs: !0,
            reason: E.IS_OVER_TWO_WEEKS_OLD,
          },
          b = {
            shouldShowTabs: !1,
          },
          K = (0, d.Ay)((B) => {
            const U = (0, v.H7)(B);
            if ((0, t.r7)(U)) return g;
            const G = (0, u.w)(B);
            if (!(0, l._)(B) && G) return I;
            if ((0, a.ty)(B, T)) return f;
            var V;
            if (
              ((V = (0, i.rz)(B)) !== null && V !== void 0 ? V : n.Ml).length >
              0
            )
              return y;
            var q;
            return ((q = (0, i.sG)(B)) !== null && q !== void 0 ? q : n.Ml)
              .length > 0
              ? M
              : (0, o.RU)(B)
              ? p
              : (0, r.iH)(B)
              ? (0, r.G)(B, s.ZO.SolutionsGalleryPromo)
                ? O
                : (0, m.Pz)(B)
                ? h
                : (0, r.G)(B, s.ZO.GoldenGateTrial, s.zG.ReverseTrialDay0)
                ? D
                : C
              : (0, a.ty)(B, "onboarding_complete")
              ? P
              : (0, c.H)(B) >= 14
              ? S
              : b;
          });
        K.meta = {
          name: "createSelector",
          key: "createSelectorshouldShowTabsWithReason",
          description: (B) => {
            const U = (0, v.H7)(B);
            if ((0, t.r7)(U)) return g;
            const G = (0, u.w)(B);
            if (!(0, l._)(B) && G) return I;
            if ((0, a.ty)(B, T)) return f;
            var V;
            if (
              ((V = (0, i.rz)(B)) !== null && V !== void 0 ? V : n.Ml).length >
              0
            )
              return y;
            var q;
            return ((q = (0, i.sG)(B)) !== null && q !== void 0 ? q : n.Ml)
              .length > 0
              ? M
              : (0, o.RU)(B)
              ? p
              : (0, r.iH)(B)
              ? (0, r.G)(B, s.ZO.SolutionsGalleryPromo)
                ? O
                : (0, m.Pz)(B)
                ? h
                : (0, r.G)(B, s.ZO.GoldenGateTrial, s.zG.ReverseTrialDay0)
                ? D
                : C
              : (0, a.ty)(B, "onboarding_complete")
              ? P
              : (0, c.H)(B) >= 14
              ? S
              : b;
          },
        };
        const x = (0, d.Ay)((B) => K(B).shouldShowTabs);
        x.meta = {
          name: "createSelector",
          key: "createSelectorshouldShowTabs",
          description: (B) => K(B).shouldShowTabs,
        };
      },
      3126601217: (W, A, e) => {
        "use strict";
        e.d(A, {
          A4: () => r,
          Af: () => u,
          BI: () => i,
          O4: () => c,
          QW: () => o,
          cS: () => a,
          uS: () => d,
          vh: () => s,
        });
        var t = e(9552526132),
          n = e(1993167390);
        const s = {
            ...t.M,
            HermesWebhook: "hermes_webhook",
            HermesScheduled: "hermes_scheduled",
          },
          i = _((l) => l.type === s.Shortcut, "isShortcutTrigger"),
          d = _(
            (l) => l.type === s.Scheduled || l.type === s.HermesScheduled,
            "isScheduledTrigger"
          ),
          o = _((l) => l.type === s.Event, "isNativeEventTrigger"),
          a = _(
            (l) => l.type === s.Webhook || l.type === s.HermesWebhook,
            "isWebhookTrigger"
          ),
          r = _((l) => l.type === s.External, "isExternalEventTrigger"),
          c = _((l) => l.type === s.Service, "isServiceTrigger"),
          u = _((l) => (0, n.X)(Object.values(t.M), l), "isKnownTriggerType");
      },
      7968796288: (W, A, e) => {
        "use strict";
        e.d(A, {
          A: () => i,
        });
        var t = e(2664504268),
          n = e(8481284327);
        const i = _(() => (0, n.A)(() => (0, t.A)()), "useUniqueId");
      },
      7798793495: (W, A, e) => {
        "use strict";
        e.d(A, {
          G: () => n,
        });
        var t = e(9139930183);
        const n = (0, t.Ay)({}, !0, {
          persistenceEnabled: !1,
          storeKey: "isState",
        });
        n.meta = {
          name: "createReducer",
          key: "createReducerisStateReducer",
        };
      },
      9121100949: (W, A, e) => {
        "use strict";
        e.d(A, {
          $D: () => u,
          OR: () => o,
          RC: () => v,
          Ts: () => r,
          WU: () => m,
          gN: () => a,
          jG: () => l,
          jr: () => E,
          jt: () => d,
          ke: () => t,
          qD: () => c,
          r1: () => i,
          ts: () => n,
          u1: () => s,
        });
        const t = "viewLayoutSidebarWidthIntent",
          n = "viewLayoutSidebarWidthMode",
          s = "viewLayoutSidebarWideWidthIntent",
          i = "viewLayoutSidebarWideWidthMode",
          d = "viewLayoutSidebarExtraWideWidthIntent",
          o = "viewLayoutSidebarExtraWideWidthMode",
          a = "viewLayoutSecondaryWidthIntent",
          r = "viewLayoutSecondaryWidthMode",
          c = "viewLayoutSplitWidthIntent",
          u = "viewLayoutSplitWidthMode",
          l = "viewLayoutIsSidebarVisible",
          m = "viewLayoutIsWorkspaceSwitcherVisible",
          v = "viewLayoutCompactModeEnabled",
          E = "viewLayoutLastSidebarWidth";
      },
    },
    (W) => {
      var A = _((t) => W((W.s = t)), "__webpack_exec__");
      W.O(
        0,
        [
          "gantry-v2-vendors",
          "gantry-v2-vendors-client",
          "gantry-v2-shared",
          "client-boot-styles",
        ],
        () => A(7331146418)
      );
      var e = W.O();
    },
  ]);
})();

//# sourceMappingURL=https://slack.com/source-maps/bv1-13/client-boot.da7b8afda8eabb30234b.min.js.map
